   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"lpc_system_init.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	1
  19              		.global	Port_Init
  20              		.thumb
  21              		.thumb_func
  23              	Port_Init:
  24              	.LFB56:
  25              		.file 1 "../Source Files/lpc_system_init.c"
   1:../Source Files/lpc_system_init.c **** /**********************************************************************
   2:../Source Files/lpc_system_init.c **** * $Id$		lpc_system_init.c
   3:../Source Files/lpc_system_init.c **** *//**
   4:../Source Files/lpc_system_init.c **** * @file		lpc_system_init.c
   5:../Source Files/lpc_system_init.c **** * @brief	Contains all functions support for SYSTEM INIT library
   6:../Source Files/lpc_system_init.c **** * 			on LPC17xx
   7:../Source Files/lpc_system_init.c **** * @version	1.0
   8:../Source Files/lpc_system_init.c **** * @date		24. July. 2013
   9:../Source Files/lpc_system_init.c **** * @author	Dwijay.Edutech Learning Solutions
  10:../Source Files/lpc_system_init.c **** ***********************************************************************
  11:../Source Files/lpc_system_init.c **** * Software that is described herein is for illustrative purposes only
  12:../Source Files/lpc_system_init.c **** * which provides customers with programming information regarding the
  13:../Source Files/lpc_system_init.c **** * products. This software is supplied "AS IS" without any warranties.
  14:../Source Files/lpc_system_init.c **** * NXP Semiconductors assumes no responsibility or liability for the
  15:../Source Files/lpc_system_init.c **** * use of the software, conveys no license or title under any patent,
  16:../Source Files/lpc_system_init.c **** * copyright, or mask work right to the product. NXP Semiconductors
  17:../Source Files/lpc_system_init.c **** * reserves the right to make changes in the software without
  18:../Source Files/lpc_system_init.c **** * notification. NXP Semiconductors also make no representation or
  19:../Source Files/lpc_system_init.c **** * warranty that such application will be suitable for the specified
  20:../Source Files/lpc_system_init.c **** * use without further testing or modification.
  21:../Source Files/lpc_system_init.c **** **********************************************************************/
  22:../Source Files/lpc_system_init.c **** 
  23:../Source Files/lpc_system_init.c **** /* Peripheral group ----------------------------------------------------------- */
  24:../Source Files/lpc_system_init.c **** /** @addtogroup SYSTEM_INIT
  25:../Source Files/lpc_system_init.c ****  * @{
  26:../Source Files/lpc_system_init.c ****  */
  27:../Source Files/lpc_system_init.c **** 
  28:../Source Files/lpc_system_init.c **** /* Includes ------------------------------------------------------------------- */
  29:../Source Files/lpc_system_init.c **** #include "lpc_system_init.h"
  30:../Source Files/lpc_system_init.c **** 
  31:../Source Files/lpc_system_init.c **** /* If this source file built with example, the LPC17xx FW library configuration
  32:../Source Files/lpc_system_init.c ****  * file in each example directory ("lpc17xx_libcfg.h") must be included,
  33:../Source Files/lpc_system_init.c ****  * otherwise the default FW library configuration file must be included instead
  34:../Source Files/lpc_system_init.c ****  */
  35:../Source Files/lpc_system_init.c **** 
  36:../Source Files/lpc_system_init.c **** /** @addtogroup SYSTEM_INIT_Public_Functions
  37:../Source Files/lpc_system_init.c ****  * @{
  38:../Source Files/lpc_system_init.c ****  */
  39:../Source Files/lpc_system_init.c **** 
  40:../Source Files/lpc_system_init.c **** /* Public Functions ----------------------------------------------------------- */
  41:../Source Files/lpc_system_init.c **** /*********************************************************************//**
  42:../Source Files/lpc_system_init.c ****  * @brief	Initial System Init using Port and Peripheral
  43:../Source Files/lpc_system_init.c ****  * @param[in]	None
  44:../Source Files/lpc_system_init.c ****  * @return 		None
  45:../Source Files/lpc_system_init.c ****  **********************************************************************/
  46:../Source Files/lpc_system_init.c **** void System_Init(void)
  47:../Source Files/lpc_system_init.c **** {
  48:../Source Files/lpc_system_init.c **** 	LPC_WDT->WDMOD &= ~WDT_WDMOD_WDEN;  // Disable Watchdog
  49:../Source Files/lpc_system_init.c **** 	SystemInit();						// Initialize system and update core clock
  50:../Source Files/lpc_system_init.c **** 	Port_Init();                        // Port Initialization
  51:../Source Files/lpc_system_init.c **** 	SYSTICK_Config();                   // Systick Initialization
  52:../Source Files/lpc_system_init.c **** 	led_delay = 1000;                   // Heart Beat rate of 1Sec toggle
  53:../Source Files/lpc_system_init.c **** 	NVIC_SetPriority(SysTick_IRQn, 0);  // Set SysTick as Highest Priority
  54:../Source Files/lpc_system_init.c **** 
  55:../Source Files/lpc_system_init.c **** 	UART_Config(LPC_UART0, 115200);       // Uart0 Initialize at 9600 Baud Rate
  56:../Source Files/lpc_system_init.c **** 	SSP_Config (LPC_SSP1);              // Initialize SPI
  57:../Source Files/lpc_system_init.c **** 	I2C_Config (LPC_I2C0);              // Initialize I2C0
  58:../Source Files/lpc_system_init.c **** 	GLCD_Init();                        // Initialize GLCD
  59:../Source Files/lpc_system_init.c **** }
  60:../Source Files/lpc_system_init.c **** 
  61:../Source Files/lpc_system_init.c **** /*********************************************************************//**
  62:../Source Files/lpc_system_init.c ****  * @brief 		General Port Initialization
  63:../Source Files/lpc_system_init.c ****  * @param[in]	None
  64:../Source Files/lpc_system_init.c ****  * @return 		None
  65:../Source Files/lpc_system_init.c ****  **********************************************************************/
  66:../Source Files/lpc_system_init.c **** void Port_Init(void)
  67:../Source Files/lpc_system_init.c **** {
  26              		.loc 1 67 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  68:../Source Files/lpc_system_init.c **** 	GPIO_SetDir(3, _BIT(25), 1);        // Set HeartBeat Led P3.25 to Output
  31              		.loc 1 68 0
  32 0000 0320     		movs	r0, #3
  33 0002 4FF00071 		mov	r1, #33554432
  34 0006 0122     		movs	r2, #1
  69:../Source Files/lpc_system_init.c **** }
  35              		.loc 1 69 0
  68:../Source Files/lpc_system_init.c **** 	GPIO_SetDir(3, _BIT(25), 1);        // Set HeartBeat Led P3.25 to Output
  36              		.loc 1 68 0
  37 0008 FFF7FEBF 		b	GPIO_SetDir
  38              	.LVL0:
  39              		.cfi_endproc
  40              	.LFE56:
  42              		.align	1
  43              		.global	System_Init
  44              		.thumb
  45              		.thumb_func
  47              	System_Init:
  48              	.LFB55:
  47:../Source Files/lpc_system_init.c **** {
  49              		.loc 1 47 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53 000c 08B5     		push	{r3, lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 3, -8
  57              		.cfi_offset 14, -4
  48:../Source Files/lpc_system_init.c **** 	LPC_WDT->WDMOD &= ~WDT_WDMOD_WDEN;  // Disable Watchdog
  58              		.loc 1 48 0
  59 000e 4FF08043 		mov	r3, #1073741824
  60 0012 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
  61 0014 02F0FE00 		and	r0, r2, #254
  62 0018 1870     		strb	r0, [r3, #0]
  49:../Source Files/lpc_system_init.c **** 	SystemInit();						// Initialize system and update core clock
  63              		.loc 1 49 0
  64 001a FFF7FEFF 		bl	SystemInit
  65              	.LVL1:
  50:../Source Files/lpc_system_init.c **** 	Port_Init();                        // Port Initialization
  66              		.loc 1 50 0
  67 001e FFF7FEFF 		bl	Port_Init
  68              	.LVL2:
  51:../Source Files/lpc_system_init.c **** 	SYSTICK_Config();                   // Systick Initialization
  69              		.loc 1 51 0
  70 0022 FFF7FEFF 		bl	SYSTICK_Config
  71              	.LVL3:
  52:../Source Files/lpc_system_init.c **** 	led_delay = 1000;                   // Heart Beat rate of 1Sec toggle
  72              		.loc 1 52 0
  73 0026 0B4B     		ldr	r3, .L3
  74              	.LBB4:
  75              	.LBB5:
  76              		.file 2 "../CM3 Core/core_cm3.h"
   1:../CM3 Core/core_cm3.h **** /**************************************************************************//**
   2:../CM3 Core/core_cm3.h ****  * @file     core_cm3.h
   3:../CM3 Core/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CM3 Core/core_cm3.h ****  * @version  V2.01
   5:../CM3 Core/core_cm3.h ****  * @date     06. December 2010
   6:../CM3 Core/core_cm3.h ****  *
   7:../CM3 Core/core_cm3.h ****  * @note
   8:../CM3 Core/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:../CM3 Core/core_cm3.h ****  *
  10:../CM3 Core/core_cm3.h ****  * @par
  11:../CM3 Core/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../CM3 Core/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../CM3 Core/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:../CM3 Core/core_cm3.h ****  *
  15:../CM3 Core/core_cm3.h ****  * @par
  16:../CM3 Core/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../CM3 Core/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../CM3 Core/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../CM3 Core/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../CM3 Core/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../CM3 Core/core_cm3.h ****  *
  22:../CM3 Core/core_cm3.h ****  ******************************************************************************/
  23:../CM3 Core/core_cm3.h **** #if defined ( __ICCARM__ )
  24:../CM3 Core/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:../CM3 Core/core_cm3.h **** #endif
  26:../CM3 Core/core_cm3.h **** 
  27:../CM3 Core/core_cm3.h **** #ifdef __cplusplus
  28:../CM3 Core/core_cm3.h ****  extern "C" {
  29:../CM3 Core/core_cm3.h **** #endif
  30:../CM3 Core/core_cm3.h **** 
  31:../CM3 Core/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:../CM3 Core/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:../CM3 Core/core_cm3.h **** 
  34:../CM3 Core/core_cm3.h **** 
  35:../CM3 Core/core_cm3.h **** /*******************************************************************************
  36:../CM3 Core/core_cm3.h ****  *                 CMSIS definitions
  37:../CM3 Core/core_cm3.h ****  ******************************************************************************/
  38:../CM3 Core/core_cm3.h **** /** @ingroup  CMSIS
  39:../CM3 Core/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  40:../CM3 Core/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  41:../CM3 Core/core_cm3.h ****    - CMSIS version number
  42:../CM3 Core/core_cm3.h ****    - Cortex-M core
  43:../CM3 Core/core_cm3.h ****    - Cortex-M core Revision Number
  44:../CM3 Core/core_cm3.h ****   @{
  45:../CM3 Core/core_cm3.h ****  */
  46:../CM3 Core/core_cm3.h **** 
  47:../CM3 Core/core_cm3.h **** /*  CMSIS CM3 definitions */
  48:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  49:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  50:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  51:../CM3 Core/core_cm3.h **** 
  52:../CM3 Core/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  53:../CM3 Core/core_cm3.h **** 
  54:../CM3 Core/core_cm3.h **** 
  55:../CM3 Core/core_cm3.h **** #if defined ( __CC_ARM   )
  56:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  57:../CM3 Core/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  58:../CM3 Core/core_cm3.h **** 
  59:../CM3 Core/core_cm3.h **** #elif defined ( __ICCARM__ )
  60:../CM3 Core/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  61:../CM3 Core/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  62:../CM3 Core/core_cm3.h **** 
  63:../CM3 Core/core_cm3.h **** #elif defined   (  __GNUC__  )
  64:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  65:../CM3 Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  66:../CM3 Core/core_cm3.h **** 
  67:../CM3 Core/core_cm3.h **** #elif defined   (  __TASKING__  )
  68:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  69:../CM3 Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  70:../CM3 Core/core_cm3.h **** 
  71:../CM3 Core/core_cm3.h **** #endif
  72:../CM3 Core/core_cm3.h **** 
  73:../CM3 Core/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  74:../CM3 Core/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  75:../CM3 Core/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  76:../CM3 Core/core_cm3.h **** 
  77:../CM3 Core/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  78:../CM3 Core/core_cm3.h **** 
  79:../CM3 Core/core_cm3.h **** 
  80:../CM3 Core/core_cm3.h **** #ifndef __CMSIS_GENERIC
  81:../CM3 Core/core_cm3.h **** 
  82:../CM3 Core/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  83:../CM3 Core/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  84:../CM3 Core/core_cm3.h **** 
  85:../CM3 Core/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  86:../CM3 Core/core_cm3.h **** #ifdef __cplusplus
  87:../CM3 Core/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  88:../CM3 Core/core_cm3.h **** #else
  89:../CM3 Core/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  90:../CM3 Core/core_cm3.h **** #endif
  91:../CM3 Core/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
  92:../CM3 Core/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
  93:../CM3 Core/core_cm3.h **** 
  94:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
  95:../CM3 Core/core_cm3.h **** 
  96:../CM3 Core/core_cm3.h **** 
  97:../CM3 Core/core_cm3.h **** 
  98:../CM3 Core/core_cm3.h **** /*******************************************************************************
  99:../CM3 Core/core_cm3.h ****  *                 Register Abstraction
 100:../CM3 Core/core_cm3.h ****  ******************************************************************************/
 101:../CM3 Core/core_cm3.h **** 
 102:../CM3 Core/core_cm3.h **** /** @ingroup  CMSIS
 103:../CM3 Core/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 104:../CM3 Core/core_cm3.h ****   Core Register contain:
 105:../CM3 Core/core_cm3.h ****   - Core Register
 106:../CM3 Core/core_cm3.h ****   - Core NVIC Register
 107:../CM3 Core/core_cm3.h ****   - Core SCB Register
 108:../CM3 Core/core_cm3.h ****   - Core SysTick Register
 109:../CM3 Core/core_cm3.h ****   - Core Debug Register
 110:../CM3 Core/core_cm3.h ****   - Core MPU Register
 111:../CM3 Core/core_cm3.h **** */
 112:../CM3 Core/core_cm3.h **** 
 113:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 114:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 115:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 116:../CM3 Core/core_cm3.h ****   @{
 117:../CM3 Core/core_cm3.h ****  */
 118:../CM3 Core/core_cm3.h **** 
 119:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 120:../CM3 Core/core_cm3.h ****  */
 121:../CM3 Core/core_cm3.h **** typedef union
 122:../CM3 Core/core_cm3.h **** {
 123:../CM3 Core/core_cm3.h ****   struct
 124:../CM3 Core/core_cm3.h ****   {
 125:../CM3 Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 126:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 127:../CM3 Core/core_cm3.h **** #else
 128:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 129:../CM3 Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 130:../CM3 Core/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 131:../CM3 Core/core_cm3.h **** #endif
 132:../CM3 Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 133:../CM3 Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 134:../CM3 Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 135:../CM3 Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 136:../CM3 Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 137:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 138:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 139:../CM3 Core/core_cm3.h **** } APSR_Type;
 140:../CM3 Core/core_cm3.h **** 
 141:../CM3 Core/core_cm3.h **** 
 142:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 143:../CM3 Core/core_cm3.h ****  */
 144:../CM3 Core/core_cm3.h **** typedef union
 145:../CM3 Core/core_cm3.h **** {
 146:../CM3 Core/core_cm3.h ****   struct
 147:../CM3 Core/core_cm3.h ****   {
 148:../CM3 Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 149:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 150:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 151:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 152:../CM3 Core/core_cm3.h **** } IPSR_Type;
 153:../CM3 Core/core_cm3.h **** 
 154:../CM3 Core/core_cm3.h **** 
 155:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 156:../CM3 Core/core_cm3.h ****  */
 157:../CM3 Core/core_cm3.h **** typedef union
 158:../CM3 Core/core_cm3.h **** {
 159:../CM3 Core/core_cm3.h ****   struct
 160:../CM3 Core/core_cm3.h ****   {
 161:../CM3 Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 162:../CM3 Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 163:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 164:../CM3 Core/core_cm3.h **** #else
 165:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 166:../CM3 Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 167:../CM3 Core/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 168:../CM3 Core/core_cm3.h **** #endif
 169:../CM3 Core/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 170:../CM3 Core/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 171:../CM3 Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 172:../CM3 Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 173:../CM3 Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 174:../CM3 Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 175:../CM3 Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 176:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 177:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 178:../CM3 Core/core_cm3.h **** } xPSR_Type;
 179:../CM3 Core/core_cm3.h **** 
 180:../CM3 Core/core_cm3.h **** 
 181:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 182:../CM3 Core/core_cm3.h ****  */
 183:../CM3 Core/core_cm3.h **** typedef union
 184:../CM3 Core/core_cm3.h **** {
 185:../CM3 Core/core_cm3.h ****   struct
 186:../CM3 Core/core_cm3.h ****   {
 187:../CM3 Core/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 188:../CM3 Core/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 189:../CM3 Core/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 190:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 191:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 192:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 193:../CM3 Core/core_cm3.h **** } CONTROL_Type;
 194:../CM3 Core/core_cm3.h **** 
 195:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_CORE */
 196:../CM3 Core/core_cm3.h **** 
 197:../CM3 Core/core_cm3.h **** 
 198:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 199:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 200:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 201:../CM3 Core/core_cm3.h ****   @{
 202:../CM3 Core/core_cm3.h ****  */
 203:../CM3 Core/core_cm3.h **** 
 204:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 205:../CM3 Core/core_cm3.h ****  */
 206:../CM3 Core/core_cm3.h **** typedef struct
 207:../CM3 Core/core_cm3.h **** {
 208:../CM3 Core/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 209:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0[24];
 210:../CM3 Core/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 211:../CM3 Core/core_cm3.h ****        uint32_t RSERVED1[24];
 212:../CM3 Core/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 213:../CM3 Core/core_cm3.h ****        uint32_t RESERVED2[24];
 214:../CM3 Core/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 215:../CM3 Core/core_cm3.h ****        uint32_t RESERVED3[24];
 216:../CM3 Core/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 217:../CM3 Core/core_cm3.h ****        uint32_t RESERVED4[56];
 218:../CM3 Core/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 219:../CM3 Core/core_cm3.h ****        uint32_t RESERVED5[644];
 220:../CM3 Core/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 221:../CM3 Core/core_cm3.h **** }  NVIC_Type;
 222:../CM3 Core/core_cm3.h **** 
 223:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 224:../CM3 Core/core_cm3.h **** 
 225:../CM3 Core/core_cm3.h **** 
 226:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 227:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 228:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 229:../CM3 Core/core_cm3.h ****   @{
 230:../CM3 Core/core_cm3.h ****  */
 231:../CM3 Core/core_cm3.h **** 
 232:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 233:../CM3 Core/core_cm3.h ****  */
 234:../CM3 Core/core_cm3.h **** typedef struct
 235:../CM3 Core/core_cm3.h **** {
 236:../CM3 Core/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 237:../CM3 Core/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 238:../CM3 Core/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 239:../CM3 Core/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 240:../CM3 Core/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 241:../CM3 Core/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 242:../CM3 Core/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 243:../CM3 Core/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 244:../CM3 Core/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 245:../CM3 Core/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 246:../CM3 Core/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 247:../CM3 Core/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 248:../CM3 Core/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 249:../CM3 Core/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 250:../CM3 Core/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 251:../CM3 Core/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 252:../CM3 Core/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 253:../CM3 Core/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 254:../CM3 Core/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 255:../CM3 Core/core_cm3.h **** } SCB_Type;
 256:../CM3 Core/core_cm3.h **** 
 257:../CM3 Core/core_cm3.h **** /* SCB CPUID Register Definitions */
 258:../CM3 Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 259:../CM3 Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 260:../CM3 Core/core_cm3.h **** 
 261:../CM3 Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 262:../CM3 Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 263:../CM3 Core/core_cm3.h **** 
 264:../CM3 Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 265:../CM3 Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 266:../CM3 Core/core_cm3.h **** 
 267:../CM3 Core/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 268:../CM3 Core/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 269:../CM3 Core/core_cm3.h **** 
 270:../CM3 Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 271:../CM3 Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 272:../CM3 Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 273:../CM3 Core/core_cm3.h **** 
 274:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 275:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 276:../CM3 Core/core_cm3.h **** 
 277:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 278:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 279:../CM3 Core/core_cm3.h **** 
 280:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 281:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 282:../CM3 Core/core_cm3.h **** 
 283:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 284:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 285:../CM3 Core/core_cm3.h **** 
 286:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 287:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 288:../CM3 Core/core_cm3.h **** 
 289:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 290:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 291:../CM3 Core/core_cm3.h **** 
 292:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 293:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 294:../CM3 Core/core_cm3.h **** 
 295:../CM3 Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 296:../CM3 Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 297:../CM3 Core/core_cm3.h **** 
 298:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 299:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 300:../CM3 Core/core_cm3.h **** 
 301:../CM3 Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 302:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 303:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 304:../CM3 Core/core_cm3.h **** 
 305:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 306:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 307:../CM3 Core/core_cm3.h **** 
 308:../CM3 Core/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 309:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 310:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 311:../CM3 Core/core_cm3.h **** 
 312:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 313:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 314:../CM3 Core/core_cm3.h **** 
 315:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 316:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 317:../CM3 Core/core_cm3.h **** 
 318:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 319:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 320:../CM3 Core/core_cm3.h **** 
 321:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 322:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 323:../CM3 Core/core_cm3.h **** 
 324:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 325:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 326:../CM3 Core/core_cm3.h **** 
 327:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 328:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 329:../CM3 Core/core_cm3.h **** 
 330:../CM3 Core/core_cm3.h **** /* SCB System Control Register Definitions */
 331:../CM3 Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 332:../CM3 Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 333:../CM3 Core/core_cm3.h **** 
 334:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 335:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 336:../CM3 Core/core_cm3.h **** 
 337:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 338:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 339:../CM3 Core/core_cm3.h **** 
 340:../CM3 Core/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 341:../CM3 Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 342:../CM3 Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 343:../CM3 Core/core_cm3.h **** 
 344:../CM3 Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 345:../CM3 Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 346:../CM3 Core/core_cm3.h **** 
 347:../CM3 Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 348:../CM3 Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 349:../CM3 Core/core_cm3.h **** 
 350:../CM3 Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 351:../CM3 Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 352:../CM3 Core/core_cm3.h **** 
 353:../CM3 Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 354:../CM3 Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 355:../CM3 Core/core_cm3.h **** 
 356:../CM3 Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 357:../CM3 Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 358:../CM3 Core/core_cm3.h **** 
 359:../CM3 Core/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 360:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 361:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 362:../CM3 Core/core_cm3.h **** 
 363:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 364:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 365:../CM3 Core/core_cm3.h **** 
 366:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 367:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 368:../CM3 Core/core_cm3.h **** 
 369:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 370:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 371:../CM3 Core/core_cm3.h **** 
 372:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 373:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 374:../CM3 Core/core_cm3.h **** 
 375:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 376:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 377:../CM3 Core/core_cm3.h **** 
 378:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 379:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 380:../CM3 Core/core_cm3.h **** 
 381:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 382:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 383:../CM3 Core/core_cm3.h **** 
 384:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 385:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 386:../CM3 Core/core_cm3.h **** 
 387:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 388:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 389:../CM3 Core/core_cm3.h **** 
 390:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 391:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 392:../CM3 Core/core_cm3.h **** 
 393:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 394:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 395:../CM3 Core/core_cm3.h **** 
 396:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 397:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 398:../CM3 Core/core_cm3.h **** 
 399:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 400:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 401:../CM3 Core/core_cm3.h **** 
 402:../CM3 Core/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 403:../CM3 Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 404:../CM3 Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 405:../CM3 Core/core_cm3.h **** 
 406:../CM3 Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 407:../CM3 Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 408:../CM3 Core/core_cm3.h **** 
 409:../CM3 Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 410:../CM3 Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 411:../CM3 Core/core_cm3.h **** 
 412:../CM3 Core/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 413:../CM3 Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 414:../CM3 Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 415:../CM3 Core/core_cm3.h **** 
 416:../CM3 Core/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 417:../CM3 Core/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 418:../CM3 Core/core_cm3.h **** 
 419:../CM3 Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 420:../CM3 Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 421:../CM3 Core/core_cm3.h **** 
 422:../CM3 Core/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 423:../CM3 Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 424:../CM3 Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 425:../CM3 Core/core_cm3.h **** 
 426:../CM3 Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 427:../CM3 Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 428:../CM3 Core/core_cm3.h **** 
 429:../CM3 Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 430:../CM3 Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 431:../CM3 Core/core_cm3.h **** 
 432:../CM3 Core/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 433:../CM3 Core/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 434:../CM3 Core/core_cm3.h **** 
 435:../CM3 Core/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 436:../CM3 Core/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 437:../CM3 Core/core_cm3.h **** 
 438:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_SCB */
 439:../CM3 Core/core_cm3.h **** 
 440:../CM3 Core/core_cm3.h **** 
 441:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 442:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 443:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 444:../CM3 Core/core_cm3.h ****   @{
 445:../CM3 Core/core_cm3.h ****  */
 446:../CM3 Core/core_cm3.h **** 
 447:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 448:../CM3 Core/core_cm3.h ****  */
 449:../CM3 Core/core_cm3.h **** typedef struct
 450:../CM3 Core/core_cm3.h **** {
 451:../CM3 Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 452:../CM3 Core/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 453:../CM3 Core/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 454:../CM3 Core/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 455:../CM3 Core/core_cm3.h **** } SysTick_Type;
 456:../CM3 Core/core_cm3.h **** 
 457:../CM3 Core/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 458:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 459:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 460:../CM3 Core/core_cm3.h **** 
 461:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 462:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 463:../CM3 Core/core_cm3.h **** 
 464:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 465:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 466:../CM3 Core/core_cm3.h **** 
 467:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 468:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 469:../CM3 Core/core_cm3.h **** 
 470:../CM3 Core/core_cm3.h **** /* SysTick Reload Register Definitions */
 471:../CM3 Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 472:../CM3 Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 473:../CM3 Core/core_cm3.h **** 
 474:../CM3 Core/core_cm3.h **** /* SysTick Current Register Definitions */
 475:../CM3 Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 476:../CM3 Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 477:../CM3 Core/core_cm3.h **** 
 478:../CM3 Core/core_cm3.h **** /* SysTick Calibration Register Definitions */
 479:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 480:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 481:../CM3 Core/core_cm3.h **** 
 482:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 483:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 484:../CM3 Core/core_cm3.h **** 
 485:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 486:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 487:../CM3 Core/core_cm3.h **** 
 488:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 489:../CM3 Core/core_cm3.h **** 
 490:../CM3 Core/core_cm3.h **** 
 491:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 492:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 493:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 494:../CM3 Core/core_cm3.h ****   @{
 495:../CM3 Core/core_cm3.h ****  */
 496:../CM3 Core/core_cm3.h **** 
 497:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 498:../CM3 Core/core_cm3.h ****  */
 499:../CM3 Core/core_cm3.h **** typedef struct
 500:../CM3 Core/core_cm3.h **** {
 501:../CM3 Core/core_cm3.h ****   __O  union
 502:../CM3 Core/core_cm3.h ****   {
 503:../CM3 Core/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 504:../CM3 Core/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 505:../CM3 Core/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 506:../CM3 Core/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 507:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0[864];
 508:../CM3 Core/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 509:../CM3 Core/core_cm3.h ****        uint32_t RESERVED1[15];
 510:../CM3 Core/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 511:../CM3 Core/core_cm3.h ****        uint32_t RESERVED2[15];
 512:../CM3 Core/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 513:../CM3 Core/core_cm3.h ****        uint32_t RESERVED3[29];
 514:../CM3 Core/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 515:../CM3 Core/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 516:../CM3 Core/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 517:../CM3 Core/core_cm3.h ****        uint32_t RESERVED4[43];
 518:../CM3 Core/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 519:../CM3 Core/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 520:../CM3 Core/core_cm3.h ****        uint32_t RESERVED5[6];
 521:../CM3 Core/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 522:../CM3 Core/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 523:../CM3 Core/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 524:../CM3 Core/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 525:../CM3 Core/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 526:../CM3 Core/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 527:../CM3 Core/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 528:../CM3 Core/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 529:../CM3 Core/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 530:../CM3 Core/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 531:../CM3 Core/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 532:../CM3 Core/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 533:../CM3 Core/core_cm3.h **** } ITM_Type;
 534:../CM3 Core/core_cm3.h **** 
 535:../CM3 Core/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 536:../CM3 Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 537:../CM3 Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 538:../CM3 Core/core_cm3.h **** 
 539:../CM3 Core/core_cm3.h **** /* ITM Trace Control Register Definitions */
 540:../CM3 Core/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 541:../CM3 Core/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 542:../CM3 Core/core_cm3.h **** 
 543:../CM3 Core/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 544:../CM3 Core/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 545:../CM3 Core/core_cm3.h **** 
 546:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 547:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 548:../CM3 Core/core_cm3.h **** 
 549:../CM3 Core/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 550:../CM3 Core/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 551:../CM3 Core/core_cm3.h **** 
 552:../CM3 Core/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 553:../CM3 Core/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 554:../CM3 Core/core_cm3.h **** 
 555:../CM3 Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 556:../CM3 Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 557:../CM3 Core/core_cm3.h **** 
 558:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 559:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 560:../CM3 Core/core_cm3.h **** 
 561:../CM3 Core/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 562:../CM3 Core/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 563:../CM3 Core/core_cm3.h **** 
 564:../CM3 Core/core_cm3.h **** /* ITM Integration Write Register Definitions */
 565:../CM3 Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 566:../CM3 Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 567:../CM3 Core/core_cm3.h **** 
 568:../CM3 Core/core_cm3.h **** /* ITM Integration Read Register Definitions */
 569:../CM3 Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 570:../CM3 Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 571:../CM3 Core/core_cm3.h **** 
 572:../CM3 Core/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 573:../CM3 Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 574:../CM3 Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 575:../CM3 Core/core_cm3.h **** 
 576:../CM3 Core/core_cm3.h **** /* ITM Lock Status Register Definitions */
 577:../CM3 Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 578:../CM3 Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 579:../CM3 Core/core_cm3.h **** 
 580:../CM3 Core/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 581:../CM3 Core/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 582:../CM3 Core/core_cm3.h **** 
 583:../CM3 Core/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 584:../CM3 Core/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 585:../CM3 Core/core_cm3.h **** 
 586:../CM3 Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 587:../CM3 Core/core_cm3.h **** 
 588:../CM3 Core/core_cm3.h **** 
 589:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 590:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 591:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 592:../CM3 Core/core_cm3.h ****   @{
 593:../CM3 Core/core_cm3.h ****  */
 594:../CM3 Core/core_cm3.h **** 
 595:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 596:../CM3 Core/core_cm3.h ****  */
 597:../CM3 Core/core_cm3.h **** typedef struct
 598:../CM3 Core/core_cm3.h **** {
 599:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0;
 600:../CM3 Core/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 601:../CM3 Core/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 602:../CM3 Core/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 603:../CM3 Core/core_cm3.h **** #else
 604:../CM3 Core/core_cm3.h ****        uint32_t RESERVED1;
 605:../CM3 Core/core_cm3.h **** #endif
 606:../CM3 Core/core_cm3.h **** } InterruptType_Type;
 607:../CM3 Core/core_cm3.h **** 
 608:../CM3 Core/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 609:../CM3 Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 610:../CM3 Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 611:../CM3 Core/core_cm3.h **** 
 612:../CM3 Core/core_cm3.h **** /* Auxiliary Control Register Definitions */
 613:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 614:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 615:../CM3 Core/core_cm3.h **** 
 616:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 617:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 618:../CM3 Core/core_cm3.h **** 
 619:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 620:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 621:../CM3 Core/core_cm3.h **** 
 622:../CM3 Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 623:../CM3 Core/core_cm3.h **** 
 624:../CM3 Core/core_cm3.h **** 
 625:../CM3 Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 626:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 627:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 628:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 629:../CM3 Core/core_cm3.h ****   @{
 630:../CM3 Core/core_cm3.h ****  */
 631:../CM3 Core/core_cm3.h **** 
 632:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 633:../CM3 Core/core_cm3.h ****  */
 634:../CM3 Core/core_cm3.h **** typedef struct
 635:../CM3 Core/core_cm3.h **** {
 636:../CM3 Core/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 637:../CM3 Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 638:../CM3 Core/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 639:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 640:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 641:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 642:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 643:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 644:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 645:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 646:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 647:../CM3 Core/core_cm3.h **** } MPU_Type;
 648:../CM3 Core/core_cm3.h **** 
 649:../CM3 Core/core_cm3.h **** /* MPU Type Register */
 650:../CM3 Core/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 651:../CM3 Core/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 652:../CM3 Core/core_cm3.h **** 
 653:../CM3 Core/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 654:../CM3 Core/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 655:../CM3 Core/core_cm3.h **** 
 656:../CM3 Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 657:../CM3 Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 658:../CM3 Core/core_cm3.h **** 
 659:../CM3 Core/core_cm3.h **** /* MPU Control Register */
 660:../CM3 Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 661:../CM3 Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 662:../CM3 Core/core_cm3.h **** 
 663:../CM3 Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 664:../CM3 Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 665:../CM3 Core/core_cm3.h **** 
 666:../CM3 Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 667:../CM3 Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 668:../CM3 Core/core_cm3.h **** 
 669:../CM3 Core/core_cm3.h **** /* MPU Region Number Register */
 670:../CM3 Core/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 671:../CM3 Core/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 672:../CM3 Core/core_cm3.h **** 
 673:../CM3 Core/core_cm3.h **** /* MPU Region Base Address Register */
 674:../CM3 Core/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 675:../CM3 Core/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 676:../CM3 Core/core_cm3.h **** 
 677:../CM3 Core/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 678:../CM3 Core/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 679:../CM3 Core/core_cm3.h **** 
 680:../CM3 Core/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 681:../CM3 Core/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 682:../CM3 Core/core_cm3.h **** 
 683:../CM3 Core/core_cm3.h **** /* MPU Region Attribute and Size Register */
 684:../CM3 Core/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 685:../CM3 Core/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 686:../CM3 Core/core_cm3.h **** 
 687:../CM3 Core/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 688:../CM3 Core/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 689:../CM3 Core/core_cm3.h **** 
 690:../CM3 Core/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 691:../CM3 Core/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 692:../CM3 Core/core_cm3.h **** 
 693:../CM3 Core/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 694:../CM3 Core/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 695:../CM3 Core/core_cm3.h **** 
 696:../CM3 Core/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 697:../CM3 Core/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 698:../CM3 Core/core_cm3.h **** 
 699:../CM3 Core/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 700:../CM3 Core/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 701:../CM3 Core/core_cm3.h **** 
 702:../CM3 Core/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 703:../CM3 Core/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 704:../CM3 Core/core_cm3.h **** 
 705:../CM3 Core/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 706:../CM3 Core/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 707:../CM3 Core/core_cm3.h **** 
 708:../CM3 Core/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 709:../CM3 Core/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 710:../CM3 Core/core_cm3.h **** 
 711:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_MPU */
 712:../CM3 Core/core_cm3.h **** #endif
 713:../CM3 Core/core_cm3.h **** 
 714:../CM3 Core/core_cm3.h **** 
 715:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 716:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 717:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 718:../CM3 Core/core_cm3.h ****   @{
 719:../CM3 Core/core_cm3.h ****  */
 720:../CM3 Core/core_cm3.h **** 
 721:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 722:../CM3 Core/core_cm3.h ****  */
 723:../CM3 Core/core_cm3.h **** typedef struct
 724:../CM3 Core/core_cm3.h **** {
 725:../CM3 Core/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 726:../CM3 Core/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 727:../CM3 Core/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 728:../CM3 Core/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 729:../CM3 Core/core_cm3.h **** } CoreDebug_Type;
 730:../CM3 Core/core_cm3.h **** 
 731:../CM3 Core/core_cm3.h **** /* Debug Halting Control and Status Register */
 732:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 733:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 734:../CM3 Core/core_cm3.h **** 
 735:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 736:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 737:../CM3 Core/core_cm3.h **** 
 738:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 739:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 740:../CM3 Core/core_cm3.h **** 
 741:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 742:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 743:../CM3 Core/core_cm3.h **** 
 744:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 745:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 746:../CM3 Core/core_cm3.h **** 
 747:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 748:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 749:../CM3 Core/core_cm3.h **** 
 750:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 751:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 752:../CM3 Core/core_cm3.h **** 
 753:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 754:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 755:../CM3 Core/core_cm3.h **** 
 756:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 757:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 758:../CM3 Core/core_cm3.h **** 
 759:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 760:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 761:../CM3 Core/core_cm3.h **** 
 762:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 763:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 764:../CM3 Core/core_cm3.h **** 
 765:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 766:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 767:../CM3 Core/core_cm3.h **** 
 768:../CM3 Core/core_cm3.h **** /* Debug Core Register Selector Register */
 769:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 770:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 771:../CM3 Core/core_cm3.h **** 
 772:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 773:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 774:../CM3 Core/core_cm3.h **** 
 775:../CM3 Core/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 776:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 777:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 778:../CM3 Core/core_cm3.h **** 
 779:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 780:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 781:../CM3 Core/core_cm3.h **** 
 782:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 783:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 784:../CM3 Core/core_cm3.h **** 
 785:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 786:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 787:../CM3 Core/core_cm3.h **** 
 788:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 789:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 790:../CM3 Core/core_cm3.h **** 
 791:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 792:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 793:../CM3 Core/core_cm3.h **** 
 794:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 795:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 796:../CM3 Core/core_cm3.h **** 
 797:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 798:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 799:../CM3 Core/core_cm3.h **** 
 800:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 801:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 802:../CM3 Core/core_cm3.h **** 
 803:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 804:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 805:../CM3 Core/core_cm3.h **** 
 806:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 807:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 808:../CM3 Core/core_cm3.h **** 
 809:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 810:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 811:../CM3 Core/core_cm3.h **** 
 812:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 813:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 814:../CM3 Core/core_cm3.h **** 
 815:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 816:../CM3 Core/core_cm3.h **** 
 817:../CM3 Core/core_cm3.h **** 
 818:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 819:../CM3 Core/core_cm3.h ****   @{
 820:../CM3 Core/core_cm3.h ****  */
 821:../CM3 Core/core_cm3.h **** 
 822:../CM3 Core/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 823:../CM3 Core/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 824:../CM3 Core/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 825:../CM3 Core/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 826:../CM3 Core/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 827:../CM3 Core/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 828:../CM3 Core/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 829:../CM3 Core/core_cm3.h **** 
 830:../CM3 Core/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 831:../CM3 Core/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 832:../CM3 Core/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 833:../CM3 Core/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 834:../CM3 Core/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 835:../CM3 Core/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 836:../CM3 Core/core_cm3.h **** 
 837:../CM3 Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 838:../CM3 Core/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 839:../CM3 Core/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 840:../CM3 Core/core_cm3.h **** #endif
 841:../CM3 Core/core_cm3.h **** 
 842:../CM3 Core/core_cm3.h **** /*@} */
 843:../CM3 Core/core_cm3.h **** 
 844:../CM3 Core/core_cm3.h **** 
 845:../CM3 Core/core_cm3.h **** 
 846:../CM3 Core/core_cm3.h **** /*******************************************************************************
 847:../CM3 Core/core_cm3.h ****  *                Hardware Abstraction Layer
 848:../CM3 Core/core_cm3.h ****  ******************************************************************************/
 849:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS
 850:../CM3 Core/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 851:../CM3 Core/core_cm3.h ****   Core Function Interface contains:
 852:../CM3 Core/core_cm3.h ****   - Core NVIC Functions
 853:../CM3 Core/core_cm3.h ****   - Core SysTick Functions
 854:../CM3 Core/core_cm3.h ****   - Core Debug Functions
 855:../CM3 Core/core_cm3.h ****   - Core Register Access Functions
 856:../CM3 Core/core_cm3.h **** */
 857:../CM3 Core/core_cm3.h **** 
 858:../CM3 Core/core_cm3.h **** 
 859:../CM3 Core/core_cm3.h **** 
 860:../CM3 Core/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 861:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 862:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 863:../CM3 Core/core_cm3.h ****   @{
 864:../CM3 Core/core_cm3.h ****  */
 865:../CM3 Core/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 866:../CM3 Core/core_cm3.h ****  * @{
 867:../CM3 Core/core_cm3.h ****  */
 868:../CM3 Core/core_cm3.h **** /** \brief  Set Priority Grouping
 869:../CM3 Core/core_cm3.h **** 
 870:../CM3 Core/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 871:../CM3 Core/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 872:../CM3 Core/core_cm3.h ****   Only values from 0..7 are used.
 873:../CM3 Core/core_cm3.h ****   In case of a conflict between priority grouping and available
 874:../CM3 Core/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 875:../CM3 Core/core_cm3.h **** 
 876:../CM3 Core/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 877:../CM3 Core/core_cm3.h ****  */
 878:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 879:../CM3 Core/core_cm3.h **** {
 880:../CM3 Core/core_cm3.h ****   uint32_t reg_value;
 881:../CM3 Core/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 882:../CM3 Core/core_cm3.h **** 
 883:../CM3 Core/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 884:../CM3 Core/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 885:../CM3 Core/core_cm3.h ****   reg_value  =  (reg_value                       |
 886:../CM3 Core/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 887:../CM3 Core/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 888:../CM3 Core/core_cm3.h ****   SCB->AIRCR =  reg_value;
 889:../CM3 Core/core_cm3.h **** }
 890:../CM3 Core/core_cm3.h **** 
 891:../CM3 Core/core_cm3.h **** 
 892:../CM3 Core/core_cm3.h **** /** \brief  Get Priority Grouping
 893:../CM3 Core/core_cm3.h **** 
 894:../CM3 Core/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 895:../CM3 Core/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 896:../CM3 Core/core_cm3.h **** 
 897:../CM3 Core/core_cm3.h ****     \return                Priority grouping field
 898:../CM3 Core/core_cm3.h ****  */
 899:../CM3 Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 900:../CM3 Core/core_cm3.h **** {
 901:../CM3 Core/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 902:../CM3 Core/core_cm3.h **** }
 903:../CM3 Core/core_cm3.h **** 
 904:../CM3 Core/core_cm3.h **** 
 905:../CM3 Core/core_cm3.h **** /** \brief  Enable External Interrupt
 906:../CM3 Core/core_cm3.h **** 
 907:../CM3 Core/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 908:../CM3 Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 909:../CM3 Core/core_cm3.h **** 
 910:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 911:../CM3 Core/core_cm3.h ****  */
 912:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 913:../CM3 Core/core_cm3.h **** {
 914:../CM3 Core/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 915:../CM3 Core/core_cm3.h **** }
 916:../CM3 Core/core_cm3.h **** 
 917:../CM3 Core/core_cm3.h **** 
 918:../CM3 Core/core_cm3.h **** /** \brief  Disable External Interrupt
 919:../CM3 Core/core_cm3.h **** 
 920:../CM3 Core/core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 921:../CM3 Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 922:../CM3 Core/core_cm3.h **** 
 923:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 924:../CM3 Core/core_cm3.h ****  */
 925:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 926:../CM3 Core/core_cm3.h **** {
 927:../CM3 Core/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 928:../CM3 Core/core_cm3.h **** }
 929:../CM3 Core/core_cm3.h **** 
 930:../CM3 Core/core_cm3.h **** 
 931:../CM3 Core/core_cm3.h **** /** \brief  Get Pending Interrupt
 932:../CM3 Core/core_cm3.h **** 
 933:../CM3 Core/core_cm3.h ****     This function reads the pending register in the NVIC and returns the pending bit
 934:../CM3 Core/core_cm3.h ****     for the specified interrupt.
 935:../CM3 Core/core_cm3.h **** 
 936:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 937:../CM3 Core/core_cm3.h ****     \return             0  Interrupt status is not pending
 938:../CM3 Core/core_cm3.h ****     \return             1  Interrupt status is pending
 939:../CM3 Core/core_cm3.h ****  */
 940:../CM3 Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 941:../CM3 Core/core_cm3.h **** {
 942:../CM3 Core/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
 943:../CM3 Core/core_cm3.h **** }
 944:../CM3 Core/core_cm3.h **** 
 945:../CM3 Core/core_cm3.h **** 
 946:../CM3 Core/core_cm3.h **** /** \brief  Set Pending Interrupt
 947:../CM3 Core/core_cm3.h **** 
 948:../CM3 Core/core_cm3.h ****     This function sets the pending bit for the specified interrupt.
 949:../CM3 Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 950:../CM3 Core/core_cm3.h **** 
 951:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 952:../CM3 Core/core_cm3.h ****  */
 953:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 954:../CM3 Core/core_cm3.h **** {
 955:../CM3 Core/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
 956:../CM3 Core/core_cm3.h **** }
 957:../CM3 Core/core_cm3.h **** 
 958:../CM3 Core/core_cm3.h **** 
 959:../CM3 Core/core_cm3.h **** /** \brief  Clear Pending Interrupt
 960:../CM3 Core/core_cm3.h **** 
 961:../CM3 Core/core_cm3.h ****     This function clears the pending bit for the specified interrupt.
 962:../CM3 Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 963:../CM3 Core/core_cm3.h **** 
 964:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 965:../CM3 Core/core_cm3.h ****  */
 966:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 967:../CM3 Core/core_cm3.h **** {
 968:../CM3 Core/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 969:../CM3 Core/core_cm3.h **** }
 970:../CM3 Core/core_cm3.h **** 
 971:../CM3 Core/core_cm3.h **** 
 972:../CM3 Core/core_cm3.h **** /** \brief  Get Active Interrupt
 973:../CM3 Core/core_cm3.h **** 
 974:../CM3 Core/core_cm3.h ****     This function reads the active register in NVIC and returns the active bit.
 975:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get active
 976:../CM3 Core/core_cm3.h ****     \return             0  Interrupt status is not active
 977:../CM3 Core/core_cm3.h ****     \return             1  Interrupt status is active
 978:../CM3 Core/core_cm3.h ****  */
 979:../CM3 Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
 980:../CM3 Core/core_cm3.h **** {
 981:../CM3 Core/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
 982:../CM3 Core/core_cm3.h **** }
 983:../CM3 Core/core_cm3.h **** 
 984:../CM3 Core/core_cm3.h **** 
 985:../CM3 Core/core_cm3.h **** /** \brief  Set Interrupt Priority
 986:../CM3 Core/core_cm3.h **** 
 987:../CM3 Core/core_cm3.h ****     This function sets the priority for the specified interrupt. The interrupt
 988:../CM3 Core/core_cm3.h ****     number can be positive to specify an external (device specific)
 989:../CM3 Core/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
 990:../CM3 Core/core_cm3.h **** 
 991:../CM3 Core/core_cm3.h ****     Note: The priority cannot be set for every core interrupt.
 992:../CM3 Core/core_cm3.h **** 
 993:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set priority
 994:../CM3 Core/core_cm3.h ****     \param [in]  priority  Priority to set
 995:../CM3 Core/core_cm3.h ****  */
 996:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 997:../CM3 Core/core_cm3.h **** {
 998:../CM3 Core/core_cm3.h ****   if(IRQn < 0) {
 999:../CM3 Core/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  77              		.loc 2 999 0
  78 0028 0B48     		ldr	r0, .L3+4
  79 002a 0022     		movs	r2, #0
  80              	.LBE5:
  81              	.LBE4:
  52:../Source Files/lpc_system_init.c **** 	led_delay = 1000;                   // Heart Beat rate of 1Sec toggle
  82              		.loc 1 52 0
  83 002c 4FF47A71 		mov	r1, #1000
  84 0030 1960     		str	r1, [r3, #0]
  85              	.LVL4:
  86              	.LBB7:
  87              	.LBB6:
  88              		.loc 2 999 0
  89 0032 80F82320 		strb	r2, [r0, #35]
  90              	.LBE6:
  91              	.LBE7:
  55:../Source Files/lpc_system_init.c **** 	UART_Config(LPC_UART0, 115200);       // Uart0 Initialize at 9600 Baud Rate
  92              		.loc 1 55 0
  93 0036 4FF4E131 		mov	r1, #115200
  94 003a 0848     		ldr	r0, .L3+8
  95 003c FFF7FEFF 		bl	UART_Config
  96              	.LVL5:
  56:../Source Files/lpc_system_init.c **** 	SSP_Config (LPC_SSP1);              // Initialize SPI
  97              		.loc 1 56 0
  98 0040 0748     		ldr	r0, .L3+12
  99 0042 FFF7FEFF 		bl	SSP_Config
 100              	.LVL6:
  57:../Source Files/lpc_system_init.c **** 	I2C_Config (LPC_I2C0);              // Initialize I2C0
 101              		.loc 1 57 0
 102 0046 0748     		ldr	r0, .L3+16
 103 0048 FFF7FEFF 		bl	I2C_Config
 104              	.LVL7:
  59:../Source Files/lpc_system_init.c **** }
 105              		.loc 1 59 0
 106 004c BDE80840 		pop	{r3, lr}
  58:../Source Files/lpc_system_init.c **** 	GLCD_Init();                        // Initialize GLCD
 107              		.loc 1 58 0
 108 0050 FFF7FEBF 		b	GLCD_Init
 109              	.LVL8:
 110              	.L4:
 111              		.align	2
 112              	.L3:
 113 0054 00000000 		.word	led_delay
 114 0058 00ED00E0 		.word	-536810240
 115 005c 00C00040 		.word	1073790976
 116 0060 00000340 		.word	1073938432
 117 0064 00C00140 		.word	1073856512
 118              		.cfi_endproc
 119              	.LFE55:
 121              		.comm	I2C_Rx_Buf,64,1
 122              		.comm	I2C_Tx_Buf,64,1
 123              		.comm	Rx_Buf1,64,1
 124              		.comm	Tx_Buf1,64,1
 125              		.comm	TxIntStat,1,1
 126              		.comm	rb,528,4
 127              		.comm	EscFlag,2,2
 128              	.Letext0:
 129              		.file 3 "../CM3 Core/LPC17xx.h"
 130              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q2\\bin\\../lib/gcc/arm-none-eab
 131              		.file 5 "../Header Files/lpc_types.h"
 132              		.file 6 "../Header Files/lpc17xx_uart.h"
 133              		.file 7 "../Header Files/lpc17xx_ssp.h"
 134              		.file 8 "../Header Files/lpc17xx_i2c.h"
 135              		.file 9 "../Header Files/lpc_system_init.h"
 136              		.file 10 "../CM3 Core/system_LPC17xx.h"
 137              		.file 11 "../Header Files/lpc17xx_systick.h"
 138              		.file 12 "../Header Files/lpc17xx_gpio.h"
 139              		.file 13 "../Header Files/lpc_ssp_glcd.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lpc_system_init.c
C:\Users\raghav\AppData\Local\Temp\ccgam6XI.s:18     .text:00000000 $t
C:\Users\raghav\AppData\Local\Temp\ccgam6XI.s:23     .text:00000000 Port_Init
C:\Users\raghav\AppData\Local\Temp\ccgam6XI.s:47     .text:0000000c System_Init
C:\Users\raghav\AppData\Local\Temp\ccgam6XI.s:113    .text:00000054 $d
                            *COM*:00000040 I2C_Rx_Buf
                            *COM*:00000040 I2C_Tx_Buf
                            *COM*:00000040 Rx_Buf1
                            *COM*:00000040 Tx_Buf1
                            *COM*:00000001 TxIntStat
                            *COM*:00000210 rb
                            *COM*:00000002 EscFlag
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.549b84bf9d8399e395ff8216fcbb3d69
                           .group:00000000 wm4.LPC17xx.h.27.964facdaadd4aa3f18ac78c8a78f0013
                           .group:00000000 wm4.core_cm3.h.32.3cac756d6e704b813781f82afd94fa5f
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.6beb15babd14c076008ec0890c26e21c
                           .group:00000000 wm4.core_cm3.h.83.1a3cb9afc687cf157efeddb3d5f3109e
                           .group:00000000 wm4.LPC17xx.h.953.82b7a9ed60bb594048bc8738cf1d3489
                           .group:00000000 wm4.lpc_types.h.32.72d58ce80fabd1a5430c6ec0500a090b
                           .group:00000000 wm4.lpc17xx_pinsel.h.30.767cda9b27a5c688cd97e5947d664047
                           .group:00000000 wm4.lpc17xx_clkpwr.h.30.8537d92ff6965961e80fda89ac5019f2
                           .group:00000000 wm4.lpc17xx_systick.h.30.9f34c15ae315a203fed1d933040ad7b9
                           .group:00000000 wm4.lpc17xx_gpio.h.30.0b884ee110dd20865784f12e1569ecf1
                           .group:00000000 wm4.lpc17xx_wdt.h.34.a2dcafab9849854019efb51f717a8129
                           .group:00000000 wm4.stdarg.h.31.b70f21342353634f7b44d85f85f13832
                           .group:00000000 wm4.lpc17xx_uart.h.58.dbba6e724b29a6214e9cafbaf3ee8a9e
                           .group:00000000 wm4.lpc17xx_ssp.h.48.cd045d667ab7b89d5d550d38997df61b
                           .group:00000000 wm4.lpc17xx_i2c.h.30.8ecc2351e7cba41135ba36b3ad45f764
                           .group:00000000 wm4.lpc_i2c_tsc2004.h.29.34082f268f216caa8d0bf2c0960ad4a6
                           .group:00000000 wm4.lpc_ssp_glcd.h.29.0f086fd3ba564c80425f085247dfad00

UNDEFINED SYMBOLS
GPIO_SetDir
SystemInit
SYSTICK_Config
UART_Config
SSP_Config
I2C_Config
GLCD_Init
led_delay
