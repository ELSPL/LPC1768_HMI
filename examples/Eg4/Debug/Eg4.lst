
Eg4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000cc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  000000cc  000000cc  000080cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  00004094  00004094  0000c094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       000015e4  0000409c  0000409c  0000c09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000368  10000000  00005680  00010000  2**2
                  ALLOC
  5 ._usrstack    00000100  10000368  00005680  00010368  2**0
                  ALLOC
  6 .data         00000010  2007c000  00005680  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .comment      00000070  00000000  00000000  00014010  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 00000033  00000000  00000000  00014080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000210  00000000  00000000  000140b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000b7fe  00000000  00000000  000142c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000024a9  00000000  00000000  0001fac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004bd3  00000000  00000000  00021f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001324  00000000  00000000  00026b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00011968  00000000  00000000  00027e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000057e7  00000000  00000000  000397cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000043fc  00000000  00000000  0003efb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000330  00000000  00000000  000433af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000000cc <CLKPWR_SetPCLKDiv>:
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
      cc:	281f      	cmp	r0, #31
 *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
 *
 * @return none
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
      ce:	b510      	push	{r4, lr}
      d0:	4b12      	ldr	r3, [pc, #72]	; (11c <_Minimum_Stack_Size+0x1c>)
      d2:	f04f 0203 	mov.w	r2, #3
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
      d6:	d910      	bls.n	fa <CLKPWR_SetPCLKDiv+0x2e>
      d8:	3820      	subs	r0, #32
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
      da:	fa02 f200 	lsl.w	r2, r2, r0

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
      de:	fa01 f000 	lsl.w	r0, r1, r0
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
      e2:	f8d3 41ac 	ldr.w	r4, [r3, #428]	; 0x1ac
      e6:	ea24 0202 	bic.w	r2, r4, r2
      ea:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
      ee:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
      f2:	4310      	orrs	r0, r2
      f4:	f8c3 01ac 	str.w	r0, [r3, #428]	; 0x1ac
      f8:	bd10      	pop	{r4, pc}

	/* PCLKSEL0 selected */
	if (ClkType < 32)
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
      fa:	fa02 f200 	lsl.w	r2, r2, r0

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
      fe:	fa01 f100 	lsl.w	r1, r1, r0

	/* PCLKSEL0 selected */
	if (ClkType < 32)
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
     102:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
     106:	ea24 0202 	bic.w	r2, r4, r2
     10a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
     10e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
     112:	4311      	orrs	r1, r2
     114:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     118:	bd10      	pop	{r4, pc}
     11a:	bf00      	nop
     11c:	400fc000 	.word	0x400fc000

00000120 <CLKPWR_GetPCLKSEL>:
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
	uint32_t bitpos, retval;

	if (ClkType < 32)
     120:	281f      	cmp	r0, #31
     122:	4b06      	ldr	r3, [pc, #24]	; (13c <CLKPWR_GetPCLKSEL+0x1c>)
     124:	d802      	bhi.n	12c <CLKPWR_GetPCLKSEL+0xc>
	{
		bitpos = ClkType;
		retval = LPC_SC->PCLKSEL0;
     126:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
     12a:	e002      	b.n	132 <CLKPWR_GetPCLKSEL+0x12>
	}
	else
	{
		bitpos = ClkType - 32;
		retval = LPC_SC->PCLKSEL1;
     12c:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		bitpos = ClkType;
		retval = LPC_SC->PCLKSEL0;
	}
	else
	{
		bitpos = ClkType - 32;
     130:	3820      	subs	r0, #32
		retval = LPC_SC->PCLKSEL1;
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
     132:	fa21 f000 	lsr.w	r0, r1, r0
	return retval;
}
     136:	f000 0003 	and.w	r0, r0, #3
     13a:	4770      	bx	lr
     13c:	400fc000 	.word	0x400fc000

00000140 <CLKPWR_GetPCLK>:
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
	uint32_t retval, div;

	retval = SystemCoreClock;
     140:	4b06      	ldr	r3, [pc, #24]	; (15c <CLKPWR_GetPCLK+0x1c>)
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
     142:	b510      	push	{r4, lr}
	uint32_t retval, div;

	retval = SystemCoreClock;
     144:	681c      	ldr	r4, [r3, #0]
	div = CLKPWR_GetPCLKSEL(ClkType);
     146:	f7ff ffeb 	bl	120 <CLKPWR_GetPCLKSEL>

	switch (div)
     14a:	b118      	cbz	r0, 154 <CLKPWR_GetPCLK+0x14>
	case 2:
		div = 2;
		break;

	case 3:
		div = 8;
     14c:	2803      	cmp	r0, #3
     14e:	bf08      	it	eq
     150:	2008      	moveq	r0, #8
     152:	e000      	b.n	156 <CLKPWR_GetPCLK+0x16>
	div = CLKPWR_GetPCLKSEL(ClkType);

	switch (div)
	{
	case 0:
		div = 4;
     154:	2004      	movs	r0, #4
		break;
	}
	retval /= div;

	return retval;
}
     156:	fbb4 f0f0 	udiv	r0, r4, r0
     15a:	bd10      	pop	{r4, pc}
     15c:	2007c008 	.word	0x2007c008

00000160 <CLKPWR_ConfigPPWR>:
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
	if (NewState == ENABLE)
     160:	2901      	cmp	r1, #1
     162:	d108      	bne.n	176 <CLKPWR_ConfigPPWR+0x16>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
     164:	4b09      	ldr	r3, [pc, #36]	; (18c <CLKPWR_ConfigPPWR+0x2c>)
     166:	4a0a      	ldr	r2, [pc, #40]	; (190 <CLKPWR_ConfigPPWR+0x30>)
     168:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
     16c:	4002      	ands	r2, r0
     16e:	430a      	orrs	r2, r1
     170:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
     174:	4770      	bx	lr
	}
	else if (NewState == DISABLE)
     176:	b941      	cbnz	r1, 18a <CLKPWR_ConfigPPWR+0x2a>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
     178:	4a04      	ldr	r2, [pc, #16]	; (18c <CLKPWR_ConfigPPWR+0x2c>)
     17a:	4b05      	ldr	r3, [pc, #20]	; (190 <CLKPWR_ConfigPPWR+0x30>)
     17c:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
     180:	400b      	ands	r3, r1
     182:	ea23 0300 	bic.w	r3, r3, r0
     186:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
     18a:	4770      	bx	lr
     18c:	400fc000 	.word	0x400fc000
     190:	efeff7de 	.word	0xefeff7de

00000194 <CLKPWR_Sleep>:
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_Sleep(void)
{
	LPC_SC->PCON = 0x00;
     194:	4b02      	ldr	r3, [pc, #8]	; (1a0 <CLKPWR_Sleep+0xc>)
     196:	2200      	movs	r2, #0
     198:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
     19c:	bf30      	wfi
     19e:	4770      	bx	lr
     1a0:	400fc000 	.word	0x400fc000

000001a4 <CLKPWR_DeepSleep>:
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1a4:	4b04      	ldr	r3, [pc, #16]	; (1b8 <CLKPWR_DeepSleep+0x14>)
	LPC_SC->PCON = 0x8;
     1a6:	4905      	ldr	r1, [pc, #20]	; (1bc <CLKPWR_DeepSleep+0x18>)
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1a8:	2204      	movs	r2, #4
	LPC_SC->PCON = 0x8;
     1aa:	2008      	movs	r0, #8
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1ac:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x8;
     1ae:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
     1b2:	bf30      	wfi
     1b4:	4770      	bx	lr
     1b6:	bf00      	nop
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	400fc000 	.word	0x400fc000

000001c0 <CLKPWR_PowerDown>:
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1c0:	4b04      	ldr	r3, [pc, #16]	; (1d4 <CLKPWR_PowerDown+0x14>)
	LPC_SC->PCON = 0x09;
     1c2:	4905      	ldr	r1, [pc, #20]	; (1d8 <CLKPWR_PowerDown+0x18>)
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1c4:	2204      	movs	r2, #4
	LPC_SC->PCON = 0x09;
     1c6:	2009      	movs	r0, #9
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1c8:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x09;
     1ca:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
     1ce:	bf30      	wfi
     1d0:	4770      	bx	lr
     1d2:	bf00      	nop
     1d4:	e000ed00 	.word	0xe000ed00
     1d8:	400fc000 	.word	0x400fc000

000001dc <CLKPWR_DeepPowerDown>:
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <CLKPWR_DeepPowerDown+0x14>)
	LPC_SC->PCON = 0x03;
     1de:	4905      	ldr	r1, [pc, #20]	; (1f4 <CLKPWR_DeepPowerDown+0x18>)
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1e0:	2204      	movs	r2, #4
	LPC_SC->PCON = 0x03;
     1e2:	2003      	movs	r0, #3
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1e4:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x03;
     1e6:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
     1ea:	bf30      	wfi
     1ec:	4770      	bx	lr
     1ee:	bf00      	nop
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	400fc000 	.word	0x400fc000

000001f8 <EINT3_IRQHandler>:
 * @brief		External interrupt 3 handler sub-routine
 * @param[in]	None
 * @return		None
 **********************************************************************/
void EINT3_IRQHandler(void)
{
     1f8:	4770      	bx	lr

000001fa <GPIO_SetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
     1fa:	2804      	cmp	r0, #4
     1fc:	d80b      	bhi.n	216 <GPIO_SetDir+0x1c>
     1fe:	4b06      	ldr	r3, [pc, #24]	; (218 <GPIO_SetDir+0x1e>)
     200:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     204:	b138      	cbz	r0, 216 <GPIO_SetDir+0x1c>
		// Enable Output
		if (dir) {
     206:	b112      	cbz	r2, 20e <GPIO_SetDir+0x14>
			pGPIO->FIODIR |= bitValue;
     208:	6803      	ldr	r3, [r0, #0]
     20a:	4319      	orrs	r1, r3
     20c:	e002      	b.n	214 <GPIO_SetDir+0x1a>
		}
		// Enable Input
		else {
			pGPIO->FIODIR &= ~bitValue;
     20e:	6802      	ldr	r2, [r0, #0]
     210:	ea22 0101 	bic.w	r1, r2, r1
     214:	6001      	str	r1, [r0, #0]
     216:	4770      	bx	lr
     218:	0000409c 	.word	0x0000409c

0000021c <GPIO_SetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
     21c:	2804      	cmp	r0, #4
     21e:	d804      	bhi.n	22a <GPIO_SetValue+0xe>
     220:	4b02      	ldr	r3, [pc, #8]	; (22c <GPIO_SetValue+0x10>)
     222:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     226:	b100      	cbz	r0, 22a <GPIO_SetValue+0xe>
		pGPIO->FIOSET = bitValue;
     228:	6181      	str	r1, [r0, #24]
     22a:	4770      	bx	lr
     22c:	0000409c 	.word	0x0000409c

00000230 <GPIO_ClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
     230:	2804      	cmp	r0, #4
     232:	d804      	bhi.n	23e <GPIO_ClearValue+0xe>
     234:	4b02      	ldr	r3, [pc, #8]	; (240 <GPIO_ClearValue+0x10>)
     236:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     23a:	b100      	cbz	r0, 23e <GPIO_ClearValue+0xe>
		pGPIO->FIOCLR = bitValue;
     23c:	61c1      	str	r1, [r0, #28]
     23e:	4770      	bx	lr
     240:	0000409c 	.word	0x0000409c

00000244 <GPIO_ReadValue>:
 *
 * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 * its direction is input or output.
 **********************************************************************/
uint32_t GPIO_ReadValue(uint8_t portNum)
{
     244:	2804      	cmp	r0, #4
     246:	d805      	bhi.n	254 <GPIO_ReadValue+0x10>
     248:	4b03      	ldr	r3, [pc, #12]	; (258 <GPIO_ReadValue+0x14>)
     24a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     24e:	b110      	cbz	r0, 256 <GPIO_ReadValue+0x12>
		return pGPIO->FIOPIN;
     250:	6940      	ldr	r0, [r0, #20]
     252:	4770      	bx	lr
	}

	return (0);
     254:	2000      	movs	r0, #0
}
     256:	4770      	bx	lr
     258:	0000409c 	.word	0x0000409c

0000025c <GPIO_IntCmd>:
 * 							- 1: Falling edge
 * @return		None
 **********************************************************************/
void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	if((portNum == 0)&&(edgeState == 0))
     25c:	b918      	cbnz	r0, 266 <GPIO_IntCmd+0xa>
     25e:	b942      	cbnz	r2, 272 <GPIO_IntCmd+0x16>
		LPC_GPIOINT->IO0IntEnR = bitValue;
     260:	4b09      	ldr	r3, [pc, #36]	; (288 <GPIO_IntCmd+0x2c>)
     262:	6119      	str	r1, [r3, #16]
     264:	4770      	bx	lr
	else if ((portNum == 2)&&(edgeState == 0))
     266:	2802      	cmp	r0, #2
     268:	d10d      	bne.n	286 <GPIO_IntCmd+0x2a>
     26a:	b93a      	cbnz	r2, 27c <GPIO_IntCmd+0x20>
		LPC_GPIOINT->IO2IntEnR = bitValue;
     26c:	4806      	ldr	r0, [pc, #24]	; (288 <GPIO_IntCmd+0x2c>)
     26e:	6301      	str	r1, [r0, #48]	; 0x30
     270:	4770      	bx	lr
	else if ((portNum == 0)&&(edgeState == 1))
     272:	2a01      	cmp	r2, #1
     274:	d107      	bne.n	286 <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO0IntEnF = bitValue;
     276:	4a04      	ldr	r2, [pc, #16]	; (288 <GPIO_IntCmd+0x2c>)
     278:	6151      	str	r1, [r2, #20]
     27a:	4770      	bx	lr
	else if ((portNum == 2)&&(edgeState == 1))
     27c:	2a01      	cmp	r2, #1
     27e:	d102      	bne.n	286 <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO2IntEnF = bitValue;
     280:	4b01      	ldr	r3, [pc, #4]	; (288 <GPIO_IntCmd+0x2c>)
     282:	6359      	str	r1, [r3, #52]	; 0x34
     284:	4770      	bx	lr
     286:	e7fe      	b.n	286 <GPIO_IntCmd+0x2a>
     288:	40028080 	.word	0x40028080

0000028c <GPIO_GetIntStatus>:
 * 								edge on P0.0
 * 						- DISABLE: A rising edge has not been detected on P0.0
 **********************************************************************/
FunctionalState GPIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
	if((portNum == 0) && (edgeState == 0))//Rising Edge
     28c:	b918      	cbnz	r0, 296 <GPIO_GetIntStatus+0xa>
     28e:	b942      	cbnz	r2, 2a2 <GPIO_GetIntStatus+0x16>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatR)>>pinNum)& 0x1));
     290:	480b      	ldr	r0, [pc, #44]	; (2c0 <GPIO_GetIntStatus+0x34>)
     292:	6840      	ldr	r0, [r0, #4]
     294:	e00e      	b.n	2b4 <GPIO_GetIntStatus+0x28>
	else if ((portNum == 2) && (edgeState == 0))
     296:	2802      	cmp	r0, #2
     298:	d111      	bne.n	2be <GPIO_GetIntStatus+0x32>
     29a:	b93a      	cbnz	r2, 2ac <GPIO_GetIntStatus+0x20>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
     29c:	4a08      	ldr	r2, [pc, #32]	; (2c0 <GPIO_GetIntStatus+0x34>)
     29e:	6a50      	ldr	r0, [r2, #36]	; 0x24
     2a0:	e008      	b.n	2b4 <GPIO_GetIntStatus+0x28>
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
     2a2:	2a01      	cmp	r2, #1
     2a4:	d10b      	bne.n	2be <GPIO_GetIntStatus+0x32>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
     2a6:	4b06      	ldr	r3, [pc, #24]	; (2c0 <GPIO_GetIntStatus+0x34>)
     2a8:	6898      	ldr	r0, [r3, #8]
     2aa:	e003      	b.n	2b4 <GPIO_GetIntStatus+0x28>
	else if ((portNum == 2) && (edgeState == 1))
     2ac:	2a01      	cmp	r2, #1
     2ae:	d106      	bne.n	2be <GPIO_GetIntStatus+0x32>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
     2b0:	4b03      	ldr	r3, [pc, #12]	; (2c0 <GPIO_GetIntStatus+0x34>)
     2b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
     2b4:	fa20 f101 	lsr.w	r1, r0, r1
     2b8:	f001 0001 	and.w	r0, r1, #1
     2bc:	4770      	bx	lr
     2be:	e7fe      	b.n	2be <GPIO_GetIntStatus+0x32>
     2c0:	40028080 	.word	0x40028080

000002c4 <GPIO_ClearInt>:
 * 							in range from 0 to 0xFFFFFFFF.
 * @return		None
 **********************************************************************/
void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	if(portNum == 0)
     2c4:	b910      	cbnz	r0, 2cc <GPIO_ClearInt+0x8>
		LPC_GPIOINT->IO0IntClr = bitValue;
     2c6:	4804      	ldr	r0, [pc, #16]	; (2d8 <GPIO_ClearInt+0x14>)
     2c8:	60c1      	str	r1, [r0, #12]
     2ca:	4770      	bx	lr
	else if (portNum == 2)
     2cc:	2802      	cmp	r0, #2
     2ce:	d102      	bne.n	2d6 <GPIO_ClearInt+0x12>
		LPC_GPIOINT->IO2IntClr = bitValue;
     2d0:	4b01      	ldr	r3, [pc, #4]	; (2d8 <GPIO_ClearInt+0x14>)
     2d2:	62d9      	str	r1, [r3, #44]	; 0x2c
     2d4:	4770      	bx	lr
     2d6:	e7fe      	b.n	2d6 <GPIO_ClearInt+0x12>
     2d8:	40028080 	.word	0x40028080

000002dc <FIO_SetDir>:
/**
 * @brief The same with GPIO_SetDir()
 */
void FIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
	GPIO_SetDir(portNum, bitValue, dir);
     2dc:	f7ff bf8d 	b.w	1fa <GPIO_SetDir>

000002e0 <FIO_SetValue>:
/**
 * @brief The same with GPIO_SetValue()
 */
void FIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
	GPIO_SetValue(portNum, bitValue);
     2e0:	f7ff bf9c 	b.w	21c <GPIO_SetValue>

000002e4 <FIO_ClearValue>:
/**
 * @brief The same with GPIO_ClearValue()
 */
void FIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
	GPIO_ClearValue(portNum, bitValue);
     2e4:	f7ff bfa4 	b.w	230 <GPIO_ClearValue>

000002e8 <FIO_ReadValue>:
/**
 * @brief The same with GPIO_ReadValue()
 */
uint32_t FIO_ReadValue(uint8_t portNum)
{
	return (GPIO_ReadValue(portNum));
     2e8:	f7ff bfac 	b.w	244 <GPIO_ReadValue>

000002ec <FIO_IntCmd>:
/**
 * @brief The same with GPIO_IntCmd()
 */
void FIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	GPIO_IntCmd(portNum, bitValue, edgeState);
     2ec:	f7ff bfb6 	b.w	25c <GPIO_IntCmd>

000002f0 <FIO_GetIntStatus>:
/**
 * @brief The same with GPIO_GetIntStatus()
 */
FunctionalState FIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
	return (GPIO_GetIntStatus(portNum, pinNum, edgeState));
     2f0:	f7ff bfcc 	b.w	28c <GPIO_GetIntStatus>

000002f4 <FIO_ClearInt>:
/**
 * @brief The same with GPIO_ClearInt()
 */
void FIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	GPIO_ClearInt(portNum, bitValue);
     2f4:	f7ff bfe6 	b.w	2c4 <GPIO_ClearInt>

000002f8 <FIO_SetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_SetMask(uint8_t portNum, uint32_t bitValue, uint8_t maskValue)
{
     2f8:	2804      	cmp	r0, #4
     2fa:	d80b      	bhi.n	314 <FIO_SetMask+0x1c>
     2fc:	4b06      	ldr	r3, [pc, #24]	; (318 <FIO_SetMask+0x20>)
     2fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pFIO = GPIO_GetPointer(portNum);
	if(pFIO != NULL) {
     302:	b138      	cbz	r0, 314 <FIO_SetMask+0x1c>
		// Mask
		if (maskValue){
     304:	b112      	cbz	r2, 30c <FIO_SetMask+0x14>
			pFIO->FIOMASK |= bitValue;
     306:	6903      	ldr	r3, [r0, #16]
     308:	4319      	orrs	r1, r3
     30a:	e002      	b.n	312 <FIO_SetMask+0x1a>
		}
		// Un-mask
		else {
			pFIO->FIOMASK &= ~bitValue;
     30c:	6902      	ldr	r2, [r0, #16]
     30e:	ea22 0101 	bic.w	r1, r2, r1
     312:	6101      	str	r1, [r0, #16]
     314:	4770      	bx	lr
     316:	bf00      	nop
     318:	0000409c 	.word	0x0000409c

0000031c <FIO_HalfWordSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetDir(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t dir)
{
     31c:	2804      	cmp	r0, #4
     31e:	b510      	push	{r4, lr}
     320:	d819      	bhi.n	356 <FIO_HalfWordSetDir+0x3a>
     322:	4c0d      	ldr	r4, [pc, #52]	; (358 <FIO_HalfWordSetDir+0x3c>)
     324:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     328:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     32a:	b1a0      	cbz	r0, 356 <FIO_HalfWordSetDir+0x3a>
		// Output direction
		if (dir) {
     32c:	b143      	cbz	r3, 340 <FIO_HalfWordSetDir+0x24>
			// Upper
			if(halfwordNum) {
     32e:	b119      	cbz	r1, 338 <FIO_HalfWordSetDir+0x1c>
				pFIO->FIODIRU |= bitValue;
     330:	8843      	ldrh	r3, [r0, #2]
     332:	b299      	uxth	r1, r3
     334:	430a      	orrs	r2, r1
     336:	e008      	b.n	34a <FIO_HalfWordSetDir+0x2e>
			}
			// lower
			else {
				pFIO->FIODIRL |= bitValue;
     338:	8803      	ldrh	r3, [r0, #0]
     33a:	b299      	uxth	r1, r3
     33c:	430a      	orrs	r2, r1
     33e:	e009      	b.n	354 <FIO_HalfWordSetDir+0x38>
     340:	43d2      	mvns	r2, r2
			}
		}
		// Input direction
		else {
			// Upper
			if(halfwordNum) {
     342:	b121      	cbz	r1, 34e <FIO_HalfWordSetDir+0x32>
				pFIO->FIODIRU &= ~bitValue;
     344:	8843      	ldrh	r3, [r0, #2]
     346:	b299      	uxth	r1, r3
     348:	400a      	ands	r2, r1
     34a:	8042      	strh	r2, [r0, #2]
     34c:	bd10      	pop	{r4, pc}
			}
			// lower
			else {
				pFIO->FIODIRL &= ~bitValue;
     34e:	8803      	ldrh	r3, [r0, #0]
     350:	b299      	uxth	r1, r3
     352:	400a      	ands	r2, r1
     354:	8002      	strh	r2, [r0, #0]
     356:	bd10      	pop	{r4, pc}
     358:	0000409c 	.word	0x0000409c

0000035c <FIO_HalfWordSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_HalfWordSetMask(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t maskValue)
{
     35c:	2804      	cmp	r0, #4
     35e:	b510      	push	{r4, lr}
     360:	d819      	bhi.n	396 <FIO_HalfWordSetMask+0x3a>
     362:	4c0d      	ldr	r4, [pc, #52]	; (398 <FIO_HalfWordSetMask+0x3c>)
     364:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     368:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     36a:	b1a0      	cbz	r0, 396 <FIO_HalfWordSetMask+0x3a>
		// Mask
		if (maskValue){
     36c:	b143      	cbz	r3, 380 <FIO_HalfWordSetMask+0x24>
			// Upper
			if(halfwordNum) {
     36e:	b119      	cbz	r1, 378 <FIO_HalfWordSetMask+0x1c>
				pFIO->FIOMASKU |= bitValue;
     370:	8a43      	ldrh	r3, [r0, #18]
     372:	b299      	uxth	r1, r3
     374:	430a      	orrs	r2, r1
     376:	e008      	b.n	38a <FIO_HalfWordSetMask+0x2e>
			}
			// lower
			else {
				pFIO->FIOMASKL |= bitValue;
     378:	8a03      	ldrh	r3, [r0, #16]
     37a:	b299      	uxth	r1, r3
     37c:	430a      	orrs	r2, r1
     37e:	e009      	b.n	394 <FIO_HalfWordSetMask+0x38>
     380:	43d2      	mvns	r2, r2
			}
		}
		// Un-mask
		else {
			// Upper
			if(halfwordNum) {
     382:	b121      	cbz	r1, 38e <FIO_HalfWordSetMask+0x32>
				pFIO->FIOMASKU &= ~bitValue;
     384:	8a43      	ldrh	r3, [r0, #18]
     386:	b299      	uxth	r1, r3
     388:	400a      	ands	r2, r1
     38a:	8242      	strh	r2, [r0, #18]
     38c:	bd10      	pop	{r4, pc}
			}
			// lower
			else {
				pFIO->FIOMASKL &= ~bitValue;
     38e:	8a03      	ldrh	r3, [r0, #16]
     390:	b299      	uxth	r1, r3
     392:	400a      	ands	r2, r1
     394:	8202      	strh	r2, [r0, #16]
     396:	bd10      	pop	{r4, pc}
     398:	0000409c 	.word	0x0000409c

0000039c <FIO_HalfWordSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
     39c:	2804      	cmp	r0, #4
     39e:	d808      	bhi.n	3b2 <FIO_HalfWordSetValue+0x16>
     3a0:	4b04      	ldr	r3, [pc, #16]	; (3b4 <FIO_HalfWordSetValue+0x18>)
     3a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     3a6:	6943      	ldr	r3, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     3a8:	b11b      	cbz	r3, 3b2 <FIO_HalfWordSetValue+0x16>
		// Upper
		if(halfwordNum) {
     3aa:	b109      	cbz	r1, 3b0 <FIO_HalfWordSetValue+0x14>
			pFIO->FIOSETU = bitValue;
     3ac:	835a      	strh	r2, [r3, #26]
     3ae:	4770      	bx	lr
		}
		// lower
		else {
			pFIO->FIOSETL = bitValue;
     3b0:	831a      	strh	r2, [r3, #24]
     3b2:	4770      	bx	lr
     3b4:	0000409c 	.word	0x0000409c

000003b8 <FIO_HalfWordClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordClearValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
     3b8:	2804      	cmp	r0, #4
     3ba:	d808      	bhi.n	3ce <FIO_HalfWordClearValue+0x16>
     3bc:	4b04      	ldr	r3, [pc, #16]	; (3d0 <FIO_HalfWordClearValue+0x18>)
     3be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     3c2:	6943      	ldr	r3, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     3c4:	b11b      	cbz	r3, 3ce <FIO_HalfWordClearValue+0x16>
		// Upper
		if(halfwordNum) {
     3c6:	b109      	cbz	r1, 3cc <FIO_HalfWordClearValue+0x14>
			pFIO->FIOCLRU = bitValue;
     3c8:	83da      	strh	r2, [r3, #30]
     3ca:	4770      	bx	lr
		}
		// lower
		else {
			pFIO->FIOCLRL = bitValue;
     3cc:	839a      	strh	r2, [r3, #28]
     3ce:	4770      	bx	lr
     3d0:	0000409c 	.word	0x0000409c

000003d4 <FIO_HalfWordReadValue>:
 * @return		Current value of FIO port pin of specified halfword.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint16_t FIO_HalfWordReadValue(uint8_t portNum, uint8_t halfwordNum)
{
     3d4:	2804      	cmp	r0, #4
     3d6:	d80a      	bhi.n	3ee <FIO_HalfWordReadValue+0x1a>
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <FIO_HalfWordReadValue+0x20>)
     3da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     3de:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     3e0:	b130      	cbz	r0, 3f0 <FIO_HalfWordReadValue+0x1c>
		// Upper
		if(halfwordNum) {
     3e2:	b109      	cbz	r1, 3e8 <FIO_HalfWordReadValue+0x14>
			return (pFIO->FIOPINU);
     3e4:	8ac1      	ldrh	r1, [r0, #22]
     3e6:	e000      	b.n	3ea <FIO_HalfWordReadValue+0x16>
		}
		// lower
		else {
			return (pFIO->FIOPINL);
     3e8:	8a81      	ldrh	r1, [r0, #20]
     3ea:	b288      	uxth	r0, r1
     3ec:	4770      	bx	lr
		}
	}
	return (0);
     3ee:	2000      	movs	r0, #0
}
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop
     3f4:	0000409c 	.word	0x0000409c

000003f8 <FIO_ByteSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetDir(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t dir)
{
     3f8:	2804      	cmp	r0, #4
     3fa:	b510      	push	{r4, lr}
     3fc:	d810      	bhi.n	420 <FIO_ByteSetDir+0x28>
     3fe:	4c09      	ldr	r4, [pc, #36]	; (424 <FIO_ByteSetDir+0x2c>)
     400:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     404:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
     406:	b158      	cbz	r0, 420 <FIO_ByteSetDir+0x28>
		// Output direction
		if (dir) {
     408:	b123      	cbz	r3, 414 <FIO_ByteSetDir+0x1c>
			if (byteNum <= 3) {
     40a:	2903      	cmp	r1, #3
     40c:	d808      	bhi.n	420 <FIO_ByteSetDir+0x28>
				pFIO->FIODIR[byteNum] |= bitValue;
     40e:	5c43      	ldrb	r3, [r0, r1]
     410:	431a      	orrs	r2, r3
     412:	e004      	b.n	41e <FIO_ByteSetDir+0x26>
			}
		}
		// Input direction
		else {
			if (byteNum <= 3) {
     414:	2903      	cmp	r1, #3
     416:	d803      	bhi.n	420 <FIO_ByteSetDir+0x28>
				pFIO->FIODIR[byteNum] &= ~bitValue;
     418:	5c43      	ldrb	r3, [r0, r1]
     41a:	ea23 0202 	bic.w	r2, r3, r2
     41e:	5442      	strb	r2, [r0, r1]
     420:	bd10      	pop	{r4, pc}
     422:	bf00      	nop
     424:	0000409c 	.word	0x0000409c

00000428 <FIO_ByteSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_ByteSetMask(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t maskValue)
{
     428:	2804      	cmp	r0, #4
     42a:	b510      	push	{r4, lr}
     42c:	d812      	bhi.n	454 <FIO_ByteSetMask+0x2c>
     42e:	4c0a      	ldr	r4, [pc, #40]	; (458 <FIO_ByteSetMask+0x30>)
     430:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     434:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
     436:	b168      	cbz	r0, 454 <FIO_ByteSetMask+0x2c>
		// Mask
		if (maskValue) {
     438:	b12b      	cbz	r3, 446 <FIO_ByteSetMask+0x1e>
			if (byteNum <= 3) {
     43a:	2903      	cmp	r1, #3
     43c:	d80a      	bhi.n	454 <FIO_ByteSetMask+0x2c>
				pFIO->FIOMASK[byteNum] |= bitValue;
     43e:	1841      	adds	r1, r0, r1
     440:	7c08      	ldrb	r0, [r1, #16]
     442:	4302      	orrs	r2, r0
     444:	e005      	b.n	452 <FIO_ByteSetMask+0x2a>
			}
		}
		// Un-mask
		else {
			if (byteNum <= 3) {
     446:	2903      	cmp	r1, #3
     448:	d804      	bhi.n	454 <FIO_ByteSetMask+0x2c>
				pFIO->FIOMASK[byteNum] &= ~bitValue;
     44a:	1841      	adds	r1, r0, r1
     44c:	7c0b      	ldrb	r3, [r1, #16]
     44e:	ea23 0202 	bic.w	r2, r3, r2
     452:	740a      	strb	r2, [r1, #16]
     454:	bd10      	pop	{r4, pc}
     456:	bf00      	nop
     458:	0000409c 	.word	0x0000409c

0000045c <FIO_ByteSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
     45c:	2804      	cmp	r0, #4
     45e:	d808      	bhi.n	472 <FIO_ByteSetValue+0x16>
     460:	4b04      	ldr	r3, [pc, #16]	; (474 <FIO_ByteSetValue+0x18>)
     462:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     466:	6a83      	ldr	r3, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
     468:	b11b      	cbz	r3, 472 <FIO_ByteSetValue+0x16>
		if (byteNum <= 3){
     46a:	2903      	cmp	r1, #3
			pFIO->FIOSET[byteNum] = bitValue;
     46c:	bf9c      	itt	ls
     46e:	1859      	addls	r1, r3, r1
     470:	760a      	strbls	r2, [r1, #24]
     472:	4770      	bx	lr
     474:	0000409c 	.word	0x0000409c

00000478 <FIO_ByteClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteClearValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
     478:	2804      	cmp	r0, #4
     47a:	d808      	bhi.n	48e <FIO_ByteClearValue+0x16>
     47c:	4b04      	ldr	r3, [pc, #16]	; (490 <FIO_ByteClearValue+0x18>)
     47e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     482:	6a83      	ldr	r3, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
     484:	b11b      	cbz	r3, 48e <FIO_ByteClearValue+0x16>
		if (byteNum <= 3){
     486:	2903      	cmp	r1, #3
			pFIO->FIOCLR[byteNum] = bitValue;
     488:	bf9c      	itt	ls
     48a:	1859      	addls	r1, r3, r1
     48c:	770a      	strbls	r2, [r1, #28]
     48e:	4770      	bx	lr
     490:	0000409c 	.word	0x0000409c

00000494 <FIO_ByteReadValue>:
 * @return		Current value of FIO port pin of specified byte part.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint8_t FIO_ByteReadValue(uint8_t portNum, uint8_t byteNum)
{
     494:	2804      	cmp	r0, #4
     496:	d809      	bhi.n	4ac <FIO_ByteReadValue+0x18>
     498:	4b05      	ldr	r3, [pc, #20]	; (4b0 <FIO_ByteReadValue+0x1c>)
     49a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     49e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
     4a0:	b128      	cbz	r0, 4ae <FIO_ByteReadValue+0x1a>
		if (byteNum <= 3){
     4a2:	2903      	cmp	r1, #3
     4a4:	d802      	bhi.n	4ac <FIO_ByteReadValue+0x18>
			return (pFIO->FIOPIN[byteNum]);
     4a6:	1841      	adds	r1, r0, r1
     4a8:	7d08      	ldrb	r0, [r1, #20]
     4aa:	4770      	bx	lr
		}
	}
	return (0);
     4ac:	2000      	movs	r0, #0
}
     4ae:	4770      	bx	lr
     4b0:	0000409c 	.word	0x0000409c

000004b4 <I2C_getNum>:
 * 				- LPC_I2C2
 * @return 		I2C number, could be: 0..2
 *********************************************************************/
static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx)
{
	if (I2Cx == LPC_I2C0)
     4b4:	4b09      	ldr	r3, [pc, #36]	; (4dc <I2C_getNum+0x28>)
     4b6:	4298      	cmp	r0, r3
     4b8:	d00b      	beq.n	4d2 <I2C_getNum+0x1e>
	{
		return (0);
	}
	else if (I2Cx == LPC_I2C1)
     4ba:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
     4be:	4288      	cmp	r0, r1
     4c0:	d009      	beq.n	4d6 <I2C_getNum+0x22>
	{
		return (1);
	}
	else if (I2Cx == LPC_I2C2)
	{
		return (2);
     4c2:	f501 2288 	add.w	r2, r1, #278528	; 0x44000
     4c6:	4290      	cmp	r0, r2
     4c8:	bf14      	ite	ne
     4ca:	f04f 30ff 	movne.w	r0, #4294967295
     4ce:	2002      	moveq	r0, #2
     4d0:	4770      	bx	lr
 *********************************************************************/
static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx)
{
	if (I2Cx == LPC_I2C0)
	{
		return (0);
     4d2:	2000      	movs	r0, #0
     4d4:	4770      	bx	lr
	}
	else if (I2Cx == LPC_I2C1)
	{
		return (1);
     4d6:	2001      	movs	r0, #1
	else if (I2Cx == LPC_I2C2)
	{
		return (2);
	}
	return (-1);
}
     4d8:	4770      	bx	lr
     4da:	bf00      	nop
     4dc:	4001c000 	.word	0x4001c000

000004e0 <I2C_SendByte>:
 * @return 		value of I2C status register after sending
 *********************************************************************/
static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     4e0:	6803      	ldr	r3, [r0, #0]
     4e2:	069a      	lsls	r2, r3, #26
     4e4:	d501      	bpl.n	4ea <I2C_SendByte+0xa>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     4e6:	2220      	movs	r2, #32
     4e8:	6182      	str	r2, [r0, #24]
	}
	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;
     4ea:	6081      	str	r1, [r0, #8]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     4ec:	2108      	movs	r1, #8
     4ee:	6181      	str	r1, [r0, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     4f0:	6803      	ldr	r3, [r0, #0]
     4f2:	071b      	lsls	r3, r3, #28
     4f4:	d5fc      	bpl.n	4f0 <I2C_SendByte+0x10>
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     4f6:	6840      	ldr	r0, [r0, #4]
}
     4f8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
     4fc:	4770      	bx	lr

000004fe <Buffer_Init>:
 * @brief		Initialize buffer
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Buffer_Init (void)
{
     4fe:	2300      	movs	r3, #0
	uint8_t i;
#if (I2C_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE; i++)
	{
		I2C_Tx_Buf[i] = 0;
     500:	4904      	ldr	r1, [pc, #16]	; (514 <Buffer_Init+0x16>)
		I2C_Rx_Buf[i] = 0;
     502:	4805      	ldr	r0, [pc, #20]	; (518 <Buffer_Init+0x1a>)
{
	uint8_t i;
#if (I2C_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE; i++)
	{
		I2C_Tx_Buf[i] = 0;
     504:	2200      	movs	r2, #0
     506:	545a      	strb	r2, [r3, r1]
		I2C_Rx_Buf[i] = 0;
     508:	541a      	strb	r2, [r3, r0]
     50a:	3301      	adds	r3, #1
 **********************************************************************/
void Buffer_Init (void)
{
	uint8_t i;
#if (I2C_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE; i++)
     50c:	2b40      	cmp	r3, #64	; 0x40
     50e:	d1f7      	bne.n	500 <Buffer_Init+0x2>
	{
		I2C_Tx_Buf[i] = 0;
		I2C_Rx_Buf[i] = 0;
	}
#endif
}
     510:	4770      	bx	lr
     512:	bf00      	nop
     514:	1000028c 	.word	0x1000028c
     518:	10000038 	.word	0x10000038

0000051c <I2C_Init>:
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
     51c:	b538      	push	{r3, r4, r5, lr}
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
     51e:	4b1b      	ldr	r3, [pc, #108]	; (58c <I2C_Init+0x70>)
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
     520:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
     522:	4298      	cmp	r0, r3
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
     524:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
     526:	d109      	bne.n	53c <I2C_Init+0x20>
	{
		/* Set up clock and power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
     528:	2080      	movs	r0, #128	; 0x80
     52a:	2101      	movs	r1, #1
     52c:	f7ff fe18 	bl	160 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C0 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
     530:	200e      	movs	r0, #14
     532:	2102      	movs	r1, #2
     534:	f7ff fdca 	bl	cc <CLKPWR_SetPCLKDiv>
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	// Get PCLK of I2C controller
	if (I2Cx == LPC_I2C0)
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
     538:	200e      	movs	r0, #14
     53a:	e01a      	b.n	572 <I2C_Init+0x56>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
		/* As default, peripheral clock for I2C0 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
	}
	else if (I2Cx==LPC_I2C1)
     53c:	4814      	ldr	r0, [pc, #80]	; (590 <I2C_Init+0x74>)
     53e:	4284      	cmp	r4, r0
     540:	d10a      	bne.n	558 <I2C_Init+0x3c>
	{
		/* Set up clock and power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
     542:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     546:	2101      	movs	r1, #1
     548:	f7ff fe0a 	bl	160 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C1 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
     54c:	2026      	movs	r0, #38	; 0x26
     54e:	2102      	movs	r1, #2
     550:	f7ff fdbc 	bl	cc <CLKPWR_SetPCLKDiv>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
	}
	else if (I2Cx == LPC_I2C1)
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
     554:	2026      	movs	r0, #38	; 0x26
     556:	e00c      	b.n	572 <I2C_Init+0x56>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
		/* As default, peripheral clock for I2C1 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
	}
	else if (I2Cx==LPC_I2C2)
     558:	490e      	ldr	r1, [pc, #56]	; (594 <I2C_Init+0x78>)
     55a:	428c      	cmp	r4, r1
     55c:	d114      	bne.n	588 <I2C_Init+0x6c>
	{
		/* Set up clock and power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, ENABLE);
     55e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
     562:	2101      	movs	r1, #1
     564:	f7ff fdfc 	bl	160 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C2 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
     568:	2034      	movs	r0, #52	; 0x34
     56a:	2102      	movs	r1, #2
     56c:	f7ff fdae 	bl	cc <CLKPWR_SetPCLKDiv>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
	}
	else if (I2Cx == LPC_I2C2)
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
     570:	2034      	movs	r0, #52	; 0x34
     572:	f7ff fde5 	bl	140 <CLKPWR_GetPCLK>
     576:	fbb0 f2f5 	udiv	r2, r0, r5
	}

	/* Set the I2C clock value to register */
	I2Cx->I2SCLH = (uint32_t)(temp / 2);
     57a:	0853      	lsrs	r3, r2, #1
     57c:	6123      	str	r3, [r4, #16]
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
     57e:	6920      	ldr	r0, [r4, #16]
     580:	1a11      	subs	r1, r2, r0
	}

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
     582:	2264      	movs	r2, #100	; 0x64
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
	}

	/* Set the I2C clock value to register */
	I2Cx->I2SCLH = (uint32_t)(temp / 2);
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
     584:	6161      	str	r1, [r4, #20]
	}

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
     586:	61a2      	str	r2, [r4, #24]
     588:	bd38      	pop	{r3, r4, r5, pc}
     58a:	bf00      	nop
     58c:	4001c000 	.word	0x4001c000
     590:	4005c000 	.word	0x4005c000
     594:	400a0000 	.word	0x400a0000

00000598 <I2C_Config>:
void I2C_Config (LPC_I2C_TypeDef *I2Cx)
{
	// Pin configuration for I2C
	PINSEL_CFG_Type PinCfg;

	if(I2Cx == LPC_I2C0)
     598:	4b12      	ldr	r3, [pc, #72]	; (5e4 <I2C_Config+0x4c>)
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 ***********************************************************************/
void I2C_Config (LPC_I2C_TypeDef *I2Cx)
{
     59a:	b513      	push	{r0, r1, r4, lr}
	// Pin configuration for I2C
	PINSEL_CFG_Type PinCfg;

	if(I2Cx == LPC_I2C0)
     59c:	4298      	cmp	r0, r3
     59e:	d116      	bne.n	5ce <I2C_Config+0x36>
	{
		/*
		 * Init I2C pin connect
		 */
		PinCfg.OpenDrain = 0;
     5a0:	2000      	movs	r0, #0
		PinCfg.Pinmode = 0;
		PinCfg.Funcnum = 1;
		PinCfg.Pinnum = 27;
		PinCfg.Portnum = 0;
     5a2:	ac02      	add	r4, sp, #8
	if(I2Cx == LPC_I2C0)
	{
		/*
		 * Init I2C pin connect
		 */
		PinCfg.OpenDrain = 0;
     5a4:	f88d 0004 	strb.w	r0, [sp, #4]
		PinCfg.Pinmode = 0;
     5a8:	f88d 0003 	strb.w	r0, [sp, #3]
		PinCfg.Funcnum = 1;
     5ac:	2201      	movs	r2, #1
		PinCfg.Pinnum = 27;
     5ae:	211b      	movs	r1, #27
		PinCfg.Portnum = 0;
     5b0:	f804 0d08 	strb.w	r0, [r4, #-8]!
		PINSEL_ConfigPin(&PinCfg);
     5b4:	4668      	mov	r0, sp
		/*
		 * Init I2C pin connect
		 */
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Funcnum = 1;
     5b6:	f88d 2002 	strb.w	r2, [sp, #2]
		PinCfg.Pinnum = 27;
     5ba:	f88d 1001 	strb.w	r1, [sp, #1]
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
     5be:	f000 fbcd 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 28;
     5c2:	231c      	movs	r3, #28
		PINSEL_ConfigPin(&PinCfg);
     5c4:	4668      	mov	r0, sp
		PinCfg.Pinmode = 0;
		PinCfg.Funcnum = 1;
		PinCfg.Pinnum = 27;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 28;
     5c6:	f88d 3001 	strb.w	r3, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
     5ca:	f000 fbc7 	bl	d5c <PINSEL_ConfigPin>
	}

	/* I2C block ------------------------------------------------------------------- */
	// Initialize I2C peripheral
	I2C_Init(LPC_I2C0, 200000);
     5ce:	4c05      	ldr	r4, [pc, #20]	; (5e4 <I2C_Config+0x4c>)
     5d0:	4905      	ldr	r1, [pc, #20]	; (5e8 <I2C_Config+0x50>)
     5d2:	4620      	mov	r0, r4
     5d4:	f7ff ffa2 	bl	51c <I2C_Init>

	Buffer_Init ();
     5d8:	f7ff ff91 	bl	4fe <Buffer_Init>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (NewState == ENABLE)
	{
		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
     5dc:	2040      	movs	r0, #64	; 0x40
     5de:	6020      	str	r0, [r4, #0]

	Buffer_Init ();

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C0, ENABLE);
}
     5e0:	bd1c      	pop	{r2, r3, r4, pc}
     5e2:	bf00      	nop
     5e4:	4001c000 	.word	0x4001c000
     5e8:	00030d40 	.word	0x00030d40

000005ec <I2C_DeInit>:
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;

	if (I2Cx==LPC_I2C0)
     5ec:	490a      	ldr	r1, [pc, #40]	; (618 <I2C_DeInit+0x2c>)
void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
     5ee:	2340      	movs	r3, #64	; 0x40

	if (I2Cx==LPC_I2C0)
     5f0:	4288      	cmp	r0, r1
void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
     5f2:	6183      	str	r3, [r0, #24]

	if (I2Cx==LPC_I2C0)
     5f4:	d101      	bne.n	5fa <I2C_DeInit+0xe>
	{
		/* Disable power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
     5f6:	2080      	movs	r0, #128	; 0x80
     5f8:	e00a      	b.n	610 <I2C_DeInit+0x24>
	}
	else if (I2Cx==LPC_I2C1)
     5fa:	4a08      	ldr	r2, [pc, #32]	; (61c <I2C_DeInit+0x30>)
     5fc:	4290      	cmp	r0, r2
	{
		/* Disable power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
     5fe:	bf08      	it	eq
     600:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
	if (I2Cx==LPC_I2C0)
	{
		/* Disable power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
	}
	else if (I2Cx==LPC_I2C1)
     604:	d004      	beq.n	610 <I2C_DeInit+0x24>
	{
		/* Disable power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
	}
	else if (I2Cx==LPC_I2C2)
     606:	4b06      	ldr	r3, [pc, #24]	; (620 <I2C_DeInit+0x34>)
     608:	4298      	cmp	r0, r3
     60a:	d104      	bne.n	616 <I2C_DeInit+0x2a>
	{
		/* Disable power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
     60c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
     610:	2100      	movs	r1, #0
     612:	f7ff bda5 	b.w	160 <CLKPWR_ConfigPPWR>
     616:	4770      	bx	lr
     618:	4001c000 	.word	0x4001c000
     61c:	4005c000 	.word	0x4005c000
     620:	400a0000 	.word	0x400a0000

00000624 <I2C_Cmd>:
void I2C_Cmd(LPC_I2C_TypeDef* I2Cx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (NewState == ENABLE)
     624:	2901      	cmp	r1, #1
     626:	f04f 0340 	mov.w	r3, #64	; 0x40
	{
		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
     62a:	bf0c      	ite	eq
     62c:	6003      	streq	r3, [r0, #0]
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
     62e:	6183      	strne	r3, [r0, #24]
     630:	4770      	bx	lr

00000632 <I2C_IntCmd>:
 * 				- ENABLE: enable interrupt for this I2C peripheral
 * 				- DISABLE: disable interrupt for this I2C peripheral
 * @return 		None
 **********************************************************************/
void I2C_IntCmd (LPC_I2C_TypeDef *I2Cx, Bool NewState)
{
     632:	4b15      	ldr	r3, [pc, #84]	; (688 <I2C_IntCmd+0x56>)
	if (NewState)
     634:	b199      	cbz	r1, 65e <I2C_IntCmd+0x2c>
	{
		if(I2Cx == LPC_I2C0)
     636:	4298      	cmp	r0, r3

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     638:	bf08      	it	eq
     63a:	f44f 6280 	moveq.w	r2, #1024	; 0x400
     63e:	d004      	beq.n	64a <I2C_IntCmd+0x18>
		{
			NVIC_EnableIRQ(I2C0_IRQn);
		}
		else if (I2Cx == LPC_I2C1)
     640:	4b12      	ldr	r3, [pc, #72]	; (68c <I2C_IntCmd+0x5a>)
     642:	4298      	cmp	r0, r3
     644:	d104      	bne.n	650 <I2C_IntCmd+0x1e>
     646:	f44f 6200 	mov.w	r2, #2048	; 0x800
     64a:	4811      	ldr	r0, [pc, #68]	; (690 <I2C_IntCmd+0x5e>)
     64c:	6002      	str	r2, [r0, #0]
     64e:	4770      	bx	lr
		{
			NVIC_EnableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
     650:	4910      	ldr	r1, [pc, #64]	; (694 <I2C_IntCmd+0x62>)
     652:	4288      	cmp	r0, r1
     654:	bf08      	it	eq
     656:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
     65a:	d113      	bne.n	684 <I2C_IntCmd+0x52>
     65c:	e7f5      	b.n	64a <I2C_IntCmd+0x18>
			NVIC_EnableIRQ(I2C2_IRQn);
		}
	}
	else
	{
		if(I2Cx == LPC_I2C0)
     65e:	4298      	cmp	r0, r3

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     660:	bf08      	it	eq
     662:	f44f 6280 	moveq.w	r2, #1024	; 0x400
     666:	d00a      	beq.n	67e <I2C_IntCmd+0x4c>
		{
			NVIC_DisableIRQ(I2C0_IRQn);
		}
		else if (I2Cx == LPC_I2C1)
     668:	4908      	ldr	r1, [pc, #32]	; (68c <I2C_IntCmd+0x5a>)
     66a:	4288      	cmp	r0, r1
     66c:	bf08      	it	eq
     66e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
     672:	d004      	beq.n	67e <I2C_IntCmd+0x4c>
		{
			NVIC_DisableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
     674:	4a07      	ldr	r2, [pc, #28]	; (694 <I2C_IntCmd+0x62>)
     676:	4290      	cmp	r0, r2
     678:	d104      	bne.n	684 <I2C_IntCmd+0x52>
     67a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     67e:	4804      	ldr	r0, [pc, #16]	; (690 <I2C_IntCmd+0x5e>)
     680:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	4001c000 	.word	0x4001c000
     68c:	4005c000 	.word	0x4005c000
     690:	e000e100 	.word	0xe000e100
     694:	400a0000 	.word	0x400a0000

00000698 <I2C_MasterHandler>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_MasterHandler (LPC_I2C_TypeDef  *I2Cx)
{
     698:	b538      	push	{r3, r4, r5, lr}
     69a:	4604      	mov	r4, r0
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
     69c:	f7ff ff0a 	bl	4b4 <I2C_getNum>
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     6a0:	6862      	ldr	r2, [r4, #4]
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
     6a2:	495b      	ldr	r1, [pc, #364]	; (810 <__Stack_Size+0x40>)

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     6a4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
     6a8:	f851 3030 	ldr.w	r3, [r1, r0, lsl #3]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
	// Save current status
	txrx_setup->status = returnCode;
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     6ac:	2af8      	cmp	r2, #248	; 0xf8
{
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
     6ae:	4605      	mov	r5, r0
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
	// Save current status
	txrx_setup->status = returnCode;
     6b0:	625a      	str	r2, [r3, #36]	; 0x24
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     6b2:	d076      	beq.n	7a2 <I2C_MasterHandler+0x10a>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		return;
	}

	/* ----------------------------- TRANSMIT PHASE --------------------------*/
	if (i2cdat[tmp].dir == 0)
     6b4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
     6b8:	6841      	ldr	r1, [r0, #4]
     6ba:	2900      	cmp	r1, #0
     6bc:	d141      	bne.n	742 <I2C_MasterHandler+0xaa>
	{
		switch (returnCode)
     6be:	2a20      	cmp	r2, #32
     6c0:	d03c      	beq.n	73c <I2C_MasterHandler+0xa4>
     6c2:	dc06      	bgt.n	6d2 <I2C_MasterHandler+0x3a>
     6c4:	2a10      	cmp	r2, #16
     6c6:	d00b      	beq.n	6e0 <I2C_MasterHandler+0x48>
     6c8:	2a18      	cmp	r2, #24
     6ca:	d012      	beq.n	6f2 <I2C_MasterHandler+0x5a>
     6cc:	2a08      	cmp	r2, #8
     6ce:	d17e      	bne.n	7ce <I2C_MasterHandler+0x136>
     6d0:	e006      	b.n	6e0 <I2C_MasterHandler+0x48>
     6d2:	2a30      	cmp	r2, #48	; 0x30
     6d4:	d032      	beq.n	73c <I2C_MasterHandler+0xa4>
     6d6:	2a38      	cmp	r2, #56	; 0x38
     6d8:	d076      	beq.n	7c8 <I2C_MasterHandler+0x130>
     6da:	2a28      	cmp	r2, #40	; 0x28
     6dc:	d177      	bne.n	7ce <I2C_MasterHandler+0x136>
     6de:	e008      	b.n	6f2 <I2C_MasterHandler+0x5a>
			/*
			 * If there's any transmit data, then start to
			 * send SLA+W right now, otherwise check whether if there's
			 * any receive data for next state.
			 */
			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0))
     6e0:	6859      	ldr	r1, [r3, #4]
		switch (returnCode)
		{
		/* A start/repeat start condition has been transmitted -------------------*/
		case I2C_I2STAT_M_TX_START:
		case I2C_I2STAT_M_TX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     6e2:	2020      	movs	r0, #32
     6e4:	61a0      	str	r0, [r4, #24]
			/*
			 * If there's any transmit data, then start to
			 * send SLA+W right now, otherwise check whether if there's
			 * any receive data for next state.
			 */
			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0))
     6e6:	b179      	cbz	r1, 708 <I2C_MasterHandler+0x70>
     6e8:	6898      	ldr	r0, [r3, #8]
     6ea:	b168      	cbz	r0, 708 <I2C_MasterHandler+0x70>
			{
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
     6ec:	681b      	ldr	r3, [r3, #0]
     6ee:	0059      	lsls	r1, r3, #1
     6f0:	e01b      	b.n	72a <I2C_MasterHandler+0x92>
		/* SLA+W has been transmitted, ACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_ACK:
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
     6f2:	68d9      	ldr	r1, [r3, #12]
     6f4:	6898      	ldr	r0, [r3, #8]
     6f6:	4281      	cmp	r1, r0
     6f8:	d206      	bcs.n	708 <I2C_MasterHandler+0x70>
     6fa:	6858      	ldr	r0, [r3, #4]
     6fc:	b120      	cbz	r0, 708 <I2C_MasterHandler+0x70>
			{
				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
     6fe:	5c42      	ldrb	r2, [r0, r1]
				txrx_setup->tx_count++;
     700:	3101      	adds	r1, #1
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
			{
				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
     702:	60a2      	str	r2, [r4, #8]
				txrx_setup->tx_count++;
     704:	60d9      	str	r1, [r3, #12]
     706:	e04c      	b.n	7a2 <I2C_MasterHandler+0x10a>
			// no more data, switch to next stage
			else
			{
next_stage:
				// change direction
				i2cdat[tmp].dir = 1;
     708:	4941      	ldr	r1, [pc, #260]	; (810 <__Stack_Size+0x40>)
     70a:	2001      	movs	r0, #1
     70c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
     710:	6048      	str	r0, [r1, #4]
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL))
     712:	6959      	ldr	r1, [r3, #20]
     714:	2900      	cmp	r1, #0
     716:	d053      	beq.n	7c0 <I2C_MasterHandler+0x128>
     718:	6918      	ldr	r0, [r3, #16]
     71a:	2800      	cmp	r0, #0
     71c:	d050      	beq.n	7c0 <I2C_MasterHandler+0x128>
				{
					// check whether if we need to issue an repeat start
					if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL))
     71e:	6899      	ldr	r1, [r3, #8]
     720:	b929      	cbnz	r1, 72e <I2C_MasterHandler+0x96>
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
			{
send_slar:
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
     722:	681b      	ldr	r3, [r3, #0]
     724:	005a      	lsls	r2, r3, #1
     726:	f042 0101 	orr.w	r1, r2, #1
     72a:	60a1      	str	r1, [r4, #8]
     72c:	e039      	b.n	7a2 <I2C_MasterHandler+0x10a>
				i2cdat[tmp].dir = 1;
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL))
				{
					// check whether if we need to issue an repeat start
					if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL))
     72e:	6858      	ldr	r0, [r3, #4]
     730:	2800      	cmp	r0, #0
     732:	d0f6      	beq.n	722 <I2C_MasterHandler+0x8a>
					{
						// Send out an repeat start command
						I2Cx->I2CONSET = I2C_I2CONSET_STA;
     734:	2020      	movs	r0, #32
     736:	6020      	str	r0, [r4, #0]
						I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
     738:	230c      	movs	r3, #12
     73a:	e033      	b.n	7a4 <I2C_MasterHandler+0x10c>
		/* SLA+W has been transmitted, NACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_NACK:
		/* Data has been transmitted, NACK has been received -----------------------*/
		case I2C_I2STAT_M_TX_DAT_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
     73c:	f442 7000 	orr.w	r0, r2, #512	; 0x200
     740:	e044      	b.n	7cc <I2C_MasterHandler+0x134>
			goto retry;
		}
	}

	/* ----------------------------- RECEIVE PHASE --------------------------*/
	else if (i2cdat[tmp].dir == 1)
     742:	2901      	cmp	r1, #1
     744:	d162      	bne.n	80c <__Stack_Size+0x3c>
	{
		switch (returnCode)
     746:	2a40      	cmp	r2, #64	; 0x40
     748:	d022      	beq.n	790 <I2C_MasterHandler+0xf8>
     74a:	dc06      	bgt.n	75a <I2C_MasterHandler+0xc2>
     74c:	2a10      	cmp	r2, #16
     74e:	d00d      	beq.n	76c <I2C_MasterHandler+0xd4>
     750:	2a38      	cmp	r2, #56	; 0x38
     752:	d039      	beq.n	7c8 <I2C_MasterHandler+0x130>
     754:	2a08      	cmp	r2, #8
     756:	d13a      	bne.n	7ce <I2C_MasterHandler+0x136>
     758:	e008      	b.n	76c <I2C_MasterHandler+0xd4>
     75a:	2a50      	cmp	r2, #80	; 0x50
     75c:	d00d      	beq.n	77a <I2C_MasterHandler+0xe2>
     75e:	2a58      	cmp	r2, #88	; 0x58
     760:	d022      	beq.n	7a8 <I2C_MasterHandler+0x110>
     762:	2a48      	cmp	r2, #72	; 0x48
     764:	d133      	bne.n	7ce <I2C_MasterHandler+0x136>
			goto end_stage;

		/* SLA+R has been transmitted, NACK has been received ------------------*/
		case I2C_I2STAT_M_RX_SLAR_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
     766:	f44f 7012 	mov.w	r0, #584	; 0x248
     76a:	e02f      	b.n	7cc <I2C_MasterHandler+0x134>
			/*
			 * If there's any receive data, then start to
			 * send SLA+R right now, otherwise check whether if there's
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
     76c:	6919      	ldr	r1, [r3, #16]
		switch (returnCode)
		{
			/* A start/repeat start condition has been transmitted ---------------------*/
		case I2C_I2STAT_M_RX_START:
		case I2C_I2STAT_M_RX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     76e:	2020      	movs	r0, #32
     770:	61a0      	str	r0, [r4, #24]
			/*
			 * If there's any receive data, then start to
			 * send SLA+R right now, otherwise check whether if there's
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
     772:	b329      	cbz	r1, 7c0 <I2C_MasterHandler+0x128>
     774:	6958      	ldr	r0, [r3, #20]
     776:	b318      	cbz	r0, 7c0 <I2C_MasterHandler+0x128>
     778:	e7d3      	b.n	722 <I2C_MasterHandler+0x8a>

		/* Data has been received, ACK has been returned ----------------------*/
		case I2C_I2STAT_M_RX_DAT_ACK:
			// Note save data and increase counter first, then check later
			/* Save data  */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
     77a:	6919      	ldr	r1, [r3, #16]
     77c:	b141      	cbz	r1, 790 <I2C_MasterHandler+0xf8>
     77e:	699a      	ldr	r2, [r3, #24]
     780:	6958      	ldr	r0, [r3, #20]
     782:	4282      	cmp	r2, r0
     784:	d204      	bcs.n	790 <I2C_MasterHandler+0xf8>
			{
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     786:	68a0      	ldr	r0, [r4, #8]
     788:	5488      	strb	r0, [r1, r2]
				txrx_setup->rx_count++;
     78a:	6999      	ldr	r1, [r3, #24]
     78c:	1c4a      	adds	r2, r1, #1
     78e:	619a      	str	r2, [r3, #24]
			}
			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1))
     790:	6958      	ldr	r0, [r3, #20]
     792:	699b      	ldr	r3, [r3, #24]
     794:	1e41      	subs	r1, r0, #1
     796:	428b      	cmp	r3, r1
     798:	f04f 0204 	mov.w	r2, #4
			{
				/*Data will be received,  ACK will be return*/
				I2Cx->I2CONSET = I2C_I2CONSET_AA;
     79c:	bf34      	ite	cc
     79e:	6022      	strcc	r2, [r4, #0]
			}
			else
			{
				/*Last data will be received,  NACK will be return*/
				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
     7a0:	61a2      	strcs	r2, [r4, #24]
			}

			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     7a2:	2308      	movs	r3, #8
     7a4:	61a3      	str	r3, [r4, #24]
			break;
     7a6:	bd38      	pop	{r3, r4, r5, pc}

		/* Data has been received, NACK has been return -------------------------*/
		case I2C_I2STAT_M_RX_DAT_NACK:
			/* Save the last data */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
     7a8:	6919      	ldr	r1, [r3, #16]
     7aa:	b141      	cbz	r1, 7be <I2C_MasterHandler+0x126>
     7ac:	699a      	ldr	r2, [r3, #24]
     7ae:	6958      	ldr	r0, [r3, #20]
     7b0:	4282      	cmp	r2, r0
     7b2:	d204      	bcs.n	7be <I2C_MasterHandler+0x126>
			{
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     7b4:	68a0      	ldr	r0, [r4, #8]
     7b6:	5488      	strb	r0, [r1, r2]
				txrx_setup->rx_count++;
     7b8:	6999      	ldr	r1, [r3, #24]
     7ba:	1c4a      	adds	r2, r1, #1
     7bc:	619a      	str	r2, [r3, #24]
			}
			// success, go to end stage
			txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     7be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     7c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     7c4:	625a      	str	r2, [r3, #36]	; 0x24
			goto end_stage;
     7c6:	e00f      	b.n	7e8 <__Stack_Size+0x18>
			goto retry;

		/* Arbitration lost ----------------------------------------------------*/
		case I2C_I2STAT_M_RX_ARB_LOST:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
     7c8:	f44f 709c 	mov.w	r0, #312	; 0x138
     7cc:	6258      	str	r0, [r3, #36]	; 0x24
		default:
retry:
			// check if retransmission is available
			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max)
     7ce:	6a1a      	ldr	r2, [r3, #32]
     7d0:	69d9      	ldr	r1, [r3, #28]
     7d2:	428a      	cmp	r2, r1
     7d4:	d208      	bcs.n	7e8 <__Stack_Size+0x18>
			{
				// Clear tx count
				txrx_setup->tx_count = 0;
     7d6:	2100      	movs	r1, #0
     7d8:	60d9      	str	r1, [r3, #12]
				I2Cx->I2CONSET = I2C_I2CONSET_STA;
     7da:	2020      	movs	r0, #32
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
     7dc:	210c      	movs	r1, #12
				txrx_setup->retransmissions_count++;
     7de:	3201      	adds	r2, #1
			// check if retransmission is available
			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max)
			{
				// Clear tx count
				txrx_setup->tx_count = 0;
				I2Cx->I2CONSET = I2C_I2CONSET_STA;
     7e0:	6020      	str	r0, [r4, #0]
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
     7e2:	61a1      	str	r1, [r4, #24]
				txrx_setup->retransmissions_count++;
     7e4:	621a      	str	r2, [r3, #32]
     7e6:	bd38      	pop	{r3, r4, r5, pc}
			// End of stage
			else
			{
end_stage:
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
     7e8:	2100      	movs	r1, #0
     7ea:	4620      	mov	r0, r4
     7ec:	f7ff ff21 	bl	632 <I2C_IntCmd>
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     7f0:	6823      	ldr	r3, [r4, #0]
     7f2:	0699      	lsls	r1, r3, #26
     7f4:	d501      	bpl.n	7fa <__Stack_Size+0x2a>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     7f6:	2020      	movs	r0, #32
     7f8:	61a0      	str	r0, [r4, #24]
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
     7fa:	4b05      	ldr	r3, [pc, #20]	; (810 <__Stack_Size+0x40>)
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     7fc:	2210      	movs	r2, #16
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     7fe:	2108      	movs	r1, #8
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
     800:	eb03 0585 	add.w	r5, r3, r5, lsl #2
     804:	2001      	movs	r0, #1
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     806:	6022      	str	r2, [r4, #0]
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
     808:	61a8      	str	r0, [r5, #24]
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     80a:	61a1      	str	r1, [r4, #24]
     80c:	bd38      	pop	{r3, r4, r5, pc}
     80e:	bf00      	nop
     810:	10000000 	.word	0x10000000

00000814 <I2C_SlaveHandler>:
 *  			- LPC_I2C1
 *  			- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_SlaveHandler (LPC_I2C_TypeDef  *I2Cx)
{
     814:	b570      	push	{r4, r5, r6, lr}
     816:	4604      	mov	r4, r0
	int32_t tmp;
	uint8_t returnCode;
	I2C_S_SETUP_Type *txrx_setup;
	uint32_t timeout;

	tmp = I2C_getNum(I2Cx);
     818:	f7ff fe4c 	bl	4b4 <I2C_getNum>
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
     81c:	4b35      	ldr	r3, [pc, #212]	; (8f4 <I2C_SlaveHandler+0xe0>)
	int32_t tmp;
	uint8_t returnCode;
	I2C_S_SETUP_Type *txrx_setup;
	uint32_t timeout;

	tmp = I2C_getNum(I2Cx);
     81e:	4606      	mov	r6, r0
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
     820:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     824:	6860      	ldr	r0, [r4, #4]
     826:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	// Save current status
	txrx_setup->status = returnCode;
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     82a:	29f8      	cmp	r1, #248	; 0xf8
	tmp = I2C_getNum(I2Cx);
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
	// Save current status
	txrx_setup->status = returnCode;
     82c:	61a9      	str	r1, [r5, #24]
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     82e:	d04b      	beq.n	8c8 <I2C_SlaveHandler+0xb4>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		return;
	}


	switch (returnCode)
     830:	2998      	cmp	r1, #152	; 0x98
     832:	d049      	beq.n	8c8 <I2C_SlaveHandler+0xb4>
     834:	dc0b      	bgt.n	84e <I2C_SlaveHandler+0x3a>
     836:	2980      	cmp	r1, #128	; 0x80
     838:	d016      	beq.n	868 <I2C_SlaveHandler+0x54>
     83a:	dc03      	bgt.n	844 <I2C_SlaveHandler+0x30>
     83c:	2960      	cmp	r1, #96	; 0x60
     83e:	d041      	beq.n	8c4 <I2C_SlaveHandler+0xb0>
     840:	2970      	cmp	r1, #112	; 0x70
     842:	e00f      	b.n	864 <I2C_SlaveHandler+0x50>
     844:	2988      	cmp	r1, #136	; 0x88
     846:	d03f      	beq.n	8c8 <I2C_SlaveHandler+0xb4>
     848:	2990      	cmp	r1, #144	; 0x90
     84a:	d147      	bne.n	8dc <I2C_SlaveHandler+0xc8>
     84c:	e00c      	b.n	868 <I2C_SlaveHandler+0x54>
     84e:	29b8      	cmp	r1, #184	; 0xb8
     850:	d02e      	beq.n	8b0 <I2C_SlaveHandler+0x9c>
     852:	dc04      	bgt.n	85e <I2C_SlaveHandler+0x4a>
     854:	29a0      	cmp	r1, #160	; 0xa0
     856:	d014      	beq.n	882 <I2C_SlaveHandler+0x6e>
     858:	29a8      	cmp	r1, #168	; 0xa8
     85a:	d13f      	bne.n	8dc <I2C_SlaveHandler+0xc8>
     85c:	e028      	b.n	8b0 <I2C_SlaveHandler+0x9c>
     85e:	29c0      	cmp	r1, #192	; 0xc0
     860:	d035      	beq.n	8ce <I2C_SlaveHandler+0xba>
     862:	29f8      	cmp	r1, #248	; 0xf8
     864:	d13a      	bne.n	8dc <I2C_SlaveHandler+0xc8>
     866:	e02d      	b.n	8c4 <I2C_SlaveHandler+0xb0>
	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->rx_count < txrx_setup->rx_length) && (txrx_setup->rx_data != NULL))
     868:	696b      	ldr	r3, [r5, #20]
     86a:	692a      	ldr	r2, [r5, #16]
     86c:	4293      	cmp	r3, r2
     86e:	d229      	bcs.n	8c4 <I2C_SlaveHandler+0xb0>
     870:	68e8      	ldr	r0, [r5, #12]
     872:	2800      	cmp	r0, #0
     874:	d026      	beq.n	8c4 <I2C_SlaveHandler+0xb0>
		{
			*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (uint8_t)I2Cx->I2DAT;
     876:	68a1      	ldr	r1, [r4, #8]
     878:	54c1      	strb	r1, [r0, r3]
			txrx_setup->rx_count++;
     87a:	696b      	ldr	r3, [r5, #20]
     87c:	1c5a      	adds	r2, r3, #1
     87e:	616a      	str	r2, [r5, #20]
     880:	e020      	b.n	8c4 <I2C_SlaveHandler+0xb0>
	 */

	/* A Stop or a repeat start condition */
	case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
		// Temporally lock the interrupt for timeout condition
		I2C_IntCmd(I2Cx, 0);
     882:	4620      	mov	r0, r4
     884:	2100      	movs	r1, #0
     886:	f7ff fed4 	bl	632 <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     88a:	2008      	movs	r0, #8
     88c:	61a0      	str	r0, [r4, #24]
     88e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		// enable time out
		timeout = I2C_SLAVE_TIME_OUT;
		while(1)
		{
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
     892:	6821      	ldr	r1, [r4, #0]
     894:	0708      	lsls	r0, r1, #28
     896:	d505      	bpl.n	8a4 <I2C_SlaveHandler+0x90>
			{
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
     898:	4620      	mov	r0, r4
     89a:	2101      	movs	r1, #1
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
		I2C_SlaveComplete[tmp] = TRUE;
		break;
	}
}
     89c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		while(1)
		{
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
			{
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
     8a0:	f7ff bec7 	b.w	632 <I2C_IntCmd>
				break;
			}
			else
			{
				timeout--;
				if (timeout == 0)
     8a4:	3b01      	subs	r3, #1
     8a6:	d1f4      	bne.n	892 <I2C_SlaveHandler+0x7e>
				{
					// timeout occur, it's really a stop condition
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     8a8:	69aa      	ldr	r2, [r5, #24]
     8aa:	f442 6380 	orr.w	r3, r2, #1024	; 0x400
     8ae:	e014      	b.n	8da <I2C_SlaveHandler+0xc6>
	case I2C_I2STAT_S_TX_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
     8b0:	68ab      	ldr	r3, [r5, #8]
     8b2:	686a      	ldr	r2, [r5, #4]
     8b4:	4293      	cmp	r3, r2
     8b6:	d205      	bcs.n	8c4 <I2C_SlaveHandler+0xb0>
     8b8:	6828      	ldr	r0, [r5, #0]
     8ba:	b118      	cbz	r0, 8c4 <I2C_SlaveHandler+0xb0>
		{
			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
     8bc:	5cc1      	ldrb	r1, [r0, r3]
			txrx_setup->tx_count++;
     8be:	3301      	adds	r3, #1
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
		{
			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
     8c0:	60a1      	str	r1, [r4, #8]
			txrx_setup->tx_count++;
     8c2:	60ab      	str	r3, [r5, #8]
		}
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     8c4:	2204      	movs	r2, #4
     8c6:	6022      	str	r2, [r4, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     8c8:	2008      	movs	r0, #8
     8ca:	61a0      	str	r0, [r4, #24]
		break;
     8cc:	bd70      	pop	{r4, r5, r6, pc}
	 * Note: Don't wait for stop event since in slave transmit mode,
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     8ce:	2004      	movs	r0, #4
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     8d0:	2108      	movs	r1, #8
	 * Note: Don't wait for stop event since in slave transmit mode,
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     8d2:	6020      	str	r0, [r4, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     8d4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     8d8:	61a1      	str	r1, [r4, #24]
		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     8da:	61ab      	str	r3, [r5, #24]

	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
     8dc:	4620      	mov	r0, r4
     8de:	2100      	movs	r1, #0
     8e0:	f7ff fea7 	bl	632 <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
		I2C_SlaveComplete[tmp] = TRUE;
     8e4:	4803      	ldr	r0, [pc, #12]	; (8f4 <I2C_SlaveHandler+0xe0>)
	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     8e6:	222c      	movs	r2, #44	; 0x2c
		I2C_SlaveComplete[tmp] = TRUE;
     8e8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
     8ec:	2101      	movs	r1, #1
	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     8ee:	61a2      	str	r2, [r4, #24]
		I2C_SlaveComplete[tmp] = TRUE;
     8f0:	6271      	str	r1, [r6, #36]	; 0x24
     8f2:	bd70      	pop	{r4, r5, r6, pc}
     8f4:	10000000 	.word	0x10000000

000008f8 <I2C_MasterTransferData>:
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     8fa:	2600      	movs	r6, #0
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     8fc:	4605      	mov	r5, r0
     8fe:	460c      	mov	r4, r1

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     900:	60ce      	str	r6, [r1, #12]
	TransferCfg->rx_count = 0;
     902:	618e      	str	r6, [r1, #24]
	TransferCfg->status = 0;
     904:	624e      	str	r6, [r1, #36]	; 0x24

	if (Opt == I2C_TRANSFER_POLLING)
     906:	4617      	mov	r7, r2
     908:	2a00      	cmp	r2, #0
     90a:	f040 80b6 	bne.w	a7a <I2C_MasterTransferData+0x182>
	{
		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
     90e:	6222      	str	r2, [r4, #32]
retry:
		// reset all default state
		txdat = (uint8_t *) TransferCfg->tx_data;
		rxdat = (uint8_t *) TransferCfg->rx_data;
		// Reset I2C setup value to default state
		TransferCfg->tx_count = 0;
     910:	2300      	movs	r3, #0
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     912:	2120      	movs	r1, #32
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     914:	2208      	movs	r2, #8
	{
		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
retry:
		// reset all default state
		txdat = (uint8_t *) TransferCfg->tx_data;
     916:	6867      	ldr	r7, [r4, #4]
		rxdat = (uint8_t *) TransferCfg->rx_data;
     918:	6926      	ldr	r6, [r4, #16]
		// Reset I2C setup value to default state
		TransferCfg->tx_count = 0;
     91a:	60e3      	str	r3, [r4, #12]
		TransferCfg->rx_count = 0;
     91c:	61a3      	str	r3, [r4, #24]
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     91e:	6029      	str	r1, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     920:	61aa      	str	r2, [r5, #24]

	// Wait for complete
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     922:	6828      	ldr	r0, [r5, #0]
     924:	0702      	lsls	r2, r0, #28
     926:	d5fc      	bpl.n	922 <I2C_MasterTransferData+0x2a>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     928:	2320      	movs	r3, #32
     92a:	61ab      	str	r3, [r5, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     92c:	6869      	ldr	r1, [r5, #4]
     92e:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
		TransferCfg->rx_count = 0;
		CodeStatus = 0;

		// Start command
		CodeStatus = I2C_Start(I2Cx);
		if ((CodeStatus != I2C_I2STAT_M_TX_START) && (CodeStatus != I2C_I2STAT_M_TX_RESTART))
     932:	2b08      	cmp	r3, #8
     934:	d001      	beq.n	93a <I2C_MasterTransferData+0x42>
     936:	2b10      	cmp	r3, #16
     938:	d135      	bne.n	9a6 <I2C_MasterTransferData+0xae>
				goto retry;
			}
		}

		/* In case of sending data first --------------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL))
     93a:	68a2      	ldr	r2, [r4, #8]
     93c:	b912      	cbnz	r2, 944 <I2C_MasterTransferData+0x4c>
				TransferCfg->tx_count++;
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
     93e:	68a0      	ldr	r0, [r4, #8]
     940:	b9d8      	cbnz	r0, 97a <I2C_MasterTransferData+0x82>
     942:	e038      	b.n	9b6 <I2C_MasterTransferData+0xbe>
				goto retry;
			}
		}

		/* In case of sending data first --------------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL))
     944:	2f00      	cmp	r7, #0
     946:	d0fa      	beq.n	93e <I2C_MasterTransferData+0x46>
		{
			/* Send slave address + WR direction bit = 0 ----------------------------------- */
			CodeStatus = I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
     948:	6820      	ldr	r0, [r4, #0]
     94a:	0043      	lsls	r3, r0, #1
     94c:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
     950:	4628      	mov	r0, r5
     952:	f7ff fdc5 	bl	4e0 <I2C_SendByte>
			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK)
     956:	2818      	cmp	r0, #24
     958:	d142      	bne.n	9e0 <I2C_MasterTransferData+0xe8>
 * or receive data pointer set to NULL.
 * - In case of using I2C to transmit followed by receive data, transmit length,
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
     95a:	3f01      	subs	r7, #1
					goto retry;
				}
			}

			/* Send a number of data bytes ---------------------------------------- */
			while (TransferCfg->tx_count < TransferCfg->tx_length)
     95c:	68e1      	ldr	r1, [r4, #12]
     95e:	68a2      	ldr	r2, [r4, #8]
     960:	4291      	cmp	r1, r2
     962:	d2ec      	bcs.n	93e <I2C_MasterTransferData+0x46>
			{
				CodeStatus = I2C_SendByte(I2Cx, *txdat);
     964:	4628      	mov	r0, r5
     966:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     96a:	f7ff fdb9 	bl	4e0 <I2C_SendByte>
				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK)
     96e:	2828      	cmp	r0, #40	; 0x28
     970:	d136      	bne.n	9e0 <I2C_MasterTransferData+0xe8>
						goto retry;
					}
				}

				txdat++;
				TransferCfg->tx_count++;
     972:	68e0      	ldr	r0, [r4, #12]
     974:	1c41      	adds	r1, r0, #1
     976:	60e1      	str	r1, [r4, #12]
     978:	e7f0      	b.n	95c <I2C_MasterTransferData+0x64>
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
     97a:	6863      	ldr	r3, [r4, #4]
     97c:	b1db      	cbz	r3, 9b6 <I2C_MasterTransferData+0xbe>
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
     97e:	6961      	ldr	r1, [r4, #20]
     980:	b1c9      	cbz	r1, 9b6 <I2C_MasterTransferData+0xbe>
     982:	6922      	ldr	r2, [r4, #16]
     984:	b1ba      	cbz	r2, 9b6 <I2C_MasterTransferData+0xbe>
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     986:	2020      	movs	r0, #32
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     988:	2308      	movs	r3, #8
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     98a:	6028      	str	r0, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     98c:	61ab      	str	r3, [r5, #24]

	// Wait for complete
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     98e:	6829      	ldr	r1, [r5, #0]
     990:	070b      	lsls	r3, r1, #28
     992:	d5fc      	bpl.n	98e <I2C_MasterTransferData+0x96>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     994:	2220      	movs	r2, #32
     996:	61aa      	str	r2, [r5, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     998:	6868      	ldr	r0, [r5, #4]
     99a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
		{
			CodeStatus = I2C_Start(I2Cx);
			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
     99e:	2b08      	cmp	r3, #8
     9a0:	d009      	beq.n	9b6 <I2C_MasterTransferData+0xbe>
     9a2:	2b10      	cmp	r3, #16
     9a4:	d007      	beq.n	9b6 <I2C_MasterTransferData+0xbe>
			{
				TransferCfg->retransmissions_count++;
     9a6:	6a22      	ldr	r2, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     9a8:	69e1      	ldr	r1, [r4, #28]
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
		{
			CodeStatus = I2C_Start(I2Cx);
			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
			{
				TransferCfg->retransmissions_count++;
     9aa:	1c50      	adds	r0, r2, #1
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     9ac:	4288      	cmp	r0, r1
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
		{
			CodeStatus = I2C_Start(I2Cx);
			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
			{
				TransferCfg->retransmissions_count++;
     9ae:	6220      	str	r0, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     9b0:	d9ae      	bls.n	910 <I2C_MasterTransferData+0x18>
				{
					// Update status
					TransferCfg->status = CodeStatus;
     9b2:	6263      	str	r3, [r4, #36]	; 0x24
					goto error;
     9b4:	e056      	b.n	a64 <I2C_MasterTransferData+0x16c>
				}
			}
		}

		/* Then, start reading after sending data -------------------------------------- */
		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
     9b6:	6961      	ldr	r1, [r4, #20]
     9b8:	b929      	cbnz	r1, 9c6 <I2C_MasterTransferData+0xce>
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     9ba:	682b      	ldr	r3, [r5, #0]
     9bc:	0698      	lsls	r0, r3, #26
     9be:	d54b      	bpl.n	a58 <I2C_MasterTransferData+0x160>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     9c0:	2120      	movs	r1, #32
     9c2:	61a9      	str	r1, [r5, #24]
     9c4:	e048      	b.n	a58 <I2C_MasterTransferData+0x160>
				}
			}
		}

		/* Then, start reading after sending data -------------------------------------- */
		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
     9c6:	6922      	ldr	r2, [r4, #16]
     9c8:	2a00      	cmp	r2, #0
     9ca:	d0f6      	beq.n	9ba <I2C_MasterTransferData+0xc2>
		{
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
     9cc:	6820      	ldr	r0, [r4, #0]
     9ce:	0043      	lsls	r3, r0, #1
     9d0:	f043 0101 	orr.w	r1, r3, #1
     9d4:	4628      	mov	r0, r5
     9d6:	b2c9      	uxtb	r1, r1
     9d8:	f7ff fd82 	bl	4e0 <I2C_SendByte>
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
     9dc:	2840      	cmp	r0, #64	; 0x40
     9de:	d021      	beq.n	a24 <I2C_MasterTransferData+0x12c>
			{
				TransferCfg->retransmissions_count++;
     9e0:	6a22      	ldr	r2, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     9e2:	69e1      	ldr	r1, [r4, #28]
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
			{
				TransferCfg->retransmissions_count++;
     9e4:	1c53      	adds	r3, r2, #1
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     9e6:	428b      	cmp	r3, r1
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
			{
				TransferCfg->retransmissions_count++;
     9e8:	6223      	str	r3, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     9ea:	d991      	bls.n	910 <I2C_MasterTransferData+0x18>
				{
					// update status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
     9ec:	f440 7000 	orr.w	r0, r0, #512	; 0x200
     9f0:	6260      	str	r0, [r4, #36]	; 0x24
					goto error;
     9f2:	e037      	b.n	a64 <I2C_MasterTransferData+0x16c>
				/*
				 * Note that: if data length is only one, the master should not
				 * issue an ACK signal on bus after reading to avoid of next data frame
				 * on slave side
				 */
				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1))
     9f4:	1e43      	subs	r3, r0, #1
     9f6:	429a      	cmp	r2, r3
     9f8:	f04f 0108 	mov.w	r1, #8
     9fc:	f04f 0204 	mov.w	r2, #4
     a00:	d215      	bcs.n	a2e <I2C_MasterTransferData+0x136>
 *********************************************************************/
static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack)
{
	if (ack == TRUE)
	{
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     a02:	602a      	str	r2, [r5, #0]
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a04:	61a9      	str	r1, [r5, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     a06:	682b      	ldr	r3, [r5, #0]
     a08:	0719      	lsls	r1, r3, #28
     a0a:	d5fc      	bpl.n	a06 <I2C_MasterTransferData+0x10e>
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     a0c:	68a9      	ldr	r1, [r5, #8]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     a0e:	686a      	ldr	r2, [r5, #4]
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     a10:	b2c9      	uxtb	r1, r1
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     a12:	f002 00f8 	and.w	r0, r2, #248	; 0xf8
				 */
				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1))
				{
					// Issue an ACK signal for next data frame
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 1);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_ACK)
     a16:	2850      	cmp	r0, #80	; 0x50
				}
				else
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
     a18:	d115      	bne.n	a46 <I2C_MasterTransferData+0x14e>
						{
							goto retry;
						}
					}
				}
				*rxdat++ = tmp;
     a1a:	f806 1b01 	strb.w	r1, [r6], #1
				TransferCfg->rx_count++;
     a1e:	69a0      	ldr	r0, [r4, #24]
     a20:	1c43      	adds	r3, r0, #1
     a22:	61a3      	str	r3, [r4, #24]
					goto retry;
				}
			}

			/* Receive a number of data bytes ------------------------------------------------- */
			while (TransferCfg->rx_count < TransferCfg->rx_length)
     a24:	69a2      	ldr	r2, [r4, #24]
     a26:	6960      	ldr	r0, [r4, #20]
     a28:	4282      	cmp	r2, r0
     a2a:	d3e3      	bcc.n	9f4 <I2C_MasterTransferData+0xfc>
     a2c:	e7c5      	b.n	9ba <I2C_MasterTransferData+0xc2>
	{
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     a2e:	61aa      	str	r2, [r5, #24]
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a30:	61a9      	str	r1, [r5, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     a32:	6828      	ldr	r0, [r5, #0]
     a34:	0702      	lsls	r2, r0, #28
     a36:	d5fc      	bpl.n	a32 <I2C_MasterTransferData+0x13a>
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     a38:	68ab      	ldr	r3, [r5, #8]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     a3a:	686a      	ldr	r2, [r5, #4]
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     a3c:	b2d9      	uxtb	r1, r3
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     a3e:	f002 00f8 	and.w	r0, r2, #248	; 0xf8
				}
				else
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
     a42:	2858      	cmp	r0, #88	; 0x58
     a44:	e7e8      	b.n	a18 <I2C_MasterTransferData+0x120>
					{
						TransferCfg->retransmissions_count++;
     a46:	6a21      	ldr	r1, [r4, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     a48:	69e3      	ldr	r3, [r4, #28]
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
					{
						TransferCfg->retransmissions_count++;
     a4a:	1c4a      	adds	r2, r1, #1
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     a4c:	429a      	cmp	r2, r3
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
					{
						TransferCfg->retransmissions_count++;
     a4e:	6222      	str	r2, [r4, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     a50:	f67f af5e 	bls.w	910 <I2C_MasterTransferData+0x18>
						{
							// update status
							TransferCfg->status = CodeStatus;
     a54:	6260      	str	r0, [r4, #36]	; 0x24
							goto error;
     a56:	e005      	b.n	a64 <I2C_MasterTransferData+0x16c>
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     a58:	2210      	movs	r2, #16
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a5a:	2008      	movs	r0, #8
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     a5c:	602a      	str	r2, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a5e:	61a8      	str	r0, [r5, #24]
			}
		}

		/* Send STOP condition ------------------------------------------------- */
		I2C_Stop(I2Cx);
		return SUCCESS;
     a60:	2001      	movs	r0, #1
     a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     a64:	682b      	ldr	r3, [r5, #0]
     a66:	069b      	lsls	r3, r3, #26
     a68:	d501      	bpl.n	a6e <I2C_MasterTransferData+0x176>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     a6a:	2220      	movs	r2, #32
     a6c:	61aa      	str	r2, [r5, #24]
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     a6e:	2010      	movs	r0, #16
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a70:	2108      	movs	r1, #8
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     a72:	6028      	str	r0, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a74:	61a9      	str	r1, [r5, #24]
		return SUCCESS;

error:
		// Send stop condition
		I2C_Stop(I2Cx);
		return ERROR;
     a76:	2000      	movs	r0, #0
     a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT)
     a7a:	2a01      	cmp	r2, #1
     a7c:	d1fb      	bne.n	a76 <I2C_MasterTransferData+0x17e>
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
     a7e:	f7ff fd19 	bl	4b4 <I2C_getNum>
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     a82:	4b08      	ldr	r3, [pc, #32]	; (aa4 <I2C_MasterTransferData+0x1ac>)
     a84:	b2c0      	uxtb	r0, r0
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;
     a86:	eb03 01c0 	add.w	r1, r3, r0, lsl #3

	else if (Opt == I2C_TRANSFER_INTERRUPT)
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     a8a:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a8e:	2208      	movs	r2, #8
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
     a90:	2020      	movs	r0, #32
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;
     a92:	604e      	str	r6, [r1, #4]

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a94:	61aa      	str	r2, [r5, #24]
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
		I2C_IntCmd(I2Cx, 1);
     a96:	4639      	mov	r1, r7
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
     a98:	6028      	str	r0, [r5, #0]
		I2C_IntCmd(I2Cx, 1);
     a9a:	4628      	mov	r0, r5
     a9c:	f7ff fdc9 	bl	632 <I2C_IntCmd>
     aa0:	e7de      	b.n	a60 <I2C_MasterTransferData+0x168>
     aa2:	bf00      	nop
     aa4:	10000000 	.word	0x10000000

00000aa8 <I2C_SlaveTransferData>:
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t time_en;
	int32_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
     aaa:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     aae:	460d      	mov	r5, r1
	uint32_t timeout;
	int32_t time_en;
	int32_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
     ab0:	680f      	ldr	r7, [r1, #0]
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     ab2:	2100      	movs	r1, #0
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     ab4:	4604      	mov	r4, r0

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     ab6:	60a9      	str	r1, [r5, #8]
	TransferCfg->rx_count = 0;
     ab8:	6169      	str	r1, [r5, #20]
	TransferCfg->status = 0;
     aba:	61a9      	str	r1, [r5, #24]


	// Polling option
	if (Opt == I2C_TRANSFER_POLLING)
     abc:	4616      	mov	r6, r2
     abe:	2a00      	cmp	r2, #0
     ac0:	d165      	bne.n	b8e <I2C_SlaveTransferData+0xe6>
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
     ac2:	2228      	movs	r2, #40	; 0x28

	// Polling option
	if (Opt == I2C_TRANSFER_POLLING)
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     ac4:	2004      	movs	r0, #4
     ac6:	6020      	str	r0, [r4, #0]
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);

		time_en = 0;
		timeout = 0;
     ac8:	4631      	mov	r1, r6
	if (Opt == I2C_TRANSFER_POLLING)
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
     aca:	61a2      	str	r2, [r4, #24]

		time_en = 0;
     acc:	4632      	mov	r2, r6
		timeout = 0;

		while (1)
		{
			/* Check SI flag ready */
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
     ace:	6820      	ldr	r0, [r4, #0]
     ad0:	0700      	lsls	r0, r0, #28
     ad2:	d54c      	bpl.n	b6e <I2C_SlaveTransferData+0xc6>
			{
				time_en = 0;

				switch (CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK))
     ad4:	6860      	ldr	r0, [r4, #4]
     ad6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
     ada:	2b98      	cmp	r3, #152	; 0x98
     adc:	d036      	beq.n	b4c <I2C_SlaveTransferData+0xa4>
     ade:	d80c      	bhi.n	afa <I2C_SlaveTransferData+0x52>
     ae0:	2b80      	cmp	r3, #128	; 0x80
     ae2:	d019      	beq.n	b18 <I2C_SlaveTransferData+0x70>
     ae4:	d804      	bhi.n	af0 <I2C_SlaveTransferData+0x48>
     ae6:	2b60      	cmp	r3, #96	; 0x60
     ae8:	d02e      	beq.n	b48 <I2C_SlaveTransferData+0xa0>
     aea:	2b70      	cmp	r3, #112	; 0x70
     aec:	d138      	bne.n	b60 <I2C_SlaveTransferData+0xb8>
     aee:	e02b      	b.n	b48 <I2C_SlaveTransferData+0xa0>
     af0:	2b88      	cmp	r3, #136	; 0x88
     af2:	d02b      	beq.n	b4c <I2C_SlaveTransferData+0xa4>
     af4:	2b90      	cmp	r3, #144	; 0x90
     af6:	d133      	bne.n	b60 <I2C_SlaveTransferData+0xb8>
     af8:	e00e      	b.n	b18 <I2C_SlaveTransferData+0x70>
     afa:	2bb8      	cmp	r3, #184	; 0xb8
     afc:	d019      	beq.n	b32 <I2C_SlaveTransferData+0x8a>
     afe:	d804      	bhi.n	b0a <I2C_SlaveTransferData+0x62>
     b00:	2ba0      	cmp	r3, #160	; 0xa0
     b02:	d028      	beq.n	b56 <I2C_SlaveTransferData+0xae>
     b04:	2ba8      	cmp	r3, #168	; 0xa8
     b06:	d12b      	bne.n	b60 <I2C_SlaveTransferData+0xb8>
     b08:	e013      	b.n	b32 <I2C_SlaveTransferData+0x8a>
     b0a:	2bc0      	cmp	r3, #192	; 0xc0
     b0c:	f04f 0004 	mov.w	r0, #4
     b10:	d020      	beq.n	b54 <I2C_SlaveTransferData+0xac>
     b12:	2bf8      	cmp	r3, #248	; 0xf8
     b14:	d124      	bne.n	b60 <I2C_SlaveTransferData+0xb8>
     b16:	e018      	b.n	b4a <I2C_SlaveTransferData+0xa2>
				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->rx_count < TransferCfg->rx_length) \
     b18:	6968      	ldr	r0, [r5, #20]
     b1a:	692a      	ldr	r2, [r5, #16]
     b1c:	4290      	cmp	r0, r2
     b1e:	d213      	bcs.n	b48 <I2C_SlaveTransferData+0xa0>
							&& (TransferCfg->rx_data != NULL))
     b20:	68e8      	ldr	r0, [r5, #12]
     b22:	b188      	cbz	r0, b48 <I2C_SlaveTransferData+0xa0>
					{
						*rxdat++ = (uint8_t)I2Cx->I2DAT;
     b24:	68a2      	ldr	r2, [r4, #8]
     b26:	f80c 2b01 	strb.w	r2, [ip], #1
						TransferCfg->rx_count++;
     b2a:	6968      	ldr	r0, [r5, #20]
     b2c:	1c42      	adds	r2, r0, #1
     b2e:	616a      	str	r2, [r5, #20]
     b30:	e00a      	b.n	b48 <I2C_SlaveTransferData+0xa0>
				case I2C_I2STAT_S_TX_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
     b32:	68aa      	ldr	r2, [r5, #8]
     b34:	6868      	ldr	r0, [r5, #4]
     b36:	4282      	cmp	r2, r0
     b38:	d206      	bcs.n	b48 <I2C_SlaveTransferData+0xa0>
							&& (TransferCfg->tx_data != NULL))
     b3a:	6828      	ldr	r0, [r5, #0]
     b3c:	b120      	cbz	r0, b48 <I2C_SlaveTransferData+0xa0>
					{
						I2Cx->I2DAT = *txdat++;
     b3e:	f817 0b01 	ldrb.w	r0, [r7], #1
						TransferCfg->tx_count++;
     b42:	3201      	adds	r2, #1
					 * data length, just ignore them.
					 */
					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
							&& (TransferCfg->tx_data != NULL))
					{
						I2Cx->I2DAT = *txdat++;
     b44:	60a0      	str	r0, [r4, #8]
						TransferCfg->tx_count++;
     b46:	60aa      	str	r2, [r5, #8]
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
     b48:	2004      	movs	r0, #4
     b4a:	6020      	str	r0, [r4, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b4c:	2208      	movs	r2, #8
     b4e:	61a2      	str	r2, [r4, #24]
		while (1)
		{
			/* Check SI flag ready */
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
			{
				time_en = 0;
     b50:	2200      	movs	r2, #0
						I2Cx->I2DAT = *txdat++;
						TransferCfg->tx_count++;
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					break;
     b52:	e7bc      	b.n	ace <I2C_SlaveTransferData+0x26>
				 * Note: Don't wait for stop event since in slave transmit mode,
				 * since there no proof lets us know when a stop signal has been received
				 * on slave side.
				 */
				case I2C_I2STAT_S_TX_DAT_NACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
     b54:	6020      	str	r0, [r4, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b56:	2208      	movs	r2, #8
     b58:	61a2      	str	r2, [r4, #24]
					// enable time out
					time_en = 1;
					timeout = 0;
     b5a:	2100      	movs	r1, #0
				 */
				case I2C_I2STAT_S_TX_DAT_NACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					// enable time out
					time_en = 1;
     b5c:	2201      	movs	r2, #1
					timeout = 0;
					break;
     b5e:	e7b6      	b.n	ace <I2C_SlaveTransferData+0x26>

				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b60:	2108      	movs	r1, #8
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
		return SUCCESS;

s_error:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     b62:	2004      	movs	r0, #4
					timeout = 0;
					break;

				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b64:	61a1      	str	r1, [r4, #24]
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
		return SUCCESS;

s_error:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     b66:	61a0      	str	r0, [r4, #24]
		// Update status
		TransferCfg->status = CodeStatus;
     b68:	61ab      	str	r3, [r5, #24]
		return ERROR;
     b6a:	2000      	movs	r0, #0
     b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					goto s_error;
				}
			}
			else if (time_en)
     b6e:	2a00      	cmp	r2, #0
     b70:	d0ad      	beq.n	ace <I2C_SlaveTransferData+0x26>
			{
				if (timeout++ > I2C_SLAVE_TIME_OUT)
     b72:	1c4a      	adds	r2, r1, #1
     b74:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
     b78:	d802      	bhi.n	b80 <I2C_SlaveTransferData+0xd8>
     b7a:	4611      	mov	r1, r2
     b7c:	2201      	movs	r2, #1
     b7e:	e7a6      	b.n	ace <I2C_SlaveTransferData+0x26>
			}
		}

s_end_stage:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     b80:	2104      	movs	r1, #4
		// Check if there's no error during operation
		// Update status
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
     b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
			}
		}

s_end_stage:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     b86:	61a1      	str	r1, [r4, #24]
		// Check if there's no error during operation
		// Update status
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
     b88:	61ab      	str	r3, [r5, #24]
		return SUCCESS;
     b8a:	2001      	movs	r0, #1
     b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Update status
		TransferCfg->status = CodeStatus;
		return ERROR;
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT)
     b8e:	2a01      	cmp	r2, #1
     b90:	d1eb      	bne.n	b6a <I2C_SlaveTransferData+0xc2>
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
     b92:	f7ff fc8f 	bl	4b4 <I2C_getNum>
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     b96:	4b07      	ldr	r3, [pc, #28]	; (bb4 <I2C_SlaveTransferData+0x10c>)
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     b98:	2128      	movs	r1, #40	; 0x28

	else if (Opt == I2C_TRANSFER_INTERRUPT)
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     b9a:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     b9e:	2204      	movs	r2, #4
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;
     ba0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     ba4:	6046      	str	r6, [r0, #4]

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     ba6:	6022      	str	r2, [r4, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
		I2C_IntCmd(I2Cx, 1);
     ba8:	4620      	mov	r0, r4
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     baa:	61a1      	str	r1, [r4, #24]
		I2C_IntCmd(I2Cx, 1);
     bac:	4631      	mov	r1, r6
     bae:	f7ff fd40 	bl	632 <I2C_IntCmd>
     bb2:	e7ea      	b.n	b8a <I2C_SlaveTransferData+0xe2>
     bb4:	10000000 	.word	0x10000000

00000bb8 <I2C_SetOwnSlaveAddr>:
 * 				structure that contains the configuration information for the
*               specified I2C slave address.
 * @return 		None
 **********************************************************************/
void I2C_SetOwnSlaveAddr(LPC_I2C_TypeDef *I2Cx, I2C_OWNSLAVEADDR_CFG_Type *OwnSlaveAddrConfigStruct)
{
     bb8:	b510      	push	{r4, lr}
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
     bba:	788b      	ldrb	r3, [r1, #2]
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
     bbc:	784a      	ldrb	r2, [r1, #1]
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
     bbe:	1e5c      	subs	r4, r3, #1
     bc0:	4263      	negs	r3, r4
     bc2:	415c      	adcs	r4, r3
     bc4:	ea44 0242 	orr.w	r2, r4, r2, lsl #1
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
     bc8:	b2d3      	uxtb	r3, r2
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
     bca:	780a      	ldrb	r2, [r1, #0]
     bcc:	2a03      	cmp	r2, #3
     bce:	d81a      	bhi.n	c06 <I2C_SetOwnSlaveAddr+0x4e>
     bd0:	e8df f002 	tbb	[pc, r2]
     bd4:	140e0802 	.word	0x140e0802
	{
	case 0:
		I2Cx->I2ADR0 = tmp;
     bd8:	60c3      	str	r3, [r0, #12]
		I2Cx->I2MASK0 = I2C_I2MASK_MASK((uint32_t) \
     bda:	78c9      	ldrb	r1, [r1, #3]
     bdc:	f001 03fe 	and.w	r3, r1, #254	; 0xfe
     be0:	6303      	str	r3, [r0, #48]	; 0x30
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
     be2:	bd10      	pop	{r4, pc}
	case 1:
		I2Cx->I2ADR1 = tmp;
     be4:	6203      	str	r3, [r0, #32]
		I2Cx->I2MASK1 = I2C_I2MASK_MASK((uint32_t) \
     be6:	78cb      	ldrb	r3, [r1, #3]
     be8:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
     bec:	6342      	str	r2, [r0, #52]	; 0x34
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
     bee:	bd10      	pop	{r4, pc}
	case 2:
		I2Cx->I2ADR2 = tmp;
     bf0:	6243      	str	r3, [r0, #36]	; 0x24
		I2Cx->I2MASK2 = I2C_I2MASK_MASK((uint32_t) \
     bf2:	78ca      	ldrb	r2, [r1, #3]
     bf4:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
     bf8:	6381      	str	r1, [r0, #56]	; 0x38
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
     bfa:	bd10      	pop	{r4, pc}
	case 3:
		I2Cx->I2ADR3 = tmp;
     bfc:	6283      	str	r3, [r0, #40]	; 0x28
		I2Cx->I2MASK3 = I2C_I2MASK_MASK((uint32_t) \
     bfe:	78c9      	ldrb	r1, [r1, #3]
     c00:	f001 03fe 	and.w	r3, r1, #254	; 0xfe
     c04:	63c3      	str	r3, [r0, #60]	; 0x3c
     c06:	bd10      	pop	{r4, pc}

00000c08 <I2C_MonitorModeConfig>:
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= MonitorCfgType;
     c08:	69c3      	ldr	r3, [r0, #28]
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
     c0a:	2a01      	cmp	r2, #1
	{
		I2Cx->MMCTRL |= MonitorCfgType;
	}
	else
	{
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
     c0c:	bf16      	itet	ne
     c0e:	f003 0307 	andne.w	r3, r3, #7
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= MonitorCfgType;
     c12:	4319      	orreq	r1, r3
	}
	else
	{
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
     c14:	ea23 0101 	bicne.w	r1, r3, r1
     c18:	61c1      	str	r1, [r0, #28]
     c1a:	4770      	bx	lr

00000c1c <I2C_MonitorModeCmd>:
void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
     c1c:	2901      	cmp	r1, #1
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
     c1e:	69c3      	ldr	r3, [r0, #28]
void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
     c20:	d106      	bne.n	c30 <I2C_MonitorModeCmd+0x14>
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
     c22:	f043 0301 	orr.w	r3, r3, #1
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     c26:	2104      	movs	r1, #4
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
     c28:	61c3      	str	r3, [r0, #28]
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     c2a:	2228      	movs	r2, #40	; 0x28
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     c2c:	6001      	str	r1, [r0, #0]
     c2e:	e003      	b.n	c38 <I2C_MonitorModeCmd+0x1c>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
	}
	else
	{
		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
     c30:	f003 0106 	and.w	r1, r3, #6
     c34:	61c1      	str	r1, [r0, #28]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
     c36:	222c      	movs	r2, #44	; 0x2c
     c38:	6182      	str	r2, [r0, #24]
	}
	I2C_MonitorBufferIndex = 0;
     c3a:	4a02      	ldr	r2, [pc, #8]	; (c44 <I2C_MonitorModeCmd+0x28>)
     c3c:	2000      	movs	r0, #0
     c3e:	6310      	str	r0, [r2, #48]	; 0x30
     c40:	4770      	bx	lr
     c42:	bf00      	nop
     c44:	10000000 	.word	0x10000000

00000c48 <I2C_MonitorGetDatabuffer>:
 * new data.
 **********************************************************************/
uint8_t I2C_MonitorGetDatabuffer(LPC_I2C_TypeDef *I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	return ((uint8_t)(I2Cx->I2DATA_BUFFER));
     c48:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
     c4a:	b2c0      	uxtb	r0, r0
     c4c:	4770      	bx	lr

00000c4e <I2C_MonitorHandler>:
 **********************************************************************/
BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
{
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     c4e:	2308      	movs	r3, #8
 * register, as it ordinarily would, it could have only one bit-time to
 * respond to the interrupt before the received data is overwritten by
 * new data.
 **********************************************************************/
BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
{
     c50:	b510      	push	{r4, lr}
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     c52:	6183      	str	r3, [r0, #24]

	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
     c54:	4b05      	ldr	r3, [pc, #20]	; (c6c <I2C_MonitorHandler+0x1e>)
     c56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     c58:	6b1c      	ldr	r4, [r3, #48]	; 0x30
     c5a:	5508      	strb	r0, [r1, r4]
	I2C_MonitorBufferIndex++;
     c5c:	1c60      	adds	r0, r4, #1
	if(I2C_MonitorBufferIndex >= size)
	{
		ret = TRUE;
	}
	return ret;
}
     c5e:	4290      	cmp	r0, r2
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;

	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
	I2C_MonitorBufferIndex++;
     c60:	6318      	str	r0, [r3, #48]	; 0x30
	if(I2C_MonitorBufferIndex >= size)
	{
		ret = TRUE;
	}
	return ret;
}
     c62:	bf34      	ite	cc
     c64:	2000      	movcc	r0, #0
     c66:	2001      	movcs	r0, #1
     c68:	bd10      	pop	{r4, pc}
     c6a:	bf00      	nop
     c6c:	10000000 	.word	0x10000000

00000c70 <I2C_MasterTransferComplete>:
 * @return 		Master transfer status, could be:
 * 				- TRUE	master transfer completed
 * 				- FALSE master transfer have not completed yet
 **********************************************************************/
uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
     c70:	b508      	push	{r3, lr}
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
     c72:	f7ff fc1f 	bl	4b4 <I2C_getNum>
	retval = I2C_MasterComplete[tmp];
     c76:	4b03      	ldr	r3, [pc, #12]	; (c84 <I2C_MasterTransferComplete+0x14>)
	I2C_MasterComplete[tmp] = FALSE;
     c78:	2200      	movs	r2, #0
 **********************************************************************/
uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
	retval = I2C_MasterComplete[tmp];
     c7a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
     c7e:	6988      	ldr	r0, [r1, #24]
	I2C_MasterComplete[tmp] = FALSE;
     c80:	618a      	str	r2, [r1, #24]
	return retval;
}
     c82:	bd08      	pop	{r3, pc}
     c84:	10000000 	.word	0x10000000

00000c88 <I2C_SlaveTransferComplete>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		Complete status, could be: TRUE/FALSE
 **********************************************************************/
uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
     c88:	b508      	push	{r3, lr}
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
     c8a:	f7ff fc13 	bl	4b4 <I2C_getNum>
	retval = I2C_SlaveComplete[tmp];
     c8e:	4b03      	ldr	r3, [pc, #12]	; (c9c <I2C_SlaveTransferComplete+0x14>)
	I2C_SlaveComplete[tmp] = FALSE;
     c90:	2200      	movs	r2, #0
 **********************************************************************/
uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
	retval = I2C_SlaveComplete[tmp];
     c92:	eb03 0180 	add.w	r1, r3, r0, lsl #2
     c96:	6a48      	ldr	r0, [r1, #36]	; 0x24
	I2C_SlaveComplete[tmp] = FALSE;
     c98:	624a      	str	r2, [r1, #36]	; 0x24
	return retval;
}
     c9a:	bd08      	pop	{r3, pc}
     c9c:	10000000 	.word	0x10000000

00000ca0 <NVIC_DeInit>:
void NVIC_DeInit(void)
{
	uint8_t tmp;

	/* Disable all interrupts */
	NVIC->ICER[0] = 0xFFFFFFFF;
     ca0:	4b0b      	ldr	r3, [pc, #44]	; (cd0 <NVIC_DeInit+0x30>)
     ca2:	f04f 31ff 	mov.w	r1, #4294967295
	NVIC->ICER[1] = 0x00000001;
     ca6:	2201      	movs	r2, #1
void NVIC_DeInit(void)
{
	uint8_t tmp;

	/* Disable all interrupts */
	NVIC->ICER[0] = 0xFFFFFFFF;
     ca8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	NVIC->ICER[1] = 0x00000001;
     cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
     cb0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
	NVIC->ICPR[1] = 0x00000001;
     cb4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
     cb8:	2300      	movs	r3, #0

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
		NVIC->IP[tmp] = 0x00;
     cba:	f103 4060 	add.w	r0, r3, #3758096384	; 0xe0000000
     cbe:	3301      	adds	r3, #1
     cc0:	2100      	movs	r1, #0
     cc2:	f500 4261 	add.w	r2, r0, #57600	; 0xe100
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
	NVIC->ICPR[1] = 0x00000001;

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
     cc6:	2b20      	cmp	r3, #32
		NVIC->IP[tmp] = 0x00;
     cc8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
	NVIC->ICPR[1] = 0x00000001;

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
     ccc:	d1f5      	bne.n	cba <NVIC_DeInit+0x1a>
		NVIC->IP[tmp] = 0x00;
	}
}
     cce:	4770      	bx	lr
     cd0:	e000e100 	.word	0xe000e100

00000cd4 <NVIC_SCBDeInit>:
 *******************************************************************************/
void NVIC_SCBDeInit(void)
{
	uint8_t tmp;

	SCB->ICSR = 0x0A000000;
     cd4:	4b0d      	ldr	r3, [pc, #52]	; (d0c <NVIC_SCBDeInit+0x38>)
     cd6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
     cda:	490d      	ldr	r1, [pc, #52]	; (d10 <NVIC_SCBDeInit+0x3c>)
 *******************************************************************************/
void NVIC_SCBDeInit(void)
{
	uint8_t tmp;

	SCB->ICSR = 0x0A000000;
     cdc:	605a      	str	r2, [r3, #4]
	SCB->VTOR = 0x00000000;
     cde:	2200      	movs	r2, #0
     ce0:	609a      	str	r2, [r3, #8]
	SCB->AIRCR = 0x05FA0000;
     ce2:	60d9      	str	r1, [r3, #12]
	SCB->SCR = 0x00000000;
     ce4:	611a      	str	r2, [r3, #16]
	SCB->CCR = 0x00000000;
     ce6:	615a      	str	r2, [r3, #20]

	for (tmp = 0; tmp < 32; tmp++) {
		SCB->SHP[tmp] = 0x00;
     ce8:	f102 4060 	add.w	r0, r2, #3758096384	; 0xe0000000
     cec:	3201      	adds	r2, #1
     cee:	f500 416d 	add.w	r1, r0, #60672	; 0xed00
     cf2:	2000      	movs	r0, #0
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
	SCB->SCR = 0x00000000;
	SCB->CCR = 0x00000000;

	for (tmp = 0; tmp < 32; tmp++) {
     cf4:	2a20      	cmp	r2, #32
		SCB->SHP[tmp] = 0x00;
     cf6:	4b05      	ldr	r3, [pc, #20]	; (d0c <NVIC_SCBDeInit+0x38>)
     cf8:	7608      	strb	r0, [r1, #24]
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
	SCB->SCR = 0x00000000;
	SCB->CCR = 0x00000000;

	for (tmp = 0; tmp < 32; tmp++) {
     cfa:	d1f5      	bne.n	ce8 <NVIC_SCBDeInit+0x14>
		SCB->SHP[tmp] = 0x00;
	}

	SCB->SHCSR = 0x00000000;
	SCB->CFSR = 0xFFFFFFFF;
     cfc:	f04f 31ff 	mov.w	r1, #4294967295

	for (tmp = 0; tmp < 32; tmp++) {
		SCB->SHP[tmp] = 0x00;
	}

	SCB->SHCSR = 0x00000000;
     d00:	6258      	str	r0, [r3, #36]	; 0x24
	SCB->CFSR = 0xFFFFFFFF;
     d02:	6299      	str	r1, [r3, #40]	; 0x28
	SCB->HFSR = 0xFFFFFFFF;
     d04:	62d9      	str	r1, [r3, #44]	; 0x2c
	SCB->DFSR = 0xFFFFFFFF;
     d06:	6319      	str	r1, [r3, #48]	; 0x30
     d08:	4770      	bx	lr
     d0a:	bf00      	nop
     d0c:	e000ed00 	.word	0xe000ed00
     d10:	05fa0000 	.word	0x05fa0000

00000d14 <NVIC_SetVTOR>:
 * @param		offset Offset value
 * @return      None
 *******************************************************************************/
void NVIC_SetVTOR(uint32_t offset)
{
	SCB->VTOR  = (offset & NVIC_VTOR_MASK);
     d14:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
     d18:	4b02      	ldr	r3, [pc, #8]	; (d24 <NVIC_SetVTOR+0x10>)
     d1a:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
     d1e:	6099      	str	r1, [r3, #8]
     d20:	4770      	bx	lr
     d22:	bf00      	nop
     d24:	e000ed00 	.word	0xe000ed00

00000d28 <PINSEL_ConfigTraceFunc>:
 *
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigTraceFunc(FunctionalState NewState)
{
	if (NewState == ENABLE) {
     d28:	2801      	cmp	r0, #1
     d2a:	d104      	bne.n	d36 <PINSEL_ConfigTraceFunc+0xe>
		LPC_PINCON->PINSEL10 |= (0x01UL << 3);
     d2c:	4b05      	ldr	r3, [pc, #20]	; (d44 <PINSEL_ConfigTraceFunc+0x1c>)
     d2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
     d30:	f041 0008 	orr.w	r0, r1, #8
     d34:	e004      	b.n	d40 <PINSEL_ConfigTraceFunc+0x18>
	} else if (NewState == DISABLE) {
     d36:	b920      	cbnz	r0, d42 <PINSEL_ConfigTraceFunc+0x1a>
		LPC_PINCON->PINSEL10 &= ~(0x01UL << 3);
     d38:	4b02      	ldr	r3, [pc, #8]	; (d44 <PINSEL_ConfigTraceFunc+0x1c>)
     d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     d3c:	f022 0008 	bic.w	r0, r2, #8
     d40:	6298      	str	r0, [r3, #40]	; 0x28
     d42:	4770      	bx	lr
     d44:	4002c000 	.word	0x4002c000

00000d48 <PINSEL_SetI2C0Pins>:
	}

	if (filterSlewRateEnable == DISABLE){
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
	}
	LPC_PINCON->I2CPADCFG = regVal;
     d48:	4b03      	ldr	r3, [pc, #12]	; (d58 <PINSEL_SetI2C0Pins+0x10>)

	if (i2cPinMode == PINSEL_I2C_Fast_Mode){
		regVal = PINSEL_I2CPADCFG_SCLDRV0 | PINSEL_I2CPADCFG_SDADRV0;
	}

	if (filterSlewRateEnable == DISABLE){
     d4a:	2900      	cmp	r1, #0
     d4c:	bf0c      	ite	eq
     d4e:	210a      	moveq	r1, #10
     d50:	2105      	movne	r1, #5
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
	}
	LPC_PINCON->I2CPADCFG = regVal;
     d52:	67d9      	str	r1, [r3, #124]	; 0x7c
     d54:	4770      	bx	lr
     d56:	bf00      	nop
     d58:	4002c000 	.word	0x4002c000

00000d5c <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
     d5c:	b570      	push	{r4, r5, r6, lr}
 *
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
	uint32_t pinnum_t = pinnum;
     d5e:	7843      	ldrb	r3, [r0, #1]
	uint32_t pinselreg_idx = 2 * portnum;
     d60:	7802      	ldrb	r2, [r0, #0]
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
     d62:	7884      	ldrb	r4, [r0, #2]
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
	uint32_t pinnum_t = pinnum;
	uint32_t pinselreg_idx = 2 * portnum;
     d64:	0051      	lsls	r1, r2, #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINSEL0;

	if (pinnum_t >= 16) {
     d66:	2b0f      	cmp	r3, #15
     d68:	d901      	bls.n	d6e <PINSEL_ConfigPin+0x12>
		pinnum_t -= 16;
     d6a:	3b10      	subs	r3, #16
		pinselreg_idx++;
     d6c:	3101      	adds	r1, #1
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
     d6e:	008d      	lsls	r5, r1, #2
     d70:	005b      	lsls	r3, r3, #1
     d72:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
     d76:	2503      	movs	r5, #3
     d78:	fa05 f503 	lsl.w	r5, r5, r3
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
     d7c:	fa04 f403 	lsl.w	r4, r4, r3

	if (pinnum_t >= 16) {
		pinnum_t -= 16;
		pinselreg_idx++;
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
     d80:	f506 3230 	add.w	r2, r6, #180224	; 0x2c000
     d84:	6811      	ldr	r1, [r2, #0]
     d86:	ea21 0105 	bic.w	r1, r1, r5
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
     d8a:	ea41 0604 	orr.w	r6, r1, r4
     d8e:	6016      	str	r6, [r2, #0]

 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t pinnum_t = pinnum;
     d90:	7842      	ldrb	r2, [r0, #1]
	uint32_t pinmodereg_idx = 2 * portnum;
     d92:	7803      	ldrb	r3, [r0, #0]
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
     d94:	78c5      	ldrb	r5, [r0, #3]
 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t pinnum_t = pinnum;
	uint32_t pinmodereg_idx = 2 * portnum;
     d96:	005b      	lsls	r3, r3, #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE0;

	if (pinnum_t >= 16) {
     d98:	2a0f      	cmp	r2, #15
     d9a:	d901      	bls.n	da0 <PINSEL_ConfigPin+0x44>
		pinnum_t -= 16;
     d9c:	3a10      	subs	r2, #16
		pinmodereg_idx++ ;
     d9e:	3301      	adds	r3, #1
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
     da0:	0052      	lsls	r2, r2, #1
     da2:	2603      	movs	r6, #3
     da4:	fa06 f602 	lsl.w	r6, r6, r2
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
     da8:	fa05 f202 	lsl.w	r2, r5, r2
	if (pinnum_t >= 16) {
		pinnum_t -= 16;
		pinmodereg_idx++ ;
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
     dac:	490f      	ldr	r1, [pc, #60]	; (dec <PINSEL_ConfigPin+0x90>)
     dae:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
     db2:	ea24 0406 	bic.w	r4, r4, r6
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
     db6:	4322      	orrs	r2, r4
     db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
     dbc:	7802      	ldrb	r2, [r0, #0]
     dbe:	7841      	ldrb	r1, [r0, #1]
 **********************************************************************/
void set_OpenDrainMode( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE_OD0;

	if (modenum == PINSEL_PINMODE_OPENDRAIN){
     dc0:	7900      	ldrb	r0, [r0, #4]
     dc2:	4b0b      	ldr	r3, [pc, #44]	; (df0 <PINSEL_ConfigPin+0x94>)
     dc4:	2801      	cmp	r0, #1
     dc6:	d107      	bne.n	dd8 <PINSEL_ConfigPin+0x7c>
		*(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
     dc8:	fa00 f101 	lsl.w	r1, r0, r1
     dcc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
     dd0:	430c      	orrs	r4, r1
     dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
     dd6:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		*(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
     dd8:	2001      	movs	r0, #1
     dda:	fa00 f101 	lsl.w	r1, r0, r1
     dde:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     de2:	ea20 0001 	bic.w	r0, r0, r1
     de6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
     dea:	bd70      	pop	{r4, r5, r6, pc}
     dec:	4002c040 	.word	0x4002c040
     df0:	4002c068 	.word	0x4002c068

00000df4 <CS_Init1>:
 * 				due to definition of CS_PORT_NUM and CS_PORT_NUM
 * @param		None
 * @return		None
 ***********************************************************************/
void CS_Init1 (LPC_SSP_TypeDef *SSPx)
{
     df4:	b508      	push	{r3, lr}
	if(SSPx == LPC_SSP0)
     df6:	4b0e      	ldr	r3, [pc, #56]	; (e30 <CS_Init1+0x3c>)
     df8:	4298      	cmp	r0, r3
     dfa:	d109      	bne.n	e10 <CS_Init1+0x1c>
	{
		GPIO_SetDir(0, _BIT(16), 1);
     dfc:	2000      	movs	r0, #0
     dfe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     e02:	2201      	movs	r2, #1
     e04:	f7ff f9f9 	bl	1fa <GPIO_SetDir>
		GPIO_SetValue(0, _BIT(16));
     e08:	2000      	movs	r0, #0
     e0a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     e0e:	e009      	b.n	e24 <CS_Init1+0x30>
	}
	else if (SSPx == LPC_SSP1)
     e10:	4908      	ldr	r1, [pc, #32]	; (e34 <CS_Init1+0x40>)
     e12:	4288      	cmp	r0, r1
     e14:	d10a      	bne.n	e2c <CS_Init1+0x38>
	{
		GPIO_SetDir(0, _BIT(6), 1);
     e16:	2000      	movs	r0, #0
     e18:	2140      	movs	r1, #64	; 0x40
     e1a:	2201      	movs	r2, #1
     e1c:	f7ff f9ed 	bl	1fa <GPIO_SetDir>
		GPIO_SetValue(0, _BIT(6));
     e20:	2000      	movs	r0, #0
     e22:	2140      	movs	r1, #64	; 0x40
	}
}
     e24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GPIO_SetValue(0, _BIT(16));
	}
	else if (SSPx == LPC_SSP1)
	{
		GPIO_SetDir(0, _BIT(6), 1);
		GPIO_SetValue(0, _BIT(6));
     e28:	f7ff b9f8 	b.w	21c <GPIO_SetValue>
     e2c:	bd08      	pop	{r3, pc}
     e2e:	bf00      	nop
     e30:	40088000 	.word	0x40088000
     e34:	40030000 	.word	0x40030000

00000e38 <CS_Force1>:
 * 				- 1: Drive CS pin to high level
 * @return		None
 ***********************************************************************/
void CS_Force1 (LPC_SSP_TypeDef *SSPx, FunctionalState state)
{
	if (SSPx == LPC_SSP0)
     e38:	4b0c      	ldr	r3, [pc, #48]	; (e6c <CS_Force1+0x34>)
     e3a:	4298      	cmp	r0, r3
     e3c:	d108      	bne.n	e50 <CS_Force1+0x18>
	{
		if (state)
     e3e:	b119      	cbz	r1, e48 <CS_Force1+0x10>
		{
			GPIO_SetValue(0, _BIT(16));
     e40:	2000      	movs	r0, #0
     e42:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     e46:	e009      	b.n	e5c <CS_Force1+0x24>
		}
		else
		{
			GPIO_ClearValue(0, _BIT(16));
     e48:	4608      	mov	r0, r1
     e4a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     e4e:	e009      	b.n	e64 <CS_Force1+0x2c>
		}
	}
	else if (SSPx == LPC_SSP1)
     e50:	4a07      	ldr	r2, [pc, #28]	; (e70 <CS_Force1+0x38>)
     e52:	4290      	cmp	r0, r2
     e54:	d108      	bne.n	e68 <CS_Force1+0x30>
	{
		if (state)
     e56:	b119      	cbz	r1, e60 <CS_Force1+0x28>
		{
			GPIO_SetValue(0, _BIT(6));
     e58:	2000      	movs	r0, #0
     e5a:	2140      	movs	r1, #64	; 0x40
     e5c:	f7ff b9de 	b.w	21c <GPIO_SetValue>
		}
		else
		{
			GPIO_ClearValue(0, _BIT(6));
     e60:	4608      	mov	r0, r1
     e62:	2140      	movs	r1, #64	; 0x40
     e64:	f7ff b9e4 	b.w	230 <GPIO_ClearValue>
     e68:	4770      	bx	lr
     e6a:	bf00      	nop
     e6c:	40088000 	.word	0x40088000
     e70:	40030000 	.word	0x40030000

00000e74 <Buffer_Init1>:
 * @brief		Initialize buffer
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Buffer_Init1 (void)
{
     e74:	2300      	movs	r3, #0
	uint8_t i;
#if (SSP_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE1; i++)
	{
		Tx_Buf1[i] = 0;
     e76:	4904      	ldr	r1, [pc, #16]	; (e88 <Buffer_Init1+0x14>)
		Rx_Buf1[i] = 0;
     e78:	4804      	ldr	r0, [pc, #16]	; (e8c <Buffer_Init1+0x18>)
{
	uint8_t i;
#if (SSP_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE1; i++)
	{
		Tx_Buf1[i] = 0;
     e7a:	2200      	movs	r2, #0
     e7c:	545a      	strb	r2, [r3, r1]
		Rx_Buf1[i] = 0;
     e7e:	541a      	strb	r2, [r3, r0]
     e80:	3301      	adds	r3, #1
 **********************************************************************/
void Buffer_Init1 (void)
{
	uint8_t i;
#if (SSP_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE1; i++)
     e82:	2b40      	cmp	r3, #64	; 0x40
     e84:	d1f7      	bne.n	e76 <Buffer_Init1+0x2>
	{
		Tx_Buf1[i] = 0;
		Rx_Buf1[i] = 0;
	}
#endif
}
     e86:	4770      	bx	lr
     e88:	100002cc 	.word	0x100002cc
     e8c:	1000030c 	.word	0x1000030c

00000e90 <SSP_Init>:
{
	uint32_t tmp;

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
     e90:	4b24      	ldr	r3, [pc, #144]	; (f24 <SSP_Init+0x94>)
*                    that contains the configuration information for the
*                    specified SSP peripheral.
* @return 		None
 *********************************************************************/
void SSP_Init(LPC_SSP_TypeDef *SSPx, SSP_CFG_Type *SSP_ConfigStruct)
{
     e92:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp;

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
     e94:	4298      	cmp	r0, r3
*                    that contains the configuration information for the
*                    specified SSP peripheral.
* @return 		None
 *********************************************************************/
void SSP_Init(LPC_SSP_TypeDef *SSPx, SSP_CFG_Type *SSP_ConfigStruct)
{
     e96:	4604      	mov	r4, r0
     e98:	460d      	mov	r5, r1

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, ENABLE);
     e9a:	bf08      	it	eq
     e9c:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
{
	uint32_t tmp;

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
     ea0:	d004      	beq.n	eac <SSP_Init+0x1c>
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, ENABLE);
	} else if(SSPx == LPC_SSP1) {
     ea2:	4821      	ldr	r0, [pc, #132]	; (f28 <SSP_Init+0x98>)
     ea4:	4284      	cmp	r4, r0
     ea6:	d13b      	bne.n	f20 <SSP_Init+0x90>
		/* Set up clock and power for SSP1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP1, ENABLE);
     ea8:	f44f 6080 	mov.w	r0, #1024	; 0x400
     eac:	2101      	movs	r1, #1
     eae:	f7ff f957 	bl	160 <CLKPWR_ConfigPPWR>
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
     eb2:	6869      	ldr	r1, [r5, #4]
     eb4:	68aa      	ldr	r2, [r5, #8]
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
     eb6:	692e      	ldr	r6, [r5, #16]
     eb8:	682b      	ldr	r3, [r5, #0]
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
     eba:	430a      	orrs	r2, r1
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
     ebc:	4332      	orrs	r2, r6
     ebe:	ea42 0003 	orr.w	r0, r2, r3
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
     ec2:	68e9      	ldr	r1, [r5, #12]

    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
     ec4:	4b17      	ldr	r3, [pc, #92]	; (f24 <SSP_Init+0x94>)
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
     ec6:	b282      	uxth	r2, r0
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
     ec8:	f001 060f 	and.w	r6, r1, #15
    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP0);
     ecc:	202a      	movs	r0, #42	; 0x2a

    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
     ece:	429c      	cmp	r4, r3
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;
     ed0:	6022      	str	r2, [r4, #0]

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
	// Write back to CR1
	SSPx->CR1 = tmp;
     ed2:	6066      	str	r6, [r4, #4]

	// Set clock rate for SSP peripheral
	setSSPclock(SSPx, SSP_ConfigStruct->ClockRate);
     ed4:	696e      	ldr	r6, [r5, #20]

    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
     ed6:	d003      	beq.n	ee0 <SSP_Init+0x50>
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP0);
    } else if (SSPx == LPC_SSP1) {
     ed8:	4813      	ldr	r0, [pc, #76]	; (f28 <SSP_Init+0x98>)
     eda:	4284      	cmp	r4, r0
     edc:	d120      	bne.n	f20 <SSP_Init+0x90>
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP1);
     ede:	2014      	movs	r0, #20
     ee0:	f7ff f92e 	bl	140 <CLKPWR_GetPCLK>

	/* Find closest divider to get at or under the target frequency.
	   Use smallest prescale possible and rely on the divider to get
	   the closest target frequency */
	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
     ee4:	f04f 31ff 	mov.w	r1, #4294967295
    }

	/* Find closest divider to get at or under the target frequency.
	   Use smallest prescale possible and rely on the divider to get
	   the closest target frequency */
	cr0_div = 0;
     ee8:	2200      	movs	r2, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
     eea:	2302      	movs	r3, #2
	while (cmp_clk > target_clock)
     eec:	42b1      	cmp	r1, r6
     eee:	d90d      	bls.n	f0c <SSP_Init+0x7c>
	{
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
     ef0:	1c55      	adds	r5, r2, #1
     ef2:	fb03 f105 	mul.w	r1, r3, r5
     ef6:	fbb0 f1f1 	udiv	r1, r0, r1
		if (cmp_clk > target_clock)
     efa:	42b1      	cmp	r1, r6
     efc:	d906      	bls.n	f0c <SSP_Init+0x7c>
		{
			cr0_div++;
			if (cr0_div > 0xFF)
     efe:	2dff      	cmp	r5, #255	; 0xff
     f00:	d902      	bls.n	f08 <SSP_Init+0x78>
			{
				cr0_div = 0;
				prescale += 2;
     f02:	3302      	adds	r3, #2
		if (cmp_clk > target_clock)
		{
			cr0_div++;
			if (cr0_div > 0xFF)
			{
				cr0_div = 0;
     f04:	2200      	movs	r2, #0
     f06:	e7f1      	b.n	eec <SSP_Init+0x5c>
	{
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > target_clock)
		{
			cr0_div++;
			if (cr0_div > 0xFF)
     f08:	462a      	mov	r2, r5
     f0a:	e7ef      	b.n	eec <SSP_Init+0x5c>
			}
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
     f0c:	6820      	ldr	r0, [r4, #0]
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
     f0e:	0612      	lsls	r2, r2, #24
			}
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
     f10:	b2c1      	uxtb	r1, r0
     f12:	6021      	str	r1, [r4, #0]
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
     f14:	6820      	ldr	r0, [r4, #0]
    SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
     f16:	b2db      	uxtb	r3, r3
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
     f18:	ea40 4112 	orr.w	r1, r0, r2, lsr #16
     f1c:	6021      	str	r1, [r4, #0]
    SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
     f1e:	6123      	str	r3, [r4, #16]
     f20:	bd70      	pop	{r4, r5, r6, pc}
     f22:	bf00      	nop
     f24:	40088000 	.word	0x40088000
     f28:	40030000 	.word	0x40030000

00000f2c <SSP_DeInit>:
 **********************************************************************/
void SSP_DeInit(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (SSPx == LPC_SSP0){
     f2c:	4b07      	ldr	r3, [pc, #28]	; (f4c <SSP_DeInit+0x20>)
     f2e:	4298      	cmp	r0, r3
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, DISABLE);
     f30:	bf08      	it	eq
     f32:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
 **********************************************************************/
void SSP_DeInit(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (SSPx == LPC_SSP0){
     f36:	d004      	beq.n	f42 <SSP_DeInit+0x16>
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, DISABLE);
	} else if (SSPx == LPC_SSP1) {
     f38:	4905      	ldr	r1, [pc, #20]	; (f50 <SSP_DeInit+0x24>)
     f3a:	4288      	cmp	r0, r1
     f3c:	d104      	bne.n	f48 <SSP_DeInit+0x1c>
		/* Set up clock and power for SSP1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP1, DISABLE);
     f3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
     f42:	2100      	movs	r1, #0
     f44:	f7ff b90c 	b.w	160 <CLKPWR_ConfigPPWR>
     f48:	4770      	bx	lr
     f4a:	bf00      	nop
     f4c:	40088000 	.word	0x40088000
     f50:	40030000 	.word	0x40030000

00000f54 <SSP_GetDataSize>:
*				- SSP_DATABIT_16: 16 bit transfer
*******************************************************************************/
uint8_t SSP_GetDataSize(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->CR0 & (0xF));
     f54:	6800      	ldr	r0, [r0, #0]
}
     f56:	f000 000f 	and.w	r0, r0, #15
     f5a:	4770      	bx	lr

00000f5c <SSP_ConfigStructInit>:
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
	SSP_InitStruct->ClockRate = 3000000;
     f5c:	4a04      	ldr	r2, [pc, #16]	; (f70 <SSP_ConfigStructInit+0x14>)
*                    which will be initialized.
* @return		None
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
     f5e:	2300      	movs	r3, #0
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
	SSP_InitStruct->ClockRate = 3000000;
	SSP_InitStruct->Databit = SSP_DATABIT_8;
     f60:	2107      	movs	r1, #7
*                    which will be initialized.
* @return		None
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
     f62:	6043      	str	r3, [r0, #4]
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
     f64:	6083      	str	r3, [r0, #8]
	SSP_InitStruct->ClockRate = 3000000;
     f66:	6142      	str	r2, [r0, #20]
	SSP_InitStruct->Databit = SSP_DATABIT_8;
     f68:	6001      	str	r1, [r0, #0]
	SSP_InitStruct->Mode = SSP_MASTER_MODE;
     f6a:	60c3      	str	r3, [r0, #12]
	SSP_InitStruct->FrameFormat = SSP_FRAME_SPI;
     f6c:	6103      	str	r3, [r0, #16]
     f6e:	4770      	bx	lr
     f70:	002dc6c0 	.word	0x002dc6c0

00000f74 <SSP_Config>:
* 				 		- LPC_SSP0: SSP0 peripheral
* 						- LPC_SSP1: SSP1 peripheral
* @return 		None
***********************************************************************/
void SSP_Config (LPC_SSP_TypeDef *SSPx)
{
     f74:	b570      	push	{r4, r5, r6, lr}
	PINSEL_CFG_Type PinCfg;

	// SSP Configuration structure variable
	SSP_CFG_Type SSP_ConfigStruct;

	if(SSPx == LPC_SSP0)
     f76:	4b39      	ldr	r3, [pc, #228]	; (105c <SSP_Config+0xe8>)
* 				 		- LPC_SSP0: SSP0 peripheral
* 						- LPC_SSP1: SSP1 peripheral
* @return 		None
***********************************************************************/
void SSP_Config (LPC_SSP_TypeDef *SSPx)
{
     f78:	b088      	sub	sp, #32
	PINSEL_CFG_Type PinCfg;

	// SSP Configuration structure variable
	SSP_CFG_Type SSP_ConfigStruct;

	if(SSPx == LPC_SSP0)
     f7a:	4298      	cmp	r0, r3
* 				 		- LPC_SSP0: SSP0 peripheral
* 						- LPC_SSP1: SSP1 peripheral
* @return 		None
***********************************************************************/
void SSP_Config (LPC_SSP_TypeDef *SSPx)
{
     f7c:	4604      	mov	r4, r0
	PINSEL_CFG_Type PinCfg;

	// SSP Configuration structure variable
	SSP_CFG_Type SSP_ConfigStruct;

	if(SSPx == LPC_SSP0)
     f7e:	d12b      	bne.n	fd8 <SSP_Config+0x64>
		 * P0.15 - SCK0;
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
     f80:	2502      	movs	r5, #2
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
     f82:	200f      	movs	r0, #15
		 * P0.15 - SCK0;
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
     f84:	f88d 5002 	strb.w	r5, [sp, #2]
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
     f88:	f88d 0001 	strb.w	r0, [sp, #1]
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
		PinCfg.OpenDrain = 0;
     f8c:	2500      	movs	r5, #0
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
     f8e:	4668      	mov	r0, sp
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
		PinCfg.OpenDrain = 0;
     f90:	f88d 5004 	strb.w	r5, [sp, #4]
		PinCfg.Pinmode = 0;
     f94:	f88d 5003 	strb.w	r5, [sp, #3]
		PinCfg.Portnum = 0;
     f98:	f88d 5000 	strb.w	r5, [sp]
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
     f9c:	f7ff fede 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 17;
     fa0:	2111      	movs	r1, #17
		PINSEL_ConfigPin(&PinCfg);
     fa2:	4668      	mov	r0, sp
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 17;
     fa4:	f88d 1001 	strb.w	r1, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
     fa8:	f7ff fed8 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 18;
     fac:	2212      	movs	r2, #18
		PINSEL_ConfigPin(&PinCfg);
     fae:	4668      	mov	r0, sp
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 17;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 18;
     fb0:	f88d 2001 	strb.w	r2, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
     fb4:	f7ff fed2 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 16;
     fb8:	2310      	movs	r3, #16
		PinCfg.Funcnum = 0;
		PINSEL_ConfigPin(&PinCfg);
     fba:	4668      	mov	r0, sp
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 17;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 18;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 16;
     fbc:	f88d 3001 	strb.w	r3, [sp, #1]
		PinCfg.Funcnum = 0;
     fc0:	f88d 5002 	strb.w	r5, [sp, #2]
		PINSEL_ConfigPin(&PinCfg);
     fc4:	f7ff feca 	bl	d5c <PINSEL_ConfigPin>

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);
     fc8:	a802      	add	r0, sp, #8
     fca:	f7ff ffc7 	bl	f5c <SSP_ConfigStructInit>

		SSP_ConfigStruct.ClockRate = 3000000;
     fce:	4824      	ldr	r0, [pc, #144]	; (1060 <SSP_Config+0xec>)
		SSP_ConfigStruct.Databit = SSP_DATABIT_8;
     fd0:	2107      	movs	r1, #7
		PINSEL_ConfigPin(&PinCfg);

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);

		SSP_ConfigStruct.ClockRate = 3000000;
     fd2:	9007      	str	r0, [sp, #28]
		SSP_ConfigStruct.Databit = SSP_DATABIT_8;
     fd4:	9102      	str	r1, [sp, #8]
     fd6:	e032      	b.n	103e <SSP_Config+0xca>
	}
	else if(SSPx == LPC_SSP1)
     fd8:	4822      	ldr	r0, [pc, #136]	; (1064 <SSP_Config+0xf0>)
     fda:	4284      	cmp	r4, r0
     fdc:	d12f      	bne.n	103e <SSP_Config+0xca>
		 * P0.6 - SSEL1 - used as GPIO
		 * P0.7 - SCK1
		 * P0.8 - MISO1
		 * P0.9 - MOSI1
		 */
		PinCfg.Funcnum = 2;
     fde:	2102      	movs	r1, #2
		PinCfg.OpenDrain = 0;
     fe0:	2500      	movs	r5, #0
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 7;
     fe2:	2607      	movs	r6, #7
		PINSEL_ConfigPin(&PinCfg);
     fe4:	4668      	mov	r0, sp
		 * P0.6 - SSEL1 - used as GPIO
		 * P0.7 - SCK1
		 * P0.8 - MISO1
		 * P0.9 - MOSI1
		 */
		PinCfg.Funcnum = 2;
     fe6:	f88d 1002 	strb.w	r1, [sp, #2]
		PinCfg.OpenDrain = 0;
     fea:	f88d 5004 	strb.w	r5, [sp, #4]
		PinCfg.Pinmode = 0;
     fee:	f88d 5003 	strb.w	r5, [sp, #3]
		PinCfg.Portnum = 0;
     ff2:	f88d 5000 	strb.w	r5, [sp]
		PinCfg.Pinnum = 7;
     ff6:	f88d 6001 	strb.w	r6, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
     ffa:	f7ff feaf 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 8;
     ffe:	2208      	movs	r2, #8
		PINSEL_ConfigPin(&PinCfg);
    1000:	4668      	mov	r0, sp
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 7;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 8;
    1002:	f88d 2001 	strb.w	r2, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    1006:	f7ff fea9 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 9;
    100a:	2309      	movs	r3, #9
		PINSEL_ConfigPin(&PinCfg);
    100c:	4668      	mov	r0, sp
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 7;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 8;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 9;
    100e:	f88d 3001 	strb.w	r3, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    1012:	f7ff fea3 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 6;
    1016:	2006      	movs	r0, #6
    1018:	f88d 0001 	strb.w	r0, [sp, #1]
		PinCfg.Funcnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    101c:	4668      	mov	r0, sp
		PinCfg.Pinnum = 8;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 9;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 6;
		PinCfg.Funcnum = 0;
    101e:	f88d 5002 	strb.w	r5, [sp, #2]
		PINSEL_ConfigPin(&PinCfg);
    1022:	f7ff fe9b 	bl	d5c <PINSEL_ConfigPin>

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);
    1026:	a802      	add	r0, sp, #8
    1028:	f7ff ff98 	bl	f5c <SSP_ConfigStructInit>

		SSP_ConfigStruct.CPHA = SSP_CPHA_SECOND;
		SSP_ConfigStruct.CPOL = SSP_CPOL_LO;
		SSP_ConfigStruct.ClockRate = 20000000;
    102c:	4b0e      	ldr	r3, [pc, #56]	; (1068 <SSP_Config+0xf4>)
		PINSEL_ConfigPin(&PinCfg);

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);

		SSP_ConfigStruct.CPHA = SSP_CPHA_SECOND;
    102e:	2180      	movs	r1, #128	; 0x80
		SSP_ConfigStruct.CPOL = SSP_CPOL_LO;
    1030:	2240      	movs	r2, #64	; 0x40
		PINSEL_ConfigPin(&PinCfg);

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);

		SSP_ConfigStruct.CPHA = SSP_CPHA_SECOND;
    1032:	9103      	str	r1, [sp, #12]
		SSP_ConfigStruct.CPOL = SSP_CPOL_LO;
    1034:	9204      	str	r2, [sp, #16]
		SSP_ConfigStruct.ClockRate = 20000000;
    1036:	9307      	str	r3, [sp, #28]
		SSP_ConfigStruct.Databit = SSP_DATABIT_8;
    1038:	9602      	str	r6, [sp, #8]
		SSP_ConfigStruct.Mode = SSP_MASTER_MODE;
    103a:	9505      	str	r5, [sp, #20]
		SSP_ConfigStruct.FrameFormat = SSP_FRAME_SPI;
    103c:	9506      	str	r5, [sp, #24]
	}

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(SSPx, &SSP_ConfigStruct);
    103e:	4620      	mov	r0, r4
    1040:	a902      	add	r1, sp, #8
    1042:	f7ff ff25 	bl	e90 <SSP_Init>

	CS_Init1(SSPx);     // Chip Select Init
    1046:	4620      	mov	r0, r4
    1048:	f7ff fed4 	bl	df4 <CS_Init1>
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
    104c:	6862      	ldr	r2, [r4, #4]
    104e:	f042 0302 	orr.w	r3, r2, #2
    1052:	6063      	str	r3, [r4, #4]
	CS_Init1(SSPx);     // Chip Select Init

	// Enable SSP peripheral
	SSP_Cmd(SSPx, ENABLE);

	Buffer_Init1(); // Empty Buffer
    1054:	f7ff ff0e 	bl	e74 <Buffer_Init1>
}
    1058:	b008      	add	sp, #32
    105a:	bd70      	pop	{r4, r5, r6, pc}
    105c:	40088000 	.word	0x40088000
    1060:	002dc6c0 	.word	0x002dc6c0
    1064:	40030000 	.word	0x40030000
    1068:	01312d00 	.word	0x01312d00

0000106c <SSP_Cmd>:
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
    106c:	6843      	ldr	r3, [r0, #4]
void SSP_Cmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    106e:	2901      	cmp	r1, #1
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
    1070:	bf0c      	ite	eq
    1072:	f043 0302 	orreq.w	r3, r3, #2
	}
	else
	{
		SSPx->CR1 &= (~SSP_CR1_SSP_EN) & SSP_CR1_BITMASK;
    1076:	f003 030d 	andne.w	r3, r3, #13
    107a:	6043      	str	r3, [r0, #4]
    107c:	4770      	bx	lr

0000107e <SSP_LoopBackCmd>:
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 |= SSP_CR1_LBM_EN;
    107e:	6843      	ldr	r3, [r0, #4]
void SSP_LoopBackCmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    1080:	2901      	cmp	r1, #1
	{
		SSPx->CR1 |= SSP_CR1_LBM_EN;
    1082:	bf0c      	ite	eq
    1084:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		SSPx->CR1 &= (~SSP_CR1_LBM_EN) & SSP_CR1_BITMASK;
    1088:	f003 030e 	andne.w	r3, r3, #14
    108c:	6043      	str	r3, [r0, #4]
    108e:	4770      	bx	lr

00001090 <SSP_SlaveOutputCmd>:
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 &= (~SSP_CR1_SO_DISABLE) & SSP_CR1_BITMASK;
    1090:	6843      	ldr	r3, [r0, #4]
void SSP_SlaveOutputCmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    1092:	2901      	cmp	r1, #1
	{
		SSPx->CR1 &= (~SSP_CR1_SO_DISABLE) & SSP_CR1_BITMASK;
    1094:	bf0c      	ite	eq
    1096:	f003 0307 	andeq.w	r3, r3, #7
	}
	else
	{
		SSPx->CR1 |= SSP_CR1_SO_DISABLE;
    109a:	f043 0308 	orrne.w	r3, r3, #8
    109e:	6043      	str	r3, [r0, #4]
    10a0:	4770      	bx	lr

000010a2 <SSP_SendData>:
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    10a2:	6081      	str	r1, [r0, #8]
    10a4:	4770      	bx	lr

000010a6 <SSP_ReceiveData>:
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    10a6:	6880      	ldr	r0, [r0, #8]
}
    10a8:	b280      	uxth	r0, r0
    10aa:	4770      	bx	lr

000010ac <SSP_ReadWrite>:
    uint16_t *wdata16;
    uint32_t stat;
    uint32_t tmp;
    int32_t dataword;

    dataCfg->rx_cnt = 0;
    10ac:	2300      	movs	r3, #0
 * 				Return (-1) if error.
 * Note: This function can be used in both master and slave mode.
 ***********************************************************************/
int32_t SSP_ReadWrite (LPC_SSP_TypeDef *SSPx, SSP_DATA_SETUP_Type *dataCfg, \
						SSP_TRANSFER_Type xfType)
{
    10ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *wdata16;
    uint32_t stat;
    uint32_t tmp;
    int32_t dataword;

    dataCfg->rx_cnt = 0;
    10b2:	60cb      	str	r3, [r1, #12]
    dataCfg->tx_cnt = 0;
    10b4:	604b      	str	r3, [r1, #4]
    dataCfg->status = 0;
    10b6:	614b      	str	r3, [r1, #20]


	/* Clear all remaining data in RX FIFO */
	while (SSPx->SR & SSP_SR_RNE){
    10b8:	68c4      	ldr	r4, [r0, #12]
    10ba:	f014 0404 	ands.w	r4, r4, #4
    10be:	d001      	beq.n	10c4 <SSP_ReadWrite+0x18>
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    10c0:	6883      	ldr	r3, [r0, #8]
    10c2:	e7f9      	b.n	10b8 <SSP_ReadWrite+0xc>
	while (SSPx->SR & SSP_SR_RNE){
		tmp = (uint32_t) SSP_ReceiveData(SSPx);
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
    10c4:	2303      	movs	r3, #3
    10c6:	6203      	str	r3, [r0, #32]
*				- SSP_DATABIT_16: 16 bit transfer
*******************************************************************************/
uint8_t SSP_GetDataSize(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->CR0 & (0xF));
    10c8:	6803      	ldr	r3, [r0, #0]
		tmp = (uint32_t) SSP_ReceiveData(SSPx);
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
	if(SSP_GetDataSize(SSPx)>8)
    10ca:	f003 030f 	and.w	r3, r3, #15
    10ce:	2b08      	cmp	r3, #8
    10d0:	d804      	bhi.n	10dc <SSP_ReadWrite+0x30>
		dataword = 1;
	else dataword = 0;

	// Polling mode ----------------------------------------------------------------------
	if (xfType == SSP_TRANSFER_POLLING){
    10d2:	2a00      	cmp	r2, #0
    10d4:	d157      	bne.n	1186 <SSP_ReadWrite+0xda>
		if (dataword == 0){
			rdata8 = (uint8_t *)dataCfg->rx_data;
    10d6:	688d      	ldr	r5, [r1, #8]
			wdata8 = (uint8_t *)dataCfg->tx_data;
    10d8:	680e      	ldr	r6, [r1, #0]
    10da:	e005      	b.n	10e8 <SSP_ReadWrite+0x3c>
	if(SSP_GetDataSize(SSPx)>8)
		dataword = 1;
	else dataword = 0;

	// Polling mode ----------------------------------------------------------------------
	if (xfType == SSP_TRANSFER_POLLING){
    10dc:	2a00      	cmp	r2, #0
    10de:	d151      	bne.n	1184 <SSP_ReadWrite+0xd8>
		if (dataword == 0){
			rdata8 = (uint8_t *)dataCfg->rx_data;
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
    10e0:	688f      	ldr	r7, [r1, #8]
			wdata16 = (uint16_t *)dataCfg->tx_data;
    10e2:	f8d1 c000 	ldr.w	ip, [r1]
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
	if(SSP_GetDataSize(SSPx)>8)
		dataword = 1;
    10e6:	2201      	movs	r2, #1
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}
		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
    10e8:	684b      	ldr	r3, [r1, #4]
    10ea:	f8d1 8010 	ldr.w	r8, [r1, #16]
    10ee:	4543      	cmp	r3, r8
    10f0:	d036      	beq.n	1160 <SSP_ReadWrite+0xb4>
			if ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
    10f2:	68c4      	ldr	r4, [r0, #12]
    10f4:	f014 0f02 	tst.w	r4, #2
    10f8:	d014      	beq.n	1124 <SSP_ReadWrite+0x78>
    10fa:	4543      	cmp	r3, r8
    10fc:	d012      	beq.n	1124 <SSP_ReadWrite+0x78>
				// Write data to buffer
				if(dataCfg->tx_data == NULL){
    10fe:	680c      	ldr	r4, [r1, #0]
    1100:	b92c      	cbnz	r4, 110e <SSP_ReadWrite+0x62>
					if (dataword == 0){
    1102:	b90a      	cbnz	r2, 1108 <SSP_ReadWrite+0x5c>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1104:	24ff      	movs	r4, #255	; 0xff
    1106:	e005      	b.n	1114 <SSP_ReadWrite+0x68>
    1108:	f64f 74ff 	movw	r4, #65535	; 0xffff
    110c:	e007      	b.n	111e <SSP_ReadWrite+0x72>
					} else {
						SSP_SendData(SSPx, 0xFFFF);
						dataCfg->tx_cnt += 2;
					}
				} else {
					if (dataword == 0){
    110e:	b922      	cbnz	r2, 111a <SSP_ReadWrite+0x6e>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1110:	f816 4b01 	ldrb.w	r4, [r6], #1
    1114:	6084      	str	r4, [r0, #8]
					}
				} else {
					if (dataword == 0){
						SSP_SendData(SSPx, *wdata8);
						wdata8++;
						dataCfg->tx_cnt++;
    1116:	3301      	adds	r3, #1
    1118:	e003      	b.n	1122 <SSP_ReadWrite+0x76>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    111a:	f83c 4b02 	ldrh.w	r4, [ip], #2
    111e:	6084      	str	r4, [r0, #8]
						wdata8++;
						dataCfg->tx_cnt++;
					} else {
						SSP_SendData(SSPx, *wdata16);
						wdata16++;
						dataCfg->tx_cnt += 2;
    1120:	3302      	adds	r3, #2
    1122:	604b      	str	r3, [r1, #4]
					}
				}
			}

			// Check overrun error
			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
    1124:	6983      	ldr	r3, [r0, #24]
    1126:	f013 0f01 	tst.w	r3, #1
    112a:	d150      	bne.n	11ce <SSP_ReadWrite+0x122>
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
    112c:	68c4      	ldr	r4, [r0, #12]
    112e:	0764      	lsls	r4, r4, #29
    1130:	d5da      	bpl.n	10e8 <SSP_ReadWrite+0x3c>
    1132:	68cc      	ldr	r4, [r1, #12]
    1134:	690b      	ldr	r3, [r1, #16]
    1136:	429c      	cmp	r4, r3
    1138:	d0d6      	beq.n	10e8 <SSP_ReadWrite+0x3c>
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    113a:	688b      	ldr	r3, [r1, #8]
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    113c:	f8d0 8008 	ldr.w	r8, [r0, #8]
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    1140:	b133      	cbz	r3, 1150 <SSP_ReadWrite+0xa4>
				{
					if (dataword == 0){
    1142:	b912      	cbnz	r2, 114a <SSP_ReadWrite+0x9e>
						*(rdata8) = (uint8_t) tmp;
    1144:	f805 8b01 	strb.w	r8, [r5], #1
    1148:	e003      	b.n	1152 <SSP_ReadWrite+0xa6>
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    114a:	f827 8b02 	strh.w	r8, [r7], #2
    114e:	e004      	b.n	115a <SSP_ReadWrite+0xae>
						*(rdata16) = (uint16_t) tmp;
						rdata16++;
					}
				}
				// Increase counter
				if (dataword == 0){
    1150:	b91a      	cbnz	r2, 115a <SSP_ReadWrite+0xae>
					dataCfg->rx_cnt++;
    1152:	68cb      	ldr	r3, [r1, #12]
    1154:	1c5c      	adds	r4, r3, #1
    1156:	60cc      	str	r4, [r1, #12]
    1158:	e7e8      	b.n	112c <SSP_ReadWrite+0x80>
				} else {
					dataCfg->rx_cnt += 2;
    115a:	3402      	adds	r4, #2
    115c:	60cc      	str	r4, [r1, #12]
    115e:	e7e5      	b.n	112c <SSP_ReadWrite+0x80>
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}
		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
    1160:	68cc      	ldr	r4, [r1, #12]
    1162:	429c      	cmp	r4, r3
    1164:	d1c5      	bne.n	10f2 <SSP_ReadWrite+0x46>
		}

		// save status
		dataCfg->status = SSP_STAT_DONE;

		if (dataCfg->tx_data != NULL){
    1166:	680a      	ldr	r2, [r1, #0]
				}
			}
		}

		// save status
		dataCfg->status = SSP_STAT_DONE;
    1168:	f44f 7080 	mov.w	r0, #256	; 0x100
    116c:	6148      	str	r0, [r1, #20]

		if (dataCfg->tx_data != NULL){
    116e:	b112      	cbz	r2, 1176 <SSP_ReadWrite+0xca>
			return dataCfg->tx_cnt;
    1170:	4620      	mov	r0, r4
    1172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (dataCfg->rx_data != NULL){
    1176:	6889      	ldr	r1, [r1, #8]
			return dataCfg->rx_cnt;
    1178:	2900      	cmp	r1, #0
    117a:	bf14      	ite	ne
    117c:	4620      	movne	r0, r4
    117e:	2000      	moveq	r0, #0
    1180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
	if(SSP_GetDataSize(SSPx)>8)
		dataword = 1;
    1184:	2401      	movs	r4, #1
			return (0);
		}
	}

	// Interrupt mode ----------------------------------------------------------------------
	else if (xfType == SSP_TRANSFER_INTERRUPT){
    1186:	2a01      	cmp	r2, #1
    1188:	d010      	beq.n	11ac <SSP_ReadWrite+0x100>
    118a:	e023      	b.n	11d4 <SSP_ReadWrite+0x128>
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
    118c:	68cb      	ldr	r3, [r1, #12]
    118e:	690a      	ldr	r2, [r1, #16]
    1190:	4293      	cmp	r3, r2
    1192:	d00b      	beq.n	11ac <SSP_ReadWrite+0x100>
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    1194:	688a      	ldr	r2, [r1, #8]
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    1196:	6885      	ldr	r5, [r0, #8]
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    1198:	2a00      	cmp	r2, #0
    119a:	d02b      	beq.n	11f4 <SSP_ReadWrite+0x148>
				{
					if (dataword == 0){
    119c:	bb44      	cbnz	r4, 11f0 <SSP_ReadWrite+0x144>
						*(uint8_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint8_t) tmp;
    119e:	54d5      	strb	r5, [r2, r3]
						*(uint16_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint16_t) tmp;
					}
				}
				// Increase counter
				if (dataword == 0){
					dataCfg->rx_cnt++;
    11a0:	68ca      	ldr	r2, [r1, #12]
    11a2:	1c53      	adds	r3, r2, #1
				} else {
					dataCfg->rx_cnt += 2;
    11a4:	60cb      	str	r3, [r1, #12]
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
    11a6:	68c2      	ldr	r2, [r0, #12]
    11a8:	0752      	lsls	r2, r2, #29
    11aa:	d4ef      	bmi.n	118c <SSP_ReadWrite+0xe0>
	}

	// Interrupt mode ----------------------------------------------------------------------
	else if (xfType == SSP_TRANSFER_INTERRUPT){

		while ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
    11ac:	68c2      	ldr	r2, [r0, #12]
    11ae:	0793      	lsls	r3, r2, #30
    11b0:	d524      	bpl.n	11fc <SSP_ReadWrite+0x150>
    11b2:	684b      	ldr	r3, [r1, #4]
    11b4:	690a      	ldr	r2, [r1, #16]
    11b6:	4293      	cmp	r3, r2
    11b8:	d020      	beq.n	11fc <SSP_ReadWrite+0x150>
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    11ba:	680a      	ldr	r2, [r1, #0]
    11bc:	b98a      	cbnz	r2, 11e2 <SSP_ReadWrite+0x136>
				if (dataword == 0){
    11be:	b96c      	cbnz	r4, 11dc <SSP_ReadWrite+0x130>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    11c0:	22ff      	movs	r2, #255	; 0xff
    11c2:	6082      	str	r2, [r0, #8]
					dataCfg->tx_cnt += 2;
				}
			} else {
				if (dataword == 0){
					SSP_SendData(SSPx, (*(uint8_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt++;
    11c4:	3301      	adds	r3, #1
				} else {
					SSP_SendData(SSPx, (*(uint16_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt += 2;
    11c6:	604b      	str	r3, [r1, #4]
				}
			}

			// Check error
			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
    11c8:	6983      	ldr	r3, [r0, #24]
    11ca:	07da      	lsls	r2, r3, #31
    11cc:	d5eb      	bpl.n	11a6 <SSP_ReadWrite+0xfa>
				// save status and return
				dataCfg->status = stat | SSP_STAT_ERROR;
    11ce:	f443 7000 	orr.w	r0, r3, #512	; 0x200
    11d2:	6148      	str	r0, [r1, #20]
				return (-1);
    11d4:	f04f 30ff 	mov.w	r0, #4294967295
    11d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    11dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    11e0:	e003      	b.n	11ea <SSP_ReadWrite+0x13e>
				} else {
					SSP_SendData(SSPx, 0xFFFF);
					dataCfg->tx_cnt += 2;
				}
			} else {
				if (dataword == 0){
    11e2:	b90c      	cbnz	r4, 11e8 <SSP_ReadWrite+0x13c>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    11e4:	5cd2      	ldrb	r2, [r2, r3]
    11e6:	e7ec      	b.n	11c2 <SSP_ReadWrite+0x116>
    11e8:	5ad2      	ldrh	r2, [r2, r3]
    11ea:	6082      	str	r2, [r0, #8]
				if (dataword == 0){
					SSP_SendData(SSPx, (*(uint8_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt++;
				} else {
					SSP_SendData(SSPx, (*(uint16_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt += 2;
    11ec:	3302      	adds	r3, #2
    11ee:	e7ea      	b.n	11c6 <SSP_ReadWrite+0x11a>
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    11f0:	52d5      	strh	r5, [r2, r3]
    11f2:	e001      	b.n	11f8 <SSP_ReadWrite+0x14c>
					} else {
						*(uint16_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint16_t) tmp;
					}
				}
				// Increase counter
				if (dataword == 0){
    11f4:	2c00      	cmp	r4, #0
    11f6:	d0d3      	beq.n	11a0 <SSP_ReadWrite+0xf4>
					dataCfg->rx_cnt++;
				} else {
					dataCfg->rx_cnt += 2;
    11f8:	3302      	adds	r3, #2
    11fa:	e7d3      	b.n	11a4 <SSP_ReadWrite+0xf8>
				}
			}
		}

		// If there more data to sent or receive
		if ((dataCfg->rx_cnt != dataCfg->length) || (dataCfg->tx_cnt != dataCfg->length)){
    11fc:	68cb      	ldr	r3, [r1, #12]
    11fe:	690a      	ldr	r2, [r1, #16]
    1200:	4293      	cmp	r3, r2
    1202:	d102      	bne.n	120a <SSP_ReadWrite+0x15e>
    1204:	684a      	ldr	r2, [r1, #4]
    1206:	429a      	cmp	r2, r3
    1208:	d002      	beq.n	1210 <SSP_ReadWrite+0x164>
			// Enable all interrupt
			SSPx->IMSC = SSP_IMSC_BITMASK;
    120a:	210f      	movs	r1, #15
    120c:	6141      	str	r1, [r0, #20]
    120e:	e002      	b.n	1216 <SSP_ReadWrite+0x16a>
		} else {
			// Save status
			dataCfg->status = SSP_STAT_DONE;
    1210:	f44f 7080 	mov.w	r0, #256	; 0x100
    1214:	6148      	str	r0, [r1, #20]
		}
		return (0);
    1216:	2000      	movs	r0, #0
    1218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000121c <SSP_GetStatus>:
FlagStatus SSP_GetStatus(LPC_SSP_TypeDef* SSPx, uint32_t FlagType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_STAT(FlagType));

	return ((SSPx->SR & FlagType) ? SET : RESET);
    121c:	68c3      	ldr	r3, [r0, #12]
    121e:	4219      	tst	r1, r3
}
    1220:	bf0c      	ite	eq
    1222:	2000      	moveq	r0, #0
    1224:	2001      	movne	r0, #1
    1226:	4770      	bx	lr

00001228 <SSP_IntConfig>:
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
	{
		SSPx->IMSC |= IntType;
    1228:	6943      	ldr	r3, [r0, #20]
 **********************************************************************/
void SSP_IntConfig(LPC_SSP_TypeDef *SSPx, uint32_t IntType, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
    122a:	2a01      	cmp	r2, #1
	{
		SSPx->IMSC |= IntType;
	}
	else
	{
		SSPx->IMSC &= (~IntType) & SSP_IMSC_BITMASK;
    122c:	bf16      	itet	ne
    122e:	f003 030f 	andne.w	r3, r3, #15
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
	{
		SSPx->IMSC |= IntType;
    1232:	4319      	orreq	r1, r3
	}
	else
	{
		SSPx->IMSC &= (~IntType) & SSP_IMSC_BITMASK;
    1234:	ea23 0101 	bicne.w	r1, r3, r1
    1238:	6141      	str	r1, [r0, #20]
    123a:	4770      	bx	lr

0000123c <SSP_GetRawIntStatus>:
IntStatus SSP_GetRawIntStatus(LPC_SSP_TypeDef *SSPx, uint32_t RawIntType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_INTSTAT_RAW(RawIntType));

	return ((SSPx->RIS & RawIntType) ? SET : RESET);
    123c:	6983      	ldr	r3, [r0, #24]
    123e:	4219      	tst	r1, r3
}
    1240:	bf0c      	ite	eq
    1242:	2000      	moveq	r0, #0
    1244:	2001      	movne	r0, #1
    1246:	4770      	bx	lr

00001248 <SSP_GetRawIntStatusReg>:
 * @return		Raw Interrupt Status (RIS) register value
 **********************************************************************/
uint32_t SSP_GetRawIntStatusReg(LPC_SSP_TypeDef *SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->RIS);
    1248:	6980      	ldr	r0, [r0, #24]
}
    124a:	4770      	bx	lr

0000124c <SSP_GetIntStatus>:
IntStatus SSP_GetIntStatus (LPC_SSP_TypeDef *SSPx, uint32_t IntType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_INTSTAT(IntType));

	return ((SSPx->MIS & IntType) ? SET :RESET);
    124c:	69c3      	ldr	r3, [r0, #28]
    124e:	4219      	tst	r1, r3
}
    1250:	bf0c      	ite	eq
    1252:	2000      	moveq	r0, #0
    1254:	2001      	movne	r0, #1
    1256:	4770      	bx	lr

00001258 <SSP_ClearIntPending>:
void SSP_ClearIntPending(LPC_SSP_TypeDef *SSPx, uint32_t IntType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_INTCLR(IntType));

	SSPx->ICR = IntType;
    1258:	6201      	str	r1, [r0, #32]
    125a:	4770      	bx	lr

0000125c <SSP_DMACmd>:
	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->DMACR |= DMAMode;
    125c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    125e:	2a01      	cmp	r2, #1
	{
		SSPx->DMACR |= DMAMode;
	}
	else
	{
		SSPx->DMACR &= (~DMAMode) & SSP_DMA_BITMASK;
    1260:	bf16      	itet	ne
    1262:	f003 0303 	andne.w	r3, r3, #3
	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->DMACR |= DMAMode;
    1266:	4319      	orreq	r1, r3
	}
	else
	{
		SSPx->DMACR &= (~DMAMode) & SSP_DMA_BITMASK;
    1268:	ea23 0101 	bicne.w	r1, r3, r1
    126c:	6241      	str	r1, [r0, #36]	; 0x24
    126e:	4770      	bx	lr

00001270 <delay_ms>:
 * @param		value in ms
 * @return 		None
 ***********************************************************************/
void delay_ms (uint32_t dly_ticks) 
{
  delay_timer = dly_ticks;
    1270:	4b02      	ldr	r3, [pc, #8]	; (127c <delay_ms+0xc>)
    1272:	6018      	str	r0, [r3, #0]
  while(delay_timer)
    1274:	681a      	ldr	r2, [r3, #0]
    1276:	2a00      	cmp	r2, #0
    1278:	d1fc      	bne.n	1274 <delay_ms+0x4>
  {
    /* do nothing */
  } 
}
    127a:	4770      	bx	lr
    127c:	1000035c 	.word	0x1000035c

00001280 <SYSTICK_InternalInit>:
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
    1280:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <SYSTICK_InternalInit+0x40>)
 * @brief 		Initial System Tick with using internal CPU clock source
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_InternalInit(uint32_t time)
{
    1282:	b570      	push	{r4, r5, r6, lr}
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
    1284:	681c      	ldr	r4, [r3, #0]
    1286:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    128a:	fbb4 f4f1 	udiv	r4, r4, r1
 * @brief 		Initial System Tick with using internal CPU clock source
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_InternalInit(uint32_t time)
{
    128e:	4605      	mov	r5, r0
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
	if(time > maxtime)
    1290:	f002 fab0 	bl	37f4 <__aeabi_ui2f>
    1294:	4606      	mov	r6, r0
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
    1296:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    129a:	fbb0 f0f4 	udiv	r0, r0, r4
    129e:	f002 faa9 	bl	37f4 <__aeabi_ui2f>
    12a2:	4601      	mov	r1, r0
	if(time > maxtime)
    12a4:	4630      	mov	r0, r6
    12a6:	f002 fb69 	bl	397c <__aeabi_fcmpgt>
    12aa:	b100      	cbz	r0, 12ae <SYSTICK_InternalInit+0x2e>
    12ac:	e7fe      	b.n	12ac <SYSTICK_InternalInit+0x2c>
		//Error loop
		while(1);
	else
	{
		//Select CPU clock is System Tick clock source
		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
    12ae:	4b05      	ldr	r3, [pc, #20]	; (12c4 <SYSTICK_InternalInit+0x44>)
		/* Set RELOAD value
		 * RELOAD = (SystemCoreClock/1000) * time - 1
		 * with time base is millisecond
		 */
		SysTick->LOAD = (cclk/1000)*time - 1;
    12b0:	436c      	muls	r4, r5
		//Error loop
		while(1);
	else
	{
		//Select CPU clock is System Tick clock source
		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
    12b2:	681a      	ldr	r2, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (SystemCoreClock/1000) * time - 1
		 * with time base is millisecond
		 */
		SysTick->LOAD = (cclk/1000)*time - 1;
    12b4:	3c01      	subs	r4, #1
		//Error loop
		while(1);
	else
	{
		//Select CPU clock is System Tick clock source
		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
    12b6:	f042 0104 	orr.w	r1, r2, #4
    12ba:	6019      	str	r1, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (SystemCoreClock/1000) * time - 1
		 * with time base is millisecond
		 */
		SysTick->LOAD = (cclk/1000)*time - 1;
    12bc:	605c      	str	r4, [r3, #4]
    12be:	bd70      	pop	{r4, r5, r6, pc}
    12c0:	2007c008 	.word	0x2007c008
    12c4:	e000e010 	.word	0xe000e010

000012c8 <SYSTICK_ExternalInit>:
 * @param[in]	freq	external clock frequency(Hz)
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_ExternalInit(uint32_t freq, uint32_t time)
{
    12c8:	b570      	push	{r4, r5, r6, lr}
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/freq * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(freq / 1000) ;
    12ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    12ce:	fbb0 f4f4 	udiv	r4, r0, r4
	if (time>maxtime)
    12d2:	4608      	mov	r0, r1
 * @param[in]	freq	external clock frequency(Hz)
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_ExternalInit(uint32_t freq, uint32_t time)
{
    12d4:	460d      	mov	r5, r1
	 * So the maximum time can be set:
	 * 1/freq * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(freq / 1000) ;
	if (time>maxtime)
    12d6:	f002 fa8d 	bl	37f4 <__aeabi_ui2f>
    12da:	4606      	mov	r6, r0
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/freq * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(freq / 1000) ;
    12dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    12e0:	fbb0 f0f4 	udiv	r0, r0, r4
    12e4:	f002 fa86 	bl	37f4 <__aeabi_ui2f>
    12e8:	4601      	mov	r1, r0
	if (time>maxtime)
    12ea:	4630      	mov	r0, r6
    12ec:	f002 fb46 	bl	397c <__aeabi_fcmpgt>
    12f0:	b100      	cbz	r0, 12f4 <SYSTICK_ExternalInit+0x2c>
    12f2:	e7fe      	b.n	12f2 <SYSTICK_ExternalInit+0x2a>
		//Error Loop
		while(1);
	else
	{
		//Select external clock is System Tick clock source
		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
    12f4:	4b04      	ldr	r3, [pc, #16]	; (1308 <SYSTICK_ExternalInit+0x40>)
		/* Set RELOAD value
		 * RELOAD = (freq/1000) * time - 1
		 * with time base is millisecond
		 */
		maxtime = (freq/1000)*time - 1;
		SysTick->LOAD = (freq/1000)*time - 1;
    12f6:	436c      	muls	r4, r5
		//Error Loop
		while(1);
	else
	{
		//Select external clock is System Tick clock source
		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
    12f8:	681a      	ldr	r2, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (freq/1000) * time - 1
		 * with time base is millisecond
		 */
		maxtime = (freq/1000)*time - 1;
		SysTick->LOAD = (freq/1000)*time - 1;
    12fa:	3c01      	subs	r4, #1
		//Error Loop
		while(1);
	else
	{
		//Select external clock is System Tick clock source
		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
    12fc:	f022 0104 	bic.w	r1, r2, #4
    1300:	6019      	str	r1, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (freq/1000) * time - 1
		 * with time base is millisecond
		 */
		maxtime = (freq/1000)*time - 1;
		SysTick->LOAD = (freq/1000)*time - 1;
    1302:	605c      	str	r4, [r3, #4]
    1304:	bd70      	pop	{r4, r5, r6, pc}
    1306:	bf00      	nop
    1308:	e000e010 	.word	0xe000e010

0000130c <SYSTICK_Cmd>:
 * 					- ENABLE
 * 					- DISABLE
 * @return 		None
 **********************************************************************/
void SYSTICK_Cmd(FunctionalState NewState)
{
    130c:	4b04      	ldr	r3, [pc, #16]	; (1320 <SYSTICK_Cmd+0x14>)
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if(NewState == ENABLE)
    130e:	2801      	cmp	r0, #1
		//Enable System Tick counter
		SysTick->CTRL |= ST_CTRL_ENABLE;
    1310:	681a      	ldr	r2, [r3, #0]
    1312:	bf0c      	ite	eq
    1314:	f042 0201 	orreq.w	r2, r2, #1
	else
		//Disable System Tick counter
		SysTick->CTRL &= ~ST_CTRL_ENABLE;
    1318:	f022 0201 	bicne.w	r2, r2, #1
    131c:	601a      	str	r2, [r3, #0]
    131e:	4770      	bx	lr
    1320:	e000e010 	.word	0xe000e010

00001324 <SYSTICK_IntCmd>:
 * 					- ENABLE
 * 					- DISABLE
 * @return 		None
 **********************************************************************/
void SYSTICK_IntCmd(FunctionalState NewState)
{
    1324:	4b04      	ldr	r3, [pc, #16]	; (1338 <SYSTICK_IntCmd+0x14>)
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if(NewState == ENABLE)
    1326:	2801      	cmp	r0, #1
		//Enable System Tick counter
		SysTick->CTRL |= ST_CTRL_TICKINT;
    1328:	681a      	ldr	r2, [r3, #0]
    132a:	bf0c      	ite	eq
    132c:	f042 0202 	orreq.w	r2, r2, #2
	else
		//Disable System Tick counter
		SysTick->CTRL &= ~ST_CTRL_TICKINT;
    1330:	f022 0202 	bicne.w	r2, r2, #2
    1334:	601a      	str	r2, [r3, #0]
    1336:	4770      	bx	lr
    1338:	e000e010 	.word	0xe000e010

0000133c <SYSTICK_Config>:
 * @brief 		Initial System Tick with Config
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void SYSTICK_Config(void)
{
    133c:	b508      	push	{r3, lr}
  //Initialize System Tick with 10ms time interval
  SYSTICK_InternalInit(1);
    133e:	2001      	movs	r0, #1
    1340:	f7ff ff9e 	bl	1280 <SYSTICK_InternalInit>
  //Enable System Tick interrupt
  SYSTICK_IntCmd(ENABLE);
    1344:	2001      	movs	r0, #1
    1346:	f7ff ffed 	bl	1324 <SYSTICK_IntCmd>
  //Enable System Tick Counter
  SYSTICK_Cmd(ENABLE);
    134a:	2001      	movs	r0, #1
}
    134c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //Initialize System Tick with 10ms time interval
  SYSTICK_InternalInit(1);
  //Enable System Tick interrupt
  SYSTICK_IntCmd(ENABLE);
  //Enable System Tick Counter
  SYSTICK_Cmd(ENABLE);
    1350:	f7ff bfdc 	b.w	130c <SYSTICK_Cmd>

00001354 <SYSTICK_GetCurrentValue>:
 * @param[in]	None
 * @return 		current value of System Tick counter
 **********************************************************************/
uint32_t SYSTICK_GetCurrentValue(void)
{
	return (SysTick->VAL);
    1354:	4b01      	ldr	r3, [pc, #4]	; (135c <SYSTICK_GetCurrentValue+0x8>)
    1356:	6898      	ldr	r0, [r3, #8]
}
    1358:	4770      	bx	lr
    135a:	bf00      	nop
    135c:	e000e010 	.word	0xe000e010

00001360 <SYSTICK_ClearCounterFlag>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void SYSTICK_ClearCounterFlag(void)
{
	SysTick->CTRL &= ~ST_CTRL_COUNTFLAG;
    1360:	4b02      	ldr	r3, [pc, #8]	; (136c <SYSTICK_ClearCounterFlag+0xc>)
    1362:	681a      	ldr	r2, [r3, #0]
    1364:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    1368:	6018      	str	r0, [r3, #0]
    136a:	4770      	bx	lr
    136c:	e000e010 	.word	0xe000e010

00001370 <SysTick_Handler>:
 * @param		None
 * @return 		None
 ***********************************************************************/
void SysTick_Handler(void)
{
    if(led_timer)
    1370:	4b0a      	ldr	r3, [pc, #40]	; (139c <SysTick_Handler+0x2c>)
    1372:	681a      	ldr	r2, [r3, #0]
    1374:	b10a      	cbz	r2, 137a <SysTick_Handler+0xa>
    {
    	--led_timer;
    1376:	1e51      	subs	r1, r2, #1
    1378:	e006      	b.n	1388 <SysTick_Handler+0x18>
    }
    else
    {
    	LPC_GPIO3->FIOPIN ^= _BIT(25); //Toggle P3.25 Hearbeat led
    137a:	4809      	ldr	r0, [pc, #36]	; (13a0 <SysTick_Handler+0x30>)
    137c:	6941      	ldr	r1, [r0, #20]
    137e:	f081 7200 	eor.w	r2, r1, #33554432	; 0x2000000
    1382:	6142      	str	r2, [r0, #20]
    	led_timer=led_delay;
    1384:	4807      	ldr	r0, [pc, #28]	; (13a4 <SysTick_Handler+0x34>)
    1386:	6801      	ldr	r1, [r0, #0]
    1388:	6019      	str	r1, [r3, #0]
    }

	if(delay_timer)
    138a:	4b07      	ldr	r3, [pc, #28]	; (13a8 <SysTick_Handler+0x38>)
    138c:	681a      	ldr	r2, [r3, #0]
    138e:	b112      	cbz	r2, 1396 <SysTick_Handler+0x26>
    {
      --delay_timer;           /*decrement Delay Timer */
    1390:	6818      	ldr	r0, [r3, #0]
    1392:	1e41      	subs	r1, r0, #1
    1394:	6019      	str	r1, [r3, #0]
    }
	
	//Clear System Tick counter flag
	SYSTICK_ClearCounterFlag();
    1396:	f7ff bfe3 	b.w	1360 <SYSTICK_ClearCounterFlag>
    139a:	bf00      	nop
    139c:	10000358 	.word	0x10000358
    13a0:	2009c060 	.word	0x2009c060
    13a4:	10000360 	.word	0x10000360
    13a8:	1000035c 	.word	0x1000035c

000013ac <UART_Init>:
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    13ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    13b0:	4ba3      	ldr	r3, [pc, #652]	; (1640 <UART_Init+0x294>)
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    13b2:	4604      	mov	r4, r0


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
    13b4:	2008      	movs	r0, #8
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    13b6:	429c      	cmp	r4, r3
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    13b8:	b08b      	sub	sp, #44	; 0x2c
    13ba:	468b      	mov	fp, r1
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    13bc:	d016      	beq.n	13ec <UART_Init+0x40>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
	}



	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    13be:	49a1      	ldr	r1, [pc, #644]	; (1644 <UART_Init+0x298>)
    13c0:	428c      	cmp	r4, r1
    13c2:	d108      	bne.n	13d6 <UART_Init+0x2a>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
    13c4:	2101      	movs	r1, #1
    13c6:	2010      	movs	r0, #16
    13c8:	f7fe feca 	bl	160 <CLKPWR_ConfigPPWR>


	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    13cc:	2107      	movs	r1, #7
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    13ce:	2200      	movs	r2, #0


	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    13d0:	7221      	strb	r1, [r4, #8]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    13d2:	7222      	strb	r2, [r4, #8]

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    13d4:	e00e      	b.n	13f4 <UART_Init+0x48>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
	}



	if(UARTx == LPC_UART2)
    13d6:	4a9c      	ldr	r2, [pc, #624]	; (1648 <UART_Init+0x29c>)
    13d8:	4294      	cmp	r4, r2
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
    13da:	bf08      	it	eq
    13dc:	f04f 7080 	moveq.w	r0, #16777216	; 0x1000000
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
	}



	if(UARTx == LPC_UART2)
    13e0:	d004      	beq.n	13ec <UART_Init+0x40>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
	}



	if(UARTx == LPC_UART3)
    13e2:	489a      	ldr	r0, [pc, #616]	; (164c <UART_Init+0x2a0>)
    13e4:	4284      	cmp	r4, r0
    13e6:	d125      	bne.n	1434 <UART_Init+0x88>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    13e8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    13ec:	2101      	movs	r1, #1
    13ee:	f7fe feb7 	bl	160 <CLKPWR_ConfigPPWR>
    13f2:	e01f      	b.n	1434 <UART_Init+0x88>
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    13f4:	4893      	ldr	r0, [pc, #588]	; (1644 <UART_Init+0x298>)
    13f6:	7d05      	ldrb	r5, [r0, #20]
    13f8:	07ea      	lsls	r2, r5, #31
    13fa:	d501      	bpl.n	1400 <UART_Init+0x54>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
    13fc:	7803      	ldrb	r3, [r0, #0]
    13fe:	e7f9      	b.n	13f4 <UART_Init+0x48>
		}

		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
    1400:	2680      	movs	r6, #128	; 0x80
    1402:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
		// Wait for current transmit complete
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
    1406:	4b8f      	ldr	r3, [pc, #572]	; (1644 <UART_Init+0x298>)
    1408:	7d19      	ldrb	r1, [r3, #20]
    140a:	f001 0220 	and.w	r2, r1, #32
    140e:	b2d0      	uxtb	r0, r2
    1410:	2800      	cmp	r0, #0
    1412:	d0f8      	beq.n	1406 <UART_Init+0x5a>
		// Disable Tx
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
    1414:	2500      	movs	r5, #0
    1416:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30

		// Disable interrupt
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
    141a:	605d      	str	r5, [r3, #4]
		// Set LCR to default state
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
    141c:	731d      	strb	r5, [r3, #12]
		// Set ACR to default state
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    141e:	621d      	str	r5, [r3, #32]
		// Set Modem Control to default state
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
    1420:	741d      	strb	r5, [r3, #16]
		// Set RS485 control to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
    1422:	f883 504c 	strb.w	r5, [r3, #76]	; 0x4c
		// Set RS485 delay timer to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
    1426:	f883 5054 	strb.w	r5, [r3, #84]	; 0x54
		// Set RS485 addr match to default state
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
    142a:	f883 5050 	strb.w	r5, [r3, #80]	; 0x50
		//Dummy Reading to Clear Status
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
    142e:	7e1a      	ldrb	r2, [r3, #24]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
    1430:	7d1b      	ldrb	r3, [r3, #20]
    1432:	e01d      	b.n	1470 <UART_Init+0xc4>
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    1434:	2507      	movs	r5, #7
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    1436:	2600      	movs	r6, #0
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    1438:	7225      	strb	r5, [r4, #8]
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    143a:	7226      	strb	r6, [r4, #8]

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    143c:	7d23      	ldrb	r3, [r4, #20]
    143e:	07db      	lsls	r3, r3, #31
    1440:	d501      	bpl.n	1446 <UART_Init+0x9a>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
    1442:	7823      	ldrb	r3, [r4, #0]
    1444:	e7fa      	b.n	143c <UART_Init+0x90>
		}

		UARTx->TER = UART_TER_TXEN;
    1446:	2180      	movs	r1, #128	; 0x80
    1448:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
    144c:	7d22      	ldrb	r2, [r4, #20]
    144e:	f002 0020 	and.w	r0, r2, #32
    1452:	b2c5      	uxtb	r5, r0
    1454:	2d00      	cmp	r5, #0
    1456:	d0f9      	beq.n	144c <UART_Init+0xa0>
		UARTx->ACR = 0;
		// Dummy reading
		tmp = UARTx->LSR;
	}

	if (UARTx == LPC_UART3)
    1458:	4b7c      	ldr	r3, [pc, #496]	; (164c <UART_Init+0x2a0>)

		UARTx->TER = UART_TER_TXEN;
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
		// Disable Tx
		UARTx->TER = 0;
    145a:	2600      	movs	r6, #0
    145c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
		UARTx->ACR = 0;
		// Dummy reading
		tmp = UARTx->LSR;
	}

	if (UARTx == LPC_UART3)
    1460:	429c      	cmp	r4, r3
		while (!(UARTx->LSR & UART_LSR_THRE));
		// Disable Tx
		UARTx->TER = 0;

		// Disable interrupt
		UARTx->/*DLIER.*/IER = 0;
    1462:	6066      	str	r6, [r4, #4]
		// Set LCR to default state
		UARTx->LCR = 0;
    1464:	7326      	strb	r6, [r4, #12]
		// Set ACR to default state
		UARTx->ACR = 0;
    1466:	6226      	str	r6, [r4, #32]
		// Dummy reading
		tmp = UARTx->LSR;
    1468:	7d22      	ldrb	r2, [r4, #20]
	}

	if (UARTx == LPC_UART3)
	{
		// Set IrDA to default state
		UARTx->ICR = 0;
    146a:	bf08      	it	eq
    146c:	f884 6024 	strbeq.w	r6, [r4, #36]	; 0x24
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    1470:	4e73      	ldr	r6, [pc, #460]	; (1640 <UART_Init+0x294>)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
    1472:	2006      	movs	r0, #6
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    1474:	42b4      	cmp	r4, r6
		UARTx->ICR = 0;
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    1476:	f8db 5000 	ldr.w	r5, [fp]
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    147a:	d00b      	beq.n	1494 <UART_Init+0xe8>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    147c:	4b71      	ldr	r3, [pc, #452]	; (1644 <UART_Init+0x298>)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
    147e:	2008      	movs	r0, #8
	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    1480:	429c      	cmp	r4, r3
    1482:	d007      	beq.n	1494 <UART_Init+0xe8>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
	}
	else if (UARTx == LPC_UART2)
    1484:	4970      	ldr	r1, [pc, #448]	; (1648 <UART_Init+0x29c>)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
    1486:	2030      	movs	r0, #48	; 0x30
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
	}
	else if (UARTx == LPC_UART2)
    1488:	428c      	cmp	r4, r1
    148a:	d003      	beq.n	1494 <UART_Init+0xe8>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
	}
	else if (UARTx == LPC_UART3)
    148c:	4a6f      	ldr	r2, [pc, #444]	; (164c <UART_Init+0x2a0>)
    148e:	4294      	cmp	r4, r2
    1490:	d103      	bne.n	149a <UART_Init+0xee>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
    1492:	2032      	movs	r0, #50	; 0x32
    1494:	f7fe fe54 	bl	140 <CLKPWR_GetPCLK>
    1498:	4607      	mov	r7, r0
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    149a:	073e      	lsls	r6, r7, #28
    149c:	0938      	lsrs	r0, r7, #4
    149e:	9604      	str	r6, [sp, #16]
    14a0:	9005      	str	r0, [sp, #20]
    14a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    14a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
    14aa:	f04f 33ff 	mov.w	r3, #4294967295
    14ae:	9307      	str	r3, [sp, #28]
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
    14b0:	2200      	movs	r2, #0
    14b2:	2300      	movs	r3, #0
    14b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
    14b8:	2600      	movs	r6, #0
		UARTx->ICR = 0;
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    14ba:	9506      	str	r5, [sp, #24]
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    14bc:	f04f 0801 	mov.w	r8, #1
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
    14c0:	46b1      	mov	r9, r6
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    14c2:	f04f 0c00 	mov.w	ip, #0
    14c6:	46e2      	mov	sl, ip
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    14c8:	9a06      	ldr	r2, [sp, #24]
    14ca:	2300      	movs	r3, #0
    14cc:	4462      	add	r2, ip
    14ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    14d2:	f8cd c004 	str.w	ip, [sp, #4]
    14d6:	f002 fa5b 	bl	3990 <__aeabi_uldivmod>
		  current_error = divisor & 0xFFFFFFFF;

		  tmp = divisor>>32;

		  /* Adjust error */
		  if(current_error > ((uint32_t)1<<31)){
    14da:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    14de:	f8dd c004 	ldr.w	ip, [sp, #4]
    14e2:	d901      	bls.n	14e8 <UART_Init+0x13c>
			current_error = -current_error;
    14e4:	4240      	negs	r0, r0
			tmp++;
    14e6:	3101      	adds	r1, #1
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
    14e8:	1e4b      	subs	r3, r1, #1
    14ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    14ee:	d209      	bcs.n	1504 <UART_Init+0x158>
		  continue;

		  if( current_error < best_error){
    14f0:	9a07      	ldr	r2, [sp, #28]
    14f2:	4290      	cmp	r0, r2
    14f4:	d206      	bcs.n	1504 <UART_Init+0x158>
			best_error = current_error;
			best_divisor = tmp;
    14f6:	9102      	str	r1, [sp, #8]
    14f8:	2100      	movs	r1, #0
    14fa:	9103      	str	r1, [sp, #12]
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    14fc:	b300      	cbz	r0, 1540 <UART_Init+0x194>
    14fe:	9007      	str	r0, [sp, #28]
    1500:	4646      	mov	r6, r8
    1502:	46d1      	mov	r9, sl
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
    1504:	f10a 0a01 	add.w	sl, sl, #1
    1508:	45c2      	cmp	sl, r8
    150a:	44ac      	add	ip, r5
    150c:	d3dc      	bcc.n	14c8 <UART_Init+0x11c>
			bestm = m;
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
    150e:	9807      	ldr	r0, [sp, #28]
    1510:	b180      	cbz	r0, 1534 <UART_Init+0x188>
    1512:	9b06      	ldr	r3, [sp, #24]
    1514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1518:	195a      	adds	r2, r3, r5
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    151a:	f108 0801 	add.w	r8, r8, #1
    151e:	9206      	str	r2, [sp, #24]
    1520:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1524:	1812      	adds	r2, r2, r0
    1526:	eb43 0301 	adc.w	r3, r3, r1
    152a:	f1b8 0f10 	cmp.w	r8, #16
    152e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    1532:	d1c6      	bne.n	14c2 <UART_Init+0x116>

		if (best_error == 0)
		  break;
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */
    1534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1538:	ea50 0301 	orrs.w	r3, r0, r1
    153c:	d04a      	beq.n	15d4 <UART_Init+0x228>
    153e:	e001      	b.n	1544 <UART_Init+0x198>
		  if( current_error < best_error){
			best_error = current_error;
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    1540:	46d1      	mov	r9, sl
    1542:	4646      	mov	r6, r8
		  break;
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */

	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
    1544:	0938      	lsrs	r0, r7, #4
    1546:	9f02      	ldr	r7, [sp, #8]
    1548:	eb09 0106 	add.w	r1, r9, r6
    154c:	fba1 2307 	umull	r2, r3, r1, r7
    1550:	9f03      	ldr	r7, [sp, #12]
    1552:	4370      	muls	r0, r6
    1554:	fb01 3307 	mla	r3, r1, r7, r3
    1558:	2100      	movs	r1, #0
    155a:	f002 fa19 	bl	3990 <__aeabi_uldivmod>

	/* reuse best_error to evaluate baud error*/
	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
    155e:	4285      	cmp	r5, r0
    1560:	bf8c      	ite	hi
    1562:	ebc0 0005 	rsbhi	r0, r0, r5
	else best_error = recalcbaud -baudrate;
    1566:	ebc5 0000 	rsbls	r0, r5, r0

	best_error = best_error * 100 / baudrate;
    156a:	2364      	movs	r3, #100	; 0x64
    156c:	4358      	muls	r0, r3
    156e:	fbb0 f5f5 	udiv	r5, r0, r5

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
    1572:	2d02      	cmp	r5, #2
    1574:	d82e      	bhi.n	15d4 <UART_Init+0x228>
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    1576:	7b20      	ldrb	r0, [r4, #12]

	best_error = best_error * 100 / baudrate;

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1578:	4a32      	ldr	r2, [pc, #200]	; (1644 <UART_Init+0x298>)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    157a:	f040 0180 	orr.w	r1, r0, #128	; 0x80

	best_error = best_error * 100 / baudrate;

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    157e:	4294      	cmp	r4, r2
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    1580:	7321      	strb	r1, [r4, #12]

	best_error = best_error * 100 / baudrate;

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1582:	d113      	bne.n	15ac <UART_Init+0x200>
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    1584:	9b02      	ldr	r3, [sp, #8]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    1586:	f89d 0008 	ldrb.w	r0, [sp, #8]
	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    158a:	f3c3 2207 	ubfx	r2, r3, #8, #8
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    158e:	b2c1      	uxtb	r1, r0
	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    1590:	7122      	strb	r2, [r4, #4]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    1592:	7021      	strb	r1, [r4, #0]
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    1594:	7b23      	ldrb	r3, [r4, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    1596:	0136      	lsls	r6, r6, #4
    1598:	b2f0      	uxtb	r0, r6
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    159a:	f009 090f 	and.w	r9, r9, #15
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    159e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    15a2:	ea40 0609 	orr.w	r6, r0, r9
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    15a6:	7322      	strb	r2, [r4, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    15a8:	62a6      	str	r6, [r4, #40]	; 0x28
    15aa:	e016      	b.n	15da <UART_Init+0x22e>
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    15ac:	9f02      	ldr	r7, [sp, #8]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    15ae:	f009 090f 	and.w	r9, r9, #15
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    15b2:	f3c7 2307 	ubfx	r3, r7, #8, #8
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    15b6:	f89d 7008 	ldrb.w	r7, [sp, #8]
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    15ba:	7123      	strb	r3, [r4, #4]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    15bc:	b2fa      	uxtb	r2, r7
    15be:	7022      	strb	r2, [r4, #0]
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    15c0:	7b20      	ldrb	r0, [r4, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    15c2:	ea49 1606 	orr.w	r6, r9, r6, lsl #4
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    15c6:	f000 017f 	and.w	r1, r0, #127	; 0x7f
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    15ca:	b2f6      	uxtb	r6, r6
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    15cc:	7321      	strb	r1, [r4, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    15ce:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    15d2:	e005      	b.n	15e0 <UART_Init+0x234>

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    15d4:	491b      	ldr	r1, [pc, #108]	; (1644 <UART_Init+0x298>)
    15d6:	428c      	cmp	r4, r1
    15d8:	d102      	bne.n	15e0 <UART_Init+0x234>
	{
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
    15da:	4a1a      	ldr	r2, [pc, #104]	; (1644 <UART_Init+0x298>)
    15dc:	7b13      	ldrb	r3, [r2, #12]
    15de:	e000      	b.n	15e2 <UART_Init+0x236>
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    15e0:	7b23      	ldrb	r3, [r4, #12]
	}

	switch (UART_ConfigStruct->Databits){
    15e2:	f89b 0005 	ldrb.w	r0, [fp, #5]
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    15e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	}

	switch (UART_ConfigStruct->Databits){
    15ea:	2801      	cmp	r0, #1
    15ec:	d005      	beq.n	15fa <UART_Init+0x24e>
    15ee:	d309      	bcc.n	1604 <UART_Init+0x258>
    15f0:	2802      	cmp	r0, #2
    15f2:	d105      	bne.n	1600 <UART_Init+0x254>
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
		break;
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
    15f4:	f043 0302 	orr.w	r3, r3, #2
		break;
    15f8:	e004      	b.n	1604 <UART_Init+0x258>
	switch (UART_ConfigStruct->Databits){
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
    15fa:	f043 0301 	orr.w	r3, r3, #1
		break;
    15fe:	e001      	b.n	1604 <UART_Init+0x258>
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
		break;
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
    1600:	f043 0303 	orr.w	r3, r3, #3
		break;
	}

	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
    1604:	f89b 1004 	ldrb.w	r1, [fp, #4]
    1608:	b179      	cbz	r1, 162a <UART_Init+0x27e>
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
		switch (UART_ConfigStruct->Parity)
    160a:	2903      	cmp	r1, #3
    160c:	d008      	beq.n	1620 <UART_Init+0x274>
    160e:	2904      	cmp	r1, #4
    1610:	d009      	beq.n	1626 <UART_Init+0x27a>
    1612:	2902      	cmp	r1, #2
	{
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
    1614:	bf14      	ite	ne
    1616:	f043 0308 	orrne.w	r3, r3, #8
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
    161a:	f043 0318 	orreq.w	r3, r3, #24
			break;
    161e:	e004      	b.n	162a <UART_Init+0x27e>

		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
    1620:	f043 0328 	orr.w	r3, r3, #40	; 0x28
			break;
    1624:	e001      	b.n	162a <UART_Init+0x27e>

		case UART_PARITY_SP_0:
			tmp |= UART_LCR_PARITY_F_0;
    1626:	f043 0338 	orr.w	r3, r3, #56	; 0x38
		default:
			break;
		}
	}

	switch (UART_ConfigStruct->Stopbits){
    162a:	f89b 2006 	ldrb.w	r2, [fp, #6]
    162e:	2a01      	cmp	r2, #1
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
    1630:	bf08      	it	eq
    1632:	f043 0304 	orreq.w	r3, r3, #4
    1636:	b2d8      	uxtb	r0, r3


	// Write back to LCR, configure FIFO and Disable Tx
	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    1638:	7320      	strb	r0, [r4, #12]
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
	}
}
    163a:	b00b      	add	sp, #44	; 0x2c
    163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1640:	4000c000 	.word	0x4000c000
    1644:	40010000 	.word	0x40010000
    1648:	40098000 	.word	0x40098000
    164c:	4009c000 	.word	0x4009c000

00001650 <UART_ConfigStructInit>:
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
	UART_InitStruct->Parity = UART_PARITY_NONE;
    1650:	2200      	movs	r2, #0
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
    1652:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	UART_InitStruct->Databits = UART_DATABIT_8;
    1656:	2103      	movs	r1, #3
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
    1658:	6003      	str	r3, [r0, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
    165a:	7141      	strb	r1, [r0, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
    165c:	7102      	strb	r2, [r0, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    165e:	7182      	strb	r2, [r0, #6]
    1660:	4770      	bx	lr

00001662 <UART_SendByte>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    1662:	7001      	strb	r1, [r0, #0]
    1664:	4770      	bx	lr

00001666 <UART_ReceiveByte>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		Data received
 **********************************************************************/
uint8_t UART_ReceiveByte(LPC_UART_TypeDef* UARTx)
{
    1666:	4903      	ldr	r1, [pc, #12]	; (1674 <UART_ReceiveByte+0xe>)
    1668:	f04f 0200 	mov.w	r2, #0
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		EscFlag = 0;                    /* clear EscapeFlag */
    166c:	800a      	strh	r2, [r1, #0]
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    166e:	7800      	ldrb	r0, [r0, #0]
	else
	{
		EscFlag = 0;                    /* clear EscapeFlag */
		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
	}
}
    1670:	4770      	bx	lr
    1672:	bf00      	nop
    1674:	10000078 	.word	0x10000078

00001678 <UART_ForceBreak>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_BREAK_EN;
    1678:	7b01      	ldrb	r1, [r0, #12]
    167a:	f041 0240 	orr.w	r2, r1, #64	; 0x40
    167e:	7302      	strb	r2, [r0, #12]
    1680:	4770      	bx	lr

00001682 <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
    1682:	b510      	push	{r4, lr}
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
    1684:	2906      	cmp	r1, #6
    1686:	d814      	bhi.n	16b2 <UART_IntConfig+0x30>
    1688:	e8df f001 	tbb	[pc, r1]
    168c:	08060412 	.word	0x08060412
    1690:	0c0a      	.short	0x0c0a
    1692:	0f          	.byte	0x0f
    1693:	00          	.byte	0x00
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
			break;
		case UART_INTCFG_THRE:
			tmp = UART_IER_THREINT_EN;
    1694:	2302      	movs	r3, #2
			break;
    1696:	e00c      	b.n	16b2 <UART_IntConfig+0x30>
		case UART_INTCFG_RLS:
			tmp = UART_IER_RLSINT_EN;
    1698:	2304      	movs	r3, #4
			break;
    169a:	e00a      	b.n	16b2 <UART_IntConfig+0x30>
		case UART1_INTCFG_MS:
			tmp = UART1_IER_MSINT_EN;
    169c:	2308      	movs	r3, #8
			break;
    169e:	e008      	b.n	16b2 <UART_IntConfig+0x30>
		case UART1_INTCFG_CTS:
			tmp = UART1_IER_CTSINT_EN;
    16a0:	2380      	movs	r3, #128	; 0x80
			break;
    16a2:	e006      	b.n	16b2 <UART_IntConfig+0x30>
		case UART_INTCFG_ABEO:
			tmp = UART_IER_ABEOINT_EN;
    16a4:	f44f 7380 	mov.w	r3, #256	; 0x100
			break;
    16a8:	e003      	b.n	16b2 <UART_IntConfig+0x30>
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
    16aa:	f44f 7300 	mov.w	r3, #512	; 0x200
			break;
    16ae:	e000      	b.n	16b2 <UART_IntConfig+0x30>
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
    16b0:	2301      	movs	r3, #1
	else
	{
		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
	}

	if (NewState == ENABLE)
    16b2:	2a01      	cmp	r2, #1
    16b4:	4a0b      	ldr	r2, [pc, #44]	; (16e4 <UART_IntConfig+0x62>)
    16b6:	d103      	bne.n	16c0 <UART_IntConfig+0x3e>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
    16b8:	6844      	ldr	r4, [r0, #4]
    16ba:	4323      	orrs	r3, r4
    16bc:	6043      	str	r3, [r0, #4]
    16be:	bd10      	pop	{r4, pc}
			UARTx->/*DLIER.*/IER |= tmp;
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    16c0:	4290      	cmp	r0, r2
    16c2:	ea6f 0303 	mvn.w	r3, r3
    16c6:	d105      	bne.n	16d4 <UART_IntConfig+0x52>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
    16c8:	6842      	ldr	r2, [r0, #4]
    16ca:	f240 318f 	movw	r1, #911	; 0x38f
    16ce:	4011      	ands	r1, r2
    16d0:	400b      	ands	r3, r1
    16d2:	e004      	b.n	16de <UART_IntConfig+0x5c>
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
    16d4:	6841      	ldr	r1, [r0, #4]
    16d6:	f240 3407 	movw	r4, #775	; 0x307
    16da:	400c      	ands	r4, r1
    16dc:	4023      	ands	r3, r4
    16de:	6043      	str	r3, [r0, #4]
    16e0:	bd10      	pop	{r4, pc}
    16e2:	bf00      	nop
    16e4:	40010000 	.word	0x40010000

000016e8 <UART_GetLineStatus>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
    16e8:	7d00      	ldrb	r0, [r0, #20]
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
	}
}
    16ea:	4770      	bx	lr

000016ec <UART_GetIntId>:
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    16ec:	6883      	ldr	r3, [r0, #8]
}
    16ee:	f240 30cf 	movw	r0, #975	; 0x3cf
    16f2:	4018      	ands	r0, r3
    16f4:	4770      	bx	lr

000016f6 <UART_CheckBusy>:
 * 				- LPC_UART3: UART3 peripheral
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
	if (UARTx->LSR & UART_LSR_TEMT){
    16f6:	7d00      	ldrb	r0, [r0, #20]
    16f8:	f080 0140 	eor.w	r1, r0, #64	; 0x40
		return RESET;
	} else {
		return SET;
	}
}
    16fc:	f3c1 1080 	ubfx	r0, r1, #6, #1
    1700:	4770      	bx	lr

00001702 <UART_FIFOConfig>:
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
    1702:	78cb      	ldrb	r3, [r1, #3]
    1704:	2b02      	cmp	r3, #2
    1706:	bf9c      	itt	ls
    1708:	4a0b      	ldrls	r2, [pc, #44]	; (1738 <UART_FIFOConfig+0x36>)
    170a:	5cd3      	ldrbls	r3, [r2, r3]
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    170c:	784a      	ldrb	r2, [r1, #1]
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
    170e:	bf88      	it	hi
    1710:	23c1      	movhi	r3, #193	; 0xc1
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    1712:	2a01      	cmp	r2, #1
	{
		tmp |= UART_FCR_TX_RS;
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    1714:	780a      	ldrb	r2, [r1, #0]
	{
		tmp |= UART_FCR_RX_RS;
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    1716:	7889      	ldrb	r1, [r1, #2]
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
	{
		tmp |= UART_FCR_TX_RS;
    1718:	bf08      	it	eq
    171a:	f043 0304 	orreq.w	r3, r3, #4
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    171e:	2a01      	cmp	r2, #1
	{
		tmp |= UART_FCR_RX_RS;
    1720:	bf08      	it	eq
    1722:	f043 0302 	orreq.w	r3, r3, #2
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    1726:	2901      	cmp	r1, #1
	{
		tmp |= UART_FCR_DMAMODE_SEL;
    1728:	bf08      	it	eq
    172a:	f043 0308 	orreq.w	r3, r3, #8
    172e:	f023 0330 	bic.w	r3, r3, #48	; 0x30


	//write to FIFO control register
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    1732:	b2d9      	uxtb	r1, r3
    1734:	7201      	strb	r1, [r0, #8]
    1736:	4770      	bx	lr
    1738:	000040d8 	.word	0x000040d8

0000173c <UART_Config>:
 * 				- LPC_UART2: UART2 peripheral
 * @param[in]	baud define the baudrate for UARTx
 * @return 		None
 *********************************************************************/
void UART_Config(LPC_UART_TypeDef *UARTx, long int baud)
{
    173c:	b570      	push	{r4, r5, r6, lr}
//	NVIC_SetVTOR(0x10000000);
//#else
//	NVIC_SetVTOR(0x00000000);
//#endif

	if(UARTx == LPC_UART0)
    173e:	4b47      	ldr	r3, [pc, #284]	; (185c <UART_Config+0x120>)
 * 				- LPC_UART2: UART2 peripheral
 * @param[in]	baud define the baudrate for UARTx
 * @return 		None
 *********************************************************************/
void UART_Config(LPC_UART_TypeDef *UARTx, long int baud)
{
    1740:	b086      	sub	sp, #24
//	NVIC_SetVTOR(0x10000000);
//#else
//	NVIC_SetVTOR(0x00000000);
//#endif

	if(UARTx == LPC_UART0)
    1742:	4298      	cmp	r0, r3
 * 				- LPC_UART2: UART2 peripheral
 * @param[in]	baud define the baudrate for UARTx
 * @return 		None
 *********************************************************************/
void UART_Config(LPC_UART_TypeDef *UARTx, long int baud)
{
    1744:	4604      	mov	r4, r0
    1746:	460e      	mov	r6, r1
//	NVIC_SetVTOR(0x10000000);
//#else
//	NVIC_SetVTOR(0x00000000);
//#endif

	if(UARTx == LPC_UART0)
    1748:	d112      	bne.n	1770 <UART_Config+0x34>
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 2;
    174a:	2502      	movs	r5, #2
	{
		/*
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
    174c:	2000      	movs	r0, #0
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 2;
    174e:	f88d 5009 	strb.w	r5, [sp, #9]
		PinCfg.Portnum = 0;
    1752:	ad06      	add	r5, sp, #24
    1754:	f805 0d10 	strb.w	r0, [r5, #-16]!
	if(UARTx == LPC_UART0)
	{
		/*
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
    1758:	2301      	movs	r3, #1
		PinCfg.OpenDrain = 0;
    175a:	f88d 000c 	strb.w	r0, [sp, #12]
		PinCfg.Pinmode = 0;
    175e:	f88d 000b 	strb.w	r0, [sp, #11]
		PinCfg.Pinnum = 2;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    1762:	4628      	mov	r0, r5
	if(UARTx == LPC_UART0)
	{
		/*
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
    1764:	f88d 300a 	strb.w	r3, [sp, #10]
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 2;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    1768:	f7ff faf8 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 3;
    176c:	2003      	movs	r0, #3
    176e:	e029      	b.n	17c4 <UART_Config+0x88>
		PINSEL_ConfigPin(&PinCfg);
	}

	else if((LPC_UART1_TypeDef *)UARTx == LPC_UART1)
    1770:	483b      	ldr	r0, [pc, #236]	; (1860 <UART_Config+0x124>)
    1772:	4284      	cmp	r4, r0
    1774:	d111      	bne.n	179a <UART_Config+0x5e>
	{
		/*
		 * Initialize UART1 pin connect
		 */
		PinCfg.Funcnum = 2;
    1776:	2102      	movs	r1, #2
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 0;
		PinCfg.Portnum = 2;
    1778:	ad06      	add	r5, sp, #24
    177a:	f805 1d10 	strb.w	r1, [r5, #-16]!
	{
		/*
		 * Initialize UART1 pin connect
		 */
		PinCfg.Funcnum = 2;
		PinCfg.OpenDrain = 0;
    177e:	2200      	movs	r2, #0
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 0;
		PinCfg.Portnum = 2;
		PINSEL_ConfigPin(&PinCfg);
    1780:	4628      	mov	r0, r5
	else if((LPC_UART1_TypeDef *)UARTx == LPC_UART1)
	{
		/*
		 * Initialize UART1 pin connect
		 */
		PinCfg.Funcnum = 2;
    1782:	f88d 100a 	strb.w	r1, [sp, #10]
		PinCfg.OpenDrain = 0;
    1786:	f88d 200c 	strb.w	r2, [sp, #12]
		PinCfg.Pinmode = 0;
    178a:	f88d 200b 	strb.w	r2, [sp, #11]
		PinCfg.Pinnum = 0;
    178e:	f88d 2009 	strb.w	r2, [sp, #9]
		PinCfg.Portnum = 2;
		PINSEL_ConfigPin(&PinCfg);
    1792:	f7ff fae3 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 1;
    1796:	2001      	movs	r0, #1
    1798:	e014      	b.n	17c4 <UART_Config+0x88>
		PINSEL_ConfigPin(&PinCfg);
	}

	else if(UARTx == LPC_UART2)
    179a:	4932      	ldr	r1, [pc, #200]	; (1864 <UART_Config+0x128>)
    179c:	428c      	cmp	r4, r1
    179e:	d116      	bne.n	17ce <UART_Config+0x92>
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 10;
    17a0:	250a      	movs	r5, #10
	{
		/*
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
    17a2:	2300      	movs	r3, #0
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 10;
    17a4:	f88d 5009 	strb.w	r5, [sp, #9]
		PinCfg.Portnum = 0;
    17a8:	ad06      	add	r5, sp, #24
    17aa:	f805 3d10 	strb.w	r3, [r5, #-16]!
	else if(UARTx == LPC_UART2)
	{
		/*
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
    17ae:	2201      	movs	r2, #1
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 10;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    17b0:	4628      	mov	r0, r5
	else if(UARTx == LPC_UART2)
	{
		/*
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
    17b2:	f88d 200a 	strb.w	r2, [sp, #10]
		PinCfg.OpenDrain = 0;
    17b6:	f88d 300c 	strb.w	r3, [sp, #12]
		PinCfg.Pinmode = 0;
    17ba:	f88d 300b 	strb.w	r3, [sp, #11]
		PinCfg.Pinnum = 10;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    17be:	f7ff facd 	bl	d5c <PINSEL_ConfigPin>
		PinCfg.Pinnum = 11;
    17c2:	200b      	movs	r0, #11
    17c4:	f88d 0009 	strb.w	r0, [sp, #9]
		PINSEL_ConfigPin(&PinCfg);
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff fac7 	bl	d5c <PINSEL_ConfigPin>
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
    17ce:	2103      	movs	r1, #3
    17d0:	f88d 1015 	strb.w	r1, [sp, #21]
	 * 1 Stop bit
	 * None parity
	 */

	UART_ConfigStructInit(&UARTConfigStruct);
	UARTConfigStruct.Baud_rate = baud;
    17d4:	a906      	add	r1, sp, #24
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
	UART_InitStruct->Parity = UART_PARITY_NONE;
    17d6:	2500      	movs	r5, #0
	 * 1 Stop bit
	 * None parity
	 */

	UART_ConfigStructInit(&UARTConfigStruct);
	UARTConfigStruct.Baud_rate = baud;
    17d8:	f841 6d08 	str.w	r6, [r1, #-8]!

	// Initialize UARTx peripheral with given to corresponding parameter
	UART_Init(UARTx, &UARTConfigStruct);
    17dc:	4620      	mov	r0, r4
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
	UART_InitStruct->Parity = UART_PARITY_NONE;
    17de:	f88d 5014 	strb.w	r5, [sp, #20]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    17e2:	f88d 5016 	strb.w	r5, [sp, #22]

	UART_ConfigStructInit(&UARTConfigStruct);
	UARTConfigStruct.Baud_rate = baud;

	// Initialize UARTx peripheral with given to corresponding parameter
	UART_Init(UARTx, &UARTConfigStruct);
    17e6:	f7ff fde1 	bl	13ac <UART_Init>
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    17ea:	2201      	movs	r2, #1
	 * 				- FIFO_State = ENABLE
	 */
	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);

	// Initialize FIFO for UARTx peripheral
	UART_FIFOConfig(UARTx, &UARTFIFOConfigStruct);
    17ec:	4620      	mov	r0, r4
    17ee:	a901      	add	r1, sp, #4
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    17f0:	f88d 2004 	strb.w	r2, [sp, #4]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    17f4:	f88d 2005 	strb.w	r2, [sp, #5]
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    17f8:	f88d 5006 	strb.w	r5, [sp, #6]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    17fc:	f88d 5007 	strb.w	r5, [sp, #7]
	 * 				- FIFO_State = ENABLE
	 */
	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);

	// Initialize FIFO for UARTx peripheral
	UART_FIFOConfig(UARTx, &UARTFIFOConfigStruct);
    1800:	f7ff ff7f 	bl	1702 <UART_FIFOConfig>

	if (NewState == ENABLE)
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    1804:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30

	// Enable UARTx Transmit
	UART_TxCmd(UARTx, ENABLE);

#ifdef INTERRUPT_MODE
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    1808:	2100      	movs	r1, #0

	if (NewState == ENABLE)
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    180a:	f043 0080 	orr.w	r0, r3, #128	; 0x80

	// Enable UARTx Transmit
	UART_TxCmd(UARTx, ENABLE);

#ifdef INTERRUPT_MODE
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    180e:	2201      	movs	r2, #1

	if (NewState == ENABLE)
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    1810:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	// Enable UARTx Transmit
	UART_TxCmd(UARTx, ENABLE);

#ifdef INTERRUPT_MODE
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    1814:	4620      	mov	r0, r4
    1816:	f7ff ff34 	bl	1682 <UART_IntConfig>
	/* Enable UART line status interrupt */
	UART_IntConfig(UARTx, UART_INTCFG_RLS, ENABLE);
    181a:	2102      	movs	r1, #2
    181c:	2201      	movs	r2, #1
    181e:	4620      	mov	r0, r4
    1820:	f7ff ff2f 	bl	1682 <UART_IntConfig>
	__BUF_RESET(rb.rx_head);
	__BUF_RESET(rb.rx_tail);
	__BUF_RESET(rb.tx_head);
	__BUF_RESET(rb.tx_tail);

	if(UARTx == LPC_UART0)
    1824:	480d      	ldr	r0, [pc, #52]	; (185c <UART_Config+0x120>)
	 * first time
	 */
	TxIntStat = RESET;

	// Reset ring buf head and tail idx
	__BUF_RESET(rb.rx_head);
    1826:	4b10      	ldr	r3, [pc, #64]	; (1868 <UART_Config+0x12c>)
	/**
	 * Do not enable transmit interrupt here, since it is handled by
	 * UART_Send() function, just to reset Tx Interrupt state for the
	 * first time
	 */
	TxIntStat = RESET;
    1828:	4a10      	ldr	r2, [pc, #64]	; (186c <UART_Config+0x130>)
    182a:	2100      	movs	r1, #0
	__BUF_RESET(rb.rx_head);
	__BUF_RESET(rb.rx_tail);
	__BUF_RESET(rb.tx_head);
	__BUF_RESET(rb.tx_tail);

	if(UARTx == LPC_UART0)
    182c:	4284      	cmp	r4, r0
	/**
	 * Do not enable transmit interrupt here, since it is handled by
	 * UART_Send() function, just to reset Tx Interrupt state for the
	 * first time
	 */
	TxIntStat = RESET;
    182e:	7011      	strb	r1, [r2, #0]

	// Reset ring buf head and tail idx
	__BUF_RESET(rb.rx_head);
    1830:	6099      	str	r1, [r3, #8]
	__BUF_RESET(rb.rx_tail);
    1832:	60d9      	str	r1, [r3, #12]
	__BUF_RESET(rb.tx_head);
    1834:	6019      	str	r1, [r3, #0]
	__BUF_RESET(rb.tx_tail);
    1836:	6059      	str	r1, [r3, #4]

	if(UARTx == LPC_UART0)
    1838:	d105      	bne.n	1846 <UART_Config+0x10a>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    183a:	4b0d      	ldr	r3, [pc, #52]	; (1870 <UART_Config+0x134>)
    183c:	2148      	movs	r1, #72	; 0x48
    183e:	f883 1305 	strb.w	r1, [r3, #773]	; 0x305

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1842:	2020      	movs	r0, #32
    1844:	e007      	b.n	1856 <UART_Config+0x11a>
		/* preemption = 1, sub-priority = 1 */
		NVIC_SetPriority(UART0_IRQn, ((0x01<<3)|0x01));
		/* Enable Interrupt for UART0 channel */
		NVIC_EnableIRQ(UART0_IRQn);
	}
	else if(UARTx == LPC_UART2)
    1846:	4907      	ldr	r1, [pc, #28]	; (1864 <UART_Config+0x128>)
    1848:	428c      	cmp	r4, r1
    184a:	d105      	bne.n	1858 <UART_Config+0x11c>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    184c:	4b08      	ldr	r3, [pc, #32]	; (1870 <UART_Config+0x134>)
    184e:	2210      	movs	r2, #16
    1850:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1854:	2080      	movs	r0, #128	; 0x80
    1856:	6018      	str	r0, [r3, #0]
		/* Enable Interrupt for UART2 channel */
		NVIC_EnableIRQ(UART2_IRQn);
	}

#endif
}
    1858:	b006      	add	sp, #24
    185a:	bd70      	pop	{r4, r5, r6, pc}
    185c:	4000c000 	.word	0x4000c000
    1860:	40010000 	.word	0x40010000
    1864:	40098000 	.word	0x40098000
    1868:	1000007c 	.word	0x1000007c
    186c:	1000034c 	.word	0x1000034c
    1870:	e000e100 	.word	0xe000e100

00001874 <UART_FIFOConfigStructInit>:
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    1874:	2300      	movs	r3, #0
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    1876:	2101      	movs	r1, #1
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    1878:	7083      	strb	r3, [r0, #2]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    187a:	70c3      	strb	r3, [r0, #3]
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    187c:	7001      	strb	r1, [r0, #0]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    187e:	7041      	strb	r1, [r0, #1]
    1880:	4770      	bx	lr

00001882 <UART_ABCmd>:

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	tmp = 0;
	if (NewState == ENABLE) {
    1882:	2a01      	cmp	r2, #1
    1884:	f04f 0300 	mov.w	r3, #0
    1888:	d120      	bne.n	18cc <UART_ABCmd+0x4a>
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
    188a:	780b      	ldrb	r3, [r1, #0]
			tmp |= UART_ACR_MODE;
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
    188c:	784a      	ldrb	r2, [r1, #1]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	tmp = 0;
    188e:	2b01      	cmp	r3, #1
    1890:	bf0c      	ite	eq
    1892:	2302      	moveq	r3, #2
    1894:	2300      	movne	r3, #0
	if (NewState == ENABLE) {
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
			tmp |= UART_ACR_MODE;
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
    1896:	2a01      	cmp	r2, #1
    1898:	d101      	bne.n	189e <UART_ABCmd+0x1c>
			tmp |= UART_ACR_AUTO_RESTART;
    189a:	f043 0304 	orr.w	r3, r3, #4
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    189e:	7b02      	ldrb	r2, [r0, #12]
		if (ABConfigStruct->AutoRestart == ENABLE){
			tmp |= UART_ACR_AUTO_RESTART;
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    18a0:	490b      	ldr	r1, [pc, #44]	; (18d0 <UART_ABCmd+0x4e>)
    18a2:	4288      	cmp	r0, r1
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    18a4:	f042 0180 	orr.w	r1, r2, #128	; 0x80
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
    18a8:	f04f 0200 	mov.w	r2, #0
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    18ac:	7301      	strb	r1, [r0, #12]
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
    18ae:	7002      	strb	r2, [r0, #0]
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
    18b0:	7102      	strb	r2, [r0, #4]
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
    18b2:	7b01      	ldrb	r1, [r0, #12]
    18b4:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    18b8:	7302      	strb	r2, [r0, #12]
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
    18ba:	f04f 0110 	mov.w	r1, #16
		if (ABConfigStruct->AutoRestart == ENABLE){
			tmp |= UART_ACR_AUTO_RESTART;
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    18be:	d002      	beq.n	18c6 <UART_ABCmd+0x44>
			UARTx->LCR |= UART_LCR_DLAB_EN;
			UARTx->DLL = 0;
			UARTx->DLM = 0;
			UARTx->LCR &= ~UART_LCR_DLAB_EN;
			// FDR value must be reset to default value
			UARTx->FDR = 0x10;
    18c0:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    18c4:	e000      	b.n	18c8 <UART_ABCmd+0x46>
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
    18c6:	6281      	str	r1, [r0, #40]	; 0x28
			((LPC_UART1_TypeDef *)UARTx)->ACR = UART_ACR_START | tmp;
    18c8:	f043 0301 	orr.w	r3, r3, #1
		}
		else
		{
			((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    18cc:	6203      	str	r3, [r0, #32]
    18ce:	4770      	bx	lr
    18d0:	40010000 	.word	0x40010000

000018d4 <UART_ABClearIntPending>:
void UART_ABClearIntPending(LPC_UART_TypeDef *UARTx, UART_ABEO_Type ABIntType)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		UARTx->ACR |= ABIntType;
    18d4:	6a02      	ldr	r2, [r0, #32]
    18d6:	4311      	orrs	r1, r2
    18d8:	6201      	str	r1, [r0, #32]
    18da:	4770      	bx	lr

000018dc <UART_TxCmd>:
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    18dc:	2901      	cmp	r1, #1
    18de:	d106      	bne.n	18ee <UART_TxCmd+0x12>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    18e0:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    18e4:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    18e8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    18ec:	4770      	bx	lr
    18ee:	f04f 0100 	mov.w	r1, #0
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    18f2:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    18f6:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
    18fa:	4770      	bx	lr

000018fc <UART_DeInit>:
void UART_DeInit(LPC_UART_TypeDef* UARTx)
{
	// For debug mode
	CHECK_PARAM(PARAM_UARTx(UARTx));

	UART_TxCmd(UARTx, DISABLE);
    18fc:	2100      	movs	r1, #0
    18fe:	f7ff bfed 	b.w	18dc <UART_TxCmd>

00001902 <UART_IrDAInvtInputCmd>:
void UART_IrDAInvtInputCmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    1902:	2901      	cmp	r1, #1
    1904:	d104      	bne.n	1910 <UART_IrDAInvtInputCmd+0xe>
	{
		UARTx->ICR |= UART_ICR_IRDAINV;
    1906:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
    190a:	f042 0102 	orr.w	r1, r2, #2
    190e:	e004      	b.n	191a <UART_IrDAInvtInputCmd+0x18>
	}
	else if (NewState == DISABLE)
    1910:	b929      	cbnz	r1, 191e <UART_IrDAInvtInputCmd+0x1c>
	{
		UARTx->ICR &= (~UART_ICR_IRDAINV) & UART_ICR_BITMASK;
    1912:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    1916:	f003 013d 	and.w	r1, r3, #61	; 0x3d
    191a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    191e:	4770      	bx	lr

00001920 <UART_IrDACmd>:
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		UARTx->ICR |= UART_ICR_IRDAEN;
    1920:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
void UART_IrDACmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    1924:	2901      	cmp	r1, #1
	{
		UARTx->ICR |= UART_ICR_IRDAEN;
    1926:	bf0c      	ite	eq
    1928:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		UARTx->ICR &= (~UART_ICR_IRDAEN) & UART_ICR_BITMASK;
    192c:	f003 033e 	andne.w	r3, r3, #62	; 0x3e
    1930:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    1934:	4770      	bx	lr

00001936 <UART_IrDAPulseDivConfig>:
	uint32_t tmp, tmp1;
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));

	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    1936:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
	uint32_t tmp, tmp1;
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));

	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
    193a:	f001 0107 	and.w	r1, r1, #7
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    193e:	f003 02c7 	and.w	r2, r3, #199	; 0xc7
	tmp |= tmp1 | UART_ICR_FIXPULSE_EN;
    1942:	ea42 03c1 	orr.w	r3, r2, r1, lsl #3
	UARTx->ICR = tmp & UART_ICR_BITMASK;
    1946:	f003 013f 	and.w	r1, r3, #63	; 0x3f
    194a:	f041 0204 	orr.w	r2, r1, #4
    194e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    1952:	4770      	bx	lr

00001954 <UART_FullModemForcePinState>:
				- ACTIVE: Force the pin to active signal.
 * @return none
 **********************************************************************/
void UART_FullModemForcePinState(LPC_UART1_TypeDef *UARTx, UART_MODEM_PIN_Type Pin, \
							UART1_SignalState NewState)
{
    1954:	2901      	cmp	r1, #1
    1956:	bf9d      	ittte	ls
    1958:	4b06      	ldrls	r3, [pc, #24]	; (1974 <UART_FullModemForcePinState+0x20>)
    195a:	1859      	addls	r1, r3, r1
    195c:	78cb      	ldrbls	r3, [r1, #3]
    195e:	2300      	movhi	r3, #0
		break;
	default:
		break;
	}

	if (NewState == ACTIVE){
    1960:	2a01      	cmp	r2, #1
		UARTx->MCR |= tmp;
    1962:	7c02      	ldrb	r2, [r0, #16]
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1964:	bf16      	itet	ne
    1966:	f022 020c 	bicne.w	r2, r2, #12
	default:
		break;
	}

	if (NewState == ACTIVE){
		UARTx->MCR |= tmp;
    196a:	4313      	orreq	r3, r2
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    196c:	ea22 0303 	bicne.w	r3, r2, r3
    1970:	7403      	strb	r3, [r0, #16]
    1972:	4770      	bx	lr
    1974:	000040d8 	.word	0x000040d8

00001978 <UART_FullModemConfigMode>:

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(Mode){
    1978:	2901      	cmp	r1, #1
    197a:	d005      	beq.n	1988 <UART_FullModemConfigMode+0x10>
    197c:	d306      	bcc.n	198c <UART_FullModemConfigMode+0x14>
		break;
	case UART1_MODEM_MODE_AUTO_RTS:
		tmp = UART1_MCR_AUTO_RTS_EN;
		break;
	case UART1_MODEM_MODE_AUTO_CTS:
		tmp = UART1_MCR_AUTO_CTS_EN;
    197e:	2902      	cmp	r1, #2
    1980:	bf14      	ite	ne
    1982:	2100      	movne	r1, #0
    1984:	2180      	moveq	r1, #128	; 0x80
    1986:	e002      	b.n	198e <UART_FullModemConfigMode+0x16>
	switch(Mode){
	case UART1_MODEM_MODE_LOOPBACK:
		tmp = UART1_MCR_LOOPB_EN;
		break;
	case UART1_MODEM_MODE_AUTO_RTS:
		tmp = UART1_MCR_AUTO_RTS_EN;
    1988:	2140      	movs	r1, #64	; 0x40
		break;
    198a:	e000      	b.n	198e <UART_FullModemConfigMode+0x16>
	CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(Mode){
	case UART1_MODEM_MODE_LOOPBACK:
		tmp = UART1_MCR_LOOPB_EN;
    198c:	2110      	movs	r1, #16
		break;
	}

	if (NewState == ENABLE)
	{
		UARTx->MCR |= tmp;
    198e:	7c03      	ldrb	r3, [r0, #16]
		break;
	default:
		break;
	}

	if (NewState == ENABLE)
    1990:	2a01      	cmp	r2, #1
	{
		UARTx->MCR |= tmp;
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1992:	bf16      	itet	ne
    1994:	f023 030c 	bicne.w	r3, r3, #12
		break;
	}

	if (NewState == ENABLE)
	{
		UARTx->MCR |= tmp;
    1998:	4319      	orreq	r1, r3
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    199a:	ea23 0101 	bicne.w	r1, r3, r1
    199e:	7401      	strb	r1, [r0, #16]
    19a0:	4770      	bx	lr

000019a2 <UART_FullModemGetStatus>:
 * 			used to check all flags.
 **********************************************************************/
uint8_t UART_FullModemGetStatus(LPC_UART1_TypeDef *UARTx)
{
	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	return ((UARTx->MSR) & UART1_MSR_BITMASK);
    19a2:	7e00      	ldrb	r0, [r0, #24]
}
    19a4:	4770      	bx	lr

000019a6 <UART_RS485Config>:
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));

	tmp = 0;
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
    19a6:	78cb      	ldrb	r3, [r1, #3]
    19a8:	2b01      	cmp	r3, #1
    19aa:	d10d      	bne.n	19c8 <UART_RS485Config+0x22>
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;

		// Set polar
		if (RS485ConfigStruct->DirCtrlPol_Level == SET)
    19ac:	794a      	ldrb	r2, [r1, #5]

	tmp = 0;
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;
    19ae:	2a01      	cmp	r2, #1
    19b0:	bf0c      	ite	eq
    19b2:	2330      	moveq	r3, #48	; 0x30
    19b4:	2310      	movne	r3, #16
		{
			tmp |= UART1_RS485CTRL_OINV_1;
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
    19b6:	790a      	ldrb	r2, [r1, #4]
    19b8:	2a01      	cmp	r2, #1
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    19ba:	79ca      	ldrb	r2, [r1, #7]
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
    19bc:	bf08      	it	eq
    19be:	f043 0308 	orreq.w	r3, r3, #8
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    19c2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
    19c6:	e000      	b.n	19ca <UART_RS485Config+0x24>
	CHECK_PARAM(PARAM_UART_RS485_DIRCTRL_PIN(RS485ConfigStruct->DirCtrlPin));
	CHECK_PARAM(PARAM_UART1_RS485_CFG_MATCHADDRVALUE(RS485ConfigStruct->MatchAddrValue));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));

	tmp = 0;
    19c8:	2300      	movs	r3, #0
		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
    19ca:	780a      	ldrb	r2, [r1, #0]
    19cc:	2a01      	cmp	r2, #1
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    19ce:	788a      	ldrb	r2, [r1, #2]
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
    19d0:	bf08      	it	eq
    19d2:	f043 0301 	orreq.w	r3, r3, #1
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    19d6:	2a01      	cmp	r2, #1
    19d8:	d104      	bne.n	19e4 <UART_RS485Config+0x3e>
	{
		tmp |= UART1_RS485CTRL_AADEN;
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    19da:	798a      	ldrb	r2, [r1, #6]
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
	{
		tmp |= UART1_RS485CTRL_AADEN;
    19dc:	f043 0304 	orr.w	r3, r3, #4
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    19e0:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
	}


	// Receiver is disable
	if (RS485ConfigStruct->Rx_State == DISABLE)
    19e4:	7849      	ldrb	r1, [r1, #1]
    19e6:	b909      	cbnz	r1, 19ec <UART_RS485Config+0x46>
	{
		tmp |= UART1_RS485CTRL_RX_DIS;
    19e8:	f043 0302 	orr.w	r3, r3, #2
	}

	// write back to RS485 control register
	UARTx->RS485CTRL = tmp & UART1_RS485CTRL_BITMASK;
    19ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    19f0:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c

	// Enable Parity function and leave parity in stick '0' parity as default
	UARTx->LCR |= (UART_LCR_PARITY_F_0 | UART_LCR_PARITY_EN);
    19f4:	7b01      	ldrb	r1, [r0, #12]
    19f6:	f041 0338 	orr.w	r3, r1, #56	; 0x38
    19fa:	7303      	strb	r3, [r0, #12]
    19fc:	4770      	bx	lr

000019fe <UART_RS485ReceiverCmd>:
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
	if (NewState == ENABLE){
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    19fe:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 * 							- DISABLE: Disable this function.
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
	if (NewState == ENABLE){
    1a02:	2901      	cmp	r1, #1
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    1a04:	bf0c      	ite	eq
    1a06:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
	} else {
		UARTx->RS485CTRL |= UART1_RS485CTRL_RX_DIS;
    1a0a:	f043 0302 	orrne.w	r3, r3, #2
    1a0e:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    1a12:	4770      	bx	lr

00001a14 <UART_IntReceive>:
 * @brief 		UART receive function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntReceive(LPC_UART_TypeDef *UARTx)
{
    1a14:	b510      	push	{r4, lr}
    1a16:	4604      	mov	r4, r0
	uint8_t tmpc;

	while(1)
	{
		// Call UART read function in UART driver
		tmpc = UART_ReceiveByte(UARTx);
    1a18:	4620      	mov	r0, r4
    1a1a:	f7ff fe24 	bl	1666 <UART_ReceiveByte>
		if (tmpc)
    1a1e:	4602      	mov	r2, r0
    1a20:	b180      	cbz	r0, 1a44 <UART_IntReceive+0x30>
		{
			/* Check if buffer is more space
			 * If no more space, remaining character will be trimmed out
			 */
			if (!__BUF_IS_FULL(rb.rx_head,rb.rx_tail))
    1a22:	4b09      	ldr	r3, [pc, #36]	; (1a48 <UART_IntReceive+0x34>)
    1a24:	68d8      	ldr	r0, [r3, #12]
    1a26:	6899      	ldr	r1, [r3, #8]
    1a28:	3101      	adds	r1, #1
    1a2a:	4041      	eors	r1, r0
    1a2c:	f011 0fff 	tst.w	r1, #255	; 0xff
    1a30:	d0f2      	beq.n	1a18 <UART_IntReceive+0x4>
			{
				rb.rx[rb.rx_head] = tmpc;
    1a32:	6898      	ldr	r0, [r3, #8]
    1a34:	1819      	adds	r1, r3, r0
    1a36:	f881 2110 	strb.w	r2, [r1, #272]	; 0x110
				__BUF_INCR(rb.rx_head);
    1a3a:	689a      	ldr	r2, [r3, #8]
    1a3c:	1c50      	adds	r0, r2, #1
    1a3e:	b2c1      	uxtb	r1, r0
    1a40:	6099      	str	r1, [r3, #8]
    1a42:	e7e9      	b.n	1a18 <UART_IntReceive+0x4>
    1a44:	bd10      	pop	{r4, pc}
    1a46:	bf00      	nop
    1a48:	1000007c 	.word	0x1000007c

00001a4c <UART_IntTransmit>:
 * @brief 		UART transmit function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntTransmit(LPC_UART_TypeDef *UARTx)
{
    1a4c:	b570      	push	{r4, r5, r6, lr}
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar;

    // Disable THRE interrupt
    UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1a4e:	2101      	movs	r1, #1
    1a50:	2200      	movs	r2, #0
 * @brief 		UART transmit function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntTransmit(LPC_UART_TypeDef *UARTx)
{
    1a52:	4604      	mov	r4, r0
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar;

    // Disable THRE interrupt
    UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1a54:	f7ff fe15 	bl	1682 <UART_IntConfig>

	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
	 * of data or break whenever ring buffers are empty */
	/* Wait until THR empty */
    while (UART_CheckBusy(UARTx) == SET);
    1a58:	4620      	mov	r0, r4
    1a5a:	f7ff fe4c 	bl	16f6 <UART_CheckBusy>
    1a5e:	2801      	cmp	r0, #1
    1a60:	d0fa      	beq.n	1a58 <UART_IntTransmit+0xc>

	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
    1a62:	4b1a      	ldr	r3, [pc, #104]	; (1acc <UART_IntTransmit+0x80>)
    1a64:	681a      	ldr	r2, [r3, #0]
    1a66:	6859      	ldr	r1, [r3, #4]
    1a68:	ea81 0002 	eor.w	r0, r1, r2
    1a6c:	f010 0fff 	tst.w	r0, #255	; 0xff
    1a70:	d00b      	beq.n	1a8a <UART_IntTransmit+0x3e>
    {
        /* Move a piece of data into the transmit FIFO */
		// None blocking mode
		pChar = &rb.tx[rb.tx_tail];
    1a72:	685a      	ldr	r2, [r3, #4]
    1a74:	f04f 33ff 	mov.w	r3, #4294967295
		bSent = 0;
		while (bToSend)
		{
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE))
    1a78:	7d25      	ldrb	r5, [r4, #20]
    1a7a:	f005 0620 	and.w	r6, r5, #32
    1a7e:	b2f1      	uxtb	r1, r6
    1a80:	b911      	cbnz	r1, 1a88 <UART_IntTransmit+0x3c>
			{
				if (timeOut == 0) break;
    1a82:	b113      	cbz	r3, 1a8a <UART_IntTransmit+0x3e>
				timeOut--;
    1a84:	3b01      	subs	r3, #1
    1a86:	e7f7      	b.n	1a78 <UART_IntTransmit+0x2c>
			}
			// Time out!
			if(timeOut == 0) break;
    1a88:	b9b3      	cbnz	r3, 1ab8 <UART_IntTransmit+0x6c>
    	}
    }

    /* If there is no more data to send, disable the transmit
       interrupt - else enable it or keep it enabled */
	if (__BUF_IS_EMPTY(rb.tx_head, rb.tx_tail))
    1a8a:	4810      	ldr	r0, [pc, #64]	; (1acc <UART_IntTransmit+0x80>)
    1a8c:	6805      	ldr	r5, [r0, #0]
    1a8e:	6846      	ldr	r6, [r0, #4]
    1a90:	406e      	eors	r6, r5
    1a92:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    1a96:	4d0e      	ldr	r5, [pc, #56]	; (1ad0 <UART_IntTransmit+0x84>)
    1a98:	d106      	bne.n	1aa8 <UART_IntTransmit+0x5c>
	{
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1a9a:	4620      	mov	r0, r4
    1a9c:	2101      	movs	r1, #1
    1a9e:	4632      	mov	r2, r6
    1aa0:	f7ff fdef 	bl	1682 <UART_IntConfig>
    	// Reset Tx Interrupt state
    	TxIntStat = RESET;
    1aa4:	702e      	strb	r6, [r5, #0]
    1aa6:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
      	// Set Tx Interrupt state
		TxIntStat = SET;
    1aa8:	2101      	movs	r1, #1
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    1aaa:	4620      	mov	r0, r4
    1aac:	460a      	mov	r2, r1
    	TxIntStat = RESET;
    }
    else
    {
      	// Set Tx Interrupt state
		TxIntStat = SET;
    1aae:	7029      	strb	r1, [r5, #0]
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    }
}
    1ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }
    else
    {
      	// Set Tx Interrupt state
		TxIntStat = SET;
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    1ab4:	f7ff bde5 	b.w	1682 <UART_IntConfig>
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend)
			{
				UART_SendByte(UARTx, (*pChar++));
    1ab8:	4b04      	ldr	r3, [pc, #16]	; (1acc <UART_IntTransmit+0x80>)
    1aba:	189a      	adds	r2, r3, r2
    1abc:	7c10      	ldrb	r0, [r2, #16]
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
	}
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    1abe:	7020      	strb	r0, [r4, #0]
		}

    	if(bSent)
    	{
    		/* Update transmit ring FIFO tail pointer */
    		__BUF_INCR(rb.tx_tail);
    1ac0:	685d      	ldr	r5, [r3, #4]
    1ac2:	1c6e      	adds	r6, r5, #1
    1ac4:	b2f1      	uxtb	r1, r6
    1ac6:	6059      	str	r1, [r3, #4]
    1ac8:	e7cb      	b.n	1a62 <UART_IntTransmit+0x16>
    1aca:	bf00      	nop
    1acc:	1000007c 	.word	0x1000007c
    1ad0:	1000034c 	.word	0x1000034c

00001ad4 <UART2_IRQHandler>:
 * @brief	UART2 interrupt handler sub-routine
 * @param	None
 * @return	None
 **********************************************************************/
void UART2_IRQHandler(void)
{
    1ad4:	b510      	push	{r4, lr}
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    1ad6:	4b0d      	ldr	r3, [pc, #52]	; (1b0c <UART2_IRQHandler+0x38>)
    1ad8:	689c      	ldr	r4, [r3, #8]
	// Call Standard UART 2 interrupt handler
	uint32_t intsrc, tmp, tmp1;

	/* Determine the interrupt source */
	intsrc = UART_GetIntId(LPC_UART2);
	tmp = intsrc & UART_IIR_INTID_MASK;
    1ada:	f004 040e 	and.w	r4, r4, #14

	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS)
    1ade:	2c06      	cmp	r4, #6
    1ae0:	d104      	bne.n	1aec <UART2_IRQHandler+0x18>
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    1ae2:	7d18      	ldrb	r0, [r3, #20]
		// Check line status
		tmp1 = UART_GetLineStatus(LPC_UART2);
		// Mask out the Receive Ready and Transmit Holding empty status
		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_BI | UART_LSR_RXFE);
		// If any error exist
		if (tmp1)
    1ae4:	f010 0f9e 	tst.w	r0, #158	; 0x9e
    1ae8:	d00e      	beq.n	1b08 <UART2_IRQHandler+0x34>
    1aea:	e7fe      	b.n	1aea <UART2_IRQHandler+0x16>
			}
		}
	}

	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI))
    1aec:	2c04      	cmp	r4, #4
    1aee:	d001      	beq.n	1af4 <UART2_IRQHandler+0x20>
    1af0:	2c0c      	cmp	r4, #12
    1af2:	d102      	bne.n	1afa <UART2_IRQHandler+0x26>
	{
		UART_IntReceive(LPC_UART2);
    1af4:	4805      	ldr	r0, [pc, #20]	; (1b0c <UART2_IRQHandler+0x38>)
    1af6:	f7ff ff8d 	bl	1a14 <UART_IntReceive>
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
    1afa:	2c02      	cmp	r4, #2
    1afc:	d104      	bne.n	1b08 <UART2_IRQHandler+0x34>
	{
		UART_IntTransmit(LPC_UART2);
    1afe:	4803      	ldr	r0, [pc, #12]	; (1b0c <UART2_IRQHandler+0x38>)
	}
}
    1b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
	{
		UART_IntTransmit(LPC_UART2);
    1b04:	f7ff bfa2 	b.w	1a4c <UART_IntTransmit>
    1b08:	bd10      	pop	{r4, pc}
    1b0a:	bf00      	nop
    1b0c:	40098000 	.word	0x40098000

00001b10 <UART0_IRQHandler>:
 * @brief	UART0 interrupt handler sub-routine
 * @param	None
 * @return	None
 **********************************************************************/
void UART0_IRQHandler(void)
{
    1b10:	b510      	push	{r4, lr}
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    1b12:	4b0d      	ldr	r3, [pc, #52]	; (1b48 <UART0_IRQHandler+0x38>)
    1b14:	689c      	ldr	r4, [r3, #8]
	// Call Standard UART 0 interrupt handler
	uint32_t intsrc, tmp, tmp1;

	// Determine the interrupt source
	intsrc = UART_GetIntId(LPC_UART0);
	tmp = intsrc & UART_IIR_INTID_MASK;
    1b16:	f004 040e 	and.w	r4, r4, #14

	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS)
    1b1a:	2c06      	cmp	r4, #6
    1b1c:	d104      	bne.n	1b28 <UART0_IRQHandler+0x18>
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    1b1e:	7d18      	ldrb	r0, [r3, #20]
		// Check line status
		tmp1 = UART_GetLineStatus(LPC_UART0);
		// Mask out the Receive Ready and Transmit Holding empty status
		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_BI | UART_LSR_RXFE);
		// If any error exist
		if (tmp1)
    1b20:	f010 0f9e 	tst.w	r0, #158	; 0x9e
    1b24:	d00e      	beq.n	1b44 <UART0_IRQHandler+0x34>
    1b26:	e7fe      	b.n	1b26 <UART0_IRQHandler+0x16>
			}
		}
	}

	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI))
    1b28:	2c04      	cmp	r4, #4
    1b2a:	d001      	beq.n	1b30 <UART0_IRQHandler+0x20>
    1b2c:	2c0c      	cmp	r4, #12
    1b2e:	d102      	bne.n	1b36 <UART0_IRQHandler+0x26>
	{
		UART_IntReceive(LPC_UART0);
    1b30:	4805      	ldr	r0, [pc, #20]	; (1b48 <UART0_IRQHandler+0x38>)
    1b32:	f7ff ff6f 	bl	1a14 <UART_IntReceive>
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
    1b36:	2c02      	cmp	r4, #2
    1b38:	d104      	bne.n	1b44 <UART0_IRQHandler+0x34>
	{
		UART_IntTransmit(LPC_UART0);
    1b3a:	4803      	ldr	r0, [pc, #12]	; (1b48 <UART0_IRQHandler+0x38>)
	}
}
    1b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
	{
		UART_IntTransmit(LPC_UART0);
    1b40:	f7ff bf84 	b.w	1a4c <UART_IntTransmit>
    1b44:	bd10      	pop	{r4, pc}
    1b46:	bf00      	nop
    1b48:	4000c000 	.word	0x4000c000

00001b4c <UART_Send>:
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b4e:	460e      	mov	r6, r1
    1b50:	4617      	mov	r7, r2
	uint32_t bytes = 0;

	/* Temporarily lock out UART transmit interrupts during this
	   read so the UART transmit interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1b52:	2101      	movs	r1, #1
    1b54:	2200      	movs	r2, #0
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1b56:	4605      	mov	r5, r0
	uint32_t bytes = 0;

	/* Temporarily lock out UART transmit interrupts during this
	   read so the UART transmit interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1b58:	f7ff fd93 	bl	1682 <UART_IntConfig>
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
	uint8_t *data = (uint8_t *) txbuf;
	uint32_t bytes = 0;
    1b5c:	2400      	movs	r4, #0
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);

	/* Loop until transmit run buffer is full or until n_bytes
	   expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
    1b5e:	42bc      	cmp	r4, r7
    1b60:	d106      	bne.n	1b70 <UART_Send+0x24>
	 * Check if current Tx interrupt enable is reset,
	 * that means the Tx interrupt must be re-enabled
	 * due to call UART_IntTransmit() function to trigger
	 * this interrupt type
	 */
	if (TxIntStat == RESET)
    1b62:	4b10      	ldr	r3, [pc, #64]	; (1ba4 <UART_Send+0x58>)
    1b64:	7819      	ldrb	r1, [r3, #0]
    1b66:	b9a9      	cbnz	r1, 1b94 <UART_Send+0x48>
	{
		UART_IntTransmit(UARTx);
    1b68:	4628      	mov	r0, r5
    1b6a:	f7ff ff6f 	bl	1a4c <UART_IntTransmit>
    1b6e:	e016      	b.n	1b9e <UART_Send+0x52>
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);

	/* Loop until transmit run buffer is full or until n_bytes
	   expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
    1b70:	4b0d      	ldr	r3, [pc, #52]	; (1ba8 <UART_Send+0x5c>)
    1b72:	6859      	ldr	r1, [r3, #4]
    1b74:	681a      	ldr	r2, [r3, #0]
    1b76:	1c50      	adds	r0, r2, #1
    1b78:	4048      	eors	r0, r1
    1b7a:	f010 0fff 	tst.w	r0, #255	; 0xff
    1b7e:	d0f0      	beq.n	1b62 <UART_Send+0x16>
	{
		/* Write data from buffer into ring buffer */
		rb.tx[rb.tx_head] = *data;
    1b80:	681a      	ldr	r2, [r3, #0]
    1b82:	5d30      	ldrb	r0, [r6, r4]
    1b84:	1899      	adds	r1, r3, r2
    1b86:	7408      	strb	r0, [r1, #16]
		data++;

		/* Increment head pointer */
		__BUF_INCR(rb.tx_head);
    1b88:	681a      	ldr	r2, [r3, #0]

		/* Increment data count and decrement buffer size count */
		bytes++;
    1b8a:	3401      	adds	r4, #1
		/* Write data from buffer into ring buffer */
		rb.tx[rb.tx_head] = *data;
		data++;

		/* Increment head pointer */
		__BUF_INCR(rb.tx_head);
    1b8c:	1c50      	adds	r0, r2, #1
    1b8e:	b2c1      	uxtb	r1, r0
    1b90:	6019      	str	r1, [r3, #0]
    1b92:	e7e4      	b.n	1b5e <UART_Send+0x12>
	/**
	 * Otherwise, re-enables Tx Interrupt
	 */
	else
	{
		UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    1b94:	2101      	movs	r1, #1
    1b96:	4628      	mov	r0, r5
    1b98:	460a      	mov	r2, r1
    1b9a:	f7ff fd72 	bl	1682 <UART_IntConfig>
	}

	return bytes;
}
    1b9e:	4620      	mov	r0, r4
    1ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ba2:	bf00      	nop
    1ba4:	1000034c 	.word	0x1000034c
    1ba8:	1000007c 	.word	0x1000007c

00001bac <printf>:
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
    1bac:	b40e      	push	{r1, r2, r3}
    1bae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uchar hex[]= "0123456789ABCDEF";
    1bb2:	4b86      	ldr	r3, [pc, #536]	; (1dcc <printf+0x220>)
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
    1bb4:	b09c      	sub	sp, #112	; 0x70
    1bb6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    1bb8:	4605      	mov	r5, r0
	uchar hex[]= "0123456789ABCDEF";
    1bba:	aa03      	add	r2, sp, #12
    1bbc:	f103 0710 	add.w	r7, r3, #16
    1bc0:	6818      	ldr	r0, [r3, #0]
    1bc2:	6859      	ldr	r1, [r3, #4]
    1bc4:	4616      	mov	r6, r2
    1bc6:	c603      	stmia	r6!, {r0, r1}
    1bc8:	3308      	adds	r3, #8
    1bca:	42bb      	cmp	r3, r7
    1bcc:	4632      	mov	r2, r6
    1bce:	d1f7      	bne.n	1bc0 <printf+0x14>
    1bd0:	7818      	ldrb	r0, [r3, #0]
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    1bd2:	2100      	movs	r1, #0
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
    1bd4:	7030      	strb	r0, [r6, #0]
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    1bd6:	2228      	movs	r2, #40	; 0x28
    1bd8:	a808      	add	r0, sp, #32
    1bda:	f002 f9c5 	bl	3f68 <memset>
    1bde:	210a      	movs	r1, #10
    1be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1be4:	9109      	str	r1, [sp, #36]	; 0x24
    1be6:	2364      	movs	r3, #100	; 0x64
    1be8:	920b      	str	r2, [sp, #44]	; 0x2c
    1bea:	4979      	ldr	r1, [pc, #484]	; (1dd0 <printf+0x224>)
    1bec:	4a79      	ldr	r2, [pc, #484]	; (1dd4 <printf+0x228>)
    1bee:	930a      	str	r3, [sp, #40]	; 0x28
    1bf0:	f242 7010 	movw	r0, #10000	; 0x2710
    1bf4:	4b78      	ldr	r3, [pc, #480]	; (1dd8 <printf+0x22c>)
    1bf6:	2601      	movs	r6, #1
    1bf8:	900c      	str	r0, [sp, #48]	; 0x30
    1bfa:	910d      	str	r1, [sp, #52]	; 0x34
    1bfc:	920f      	str	r2, [sp, #60]	; 0x3c
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    1bfe:	2100      	movs	r1, #0
    1c00:	2228      	movs	r2, #40	; 0x28
    1c02:	a812      	add	r0, sp, #72	; 0x48
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    1c04:	930e      	str	r3, [sp, #56]	; 0x38
    1c06:	9608      	str	r6, [sp, #32]
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    1c08:	f002 f9ae 	bl	3f68 <memset>
    1c0c:	2010      	movs	r0, #16
    1c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
    1c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1c16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1c1a:	9013      	str	r0, [sp, #76]	; 0x4c
    1c1c:	9114      	str	r1, [sp, #80]	; 0x50
    1c1e:	9315      	str	r3, [sp, #84]	; 0x54
    1c20:	9216      	str	r2, [sp, #88]	; 0x58
    1c22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1c26:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    1c2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	schar *ptr;
#ifdef RTC_MODE
	RTC_TIME_Type FullTime;
#endif
	va_list ap;
	va_start(ap, format);
    1c2e:	aa24      	add	r2, sp, #144	; 0x90
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    1c30:	9612      	str	r6, [sp, #72]	; 0x48
    1c32:	9017      	str	r0, [sp, #92]	; 0x5c
    1c34:	9118      	str	r1, [sp, #96]	; 0x60
    1c36:	9319      	str	r3, [sp, #100]	; 0x64
	schar *ptr;
#ifdef RTC_MODE
	RTC_TIME_Type FullTime;
#endif
	va_list ap;
	va_start(ap, format);
    1c38:	9202      	str	r2, [sp, #8]

	for(;;)
	{
		while((format_flag = *format++) != '%')      /* until full format string read */
    1c3a:	7820      	ldrb	r0, [r4, #0]
    1c3c:	2825      	cmp	r0, #37	; 0x25
    1c3e:	f88d 0002 	strb.w	r0, [sp, #2]
    1c42:	d00c      	beq.n	1c5e <printf+0xb2>
		{
			if(!format_flag)
    1c44:	2800      	cmp	r0, #0
    1c46:	f000 80bb 	beq.w	1dc0 <printf+0x214>
	va_list ap;
	va_start(ap, format);

	for(;;)
	{
		while((format_flag = *format++) != '%')      /* until full format string read */
    1c4a:	1c67      	adds	r7, r4, #1
		{
			if(!format_flag)
			{                        /* until '%' or '\0' */
				return (0);
			}
			UART_Send(UARTx,&format_flag,1,BLOCKING);
    1c4c:	4628      	mov	r0, r5
    1c4e:	f10d 0102 	add.w	r1, sp, #2
    1c52:	2201      	movs	r2, #1
    1c54:	2302      	movs	r3, #2
    1c56:	f7ff ff79 	bl	1b4c <UART_Send>
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
    1c5a:	463c      	mov	r4, r7
    1c5c:	e7ed      	b.n	1c3a <printf+0x8e>
				return (0);
			}
			UART_Send(UARTx,&format_flag,1,BLOCKING);
		}

		switch(format_flag = *format++)
    1c5e:	7860      	ldrb	r0, [r4, #1]
    1c60:	1ca7      	adds	r7, r4, #2
    1c62:	b241      	sxtb	r1, r0
    1c64:	2964      	cmp	r1, #100	; 0x64
    1c66:	f88d 0002 	strb.w	r0, [sp, #2]
    1c6a:	d054      	beq.n	1d16 <printf+0x16a>
    1c6c:	dc0c      	bgt.n	1c88 <printf+0xdc>
    1c6e:	2962      	cmp	r1, #98	; 0x62
    1c70:	d015      	beq.n	1c9e <printf+0xf2>
    1c72:	2963      	cmp	r1, #99	; 0x63
    1c74:	d1ea      	bne.n	1c4c <printf+0xa0>
		{
			case 'c':
				format_flag = va_arg(ap, int);
    1c76:	9c02      	ldr	r4, [sp, #8]
    1c78:	a91c      	add	r1, sp, #112	; 0x70
    1c7a:	6822      	ldr	r2, [r4, #0]
    1c7c:	1d23      	adds	r3, r4, #4
    1c7e:	9302      	str	r3, [sp, #8]
    1c80:	f801 2d6e 	strb.w	r2, [r1, #-110]!
				UART_Send(UARTx,&format_flag,1,BLOCKING);
    1c84:	4628      	mov	r0, r5
    1c86:	e7e4      	b.n	1c52 <printf+0xa6>
				return (0);
			}
			UART_Send(UARTx,&format_flag,1,BLOCKING);
		}

		switch(format_flag = *format++)
    1c88:	2975      	cmp	r1, #117	; 0x75
    1c8a:	d02c      	beq.n	1ce6 <printf+0x13a>
    1c8c:	2978      	cmp	r1, #120	; 0x78
    1c8e:	d064      	beq.n	1d5a <printf+0x1ae>
    1c90:	2973      	cmp	r1, #115	; 0x73
    1c92:	d1db      	bne.n	1c4c <printf+0xa0>
				UART_Send(UARTx,&(hex[(uint16)format_flag & 0x0F]),1,BLOCKING);

				continue;

			case 's':
				ptr = va_arg(ap, schar *);
    1c94:	9902      	ldr	r1, [sp, #8]
    1c96:	1d0a      	adds	r2, r1, #4
    1c98:	9202      	str	r2, [sp, #8]
    1c9a:	680c      	ldr	r4, [r1, #0]
				while(*ptr)
    1c9c:	e017      	b.n	1cce <printf+0x122>
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1c9e:	9802      	ldr	r0, [sp, #8]
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1ca0:	aa03      	add	r2, sp, #12
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1ca2:	7804      	ldrb	r4, [r0, #0]
    1ca4:	1d01      	adds	r1, r0, #4
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1ca6:	b263      	sxtb	r3, r4
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1ca8:	9102      	str	r1, [sp, #8]
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1caa:	f3c3 110b 	ubfx	r1, r3, #4, #12
    1cae:	1851      	adds	r1, r2, r1
    1cb0:	2302      	movs	r3, #2
    1cb2:	4628      	mov	r0, r5
    1cb4:	2201      	movs	r2, #1
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1cb6:	f88d 4002 	strb.w	r4, [sp, #2]
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1cba:	f7ff ff47 	bl	1b4c <UART_Send>
				UART_Send(UARTx,&(hex[(uint16)format_flag & 0x0F]),1,BLOCKING);
    1cbe:	f89d 0002 	ldrb.w	r0, [sp, #2]
    1cc2:	ab03      	add	r3, sp, #12
    1cc4:	f000 040f 	and.w	r4, r0, #15
    1cc8:	1919      	adds	r1, r3, r4
    1cca:	4628      	mov	r0, r5
    1ccc:	e7c1      	b.n	1c52 <printf+0xa6>
    1cce:	4621      	mov	r1, r4

				continue;

			case 's':
				ptr = va_arg(ap, schar *);
				while(*ptr)
    1cd0:	f991 0000 	ldrsb.w	r0, [r1]
    1cd4:	3401      	adds	r4, #1
    1cd6:	2800      	cmp	r0, #0
    1cd8:	d0bf      	beq.n	1c5a <printf+0xae>
				{
					UART_Send(UARTx,&(*ptr++),1,BLOCKING);
    1cda:	4628      	mov	r0, r5
    1cdc:	2201      	movs	r2, #1
    1cde:	2302      	movs	r3, #2
    1ce0:	f7ff ff34 	bl	1b4c <UART_Send>
    1ce4:	e7f3      	b.n	1cce <printf+0x122>
				continue;
#endif
			case 'u':
				base = 16;
				div_val = 0x100000;
				u_val = va_arg(ap, uint32_t);
    1ce6:	9b02      	ldr	r3, [sp, #8]
    1ce8:	2606      	movs	r6, #6
    1cea:	1d19      	adds	r1, r3, #4
    1cec:	f8d3 8000 	ldr.w	r8, [r3]
    1cf0:	9102      	str	r1, [sp, #8]

				continue;
#endif
			case 'u':
				base = 16;
				div_val = 0x100000;
    1cf2:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
				u_val = va_arg(ap, uint32_t);
				do
				{
					UART_Send(UARTx,&(hex[u_val/div_val]),1,BLOCKING);
    1cf6:	fbb8 f9f4 	udiv	r9, r8, r4
    1cfa:	aa03      	add	r2, sp, #12
    1cfc:	eb02 0109 	add.w	r1, r2, r9
    1d00:	2302      	movs	r3, #2
    1d02:	2201      	movs	r2, #1
    1d04:	4628      	mov	r0, r5
    1d06:	f7ff ff21 	bl	1b4c <UART_Send>
					u_val %= div_val;
    1d0a:	fb04 8819 	mls	r8, r4, r9, r8
					div_val /= base;
    1d0e:	0924      	lsrs	r4, r4, #4
				}while(div_val);
    1d10:	3e01      	subs	r6, #1
    1d12:	d1f0      	bne.n	1cf6 <printf+0x14a>
    1d14:	e7a1      	b.n	1c5a <printf+0xae>
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    1d16:	78e0      	ldrb	r0, [r4, #3]

				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
    1d18:	78a7      	ldrb	r7, [r4, #2]
				format_flag = ( *format++ ) - '1';
    1d1a:	3831      	subs	r0, #49	; 0x31
    1d1c:	b2c6      	uxtb	r6, r0
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);
    1d1e:	9802      	ldr	r0, [sp, #8]

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1d20:	b273      	sxtb	r3, r6
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    1d22:	f88d 6002 	strb.w	r6, [sp, #2]
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);
    1d26:	1d06      	adds	r6, r0, #4
    1d28:	9602      	str	r6, [sp, #8]
    1d2a:	6806      	ldr	r6, [r0, #0]

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1d2c:	a91c      	add	r1, sp, #112	; 0x70

				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
    1d2e:	f88d 7003 	strb.w	r7, [sp, #3]
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1d32:	eb01 0283 	add.w	r2, r1, r3, lsl #2
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    1d36:	1d27      	adds	r7, r4, #4
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
    1d38:	2e00      	cmp	r6, #0

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1d3a:	f852 4c50 	ldr.w	r4, [r2, #-80]
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
    1d3e:	da09      	bge.n	1d54 <printf+0x1a8>
				{
					u_val = - u_val;    /* applied to unsigned type, result still unsigned */
					temp = '-';
    1d40:	232d      	movs	r3, #45	; 0x2d
    1d42:	a91c      	add	r1, sp, #112	; 0x70
    1d44:	f841 3d6c 	str.w	r3, [r1, #-108]!
				    UART_Send(UARTx,&temp,1,BLOCKING);
    1d48:	4628      	mov	r0, r5
    1d4a:	2201      	movs	r2, #1
    1d4c:	2302      	movs	r3, #2
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
				{
					u_val = - u_val;    /* applied to unsigned type, result still unsigned */
    1d4e:	4276      	negs	r6, r6
					temp = '-';
				    UART_Send(UARTx,&temp,1,BLOCKING);
    1d50:	f7ff fefc 	bl	1b4c <UART_Send>
				}while(div_val);

				continue;

			case 'd':
				base = 10;
    1d54:	f04f 080a 	mov.w	r8, #10
    1d58:	e020      	b.n	1d9c <printf+0x1f0>
				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
    1d5a:	78e6      	ldrb	r6, [r4, #3]

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
    1d5c:	78a7      	ldrb	r7, [r4, #2]
				format_flag = (*format++) - '1';
    1d5e:	3e31      	subs	r6, #49	; 0x31
    1d60:	b2f3      	uxtb	r3, r6
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);
    1d62:	9802      	ldr	r0, [sp, #8]

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
    1d64:	b259      	sxtb	r1, r3
    1d66:	aa1c      	add	r2, sp, #112	; 0x70
				u_val = va_arg(ap, int);
    1d68:	1d06      	adds	r6, r0, #4

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
    1d6a:	f88d 7003 	strb.w	r7, [sp, #3]
				format_flag = (*format++) - '1';
    1d6e:	1d27      	adds	r7, r4, #4
				div_val = width_hex[format_flag];
    1d70:	eb02 0481 	add.w	r4, r2, r1, lsl #2
				u_val = va_arg(ap, int);
    1d74:	9602      	str	r6, [sp, #8]
				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
    1d76:	f88d 3002 	strb.w	r3, [sp, #2]
				div_val = width_hex[format_flag];
    1d7a:	f854 4c28 	ldr.w	r4, [r4, #-40]
				u_val = va_arg(ap, int);
    1d7e:	6806      	ldr	r6, [r0, #0]
				}

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
    1d80:	f04f 0810 	mov.w	r8, #16
    1d84:	e00a      	b.n	1d9c <printf+0x1f0>
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
    1d86:	42b4      	cmp	r4, r6
    1d88:	d90a      	bls.n	1da0 <printf+0x1f4>
				{
					div_val /= base;
					UART_Send(UARTx,&fill_char,1,BLOCKING);
    1d8a:	4628      	mov	r0, r5
    1d8c:	f10d 0103 	add.w	r1, sp, #3
    1d90:	2201      	movs	r2, #1
    1d92:	2302      	movs	r3, #2
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
				{
					div_val /= base;
    1d94:	fbb4 f4f8 	udiv	r4, r4, r8
					UART_Send(UARTx,&fill_char,1,BLOCKING);
    1d98:	f7ff fed8 	bl	1b4c <UART_Send>
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
    1d9c:	2c01      	cmp	r4, #1
    1d9e:	d8f2      	bhi.n	1d86 <printf+0x1da>
					UART_Send(UARTx,&fill_char,1,BLOCKING);
				}

				do
				{
					UART_Send(UARTx,&(hex[u_val/div_val]),1,BLOCKING);
    1da0:	fbb6 f9f4 	udiv	r9, r6, r4
    1da4:	a903      	add	r1, sp, #12
    1da6:	4628      	mov	r0, r5
    1da8:	4449      	add	r1, r9
    1daa:	2201      	movs	r2, #1
    1dac:	2302      	movs	r3, #2
    1dae:	f7ff fecd 	bl	1b4c <UART_Send>
					u_val %= div_val;
    1db2:	fb04 6619 	mls	r6, r4, r9, r6
					div_val /= base;
    1db6:	fbb4 f4f8 	udiv	r4, r4, r8
				}while(div_val);
    1dba:	2c00      	cmp	r4, #0
    1dbc:	d1f0      	bne.n	1da0 <printf+0x1f4>
    1dbe:	e74c      	b.n	1c5a <printf+0xae>
		}/* end of switch statement */
	}
	return(0);
}
    1dc0:	b01c      	add	sp, #112	; 0x70
    1dc2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1dc6:	b003      	add	sp, #12
    1dc8:	4770      	bx	lr
    1dca:	bf00      	nop
    1dcc:	000040dd 	.word	0x000040dd
    1dd0:	000186a0 	.word	0x000186a0
    1dd4:	00989680 	.word	0x00989680
    1dd8:	000f4240 	.word	0x000f4240

00001ddc <UART_RS485SendSlvAddr>:
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    1ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    1dde:	7b05      	ldrb	r5, [r0, #12]
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    1de0:	ab02      	add	r3, sp, #8
    1de2:	f803 1d01 	strb.w	r1, [r3, #-1]!
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
		tmp &= ~(UART_LCR_PARITY_EVEN);
    1de6:	f005 02ef 	and.w	r2, r5, #239	; 0xef
		UARTx->LCR = tmp;
    1dea:	7302      	strb	r2, [r0, #12]
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    1dec:	4619      	mov	r1, r3
    1dee:	2201      	movs	r2, #1
    1df0:	2302      	movs	r3, #2
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    1df2:	4604      	mov	r4, r0

	if (ParityStick){
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
		tmp &= ~(UART_LCR_PARITY_EVEN);
		UARTx->LCR = tmp;
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    1df4:	f7ff feaa 	bl	1b4c <UART_Send>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    1df8:	7d20      	ldrb	r0, [r4, #20]
    1dfa:	f000 0140 	and.w	r1, r0, #64	; 0x40
    1dfe:	b2cb      	uxtb	r3, r1
    1e00:	2b00      	cmp	r3, #0
    1e02:	d0f9      	beq.n	1df8 <UART_RS485SendSlvAddr+0x1c>
		UARTx->LCR = save;
    1e04:	7325      	strb	r5, [r4, #12]
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
	UART_RS485Send(UARTx, &SlvAddr, 1, 1);
}
    1e06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00001e08 <UART_RS485Send>:
 * @param[in]	ParityStick	Parity Stick value, should be 0 or 1.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485Send(LPC_UART1_TypeDef *UARTx, uint8_t *pDatFrm, \
					uint32_t size, uint8_t ParityStick)
{
    1e08:	b538      	push	{r3, r4, r5, lr}
    1e0a:	4604      	mov	r4, r0
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
    1e0c:	b173      	cbz	r3, 1e2c <UART_RS485Send+0x24>
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    1e0e:	7b05      	ldrb	r5, [r0, #12]
		tmp &= ~(UART_LCR_PARITY_EVEN);
    1e10:	f005 03ef 	and.w	r3, r5, #239	; 0xef
		UARTx->LCR = tmp;
    1e14:	7303      	strb	r3, [r0, #12]
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    1e16:	2302      	movs	r3, #2
    1e18:	f7ff fe98 	bl	1b4c <UART_Send>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    1e1c:	7d21      	ldrb	r1, [r4, #20]
    1e1e:	f001 0240 	and.w	r2, r1, #64	; 0x40
    1e22:	b2d3      	uxtb	r3, r2
    1e24:	2b00      	cmp	r3, #0
    1e26:	d0f9      	beq.n	1e1c <UART_RS485Send+0x14>
		UARTx->LCR = save;
    1e28:	7325      	strb	r5, [r4, #12]
    1e2a:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    1e2c:	2302      	movs	r3, #2
    1e2e:	f7ff fe8d 	bl	1b4c <UART_Send>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    1e32:	7d23      	ldrb	r3, [r4, #20]
    1e34:	f003 0140 	and.w	r1, r3, #64	; 0x40
    1e38:	b2ca      	uxtb	r2, r1
    1e3a:	2a00      	cmp	r2, #0
    1e3c:	d0f9      	beq.n	1e32 <UART_RS485Send+0x2a>
	}
	return cnt;
}
    1e3e:	bd38      	pop	{r3, r4, r5, pc}

00001e40 <UART_RS485SendData>:
 * @param[in]	size Size of data frame to be sent.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485SendData(LPC_UART1_TypeDef *UARTx, uint8_t *pData, uint32_t size)
{
	return (UART_RS485Send(UARTx, pData, size, 0));
    1e40:	2300      	movs	r3, #0
    1e42:	f7ff bfe1 	b.w	1e08 <UART_RS485Send>

00001e46 <UART_Receive>:
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e48:	460e      	mov	r6, r1
	uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);
    1e4a:	2100      	movs	r1, #0
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1e4c:	4617      	mov	r7, r2
	uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);
    1e4e:	460a      	mov	r2, r1
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1e50:	4605      	mov	r5, r0
	uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);
    1e52:	f7ff fc16 	bl	1682 <UART_IntConfig>
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
	uint8_t *data = (uint8_t *) rxbuf;
	uint32_t bytes = 0;
    1e56:	2400      	movs	r4, #0
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);

	/* Loop until receive buffer ring is empty or
		until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
    1e58:	42bc      	cmp	r4, r7
    1e5a:	d012      	beq.n	1e82 <UART_Receive+0x3c>
    1e5c:	4b0c      	ldr	r3, [pc, #48]	; (1e90 <UART_Receive+0x4a>)
    1e5e:	689a      	ldr	r2, [r3, #8]
    1e60:	68d9      	ldr	r1, [r3, #12]
    1e62:	ea81 0002 	eor.w	r0, r1, r2
    1e66:	f010 0fff 	tst.w	r0, #255	; 0xff
    1e6a:	d00a      	beq.n	1e82 <UART_Receive+0x3c>
	{
		/* Read data from ring buffer into user buffer */
		*data = rb.rx[rb.rx_tail];
    1e6c:	68da      	ldr	r2, [r3, #12]
    1e6e:	1899      	adds	r1, r3, r2
    1e70:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    1e74:	5530      	strb	r0, [r6, r4]
		data++;

		/* Update tail pointer */
		__BUF_INCR(rb.rx_tail);
    1e76:	68da      	ldr	r2, [r3, #12]

		/* Increment data count and decrement buffer size count */
		bytes++;
    1e78:	3401      	adds	r4, #1
		/* Read data from ring buffer into user buffer */
		*data = rb.rx[rb.rx_tail];
		data++;

		/* Update tail pointer */
		__BUF_INCR(rb.rx_tail);
    1e7a:	1c51      	adds	r1, r2, #1
    1e7c:	b2c8      	uxtb	r0, r1
    1e7e:	60d8      	str	r0, [r3, #12]
    1e80:	e7ea      	b.n	1e58 <UART_Receive+0x12>
		bytes++;
		buflen--;
	}

	/* Re-enable UART interrupts */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    1e82:	4628      	mov	r0, r5
    1e84:	2100      	movs	r1, #0
    1e86:	2201      	movs	r2, #1
    1e88:	f7ff fbfb 	bl	1682 <UART_IntConfig>

    return bytes;
}
    1e8c:	4620      	mov	r0, r4
    1e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e90:	1000007c 	.word	0x1000007c

00001e94 <getche>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 getche(LPC_UART_TypeDef *UARTx)
{
    1e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1e96:	4605      	mov	r5, r0
	uint8_t key[1];
	uint32_t idx, len;
	while(1)
	{
	    if(UARTx == LPC_UART0)
    1e98:	4b1a      	ldr	r3, [pc, #104]	; (1f04 <getche+0x70>)
    1e9a:	429d      	cmp	r5, r3
    1e9c:	d121      	bne.n	1ee2 <getche+0x4e>
	    {
		    len = UART_Receive(UARTx, key, 1, BLOCKING);
    1e9e:	4628      	mov	r0, r5
    1ea0:	a901      	add	r1, sp, #4
    1ea2:	2201      	movs	r2, #1
    1ea4:	2302      	movs	r3, #2
    1ea6:	f7ff ffce 	bl	1e46 <UART_Receive>
		    /* Got some data */
		    idx = 0;
    1eaa:	2400      	movs	r4, #0
	uint32_t idx, len;
	while(1)
	{
	    if(UARTx == LPC_UART0)
	    {
		    len = UART_Receive(UARTx, key, 1, BLOCKING);
    1eac:	4606      	mov	r6, r0
		    /* Got some data */
		    idx = 0;
		    while (idx < len)
    1eae:	42b4      	cmp	r4, r6
    1eb0:	d0f2      	beq.n	1e98 <getche+0x4>
		    {
		        if ( key[idx] == In_CR )
    1eb2:	a901      	add	r1, sp, #4
    1eb4:	5c63      	ldrb	r3, [r4, r1]
    1eb6:	2b0d      	cmp	r3, #13
    1eb8:	d021      	beq.n	1efe <getche+0x6a>
	            {
			        return(key[idx]);
	            }
	            else if ( key[idx] == In_DELETE || key[idx] == In_BACKSPACE )
    1eba:	2b7f      	cmp	r3, #127	; 0x7f
    1ebc:	d01f      	beq.n	1efe <getche+0x6a>
    1ebe:	2b08      	cmp	r3, #8
    1ec0:	d01d      	beq.n	1efe <getche+0x6a>
	            {
	    	        return(key[idx]);
	            }
	            else if ( key[idx] == In_ESC )
    1ec2:	2b1b      	cmp	r3, #27
    1ec4:	d103      	bne.n	1ece <getche+0x3a>
	            {
	    	        EscFlag = 1;
    1ec6:	4a10      	ldr	r2, [pc, #64]	; (1f08 <getche+0x74>)
    1ec8:	2001      	movs	r0, #1
    1eca:	8010      	strh	r0, [r2, #0]
    1ecc:	e017      	b.n	1efe <getche+0x6a>
	    	        return ( In_ESC );
	            }
	            else if ( key[idx] >= ' ' )
    1ece:	2b1f      	cmp	r3, #31
    1ed0:	d815      	bhi.n	1efe <getche+0x6a>
	            {
	    	        return (key[idx]);
	            }
	            else
	            {
	    	        UART_Send(UARTx,&key[idx],1,BLOCKING);
    1ed2:	1909      	adds	r1, r1, r4
    1ed4:	480b      	ldr	r0, [pc, #44]	; (1f04 <getche+0x70>)
    1ed6:	2201      	movs	r2, #1
    1ed8:	2302      	movs	r3, #2
    1eda:	f7ff fe37 	bl	1b4c <UART_Send>
	            }
		        idx++;
    1ede:	3401      	adds	r4, #1
    1ee0:	e7e5      	b.n	1eae <getche+0x1a>
		    }
	    }
	    else if(UARTx == LPC_UART2)
    1ee2:	480a      	ldr	r0, [pc, #40]	; (1f0c <getche+0x78>)
    1ee4:	4285      	cmp	r5, r0
    1ee6:	d1d7      	bne.n	1e98 <getche+0x4>
	    {
		    len = UART_Receive(UARTx, key, 1, BLOCKING);
    1ee8:	4628      	mov	r0, r5
    1eea:	a901      	add	r1, sp, #4
    1eec:	2201      	movs	r2, #1
    1eee:	2302      	movs	r3, #2
    1ef0:	f7ff ffa9 	bl	1e46 <UART_Receive>
		    /* Got some data */
		    idx = 0;
		    while (idx < len)
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d0cf      	beq.n	1e98 <getche+0x4>
		    {
		    	return(key[idx]);
    1ef8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1efc:	e000      	b.n	1f00 <getche+0x6c>
		    idx = 0;
		    while (idx < len)
		    {
		        if ( key[idx] == In_CR )
	            {
			        return(key[idx]);
    1efe:	4618      	mov	r0, r3
		    	return(key[idx]);
		    }
	    }
	}
    return(0);
}
    1f00:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    1f02:	bf00      	nop
    1f04:	4000c000 	.word	0x4000c000
    1f08:	10000078 	.word	0x10000078
    1f0c:	40098000 	.word	0x40098000

00001f10 <get_line>:
 * @param[out]	s[] Pointer to Received buffer
 * @param[in]   lim Length of Received buffer
 * @return 		return character count
 **********************************************************************/
uchar get_line(LPC_UART_TypeDef *UARTx, schar s[], uchar lim)
{
    1f10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	schar kb;                 /* input character */

	uchar pointer=0;          /* Pointer in buffer */
	uchar count=0;            /* character count */
    1f14:	2500      	movs	r5, #0
 * @param[out]	s[] Pointer to Received buffer
 * @param[in]   lim Length of Received buffer
 * @return 		return character count
 **********************************************************************/
uchar get_line(LPC_UART_TypeDef *UARTx, schar s[], uchar lim)
{
    1f16:	4606      	mov	r6, r0
    1f18:	4688      	mov	r8, r1
    1f1a:	4691      	mov	r9, r2
	schar kb;                 /* input character */

	uchar pointer=0;          /* Pointer in buffer */
    1f1c:	462c      	mov	r4, r5
	uchar count=0;            /* character count */
    uint8_t temp;

	while(1)
	{
		kb = getche(UARTx);
    1f1e:	4630      	mov	r0, r6
    1f20:	f7ff ffb8 	bl	1e94 <getche>
    1f24:	b2c2      	uxtb	r2, r0

		if (kb == In_ESC)                /* if ESCAPE pressed then exit */
    1f26:	b253      	sxtb	r3, r2
    1f28:	2b1b      	cmp	r3, #27
	uchar count=0;            /* character count */
    uint8_t temp;

	while(1)
	{
		kb = getche(UARTx);
    1f2a:	f88d 2006 	strb.w	r2, [sp, #6]

		if (kb == In_ESC)                /* if ESCAPE pressed then exit */
    1f2e:	d101      	bne.n	1f34 <get_line+0x24>
		{
			return (kb);
    1f30:	4615      	mov	r5, r2
    1f32:	e043      	b.n	1fbc <get_line+0xac>
		}

		else if (kb == In_CR)            /* CARRIAGE return ? */
    1f34:	2b0d      	cmp	r3, #13
    1f36:	d103      	bne.n	1f40 <get_line+0x30>
		{
			s[pointer] = '\0';             /* put null char on last position */
    1f38:	2000      	movs	r0, #0
    1f3a:	f808 0004 	strb.w	r0, [r8, r4]
    1f3e:	e03d      	b.n	1fbc <get_line+0xac>
			break;                         /* yes, exit from this loop */
		}

		else if(kb == In_DELETE || kb == In_BACKSPACE)
    1f40:	2b7f      	cmp	r3, #127	; 0x7f
    1f42:	d001      	beq.n	1f48 <get_line+0x38>
    1f44:	2b08      	cmp	r3, #8
    1f46:	d123      	bne.n	1f90 <get_line+0x80>
		{
			if(pointer==0)                 /* any characters entered */
    1f48:	2c00      	cmp	r4, #0
    1f4a:	d0e8      	beq.n	1f1e <get_line+0xe>
			{
				continue;                    /* no, so get another character */
			}

			temp = Out_BACKSPACE;
    1f4c:	f04f 0a08 	mov.w	sl, #8
    1f50:	eb0d 070a 	add.w	r7, sp, sl
    1f54:	f807 ad01 	strb.w	sl, [r7, #-1]!
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one position */
    1f58:	4639      	mov	r1, r7
    1f5a:	2201      	movs	r2, #1
    1f5c:	2302      	movs	r3, #2
    1f5e:	4630      	mov	r0, r6
    1f60:	f7ff fdf4 	bl	1b4c <UART_Send>
			temp = Out_SPACE;
    1f64:	2120      	movs	r1, #32
    1f66:	f88d 1007 	strb.w	r1, [sp, #7]
			UART_Send(UARTx,&temp,1,BLOCKING);   /* erase char */
    1f6a:	2201      	movs	r2, #1
    1f6c:	4639      	mov	r1, r7
    1f6e:	2302      	movs	r3, #2
    1f70:	4630      	mov	r0, r6
    1f72:	f7ff fdeb 	bl	1b4c <UART_Send>
			temp = Out_BACKSPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one more position */
    1f76:	2201      	movs	r2, #1
    1f78:	2302      	movs	r3, #2
    1f7a:	4630      	mov	r0, r6
    1f7c:	4639      	mov	r1, r7

			temp = Out_BACKSPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one position */
			temp = Out_SPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* erase char */
			temp = Out_BACKSPACE;
    1f7e:	f88d a007 	strb.w	sl, [sp, #7]
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one more position */
    1f82:	f7ff fde3 	bl	1b4c <UART_Send>

			pointer--;                     /* decrement pointer */
    1f86:	1e62      	subs	r2, r4, #1
			count--;                       /* decrement character count */
    1f88:	1e6b      	subs	r3, r5, #1
			temp = Out_SPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* erase char */
			temp = Out_BACKSPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one more position */

			pointer--;                     /* decrement pointer */
    1f8a:	b2d4      	uxtb	r4, r2
			count--;                       /* decrement character count */
    1f8c:	b2dd      	uxtb	r5, r3

			continue;
    1f8e:	e7c6      	b.n	1f1e <get_line+0xe>
		}

		else if(pointer < lim)
    1f90:	454c      	cmp	r4, r9
    1f92:	d209      	bcs.n	1fa8 <get_line+0x98>
		{
			s[pointer] = kb;               /* save character and increment pointer */
    1f94:	f808 2004 	strb.w	r2, [r8, r4]
			pointer++;
			count++;                       /* increment count */
    1f98:	3501      	adds	r5, #1
		}

		else if(pointer < lim)
		{
			s[pointer] = kb;               /* save character and increment pointer */
			pointer++;
    1f9a:	3401      	adds	r4, #1
    1f9c:	b2e4      	uxtb	r4, r4
			count++;                       /* increment count */
    1f9e:	b2ed      	uxtb	r5, r5
			UART_Send(UARTx,&kb,1,BLOCKING);       /* echo character */
    1fa0:	4630      	mov	r0, r6
    1fa2:	f10d 0106 	add.w	r1, sp, #6
    1fa6:	e004      	b.n	1fb2 <get_line+0xa2>

			continue;                      /* and get some more */
		}
		else
		{
			temp = In_BELL;
    1fa8:	2007      	movs	r0, #7
    1faa:	a902      	add	r1, sp, #8
    1fac:	f801 0d01 	strb.w	r0, [r1, #-1]!
			UART_Send(UARTx,&temp,1,BLOCKING);   /* ring the bell */
    1fb0:	4630      	mov	r0, r6
    1fb2:	2201      	movs	r2, #1
    1fb4:	2302      	movs	r3, #2
    1fb6:	f7ff fdc9 	bl	1b4c <UART_Send>
    1fba:	e7b0      	b.n	1f1e <get_line+0xe>
		}
	}
	return(count);
}
    1fbc:	4628      	mov	r0, r5
    1fbe:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

00001fc2 <reset_cursor>:
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void reset_cursor (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx,"\x1b[H");   /* escape sequence for vt220 ^[H sets cursor to Home */
    1fc2:	4901      	ldr	r1, [pc, #4]	; (1fc8 <reset_cursor+0x6>)
    1fc4:	f7ff bdf2 	b.w	1bac <printf>
    1fc8:	000040ee 	.word	0x000040ee

00001fcc <clear_screen>:
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void clear_screen (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx,"\x1b[2J");   /* escape sequence for vt220 ESC[2J clears screen */
    1fcc:	4901      	ldr	r1, [pc, #4]	; (1fd4 <clear_screen+0x8>)
    1fce:	f7ff bded 	b.w	1bac <printf>
    1fd2:	bf00      	nop
    1fd4:	000040f2 	.word	0x000040f2

00001fd8 <clr_scr_rst_cur>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void clr_scr_rst_cur (LPC_UART_TypeDef *UARTx)
{
    1fd8:	b510      	push	{r4, lr}
    1fda:	4604      	mov	r4, r0
	clear_screen(UARTx);
    1fdc:	f7ff fff6 	bl	1fcc <clear_screen>
	reset_cursor(UARTx);
    1fe0:	4620      	mov	r0, r4
}
    1fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @return 		None
 *********************************************************************/
void clr_scr_rst_cur (LPC_UART_TypeDef *UARTx)
{
	clear_screen(UARTx);
	reset_cursor(UARTx);
    1fe6:	f7ff bfec 	b.w	1fc2 <reset_cursor>

00001fea <Erase_Char>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char (LPC_UART_TypeDef *UARTx)
{
    1fea:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);
    1fec:	4c08      	ldr	r4, [pc, #32]	; (2010 <Erase_Char+0x26>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char (LPC_UART_TypeDef *UARTx)
{
    1fee:	4605      	mov	r5, r0
	printf(UARTx, "%c", Out_BACKSPACE);
    1ff0:	4621      	mov	r1, r4
    1ff2:	2208      	movs	r2, #8
    1ff4:	f7ff fdda 	bl	1bac <printf>
	printf(UARTx, "%c", Out_SPACE);
    1ff8:	4621      	mov	r1, r4
    1ffa:	2220      	movs	r2, #32
    1ffc:	4628      	mov	r0, r5
    1ffe:	f7ff fdd5 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);
    2002:	4628      	mov	r0, r5
    2004:	4621      	mov	r1, r4
    2006:	2208      	movs	r2, #8
}
    2008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 *********************************************************************/
void Erase_Char (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx, "%c", Out_BACKSPACE);
	printf(UARTx, "%c", Out_SPACE);
	printf(UARTx, "%c", Out_BACKSPACE);
    200c:	f7ff bdce 	b.w	1bac <printf>
    2010:	000040f7 	.word	0x000040f7

00002014 <Erase_Char_With_UnderScore>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char_With_UnderScore (LPC_UART_TypeDef *UARTx)
{
    2014:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2016:	4d08      	ldr	r5, [pc, #32]	; (2038 <Erase_Char_With_UnderScore+0x24>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char_With_UnderScore (LPC_UART_TypeDef *UARTx)
{
    2018:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    201a:	2208      	movs	r2, #8
    201c:	4629      	mov	r1, r5
    201e:	f7ff fdc5 	bl	1bac <printf>
	printf(UARTx, "_");                   /* and write '_' on the screen */
    2022:	4620      	mov	r0, r4
    2024:	4905      	ldr	r1, [pc, #20]	; (203c <Erase_Char_With_UnderScore+0x28>)
    2026:	f7ff fdc1 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    202a:	4620      	mov	r0, r4
    202c:	4629      	mov	r1, r5
    202e:	2208      	movs	r2, #8
}
    2030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 *********************************************************************/
void Erase_Char_With_UnderScore (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "_");                   /* and write '_' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2034:	f7ff bdba 	b.w	1bac <printf>
    2038:	000040f7 	.word	0x000040f7
    203c:	000040fa 	.word	0x000040fa

00002040 <Erase_BackLash>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_BackLash (LPC_UART_TypeDef *UARTx)
{
    2040:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2042:	4d0f      	ldr	r5, [pc, #60]	; (2080 <Erase_BackLash+0x40>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_BackLash (LPC_UART_TypeDef *UARTx)
{
    2044:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2046:	2208      	movs	r2, #8
    2048:	4629      	mov	r1, r5
    204a:	f7ff fdaf 	bl	1bac <printf>
	printf(UARTx, "/");                   /* and write '/' on the screen */
    204e:	4620      	mov	r0, r4
    2050:	490c      	ldr	r1, [pc, #48]	; (2084 <Erase_BackLash+0x44>)
    2052:	f7ff fdab 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2056:	4629      	mov	r1, r5
    2058:	2208      	movs	r2, #8
    205a:	4620      	mov	r0, r4
    205c:	f7ff fda6 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2060:	2208      	movs	r2, #8
    2062:	4629      	mov	r1, r5
    2064:	4620      	mov	r0, r4
    2066:	f7ff fda1 	bl	1bac <printf>
	printf(UARTx, "_");                   /* and write '_' on the screen */
    206a:	4620      	mov	r0, r4
    206c:	4906      	ldr	r1, [pc, #24]	; (2088 <Erase_BackLash+0x48>)
    206e:	f7ff fd9d 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2072:	4620      	mov	r0, r4
    2074:	4629      	mov	r1, r5
    2076:	2208      	movs	r2, #8
}
    2078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "/");                   /* and write '/' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "_");                   /* and write '_' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    207c:	f7ff bd96 	b.w	1bac <printf>
    2080:	000040f7 	.word	0x000040f7
    2084:	000040fc 	.word	0x000040fc
    2088:	000040fa 	.word	0x000040fa

0000208c <Erase_SemiColon>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_SemiColon (LPC_UART_TypeDef *UARTx)
{
    208c:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    208e:	4d0f      	ldr	r5, [pc, #60]	; (20cc <Erase_SemiColon+0x40>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_SemiColon (LPC_UART_TypeDef *UARTx)
{
    2090:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2092:	2208      	movs	r2, #8
    2094:	4629      	mov	r1, r5
    2096:	f7ff fd89 	bl	1bac <printf>
	printf(UARTx, ":");                   /* and write ':' on the screen */
    209a:	4620      	mov	r0, r4
    209c:	490c      	ldr	r1, [pc, #48]	; (20d0 <Erase_SemiColon+0x44>)
    209e:	f7ff fd85 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20a2:	4629      	mov	r1, r5
    20a4:	2208      	movs	r2, #8
    20a6:	4620      	mov	r0, r4
    20a8:	f7ff fd80 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20ac:	2208      	movs	r2, #8
    20ae:	4629      	mov	r1, r5
    20b0:	4620      	mov	r0, r4
    20b2:	f7ff fd7b 	bl	1bac <printf>
	printf(UARTx, "_");                   /* and write '_' on the screen */
    20b6:	4620      	mov	r0, r4
    20b8:	4906      	ldr	r1, [pc, #24]	; (20d4 <Erase_SemiColon+0x48>)
    20ba:	f7ff fd77 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20be:	4620      	mov	r0, r4
    20c0:	4629      	mov	r1, r5
    20c2:	2208      	movs	r2, #8
}
    20c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, ":");                   /* and write ':' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "_");                   /* and write '_' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20c8:	f7ff bd70 	b.w	1bac <printf>
    20cc:	000040f7 	.word	0x000040f7
    20d0:	000040fe 	.word	0x000040fe
    20d4:	000040fa 	.word	0x000040fa

000020d8 <Erase_And_RingTheBell>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_And_RingTheBell (LPC_UART_TypeDef *UARTx)
{
    20d8:	b570      	push	{r4, r5, r6, lr}
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    20da:	4d0f      	ldr	r5, [pc, #60]	; (2118 <Erase_And_RingTheBell+0x40>)
	printf(UARTx, "_");                   /* erase 1st char on the screen */
    20dc:	4e0f      	ldr	r6, [pc, #60]	; (211c <Erase_And_RingTheBell+0x44>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_And_RingTheBell (LPC_UART_TypeDef *UARTx)
{
    20de:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    20e0:	2208      	movs	r2, #8
    20e2:	4629      	mov	r1, r5
    20e4:	f7ff fd62 	bl	1bac <printf>
	printf(UARTx, "_");                   /* erase 1st char on the screen */
    20e8:	4631      	mov	r1, r6
    20ea:	4620      	mov	r0, r4
    20ec:	f7ff fd5e 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    20f0:	2208      	movs	r2, #8
    20f2:	4629      	mov	r1, r5
    20f4:	4620      	mov	r0, r4
    20f6:	f7ff fd59 	bl	1bac <printf>
	printf(UARTx, "_");                   /* erase 2nd char on the screen */
    20fa:	4631      	mov	r1, r6
    20fc:	4620      	mov	r0, r4
    20fe:	f7ff fd55 	bl	1bac <printf>
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    2102:	4629      	mov	r1, r5
    2104:	4620      	mov	r0, r4
    2106:	2208      	movs	r2, #8
    2108:	f7ff fd50 	bl	1bac <printf>
	printf(UARTx, "\7");                  /* ring the bell */
    210c:	4904      	ldr	r1, [pc, #16]	; (2120 <Erase_And_RingTheBell+0x48>)
    210e:	4620      	mov	r0, r4
}
    2110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
	printf(UARTx, "_");                   /* erase 1st char on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
	printf(UARTx, "_");                   /* erase 2nd char on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
	printf(UARTx, "\7");                  /* ring the bell */
    2114:	f7ff bd4a 	b.w	1bac <printf>
    2118:	000040f7 	.word	0x000040f7
    211c:	000040fa 	.word	0x000040fa
    2120:	00004100 	.word	0x00004100

00002124 <WDT_SetTimeOut>:
 * @param[in]	clk_source select Clock source for WDT device
 * @param[in]	timeout value of time-out for WDT (us)
 * @return		None
 *********************************************************************/
static uint8_t WDT_SetTimeOut (uint8_t clk_source, uint32_t timeout)
{
    2124:	b538      	push	{r3, r4, r5, lr}

	uint32_t pclk_wdt = 0;
	uint32_t tempval = 0;

	switch ((WDT_CLK_OPT) clk_source)
    2126:	4604      	mov	r4, r0
    2128:	b110      	cbz	r0, 2130 <WDT_SetTimeOut+0xc>
    212a:	2801      	cmp	r0, #1
    212c:	d12e      	bne.n	218c <WDT_SetTimeOut+0x68>
    212e:	e008      	b.n	2142 <WDT_SetTimeOut+0x1e>
    {
    case WDT_CLKSRC_IRC:
    	pclk_wdt = 4000000;
    	// Calculate TC in WDT
    	tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    2130:	f021 0003 	bic.w	r0, r1, #3
    	// Check if it valid
    	if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    2134:	28fe      	cmp	r0, #254	; 0xfe
    2136:	d92b      	bls.n	2190 <WDT_SetTimeOut+0x6c>
    	{
    		LPC_WDT->WDTC = tempval;
    2138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    213c:	6058      	str	r0, [r3, #4]
    		return	SUCCESS;
    213e:	2001      	movs	r0, #1
    2140:	bd38      	pop	{r3, r4, r5, pc}
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    2142:	4b14      	ldr	r3, [pc, #80]	; (2194 <WDT_SetTimeOut+0x70>)
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    2144:	4814      	ldr	r0, [pc, #80]	; (2198 <WDT_SetTimeOut+0x74>)
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    2146:	681a      	ldr	r2, [r3, #0]
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    2148:	0889      	lsrs	r1, r1, #2
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    214a:	0895      	lsrs	r5, r2, #2
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    214c:	fbb5 f5f0 	udiv	r5, r5, r0
    2150:	434d      	muls	r5, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    2152:	2dfe      	cmp	r5, #254	; 0xfe
    2154:	d902      	bls.n	215c <WDT_SetTimeOut+0x38>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    2156:	2000      	movs	r0, #0
    2158:	4601      	mov	r1, r0
    215a:	e010      	b.n	217e <WDT_SetTimeOut+0x5a>
			LPC_WDT->WDTC = (uint32_t) tempval;
			return SUCCESS;
		}

		// Get WDT clock with CCLK divider = 2
		pclk_wdt = SystemCoreClock / 2;
    215c:	0853      	lsrs	r3, r2, #1
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    215e:	fbb3 f5f0 	udiv	r5, r3, r0
    2162:	434d      	muls	r5, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    2164:	2dfe      	cmp	r5, #254	; 0xfe
    2166:	d902      	bls.n	216e <WDT_SetTimeOut+0x4a>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_2);
    2168:	2000      	movs	r0, #0
    216a:	2102      	movs	r1, #2
    216c:	e007      	b.n	217e <WDT_SetTimeOut+0x5a>
		}

		// Get WDT clock with CCLK divider = 1
		pclk_wdt = SystemCoreClock;
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    216e:	fbb2 f2f0 	udiv	r2, r2, r0
    2172:	fb02 f501 	mul.w	r5, r2, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
    2176:	2000      	movs	r0, #0
		// Get WDT clock with CCLK divider = 1
		pclk_wdt = SystemCoreClock;
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    2178:	2dfe      	cmp	r5, #254	; 0xfe
    217a:	d906      	bls.n	218a <WDT_SetTimeOut+0x66>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
    217c:	4621      	mov	r1, r4
    217e:	f7fd ffa5 	bl	cc <CLKPWR_SetPCLKDiv>
			LPC_WDT->WDTC = (uint32_t) tempval;
    2182:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2186:	604d      	str	r5, [r1, #4]
    2188:	e002      	b.n	2190 <WDT_SetTimeOut+0x6c>
    218a:	bd38      	pop	{r3, r4, r5, pc}
// Error parameter
		default:
			break;
}

	return ERROR;
    218c:	2000      	movs	r0, #0
    218e:	bd38      	pop	{r3, r4, r5, pc}
    2190:	4620      	mov	r0, r4
}
    2192:	bd38      	pop	{r3, r4, r5, pc}
    2194:	2007c008 	.word	0x2007c008
    2198:	000f4240 	.word	0x000f4240

0000219c <WDT_Init>:
* 				- WDT_MODE_INT_ONLY: Use WDT to generate interrupt only
* 				- WDT_MODE_RESET: Use WDT to generate interrupt and reset MCU
* @return 		None
 **********************************************************************/
void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
{
    219c:	b538      	push	{r3, r4, r5, lr}
    219e:	4605      	mov	r5, r0
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    21a0:	2000      	movs	r0, #0
* 				- WDT_MODE_INT_ONLY: Use WDT to generate interrupt only
* 				- WDT_MODE_RESET: Use WDT to generate interrupt and reset MCU
* @return 		None
 **********************************************************************/
void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
{
    21a2:	460c      	mov	r4, r1
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    21a4:	4601      	mov	r1, r0
    21a6:	f7fd ff91 	bl	cc <CLKPWR_SetPCLKDiv>

	//Set clock source
	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
    21aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21ae:	691a      	ldr	r2, [r3, #16]
	LPC_WDT->WDCLKSEL |= ClkSrc;
	//Set WDT mode
	if (WDTMode == WDT_MODE_RESET){
    21b0:	2c01      	cmp	r4, #1
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);

	//Set clock source
	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
    21b2:	f022 0003 	bic.w	r0, r2, #3
    21b6:	6118      	str	r0, [r3, #16]
	LPC_WDT->WDCLKSEL |= ClkSrc;
    21b8:	6919      	ldr	r1, [r3, #16]
    21ba:	ea45 0501 	orr.w	r5, r5, r1
    21be:	611d      	str	r5, [r3, #16]
	//Set WDT mode
	if (WDTMode == WDT_MODE_RESET){
    21c0:	d103      	bne.n	21ca <WDT_Init+0x2e>
		LPC_WDT->WDMOD |= WDT_WDMOD(WDTMode);
    21c2:	781a      	ldrb	r2, [r3, #0]
    21c4:	f042 0002 	orr.w	r0, r2, #2
    21c8:	7018      	strb	r0, [r3, #0]
    21ca:	bd38      	pop	{r3, r4, r5, pc}

000021cc <WDT_ReadTimeOutFlag>:
 * @param[in]	None
 * @return		Time out flag status of WDT
 *********************************************************************/
FlagStatus WDT_ReadTimeOutFlag (void)
{
	return ((FlagStatus)((LPC_WDT->WDMOD & WDT_WDMOD_WDTOF) >>2));
    21cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21d0:	7818      	ldrb	r0, [r3, #0]
}
    21d2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    21d6:	4770      	bx	lr

000021d8 <WDT_ClrTimeOutFlag>:
 * @param[in]	None
 * @return		None
 *********************************************************************/
void WDT_ClrTimeOutFlag (void)
{
	LPC_WDT->WDMOD &=~WDT_WDMOD_WDTOF;
    21d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21dc:	781a      	ldrb	r2, [r3, #0]
    21de:	f002 00fb 	and.w	r0, r2, #251	; 0xfb
    21e2:	7018      	strb	r0, [r3, #0]
    21e4:	4770      	bx	lr

000021e6 <WDT_Feed>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    21e6:	b672      	cpsid	i
 *********************************************************************/
void WDT_Feed (void)
{
	// Disable irq interrupt
	__disable_irq();
	LPC_WDT->WDFEED = 0xAA;
    21e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21ec:	22aa      	movs	r2, #170	; 0xaa
	LPC_WDT->WDFEED = 0x55;
    21ee:	2055      	movs	r0, #85	; 0x55
 *********************************************************************/
void WDT_Feed (void)
{
	// Disable irq interrupt
	__disable_irq();
	LPC_WDT->WDFEED = 0xAA;
    21f0:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    21f2:	7218      	strb	r0, [r3, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    21f4:	b662      	cpsie	i
    21f6:	4770      	bx	lr

000021f8 <WDT_UpdateTimeOut>:
 * @brief 		Update WDT timeout value and feed
 * @param[in]	TimeOut	TimeOut value to be updated
 * @return		None
 *********************************************************************/
void WDT_UpdateTimeOut ( uint32_t TimeOut)
{
    21f8:	b508      	push	{r3, lr}
	uint32_t ClkSrc;
	ClkSrc = LPC_WDT->WDCLKSEL;
    21fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 * @brief 		Update WDT timeout value and feed
 * @param[in]	TimeOut	TimeOut value to be updated
 * @return		None
 *********************************************************************/
void WDT_UpdateTimeOut ( uint32_t TimeOut)
{
    21fe:	4601      	mov	r1, r0
	uint32_t ClkSrc;
	ClkSrc = LPC_WDT->WDCLKSEL;
    2200:	6918      	ldr	r0, [r3, #16]
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
    2202:	f000 0003 	and.w	r0, r0, #3
    2206:	f7ff ff8d 	bl	2124 <WDT_SetTimeOut>
	WDT_Feed();
}
    220a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	uint32_t ClkSrc;
	ClkSrc = LPC_WDT->WDCLKSEL;
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
	WDT_Feed();
    220e:	f7ff bfea 	b.w	21e6 <WDT_Feed>

00002212 <WDT_Start>:
* @brief 		Start WDT activity with given timeout value
* @param[in]	TimeOut WDT reset after timeout if it is not feed
* @return 		None
 **********************************************************************/
void WDT_Start(uint32_t TimeOut)
{
    2212:	b510      	push	{r4, lr}
	uint32_t ClkSrc;

	ClkSrc = LPC_WDT->WDCLKSEL;
    2214:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
* @brief 		Start WDT activity with given timeout value
* @param[in]	TimeOut WDT reset after timeout if it is not feed
* @return 		None
 **********************************************************************/
void WDT_Start(uint32_t TimeOut)
{
    2218:	4601      	mov	r1, r0
	uint32_t ClkSrc;

	ClkSrc = LPC_WDT->WDCLKSEL;
    221a:	6920      	ldr	r0, [r4, #16]
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
    221c:	f000 0003 	and.w	r0, r0, #3
    2220:	f7ff ff80 	bl	2124 <WDT_SetTimeOut>
	//enable watchdog
	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
    2224:	7823      	ldrb	r3, [r4, #0]
    2226:	f043 0101 	orr.w	r1, r3, #1
    222a:	7021      	strb	r1, [r4, #0]
	WDT_Feed();
}
    222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ClkSrc = LPC_WDT->WDCLKSEL;
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
	//enable watchdog
	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
	WDT_Feed();
    2230:	f7ff bfd9 	b.w	21e6 <WDT_Feed>

00002234 <WDT_GetCurrentCount>:
 * @param[in]	None
 * @return		current value of WDT
 *********************************************************************/
uint32_t WDT_GetCurrentCount(void)
{
	return LPC_WDT->WDTV;
    2234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2238:	68d8      	ldr	r0, [r3, #12]
}
    223a:	4770      	bx	lr

0000223c <I2C_TSC2004_Write_Byte>:
 * @brief	    Writes Command Byte
 * @param[in]	Command  Write Command Byte
 * @return 		status
 **********************************************************************/
char I2C_TSC2004_Write_Byte (uint8_t Command)
{
    223c:	b500      	push	{lr}
    223e:	b08f      	sub	sp, #60	; 0x3c
    2240:	f88d 0007 	strb.w	r0, [sp, #7]
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	txsetup.sl_addr7bit = TSC2004_ID;
    2244:	2348      	movs	r3, #72	; 0x48
	txsetup.tx_data = &Command;
    2246:	f10d 0007 	add.w	r0, sp, #7
	txsetup.tx_length = 1;
    224a:	2101      	movs	r1, #1
	txsetup.rx_data = NULL;
    224c:	2200      	movs	r2, #0
char I2C_TSC2004_Write_Byte (uint8_t Command)
{
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	txsetup.sl_addr7bit = TSC2004_ID;
    224e:	9303      	str	r3, [sp, #12]
	txsetup.tx_data = &Command;
    2250:	9004      	str	r0, [sp, #16]
	txsetup.tx_length = 1;
    2252:	9105      	str	r1, [sp, #20]
	txsetup.rx_data = NULL;
	txsetup.rx_length = 0;
	txsetup.retransmissions_max = 3;
    2254:	2303      	movs	r3, #3

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    2256:	a903      	add	r1, sp, #12
    2258:	4805      	ldr	r0, [pc, #20]	; (2270 <I2C_TSC2004_Write_Byte+0x34>)
	I2C_M_SETUP_Type txsetup;

	txsetup.sl_addr7bit = TSC2004_ID;
	txsetup.tx_data = &Command;
	txsetup.tx_length = 1;
	txsetup.rx_data = NULL;
    225a:	9207      	str	r2, [sp, #28]
	txsetup.rx_length = 0;
    225c:	9208      	str	r2, [sp, #32]
	txsetup.retransmissions_max = 3;
    225e:	930a      	str	r3, [sp, #40]	; 0x28

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    2260:	f7fe fb4a 	bl	8f8 <I2C_MasterTransferData>
	}
	else
	{
		return (-1);
	}
}
    2264:	2801      	cmp	r0, #1
    2266:	bf14      	ite	ne
    2268:	20ff      	movne	r0, #255	; 0xff
    226a:	2000      	moveq	r0, #0
    226c:	b00f      	add	sp, #60	; 0x3c
    226e:	bd00      	pop	{pc}
    2270:	4001c000 	.word	0x4001c000

00002274 <I2C_TSC2004_Write_Word>:
 * @param[in]	Command      Configuration Commands
 * @param[in]   word_data    Configuration values
 * @return 		status
 **********************************************************************/
char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
{
    2274:	b500      	push	{lr}
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
    2276:	4b0c      	ldr	r3, [pc, #48]	; (22a8 <I2C_TSC2004_Write_Word+0x34>)
 * @param[in]	Command      Configuration Commands
 * @param[in]   word_data    Configuration values
 * @return 		status
 **********************************************************************/
char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
{
    2278:	b08d      	sub	sp, #52	; 0x34
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
    227a:	0a0a      	lsrs	r2, r1, #8
char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
{
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
    227c:	7018      	strb	r0, [r3, #0]
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
	I2C_Tx_Buf[2] = (uint8_t)(word_data);
    227e:	7099      	strb	r1, [r3, #2]

	txsetup.sl_addr7bit = TSC2004_ID;
    2280:	2048      	movs	r0, #72	; 0x48
	txsetup.tx_data = I2C_Tx_Buf;
	txsetup.tx_length = 3;
    2282:	2103      	movs	r1, #3
{
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
    2284:	705a      	strb	r2, [r3, #1]
	I2C_Tx_Buf[2] = (uint8_t)(word_data);

	txsetup.sl_addr7bit = TSC2004_ID;
    2286:	9001      	str	r0, [sp, #4]
	txsetup.tx_data = I2C_Tx_Buf;
	txsetup.tx_length = 3;
	txsetup.rx_data = NULL;
    2288:	2200      	movs	r2, #0
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
	I2C_Tx_Buf[2] = (uint8_t)(word_data);

	txsetup.sl_addr7bit = TSC2004_ID;
	txsetup.tx_data = I2C_Tx_Buf;
	txsetup.tx_length = 3;
    228a:	9103      	str	r1, [sp, #12]
	txsetup.rx_data = NULL;
	txsetup.rx_length = 0;
	txsetup.retransmissions_max = 3;
    228c:	9108      	str	r1, [sp, #32]

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    228e:	4807      	ldr	r0, [pc, #28]	; (22ac <I2C_TSC2004_Write_Word+0x38>)
    2290:	a901      	add	r1, sp, #4
	I2C_Tx_Buf[0] = Command;
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
	I2C_Tx_Buf[2] = (uint8_t)(word_data);

	txsetup.sl_addr7bit = TSC2004_ID;
	txsetup.tx_data = I2C_Tx_Buf;
    2292:	9302      	str	r3, [sp, #8]
	txsetup.tx_length = 3;
	txsetup.rx_data = NULL;
    2294:	9205      	str	r2, [sp, #20]
	txsetup.rx_length = 0;
    2296:	9206      	str	r2, [sp, #24]
	txsetup.retransmissions_max = 3;

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    2298:	f7fe fb2e 	bl	8f8 <I2C_MasterTransferData>
	}
	else
	{
		return (-1);
	}
}
    229c:	2801      	cmp	r0, #1
    229e:	bf14      	ite	ne
    22a0:	20ff      	movne	r0, #255	; 0xff
    22a2:	2000      	moveq	r0, #0
    22a4:	b00d      	add	sp, #52	; 0x34
    22a6:	bd00      	pop	{pc}
    22a8:	1000028c 	.word	0x1000028c
    22ac:	4001c000 	.word	0x4001c000

000022b0 <TSC2004_Init>:
 * @brief	    Touch Screen Initialize
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Init (void)
{
    22b0:	b508      	push	{r3, lr}
	uint16_t cmd,data;

	 /* Reset the TSC, configure for 12 bit */
	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_12BIT, SWRST_TRUE);
	I2C_TSC2004_Write_Byte(cmd);
    22b2:	2086      	movs	r0, #134	; 0x86
    22b4:	f7ff ffc2 	bl	223c <I2C_TSC2004_Write_Byte>

	/* Enable interrupt for PENIRQ and DAV */
	cmd = TSC2004_CMD0(CFR2_REG, PND0_FALSE, WRITE_REG);
	data = MEDIAN_VAL_FLTR_SIZE_1 |AVRG_VAL_FLTR_SIZE_7_8;
	I2C_TSC2004_Write_Word(cmd, data);
    22b8:	2070      	movs	r0, #112	; 0x70
    22ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
    22be:	f7ff ffd9 	bl	2274 <I2C_TSC2004_Write_Word>

	/* Configure the TSC in TSMode 1 */
	cmd = TSC2004_CMD0(CFR0_REG, PND0_FALSE, WRITE_REG);
	data = PEN_STS_CTRL_MODE | ADC_CLK_2MHZ;
	I2C_TSC2004_Write_Word(cmd, data);
    22c2:	2060      	movs	r0, #96	; 0x60
    22c4:	f44f 4108 	mov.w	r1, #34816	; 0x8800
    22c8:	f7ff ffd4 	bl	2274 <I2C_TSC2004_Write_Word>

	/* Enable x, y, z1 and z2 conversion functions */
	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_12BIT, SWRST_FALSE);
	I2C_TSC2004_Write_Byte(cmd);
    22cc:	2084      	movs	r0, #132	; 0x84
}
    22ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	data = PEN_STS_CTRL_MODE | ADC_CLK_2MHZ;
	I2C_TSC2004_Write_Word(cmd, data);

	/* Enable x, y, z1 and z2 conversion functions */
	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_12BIT, SWRST_FALSE);
	I2C_TSC2004_Write_Byte(cmd);
    22d2:	f7ff bfb3 	b.w	223c <I2C_TSC2004_Write_Byte>

000022d6 <I2C_TSC2004_Read_Word>:
 * @brief	    Reads Word data
 * @param[in]	Command    Read Register
 * @return 		Word value
 **********************************************************************/
uint16_t I2C_TSC2004_Read_Word (uint8_t Command)
{
    22d6:	b530      	push	{r4, r5, lr}
    22d8:	b08f      	sub	sp, #60	; 0x3c
    22da:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
	rxsetup.tx_data = &Command;	// Get address to read at writing address
	rxsetup.tx_length = 1;
    22de:	2101      	movs	r1, #1
	/* Receive setup */
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
	rxsetup.tx_data = &Command;	// Get address to read at writing address
    22e0:	f10d 0007 	add.w	r0, sp, #7
	rxsetup.tx_length = 1;
	rxsetup.rx_data = I2C_Rx_Buf;
    22e4:	4c0d      	ldr	r4, [pc, #52]	; (231c <I2C_TSC2004_Read_Word+0x46>)
	rxsetup.rx_length = 2;
    22e6:	2202      	movs	r2, #2
{
	/* Receive setup */
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
    22e8:	2348      	movs	r3, #72	; 0x48
	rxsetup.tx_data = &Command;	// Get address to read at writing address
    22ea:	9004      	str	r0, [sp, #16]
	rxsetup.tx_length = 1;
    22ec:	9105      	str	r1, [sp, #20]
	rxsetup.rx_data = I2C_Rx_Buf;
	rxsetup.rx_length = 2;
    22ee:	9208      	str	r2, [sp, #32]
	rxsetup.retransmissions_max = 3;
    22f0:	2503      	movs	r5, #3
	 * * Data are in Right Justified format.
	 * */
	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
	word_data |= (I2C_Rx_Buf[1]&0xFF);

	if (I2C_MasterTransferData(LPC_I2C0, &rxsetup, I2C_TRANSFER_POLLING) == SUCCESS)
    22f2:	2200      	movs	r2, #0
    22f4:	a903      	add	r1, sp, #12
    22f6:	480a      	ldr	r0, [pc, #40]	; (2320 <I2C_TSC2004_Read_Word+0x4a>)
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
	rxsetup.tx_data = &Command;	// Get address to read at writing address
	rxsetup.tx_length = 1;
	rxsetup.rx_data = I2C_Rx_Buf;
    22f8:	9407      	str	r4, [sp, #28]
	rxsetup.rx_length = 2;
	rxsetup.retransmissions_max = 3;
    22fa:	950a      	str	r5, [sp, #40]	; 0x28
{
	/* Receive setup */
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
    22fc:	9303      	str	r3, [sp, #12]

	/* The protocol and raw data format from i2c interface:
	 * * S Addr Wr [A] Comm [A] S Addr Rd [A] [DataHigh] A [DataLow] NA P
	 * * Data are in Right Justified format.
	 * */
	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
    22fe:	7825      	ldrb	r5, [r4, #0]
	word_data |= (I2C_Rx_Buf[1]&0xFF);
    2300:	7864      	ldrb	r4, [r4, #1]

	if (I2C_MasterTransferData(LPC_I2C0, &rxsetup, I2C_TRANSFER_POLLING) == SUCCESS)
    2302:	f7fe faf9 	bl	8f8 <I2C_MasterTransferData>
    2306:	2801      	cmp	r0, #1

	/* The protocol and raw data format from i2c interface:
	 * * S Addr Wr [A] Comm [A] S Addr Rd [A] [DataHigh] A [DataLow] NA P
	 * * Data are in Right Justified format.
	 * */
	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
    2308:	bf06      	itte	eq
    230a:	f005 000f 	andeq.w	r0, r5, #15
	word_data |= (I2C_Rx_Buf[1]&0xFF);
    230e:	ea44 2000 	orreq.w	r0, r4, r0, lsl #8
	{
		return (word_data);
	}
	else
	{
		return (-1);
    2312:	f64f 70ff 	movwne	r0, #65535	; 0xffff
	}
}
    2316:	b00f      	add	sp, #60	; 0x3c
    2318:	bd30      	pop	{r4, r5, pc}
    231a:	bf00      	nop
    231c:	10000038 	.word	0x10000038
    2320:	4001c000 	.word	0x4001c000

00002324 <TSC2004_Read_Reg>:
 * @brief	    Reads Any Register value
 * @param[in]	reg    Register to access
 * @return 		Word Value
 **********************************************************************/
uint16_t TSC2004_Read_Reg (register_address reg)
{
    2324:	b510      	push	{r4, lr}
    2326:	4604      	mov	r4, r0
	uint16_t val;
	uint8_t cmd;

	TSC2004_Init ();					// Initialize Touch Screen
    2328:	f7ff ffc2 	bl	22b0 <TSC2004_Init>

	 // Prepare val Measurement
	cmd = TSC2004_CMD0(reg, PND0_FALSE, READ_REG);
    232c:	00e0      	lsls	r0, r4, #3
    232e:	f040 0101 	orr.w	r1, r0, #1
    2332:	b2cc      	uxtb	r4, r1
	val = I2C_TSC2004_Read_Word(cmd);
    2334:	4620      	mov	r0, r4
    2336:	f7ff ffce 	bl	22d6 <I2C_TSC2004_Read_Word>

	 // Read val Measurement
	cmd = TSC2004_CMD0(reg, PND0_FALSE, READ_REG);
	val = I2C_TSC2004_Read_Word(cmd);
    233a:	4620      	mov	r0, r4
    233c:	f7ff ffcb 	bl	22d6 <I2C_TSC2004_Read_Word>

	val &= MEAS_MASK;
    2340:	0502      	lsls	r2, r0, #20

	return (val);
}
    2342:	0d10      	lsrs	r0, r2, #20
    2344:	bd10      	pop	{r4, pc}

00002346 <TSC2004_Read_Values>:
 * @brief	    Read X,Y,Z1,Z2 Values
 * @param[in]	*tc    store values in structure
 * @return 		None
 **********************************************************************/
void TSC2004_Read_Values (ts_event *tc)
{
    2346:	b510      	push	{r4, lr}
    2348:	4604      	mov	r4, r0
	uint8_t cmd;

	TSC2004_Init ();					// Initialize Touch Screen
    234a:	f7ff ffb1 	bl	22b0 <TSC2004_Init>

	 // Prepare X Measurement
	cmd = TSC2004_CMD0(X_REG, PND0_FALSE, READ_REG);
	tc->x = I2C_TSC2004_Read_Word(cmd);
    234e:	2001      	movs	r0, #1
    2350:	f7ff ffc1 	bl	22d6 <I2C_TSC2004_Read_Word>
    2354:	8020      	strh	r0, [r4, #0]

	 // Read X Measurement
	cmd = TSC2004_CMD0(X_REG, PND0_FALSE, READ_REG);
	tc->x = I2C_TSC2004_Read_Word(cmd);
    2356:	2001      	movs	r0, #1
    2358:	f7ff ffbd 	bl	22d6 <I2C_TSC2004_Read_Word>
    235c:	8020      	strh	r0, [r4, #0]

	// Prepare Y Measurement
	cmd = TSC2004_CMD0(Y_REG, PND0_FALSE, READ_REG);
	tc->y = I2C_TSC2004_Read_Word(cmd);
    235e:	2009      	movs	r0, #9
    2360:	f7ff ffb9 	bl	22d6 <I2C_TSC2004_Read_Word>
    2364:	8060      	strh	r0, [r4, #2]

	// Read Y Measurement
	cmd = TSC2004_CMD0(Y_REG, PND0_FALSE, READ_REG);
	tc->y = I2C_TSC2004_Read_Word(cmd);
    2366:	2009      	movs	r0, #9
    2368:	f7ff ffb5 	bl	22d6 <I2C_TSC2004_Read_Word>
    236c:	8060      	strh	r0, [r4, #2]

	// Prepare Z1 Measurement
	cmd = TSC2004_CMD0(Z1_REG, PND0_FALSE, READ_REG);
	tc->z1 = I2C_TSC2004_Read_Word(cmd);
    236e:	2011      	movs	r0, #17
    2370:	f7ff ffb1 	bl	22d6 <I2C_TSC2004_Read_Word>
    2374:	80a0      	strh	r0, [r4, #4]

	// Read Z1 Measurement
	cmd = TSC2004_CMD0(Z1_REG, PND0_FALSE, READ_REG);
	tc->z1 = I2C_TSC2004_Read_Word(cmd);
    2376:	2011      	movs	r0, #17
    2378:	f7ff ffad 	bl	22d6 <I2C_TSC2004_Read_Word>
    237c:	80a0      	strh	r0, [r4, #4]

	// Prepare Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);
    237e:	2019      	movs	r0, #25
    2380:	f7ff ffa9 	bl	22d6 <I2C_TSC2004_Read_Word>
    2384:	80e0      	strh	r0, [r4, #6]

	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);
    2386:	2019      	movs	r0, #25
    2388:	f7ff ffa5 	bl	22d6 <I2C_TSC2004_Read_Word>

	tc->x &= MEAS_MASK;
    238c:	8823      	ldrh	r3, [r4, #0]
	tc->y &= MEAS_MASK;
    238e:	8862      	ldrh	r2, [r4, #2]

	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
    2390:	f423 4170 	bic.w	r1, r3, #61440	; 0xf000
    2394:	8021      	strh	r1, [r4, #0]
	tc->y &= MEAS_MASK;
	tc->z1 &= MEAS_MASK;
    2396:	88a1      	ldrh	r1, [r4, #4]
	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
	tc->y &= MEAS_MASK;
    2398:	f422 4370 	bic.w	r3, r2, #61440	; 0xf000
	tc->z1 &= MEAS_MASK;
	tc->z2 &= MEAS_MASK;
    239c:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
	tc->y &= MEAS_MASK;
	tc->z1 &= MEAS_MASK;
    23a0:	f421 4270 	bic.w	r2, r1, #61440	; 0xf000
	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
	tc->y &= MEAS_MASK;
    23a4:	8063      	strh	r3, [r4, #2]
	tc->z1 &= MEAS_MASK;
    23a6:	80a2      	strh	r2, [r4, #4]
	tc->z2 &= MEAS_MASK;
    23a8:	80e0      	strh	r0, [r4, #6]
    23aa:	bd10      	pop	{r4, pc}

000023ac <TSC2004_Read_Value_Test>:
 * @brief	    Read X,Y,Z1,Z2 Values and Display on Terminal
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Read_Value_Test (void)
{
    23ac:	b513      	push	{r0, r1, r4, lr}
	ts_event ts;
	TSC2004_Read_Values (&ts);

	printf(LPC_UART0,"\x1b[1;1HMeasure X    = %d05",ts.x);
    23ae:	4c0e      	ldr	r4, [pc, #56]	; (23e8 <TSC2004_Read_Value_Test+0x3c>)
 * @return 		None
 **********************************************************************/
void TSC2004_Read_Value_Test (void)
{
	ts_event ts;
	TSC2004_Read_Values (&ts);
    23b0:	4668      	mov	r0, sp
    23b2:	f7ff ffc8 	bl	2346 <TSC2004_Read_Values>

	printf(LPC_UART0,"\x1b[1;1HMeasure X    = %d05",ts.x);
    23b6:	f8bd 2000 	ldrh.w	r2, [sp]
    23ba:	4620      	mov	r0, r4
    23bc:	490b      	ldr	r1, [pc, #44]	; (23ec <TSC2004_Read_Value_Test+0x40>)
    23be:	f7ff fbf5 	bl	1bac <printf>
	printf(LPC_UART0,"\x1b[2;1HMeasure Y    = %d05",ts.y);
    23c2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    23c6:	4620      	mov	r0, r4
    23c8:	4909      	ldr	r1, [pc, #36]	; (23f0 <TSC2004_Read_Value_Test+0x44>)
    23ca:	f7ff fbef 	bl	1bac <printf>
	printf(LPC_UART0,"\x1b[3;1HMeasure Z1   = %d05",ts.z1);
    23ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    23d2:	4620      	mov	r0, r4
    23d4:	4907      	ldr	r1, [pc, #28]	; (23f4 <TSC2004_Read_Value_Test+0x48>)
    23d6:	f7ff fbe9 	bl	1bac <printf>
	printf(LPC_UART0,"\x1b[4;1HMeasure Z2   = %d05",ts.z2);
    23da:	4620      	mov	r0, r4
    23dc:	4906      	ldr	r1, [pc, #24]	; (23f8 <TSC2004_Read_Value_Test+0x4c>)
    23de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    23e2:	f7ff fbe3 	bl	1bac <printf>
}
    23e6:	bd1c      	pop	{r2, r3, r4, pc}
    23e8:	4000c000 	.word	0x4000c000
    23ec:	00004102 	.word	0x00004102
    23f0:	0000411c 	.word	0x0000411c
    23f4:	00004136 	.word	0x00004136
    23f8:	00004150 	.word	0x00004150

000023fc <TSC2004_Draw_Test>:
 * @brief	    Read Touchscreen and PutPixel accordingly
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Draw_Test (void)
{
    23fc:	b507      	push	{r0, r1, r2, lr}
	ts_event ts;

	TSC2004_Read_Values (&ts);
    23fe:	4668      	mov	r0, sp
    2400:	f7ff ffa1 	bl	2346 <TSC2004_Read_Values>
	GLCD_PutPixel (((ts.x)/11)-24,((ts.y)/13)-36,Black);
    2404:	f8bd 0000 	ldrh.w	r0, [sp]
    2408:	230b      	movs	r3, #11
    240a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    240e:	fbb0 f2f3 	udiv	r2, r0, r3
    2412:	200d      	movs	r0, #13
    2414:	fbb1 f3f0 	udiv	r3, r1, r0
    2418:	3a18      	subs	r2, #24
    241a:	3b24      	subs	r3, #36	; 0x24
    241c:	b290      	uxth	r0, r2
    241e:	b299      	uxth	r1, r3
    2420:	2200      	movs	r2, #0
    2422:	f000 f963 	bl	26ec <GLCD_PutPixel>
}
    2426:	bd0e      	pop	{r1, r2, r3, pc}

00002428 <wr_dat_start>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_start (void)
{
	CS_Force1 (LPC_SSP1, DISABLE);
    2428:	2100      	movs	r1, #0
 * @brief	    Start of data writing to LCD controller
 * @param[in]	None
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_start (void)
{
    242a:	b508      	push	{r3, lr}
	CS_Force1 (LPC_SSP1, DISABLE);
    242c:	4804      	ldr	r0, [pc, #16]	; (2440 <wr_dat_start+0x18>)
    242e:	f7fe fd03 	bl	e38 <CS_Force1>
	GPIO_SetValue(2, LCD_RS);  // select data mode
    2432:	2002      	movs	r0, #2
    2434:	2101      	movs	r1, #1
}
    2436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_start (void)
{
	CS_Force1 (LPC_SSP1, DISABLE);
	GPIO_SetValue(2, LCD_RS);  // select data mode
    243a:	f7fd beef 	b.w	21c <GPIO_SetValue>
    243e:	bf00      	nop
    2440:	40030000 	.word	0x40030000

00002444 <wr_dat_stop>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_stop (void)
{
	CS_Force1 (LPC_SSP1, ENABLE);
    2444:	4801      	ldr	r0, [pc, #4]	; (244c <wr_dat_stop+0x8>)
    2446:	2101      	movs	r1, #1
    2448:	f7fe bcf6 	b.w	e38 <CS_Force1>
    244c:	40030000 	.word	0x40030000

00002450 <wr_dat_only>:
 * @brief	    Data writing to LCD controller
 * @param[in]	c     data to be written
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_only (uint16_t c)
{
    2450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	SSP_DATA_SETUP_Type xferConfig;

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
    2452:	4b07      	ldr	r3, [pc, #28]	; (2470 <wr_dat_only+0x20>)
    2454:	0a02      	lsrs	r2, r0, #8
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract
    2456:	7058      	strb	r0, [r3, #1]

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
	xferConfig.length = 2;
    2458:	2002      	movs	r0, #2
 **********************************************************************/
static __INLINE void wr_dat_only (uint16_t c)
{
	SSP_DATA_SETUP_Type xferConfig;

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
    245a:	701a      	strb	r2, [r3, #0]
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
	xferConfig.length = 2;
    245c:	9004      	str	r0, [sp, #16]

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
    245e:	2200      	movs	r2, #0
	xferConfig.length = 2;
	SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    2460:	4669      	mov	r1, sp
    2462:	4804      	ldr	r0, [pc, #16]	; (2474 <wr_dat_only+0x24>)
	SSP_DATA_SETUP_Type xferConfig;

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
    2464:	9300      	str	r3, [sp, #0]
	xferConfig.rx_data = NULL;
    2466:	9202      	str	r2, [sp, #8]
	xferConfig.length = 2;
	SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    2468:	f7fe fe20 	bl	10ac <SSP_ReadWrite>
}
    246c:	b007      	add	sp, #28
    246e:	bd00      	pop	{pc}
    2470:	100002cc 	.word	0x100002cc
    2474:	40030000 	.word	0x40030000

00002478 <GLCD_Backlight>:
 * @param[in]	NewState	ENABLE/DISABLE the Backlight
 * @return 		None
 **********************************************************************/
void GLCD_Backlight (FunctionalState NewState)
{
	if(NewState)
    2478:	b120      	cbz	r0, 2484 <GLCD_Backlight+0xc>
	{
		GPIO_SetValue(2, LCD_BK);
    247a:	2002      	movs	r0, #2
    247c:	f44f 7180 	mov.w	r1, #256	; 0x100
    2480:	f7fd becc 	b.w	21c <GPIO_SetValue>
	}
	else
	{
		GPIO_ClearValue(2, LCD_BK);
    2484:	2002      	movs	r0, #2
    2486:	f44f 7180 	mov.w	r1, #256	; 0x100
    248a:	f7fd bed1 	b.w	230 <GPIO_ClearValue>

0000248e <GLCD_Reset>:
 * @brief	    This function resets GLCD
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Reset (void)
{
    248e:	b508      	push	{r3, lr}
	GPIO_SetValue(0, LCD_RST);
    2490:	2120      	movs	r1, #32
    2492:	2000      	movs	r0, #0
    2494:	f7fd fec2 	bl	21c <GPIO_SetValue>
	delay_ms(2);
    2498:	2002      	movs	r0, #2
    249a:	f7fe fee9 	bl	1270 <delay_ms>
	GPIO_ClearValue(0, LCD_RST);  //reset low
    249e:	2120      	movs	r1, #32
    24a0:	2000      	movs	r0, #0
    24a2:	f7fd fec5 	bl	230 <GPIO_ClearValue>
	delay_ms(4);
    24a6:	2004      	movs	r0, #4
    24a8:	f7fe fee2 	bl	1270 <delay_ms>
	GPIO_SetValue(0, LCD_RST);  //reset low
    24ac:	2000      	movs	r0, #0
    24ae:	2120      	movs	r1, #32
}
    24b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	GPIO_SetValue(0, LCD_RST);
	delay_ms(2);
	GPIO_ClearValue(0, LCD_RST);  //reset low
	delay_ms(4);
	GPIO_SetValue(0, LCD_RST);  //reset low
    24b4:	f7fd beb2 	b.w	21c <GPIO_SetValue>

000024b8 <GLCD_SetTextColor>:
 * @param[in]	color    foreground color
 * @return 		None
 **********************************************************************/
void GLCD_SetTextColor (uint16_t color)
{
	TextColor = color;
    24b8:	4b01      	ldr	r3, [pc, #4]	; (24c0 <GLCD_SetTextColor+0x8>)
    24ba:	8018      	strh	r0, [r3, #0]
    24bc:	4770      	bx	lr
    24be:	bf00      	nop
    24c0:	10000036 	.word	0x10000036

000024c4 <GLCD_SetBackColor>:
 * @param[in]	color    background color
 * @return 		None
 **********************************************************************/
void GLCD_SetBackColor (uint16_t color)
{
	BackColor = color;
    24c4:	4b01      	ldr	r3, [pc, #4]	; (24cc <GLCD_SetBackColor+0x8>)
    24c6:	8018      	strh	r0, [r3, #0]
    24c8:	4770      	bx	lr
    24ca:	bf00      	nop
    24cc:	2007c004 	.word	0x2007c004

000024d0 <Write_Command_Glcd>:
 * @brief	    This function writes commands to the GLCD
 * @param[in]	Command		command to be written on GLCD
 * @return 		status
 **********************************************************************/
uchar Write_Command_Glcd (uint8_t Command)
{
    24d0:	b510      	push	{r4, lr}
    24d2:	b08a      	sub	sp, #40	; 0x28
    24d4:	ac0a      	add	r4, sp, #40	; 0x28
    24d6:	f804 0d21 	strb.w	r0, [r4, #-33]!
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;
	__IO uint32_t i;

	GPIO_ClearValue(2, LCD_RS);  //select command mode
    24da:	2101      	movs	r1, #1
    24dc:	2002      	movs	r0, #2
    24de:	f7fd fea7 	bl	230 <GPIO_ClearValue>

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
    24e2:	4811      	ldr	r0, [pc, #68]	; (2528 <Write_Command_Glcd+0x58>)
    24e4:	2100      	movs	r1, #0
    24e6:	f7fe fca7 	bl	e38 <CS_Force1>
	xferConfig.tx_data = &Command;               /* Send Instruction Byte    */
    24ea:	9404      	str	r4, [sp, #16]
	xferConfig.rx_data = NULL;
    24ec:	2200      	movs	r2, #0
	xferConfig.length = 1;
    24ee:	2401      	movs	r4, #1
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    24f0:	480d      	ldr	r0, [pc, #52]	; (2528 <Write_Command_Glcd+0x58>)
    24f2:	a904      	add	r1, sp, #16

	GPIO_ClearValue(2, LCD_RS);  //select command mode

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
	xferConfig.tx_data = &Command;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
    24f4:	9206      	str	r2, [sp, #24]
	xferConfig.length = 1;
    24f6:	9408      	str	r4, [sp, #32]
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    24f8:	f7fe fdd8 	bl	10ac <SSP_ReadWrite>

	if(WriteStatus)
    24fc:	b2c0      	uxtb	r0, r0
    24fe:	b180      	cbz	r0, 2522 <Write_Command_Glcd+0x52>
	{
		CS_Force1 (LPC_SSP1, ENABLE);                          /* CS high inactive        */
    2500:	4621      	mov	r1, r4
    2502:	4809      	ldr	r0, [pc, #36]	; (2528 <Write_Command_Glcd+0x58>)
    2504:	f7fe fc98 	bl	e38 <CS_Force1>
		for(i=925; i>0; i--);
    2508:	f240 319d 	movw	r1, #925	; 0x39d
    250c:	9103      	str	r1, [sp, #12]
    250e:	9b03      	ldr	r3, [sp, #12]
    2510:	b113      	cbz	r3, 2518 <Write_Command_Glcd+0x48>
    2512:	9803      	ldr	r0, [sp, #12]
    2514:	1e41      	subs	r1, r0, #1
    2516:	e7f9      	b.n	250c <Write_Command_Glcd+0x3c>
		GPIO_SetValue(2, LCD_RS);  // select data mode
    2518:	2002      	movs	r0, #2
    251a:	2101      	movs	r1, #1
    251c:	f7fd fe7e 	bl	21c <GPIO_SetValue>
    2520:	2001      	movs	r0, #1
		return(1);
	}
	else
		return(0);
}
    2522:	b00a      	add	sp, #40	; 0x28
    2524:	bd10      	pop	{r4, pc}
    2526:	bf00      	nop
    2528:	40030000 	.word	0x40030000

0000252c <Write_Data_Glcd>:
 * @brief	    This function writes data to the GLCD
 * @param[in]	data	data to be written on GLCD
 * @return 		None
 **********************************************************************/
uchar Write_Data_Glcd (uint16_t data)
{
    252c:	b510      	push	{r4, lr}
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;

	Tx_Buf1[0] = (uchar)(data>>8);    // 1st byte extract
    252e:	4c0f      	ldr	r4, [pc, #60]	; (256c <Write_Data_Glcd+0x40>)
 * @brief	    This function writes data to the GLCD
 * @param[in]	data	data to be written on GLCD
 * @return 		None
 **********************************************************************/
uchar Write_Data_Glcd (uint16_t data)
{
    2530:	b086      	sub	sp, #24
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;

	Tx_Buf1[0] = (uchar)(data>>8);    // 1st byte extract
    2532:	0a03      	lsrs	r3, r0, #8
	Tx_Buf1[1] = (uchar) data;        // 2nd byte extract
    2534:	7060      	strb	r0, [r4, #1]

	GPIO_SetValue(2, LCD_RS);  // select data mode
    2536:	2101      	movs	r1, #1
    2538:	2002      	movs	r0, #2
uchar Write_Data_Glcd (uint16_t data)
{
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;

	Tx_Buf1[0] = (uchar)(data>>8);    // 1st byte extract
    253a:	7023      	strb	r3, [r4, #0]
	Tx_Buf1[1] = (uchar) data;        // 2nd byte extract

	GPIO_SetValue(2, LCD_RS);  // select data mode
    253c:	f7fd fe6e 	bl	21c <GPIO_SetValue>

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
    2540:	480b      	ldr	r0, [pc, #44]	; (2570 <Write_Data_Glcd+0x44>)
    2542:	2100      	movs	r1, #0
    2544:	f7fe fc78 	bl	e38 <CS_Force1>
	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
	xferConfig.length = 2;
    2548:	2002      	movs	r0, #2

	GPIO_SetValue(2, LCD_RS);  // select data mode

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
    254a:	2200      	movs	r2, #0
	xferConfig.length = 2;
    254c:	9004      	str	r0, [sp, #16]
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    254e:	4669      	mov	r1, sp
    2550:	4807      	ldr	r0, [pc, #28]	; (2570 <Write_Data_Glcd+0x44>)
	Tx_Buf1[1] = (uchar) data;        // 2nd byte extract

	GPIO_SetValue(2, LCD_RS);  // select data mode

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
    2552:	9400      	str	r4, [sp, #0]
	xferConfig.rx_data = NULL;
    2554:	9202      	str	r2, [sp, #8]
	xferConfig.length = 2;
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    2556:	f7fe fda9 	bl	10ac <SSP_ReadWrite>

	if(WriteStatus)
    255a:	b2c0      	uxtb	r0, r0
    255c:	b120      	cbz	r0, 2568 <Write_Data_Glcd+0x3c>
	{
		CS_Force1 (LPC_SSP1, ENABLE);                          /* CS high inactive        */
    255e:	4804      	ldr	r0, [pc, #16]	; (2570 <Write_Data_Glcd+0x44>)
    2560:	2101      	movs	r1, #1
    2562:	f7fe fc69 	bl	e38 <CS_Force1>
    2566:	2001      	movs	r0, #1
		return(1);
	}
	else
		return(0);
}
    2568:	b006      	add	sp, #24
    256a:	bd10      	pop	{r4, pc}
    256c:	100002cc 	.word	0x100002cc
    2570:	40030000 	.word	0x40030000

00002574 <GLCD_Bargraph>:
 *              w        maximum width of bargraph (in pixels)
 *              val      value of active bargraph (in 1/1024)
 * @return 		None
 **********************************************************************/
void GLCD_Bargraph (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t val)
{
    2574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2578:	4606      	mov	r6, r0
	int i,j;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    257a:	2045      	movs	r0, #69	; 0x45
 *              w        maximum width of bargraph (in pixels)
 *              val      value of active bargraph (in 1/1024)
 * @return 		None
 **********************************************************************/
void GLCD_Bargraph (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t val)
{
    257c:	4615      	mov	r5, r2
    257e:	461f      	mov	r7, r3
    2580:	460c      	mov	r4, r1
    2582:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	int i,j;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    2586:	f7ff ffa3 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    258a:	4630      	mov	r0, r6
    258c:	f7ff ffce 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
    2590:	2046      	movs	r0, #70	; 0x46
    2592:	f7ff ff9d 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x+w-1);
    2596:	1e70      	subs	r0, r6, #1
    2598:	1829      	adds	r1, r5, r0
    259a:	b288      	uxth	r0, r1
    259c:	f7ff ffc6 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
    25a0:	2044      	movs	r0, #68	; 0x44
    25a2:	f7ff ff95 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    25a6:	4620      	mov	r0, r4
    25a8:	f7ff ffc0 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
    25ac:	2044      	movs	r0, #68	; 0x44
    25ae:	f7ff ff8f 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd((y+CHAR_H-1)<<8);
    25b2:	f104 0217 	add.w	r2, r4, #23
    25b6:	0213      	lsls	r3, r2, #8
    25b8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
    25bc:	f7ff ffb6 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    25c0:	204e      	movs	r0, #78	; 0x4e
    25c2:	f7ff ff85 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    25c6:	4630      	mov	r0, r6
    25c8:	f7ff ffb0 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    25cc:	204f      	movs	r0, #79	; 0x4f
    25ce:	f7ff ff7f 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    25d2:	4620      	mov	r0, r4
    25d4:	f7ff ffaa 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x22);
    25d8:	2022      	movs	r0, #34	; 0x22
    25da:	f7ff ff79 	bl	24d0 <Write_Command_Glcd>

	val = (val * w) >> 10;                /* Scale value for 24x12 characters   */

	wr_dat_start();
    25de:	f7ff ff23 	bl	2428 <wr_dat_start>
	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x22);

	val = (val * w) >> 10;                /* Scale value for 24x12 characters   */
    25e2:	fb05 f608 	mul.w	r6, r5, r8
    25e6:	ea4f 28a6 	mov.w	r8, r6, asr #10

	wr_dat_start();
	for (i = h; i >0; i--)
    25ea:	2600      	movs	r6, #0
    25ec:	42b7      	cmp	r7, r6
    25ee:	d010      	beq.n	2612 <GLCD_Bargraph+0x9e>
    25f0:	2400      	movs	r4, #0
	{
		for (j = 0; j <= w-1; j++)
    25f2:	42a5      	cmp	r5, r4
    25f4:	dd0b      	ble.n	260e <GLCD_Bargraph+0x9a>
		{
			if(j <= val)
    25f6:	fa1f f088 	uxth.w	r0, r8
    25fa:	4284      	cmp	r4, r0
			{
				wr_dat_only(BackColor);
    25fc:	bfd4      	ite	le
    25fe:	4807      	ldrle	r0, [pc, #28]	; (261c <GLCD_Bargraph+0xa8>)
			}
			else
			{
				wr_dat_only(TextColor);
    2600:	4807      	ldrgt	r0, [pc, #28]	; (2620 <GLCD_Bargraph+0xac>)
	val = (val * w) >> 10;                /* Scale value for 24x12 characters   */

	wr_dat_start();
	for (i = h; i >0; i--)
	{
		for (j = 0; j <= w-1; j++)
    2602:	3401      	adds	r4, #1
			{
				wr_dat_only(BackColor);
			}
			else
			{
				wr_dat_only(TextColor);
    2604:	8801      	ldrh	r1, [r0, #0]
    2606:	b288      	uxth	r0, r1
    2608:	f7ff ff22 	bl	2450 <wr_dat_only>
    260c:	e7f1      	b.n	25f2 <GLCD_Bargraph+0x7e>
    260e:	3601      	adds	r6, #1
    2610:	e7ec      	b.n	25ec <GLCD_Bargraph+0x78>
			}
		}
	}
	wr_dat_stop();
}
    2612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			{
				wr_dat_only(TextColor);
			}
		}
	}
	wr_dat_stop();
    2616:	f7ff bf15 	b.w	2444 <wr_dat_stop>
    261a:	bf00      	nop
    261c:	2007c004 	.word	0x2007c004
    2620:	10000036 	.word	0x10000036

00002624 <GLCD_Draw_Char>:
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    2624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int idx = 0, i, j;

	x = x-CHAR_W;
    2626:	f1a0 0510 	sub.w	r5, r0, #16
    262a:	b2ad      	uxth	r5, r5
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    262c:	4606      	mov	r6, r0
	int idx = 0, i, j;

	x = x-CHAR_W;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    262e:	2045      	movs	r0, #69	; 0x45
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    2630:	460c      	mov	r4, r1
    2632:	4617      	mov	r7, r2
	int idx = 0, i, j;

	x = x-CHAR_W;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    2634:	f7ff ff4c 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    2638:	4628      	mov	r0, r5
    263a:	f7ff ff77 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
    263e:	2046      	movs	r0, #70	; 0x46
    2640:	f7ff ff46 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x+CHAR_W-1);
    2644:	1e70      	subs	r0, r6, #1
    2646:	b280      	uxth	r0, r0
    2648:	f7ff ff70 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
    264c:	2044      	movs	r0, #68	; 0x44
    264e:	f7ff ff3f 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    2652:	4620      	mov	r0, r4
    2654:	f7ff ff6a 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
    2658:	2044      	movs	r0, #68	; 0x44
    265a:	f7ff ff39 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd((y+CHAR_H-1)<<8);
    265e:	f104 0117 	add.w	r1, r4, #23
    2662:	020a      	lsls	r2, r1, #8
    2664:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
    2668:	f7ff ff60 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    266c:	204e      	movs	r0, #78	; 0x4e
    266e:	f7ff ff2f 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    2672:	4628      	mov	r0, r5
    2674:	f7ff ff5a 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    2678:	204f      	movs	r0, #79	; 0x4f
    267a:	f7ff ff29 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    267e:	4620      	mov	r0, r4
    2680:	f7ff ff54 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x22);
    2684:	2022      	movs	r0, #34	; 0x22
    2686:	f7ff ff23 	bl	24d0 <Write_Command_Glcd>

	wr_dat_start();
    268a:	f7ff fecd 	bl	2428 <wr_dat_start>
    268e:	2500      	movs	r5, #0
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    2690:	2400      	movs	r4, #0
	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
	{
		for (i = 0; i<CHAR_W; i++)
		{
			if((c[idx] & (1 << i)) == 0x00)
    2692:	5b7b      	ldrh	r3, [r7, r5]
    2694:	fa43 f304 	asr.w	r3, r3, r4
    2698:	07d8      	lsls	r0, r3, #31
			{
				wr_dat_only(BackColor);
    269a:	bf54      	ite	pl
    269c:	4807      	ldrpl	r0, [pc, #28]	; (26bc <GLCD_Draw_Char+0x98>)
			}
			else
			{
				wr_dat_only(TextColor);
    269e:	4808      	ldrmi	r0, [pc, #32]	; (26c0 <GLCD_Draw_Char+0x9c>)
	Write_Command_Glcd(0x22);

	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
	{
		for (i = 0; i<CHAR_W; i++)
    26a0:	3401      	adds	r4, #1
			{
				wr_dat_only(BackColor);
			}
			else
			{
				wr_dat_only(TextColor);
    26a2:	8801      	ldrh	r1, [r0, #0]
    26a4:	b288      	uxth	r0, r1
    26a6:	f7ff fed3 	bl	2450 <wr_dat_only>
	Write_Command_Glcd(0x22);

	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
	{
		for (i = 0; i<CHAR_W; i++)
    26aa:	2c10      	cmp	r4, #16
    26ac:	d1f1      	bne.n	2692 <GLCD_Draw_Char+0x6e>
    26ae:	3502      	adds	r5, #2
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x22);

	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
    26b0:	2d30      	cmp	r5, #48	; 0x30
    26b2:	d1ed      	bne.n	2690 <GLCD_Draw_Char+0x6c>
			}
		}
		c++;
	}
	wr_dat_stop();
}
    26b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				wr_dat_only(TextColor);
			}
		}
		c++;
	}
	wr_dat_stop();
    26b8:	f7ff bec4 	b.w	2444 <wr_dat_stop>
    26bc:	2007c004 	.word	0x2007c004
    26c0:	10000036 	.word	0x10000036

000026c4 <GLCD_Display_Char>:
 *              c        ascii character
 * @return 		None
 **********************************************************************/
void GLCD_Display_Char (uint16_t ln, uint16_t col, uchar c)
{
	c -= 32;
    26c4:	3a20      	subs	r2, #32
	GLCD_Draw_Char(col * CHAR_W, ln * CHAR_H, (uint16_t *)&Font_24x16[c * CHAR_H]);
    26c6:	2318      	movs	r3, #24
    26c8:	b2d2      	uxtb	r2, r2
    26ca:	4358      	muls	r0, r3
 *              col      column number
 *              c        ascii character
 * @return 		None
 **********************************************************************/
void GLCD_Display_Char (uint16_t ln, uint16_t col, uchar c)
{
    26cc:	b510      	push	{r4, lr}
	c -= 32;
	GLCD_Draw_Char(col * CHAR_W, ln * CHAR_H, (uint16_t *)&Font_24x16[c * CHAR_H]);
    26ce:	4353      	muls	r3, r2
    26d0:	0109      	lsls	r1, r1, #4
    26d2:	4a05      	ldr	r2, [pc, #20]	; (26e8 <GLCD_Display_Char+0x24>)
    26d4:	b28c      	uxth	r4, r1
    26d6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    26da:	b281      	uxth	r1, r0
    26dc:	4620      	mov	r0, r4
}
    26de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @return 		None
 **********************************************************************/
void GLCD_Display_Char (uint16_t ln, uint16_t col, uchar c)
{
	c -= 32;
	GLCD_Draw_Char(col * CHAR_W, ln * CHAR_H, (uint16_t *)&Font_24x16[c * CHAR_H]);
    26e2:	f7ff bf9f 	b.w	2624 <GLCD_Draw_Char>
    26e6:	bf00      	nop
    26e8:	0000416a 	.word	0x0000416a

000026ec <GLCD_PutPixel>:
 * @param[in]	x        horizontal position
 *              y        vertical position
 * @return 		None
 **********************************************************************/
void GLCD_PutPixel (uint16_t x, uint16_t y, uint16_t color)
{
    26ec:	b570      	push	{r4, r5, r6, lr}
    26ee:	4604      	mov	r4, r0
	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    26f0:	204e      	movs	r0, #78	; 0x4e
 * @param[in]	x        horizontal position
 *              y        vertical position
 * @return 		None
 **********************************************************************/
void GLCD_PutPixel (uint16_t x, uint16_t y, uint16_t color)
{
    26f2:	460d      	mov	r5, r1
    26f4:	4616      	mov	r6, r2
	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    26f6:	f7ff feeb 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    26fa:	4620      	mov	r0, r4
    26fc:	f7ff ff16 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    2700:	204f      	movs	r0, #79	; 0x4f
    2702:	f7ff fee5 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    2706:	4628      	mov	r0, r5
    2708:	f7ff ff10 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x22);      /* RAM data write     */
    270c:	2022      	movs	r0, #34	; 0x22
    270e:	f7ff fedf 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(color);
    2712:	4630      	mov	r0, r6
}
    2714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x22);      /* RAM data write     */
	Write_Data_Glcd(color);
    2718:	f7ff bf08 	b.w	252c <Write_Data_Glcd>

0000271c <GLCD_Line>:
 *              (x2, y2)   the end coordinate
 *              color      line color
 * @return 		None
 **********************************************************************/
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
    271c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t  x, y, addx, addy, dx, dy;
	int32_t P,i;

	dx = abs((int16_t)(x2 - x1));
    2720:	1a14      	subs	r4, r2, r0
	dy = abs((int16_t)(y2 - y1));
    2722:	1a5e      	subs	r6, r3, r1
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
	int16_t  x, y, addx, addy, dx, dy;
	int32_t P,i;

	dx = abs((int16_t)(x2 - x1));
    2724:	b224      	sxth	r4, r4
	dy = abs((int16_t)(y2 - y1));
    2726:	b236      	sxth	r6, r6
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
	int16_t  x, y, addx, addy, dx, dy;
	int32_t P,i;

	dx = abs((int16_t)(x2 - x1));
    2728:	2c00      	cmp	r4, #0
    272a:	bfb8      	it	lt
    272c:	4264      	neglt	r4, r4
	dy = abs((int16_t)(y2 - y1));
    272e:	2e00      	cmp	r6, #0
    2730:	bfb8      	it	lt
    2732:	4276      	neglt	r6, r6
	x = x1;
	y = y1;

	if(x1 > x2)
		addx = -1;
    2734:	f64f 75ff 	movw	r5, #65535	; 0xffff
		addy = -1;
	else
		addy = 1;


	if(dx >= dy)
    2738:	b224      	sxth	r4, r4
    273a:	b236      	sxth	r6, r6
 *              (x2, y2)   the end coordinate
 *              color      line color
 * @return 		None
 **********************************************************************/
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
    273c:	b085      	sub	sp, #20
	dy = abs((int16_t)(y2 - y1));
	x = x1;
	y = y1;

	if(x1 > x2)
		addx = -1;
    273e:	4290      	cmp	r0, r2
    2740:	bfcc      	ite	gt
    2742:	462f      	movgt	r7, r5
    2744:	2701      	movle	r7, #1
	else
		addx = 1;
	if(y1 > y2)
		addy = -1;
    2746:	4299      	cmp	r1, r3
    2748:	bfcc      	ite	gt
    274a:	46a8      	movgt	r8, r5
    274c:	f04f 0801 	movle.w	r8, #1
	else
		addy = 1;


	if(dx >= dy)
    2750:	42b4      	cmp	r4, r6
 *              (x2, y2)   the end coordinate
 *              color      line color
 * @return 		None
 **********************************************************************/
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
    2752:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
		addy = -1;
	else
		addy = 1;


	if(dx >= dy)
    2756:	db29      	blt.n	27ac <GLCD_Line+0x90>
	{
		P = 2*dy - dx;
    2758:	ea4f 0b46 	mov.w	fp, r6, lsl #1
				P += 2*dy;
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
    275c:	1b36      	subs	r6, r6, r4
    275e:	0073      	lsls	r3, r6, #1
		addy = 1;


	if(dx >= dy)
	{
		P = 2*dy - dx;
    2760:	ebc4 050b 	rsb	r5, r4, fp
				P += 2*dy;
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
    2764:	9303      	str	r3, [sp, #12]

	if(dx >= dy)
	{
		P = 2*dy - dx;

		for(i=0; i<=dx; ++i)
    2766:	468a      	mov	sl, r1
    2768:	2600      	movs	r6, #0
    276a:	42a6      	cmp	r6, r4
    276c:	dc47      	bgt.n	27fe <GLCD_Line+0xe2>
		{
			GLCD_PutPixel(x, y, color);
    276e:	fa1f f38a 	uxth.w	r3, sl
    2772:	fa1f fe80 	uxth.w	lr, r0
    2776:	4619      	mov	r1, r3
    2778:	4670      	mov	r0, lr
    277a:	464a      	mov	r2, r9
    277c:	9301      	str	r3, [sp, #4]
    277e:	f8cd e008 	str.w	lr, [sp, #8]
    2782:	f7ff ffb3 	bl	26ec <GLCD_PutPixel>
    2786:	f8dd c008 	ldr.w	ip, [sp, #8]

			if(P < 0)
    278a:	2d00      	cmp	r5, #0
    278c:	eb0c 0107 	add.w	r1, ip, r7
    2790:	9b01      	ldr	r3, [sp, #4]
    2792:	da02      	bge.n	279a <GLCD_Line+0x7e>
			{
				P += 2*dy;
    2794:	445d      	add	r5, fp
				x += addx;
    2796:	b288      	uxth	r0, r1
    2798:	e006      	b.n	27a8 <GLCD_Line+0x8c>
			}
			else
			{
				P += 2*dy - 2*dx;
    279a:	9803      	ldr	r0, [sp, #12]
				x += addx;
				y += addy;
    279c:	eb03 0a08 	add.w	sl, r3, r8
				P += 2*dy;
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
    27a0:	182d      	adds	r5, r5, r0
				x += addx;
				y += addy;
    27a2:	fa1f fa8a 	uxth.w	sl, sl
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
				x += addx;
    27a6:	b288      	uxth	r0, r1

	if(dx >= dy)
	{
		P = 2*dy - dx;

		for(i=0; i<=dx; ++i)
    27a8:	3601      	adds	r6, #1
    27aa:	e7de      	b.n	276a <GLCD_Line+0x4e>
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    27ac:	1ba2      	subs	r2, r4, r6
			}
		}
	}
	else
	{
		P = 2*dx - dy;
    27ae:	ea4f 0a44 	mov.w	sl, r4, lsl #1
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    27b2:	0053      	lsls	r3, r2, #1
			}
		}
	}
	else
	{
		P = 2*dx - dy;
    27b4:	ebc6 050a 	rsb	r5, r6, sl
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    27b8:	9303      	str	r3, [sp, #12]
	}
	else
	{
		P = 2*dx - dy;

		for(i=0; i<=dy; ++i)
    27ba:	4683      	mov	fp, r0
    27bc:	2400      	movs	r4, #0
    27be:	42b4      	cmp	r4, r6
    27c0:	dc1d      	bgt.n	27fe <GLCD_Line+0xe2>
		{
			GLCD_PutPixel(x, y, color);
    27c2:	fa1f fc81 	uxth.w	ip, r1
    27c6:	fa1f f38b 	uxth.w	r3, fp
    27ca:	4661      	mov	r1, ip
    27cc:	4618      	mov	r0, r3
    27ce:	464a      	mov	r2, r9
    27d0:	f8cd c008 	str.w	ip, [sp, #8]
    27d4:	9301      	str	r3, [sp, #4]
    27d6:	f7ff ff89 	bl	26ec <GLCD_PutPixel>
    27da:	f8dd c008 	ldr.w	ip, [sp, #8]

			if(P < 0)
    27de:	2d00      	cmp	r5, #0
    27e0:	eb0c 0108 	add.w	r1, ip, r8
    27e4:	9801      	ldr	r0, [sp, #4]
    27e6:	da01      	bge.n	27ec <GLCD_Line+0xd0>
			{
				P += 2*dx;
    27e8:	4455      	add	r5, sl
    27ea:	e005      	b.n	27f8 <GLCD_Line+0xdc>
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    27ec:	9a03      	ldr	r2, [sp, #12]
				x += addx;
    27ee:	eb00 0b07 	add.w	fp, r0, r7
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    27f2:	18ad      	adds	r5, r5, r2
				x += addx;
    27f4:	fa1f fb8b 	uxth.w	fp, fp
				y += addy;
    27f8:	b289      	uxth	r1, r1
	}
	else
	{
		P = 2*dx - dy;

		for(i=0; i<=dy; ++i)
    27fa:	3401      	adds	r4, #1
    27fc:	e7df      	b.n	27be <GLCD_Line+0xa2>
				x += addx;
				y += addy;
			}
		}
	}
}
    27fe:	b005      	add	sp, #20
    2800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002804 <GLCD_Triangle>:
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
{
    2804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2808:	b091      	sub	sp, #68	; 0x44
    280a:	4606      	mov	r6, r0
    280c:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
    2810:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
    2814:	460d      	mov	r5, r1
    2816:	4617      	mov	r7, r2
    2818:	940e      	str	r4, [sp, #56]	; 0x38
    281a:	900f      	str	r0, [sp, #60]	; 0x3c
    if(fill)
    281c:	bb23      	cbnz	r3, 2868 <GLCD_Triangle+0x64>
    }


	if(!fill)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p2->y, color);
    281e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    2820:	f9b6 0000 	ldrsh.w	r0, [r6]
    2824:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
    2828:	f9b5 2000 	ldrsh.w	r2, [r5]
    282c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    2830:	9400      	str	r4, [sp, #0]
    2832:	f7ff ff73 	bl	271c <GLCD_Line>
		GLCD_Line(p1->x, p1->y, p3->x, p3->y, color);
    2836:	f9b7 2000 	ldrsh.w	r2, [r7]
    283a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    283e:	f9b6 0000 	ldrsh.w	r0, [r6]
    2842:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
    2846:	9400      	str	r4, [sp, #0]
    2848:	f7ff ff68 	bl	271c <GLCD_Line>
		GLCD_Line(p2->x, p2->y, p3->x, p3->y, color);
    284c:	f9b7 2000 	ldrsh.w	r2, [r7]
    2850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    2854:	f9b5 0000 	ldrsh.w	r0, [r5]
    2858:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    285c:	941a      	str	r4, [sp, #104]	; 0x68
	}
}
    285e:	b011      	add	sp, #68	; 0x44
    2860:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if(!fill)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p2->y, color);
		GLCD_Line(p1->x, p1->y, p3->x, p3->y, color);
		GLCD_Line(p2->x, p2->y, p3->x, p3->y, color);
    2864:	f7ff bf5a 	b.w	271c <GLCD_Line>
    	Bool changed1 = FALSE;
    	Bool changed2 = FALSE;
    	int16_t signx1,signx2,dx1,dy1,dx2,dy2;
    	uint16_t e1,e2;
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    2868:	8873      	ldrh	r3, [r6, #2]
    286a:	884a      	ldrh	r2, [r1, #2]
    286c:	b21c      	sxth	r4, r3
    286e:	b211      	sxth	r1, r2
    2870:	428c      	cmp	r4, r1
    2872:	dd14      	ble.n	289e <GLCD_Triangle+0x9a>
    2874:	ea82 0003 	eor.w	r0, r2, r3
    2878:	8070      	strh	r0, [r6, #2]
    287a:	886b      	ldrh	r3, [r5, #2]
    287c:	882c      	ldrh	r4, [r5, #0]
    287e:	4058      	eors	r0, r3
    2880:	8068      	strh	r0, [r5, #2]
    2882:	8872      	ldrh	r2, [r6, #2]
    2884:	8831      	ldrh	r1, [r6, #0]
    2886:	4050      	eors	r0, r2
    2888:	8070      	strh	r0, [r6, #2]
    288a:	ea84 0001 	eor.w	r0, r4, r1
    288e:	b283      	uxth	r3, r0
    2890:	8033      	strh	r3, [r6, #0]
    2892:	882a      	ldrh	r2, [r5, #0]
    2894:	4053      	eors	r3, r2
    2896:	802b      	strh	r3, [r5, #0]
    2898:	8834      	ldrh	r4, [r6, #0]
    289a:	4063      	eors	r3, r4
    289c:	8033      	strh	r3, [r6, #0]
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    289e:	8873      	ldrh	r3, [r6, #2]
    28a0:	887a      	ldrh	r2, [r7, #2]
    28a2:	b218      	sxth	r0, r3
    28a4:	b211      	sxth	r1, r2
    28a6:	4288      	cmp	r0, r1
    28a8:	dd14      	ble.n	28d4 <GLCD_Triangle+0xd0>
    28aa:	ea82 0403 	eor.w	r4, r2, r3
    28ae:	8074      	strh	r4, [r6, #2]
    28b0:	887b      	ldrh	r3, [r7, #2]
    28b2:	8838      	ldrh	r0, [r7, #0]
    28b4:	405c      	eors	r4, r3
    28b6:	807c      	strh	r4, [r7, #2]
    28b8:	8872      	ldrh	r2, [r6, #2]
    28ba:	8831      	ldrh	r1, [r6, #0]
    28bc:	4054      	eors	r4, r2
    28be:	8074      	strh	r4, [r6, #2]
    28c0:	ea80 0401 	eor.w	r4, r0, r1
    28c4:	b2a3      	uxth	r3, r4
    28c6:	8033      	strh	r3, [r6, #0]
    28c8:	883a      	ldrh	r2, [r7, #0]
    28ca:	4053      	eors	r3, r2
    28cc:	803b      	strh	r3, [r7, #0]
    28ce:	8830      	ldrh	r0, [r6, #0]
    28d0:	4043      	eors	r3, r0
    28d2:	8033      	strh	r3, [r6, #0]
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }
    28d4:	886c      	ldrh	r4, [r5, #2]
    28d6:	887b      	ldrh	r3, [r7, #2]
    28d8:	b222      	sxth	r2, r4
    28da:	b219      	sxth	r1, r3
    28dc:	428a      	cmp	r2, r1
    28de:	dd14      	ble.n	290a <GLCD_Triangle+0x106>
    28e0:	ea83 0004 	eor.w	r0, r3, r4
    28e4:	8068      	strh	r0, [r5, #2]
    28e6:	887c      	ldrh	r4, [r7, #2]
    28e8:	883a      	ldrh	r2, [r7, #0]
    28ea:	4060      	eors	r0, r4
    28ec:	8078      	strh	r0, [r7, #2]
    28ee:	886b      	ldrh	r3, [r5, #2]
    28f0:	8829      	ldrh	r1, [r5, #0]
    28f2:	4058      	eors	r0, r3
    28f4:	8068      	strh	r0, [r5, #2]
    28f6:	ea82 0001 	eor.w	r0, r2, r1
    28fa:	b284      	uxth	r4, r0
    28fc:	802c      	strh	r4, [r5, #0]
    28fe:	883b      	ldrh	r3, [r7, #0]
    2900:	405c      	eors	r4, r3
    2902:	803c      	strh	r4, [r7, #0]
    2904:	882a      	ldrh	r2, [r5, #0]
    2906:	4054      	eors	r4, r2
    2908:	802c      	strh	r4, [r5, #0]

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    290a:	8831      	ldrh	r1, [r6, #0]
    290c:	8873      	ldrh	r3, [r6, #2]

    	dx1 = (int16_t)(p2->x - p1->x);
    290e:	8828      	ldrh	r0, [r5, #0]
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    2910:	fa1f f883 	uxth.w	r8, r3
    2914:	b28c      	uxth	r4, r1
    2916:	f8cd 8018 	str.w	r8, [sp, #24]

    	dx1 = (int16_t)(p2->x - p1->x);
    291a:	1b02      	subs	r2, r0, r4
    291c:	b290      	uxth	r0, r2
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);
    291e:	f8b5 a002 	ldrh.w	sl, [r5, #2]
    2922:	f8dd b018 	ldr.w	fp, [sp, #24]
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points

    	dx1 = (int16_t)(p2->x - p1->x);
    2926:	fa1f f980 	uxth.w	r9, r0
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    292a:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    	dy1 = (int16_t)(p2->y - p1->y);
    292e:	ebcb 020a 	rsb	r2, fp, sl
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    2932:	bf18      	it	ne
    2934:	f1c0 0900 	rsbne	r9, r0, #0
    	dy1 = (int16_t)(p2->y - p1->y);
    2938:	b290      	uxth	r0, r2

    	dx2 = (int8_t)(p3->x - p1->x);
    293a:	783a      	ldrb	r2, [r7, #0]
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    293c:	bf18      	it	ne
    293e:	f64f 78ff 	movwne	r8, #65535	; 0xffff
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    2942:	ebc1 0102 	rsb	r1, r1, r2
    2946:	b24a      	sxtb	r2, r1
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    2948:	b211      	sxth	r1, r2
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    294a:	bf0c      	ite	eq
    294c:	f04f 0801 	moveq.w	r8, #1
    2950:	fa1f f989 	uxthne.w	r9, r9
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    2954:	2900      	cmp	r1, #0
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    2956:	f8cd 8020 	str.w	r8, [sp, #32]
    	dy1 = (int16_t)(p2->y - p1->y);
    295a:	9004      	str	r0, [sp, #16]

    	dx2 = (int8_t)(p3->x - p1->x);
    295c:	fa1f fc82 	uxth.w	ip, r2
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    2960:	da05      	bge.n	296e <GLCD_Triangle+0x16a>
    2962:	4252      	negs	r2, r2
    2964:	fa1f fc82 	uxth.w	ip, r2
    2968:	f64f 7eff 	movw	lr, #65535	; 0xffff
    296c:	e001      	b.n	2972 <GLCD_Triangle+0x16e>
    296e:	f04f 0e01 	mov.w	lr, #1
    	dy2 = (int8_t)(p3->y - p1->y);
    2972:	78b8      	ldrb	r0, [r7, #2]

    	if (dy1 > dx1)
    2974:	f8dd b010 	ldr.w	fp, [sp, #16]
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    	dy2 = (int8_t)(p3->y - p1->y);
    2978:	1ac1      	subs	r1, r0, r3
    297a:	b249      	sxtb	r1, r1
    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    297c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    	dy2 = (int8_t)(p3->y - p1->y);

    	if (dy1 > dx1)
    2980:	fa0f f28b 	sxth.w	r2, fp
    2984:	fa0f fe89 	sxth.w	lr, r9
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    	dy2 = (int8_t)(p3->y - p1->y);
    2988:	fa1f f881 	uxth.w	r8, r1

    	if (dy1 > dx1)
    298c:	4572      	cmp	r2, lr
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    	dy2 = (int8_t)(p3->y - p1->y);
    298e:	4608      	mov	r0, r1
    2990:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34

    	if (dy1 > dx1)
    2994:	dd0f      	ble.n	29b6 <GLCD_Triangle+0x1b2>
    	{   // swap values
            SWAP(dx1,dy1);
    2996:	f8dd 8010 	ldr.w	r8, [sp, #16]
    299a:	ea89 0908 	eor.w	r9, r9, r8
    299e:	ea89 0208 	eor.w	r2, r9, r8
    29a2:	fa1f fb82 	uxth.w	fp, r2
    29a6:	ea8b 0e09 	eor.w	lr, fp, r9
    29aa:	f8cd b010 	str.w	fp, [sp, #16]
    29ae:	fa1f f98e 	uxth.w	r9, lr
    		changed1 = TRUE;
    29b2:	2201      	movs	r2, #1
    29b4:	e000      	b.n	29b8 <GLCD_Triangle+0x1b4>
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
{
    if(fill)
    {
    	uint16_t t1x,t2x,y,minx,maxx,t1xp,t2xp;
    	Bool changed1 = FALSE;
    29b6:	2200      	movs	r2, #0
    	if (dy1 > dx1)
    	{   // swap values
            SWAP(dx1,dy1);
    		changed1 = TRUE;
    	}
    	if (dy2 > dx2)
    29b8:	b200      	sxth	r0, r0
    29ba:	fa0f f88c 	sxth.w	r8, ip
    29be:	4540      	cmp	r0, r8
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
{
    if(fill)
    {
    	uint16_t t1x,t2x,y,minx,maxx,t1xp,t2xp;
    	Bool changed1 = FALSE;
    29c0:	9207      	str	r2, [sp, #28]
    	if (dy1 > dx1)
    	{   // swap values
            SWAP(dx1,dy1);
    		changed1 = TRUE;
    	}
    	if (dy2 > dx2)
    29c2:	dd0b      	ble.n	29dc <GLCD_Triangle+0x1d8>
    	{   // swap values
            SWAP(dy2,dx2);
    29c4:	ea8c 0001 	eor.w	r0, ip, r1
    29c8:	b281      	uxth	r1, r0
    29ca:	ea81 0c0c 	eor.w	ip, r1, ip
    29ce:	ea8c 0001 	eor.w	r0, ip, r1
    29d2:	b281      	uxth	r1, r0
    		changed2 = TRUE;
    29d4:	2001      	movs	r0, #1
            SWAP(dx1,dy1);
    		changed1 = TRUE;
    	}
    	if (dy2 > dx2)
    	{   // swap values
            SWAP(dy2,dx2);
    29d6:	910d      	str	r1, [sp, #52]	; 0x34
    		changed2 = TRUE;
    29d8:	9009      	str	r0, [sp, #36]	; 0x24
    29da:	e001      	b.n	29e0 <GLCD_Triangle+0x1dc>
{
    if(fill)
    {
    	uint16_t t1x,t2x,y,minx,maxx,t1xp,t2xp;
    	Bool changed1 = FALSE;
    	Bool changed2 = FALSE;
    29dc:	2100      	movs	r1, #0
    29de:	9109      	str	r1, [sp, #36]	; 0x24
    	{   // swap values
            SWAP(dy2,dx2);
    		changed2 = TRUE;
    	}

    	e2 = (uint16_t)(dx2>>1);
    29e0:	f34c 014e 	sbfx	r1, ip, #1, #15
    29e4:	b289      	uxth	r1, r1
        // Flat top, just process the second half
        if(p1->y==p2->y) goto next;
    29e6:	459a      	cmp	sl, r3
    	{   // swap values
            SWAP(dy2,dx2);
    		changed2 = TRUE;
    	}

    	e2 = (uint16_t)(dx2>>1);
    29e8:	9105      	str	r1, [sp, #20]
        // Flat top, just process the second half
        if(p1->y==p2->y) goto next;
    29ea:	f000 8095 	beq.w	2b18 <GLCD_Triangle+0x314>
        e1 = (uint16_t)(dx1>>1);
    29ee:	f349 034e 	sbfx	r3, r9, #1, #15
    29f2:	fa1f fa83 	uxth.w	sl, r3
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    29f6:	46a0      	mov	r8, r4
    	e2 = (uint16_t)(dx2>>1);
        // Flat top, just process the second half
        if(p1->y==p2->y) goto next;
        e1 = (uint16_t)(dx1>>1);

    	for (uint8_t i = 0; i < dx1;)
    29f8:	f04f 0b00 	mov.w	fp, #0
    29fc:	fa0f f389 	sxth.w	r3, r9
    2a00:	459b      	cmp	fp, r3
    2a02:	f280 8089 	bge.w	2b18 <GLCD_Triangle+0x314>
    	{
    		t1xp=0; t2xp=0;
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    2a06:	45a0      	cmp	r8, r4
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    2a08:	f04f 0e00 	mov.w	lr, #0
        e1 = (uint16_t)(dx1>>1);

    	for (uint8_t i = 0; i < dx1;)
    	{
    		t1xp=0; t2xp=0;
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    2a0c:	bf39      	ittee	cc
    2a0e:	4622      	movcc	r2, r4
    2a10:	4641      	movcc	r1, r8
    2a12:	4642      	movcs	r2, r8
    2a14:	4621      	movcs	r1, r4
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    2a16:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    2a1a:	459b      	cmp	fp, r3
    2a1c:	da08      	bge.n	2a30 <GLCD_Triangle+0x22c>
    		{
    			i++;
    			e1 += dy1;
    2a1e:	9804      	ldr	r0, [sp, #16]
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    		{
    			i++;
    2a20:	f10b 0b01 	add.w	fp, fp, #1
    			e1 += dy1;
    2a24:	4482      	add	sl, r0
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    		{
    			i++;
    2a26:	fa5f fb8b 	uxtb.w	fp, fp
    			e1 += dy1;
    2a2a:	fa1f fa8a 	uxth.w	sl, sl
    	   	   	while (e1 >= dx1)
    2a2e:	e00f      	b.n	2a50 <GLCD_Triangle+0x24c>
    2a30:	2300      	movs	r3, #0
    2a32:	930c      	str	r3, [sp, #48]	; 0x30
    2a34:	e02f      	b.n	2a96 <GLCD_Triangle+0x292>
    	   	   	{
    				e1 -= dx1;
       	   	   	   if (changed1) t1xp=signx1;//t1x += signx1;
    2a36:	9807      	ldr	r0, [sp, #28]
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2a38:	ebc9 0a0a 	rsb	sl, r9, sl
    2a3c:	fa1f fa8a 	uxth.w	sl, sl
    			i++;
    			e1 += dy1;
    	   	   	while (e1 >= dx1)
    	   	   	{
    				e1 -= dx1;
       	   	   	   if (changed1) t1xp=signx1;//t1x += signx1;
    2a40:	2800      	cmp	r0, #0
    2a42:	d0f5      	beq.n	2a30 <GLCD_Triangle+0x22c>
    2a44:	f8dd e020 	ldr.w	lr, [sp, #32]
    2a48:	fa1f fe8e 	uxth.w	lr, lr
    2a4c:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
            // process first line until y value is about to change
    		while(i<dx1)
    		{
    			i++;
    			e1 += dy1;
    	   	   	while (e1 >= dx1)
    2a50:	459a      	cmp	sl, r3
    2a52:	daf0      	bge.n	2a36 <GLCD_Triangle+0x232>
    	   	   	{
    				e1 -= dx1;
       	   	   	   if (changed1) t1xp=signx1;//t1x += signx1;
    				else          goto next1;
    			}
    			if (changed1) break;
    2a54:	9807      	ldr	r0, [sp, #28]
    2a56:	2800      	cmp	r0, #0
    2a58:	d1ea      	bne.n	2a30 <GLCD_Triangle+0x22c>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2a5a:	f8dd e020 	ldr.w	lr, [sp, #32]
    2a5e:	44f0      	add	r8, lr
    2a60:	fa1f f888 	uxth.w	r8, r8
    2a64:	e7d9      	b.n	2a1a <GLCD_Triangle+0x216>
    2a66:	9805      	ldr	r0, [sp, #20]
    2a68:	ebcc 0300 	rsb	r3, ip, r0
    2a6c:	b298      	uxth	r0, r3
    		{
    			e2 += dy2;
    			while (e2 >= dx2)
    			{
    				e2 -= dx2;
    				if (changed2) t2xp=signx2;//t2x += signx2;
    2a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2a70:	9005      	str	r0, [sp, #20]
    		{
    			e2 += dy2;
    			while (e2 >= dx2)
    			{
    				e2 -= dx2;
    				if (changed2) t2xp=signx2;//t2x += signx2;
    2a72:	b1c3      	cbz	r3, 2aa6 <GLCD_Triangle+0x2a2>
    2a74:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    2a78:	fa1f fe8e 	uxth.w	lr, lr
    2a7c:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    	next1:
            // process second line until y value is about to change
    		while (1)
    		{
    			e2 += dy2;
    			while (e2 >= dx2)
    2a80:	9805      	ldr	r0, [sp, #20]
    2a82:	fa0f f38c 	sxth.w	r3, ip
    2a86:	4298      	cmp	r0, r3
    2a88:	daed      	bge.n	2a66 <GLCD_Triangle+0x262>
    			{
    				e2 -= dx2;
    				if (changed2) t2xp=signx2;//t2x += signx2;
    				else          goto next2;
    			}
    			if (changed2)     break;
    2a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a8c:	b95b      	cbnz	r3, 2aa6 <GLCD_Triangle+0x2a2>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2a8e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    2a92:	4474      	add	r4, lr
    2a94:	b2a4      	uxth	r4, r4
    	// Move line
    	next1:
            // process second line until y value is about to change
    		while (1)
    		{
    			e2 += dy2;
    2a96:	9805      	ldr	r0, [sp, #20]
    2a98:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    2a9c:	eb00 030e 	add.w	r3, r0, lr
    2aa0:	b298      	uxth	r0, r3
    2aa2:	9005      	str	r0, [sp, #20]
    			while (e2 >= dx2)
    2aa4:	e7ec      	b.n	2a80 <GLCD_Triangle+0x27c>
    			else              t2x += signx2;
    		}
    	next2:
    		if(minx>t1x) minx=t1x; if(minx>t2x) minx=t2x;
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,fill_color);    // Draw line from min to max points found on the y
    2aa6:	9b06      	ldr	r3, [sp, #24]
    2aa8:	4588      	cmp	r8, r1
    2aaa:	bf38      	it	cc
    2aac:	4641      	movcc	r1, r8
    2aae:	4590      	cmp	r8, r2
    2ab0:	bf28      	it	cs
    2ab2:	4642      	movcs	r2, r8
    2ab4:	b288      	uxth	r0, r1
    2ab6:	b292      	uxth	r2, r2
    2ab8:	b219      	sxth	r1, r3
    2aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2abc:	42a0      	cmp	r0, r4
    2abe:	bf28      	it	cs
    2ac0:	4620      	movcs	r0, r4
    2ac2:	42a2      	cmp	r2, r4
    2ac4:	bf38      	it	cc
    2ac6:	4622      	movcc	r2, r4
    2ac8:	9300      	str	r3, [sp, #0]
    2aca:	b200      	sxth	r0, r0
    2acc:	460b      	mov	r3, r1
    2ace:	b212      	sxth	r2, r2
    2ad0:	f8cd c00c 	str.w	ip, [sp, #12]
    2ad4:	f7ff fe22 	bl	271c <GLCD_Line>

    		// Now increase y
    		if(!changed1) t1x += signx1;
    2ad8:	9907      	ldr	r1, [sp, #28]
    2ada:	f8dd c00c 	ldr.w	ip, [sp, #12]
    2ade:	b919      	cbnz	r1, 2ae8 <GLCD_Triangle+0x2e4>
    2ae0:	9808      	ldr	r0, [sp, #32]
    2ae2:	4480      	add	r8, r0
    2ae4:	fa1f f888 	uxth.w	r8, r8
    		t1x+=t1xp;
    2ae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    		if(!changed2) t2x += signx2;
    2aea:	9909      	ldr	r1, [sp, #36]	; 0x24
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,fill_color);    // Draw line from min to max points found on the y

    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    2aec:	eb08 0302 	add.w	r3, r8, r2
    2af0:	fa1f f883 	uxth.w	r8, r3
    		if(!changed2) t2x += signx2;
    2af4:	b919      	cbnz	r1, 2afe <GLCD_Triangle+0x2fa>
    2af6:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    2afa:	4474      	add	r4, lr
    2afc:	b2a4      	uxth	r4, r4
    		t2x+=t2xp;
        	y += 1;
    2afe:	9906      	ldr	r1, [sp, #24]

    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    2b00:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b02:	1823      	adds	r3, r4, r0
        	y += 1;
    2b04:	1c48      	adds	r0, r1, #1

    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    2b06:	b29c      	uxth	r4, r3
        	y += 1;
    2b08:	b283      	uxth	r3, r0
    2b0a:	9306      	str	r3, [sp, #24]
    		if(y==p2->y) break;
    2b0c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
    2b10:	9906      	ldr	r1, [sp, #24]
    2b12:	4281      	cmp	r1, r0
    2b14:	f47f af72 	bne.w	29fc <GLCD_Triangle+0x1f8>
       }
    	next:
    	// Second half
    	dx1 = (int8_t)(p3->x - p2->x); if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    2b18:	783a      	ldrb	r2, [r7, #0]
    2b1a:	f8b5 a000 	ldrh.w	sl, [r5]
    2b1e:	ebca 0302 	rsb	r3, sl, r2
    2b22:	b258      	sxtb	r0, r3
    2b24:	b202      	sxth	r2, r0
    2b26:	2a00      	cmp	r2, #0
    2b28:	fa1f f980 	uxth.w	r9, r0
    2b2c:	da07      	bge.n	2b3e <GLCD_Triangle+0x33a>
    2b2e:	f1c0 0900 	rsb	r9, r0, #0
    2b32:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2b36:	fa1f f989 	uxth.w	r9, r9
    2b3a:	9007      	str	r0, [sp, #28]
    2b3c:	e001      	b.n	2b42 <GLCD_Triangle+0x33e>
    2b3e:	2301      	movs	r3, #1
    2b40:	9307      	str	r3, [sp, #28]
    	dy1 = (int8_t)(p3->y - p2->y);
    2b42:	78b9      	ldrb	r1, [r7, #2]
    2b44:	78aa      	ldrb	r2, [r5, #2]
    	t1x=p2->x;
    2b46:	fa1f f88a 	uxth.w	r8, sl
    		if(y==p2->y) break;
       }
    	next:
    	// Second half
    	dx1 = (int8_t)(p3->x - p2->x); if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int8_t)(p3->y - p2->y);
    2b4a:	1a8b      	subs	r3, r1, r2
    2b4c:	b258      	sxtb	r0, r3
    	t1x=p2->x;

    	if (dy1 > dx1)
    2b4e:	b202      	sxth	r2, r0
    2b50:	fa0f f189 	sxth.w	r1, r9
    		if(y==p2->y) break;
       }
    	next:
    	// Second half
    	dx1 = (int8_t)(p3->x - p2->x); if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int8_t)(p3->y - p2->y);
    2b54:	fa1f fb80 	uxth.w	fp, r0
    	t1x=p2->x;

    	if (dy1 > dx1)
    2b58:	428a      	cmp	r2, r1
    		if(y==p2->y) break;
       }
    	next:
    	// Second half
    	dx1 = (int8_t)(p3->x - p2->x); if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int8_t)(p3->y - p2->y);
    2b5a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    	t1x=p2->x;

    	if (dy1 > dx1)
    2b5e:	dd0b      	ble.n	2b78 <GLCD_Triangle+0x374>
    	{   // swap values
            SWAP(dy1,dx1);
    2b60:	ea89 0300 	eor.w	r3, r9, r0
    2b64:	b298      	uxth	r0, r3
    2b66:	ea80 0909 	eor.w	r9, r0, r9
    2b6a:	ea89 0300 	eor.w	r3, r9, r0
    2b6e:	b298      	uxth	r0, r3
    		changed1 = TRUE;
    2b70:	2301      	movs	r3, #1
    	dy1 = (int8_t)(p3->y - p2->y);
    	t1x=p2->x;

    	if (dy1 > dx1)
    	{   // swap values
            SWAP(dy1,dx1);
    2b72:	900c      	str	r0, [sp, #48]	; 0x30
    		changed1 = TRUE;
    2b74:	9304      	str	r3, [sp, #16]
    2b76:	e001      	b.n	2b7c <GLCD_Triangle+0x378>
    	} else changed1=FALSE;
    2b78:	2100      	movs	r1, #0
    2b7a:	9104      	str	r1, [sp, #16]

    	e1 = (uint8_t)(dx1>>1);
    2b7c:	f3c9 0b47 	ubfx	fp, r9, #1, #8

    	for (uint8_t i = 0; i<=dx1; i++)
    2b80:	f04f 0a00 	mov.w	sl, #0
    2b84:	fa0f f389 	sxth.w	r3, r9
    2b88:	459a      	cmp	sl, r3
    2b8a:	f73f ae48 	bgt.w	281e <GLCD_Triangle+0x1a>
    	{
    		t1xp=0; t2xp=0;
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    2b8e:	45a0      	cmp	r8, r4
    2b90:	bf39      	ittee	cc
    2b92:	4622      	movcc	r2, r4
    2b94:	4641      	movcc	r1, r8
    2b96:	4642      	movcs	r2, r8
    2b98:	4621      	movcs	r1, r4
    		else		{ minx=t2x; maxx=t1x; }
    	    // process first line until y value is about to change
    		while(i<dx1)
    2b9a:	459a      	cmp	sl, r3
    2b9c:	da12      	bge.n	2bc4 <GLCD_Triangle+0x3c0>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2b9e:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    2ba2:	eb0b 000e 	add.w	r0, fp, lr
    2ba6:	fa1f fb80 	uxth.w	fp, r0
    		else		{ minx=t2x; maxx=t1x; }
    	    // process first line until y value is about to change
    		while(i<dx1)
    		{
        		e1 += dy1;
    	   	   	while (e1 >= dx1)
    2baa:	459b      	cmp	fp, r3
    2bac:	db08      	blt.n	2bc0 <GLCD_Triangle+0x3bc>
    	   	   	{
    				e1 -= dx1;
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    2bae:	9b04      	ldr	r3, [sp, #16]
    		while(i<dx1)
    		{
        		e1 += dy1;
    	   	   	while (e1 >= dx1)
    	   	   	{
    				e1 -= dx1;
    2bb0:	ebc9 000b 	rsb	r0, r9, fp
    2bb4:	fa1f fb80 	uxth.w	fp, r0
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    2bb8:	b13b      	cbz	r3, 2bca <GLCD_Triangle+0x3c6>
    2bba:	9b07      	ldr	r3, [sp, #28]
    2bbc:	b29b      	uxth	r3, r3
    2bbe:	e002      	b.n	2bc6 <GLCD_Triangle+0x3c2>
    				else          goto next3;
    			}
    			if (changed1) break;
    2bc0:	9804      	ldr	r0, [sp, #16]
    2bc2:	b160      	cbz	r0, 2bde <GLCD_Triangle+0x3da>
    2bc4:	2300      	movs	r3, #0
    2bc6:	9308      	str	r3, [sp, #32]
    2bc8:	e001      	b.n	2bce <GLCD_Triangle+0x3ca>
    		{
        		e1 += dy1;
    	   	   	while (e1 >= dx1)
    	   	   	{
    				e1 -= dx1;
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    2bca:	9804      	ldr	r0, [sp, #16]
    2bcc:	9008      	str	r0, [sp, #32]
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    		}
    	next3:
            // process second line until y value is about to change
    		while (t2x!=p3->x)
    2bce:	f9b7 0000 	ldrsh.w	r0, [r7]
    2bd2:	f04f 0e00 	mov.w	lr, #0
    2bd6:	9002      	str	r0, [sp, #8]
    2bd8:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    2bdc:	e01e      	b.n	2c1c <GLCD_Triangle+0x418>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2bde:	9807      	ldr	r0, [sp, #28]
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    				else          goto next3;
    			}
    			if (changed1) break;
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    2be0:	f10a 0a01 	add.w	sl, sl, #1
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2be4:	4480      	add	r8, r0
    2be6:	fa1f f888 	uxth.w	r8, r8
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    				else          goto next3;
    			}
    			if (changed1) break;
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    2bea:	fa5f fa8a 	uxtb.w	sl, sl
    2bee:	e7d4      	b.n	2b9a <GLCD_Triangle+0x396>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2bf0:	f8dd e014 	ldr.w	lr, [sp, #20]
    2bf4:	ebcc 030e 	rsb	r3, ip, lr
    2bf8:	b298      	uxth	r0, r3
    		{
    			e2 += dy2;
    	   	   	while (e2 >= dx2)
    	   	   	{
    				e2 -= dx2;
    				if(changed2) t2xp=signx2;
    2bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2bfc:	9005      	str	r0, [sp, #20]
    		{
    			e2 += dy2;
    	   	   	while (e2 >= dx2)
    	   	   	{
    				e2 -= dx2;
    				if(changed2) t2xp=signx2;
    2bfe:	b1cb      	cbz	r3, 2c34 <GLCD_Triangle+0x430>
    2c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2c02:	b298      	uxth	r0, r3
    2c04:	900b      	str	r0, [sp, #44]	; 0x2c
    	next3:
            // process second line until y value is about to change
    		while (t2x!=p3->x)
    		{
    			e2 += dy2;
    	   	   	while (e2 >= dx2)
    2c06:	f8dd e014 	ldr.w	lr, [sp, #20]
    2c0a:	fa0f f08c 	sxth.w	r0, ip
    2c0e:	4586      	cmp	lr, r0
    2c10:	daee      	bge.n	2bf0 <GLCD_Triangle+0x3ec>
    	   	   	{
    				e2 -= dx2;
    				if(changed2) t2xp=signx2;
    				else          goto next4;
    			}
    			if (changed2)     break;
    2c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c14:	b973      	cbnz	r3, 2c34 <GLCD_Triangle+0x430>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3, Bool fill,uint16_t color, uint16_t fill_color)
    2c16:	980a      	ldr	r0, [sp, #40]	; 0x28
    2c18:	1824      	adds	r4, r4, r0
    2c1a:	b2a4      	uxth	r4, r4
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    		}
    	next3:
            // process second line until y value is about to change
    		while (t2x!=p3->x)
    2c1c:	f8dd e008 	ldr.w	lr, [sp, #8]
    2c20:	4574      	cmp	r4, lr
    2c22:	d007      	beq.n	2c34 <GLCD_Triangle+0x430>
    		{
    			e2 += dy2;
    2c24:	f8dd e014 	ldr.w	lr, [sp, #20]
    2c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2c2a:	eb0e 0003 	add.w	r0, lr, r3
    2c2e:	b283      	uxth	r3, r0
    2c30:	9305      	str	r3, [sp, #20]
    	   	   	while (e2 >= dx2)
    2c32:	e7e8      	b.n	2c06 <GLCD_Triangle+0x402>
    		}
    	next4:

    		if(minx>t1x) minx=t1x; if(minx>t2x) minx=t2x;
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,fill_color);    // Draw line from min to max points found on the y
    2c34:	9b06      	ldr	r3, [sp, #24]
    2c36:	4588      	cmp	r8, r1
    2c38:	bf38      	it	cc
    2c3a:	4641      	movcc	r1, r8
    2c3c:	4590      	cmp	r8, r2
    2c3e:	bf28      	it	cs
    2c40:	4642      	movcs	r2, r8
    2c42:	b288      	uxth	r0, r1
    2c44:	b292      	uxth	r2, r2
    2c46:	b219      	sxth	r1, r3
    2c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2c4a:	42a0      	cmp	r0, r4
    2c4c:	bf28      	it	cs
    2c4e:	4620      	movcs	r0, r4
    2c50:	42a2      	cmp	r2, r4
    2c52:	bf38      	it	cc
    2c54:	4622      	movcc	r2, r4
    2c56:	9300      	str	r3, [sp, #0]
    2c58:	b200      	sxth	r0, r0
    2c5a:	460b      	mov	r3, r1
    2c5c:	b212      	sxth	r2, r2
    2c5e:	f8cd c00c 	str.w	ip, [sp, #12]
    2c62:	f7ff fd5b 	bl	271c <GLCD_Line>
    		// Now increase y
    		if(!changed1) t1x += signx1;
    2c66:	9904      	ldr	r1, [sp, #16]
    2c68:	f8dd c00c 	ldr.w	ip, [sp, #12]
    2c6c:	b919      	cbnz	r1, 2c76 <GLCD_Triangle+0x472>
    2c6e:	9807      	ldr	r0, [sp, #28]
    2c70:	4480      	add	r8, r0
    2c72:	fa1f f888 	uxth.w	r8, r8
    		t1x+=t1xp;
    2c76:	9a08      	ldr	r2, [sp, #32]
    		if(!changed2) t2x += signx2;
    2c78:	9909      	ldr	r1, [sp, #36]	; 0x24
    		if(minx>t1x) minx=t1x; if(minx>t2x) minx=t2x;
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,fill_color);    // Draw line from min to max points found on the y
    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    2c7a:	eb08 0302 	add.w	r3, r8, r2
    2c7e:	fa1f f883 	uxth.w	r8, r3
    		if(!changed2) t2x += signx2;
    2c82:	b919      	cbnz	r1, 2c8c <GLCD_Triangle+0x488>
    2c84:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    2c88:	4474      	add	r4, lr
    2c8a:	b2a4      	uxth	r4, r4
    		t2x+=t2xp;
        	y += 1;
    2c8c:	9906      	ldr	r1, [sp, #24]
    		GLCD_Line(minx,y,maxx,y,fill_color);    // Draw line from min to max points found on the y
    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    2c8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2c90:	1823      	adds	r3, r4, r0
        	y += 1;
    2c92:	1c48      	adds	r0, r1, #1
    		GLCD_Line(minx,y,maxx,y,fill_color);    // Draw line from min to max points found on the y
    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    2c94:	b29c      	uxth	r4, r3
        	y += 1;
    2c96:	b283      	uxth	r3, r0
    2c98:	9306      	str	r3, [sp, #24]
    		if(y>p3->y) break;
    2c9a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    2c9e:	9906      	ldr	r1, [sp, #24]
    2ca0:	4281      	cmp	r1, r0
    2ca2:	f73f adbc 	bgt.w	281e <GLCD_Triangle+0x1a>
    		changed1 = TRUE;
    	} else changed1=FALSE;

    	e1 = (uint8_t)(dx1>>1);

    	for (uint8_t i = 0; i<=dx1; i++)
    2ca6:	f10a 0a01 	add.w	sl, sl, #1
    2caa:	fa5f fa8a 	uxtb.w	sl, sl
    2cae:	e769      	b.n	2b84 <GLCD_Triangle+0x380>

00002cb0 <GLCD_Frame>:
 *              color        Boundary color
 *              fill_color   Frame fill color
 * @return 		None
 **********************************************************************/
void GLCD_Frame(COORDINATE_Type *p1, COORDINATE_Type *p2, int16_t frame_width, uint16_t color, uint16_t fill_color)
{
    2cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2cb4:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    2cb8:	4605      	mov	r5, r0
    2cba:	460c      	mov	r4, r1
    2cbc:	4691      	mov	r9, r2
    2cbe:	461f      	mov	r7, r3
    2cc0:	b296      	uxth	r6, r2
	int16_t fw;                          // Find the y min and max

	fw = frame_width;

	while(fw)
    2cc2:	2e00      	cmp	r6, #0
    2cc4:	d058      	beq.n	2d78 <GLCD_Frame+0xc8>
    2cc6:	8869      	ldrh	r1, [r5, #2]
	{
		if(fw < frame_width)
    2cc8:	b233      	sxth	r3, r6
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, fill_color);      // Draw the interior 4 sides
    2cca:	1872      	adds	r2, r6, r1

	fw = frame_width;

	while(fw)
	{
		if(fw < frame_width)
    2ccc:	454b      	cmp	r3, r9
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, fill_color);      // Draw the interior 4 sides
    2cce:	b211      	sxth	r1, r2
    2cd0:	f9b5 0000 	ldrsh.w	r0, [r5]
    2cd4:	f9b4 2000 	ldrsh.w	r2, [r4]

	fw = frame_width;

	while(fw)
	{
		if(fw < frame_width)
    2cd8:	da26      	bge.n	2d28 <GLCD_Frame+0x78>
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, fill_color);      // Draw the interior 4 sides
    2cda:	460b      	mov	r3, r1
    2cdc:	f8cd 8000 	str.w	r8, [sp]
    2ce0:	f7ff fd1c 	bl	271c <GLCD_Line>
			GLCD_Line(p1->x, p2->y-fw, p2->x, p2->y-fw, fill_color);
    2ce4:	8861      	ldrh	r1, [r4, #2]
    2ce6:	f9b5 0000 	ldrsh.w	r0, [r5]
    2cea:	1b8a      	subs	r2, r1, r6
    2cec:	b211      	sxth	r1, r2
    2cee:	460b      	mov	r3, r1
    2cf0:	f9b4 2000 	ldrsh.w	r2, [r4]
    2cf4:	f8cd 8000 	str.w	r8, [sp]
    2cf8:	f7ff fd10 	bl	271c <GLCD_Line>
			GLCD_Line(p1->x+fw, p1->y, p1->x+fw, p2->y, fill_color);
    2cfc:	8828      	ldrh	r0, [r5, #0]
    2cfe:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    2d02:	1833      	adds	r3, r6, r0
    2d04:	b218      	sxth	r0, r3
    2d06:	4602      	mov	r2, r0
    2d08:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    2d0c:	f8cd 8000 	str.w	r8, [sp]
    2d10:	f7ff fd04 	bl	271c <GLCD_Line>
			GLCD_Line(p2->x-fw, p1->y, p2->x-fw, p2->y, fill_color);
    2d14:	8821      	ldrh	r1, [r4, #0]
    2d16:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    2d1a:	1b8a      	subs	r2, r1, r6
    2d1c:	b210      	sxth	r0, r2
    2d1e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    2d22:	f8cd 8000 	str.w	r8, [sp]
    2d26:	e021      	b.n	2d6c <GLCD_Frame+0xbc>
			fw--;
		}
		else
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, color);      // inner border 4 sides
    2d28:	460b      	mov	r3, r1
    2d2a:	9700      	str	r7, [sp, #0]
    2d2c:	f7ff fcf6 	bl	271c <GLCD_Line>
			GLCD_Line(p1->x, p2->y-fw, p2->x, p2->y-fw, color);
    2d30:	8860      	ldrh	r0, [r4, #2]
    2d32:	f9b4 2000 	ldrsh.w	r2, [r4]
    2d36:	1b83      	subs	r3, r0, r6
    2d38:	b219      	sxth	r1, r3
    2d3a:	460b      	mov	r3, r1
    2d3c:	f9b5 0000 	ldrsh.w	r0, [r5]
    2d40:	9700      	str	r7, [sp, #0]
    2d42:	f7ff fceb 	bl	271c <GLCD_Line>
			GLCD_Line(p1->x+fw, p1->y, p1->x+fw, p2->y, color);
    2d46:	8829      	ldrh	r1, [r5, #0]
    2d48:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    2d4c:	1872      	adds	r2, r6, r1
    2d4e:	b210      	sxth	r0, r2
    2d50:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    2d54:	4602      	mov	r2, r0
    2d56:	9700      	str	r7, [sp, #0]
    2d58:	f7ff fce0 	bl	271c <GLCD_Line>
			GLCD_Line(p2->x-fw, p1->y, p2->x-fw, p2->y, color);
    2d5c:	8820      	ldrh	r0, [r4, #0]
    2d5e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    2d62:	1b83      	subs	r3, r0, r6
    2d64:	b218      	sxth	r0, r3
    2d66:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    2d6a:	9700      	str	r7, [sp, #0]
    2d6c:	4602      	mov	r2, r0
    2d6e:	3e01      	subs	r6, #1
    2d70:	f7ff fcd4 	bl	271c <GLCD_Line>
    2d74:	b2b6      	uxth	r6, r6
    2d76:	e7a4      	b.n	2cc2 <GLCD_Frame+0x12>
		}
	}

	if(!fw)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
    2d78:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    2d7c:	f9b5 0000 	ldrsh.w	r0, [r5]
    2d80:	f9b4 2000 	ldrsh.w	r2, [r4]
    2d84:	460b      	mov	r3, r1
    2d86:	9700      	str	r7, [sp, #0]
    2d88:	f7ff fcc8 	bl	271c <GLCD_Line>
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
    2d8c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    2d90:	f9b5 0000 	ldrsh.w	r0, [r5]
    2d94:	f9b4 2000 	ldrsh.w	r2, [r4]
    2d98:	460b      	mov	r3, r1
    2d9a:	9700      	str	r7, [sp, #0]
    2d9c:	f7ff fcbe 	bl	271c <GLCD_Line>
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
    2da0:	f9b5 0000 	ldrsh.w	r0, [r5]
    2da4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    2da8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    2dac:	4602      	mov	r2, r0
    2dae:	9700      	str	r7, [sp, #0]
    2db0:	f7ff fcb4 	bl	271c <GLCD_Line>
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    2db4:	f9b4 0000 	ldrsh.w	r0, [r4]
    2db8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    2dbc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    2dc0:	4602      	mov	r2, r0
    2dc2:	970a      	str	r7, [sp, #40]	; 0x28
	}
}
    2dc4:	b003      	add	sp, #12
    2dc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(!fw)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    2dca:	f7ff bca7 	b.w	271c <GLCD_Line>

00002dce <GLCD_Circle>:
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
{
    2dce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dd2:	b08d      	sub	sp, #52	; 0x34
    2dd4:	9009      	str	r0, [sp, #36]	; 0x24
    2dd6:	910a      	str	r1, [sp, #40]	; 0x28
    2dd8:	930b      	str	r3, [sp, #44]	; 0x2c
    2dda:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
    2dde:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
	int16_t a, b, P;
	a = 0;
	b = radius;
	P = 1 - radius;
    2de2:	f1c2 0101 	rsb	r1, r2, #1
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
{
    2de6:	4694      	mov	ip, r2
	int16_t a, b, P;
	a = 0;
	b = radius;
	P = 1 - radius;
    2de8:	b28a      	uxth	r2, r1
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
{
    2dea:	9305      	str	r3, [sp, #20]
    2dec:	9008      	str	r0, [sp, #32]
	int16_t a, b, P;
	a = 0;
	b = radius;
	P = 1 - radius;
    2dee:	9207      	str	r2, [sp, #28]
    2df0:	4616      	mov	r6, r2
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
{
	int16_t a, b, P;
	a = 0;
	b = radius;
    2df2:	4665      	mov	r5, ip
	P = 1 - radius;
    2df4:	2400      	movs	r4, #0

	do
	{
		if(fill)
    2df6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2df8:	2f00      	cmp	r7, #0
    2dfa:	d043      	beq.n	2e84 <GLCD_Circle+0xb6>
		{
			GLCD_Line(x-a, y+b, x+a, y+b, fill_color);
    2dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
    2e00:	fa1f f883 	uxth.w	r8, r3
    2e04:	b28f      	uxth	r7, r1
    2e06:	fa1f f985 	uxth.w	r9, r5
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e0a:	b2a0      	uxth	r0, r4

	do
	{
		if(fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, fill_color);
    2e0c:	eb09 0207 	add.w	r2, r9, r7
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e10:	ebc0 0b08 	rsb	fp, r0, r8
    2e14:	eb00 0a08 	add.w	sl, r0, r8

	do
	{
		if(fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, fill_color);
    2e18:	9b08      	ldr	r3, [sp, #32]
    2e1a:	b211      	sxth	r1, r2
    2e1c:	fa0f fb8b 	sxth.w	fp, fp
    2e20:	fa0f fa8a 	sxth.w	sl, sl
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e24:	9006      	str	r0, [sp, #24]

	do
	{
		if(fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, fill_color);
    2e26:	9300      	str	r3, [sp, #0]
    2e28:	4658      	mov	r0, fp
    2e2a:	460b      	mov	r3, r1
    2e2c:	4652      	mov	r2, sl
    2e2e:	f8cd c00c 	str.w	ip, [sp, #12]
    2e32:	f7ff fc73 	bl	271c <GLCD_Line>
			GLCD_Line(x-a, y-b, x+a, y-b, fill_color);
    2e36:	ebc9 0007 	rsb	r0, r9, r7
    2e3a:	9a08      	ldr	r2, [sp, #32]
    2e3c:	b201      	sxth	r1, r0
    2e3e:	460b      	mov	r3, r1
    2e40:	4658      	mov	r0, fp
    2e42:	9200      	str	r2, [sp, #0]
    2e44:	4652      	mov	r2, sl
    2e46:	f7ff fc69 	bl	271c <GLCD_Line>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e4a:	9906      	ldr	r1, [sp, #24]
	{
		if(fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, fill_color);
    2e4c:	ebc9 0c08 	rsb	ip, r9, r8
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e50:	19cb      	adds	r3, r1, r7
	{
		if(fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, fill_color);
    2e52:	9808      	ldr	r0, [sp, #32]
    2e54:	44c8      	add	r8, r9
    2e56:	b219      	sxth	r1, r3
    2e58:	fa0f f98c 	sxth.w	r9, ip
    2e5c:	fa0f fb88 	sxth.w	fp, r8
    2e60:	460b      	mov	r3, r1
    2e62:	9000      	str	r0, [sp, #0]
    2e64:	465a      	mov	r2, fp
    2e66:	4648      	mov	r0, r9
    2e68:	f7ff fc58 	bl	271c <GLCD_Line>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e6c:	9a06      	ldr	r2, [sp, #24]
		if(fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, fill_color);
    2e6e:	9b08      	ldr	r3, [sp, #32]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e70:	1abf      	subs	r7, r7, r2
		if(fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, fill_color);
    2e72:	b239      	sxth	r1, r7
    2e74:	9300      	str	r3, [sp, #0]
    2e76:	4648      	mov	r0, r9
    2e78:	465a      	mov	r2, fp
    2e7a:	460b      	mov	r3, r1
    2e7c:	f7ff fc4e 	bl	271c <GLCD_Line>
    2e80:	f8dd c00c 	ldr.w	ip, [sp, #12]
		}

		if(P < 0)
    2e84:	0431      	lsls	r1, r6, #16
    2e86:	d507      	bpl.n	2e98 <GLCD_Circle+0xca>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e88:	b2a1      	uxth	r1, r4
			GLCD_Line(x-b, y+a, x+b, y+a, fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, fill_color);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    2e8a:	1cf0      	adds	r0, r6, #3
    2e8c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e90:	1c4f      	adds	r7, r1, #1
			GLCD_Line(x-b, y+a, x+b, y+a, fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, fill_color);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    2e92:	b296      	uxth	r6, r2
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2e94:	b2bb      	uxth	r3, r7
    2e96:	e009      	b.n	2eac <GLCD_Circle+0xde>
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    2e98:	b229      	sxth	r1, r5
    2e9a:	3605      	adds	r6, #5
    2e9c:	1a60      	subs	r0, r4, r1
    2e9e:	eb06 0240 	add.w	r2, r6, r0, lsl #1
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2ea2:	1c67      	adds	r7, r4, #1
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    2ea4:	3d01      	subs	r5, #1
    2ea6:	b296      	uxth	r6, r2
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2ea8:	b2bb      	uxth	r3, r7
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    2eaa:	b2ad      	uxth	r5, r5
	} while(a <= b);
    2eac:	b21b      	sxth	r3, r3
    2eae:	b229      	sxth	r1, r5
    2eb0:	3401      	adds	r4, #1
    2eb2:	428b      	cmp	r3, r1
    2eb4:	dd9f      	ble.n	2df6 <GLCD_Circle+0x28>
    2eb6:	4665      	mov	r5, ip
    2eb8:	f04f 0900 	mov.w	r9, #0
	P = 1 - radius;
	do
	{
		if(!fill)
		{
			GLCD_PutPixel(a+x, b+y, color);
    2ebc:	9e09      	ldr	r6, [sp, #36]	; 0x24
    2ebe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    2ec0:	fa1f f886 	uxth.w	r8, r6
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2ec4:	fa1f f489 	uxth.w	r4, r9
	P = 1 - radius;
	do
	{
		if(!fill)
		{
			GLCD_PutPixel(a+x, b+y, color);
    2ec8:	b2ae      	uxth	r6, r5
    2eca:	b2bf      	uxth	r7, r7
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2ecc:	eb04 0008 	add.w	r0, r4, r8
	P = 1 - radius;
	do
	{
		if(!fill)
		{
			GLCD_PutPixel(a+x, b+y, color);
    2ed0:	eb06 0e07 	add.w	lr, r6, r7
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2ed4:	b282      	uxth	r2, r0
	P = 1 - radius;
	do
	{
		if(!fill)
		{
			GLCD_PutPixel(a+x, b+y, color);
    2ed6:	fa1f fa8e 	uxth.w	sl, lr
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2eda:	9206      	str	r2, [sp, #24]
	P = 1 - radius;
	do
	{
		if(!fill)
		{
			GLCD_PutPixel(a+x, b+y, color);
    2edc:	4651      	mov	r1, sl
    2ede:	9806      	ldr	r0, [sp, #24]
    2ee0:	9a05      	ldr	r2, [sp, #20]
			GLCD_PutPixel(b+x, a+y, color);
    2ee2:	eb06 0b08 	add.w	fp, r6, r8
	P = 1 - radius;
	do
	{
		if(!fill)
		{
			GLCD_PutPixel(a+x, b+y, color);
    2ee6:	f8cd a00c 	str.w	sl, [sp, #12]
    2eea:	f7ff fbff 	bl	26ec <GLCD_PutPixel>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2eee:	19e3      	adds	r3, r4, r7
    2ef0:	b29b      	uxth	r3, r3
	do
	{
		if(!fill)
		{
			GLCD_PutPixel(a+x, b+y, color);
			GLCD_PutPixel(b+x, a+y, color);
    2ef2:	fa1f fb8b 	uxth.w	fp, fp
    2ef6:	4619      	mov	r1, r3
    2ef8:	4658      	mov	r0, fp
    2efa:	9a05      	ldr	r2, [sp, #20]
    2efc:	9304      	str	r3, [sp, #16]
    2efe:	f7ff fbf5 	bl	26ec <GLCD_PutPixel>
			GLCD_PutPixel(x-a, b+y, color);
    2f02:	f8dd c00c 	ldr.w	ip, [sp, #12]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2f06:	ebc4 0108 	rsb	r1, r4, r8
    2f0a:	fa1f fa81 	uxth.w	sl, r1
	{
		if(!fill)
		{
			GLCD_PutPixel(a+x, b+y, color);
			GLCD_PutPixel(b+x, a+y, color);
			GLCD_PutPixel(x-a, b+y, color);
    2f0e:	4650      	mov	r0, sl
    2f10:	4661      	mov	r1, ip
    2f12:	9a05      	ldr	r2, [sp, #20]
    2f14:	f7ff fbea 	bl	26ec <GLCD_PutPixel>
			GLCD_PutPixel(x-b, a+y, color);
    2f18:	ebc6 0808 	rsb	r8, r6, r8
    2f1c:	9a04      	ldr	r2, [sp, #16]
    2f1e:	fa1f f888 	uxth.w	r8, r8
    2f22:	4611      	mov	r1, r2
    2f24:	4640      	mov	r0, r8
    2f26:	9a05      	ldr	r2, [sp, #20]
    2f28:	f7ff fbe0 	bl	26ec <GLCD_PutPixel>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2f2c:	1b38      	subs	r0, r7, r4
    2f2e:	b283      	uxth	r3, r0
			GLCD_PutPixel(a+x, b+y, color);
			GLCD_PutPixel(b+x, a+y, color);
			GLCD_PutPixel(x-a, b+y, color);
			GLCD_PutPixel(x-b, a+y, color);
			GLCD_PutPixel(b+x, y-a, color);
			GLCD_PutPixel(a+x, y-b, color);
    2f30:	1bbe      	subs	r6, r7, r6
		{
			GLCD_PutPixel(a+x, b+y, color);
			GLCD_PutPixel(b+x, a+y, color);
			GLCD_PutPixel(x-a, b+y, color);
			GLCD_PutPixel(x-b, a+y, color);
			GLCD_PutPixel(b+x, y-a, color);
    2f32:	4619      	mov	r1, r3
    2f34:	4658      	mov	r0, fp
    2f36:	9a05      	ldr	r2, [sp, #20]
			GLCD_PutPixel(a+x, y-b, color);
    2f38:	b2b6      	uxth	r6, r6
		{
			GLCD_PutPixel(a+x, b+y, color);
			GLCD_PutPixel(b+x, a+y, color);
			GLCD_PutPixel(x-a, b+y, color);
			GLCD_PutPixel(x-b, a+y, color);
			GLCD_PutPixel(b+x, y-a, color);
    2f3a:	9304      	str	r3, [sp, #16]
    2f3c:	f7ff fbd6 	bl	26ec <GLCD_PutPixel>
			GLCD_PutPixel(a+x, y-b, color);
    2f40:	9806      	ldr	r0, [sp, #24]
    2f42:	4631      	mov	r1, r6
    2f44:	9a05      	ldr	r2, [sp, #20]
    2f46:	f7ff fbd1 	bl	26ec <GLCD_PutPixel>
			GLCD_PutPixel(x-a, y-b, color);
    2f4a:	4650      	mov	r0, sl
    2f4c:	4631      	mov	r1, r6
    2f4e:	9a05      	ldr	r2, [sp, #20]
    2f50:	f7ff fbcc 	bl	26ec <GLCD_PutPixel>
			GLCD_PutPixel(x-b, y-a, color);
    2f54:	4640      	mov	r0, r8
    2f56:	9a05      	ldr	r2, [sp, #20]
    2f58:	9904      	ldr	r1, [sp, #16]
    2f5a:	f7ff fbc7 	bl	26ec <GLCD_PutPixel>
		}

		if(P < 0)
    2f5e:	9807      	ldr	r0, [sp, #28]
    2f60:	0402      	lsls	r2, r0, #16
    2f62:	d507      	bpl.n	2f74 <GLCD_Circle+0x1a6>
			P+= 3 + 2*a++;
    2f64:	3003      	adds	r0, #3
    2f66:	eb00 0244 	add.w	r2, r0, r4, lsl #1
    2f6a:	b291      	uxth	r1, r2
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2f6c:	3401      	adds	r4, #1
			GLCD_PutPixel(x-a, y-b, color);
			GLCD_PutPixel(x-b, y-a, color);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    2f6e:	9107      	str	r1, [sp, #28]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2f70:	b2a3      	uxth	r3, r4
    2f72:	e00c      	b.n	2f8e <GLCD_Circle+0x1c0>
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    2f74:	9a07      	ldr	r2, [sp, #28]
    2f76:	b22b      	sxth	r3, r5
    2f78:	1d51      	adds	r1, r2, #5
    2f7a:	ebc3 0009 	rsb	r0, r3, r9
    2f7e:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    2f82:	b291      	uxth	r1, r2
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2f84:	3401      	adds	r4, #1
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    2f86:	3d01      	subs	r5, #1
    2f88:	9107      	str	r1, [sp, #28]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius, Bool fill, uint16_t color, uint16_t fill_color)
    2f8a:	b2a3      	uxth	r3, r4
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    2f8c:	b2ad      	uxth	r5, r5
	} while(a <= b);
    2f8e:	b21c      	sxth	r4, r3
    2f90:	b22b      	sxth	r3, r5
    2f92:	429c      	cmp	r4, r3
    2f94:	f109 0901 	add.w	r9, r9, #1
    2f98:	dd90      	ble.n	2ebc <GLCD_Circle+0xee>
}
    2f9a:	b00d      	add	sp, #52	; 0x34
    2f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002fa0 <GLCD_Window>:
 *              w        width of bitmap
 *              h        height of bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Window (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
    2fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fa2:	4605      	mov	r5, r0
	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    2fa4:	2045      	movs	r0, #69	; 0x45
 *              w        width of bitmap
 *              h        height of bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Window (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
    2fa6:	460c      	mov	r4, r1
    2fa8:	4616      	mov	r6, r2
    2faa:	461f      	mov	r7, r3
	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    2fac:	f7ff fa90 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    2fb0:	4628      	mov	r0, r5
    2fb2:	f7ff fabb 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
	Write_Data_Glcd(x+w-1);
    2fb6:	3d01      	subs	r5, #1
void GLCD_Window (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
	Write_Data_Glcd(x);

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
    2fb8:	2046      	movs	r0, #70	; 0x46
    2fba:	f7ff fa89 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x+w-1);
    2fbe:	1970      	adds	r0, r6, r5
    2fc0:	b280      	uxth	r0, r0
    2fc2:	f7ff fab3 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
    2fc6:	2044      	movs	r0, #68	; 0x44
    2fc8:	f7ff fa82 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    2fcc:	4620      	mov	r0, r4
    2fce:	f7ff faad 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
    2fd2:	2044      	movs	r0, #68	; 0x44
    2fd4:	f7ff fa7c 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd((y+h-1)<<8);
    2fd8:	3c01      	subs	r4, #1
    2fda:	193f      	adds	r7, r7, r4
    2fdc:	0239      	lsls	r1, r7, #8
    2fde:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
}
    2fe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
	Write_Data_Glcd((y+h-1)<<8);
    2fe6:	f7ff baa1 	b.w	252c <Write_Data_Glcd>

00002fea <GLCD_Display_String>:
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
{
    2fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fec:	4607      	mov	r7, r0
	GLCD_Window(0,0,320,240);  // Window Max
    2fee:	2000      	movs	r0, #0
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
{
    2ff0:	460e      	mov	r6, r1
    2ff2:	4615      	mov	r5, r2
	GLCD_Window(0,0,320,240);  // Window Max
    2ff4:	4601      	mov	r1, r0
    2ff6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2ffa:	23f0      	movs	r3, #240	; 0xf0
    2ffc:	f7ff ffd0 	bl	2fa0 <GLCD_Window>
	while (*s)
    3000:	2400      	movs	r4, #0
 * @param[in]	ln       line number
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
    3002:	1931      	adds	r1, r6, r4
    3004:	3401      	adds	r4, #1
    3006:	192b      	adds	r3, r5, r4
{
	GLCD_Window(0,0,320,240);  // Window Max
	while (*s)
    3008:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 * @param[in]	ln       line number
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
    300c:	b289      	uxth	r1, r1
{
	GLCD_Window(0,0,320,240);  // Window Max
	while (*s)
    300e:	b11a      	cbz	r2, 3018 <GLCD_Display_String+0x2e>
	{
		GLCD_Display_Char(ln, col++, *s++);
    3010:	4638      	mov	r0, r7
    3012:	f7ff fb57 	bl	26c4 <GLCD_Display_Char>
    3016:	e7f4      	b.n	3002 <GLCD_Display_String+0x18>
	}
}
    3018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000301a <GLCD_ClearLn>:
 * @brief	    Clear given line
 * @param[in]	ln       line number
 * @return 		None
 **********************************************************************/
void GLCD_ClearLn (uint16_t ln)
{
    301a:	b510      	push	{r4, lr}
    301c:	4604      	mov	r4, r0
	GLCD_Window(0,0,320,240);  // Window Max
    301e:	2000      	movs	r0, #0
    3020:	4601      	mov	r1, r0
    3022:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3026:	23f0      	movs	r3, #240	; 0xf0
    3028:	f7ff ffba 	bl	2fa0 <GLCD_Window>
	GLCD_Display_String(ln, 0, "                    ");
    302c:	4a03      	ldr	r2, [pc, #12]	; (303c <GLCD_ClearLn+0x22>)
    302e:	4620      	mov	r0, r4
    3030:	2100      	movs	r1, #0
}
    3032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @return 		None
 **********************************************************************/
void GLCD_ClearLn (uint16_t ln)
{
	GLCD_Window(0,0,320,240);  // Window Max
	GLCD_Display_String(ln, 0, "                    ");
    3036:	f7ff bfd8 	b.w	2fea <GLCD_Display_String>
    303a:	bf00      	nop
    303c:	0000566a 	.word	0x0000566a

00003040 <GLCD_Clear>:
 * @brief	    Clear display
 * @param[in]	color    display clearing color
 * @return 		None
 **********************************************************************/
void GLCD_Clear (uint16_t color)
{
    3040:	b538      	push	{r3, r4, r5, lr}
    3042:	4605      	mov	r5, r0
	unsigned int   i;

	GLCD_Window (0,0,320,240);    // Window Max
    3044:	2000      	movs	r0, #0
    3046:	4601      	mov	r1, r0
    3048:	f44f 72a0 	mov.w	r2, #320	; 0x140
    304c:	23f0      	movs	r3, #240	; 0xf0
    304e:	f7ff ffa7 	bl	2fa0 <GLCD_Window>

	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    3052:	204e      	movs	r0, #78	; 0x4e
    3054:	f7ff fa3c 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0);
    3058:	2000      	movs	r0, #0
    305a:	f7ff fa67 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    305e:	204f      	movs	r0, #79	; 0x4f
    3060:	f7ff fa36 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0);
    3064:	2000      	movs	r0, #0
    3066:	f7ff fa61 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x22);
    306a:	2022      	movs	r0, #34	; 0x22
    306c:	f7ff fa30 	bl	24d0 <Write_Command_Glcd>
	wr_dat_start();
    3070:	f7ff f9da 	bl	2428 <wr_dat_start>
    3074:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
	for(i = 0; i < (WIDTH*HEIGHT); i++)
		wr_dat_only(color);
    3078:	4628      	mov	r0, r5
    307a:	f7ff f9e9 	bl	2450 <wr_dat_only>
	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
	Write_Data_Glcd(0);

	Write_Command_Glcd(0x22);
	wr_dat_start();
	for(i = 0; i < (WIDTH*HEIGHT); i++)
    307e:	3c01      	subs	r4, #1
    3080:	d1fa      	bne.n	3078 <GLCD_Clear+0x38>
		wr_dat_only(color);
	wr_dat_stop();
}
    3082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	Write_Command_Glcd(0x22);
	wr_dat_start();
	for(i = 0; i < (WIDTH*HEIGHT); i++)
		wr_dat_only(color);
	wr_dat_stop();
    3086:	f7ff b9dd 	b.w	2444 <wr_dat_stop>

0000308a <GLCD_Set_Loc>:
 *              w        width of bitmap
 *              h        height of bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Set_Loc (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
    308a:	b538      	push	{r3, r4, r5, lr}
    308c:	460c      	mov	r4, r1
    308e:	4605      	mov	r5, r0
	GLCD_Window (x,y,w,h);
    3090:	f7ff ff86 	bl	2fa0 <GLCD_Window>

	Write_Command_Glcd(0x4E);    // GDDRAM Horizontal
    3094:	204e      	movs	r0, #78	; 0x4e
    3096:	f7ff fa1b 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(x);       // Page 58 of SSD2119 datasheet
    309a:	4628      	mov	r0, r5
    309c:	f7ff fa46 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);    // GDDRAM Vertical
    30a0:	204f      	movs	r0, #79	; 0x4f
    30a2:	f7ff fa15 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(y);       // Page 58 of SSD2119 datasheet
    30a6:	4620      	mov	r0, r4
    30a8:	f7ff fa40 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x22);    // RAM data write/read
    30ac:	2022      	movs	r0, #34	; 0x22
}
    30ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Write_Data_Glcd(x);       // Page 58 of SSD2119 datasheet

	Write_Command_Glcd(0x4F);    // GDDRAM Vertical
	Write_Data_Glcd(y);       // Page 58 of SSD2119 datasheet

	Write_Command_Glcd(0x22);    // RAM data write/read
    30b2:	f7ff ba0d 	b.w	24d0 <Write_Command_Glcd>

000030b6 <GLCD_Window_Fill>:
 *              h        height of bitmap
 *              color    window color
 * @return 		None
 **********************************************************************/
void GLCD_Window_Fill (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
    30b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30ba:	4617      	mov	r7, r2
    30bc:	461e      	mov	r6, r3
    30be:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	uint32_t i,j;

	GLCD_Set_Loc (x,y,w,h);
    30c2:	f7ff ffe2 	bl	308a <GLCD_Set_Loc>

	wr_dat_start();
    30c6:	f7ff f9af 	bl	2428 <wr_dat_start>
	for (j = 0; j < h; j++)
    30ca:	2400      	movs	r4, #0
    30cc:	42b4      	cmp	r4, r6
    30ce:	d209      	bcs.n	30e4 <GLCD_Window_Fill+0x2e>
    30d0:	2500      	movs	r5, #0
	{
		for (i = 0; i < w; i++)
    30d2:	42bd      	cmp	r5, r7
    30d4:	d204      	bcs.n	30e0 <GLCD_Window_Fill+0x2a>
		{
			wr_dat_only(color);
    30d6:	4640      	mov	r0, r8
    30d8:	f7ff f9ba 	bl	2450 <wr_dat_only>
	GLCD_Set_Loc (x,y,w,h);

	wr_dat_start();
	for (j = 0; j < h; j++)
	{
		for (i = 0; i < w; i++)
    30dc:	3501      	adds	r5, #1
    30de:	e7f8      	b.n	30d2 <GLCD_Window_Fill+0x1c>
	uint32_t i,j;

	GLCD_Set_Loc (x,y,w,h);

	wr_dat_start();
	for (j = 0; j < h; j++)
    30e0:	3401      	adds	r4, #1
    30e2:	e7f3      	b.n	30cc <GLCD_Window_Fill+0x16>
		{
			wr_dat_only(color);
		}
	}
	wr_dat_stop();
}
    30e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		for (i = 0; i < w; i++)
		{
			wr_dat_only(color);
		}
	}
	wr_dat_stop();
    30e8:	f7ff b9ac 	b.w	2444 <wr_dat_stop>

000030ec <GLCD_Rect>:
 *              color        Boundary color
 *              fill_color   fill color
 * @return 		None
 **********************************************************************/
void GLCD_Rect(COORDINATE_Type *p1, COORDINATE_Type *p2, Bool fill, uint16_t color, uint16_t fill_color)
{
    30ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    30f0:	460c      	mov	r4, r1
    30f2:	4605      	mov	r5, r0
    30f4:	4698      	mov	r8, r3
    30f6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
	int16_t  width,height;                          // Find the y min and max

	if(fill)
    30fa:	2a00      	cmp	r2, #0
    30fc:	d041      	beq.n	3182 <GLCD_Rect+0x96>
	{
		if(p2->x > p1->x)
    30fe:	f8b0 e000 	ldrh.w	lr, [r0]
    3102:	8822      	ldrh	r2, [r4, #0]
    3104:	fa0f f38e 	sxth.w	r3, lr
    3108:	b210      	sxth	r0, r2
    310a:	8867      	ldrh	r7, [r4, #2]
    310c:	886e      	ldrh	r6, [r5, #2]
    310e:	4298      	cmp	r0, r3
		{
			if(p2->y > p1->y)
    3110:	b238      	sxth	r0, r7
    3112:	b233      	sxth	r3, r6
{
	int16_t  width,height;                          // Find the y min and max

	if(fill)
	{
		if(p2->x > p1->x)
    3114:	dd13      	ble.n	313e <GLCD_Rect+0x52>
		{
			if(p2->y > p1->y)
    3116:	4298      	cmp	r0, r3
    3118:	fa1f fc8e 	uxth.w	ip, lr
    311c:	dd07      	ble.n	312e <GLCD_Rect+0x42>
			{
				width = p2->x - p1->x;
				height = p2->y - p1->y;
    311e:	b2b6      	uxth	r6, r6
	{
		if(p2->x > p1->x)
		{
			if(p2->y > p1->y)
			{
				width = p2->x - p1->x;
    3120:	3a01      	subs	r2, #1
				height = p2->y - p1->y;
				GLCD_Window_Fill(p1->x+1,p1->y+1,width-1,height-1,fill_color);
    3122:	f10c 0001 	add.w	r0, ip, #1
    3126:	1c73      	adds	r3, r6, #1
    3128:	ebcc 0202 	rsb	r2, ip, r2
    312c:	e011      	b.n	3152 <GLCD_Rect+0x66>
			}
			else
			{
				width = p2->x - p1->x;
				height = p1->y - p2->y;
    312e:	b2bf      	uxth	r7, r7
				height = p2->y - p1->y;
				GLCD_Window_Fill(p1->x+1,p1->y+1,width-1,height-1,fill_color);
			}
			else
			{
				width = p2->x - p1->x;
    3130:	3a01      	subs	r2, #1
				height = p1->y - p2->y;
				GLCD_Window_Fill(p1->x+1,p2->y+1,width-1,height-1,fill_color);
    3132:	f10c 0001 	add.w	r0, ip, #1
    3136:	1c7b      	adds	r3, r7, #1
    3138:	ebcc 0202 	rsb	r2, ip, r2
    313c:	e018      	b.n	3170 <GLCD_Rect+0x84>
			}
		}
		else
		{
			if(p2->y > p1->y)
    313e:	4298      	cmp	r0, r3
    3140:	b292      	uxth	r2, r2
    3142:	dd0e      	ble.n	3162 <GLCD_Rect+0x76>
			{
				width = p1->x - p2->x;
				height = p2->y - p1->y;
    3144:	b2b6      	uxth	r6, r6
		}
		else
		{
			if(p2->y > p1->y)
			{
				width = p1->x - p2->x;
    3146:	f10e 3eff 	add.w	lr, lr, #4294967295
				height = p2->y - p1->y;
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
    314a:	1c50      	adds	r0, r2, #1
    314c:	1c73      	adds	r3, r6, #1
    314e:	ebc2 020e 	rsb	r2, r2, lr
		else
		{
			if(p2->y > p1->y)
			{
				width = p1->x - p2->x;
				height = p2->y - p1->y;
    3152:	3f01      	subs	r7, #1
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
    3154:	1bbe      	subs	r6, r7, r6
    3156:	9100      	str	r1, [sp, #0]
    3158:	b280      	uxth	r0, r0
    315a:	b299      	uxth	r1, r3
    315c:	b292      	uxth	r2, r2
    315e:	b2b3      	uxth	r3, r6
    3160:	e00d      	b.n	317e <GLCD_Rect+0x92>
			}
			else
			{
				width = p1->x - p2->x;
				height = p1->y - p2->y;
    3162:	b2bf      	uxth	r7, r7
				height = p2->y - p1->y;
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
			}
			else
			{
				width = p1->x - p2->x;
    3164:	f10e 3cff 	add.w	ip, lr, #4294967295
				height = p1->y - p2->y;
				GLCD_Window_Fill(p2->x+1,p2->y+1,width-1,height-1,fill_color);
    3168:	1c50      	adds	r0, r2, #1
    316a:	1c7b      	adds	r3, r7, #1
    316c:	ebc2 020c 	rsb	r2, r2, ip
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
			}
			else
			{
				width = p1->x - p2->x;
				height = p1->y - p2->y;
    3170:	3e01      	subs	r6, #1
				GLCD_Window_Fill(p2->x+1,p2->y+1,width-1,height-1,fill_color);
    3172:	1bf7      	subs	r7, r6, r7
    3174:	9100      	str	r1, [sp, #0]
    3176:	b280      	uxth	r0, r0
    3178:	b299      	uxth	r1, r3
    317a:	b292      	uxth	r2, r2
    317c:	b2bb      	uxth	r3, r7
    317e:	f7ff ff9a 	bl	30b6 <GLCD_Window_Fill>
		}
		fill = NO;
	}
	if(!fill)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
    3182:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    3186:	f9b5 0000 	ldrsh.w	r0, [r5]
    318a:	f9b4 2000 	ldrsh.w	r2, [r4]
    318e:	460b      	mov	r3, r1
    3190:	f8cd 8000 	str.w	r8, [sp]
    3194:	f7ff fac2 	bl	271c <GLCD_Line>
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
    3198:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    319c:	f9b5 0000 	ldrsh.w	r0, [r5]
    31a0:	f9b4 2000 	ldrsh.w	r2, [r4]
    31a4:	460b      	mov	r3, r1
    31a6:	f8cd 8000 	str.w	r8, [sp]
    31aa:	f7ff fab7 	bl	271c <GLCD_Line>
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
    31ae:	f9b5 0000 	ldrsh.w	r0, [r5]
    31b2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    31b6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    31ba:	4602      	mov	r2, r0
    31bc:	f8cd 8000 	str.w	r8, [sp]
    31c0:	f7ff faac 	bl	271c <GLCD_Line>
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    31c4:	f9b4 0000 	ldrsh.w	r0, [r4]
    31c8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    31cc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    31d0:	4602      	mov	r2, r0
    31d2:	f8cd 8020 	str.w	r8, [sp, #32]
	}
}
    31d6:	b002      	add	sp, #8
    31d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if(!fill)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    31dc:	f7ff ba9e 	b.w	271c <GLCD_Line>

000031e0 <GLCD_Bitmap>:
 *              h        height of bitmap
 *              bitmap   address at which the bitmap data resides
 * @return 		None
 **********************************************************************/
void GLCD_Bitmap (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap)
{
    31e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
    31e8:	4617      	mov	r7, r2
    31ea:	4699      	mov	r9, r3
	uint32_t i,j,k;

	GLCD_Set_Loc (x,y,w,h);
    31ec:	f7ff ff4d 	bl	308a <GLCD_Set_Loc>

	wr_dat_start();
    31f0:	f7ff f91a 	bl	2428 <wr_dat_start>
	k = 16;
    31f4:	2510      	movs	r5, #16
	for (j = 0; j < h; j++)
    31f6:	2600      	movs	r6, #0
    31f8:	454e      	cmp	r6, r9
    31fa:	d20d      	bcs.n	3218 <GLCD_Bitmap+0x38>
 *              w        width of bitmap
 *              h        height of bitmap
 *              bitmap   address at which the bitmap data resides
 * @return 		None
 **********************************************************************/
void GLCD_Bitmap (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap)
    31fc:	eb08 0a45 	add.w	sl, r8, r5, lsl #1
    3200:	2400      	movs	r4, #0

	wr_dat_start();
	k = 16;
	for (j = 0; j < h; j++)
	{
		for (i = 0; i < w; i++)
    3202:	42bc      	cmp	r4, r7
    3204:	d205      	bcs.n	3212 <GLCD_Bitmap+0x32>
		{
			wr_dat_only(bitmap[k++]);
    3206:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
    320a:	f7ff f921 	bl	2450 <wr_dat_only>

	wr_dat_start();
	k = 16;
	for (j = 0; j < h; j++)
	{
		for (i = 0; i < w; i++)
    320e:	3401      	adds	r4, #1
    3210:	e7f7      	b.n	3202 <GLCD_Bitmap+0x22>
 *              w        width of bitmap
 *              h        height of bitmap
 *              bitmap   address at which the bitmap data resides
 * @return 		None
 **********************************************************************/
void GLCD_Bitmap (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap)
    3212:	19ed      	adds	r5, r5, r7

	GLCD_Set_Loc (x,y,w,h);

	wr_dat_start();
	k = 16;
	for (j = 0; j < h; j++)
    3214:	3601      	adds	r6, #1
    3216:	e7ef      	b.n	31f8 <GLCD_Bitmap+0x18>
		{
			wr_dat_only(bitmap[k++]);
		}
	}
	wr_dat_stop();
}
    3218:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		for (i = 0; i < w; i++)
		{
			wr_dat_only(bitmap[k++]);
		}
	}
	wr_dat_stop();
    321c:	f7ff b912 	b.w	2444 <wr_dat_stop>

00003220 <GLCD_Display_Home>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Display_Home (void)
{
	GLCD_Set_Loc (0,0,320,240);
    3220:	2000      	movs	r0, #0
    3222:	4601      	mov	r1, r0
    3224:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3228:	23f0      	movs	r3, #240	; 0xf0
    322a:	f7ff bf2e 	b.w	308a <GLCD_Set_Loc>

0000322e <GLCD_Driver_OutCtrl>:
 * 						- BOTTOM_LEFT
 * 						- BOTTOM_RIGHT
 * @return 		None
 **********************************************************************/
void GLCD_Driver_OutCtrl (DRIVER_OUT_Type drv)
{
    322e:	b510      	push	{r4, lr}
    3230:	4604      	mov	r4, r0
	Write_Command_Glcd(0x01);    // Driver Output Control
    3232:	2001      	movs	r0, #1
    3234:	f7ff f94c 	bl	24d0 <Write_Command_Glcd>

	switch (drv)
    3238:	2c03      	cmp	r4, #3
    323a:	d812      	bhi.n	3262 <GLCD_Driver_OutCtrl+0x34>
    323c:	e8df f004 	tbb	[pc, r4]
    3240:	0b080502 	.word	0x0b080502
	{
	case TOP_LEFT:
		Write_Data_Glcd(0x72EF);       // Page 36-39 of SSD2119 datasheet
    3244:	f247 20ef 	movw	r0, #29423	; 0x72ef
    3248:	e007      	b.n	325a <GLCD_Driver_OutCtrl+0x2c>
		break;

	case TOP_RIGHT:
		Write_Data_Glcd(0x70EF);       // Page 36-39 of SSD2119 datasheet
    324a:	f247 00ef 	movw	r0, #28911	; 0x70ef
    324e:	e004      	b.n	325a <GLCD_Driver_OutCtrl+0x2c>
		break;

	case BOTTOM_LEFT:
		Write_Data_Glcd(0x32EF);       // Page 36-39 of SSD2119 datasheet
    3250:	f243 20ef 	movw	r0, #13039	; 0x32ef
    3254:	e001      	b.n	325a <GLCD_Driver_OutCtrl+0x2c>
		break;

	case BOTTOM_RIGHT:
		Write_Data_Glcd(0x30EF);       // Page 36-39 of SSD2119 datasheet
    3256:	f243 00ef 	movw	r0, #12527	; 0x30ef
		break;

	default:
		break;
	}
}
    325a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BOTTOM_LEFT:
		Write_Data_Glcd(0x32EF);       // Page 36-39 of SSD2119 datasheet
		break;

	case BOTTOM_RIGHT:
		Write_Data_Glcd(0x30EF);       // Page 36-39 of SSD2119 datasheet
    325e:	f7ff b965 	b.w	252c <Write_Data_Glcd>
    3262:	bd10      	pop	{r4, pc}

00003264 <GLCD_Init>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Init (void)
{
	GPIO_SetDir(2, LCD_RS, 1);   // RS as output
    3264:	2101      	movs	r1, #1
 * @brief	    This function Initializes GLCD
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Init (void)
{
    3266:	b510      	push	{r4, lr}
	GPIO_SetDir(2, LCD_RS, 1);   // RS as output
    3268:	2002      	movs	r0, #2
    326a:	460a      	mov	r2, r1
    326c:	f7fc ffc5 	bl	1fa <GPIO_SetDir>
	GPIO_SetDir(0, LCD_RST, 1);  // Reset as Output
    3270:	2000      	movs	r0, #0
    3272:	2120      	movs	r1, #32
    3274:	2201      	movs	r2, #1
    3276:	f7fc ffc0 	bl	1fa <GPIO_SetDir>
	GPIO_SetDir(2, LCD_BK, 1);   // Backlight as output
    327a:	f44f 7180 	mov.w	r1, #256	; 0x100
    327e:	2201      	movs	r2, #1
    3280:	2002      	movs	r0, #2
    3282:	f7fc ffba 	bl	1fa <GPIO_SetDir>

	delay_ms(2);
    3286:	2002      	movs	r0, #2
    3288:	f7fd fff2 	bl	1270 <delay_ms>
	GLCD_Reset();                // Reset GLCD
    328c:	f7ff f8ff 	bl	248e <GLCD_Reset>
	GLCD_Backlight(ENABLE);
    3290:	2001      	movs	r0, #1
    3292:	f7ff f8f1 	bl	2478 <GLCD_Backlight>
	delay_ms(2);
    3296:	2002      	movs	r0, #2
    3298:	f7fd ffea 	bl	1270 <delay_ms>

	Write_Command_Glcd(0x28);    // VCOM OTP
    329c:	2028      	movs	r0, #40	; 0x28
    329e:	f7ff f917 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0006);     // Page 55-56 of SSD2119 datasheet
    32a2:	2006      	movs	r0, #6
    32a4:	f7ff f942 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x00);    // start Oscillator
    32a8:	2000      	movs	r0, #0
    32aa:	f7ff f911 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0001);     // Page 36 of SSD2119 datasheet
    32ae:	2001      	movs	r0, #1
    32b0:	f7ff f93c 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x10);    // Sleep mode
    32b4:	2010      	movs	r0, #16
    32b6:	f7ff f90b 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 49 of SSD2119 datasheet
    32ba:	2000      	movs	r0, #0
    32bc:	f7ff f936 	bl	252c <Write_Data_Glcd>

	GLCD_Driver_OutCtrl (TOP_LEFT);
    32c0:	2000      	movs	r0, #0
    32c2:	f7ff ffb4 	bl	322e <GLCD_Driver_OutCtrl>

	Write_Command_Glcd(0x02);    // LCD Driving Waveform Control
    32c6:	2002      	movs	r0, #2
    32c8:	f7ff f902 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0600);     // Page 40-42 of SSD2119 datasheet
    32cc:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    32d0:	f7ff f92c 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x03);    // Power Control 1
    32d4:	2003      	movs	r0, #3
    32d6:	f7ff f8fb 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x6A38);     // Page 43-44 of SSD2119 datasheet 6A38
    32da:	f646 2038 	movw	r0, #27192	; 0x6a38
    32de:	f7ff f925 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x11);    // Entry Mode
    32e2:	2011      	movs	r0, #17
    32e4:	f7ff f8f4 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x6870);     // Page 50-52 of SSD2119 datasheet
    32e8:	f646 0070 	movw	r0, #26736	; 0x6870
    32ec:	f7ff f91e 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x0F);    // Gate Scan Position
    32f0:	200f      	movs	r0, #15
    32f2:	f7ff f8ed 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 49 of SSD2119 datasheet
    32f6:	2000      	movs	r0, #0
    32f8:	f7ff f918 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x0B);    // Frame Cycle Control
    32fc:	200b      	movs	r0, #11
    32fe:	f7ff f8e7 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x5308);     // Page 45 of SSD2119 datasheet
    3302:	f245 3008 	movw	r0, #21256	; 0x5308
    3306:	f7ff f911 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x0C);    // Power Control 2
    330a:	200c      	movs	r0, #12
    330c:	f7ff f8e0 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0003);     // Page 47 of SSD2119 datasheet
    3310:	2003      	movs	r0, #3
    3312:	f7ff f90b 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x0D);    // Power Control 3
    3316:	200d      	movs	r0, #13
    3318:	f7ff f8da 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x000A);     // Page 48 of SSD2119 datasheet
    331c:	200a      	movs	r0, #10
    331e:	f7ff f905 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x0E);    // Power Control 4
    3322:	200e      	movs	r0, #14
    3324:	f7ff f8d4 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x2E00);     // Page 48 of SSD2119 datasheet
    3328:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
    332c:	f7ff f8fe 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x1E);    // Power Control 5
    3330:	201e      	movs	r0, #30
    3332:	f7ff f8cd 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x00BE);     // Page 53 of SSD2119 datasheet
    3336:	20be      	movs	r0, #190	; 0xbe
    3338:	f7ff f8f8 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x25);    // Frame Frequency Control
    333c:	2025      	movs	r0, #37	; 0x25
    333e:	f7ff f8c7 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x8000);     // Page 53 of SSD2119 datasheet  8000
    3342:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3346:	f7ff f8f1 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x26);    // Analog setting
    334a:	2026      	movs	r0, #38	; 0x26
    334c:	f7ff f8c0 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x7800);     // Page 54 of SSD2119 datasheet
    3350:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
    3354:	f7ff f8ea 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x4E);    // Ram Address Set
    3358:	204e      	movs	r0, #78	; 0x4e
    335a:	f7ff f8b9 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 58 of SSD2119 datasheet
    335e:	2000      	movs	r0, #0
    3360:	f7ff f8e4 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);    // Ram Address Set
    3364:	204f      	movs	r0, #79	; 0x4f
    3366:	f7ff f8b3 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 58 of SSD2119 datasheet
    336a:	2000      	movs	r0, #0
    336c:	f7ff f8de 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x12);    // Sleep mode
    3370:	2012      	movs	r0, #18
    3372:	f7ff f8ad 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x08D9);     // Page 49 of SSD2119 datasheet
    3376:	f640 00d9 	movw	r0, #2265	; 0x8d9
    337a:	f7ff f8d7 	bl	252c <Write_Data_Glcd>

	// Gamma Control (R30h to R3Bh) -- Page 56 of SSD2119 datasheet
	Write_Command_Glcd(0x30);
    337e:	2030      	movs	r0, #48	; 0x30
    3380:	f7ff f8a6 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);
    3384:	2000      	movs	r0, #0
    3386:	f7ff f8d1 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x31);
    338a:	2031      	movs	r0, #49	; 0x31
    338c:	f7ff f8a0 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0104);
    3390:	f44f 7082 	mov.w	r0, #260	; 0x104
    3394:	f7ff f8ca 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x32);
    3398:	2032      	movs	r0, #50	; 0x32
    339a:	f7ff f899 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0100);
    339e:	f44f 7080 	mov.w	r0, #256	; 0x100
    33a2:	f7ff f8c3 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x33);
	Write_Data_Glcd(0x0305);
    33a6:	f240 3405 	movw	r4, #773	; 0x305
	Write_Data_Glcd(0x0104);

	Write_Command_Glcd(0x32);
	Write_Data_Glcd(0x0100);

	Write_Command_Glcd(0x33);
    33aa:	2033      	movs	r0, #51	; 0x33
    33ac:	f7ff f890 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0305);
    33b0:	4620      	mov	r0, r4
    33b2:	f7ff f8bb 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x34);
    33b6:	2034      	movs	r0, #52	; 0x34
    33b8:	f7ff f88a 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0505);
    33bc:	f240 5005 	movw	r0, #1285	; 0x505
    33c0:	f7ff f8b4 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x35);
    33c4:	2035      	movs	r0, #53	; 0x35
    33c6:	f7ff f883 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0305);
    33ca:	4620      	mov	r0, r4
    33cc:	f7ff f8ae 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x36);
    33d0:	2036      	movs	r0, #54	; 0x36
    33d2:	f7ff f87d 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0707);
    33d6:	f240 7007 	movw	r0, #1799	; 0x707
    33da:	f7ff f8a7 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x37);
    33de:	2037      	movs	r0, #55	; 0x37
    33e0:	f7ff f876 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0300);
    33e4:	f44f 7040 	mov.w	r0, #768	; 0x300
    33e8:	f7ff f8a0 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x3A);
    33ec:	203a      	movs	r0, #58	; 0x3a
    33ee:	f7ff f86f 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x1200);
    33f2:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    33f6:	f7ff f899 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x3B);
    33fa:	203b      	movs	r0, #59	; 0x3b
    33fc:	f7ff f868 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0800);
    3400:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3404:	f7ff f892 	bl	252c <Write_Data_Glcd>

	Write_Command_Glcd(0x07);      // Display Control
    3408:	2007      	movs	r0, #7
    340a:	f7ff f861 	bl	24d0 <Write_Command_Glcd>
	Write_Data_Glcd(0x0033);       // Page 45 of SSD2119 datasheet
    340e:	2033      	movs	r0, #51	; 0x33
    3410:	f7ff f88c 	bl	252c <Write_Data_Glcd>

	delay_ms(5);
    3414:	2005      	movs	r0, #5
    3416:	f7fd ff2b 	bl	1270 <delay_ms>

	Write_Command_Glcd(0x22);    // RAM data write/read
    341a:	2022      	movs	r0, #34	; 0x22
}
    341c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Write_Command_Glcd(0x07);      // Display Control
	Write_Data_Glcd(0x0033);       // Page 45 of SSD2119 datasheet

	delay_ms(5);

	Write_Command_Glcd(0x22);    // RAM data write/read
    3420:	f7ff b856 	b.w	24d0 <Write_Command_Glcd>

00003424 <Port_Init>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Port_Init(void)
{
	GPIO_SetDir(3, _BIT(25), 1);        // Set HeartBeat Led P3.25 to Output
    3424:	2003      	movs	r0, #3
    3426:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    342a:	2201      	movs	r2, #1
    342c:	f7fc bee5 	b.w	1fa <GPIO_SetDir>

00003430 <System_Init>:
 * @brief	Initial System Init using Port and Peripheral
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void System_Init(void)
{
    3430:	b508      	push	{r3, lr}
	LPC_WDT->WDMOD &= ~WDT_WDMOD_WDEN;  // Disable Watchdog
    3432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3436:	781a      	ldrb	r2, [r3, #0]
    3438:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
    343c:	7018      	strb	r0, [r3, #0]
	SystemInit();						// Initialize system and update core clock
    343e:	f000 f881 	bl	3544 <SystemInit>
	Port_Init();                        // Port Initialization
    3442:	f7ff ffef 	bl	3424 <Port_Init>
	SYSTICK_Config();                   // Systick Initialization
    3446:	f7fd ff79 	bl	133c <SYSTICK_Config>
	led_delay = 1000;                   // Heart Beat rate of 1Sec toggle
    344a:	4b0b      	ldr	r3, [pc, #44]	; (3478 <System_Init+0x48>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    344c:	480b      	ldr	r0, [pc, #44]	; (347c <System_Init+0x4c>)
    344e:	2200      	movs	r2, #0
    3450:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3454:	6019      	str	r1, [r3, #0]
    3456:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
	NVIC_SetPriority(SysTick_IRQn, 0);  // Set SysTick as Highest Priority

	UART_Config(LPC_UART0, 115200);       // Uart0 Initialize at 9600 Baud Rate
    345a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    345e:	4808      	ldr	r0, [pc, #32]	; (3480 <System_Init+0x50>)
    3460:	f7fe f96c 	bl	173c <UART_Config>
	SSP_Config (LPC_SSP1);              // Initialize SPI
    3464:	4807      	ldr	r0, [pc, #28]	; (3484 <System_Init+0x54>)
    3466:	f7fd fd85 	bl	f74 <SSP_Config>
	I2C_Config (LPC_I2C0);              // Initialize I2C0
    346a:	4807      	ldr	r0, [pc, #28]	; (3488 <System_Init+0x58>)
    346c:	f7fd f894 	bl	598 <I2C_Config>
	GLCD_Init();                        // Initialize GLCD
}
    3470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NVIC_SetPriority(SysTick_IRQn, 0);  // Set SysTick as Highest Priority

	UART_Config(LPC_UART0, 115200);       // Uart0 Initialize at 9600 Baud Rate
	SSP_Config (LPC_SSP1);              // Initialize SPI
	I2C_Config (LPC_I2C0);              // Initialize I2C0
	GLCD_Init();                        // Initialize GLCD
    3474:	f7ff bef6 	b.w	3264 <GLCD_Init>
    3478:	10000360 	.word	0x10000360
    347c:	e000ed00 	.word	0xe000ed00
    3480:	4000c000 	.word	0x4000c000
    3484:	40030000 	.word	0x40030000
    3488:	4001c000 	.word	0x4001c000

0000348c <main>:
   allow the linker to generate wrapper code to setup stacks, allocate
   heap area, and initialize and copy code and data segments. For GNU
   toolsets, the entry point is through __start() in the crt0_gnu.asm
   file, and that startup code will setup stacks and data */
int main(void)
{
    348c:	b508      	push	{r3, lr}

	System_Init();                        // Initialize System
    348e:	f7ff ffcf 	bl	3430 <System_Init>

	GLCD_Clear (White);
    3492:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3496:	f7ff fdd3 	bl	3040 <GLCD_Clear>
    while(1)
    {
    	TSC2004_Draw_Test();              // put pixel at touched point
    349a:	f7fe ffaf 	bl	23fc <TSC2004_Draw_Test>
    349e:	e7fc      	b.n	349a <main+0xe>

000034a0 <SystemCoreClockUpdate>:
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    34a0:	4b22      	ldr	r3, [pc, #136]	; (352c <SystemCoreClockUpdate+0x8c>)

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    34a2:	b510      	push	{r4, lr}
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    34a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    34a8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    34ac:	f3c2 6001 	ubfx	r0, r2, #24, #2
    34b0:	2803      	cmp	r0, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    34b2:	f001 0103 	and.w	r1, r1, #3
    34b6:	4a1e      	ldr	r2, [pc, #120]	; (3530 <SystemCoreClockUpdate+0x90>)
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    34b8:	d125      	bne.n	3506 <SystemCoreClockUpdate+0x66>
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    34ba:	2901      	cmp	r1, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    34bc:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    34c0:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    34c4:	d00b      	beq.n	34de <SystemCoreClockUpdate+0x3e>
    34c6:	2902      	cmp	r1, #2
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    34c8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    34cc:	ea4f 4344 	mov.w	r3, r4, lsl #17
    34d0:	ea4f 4353 	mov.w	r3, r3, lsr #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    34d4:	f103 0301 	add.w	r3, r3, #1
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    34d8:	d008      	beq.n	34ec <SystemCoreClockUpdate+0x4c>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
    34da:	4c16      	ldr	r4, [pc, #88]	; (3534 <SystemCoreClockUpdate+0x94>)
    34dc:	e008      	b.n	34f0 <SystemCoreClockUpdate+0x50>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    34de:	0464      	lsls	r4, r4, #17
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    34e0:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    34e4:	0c63      	lsrs	r3, r4, #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
    34e6:	3301      	adds	r3, #1
    34e8:	4c13      	ldr	r4, [pc, #76]	; (3538 <SystemCoreClockUpdate+0x98>)
    34ea:	e001      	b.n	34f0 <SystemCoreClockUpdate+0x50>
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    34ec:	f44f 447a 	mov.w	r4, #64000	; 0xfa00
    34f0:	4363      	muls	r3, r4
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    34f2:	f3c0 4007 	ubfx	r0, r0, #16, #8
    34f6:	3001      	adds	r0, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    34f8:	b2c9      	uxtb	r1, r1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    34fa:	fbb3 f3f0 	udiv	r3, r3, r0
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    34fe:	1c48      	adds	r0, r1, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3500:	fbb3 f0f0 	udiv	r0, r3, r0
    3504:	e00f      	b.n	3526 <SystemCoreClockUpdate+0x86>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3506:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    350a:	b2d8      	uxtb	r0, r3
    350c:	1c43      	adds	r3, r0, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    350e:	2901      	cmp	r1, #1
    3510:	d003      	beq.n	351a <SystemCoreClockUpdate+0x7a>
    3512:	2902      	cmp	r1, #2
    3514:	d003      	beq.n	351e <SystemCoreClockUpdate+0x7e>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3516:	4909      	ldr	r1, [pc, #36]	; (353c <SystemCoreClockUpdate+0x9c>)
    3518:	e003      	b.n	3522 <SystemCoreClockUpdate+0x82>
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    351a:	4909      	ldr	r1, [pc, #36]	; (3540 <SystemCoreClockUpdate+0xa0>)
    351c:	e001      	b.n	3522 <SystemCoreClockUpdate+0x82>
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    351e:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
    3522:	fbb1 f0f3 	udiv	r0, r1, r3
    3526:	6010      	str	r0, [r2, #0]
    3528:	bd10      	pop	{r4, pc}
    352a:	bf00      	nop
    352c:	400fc000 	.word	0x400fc000
    3530:	2007c008 	.word	0x2007c008
    3534:	007a1200 	.word	0x007a1200
    3538:	016e3600 	.word	0x016e3600
    353c:	003d0900 	.word	0x003d0900
    3540:	00b71b00 	.word	0x00b71b00

00003544 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    3544:	4b33      	ldr	r3, [pc, #204]	; (3614 <SystemInit+0xd0>)
    3546:	2220      	movs	r2, #32
    3548:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    354c:	4619      	mov	r1, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    354e:	f8d1 01a0 	ldr.w	r0, [r1, #416]	; 0x1a0
    3552:	4b30      	ldr	r3, [pc, #192]	; (3614 <SystemInit+0xd0>)
    3554:	0640      	lsls	r0, r0, #25
    3556:	d5fa      	bpl.n	354e <SystemInit+0xa>
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3558:	492f      	ldr	r1, [pc, #188]	; (3618 <SystemInit+0xd4>)
  LPC_SC->SCS       = SCS_Val;
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    355a:	2202      	movs	r2, #2

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    355c:	2001      	movs	r0, #1
  LPC_SC->SCS       = SCS_Val;
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    355e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3562:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    3566:	2255      	movs	r2, #85	; 0x55
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3568:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
    356c:	21aa      	movs	r1, #170	; 0xaa
    356e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3576:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    357a:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    357e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    3582:	4824      	ldr	r0, [pc, #144]	; (3614 <SystemInit+0xd0>)
    3584:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    3588:	0159      	lsls	r1, r3, #5
    358a:	d5fa      	bpl.n	3582 <SystemInit+0x3e>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    358c:	2103      	movs	r1, #3
  LPC_SC->PLL0FEED  = 0xAA;
    358e:	22aa      	movs	r2, #170	; 0xaa
  LPC_SC->PLL0FEED  = 0x55;
    3590:	2355      	movs	r3, #85	; 0x55
  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    3592:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3596:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    359a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    359e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
    35a2:	4b1c      	ldr	r3, [pc, #112]	; (3614 <SystemInit+0xd0>)
    35a4:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    35a8:	d0f9      	beq.n	359e <SystemInit+0x5a>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    35aa:	2013      	movs	r0, #19
    35ac:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    35b0:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    35b2:	2255      	movs	r2, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    35b4:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    35b6:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    35ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    35be:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    35c2:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    35c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    35ca:	4a12      	ldr	r2, [pc, #72]	; (3614 <SystemInit+0xd0>)
    35cc:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    35d0:	055b      	lsls	r3, r3, #21
    35d2:	d5fa      	bpl.n	35ca <SystemInit+0x86>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    35d4:	2103      	movs	r1, #3
  LPC_SC->PLL1FEED  = 0xAA;
    35d6:	20aa      	movs	r0, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    35d8:	2355      	movs	r3, #85	; 0x55
  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
  LPC_SC->PLL1FEED  = 0xAA;
  LPC_SC->PLL1FEED  = 0x55;
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    35da:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    35de:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    35e2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    35e6:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
    35ea:	480a      	ldr	r0, [pc, #40]	; (3614 <SystemInit+0xd0>)
    35ec:	f411 7f40 	tst.w	r1, #768	; 0x300
    35f0:	d0f9      	beq.n	35e6 <SystemInit+0xa2>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    35f2:	2200      	movs	r2, #0
    35f4:	f8c0 21a8 	str.w	r2, [r0, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    35f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    35fc:	f8c0 21ac 	str.w	r2, [r0, #428]	; 0x1ac

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    3600:	2120      	movs	r1, #32
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    3602:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3606:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    360a:	f8c0 11c8 	str.w	r1, [r0, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    360e:	6002      	str	r2, [r0, #0]
    3610:	4770      	bx	lr
    3612:	bf00      	nop
    3614:	400fc000 	.word	0x400fc000
    3618:	00010018 	.word	0x00010018

0000361c <ADC_IRQHandler>:
 * @param  None    
 * @retval : None      
*/

void Default_Handler(void)
{
    361c:	e7fe      	b.n	361c <ADC_IRQHandler>

0000361e <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
    361e:	4668      	mov	r0, sp
    3620:	f020 0107 	bic.w	r1, r0, #7
    3624:	468d      	mov	sp, r1
    3626:	b501      	push	{r0, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    3628:	2300      	movs	r3, #0
 *          supplied main() routine is called.
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
    362a:	4a0f      	ldr	r2, [pc, #60]	; (3668 <Reset_Handler+0x4a>)
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    362c:	490f      	ldr	r1, [pc, #60]	; (366c <Reset_Handler+0x4e>)
 *          supplied main() routine is called.
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
    362e:	1898      	adds	r0, r3, r2
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    3630:	4288      	cmp	r0, r1
    3632:	d204      	bcs.n	363e <Reset_Handler+0x20>
  {
    *(pulDest++) = *(pulSrc++);
    3634:	490e      	ldr	r1, [pc, #56]	; (3670 <Reset_Handler+0x52>)
    3636:	5858      	ldr	r0, [r3, r1]
    3638:	5098      	str	r0, [r3, r2]
    363a:	3304      	adds	r3, #4
    363c:	e7f5      	b.n	362a <Reset_Handler+0xc>
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    363e:	480d      	ldr	r0, [pc, #52]	; (3674 <Reset_Handler+0x56>)
  {
    *(pulDest++) = *(pulSrc++);
  }

  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
    3640:	4a0d      	ldr	r2, [pc, #52]	; (3678 <Reset_Handler+0x5a>)
    3642:	4290      	cmp	r0, r2
    3644:	d203      	bcs.n	364e <Reset_Handler+0x30>
  {
    *(pulDest++) = 0;
    3646:	2200      	movs	r2, #0
    3648:	f840 2b04 	str.w	r2, [r0], #4
    364c:	e7f8      	b.n	3640 <Reset_Handler+0x22>
  {
    *(pulDest++) = *(pulSrc++);
  }

  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
    364e:	4b0b      	ldr	r3, [pc, #44]	; (367c <Reset_Handler+0x5e>)
  {
    *(pulDest++) = 0;
  }

  /* Zero fill the bss_ahb segment. */
  for(pulDest = &_sbss_ahb; pulDest < &_ebss_ahb; )
    3650:	480b      	ldr	r0, [pc, #44]	; (3680 <Reset_Handler+0x62>)
    3652:	4283      	cmp	r3, r0
    3654:	d203      	bcs.n	365e <Reset_Handler+0x40>
  {
    *(pulDest++) = 0;
    3656:	2100      	movs	r1, #0
    3658:	f843 1b04 	str.w	r1, [r3], #4
    365c:	e7f8      	b.n	3650 <Reset_Handler+0x32>
  }

  /* Call the application's entry point.*/
  SystemInit();
    365e:	f7ff ff71 	bl	3544 <SystemInit>
  main();
    3662:	f7ff ff13 	bl	348c <main>
    3666:	e7fe      	b.n	3666 <Reset_Handler+0x48>
    3668:	2007c000 	.word	0x2007c000
    366c:	2007c010 	.word	0x2007c010
    3670:	00005680 	.word	0x00005680
    3674:	10000000 	.word	0x10000000
    3678:	10000368 	.word	0x10000368
    367c:	2007c010 	.word	0x2007c010
    3680:	2007c010 	.word	0x2007c010

00003684 <_init>:
  while( 1 );
}

// dummy for newer gcc versions
void _init()
{
    3684:	4770      	bx	lr
    3686:	bf00      	nop

00003688 <__aeabi_frsub>:
    3688:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    368c:	e002      	b.n	3694 <__addsf3>
    368e:	bf00      	nop

00003690 <__aeabi_fsub>:
    3690:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00003694 <__addsf3>:
    3694:	0042      	lsls	r2, r0, #1
    3696:	bf1f      	itttt	ne
    3698:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    369c:	ea92 0f03 	teqne	r2, r3
    36a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    36a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    36a8:	d06a      	beq.n	3780 <__addsf3+0xec>
    36aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
    36ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    36b2:	bfc1      	itttt	gt
    36b4:	18d2      	addgt	r2, r2, r3
    36b6:	4041      	eorgt	r1, r0
    36b8:	4048      	eorgt	r0, r1
    36ba:	4041      	eorgt	r1, r0
    36bc:	bfb8      	it	lt
    36be:	425b      	neglt	r3, r3
    36c0:	2b19      	cmp	r3, #25
    36c2:	bf88      	it	hi
    36c4:	4770      	bxhi	lr
    36c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    36ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    36ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    36d2:	bf18      	it	ne
    36d4:	4240      	negne	r0, r0
    36d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    36da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    36de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    36e2:	bf18      	it	ne
    36e4:	4249      	negne	r1, r1
    36e6:	ea92 0f03 	teq	r2, r3
    36ea:	d03f      	beq.n	376c <__addsf3+0xd8>
    36ec:	f1a2 0201 	sub.w	r2, r2, #1
    36f0:	fa41 fc03 	asr.w	ip, r1, r3
    36f4:	eb10 000c 	adds.w	r0, r0, ip
    36f8:	f1c3 0320 	rsb	r3, r3, #32
    36fc:	fa01 f103 	lsl.w	r1, r1, r3
    3700:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    3704:	d502      	bpl.n	370c <__addsf3+0x78>
    3706:	4249      	negs	r1, r1
    3708:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    370c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3710:	d313      	bcc.n	373a <__addsf3+0xa6>
    3712:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    3716:	d306      	bcc.n	3726 <__addsf3+0x92>
    3718:	0840      	lsrs	r0, r0, #1
    371a:	ea4f 0131 	mov.w	r1, r1, rrx
    371e:	f102 0201 	add.w	r2, r2, #1
    3722:	2afe      	cmp	r2, #254	; 0xfe
    3724:	d251      	bcs.n	37ca <__addsf3+0x136>
    3726:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    372a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    372e:	bf08      	it	eq
    3730:	f020 0001 	biceq.w	r0, r0, #1
    3734:	ea40 0003 	orr.w	r0, r0, r3
    3738:	4770      	bx	lr
    373a:	0049      	lsls	r1, r1, #1
    373c:	eb40 0000 	adc.w	r0, r0, r0
    3740:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    3744:	f1a2 0201 	sub.w	r2, r2, #1
    3748:	d1ed      	bne.n	3726 <__addsf3+0x92>
    374a:	fab0 fc80 	clz	ip, r0
    374e:	f1ac 0c08 	sub.w	ip, ip, #8
    3752:	ebb2 020c 	subs.w	r2, r2, ip
    3756:	fa00 f00c 	lsl.w	r0, r0, ip
    375a:	bfaa      	itet	ge
    375c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    3760:	4252      	neglt	r2, r2
    3762:	4318      	orrge	r0, r3
    3764:	bfbc      	itt	lt
    3766:	40d0      	lsrlt	r0, r2
    3768:	4318      	orrlt	r0, r3
    376a:	4770      	bx	lr
    376c:	f092 0f00 	teq	r2, #0
    3770:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    3774:	bf06      	itte	eq
    3776:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    377a:	3201      	addeq	r2, #1
    377c:	3b01      	subne	r3, #1
    377e:	e7b5      	b.n	36ec <__addsf3+0x58>
    3780:	ea4f 0341 	mov.w	r3, r1, lsl #1
    3784:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    3788:	bf18      	it	ne
    378a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    378e:	d021      	beq.n	37d4 <__addsf3+0x140>
    3790:	ea92 0f03 	teq	r2, r3
    3794:	d004      	beq.n	37a0 <__addsf3+0x10c>
    3796:	f092 0f00 	teq	r2, #0
    379a:	bf08      	it	eq
    379c:	4608      	moveq	r0, r1
    379e:	4770      	bx	lr
    37a0:	ea90 0f01 	teq	r0, r1
    37a4:	bf1c      	itt	ne
    37a6:	2000      	movne	r0, #0
    37a8:	4770      	bxne	lr
    37aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    37ae:	d104      	bne.n	37ba <__addsf3+0x126>
    37b0:	0040      	lsls	r0, r0, #1
    37b2:	bf28      	it	cs
    37b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    37b8:	4770      	bx	lr
    37ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    37be:	bf3c      	itt	cc
    37c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    37c4:	4770      	bxcc	lr
    37c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    37ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    37ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    37d2:	4770      	bx	lr
    37d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    37d8:	bf16      	itet	ne
    37da:	4608      	movne	r0, r1
    37dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    37e0:	4601      	movne	r1, r0
    37e2:	0242      	lsls	r2, r0, #9
    37e4:	bf06      	itte	eq
    37e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    37ea:	ea90 0f01 	teqeq	r0, r1
    37ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    37f2:	4770      	bx	lr

000037f4 <__aeabi_ui2f>:
    37f4:	f04f 0300 	mov.w	r3, #0
    37f8:	e004      	b.n	3804 <__aeabi_i2f+0x8>
    37fa:	bf00      	nop

000037fc <__aeabi_i2f>:
    37fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    3800:	bf48      	it	mi
    3802:	4240      	negmi	r0, r0
    3804:	ea5f 0c00 	movs.w	ip, r0
    3808:	bf08      	it	eq
    380a:	4770      	bxeq	lr
    380c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    3810:	4601      	mov	r1, r0
    3812:	f04f 0000 	mov.w	r0, #0
    3816:	e01c      	b.n	3852 <__aeabi_l2f+0x2a>

00003818 <__aeabi_ul2f>:
    3818:	ea50 0201 	orrs.w	r2, r0, r1
    381c:	bf08      	it	eq
    381e:	4770      	bxeq	lr
    3820:	f04f 0300 	mov.w	r3, #0
    3824:	e00a      	b.n	383c <__aeabi_l2f+0x14>
    3826:	bf00      	nop

00003828 <__aeabi_l2f>:
    3828:	ea50 0201 	orrs.w	r2, r0, r1
    382c:	bf08      	it	eq
    382e:	4770      	bxeq	lr
    3830:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    3834:	d502      	bpl.n	383c <__aeabi_l2f+0x14>
    3836:	4240      	negs	r0, r0
    3838:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    383c:	ea5f 0c01 	movs.w	ip, r1
    3840:	bf02      	ittt	eq
    3842:	4684      	moveq	ip, r0
    3844:	4601      	moveq	r1, r0
    3846:	2000      	moveq	r0, #0
    3848:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    384c:	bf08      	it	eq
    384e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    3852:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    3856:	fabc f28c 	clz	r2, ip
    385a:	3a08      	subs	r2, #8
    385c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    3860:	db10      	blt.n	3884 <__aeabi_l2f+0x5c>
    3862:	fa01 fc02 	lsl.w	ip, r1, r2
    3866:	4463      	add	r3, ip
    3868:	fa00 fc02 	lsl.w	ip, r0, r2
    386c:	f1c2 0220 	rsb	r2, r2, #32
    3870:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3874:	fa20 f202 	lsr.w	r2, r0, r2
    3878:	eb43 0002 	adc.w	r0, r3, r2
    387c:	bf08      	it	eq
    387e:	f020 0001 	biceq.w	r0, r0, #1
    3882:	4770      	bx	lr
    3884:	f102 0220 	add.w	r2, r2, #32
    3888:	fa01 fc02 	lsl.w	ip, r1, r2
    388c:	f1c2 0220 	rsb	r2, r2, #32
    3890:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    3894:	fa21 f202 	lsr.w	r2, r1, r2
    3898:	eb43 0002 	adc.w	r0, r3, r2
    389c:	bf08      	it	eq
    389e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    38a2:	4770      	bx	lr

000038a4 <__gesf2>:
    38a4:	f04f 3cff 	mov.w	ip, #4294967295
    38a8:	e006      	b.n	38b8 <__cmpsf2+0x4>
    38aa:	bf00      	nop

000038ac <__lesf2>:
    38ac:	f04f 0c01 	mov.w	ip, #1
    38b0:	e002      	b.n	38b8 <__cmpsf2+0x4>
    38b2:	bf00      	nop

000038b4 <__cmpsf2>:
    38b4:	f04f 0c01 	mov.w	ip, #1
    38b8:	f84d cd04 	str.w	ip, [sp, #-4]!
    38bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
    38c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    38c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    38c8:	bf18      	it	ne
    38ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    38ce:	d011      	beq.n	38f4 <__cmpsf2+0x40>
    38d0:	b001      	add	sp, #4
    38d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    38d6:	bf18      	it	ne
    38d8:	ea90 0f01 	teqne	r0, r1
    38dc:	bf58      	it	pl
    38de:	ebb2 0003 	subspl.w	r0, r2, r3
    38e2:	bf88      	it	hi
    38e4:	17c8      	asrhi	r0, r1, #31
    38e6:	bf38      	it	cc
    38e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    38ec:	bf18      	it	ne
    38ee:	f040 0001 	orrne.w	r0, r0, #1
    38f2:	4770      	bx	lr
    38f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    38f8:	d102      	bne.n	3900 <__cmpsf2+0x4c>
    38fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    38fe:	d105      	bne.n	390c <__cmpsf2+0x58>
    3900:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    3904:	d1e4      	bne.n	38d0 <__cmpsf2+0x1c>
    3906:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    390a:	d0e1      	beq.n	38d0 <__cmpsf2+0x1c>
    390c:	f85d 0b04 	ldr.w	r0, [sp], #4
    3910:	4770      	bx	lr
    3912:	bf00      	nop

00003914 <__aeabi_cfrcmple>:
    3914:	4684      	mov	ip, r0
    3916:	4608      	mov	r0, r1
    3918:	4661      	mov	r1, ip
    391a:	e7ff      	b.n	391c <__aeabi_cfcmpeq>

0000391c <__aeabi_cfcmpeq>:
    391c:	b50f      	push	{r0, r1, r2, r3, lr}
    391e:	f7ff ffc9 	bl	38b4 <__cmpsf2>
    3922:	2800      	cmp	r0, #0
    3924:	bf48      	it	mi
    3926:	f110 0f00 	cmnmi.w	r0, #0
    392a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000392c <__aeabi_fcmpeq>:
    392c:	f84d ed08 	str.w	lr, [sp, #-8]!
    3930:	f7ff fff4 	bl	391c <__aeabi_cfcmpeq>
    3934:	bf0c      	ite	eq
    3936:	2001      	moveq	r0, #1
    3938:	2000      	movne	r0, #0
    393a:	f85d fb08 	ldr.w	pc, [sp], #8
    393e:	bf00      	nop

00003940 <__aeabi_fcmplt>:
    3940:	f84d ed08 	str.w	lr, [sp, #-8]!
    3944:	f7ff ffea 	bl	391c <__aeabi_cfcmpeq>
    3948:	bf34      	ite	cc
    394a:	2001      	movcc	r0, #1
    394c:	2000      	movcs	r0, #0
    394e:	f85d fb08 	ldr.w	pc, [sp], #8
    3952:	bf00      	nop

00003954 <__aeabi_fcmple>:
    3954:	f84d ed08 	str.w	lr, [sp, #-8]!
    3958:	f7ff ffe0 	bl	391c <__aeabi_cfcmpeq>
    395c:	bf94      	ite	ls
    395e:	2001      	movls	r0, #1
    3960:	2000      	movhi	r0, #0
    3962:	f85d fb08 	ldr.w	pc, [sp], #8
    3966:	bf00      	nop

00003968 <__aeabi_fcmpge>:
    3968:	f84d ed08 	str.w	lr, [sp, #-8]!
    396c:	f7ff ffd2 	bl	3914 <__aeabi_cfrcmple>
    3970:	bf94      	ite	ls
    3972:	2001      	movls	r0, #1
    3974:	2000      	movhi	r0, #0
    3976:	f85d fb08 	ldr.w	pc, [sp], #8
    397a:	bf00      	nop

0000397c <__aeabi_fcmpgt>:
    397c:	f84d ed08 	str.w	lr, [sp, #-8]!
    3980:	f7ff ffc8 	bl	3914 <__aeabi_cfrcmple>
    3984:	bf34      	ite	cc
    3986:	2001      	movcc	r0, #1
    3988:	2000      	movcs	r0, #0
    398a:	f85d fb08 	ldr.w	pc, [sp], #8
    398e:	bf00      	nop

00003990 <__aeabi_uldivmod>:
    3990:	b94b      	cbnz	r3, 39a6 <__aeabi_uldivmod+0x16>
    3992:	b942      	cbnz	r2, 39a6 <__aeabi_uldivmod+0x16>
    3994:	2900      	cmp	r1, #0
    3996:	bf08      	it	eq
    3998:	2800      	cmpeq	r0, #0
    399a:	d002      	beq.n	39a2 <__aeabi_uldivmod+0x12>
    399c:	f04f 31ff 	mov.w	r1, #4294967295
    39a0:	4608      	mov	r0, r1
    39a2:	f000 b83b 	b.w	3a1c <__aeabi_idiv0>
    39a6:	b082      	sub	sp, #8
    39a8:	46ec      	mov	ip, sp
    39aa:	e92d 5000 	stmdb	sp!, {ip, lr}
    39ae:	f000 f81d 	bl	39ec <__gnu_uldivmod_helper>
    39b2:	f8dd e004 	ldr.w	lr, [sp, #4]
    39b6:	b002      	add	sp, #8
    39b8:	bc0c      	pop	{r2, r3}
    39ba:	4770      	bx	lr

000039bc <__gnu_ldivmod_helper>:
    39bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39c0:	4616      	mov	r6, r2
    39c2:	4698      	mov	r8, r3
    39c4:	4604      	mov	r4, r0
    39c6:	460d      	mov	r5, r1
    39c8:	f000 f82a 	bl	3a20 <__divdi3>
    39cc:	fb06 fc01 	mul.w	ip, r6, r1
    39d0:	fba6 2300 	umull	r2, r3, r6, r0
    39d4:	fb00 c708 	mla	r7, r0, r8, ip
    39d8:	18fb      	adds	r3, r7, r3
    39da:	1aa2      	subs	r2, r4, r2
    39dc:	eb65 0303 	sbc.w	r3, r5, r3
    39e0:	9c06      	ldr	r4, [sp, #24]
    39e2:	e9c4 2300 	strd	r2, r3, [r4]
    39e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39ea:	bf00      	nop

000039ec <__gnu_uldivmod_helper>:
    39ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39f0:	4690      	mov	r8, r2
    39f2:	4606      	mov	r6, r0
    39f4:	460f      	mov	r7, r1
    39f6:	461d      	mov	r5, r3
    39f8:	f000 f970 	bl	3cdc <__udivdi3>
    39fc:	fb00 f305 	mul.w	r3, r0, r5
    3a00:	fba0 4508 	umull	r4, r5, r0, r8
    3a04:	fb08 3801 	mla	r8, r8, r1, r3
    3a08:	9b06      	ldr	r3, [sp, #24]
    3a0a:	4445      	add	r5, r8
    3a0c:	1b34      	subs	r4, r6, r4
    3a0e:	eb67 0505 	sbc.w	r5, r7, r5
    3a12:	e9c3 4500 	strd	r4, r5, [r3]
    3a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a1a:	bf00      	nop

00003a1c <__aeabi_idiv0>:
    3a1c:	4770      	bx	lr
    3a1e:	bf00      	nop

00003a20 <__divdi3>:
    3a20:	2900      	cmp	r1, #0
    3a22:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    3a26:	461d      	mov	r5, r3
    3a28:	f2c0 809d 	blt.w	3b66 <__divdi3+0x146>
    3a2c:	2400      	movs	r4, #0
    3a2e:	2d00      	cmp	r5, #0
    3a30:	f2c0 8094 	blt.w	3b5c <__divdi3+0x13c>
    3a34:	4680      	mov	r8, r0
    3a36:	460f      	mov	r7, r1
    3a38:	4694      	mov	ip, r2
    3a3a:	461e      	mov	r6, r3
    3a3c:	bbe3      	cbnz	r3, 3ab8 <__divdi3+0x98>
    3a3e:	428a      	cmp	r2, r1
    3a40:	d955      	bls.n	3aee <__divdi3+0xce>
    3a42:	fab2 f782 	clz	r7, r2
    3a46:	b147      	cbz	r7, 3a5a <__divdi3+0x3a>
    3a48:	f1c7 0520 	rsb	r5, r7, #32
    3a4c:	fa20 f605 	lsr.w	r6, r0, r5
    3a50:	fa01 f107 	lsl.w	r1, r1, r7
    3a54:	40ba      	lsls	r2, r7
    3a56:	40b8      	lsls	r0, r7
    3a58:	4331      	orrs	r1, r6
    3a5a:	0c17      	lsrs	r7, r2, #16
    3a5c:	fbb1 f6f7 	udiv	r6, r1, r7
    3a60:	fa1f fc82 	uxth.w	ip, r2
    3a64:	fb07 1116 	mls	r1, r7, r6, r1
    3a68:	fb0c f506 	mul.w	r5, ip, r6
    3a6c:	0c03      	lsrs	r3, r0, #16
    3a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    3a72:	429d      	cmp	r5, r3
    3a74:	d908      	bls.n	3a88 <__divdi3+0x68>
    3a76:	1e71      	subs	r1, r6, #1
    3a78:	189b      	adds	r3, r3, r2
    3a7a:	f080 8113 	bcs.w	3ca4 <__divdi3+0x284>
    3a7e:	429d      	cmp	r5, r3
    3a80:	f240 8110 	bls.w	3ca4 <__divdi3+0x284>
    3a84:	3e02      	subs	r6, #2
    3a86:	189b      	adds	r3, r3, r2
    3a88:	1b59      	subs	r1, r3, r5
    3a8a:	fbb1 f5f7 	udiv	r5, r1, r7
    3a8e:	fb07 1315 	mls	r3, r7, r5, r1
    3a92:	fb0c fc05 	mul.w	ip, ip, r5
    3a96:	b280      	uxth	r0, r0
    3a98:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    3a9c:	458c      	cmp	ip, r1
    3a9e:	d907      	bls.n	3ab0 <__divdi3+0x90>
    3aa0:	1e6b      	subs	r3, r5, #1
    3aa2:	188a      	adds	r2, r1, r2
    3aa4:	f080 8100 	bcs.w	3ca8 <__divdi3+0x288>
    3aa8:	4594      	cmp	ip, r2
    3aaa:	f240 80fd 	bls.w	3ca8 <__divdi3+0x288>
    3aae:	3d02      	subs	r5, #2
    3ab0:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    3ab4:	2500      	movs	r5, #0
    3ab6:	e003      	b.n	3ac0 <__divdi3+0xa0>
    3ab8:	428b      	cmp	r3, r1
    3aba:	d90c      	bls.n	3ad6 <__divdi3+0xb6>
    3abc:	2500      	movs	r5, #0
    3abe:	4629      	mov	r1, r5
    3ac0:	460a      	mov	r2, r1
    3ac2:	462b      	mov	r3, r5
    3ac4:	b114      	cbz	r4, 3acc <__divdi3+0xac>
    3ac6:	4252      	negs	r2, r2
    3ac8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3acc:	4610      	mov	r0, r2
    3ace:	4619      	mov	r1, r3
    3ad0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    3ad4:	4770      	bx	lr
    3ad6:	fab3 f583 	clz	r5, r3
    3ada:	2d00      	cmp	r5, #0
    3adc:	f040 8087 	bne.w	3bee <__divdi3+0x1ce>
    3ae0:	428b      	cmp	r3, r1
    3ae2:	d301      	bcc.n	3ae8 <__divdi3+0xc8>
    3ae4:	4282      	cmp	r2, r0
    3ae6:	d8ea      	bhi.n	3abe <__divdi3+0x9e>
    3ae8:	2500      	movs	r5, #0
    3aea:	2101      	movs	r1, #1
    3aec:	e7e8      	b.n	3ac0 <__divdi3+0xa0>
    3aee:	b912      	cbnz	r2, 3af6 <__divdi3+0xd6>
    3af0:	2601      	movs	r6, #1
    3af2:	fbb6 f2f2 	udiv	r2, r6, r2
    3af6:	fab2 f682 	clz	r6, r2
    3afa:	2e00      	cmp	r6, #0
    3afc:	d139      	bne.n	3b72 <__divdi3+0x152>
    3afe:	1a8e      	subs	r6, r1, r2
    3b00:	0c13      	lsrs	r3, r2, #16
    3b02:	fa1f fc82 	uxth.w	ip, r2
    3b06:	2501      	movs	r5, #1
    3b08:	fbb6 f7f3 	udiv	r7, r6, r3
    3b0c:	fb03 6117 	mls	r1, r3, r7, r6
    3b10:	fb0c f807 	mul.w	r8, ip, r7
    3b14:	ea4f 4910 	mov.w	r9, r0, lsr #16
    3b18:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    3b1c:	45b0      	cmp	r8, r6
    3b1e:	d906      	bls.n	3b2e <__divdi3+0x10e>
    3b20:	1e79      	subs	r1, r7, #1
    3b22:	18b6      	adds	r6, r6, r2
    3b24:	d202      	bcs.n	3b2c <__divdi3+0x10c>
    3b26:	45b0      	cmp	r8, r6
    3b28:	f200 80d3 	bhi.w	3cd2 <__divdi3+0x2b2>
    3b2c:	460f      	mov	r7, r1
    3b2e:	ebc8 0606 	rsb	r6, r8, r6
    3b32:	fbb6 f1f3 	udiv	r1, r6, r3
    3b36:	fb03 6311 	mls	r3, r3, r1, r6
    3b3a:	fb0c fc01 	mul.w	ip, ip, r1
    3b3e:	b280      	uxth	r0, r0
    3b40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    3b44:	459c      	cmp	ip, r3
    3b46:	d906      	bls.n	3b56 <__divdi3+0x136>
    3b48:	1e4e      	subs	r6, r1, #1
    3b4a:	189a      	adds	r2, r3, r2
    3b4c:	d202      	bcs.n	3b54 <__divdi3+0x134>
    3b4e:	4594      	cmp	ip, r2
    3b50:	f200 80c2 	bhi.w	3cd8 <__divdi3+0x2b8>
    3b54:	4631      	mov	r1, r6
    3b56:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    3b5a:	e7b1      	b.n	3ac0 <__divdi3+0xa0>
    3b5c:	43e4      	mvns	r4, r4
    3b5e:	4252      	negs	r2, r2
    3b60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3b64:	e766      	b.n	3a34 <__divdi3+0x14>
    3b66:	4240      	negs	r0, r0
    3b68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3b6c:	f04f 34ff 	mov.w	r4, #4294967295
    3b70:	e75d      	b.n	3a2e <__divdi3+0xe>
    3b72:	40b2      	lsls	r2, r6
    3b74:	f1c6 0920 	rsb	r9, r6, #32
    3b78:	fa21 f709 	lsr.w	r7, r1, r9
    3b7c:	fa20 f909 	lsr.w	r9, r0, r9
    3b80:	fa01 f106 	lsl.w	r1, r1, r6
    3b84:	0c13      	lsrs	r3, r2, #16
    3b86:	fbb7 f8f3 	udiv	r8, r7, r3
    3b8a:	fa1f fc82 	uxth.w	ip, r2
    3b8e:	fb03 7718 	mls	r7, r3, r8, r7
    3b92:	fb0c f508 	mul.w	r5, ip, r8
    3b96:	ea49 0901 	orr.w	r9, r9, r1
    3b9a:	ea4f 4119 	mov.w	r1, r9, lsr #16
    3b9e:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    3ba2:	40b0      	lsls	r0, r6
    3ba4:	42bd      	cmp	r5, r7
    3ba6:	d90a      	bls.n	3bbe <__divdi3+0x19e>
    3ba8:	18bf      	adds	r7, r7, r2
    3baa:	f108 36ff 	add.w	r6, r8, #4294967295
    3bae:	f080 808e 	bcs.w	3cce <__divdi3+0x2ae>
    3bb2:	42bd      	cmp	r5, r7
    3bb4:	f240 808b 	bls.w	3cce <__divdi3+0x2ae>
    3bb8:	f1a8 0802 	sub.w	r8, r8, #2
    3bbc:	18bf      	adds	r7, r7, r2
    3bbe:	1b79      	subs	r1, r7, r5
    3bc0:	fbb1 f5f3 	udiv	r5, r1, r3
    3bc4:	fb03 1715 	mls	r7, r3, r5, r1
    3bc8:	fb0c f605 	mul.w	r6, ip, r5
    3bcc:	fa1f f989 	uxth.w	r9, r9
    3bd0:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    3bd4:	428e      	cmp	r6, r1
    3bd6:	d906      	bls.n	3be6 <__divdi3+0x1c6>
    3bd8:	1e6f      	subs	r7, r5, #1
    3bda:	1889      	adds	r1, r1, r2
    3bdc:	d271      	bcs.n	3cc2 <__divdi3+0x2a2>
    3bde:	428e      	cmp	r6, r1
    3be0:	d96f      	bls.n	3cc2 <__divdi3+0x2a2>
    3be2:	3d02      	subs	r5, #2
    3be4:	1889      	adds	r1, r1, r2
    3be6:	1b8e      	subs	r6, r1, r6
    3be8:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    3bec:	e78c      	b.n	3b08 <__divdi3+0xe8>
    3bee:	f1c5 0120 	rsb	r1, r5, #32
    3bf2:	fa22 f301 	lsr.w	r3, r2, r1
    3bf6:	fa06 f605 	lsl.w	r6, r6, r5
    3bfa:	fa27 f201 	lsr.w	r2, r7, r1
    3bfe:	fa07 f705 	lsl.w	r7, r7, r5
    3c02:	fa20 f101 	lsr.w	r1, r0, r1
    3c06:	431e      	orrs	r6, r3
    3c08:	ea4f 4916 	mov.w	r9, r6, lsr #16
    3c0c:	fbb2 f8f9 	udiv	r8, r2, r9
    3c10:	fa1f fa86 	uxth.w	sl, r6
    3c14:	fb09 2218 	mls	r2, r9, r8, r2
    3c18:	fb0a fb08 	mul.w	fp, sl, r8
    3c1c:	430f      	orrs	r7, r1
    3c1e:	0c3b      	lsrs	r3, r7, #16
    3c20:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    3c24:	4593      	cmp	fp, r2
    3c26:	fa0c fc05 	lsl.w	ip, ip, r5
    3c2a:	d908      	bls.n	3c3e <__divdi3+0x21e>
    3c2c:	1992      	adds	r2, r2, r6
    3c2e:	f108 31ff 	add.w	r1, r8, #4294967295
    3c32:	d24a      	bcs.n	3cca <__divdi3+0x2aa>
    3c34:	4593      	cmp	fp, r2
    3c36:	d948      	bls.n	3cca <__divdi3+0x2aa>
    3c38:	f1a8 0802 	sub.w	r8, r8, #2
    3c3c:	1992      	adds	r2, r2, r6
    3c3e:	ebcb 0302 	rsb	r3, fp, r2
    3c42:	fbb3 f1f9 	udiv	r1, r3, r9
    3c46:	fb09 3211 	mls	r2, r9, r1, r3
    3c4a:	fb0a fa01 	mul.w	sl, sl, r1
    3c4e:	b2bf      	uxth	r7, r7
    3c50:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    3c54:	459a      	cmp	sl, r3
    3c56:	d906      	bls.n	3c66 <__divdi3+0x246>
    3c58:	1e4a      	subs	r2, r1, #1
    3c5a:	199b      	adds	r3, r3, r6
    3c5c:	d233      	bcs.n	3cc6 <__divdi3+0x2a6>
    3c5e:	459a      	cmp	sl, r3
    3c60:	d931      	bls.n	3cc6 <__divdi3+0x2a6>
    3c62:	3902      	subs	r1, #2
    3c64:	199b      	adds	r3, r3, r6
    3c66:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    3c6a:	0c0f      	lsrs	r7, r1, #16
    3c6c:	fa1f f88c 	uxth.w	r8, ip
    3c70:	fb08 f607 	mul.w	r6, r8, r7
    3c74:	b28a      	uxth	r2, r1
    3c76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    3c7a:	fb08 f802 	mul.w	r8, r8, r2
    3c7e:	fb0c 6202 	mla	r2, ip, r2, r6
    3c82:	fb0c fc07 	mul.w	ip, ip, r7
    3c86:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    3c8a:	4296      	cmp	r6, r2
    3c8c:	bf88      	it	hi
    3c8e:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    3c92:	ebca 0303 	rsb	r3, sl, r3
    3c96:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    3c9a:	4563      	cmp	r3, ip
    3c9c:	d30e      	bcc.n	3cbc <__divdi3+0x29c>
    3c9e:	d005      	beq.n	3cac <__divdi3+0x28c>
    3ca0:	2500      	movs	r5, #0
    3ca2:	e70d      	b.n	3ac0 <__divdi3+0xa0>
    3ca4:	460e      	mov	r6, r1
    3ca6:	e6ef      	b.n	3a88 <__divdi3+0x68>
    3ca8:	461d      	mov	r5, r3
    3caa:	e701      	b.n	3ab0 <__divdi3+0x90>
    3cac:	fa00 f005 	lsl.w	r0, r0, r5
    3cb0:	fa1f f888 	uxth.w	r8, r8
    3cb4:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    3cb8:	42a8      	cmp	r0, r5
    3cba:	d2f1      	bcs.n	3ca0 <__divdi3+0x280>
    3cbc:	3901      	subs	r1, #1
    3cbe:	2500      	movs	r5, #0
    3cc0:	e6fe      	b.n	3ac0 <__divdi3+0xa0>
    3cc2:	463d      	mov	r5, r7
    3cc4:	e78f      	b.n	3be6 <__divdi3+0x1c6>
    3cc6:	4611      	mov	r1, r2
    3cc8:	e7cd      	b.n	3c66 <__divdi3+0x246>
    3cca:	4688      	mov	r8, r1
    3ccc:	e7b7      	b.n	3c3e <__divdi3+0x21e>
    3cce:	46b0      	mov	r8, r6
    3cd0:	e775      	b.n	3bbe <__divdi3+0x19e>
    3cd2:	3f02      	subs	r7, #2
    3cd4:	18b6      	adds	r6, r6, r2
    3cd6:	e72a      	b.n	3b2e <__divdi3+0x10e>
    3cd8:	3902      	subs	r1, #2
    3cda:	e73c      	b.n	3b56 <__divdi3+0x136>

00003cdc <__udivdi3>:
    3cdc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    3ce0:	4614      	mov	r4, r2
    3ce2:	4605      	mov	r5, r0
    3ce4:	460e      	mov	r6, r1
    3ce6:	2b00      	cmp	r3, #0
    3ce8:	d13d      	bne.n	3d66 <__udivdi3+0x8a>
    3cea:	428a      	cmp	r2, r1
    3cec:	d949      	bls.n	3d82 <__udivdi3+0xa6>
    3cee:	fab2 f782 	clz	r7, r2
    3cf2:	b147      	cbz	r7, 3d06 <__udivdi3+0x2a>
    3cf4:	f1c7 0120 	rsb	r1, r7, #32
    3cf8:	fa20 f201 	lsr.w	r2, r0, r1
    3cfc:	fa06 f607 	lsl.w	r6, r6, r7
    3d00:	40bc      	lsls	r4, r7
    3d02:	40bd      	lsls	r5, r7
    3d04:	4316      	orrs	r6, r2
    3d06:	0c22      	lsrs	r2, r4, #16
    3d08:	fbb6 f0f2 	udiv	r0, r6, r2
    3d0c:	b2a1      	uxth	r1, r4
    3d0e:	fb02 6610 	mls	r6, r2, r0, r6
    3d12:	fb01 f300 	mul.w	r3, r1, r0
    3d16:	0c2f      	lsrs	r7, r5, #16
    3d18:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    3d1c:	42b3      	cmp	r3, r6
    3d1e:	d908      	bls.n	3d32 <__udivdi3+0x56>
    3d20:	1e47      	subs	r7, r0, #1
    3d22:	1936      	adds	r6, r6, r4
    3d24:	f080 80fa 	bcs.w	3f1c <__udivdi3+0x240>
    3d28:	42b3      	cmp	r3, r6
    3d2a:	f240 80f7 	bls.w	3f1c <__udivdi3+0x240>
    3d2e:	3802      	subs	r0, #2
    3d30:	1936      	adds	r6, r6, r4
    3d32:	1af6      	subs	r6, r6, r3
    3d34:	fbb6 f3f2 	udiv	r3, r6, r2
    3d38:	fb02 6213 	mls	r2, r2, r3, r6
    3d3c:	fb01 f103 	mul.w	r1, r1, r3
    3d40:	b2ad      	uxth	r5, r5
    3d42:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    3d46:	4291      	cmp	r1, r2
    3d48:	d907      	bls.n	3d5a <__udivdi3+0x7e>
    3d4a:	1e5e      	subs	r6, r3, #1
    3d4c:	1912      	adds	r2, r2, r4
    3d4e:	f080 80e7 	bcs.w	3f20 <__udivdi3+0x244>
    3d52:	4291      	cmp	r1, r2
    3d54:	f240 80e4 	bls.w	3f20 <__udivdi3+0x244>
    3d58:	3b02      	subs	r3, #2
    3d5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    3d5e:	2100      	movs	r1, #0
    3d60:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    3d64:	4770      	bx	lr
    3d66:	428b      	cmp	r3, r1
    3d68:	d843      	bhi.n	3df2 <__udivdi3+0x116>
    3d6a:	fab3 f483 	clz	r4, r3
    3d6e:	2c00      	cmp	r4, #0
    3d70:	d142      	bne.n	3df8 <__udivdi3+0x11c>
    3d72:	428b      	cmp	r3, r1
    3d74:	d302      	bcc.n	3d7c <__udivdi3+0xa0>
    3d76:	4282      	cmp	r2, r0
    3d78:	f200 80e1 	bhi.w	3f3e <__udivdi3+0x262>
    3d7c:	2100      	movs	r1, #0
    3d7e:	2001      	movs	r0, #1
    3d80:	e7ee      	b.n	3d60 <__udivdi3+0x84>
    3d82:	b912      	cbnz	r2, 3d8a <__udivdi3+0xae>
    3d84:	2701      	movs	r7, #1
    3d86:	fbb7 f4f2 	udiv	r4, r7, r2
    3d8a:	fab4 f284 	clz	r2, r4
    3d8e:	2a00      	cmp	r2, #0
    3d90:	f040 8089 	bne.w	3ea6 <__udivdi3+0x1ca>
    3d94:	1b0a      	subs	r2, r1, r4
    3d96:	0c23      	lsrs	r3, r4, #16
    3d98:	b2a7      	uxth	r7, r4
    3d9a:	2101      	movs	r1, #1
    3d9c:	fbb2 f6f3 	udiv	r6, r2, r3
    3da0:	fb03 2216 	mls	r2, r3, r6, r2
    3da4:	fb07 f006 	mul.w	r0, r7, r6
    3da8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    3dac:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    3db0:	4290      	cmp	r0, r2
    3db2:	d907      	bls.n	3dc4 <__udivdi3+0xe8>
    3db4:	1912      	adds	r2, r2, r4
    3db6:	f106 3cff 	add.w	ip, r6, #4294967295
    3dba:	d202      	bcs.n	3dc2 <__udivdi3+0xe6>
    3dbc:	4290      	cmp	r0, r2
    3dbe:	f200 80d0 	bhi.w	3f62 <__udivdi3+0x286>
    3dc2:	4666      	mov	r6, ip
    3dc4:	1a12      	subs	r2, r2, r0
    3dc6:	fbb2 f0f3 	udiv	r0, r2, r3
    3dca:	fb03 2310 	mls	r3, r3, r0, r2
    3dce:	fb07 f700 	mul.w	r7, r7, r0
    3dd2:	b2ad      	uxth	r5, r5
    3dd4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    3dd8:	429f      	cmp	r7, r3
    3dda:	d907      	bls.n	3dec <__udivdi3+0x110>
    3ddc:	1e42      	subs	r2, r0, #1
    3dde:	191b      	adds	r3, r3, r4
    3de0:	f080 80a0 	bcs.w	3f24 <__udivdi3+0x248>
    3de4:	429f      	cmp	r7, r3
    3de6:	f240 809d 	bls.w	3f24 <__udivdi3+0x248>
    3dea:	3802      	subs	r0, #2
    3dec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    3df0:	e7b6      	b.n	3d60 <__udivdi3+0x84>
    3df2:	2100      	movs	r1, #0
    3df4:	4608      	mov	r0, r1
    3df6:	e7b3      	b.n	3d60 <__udivdi3+0x84>
    3df8:	f1c4 0620 	rsb	r6, r4, #32
    3dfc:	fa22 f706 	lsr.w	r7, r2, r6
    3e00:	fa03 f304 	lsl.w	r3, r3, r4
    3e04:	fa21 f506 	lsr.w	r5, r1, r6
    3e08:	fa01 f104 	lsl.w	r1, r1, r4
    3e0c:	fa20 f606 	lsr.w	r6, r0, r6
    3e10:	433b      	orrs	r3, r7
    3e12:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    3e16:	fbb5 f7fc 	udiv	r7, r5, ip
    3e1a:	fa1f f883 	uxth.w	r8, r3
    3e1e:	fb0c 5517 	mls	r5, ip, r7, r5
    3e22:	fb08 f907 	mul.w	r9, r8, r7
    3e26:	ea46 0a01 	orr.w	sl, r6, r1
    3e2a:	ea4f 411a 	mov.w	r1, sl, lsr #16
    3e2e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    3e32:	45a9      	cmp	r9, r5
    3e34:	fa02 f204 	lsl.w	r2, r2, r4
    3e38:	d904      	bls.n	3e44 <__udivdi3+0x168>
    3e3a:	1e7e      	subs	r6, r7, #1
    3e3c:	18ed      	adds	r5, r5, r3
    3e3e:	f0c0 8081 	bcc.w	3f44 <__udivdi3+0x268>
    3e42:	4637      	mov	r7, r6
    3e44:	ebc9 0105 	rsb	r1, r9, r5
    3e48:	fbb1 f6fc 	udiv	r6, r1, ip
    3e4c:	fb0c 1516 	mls	r5, ip, r6, r1
    3e50:	fb08 f806 	mul.w	r8, r8, r6
    3e54:	fa1f fa8a 	uxth.w	sl, sl
    3e58:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    3e5c:	4588      	cmp	r8, r1
    3e5e:	d903      	bls.n	3e68 <__udivdi3+0x18c>
    3e60:	1e75      	subs	r5, r6, #1
    3e62:	18c9      	adds	r1, r1, r3
    3e64:	d374      	bcc.n	3f50 <__udivdi3+0x274>
    3e66:	462e      	mov	r6, r5
    3e68:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    3e6c:	0c37      	lsrs	r7, r6, #16
    3e6e:	fa1f fc82 	uxth.w	ip, r2
    3e72:	fb0c f507 	mul.w	r5, ip, r7
    3e76:	0c12      	lsrs	r2, r2, #16
    3e78:	b2b3      	uxth	r3, r6
    3e7a:	fb0c fc03 	mul.w	ip, ip, r3
    3e7e:	fb02 5303 	mla	r3, r2, r3, r5
    3e82:	fb02 f207 	mul.w	r2, r2, r7
    3e86:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    3e8a:	429d      	cmp	r5, r3
    3e8c:	bf88      	it	hi
    3e8e:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    3e92:	ebc8 0101 	rsb	r1, r8, r1
    3e96:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    3e9a:	4291      	cmp	r1, r2
    3e9c:	d34c      	bcc.n	3f38 <__udivdi3+0x25c>
    3e9e:	d043      	beq.n	3f28 <__udivdi3+0x24c>
    3ea0:	4630      	mov	r0, r6
    3ea2:	2100      	movs	r1, #0
    3ea4:	e75c      	b.n	3d60 <__udivdi3+0x84>
    3ea6:	4094      	lsls	r4, r2
    3ea8:	f1c2 0520 	rsb	r5, r2, #32
    3eac:	fa21 f605 	lsr.w	r6, r1, r5
    3eb0:	fa20 f505 	lsr.w	r5, r0, r5
    3eb4:	fa01 f102 	lsl.w	r1, r1, r2
    3eb8:	0c23      	lsrs	r3, r4, #16
    3eba:	fbb6 fcf3 	udiv	ip, r6, r3
    3ebe:	b2a7      	uxth	r7, r4
    3ec0:	fb03 661c 	mls	r6, r3, ip, r6
    3ec4:	fb07 f80c 	mul.w	r8, r7, ip
    3ec8:	4329      	orrs	r1, r5
    3eca:	0c0d      	lsrs	r5, r1, #16
    3ecc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    3ed0:	45b0      	cmp	r8, r6
    3ed2:	fa00 f502 	lsl.w	r5, r0, r2
    3ed6:	d908      	bls.n	3eea <__udivdi3+0x20e>
    3ed8:	1936      	adds	r6, r6, r4
    3eda:	f10c 30ff 	add.w	r0, ip, #4294967295
    3ede:	d23e      	bcs.n	3f5e <__udivdi3+0x282>
    3ee0:	45b0      	cmp	r8, r6
    3ee2:	d93c      	bls.n	3f5e <__udivdi3+0x282>
    3ee4:	f1ac 0c02 	sub.w	ip, ip, #2
    3ee8:	1936      	adds	r6, r6, r4
    3eea:	ebc8 0206 	rsb	r2, r8, r6
    3eee:	fbb2 f0f3 	udiv	r0, r2, r3
    3ef2:	fb03 2610 	mls	r6, r3, r0, r2
    3ef6:	fb07 f800 	mul.w	r8, r7, r0
    3efa:	b289      	uxth	r1, r1
    3efc:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
    3f00:	4590      	cmp	r8, r2
    3f02:	d906      	bls.n	3f12 <__udivdi3+0x236>
    3f04:	1e46      	subs	r6, r0, #1
    3f06:	1912      	adds	r2, r2, r4
    3f08:	d227      	bcs.n	3f5a <__udivdi3+0x27e>
    3f0a:	4590      	cmp	r8, r2
    3f0c:	d925      	bls.n	3f5a <__udivdi3+0x27e>
    3f0e:	3802      	subs	r0, #2
    3f10:	1912      	adds	r2, r2, r4
    3f12:	ebc8 0202 	rsb	r2, r8, r2
    3f16:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    3f1a:	e73f      	b.n	3d9c <__udivdi3+0xc0>
    3f1c:	4638      	mov	r0, r7
    3f1e:	e708      	b.n	3d32 <__udivdi3+0x56>
    3f20:	4633      	mov	r3, r6
    3f22:	e71a      	b.n	3d5a <__udivdi3+0x7e>
    3f24:	4610      	mov	r0, r2
    3f26:	e761      	b.n	3dec <__udivdi3+0x110>
    3f28:	fa00 f004 	lsl.w	r0, r0, r4
    3f2c:	fa1f fc8c 	uxth.w	ip, ip
    3f30:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    3f34:	4298      	cmp	r0, r3
    3f36:	d2b3      	bcs.n	3ea0 <__udivdi3+0x1c4>
    3f38:	1e70      	subs	r0, r6, #1
    3f3a:	2100      	movs	r1, #0
    3f3c:	e710      	b.n	3d60 <__udivdi3+0x84>
    3f3e:	4621      	mov	r1, r4
    3f40:	4620      	mov	r0, r4
    3f42:	e70d      	b.n	3d60 <__udivdi3+0x84>
    3f44:	45a9      	cmp	r9, r5
    3f46:	f67f af7c 	bls.w	3e42 <__udivdi3+0x166>
    3f4a:	3f02      	subs	r7, #2
    3f4c:	18ed      	adds	r5, r5, r3
    3f4e:	e779      	b.n	3e44 <__udivdi3+0x168>
    3f50:	4588      	cmp	r8, r1
    3f52:	d988      	bls.n	3e66 <__udivdi3+0x18a>
    3f54:	3e02      	subs	r6, #2
    3f56:	18c9      	adds	r1, r1, r3
    3f58:	e786      	b.n	3e68 <__udivdi3+0x18c>
    3f5a:	4630      	mov	r0, r6
    3f5c:	e7d9      	b.n	3f12 <__udivdi3+0x236>
    3f5e:	4684      	mov	ip, r0
    3f60:	e7c3      	b.n	3eea <__udivdi3+0x20e>
    3f62:	3e02      	subs	r6, #2
    3f64:	1912      	adds	r2, r2, r4
    3f66:	e72d      	b.n	3dc4 <__udivdi3+0xe8>

00003f68 <memset>:
    3f68:	b4f0      	push	{r4, r5, r6, r7}
    3f6a:	0784      	lsls	r4, r0, #30
    3f6c:	4603      	mov	r3, r0
    3f6e:	f000 808d 	beq.w	408c <memset+0x124>
    3f72:	1e54      	subs	r4, r2, #1
    3f74:	2a00      	cmp	r2, #0
    3f76:	f000 8087 	beq.w	4088 <memset+0x120>
    3f7a:	07e5      	lsls	r5, r4, #31
    3f7c:	b2ce      	uxtb	r6, r1
    3f7e:	d411      	bmi.n	3fa4 <memset+0x3c>
    3f80:	461a      	mov	r2, r3
    3f82:	f802 6b01 	strb.w	r6, [r2], #1
    3f86:	4613      	mov	r3, r2
    3f88:	4615      	mov	r5, r2
    3f8a:	0792      	lsls	r2, r2, #30
    3f8c:	d010      	beq.n	3fb0 <memset+0x48>
    3f8e:	1e62      	subs	r2, r4, #1
    3f90:	2c00      	cmp	r4, #0
    3f92:	d079      	beq.n	4088 <memset+0x120>
    3f94:	f803 6b01 	strb.w	r6, [r3], #1
    3f98:	4614      	mov	r4, r2
    3f9a:	079a      	lsls	r2, r3, #30
    3f9c:	461d      	mov	r5, r3
    3f9e:	d007      	beq.n	3fb0 <memset+0x48>
    3fa0:	3c01      	subs	r4, #1
    3fa2:	e7ed      	b.n	3f80 <memset+0x18>
    3fa4:	4603      	mov	r3, r0
    3fa6:	f803 6b01 	strb.w	r6, [r3], #1
    3faa:	079a      	lsls	r2, r3, #30
    3fac:	461d      	mov	r5, r3
    3fae:	d1f7      	bne.n	3fa0 <memset+0x38>
    3fb0:	2c03      	cmp	r4, #3
    3fb2:	d952      	bls.n	405a <memset+0xf2>
    3fb4:	b2ce      	uxtb	r6, r1
    3fb6:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
    3fba:	2c0f      	cmp	r4, #15
    3fbc:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
    3fc0:	d92d      	bls.n	401e <memset+0xb6>
    3fc2:	f1a4 0210 	sub.w	r2, r4, #16
    3fc6:	4617      	mov	r7, r2
    3fc8:	2f0f      	cmp	r7, #15
    3fca:	f3c2 1600 	ubfx	r6, r2, #4, #1
    3fce:	602b      	str	r3, [r5, #0]
    3fd0:	606b      	str	r3, [r5, #4]
    3fd2:	60ab      	str	r3, [r5, #8]
    3fd4:	60eb      	str	r3, [r5, #12]
    3fd6:	f105 0210 	add.w	r2, r5, #16
    3fda:	d916      	bls.n	400a <memset+0xa2>
    3fdc:	b13e      	cbz	r6, 3fee <memset+0x86>
    3fde:	3f10      	subs	r7, #16
    3fe0:	6013      	str	r3, [r2, #0]
    3fe2:	6053      	str	r3, [r2, #4]
    3fe4:	6093      	str	r3, [r2, #8]
    3fe6:	60d3      	str	r3, [r2, #12]
    3fe8:	3210      	adds	r2, #16
    3fea:	2f0f      	cmp	r7, #15
    3fec:	d90d      	bls.n	400a <memset+0xa2>
    3fee:	3f20      	subs	r7, #32
    3ff0:	f102 0610 	add.w	r6, r2, #16
    3ff4:	6013      	str	r3, [r2, #0]
    3ff6:	6053      	str	r3, [r2, #4]
    3ff8:	6093      	str	r3, [r2, #8]
    3ffa:	60d3      	str	r3, [r2, #12]
    3ffc:	6113      	str	r3, [r2, #16]
    3ffe:	6153      	str	r3, [r2, #20]
    4000:	6193      	str	r3, [r2, #24]
    4002:	61d3      	str	r3, [r2, #28]
    4004:	3220      	adds	r2, #32
    4006:	2f0f      	cmp	r7, #15
    4008:	d8f1      	bhi.n	3fee <memset+0x86>
    400a:	f1a4 0210 	sub.w	r2, r4, #16
    400e:	f022 020f 	bic.w	r2, r2, #15
    4012:	f004 040f 	and.w	r4, r4, #15
    4016:	3210      	adds	r2, #16
    4018:	2c03      	cmp	r4, #3
    401a:	4415      	add	r5, r2
    401c:	d91d      	bls.n	405a <memset+0xf2>
    401e:	1f27      	subs	r7, r4, #4
    4020:	463e      	mov	r6, r7
    4022:	462a      	mov	r2, r5
    4024:	2e03      	cmp	r6, #3
    4026:	f842 3b04 	str.w	r3, [r2], #4
    402a:	f3c7 0780 	ubfx	r7, r7, #2, #1
    402e:	d90d      	bls.n	404c <memset+0xe4>
    4030:	b127      	cbz	r7, 403c <memset+0xd4>
    4032:	3e04      	subs	r6, #4
    4034:	2e03      	cmp	r6, #3
    4036:	f842 3b04 	str.w	r3, [r2], #4
    403a:	d907      	bls.n	404c <memset+0xe4>
    403c:	4617      	mov	r7, r2
    403e:	f847 3b04 	str.w	r3, [r7], #4
    4042:	3e08      	subs	r6, #8
    4044:	6053      	str	r3, [r2, #4]
    4046:	1d3a      	adds	r2, r7, #4
    4048:	2e03      	cmp	r6, #3
    404a:	d8f7      	bhi.n	403c <memset+0xd4>
    404c:	1f23      	subs	r3, r4, #4
    404e:	f023 0203 	bic.w	r2, r3, #3
    4052:	1d13      	adds	r3, r2, #4
    4054:	f004 0403 	and.w	r4, r4, #3
    4058:	18ed      	adds	r5, r5, r3
    405a:	b1ac      	cbz	r4, 4088 <memset+0x120>
    405c:	b2c9      	uxtb	r1, r1
    405e:	43ea      	mvns	r2, r5
    4060:	192c      	adds	r4, r5, r4
    4062:	f805 1b01 	strb.w	r1, [r5], #1
    4066:	18a3      	adds	r3, r4, r2
    4068:	42a5      	cmp	r5, r4
    406a:	f003 0201 	and.w	r2, r3, #1
    406e:	d00b      	beq.n	4088 <memset+0x120>
    4070:	b11a      	cbz	r2, 407a <memset+0x112>
    4072:	f805 1b01 	strb.w	r1, [r5], #1
    4076:	42a5      	cmp	r5, r4
    4078:	d006      	beq.n	4088 <memset+0x120>
    407a:	462b      	mov	r3, r5
    407c:	f803 1b01 	strb.w	r1, [r3], #1
    4080:	7069      	strb	r1, [r5, #1]
    4082:	1c5d      	adds	r5, r3, #1
    4084:	42a5      	cmp	r5, r4
    4086:	d1f8      	bne.n	407a <memset+0x112>
    4088:	bcf0      	pop	{r4, r5, r6, r7}
    408a:	4770      	bx	lr
    408c:	4605      	mov	r5, r0
    408e:	4614      	mov	r4, r2
    4090:	e78e      	b.n	3fb0 <memset+0x48>
    4092:	bf00      	nop
