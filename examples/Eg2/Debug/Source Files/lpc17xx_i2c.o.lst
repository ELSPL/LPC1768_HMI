   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"lpc17xx_i2c.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	1
  19              		.thumb
  20              		.thumb_func
  22              	I2C_getNum:
  23              	.LFB55:
  24              		.file 1 "../Source Files/lpc17xx_i2c.c"
   1:../Source Files/lpc17xx_i2c.c **** /**********************************************************************
   2:../Source Files/lpc17xx_i2c.c **** * $Id$		lpc17xx_i2c.c
   3:../Source Files/lpc17xx_i2c.c **** *//**
   4:../Source Files/lpc17xx_i2c.c **** * @file		lpc17xx_i2c.c
   5:../Source Files/lpc17xx_i2c.c **** * @brief	Contains all functions support for I2C firmware library on LPC17xx
   6:../Source Files/lpc17xx_i2c.c **** * @version	1.0
   7:../Source Files/lpc17xx_i2c.c **** * @date		11. Dec. 2013
   8:../Source Files/lpc17xx_i2c.c **** * @author	Dwijay.Edutech Learning Solutions
   9:../Source Files/lpc17xx_i2c.c **** ***********************************************************************
  10:../Source Files/lpc17xx_i2c.c **** * Software that is described herein is for illustrative purposes only
  11:../Source Files/lpc17xx_i2c.c **** * which provides customers with programming information regarding the
  12:../Source Files/lpc17xx_i2c.c **** * products. This software is supplied "AS IS" without any warranties.
  13:../Source Files/lpc17xx_i2c.c **** * NXP Semiconductors assumes no responsibility or liability for the
  14:../Source Files/lpc17xx_i2c.c **** * use of the software, conveys no license or title under any patent,
  15:../Source Files/lpc17xx_i2c.c **** * copyright, or mask work right to the product. NXP Semiconductors
  16:../Source Files/lpc17xx_i2c.c **** * reserves the right to make changes in the software without
  17:../Source Files/lpc17xx_i2c.c **** * notification. NXP Semiconductors also make no representation or
  18:../Source Files/lpc17xx_i2c.c **** * warranty that such application will be suitable for the specified
  19:../Source Files/lpc17xx_i2c.c **** * use without further testing or modification.
  20:../Source Files/lpc17xx_i2c.c **** **********************************************************************/
  21:../Source Files/lpc17xx_i2c.c **** 
  22:../Source Files/lpc17xx_i2c.c **** /* Peripheral group ----------------------------------------------------------- */
  23:../Source Files/lpc17xx_i2c.c **** /** @addtogroup I2C
  24:../Source Files/lpc17xx_i2c.c ****  * @{
  25:../Source Files/lpc17xx_i2c.c ****  */
  26:../Source Files/lpc17xx_i2c.c **** 
  27:../Source Files/lpc17xx_i2c.c **** /* Includes ------------------------------------------------------------------- */
  28:../Source Files/lpc17xx_i2c.c **** #include "lpc17xx_i2c.h"
  29:../Source Files/lpc17xx_i2c.c **** 
  30:../Source Files/lpc17xx_i2c.c **** 
  31:../Source Files/lpc17xx_i2c.c **** /* If this source file built with example, the LPC17xx FW library configuration
  32:../Source Files/lpc17xx_i2c.c ****  * file in each example directory ("lpc17xx_libcfg.h") must be included,
  33:../Source Files/lpc17xx_i2c.c ****  * otherwise the default FW library configuration file must be included instead
  34:../Source Files/lpc17xx_i2c.c ****  */
  35:../Source Files/lpc17xx_i2c.c **** 
  36:../Source Files/lpc17xx_i2c.c **** LPC_I2C_TypeDef*  regs;
  37:../Source Files/lpc17xx_i2c.c **** IRQn_Type         irqn;
  38:../Source Files/lpc17xx_i2c.c **** uint32_t ignore_data_nack = 1;
  39:../Source Files/lpc17xx_i2c.c **** 
  40:../Source Files/lpc17xx_i2c.c **** /* Private Types -------------------------------------------------------------- */
  41:../Source Files/lpc17xx_i2c.c **** /** @defgroup I2C_Private_Types I2C Private Types
  42:../Source Files/lpc17xx_i2c.c ****  * @{
  43:../Source Files/lpc17xx_i2c.c ****  */
  44:../Source Files/lpc17xx_i2c.c **** 
  45:../Source Files/lpc17xx_i2c.c **** /**
  46:../Source Files/lpc17xx_i2c.c ****  * @brief I2C device configuration structure type
  47:../Source Files/lpc17xx_i2c.c ****  */
  48:../Source Files/lpc17xx_i2c.c **** typedef struct
  49:../Source Files/lpc17xx_i2c.c **** {
  50:../Source Files/lpc17xx_i2c.c ****   uint32_t      txrx_setup; 						/* Transmission setup */
  51:../Source Files/lpc17xx_i2c.c ****   int32_t		dir;								/* Current direction phase, 0 - write, 1 - read */
  52:../Source Files/lpc17xx_i2c.c **** } I2C_CFG_T;
  53:../Source Files/lpc17xx_i2c.c **** 
  54:../Source Files/lpc17xx_i2c.c **** /**
  55:../Source Files/lpc17xx_i2c.c ****  * @}
  56:../Source Files/lpc17xx_i2c.c ****  */
  57:../Source Files/lpc17xx_i2c.c **** 
  58:../Source Files/lpc17xx_i2c.c **** /* Private Variables ---------------------------------------------------------- */
  59:../Source Files/lpc17xx_i2c.c **** /**
  60:../Source Files/lpc17xx_i2c.c ****  * @brief II2C driver data for I2C0, I2C1 and I2C2
  61:../Source Files/lpc17xx_i2c.c ****  */
  62:../Source Files/lpc17xx_i2c.c **** static I2C_CFG_T i2cdat[3];
  63:../Source Files/lpc17xx_i2c.c **** 
  64:../Source Files/lpc17xx_i2c.c **** static uint32_t I2C_MasterComplete[3];
  65:../Source Files/lpc17xx_i2c.c **** static uint32_t I2C_SlaveComplete[3];
  66:../Source Files/lpc17xx_i2c.c **** 
  67:../Source Files/lpc17xx_i2c.c **** static uint32_t I2C_MonitorBufferIndex;
  68:../Source Files/lpc17xx_i2c.c **** 
  69:../Source Files/lpc17xx_i2c.c **** /* Private Functions ---------------------------------------------------------- */
  70:../Source Files/lpc17xx_i2c.c **** 
  71:../Source Files/lpc17xx_i2c.c **** /* Get I2C number */
  72:../Source Files/lpc17xx_i2c.c **** static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx);
  73:../Source Files/lpc17xx_i2c.c **** 
  74:../Source Files/lpc17xx_i2c.c **** /* Generate a start condition on I2C bus (in master mode only) */
  75:../Source Files/lpc17xx_i2c.c **** static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx);
  76:../Source Files/lpc17xx_i2c.c **** 
  77:../Source Files/lpc17xx_i2c.c **** /* Generate a stop condition on I2C bus (in master mode only) */
  78:../Source Files/lpc17xx_i2c.c **** static void I2C_Stop (LPC_I2C_TypeDef *I2Cx);
  79:../Source Files/lpc17xx_i2c.c **** 
  80:../Source Files/lpc17xx_i2c.c **** /* I2C send byte subroutine */
  81:../Source Files/lpc17xx_i2c.c **** static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte);
  82:../Source Files/lpc17xx_i2c.c **** 
  83:../Source Files/lpc17xx_i2c.c **** /* I2C get byte subroutine */
  84:../Source Files/lpc17xx_i2c.c **** static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack);
  85:../Source Files/lpc17xx_i2c.c **** 
  86:../Source Files/lpc17xx_i2c.c **** /* I2C set clock (hz) */
  87:../Source Files/lpc17xx_i2c.c **** static void I2C_SetClock (LPC_I2C_TypeDef *I2Cx, uint32_t target_clock);
  88:../Source Files/lpc17xx_i2c.c **** 
  89:../Source Files/lpc17xx_i2c.c **** /*--------------------------------------------------------------------------------*/
  90:../Source Files/lpc17xx_i2c.c **** /********************************************************************//**
  91:../Source Files/lpc17xx_i2c.c ****  * @brief		Convert from I2C peripheral to number
  92:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
  93:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
  94:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
  95:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
  96:../Source Files/lpc17xx_i2c.c ****  * @return 		I2C number, could be: 0..2
  97:../Source Files/lpc17xx_i2c.c ****  *********************************************************************/
  98:../Source Files/lpc17xx_i2c.c **** static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx)
  99:../Source Files/lpc17xx_i2c.c **** {
  25              		.loc 1 99 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 100:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx == LPC_I2C0)
  31              		.loc 1 100 0
  32 0000 094B     		ldr	r3, .L7
  33 0002 9842     		cmp	r0, r3
  34 0004 0BD0     		beq	.L3
 101:../Source Files/lpc17xx_i2c.c **** 	{
 102:../Source Files/lpc17xx_i2c.c **** 		return (0);
 103:../Source Files/lpc17xx_i2c.c **** 	}
 104:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx == LPC_I2C1)
  35              		.loc 1 104 0
  36 0006 03F58021 		add	r1, r3, #262144
  37 000a 8842     		cmp	r0, r1
  38 000c 09D0     		beq	.L4
 105:../Source Files/lpc17xx_i2c.c **** 	{
 106:../Source Files/lpc17xx_i2c.c **** 		return (1);
 107:../Source Files/lpc17xx_i2c.c **** 	}
 108:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx == LPC_I2C2)
 109:../Source Files/lpc17xx_i2c.c **** 	{
 110:../Source Files/lpc17xx_i2c.c **** 		return (2);
  39              		.loc 1 110 0
  40 000e 01F58822 		add	r2, r1, #278528
  41 0012 9042     		cmp	r0, r2
  42 0014 14BF     		ite	ne
  43 0016 4FF0FF30 		movne	r0, #-1
  44 001a 0220     		moveq	r0, #2
  45              	.LVL1:
  46 001c 7047     		bx	lr
  47              	.LVL2:
  48              	.L3:
 102:../Source Files/lpc17xx_i2c.c **** 		return (0);
  49              		.loc 1 102 0
  50 001e 0020     		movs	r0, #0
  51              	.LVL3:
  52 0020 7047     		bx	lr
  53              	.LVL4:
  54              	.L4:
 106:../Source Files/lpc17xx_i2c.c **** 		return (1);
  55              		.loc 1 106 0
  56 0022 0120     		movs	r0, #1
  57              	.LVL5:
 111:../Source Files/lpc17xx_i2c.c **** 	}
 112:../Source Files/lpc17xx_i2c.c **** 	return (-1);
 113:../Source Files/lpc17xx_i2c.c **** }
  58              		.loc 1 113 0
  59 0024 7047     		bx	lr
  60              	.L8:
  61 0026 00BF     		.align	2
  62              	.L7:
  63 0028 00C00140 		.word	1073856512
  64              		.cfi_endproc
  65              	.LFE55:
  67              		.align	1
  68              		.thumb
  69              		.thumb_func
  71              	I2C_SendByte:
  72              	.LFB58:
 114:../Source Files/lpc17xx_i2c.c **** 
 115:../Source Files/lpc17xx_i2c.c **** /********************************************************************//**
 116:../Source Files/lpc17xx_i2c.c ****  * @brief		Generate a start condition on I2C bus (in master mode only)
 117:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 118:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 119:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 120:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 121:../Source Files/lpc17xx_i2c.c ****  * @return 		value of I2C status register after generate a start condition
 122:../Source Files/lpc17xx_i2c.c ****  *********************************************************************/
 123:../Source Files/lpc17xx_i2c.c **** static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
 124:../Source Files/lpc17xx_i2c.c **** {
 125:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STA;
 126:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 127:../Source Files/lpc17xx_i2c.c **** 
 128:../Source Files/lpc17xx_i2c.c **** 	// Wait for complete
 129:../Source Files/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 130:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 131:../Source Files/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 132:../Source Files/lpc17xx_i2c.c **** }
 133:../Source Files/lpc17xx_i2c.c **** 
 134:../Source Files/lpc17xx_i2c.c **** /********************************************************************//**
 135:../Source Files/lpc17xx_i2c.c ****  * @brief		Generate a stop condition on I2C bus (in master mode only)
 136:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 137:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 138:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 139:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 140:../Source Files/lpc17xx_i2c.c ****  * @return 		None
 141:../Source Files/lpc17xx_i2c.c ****  *********************************************************************/
 142:../Source Files/lpc17xx_i2c.c **** static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
 143:../Source Files/lpc17xx_i2c.c **** {
 144:../Source Files/lpc17xx_i2c.c **** 	/* Make sure start bit is not active */
 145:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
 146:../Source Files/lpc17xx_i2c.c **** 	{
 147:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 148:../Source Files/lpc17xx_i2c.c **** 	}
 149:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STO;
 150:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 151:../Source Files/lpc17xx_i2c.c **** }
 152:../Source Files/lpc17xx_i2c.c **** 
 153:../Source Files/lpc17xx_i2c.c **** /********************************************************************//**
 154:../Source Files/lpc17xx_i2c.c ****  * @brief		Send a byte
 155:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 156:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 157:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 158:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 159:../Source Files/lpc17xx_i2c.c ****  * @param[in]	databyte: number of byte
 160:../Source Files/lpc17xx_i2c.c ****  * @return 		value of I2C status register after sending
 161:../Source Files/lpc17xx_i2c.c ****  *********************************************************************/
 162:../Source Files/lpc17xx_i2c.c **** static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte)
 163:../Source Files/lpc17xx_i2c.c **** {
  73              		.loc 1 163 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL6:
 164:../Source Files/lpc17xx_i2c.c **** 	/* Make sure start bit is not active */
 165:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
  79              		.loc 1 165 0
  80 002c 0368     		ldr	r3, [r0, #0]
  81 002e 9A06     		lsls	r2, r3, #26
  82 0030 01D5     		bpl	.L10
 166:../Source Files/lpc17xx_i2c.c **** 	{
 167:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
  83              		.loc 1 167 0
  84 0032 2022     		movs	r2, #32
  85 0034 8261     		str	r2, [r0, #24]
  86              	.L10:
 168:../Source Files/lpc17xx_i2c.c **** 	}
 169:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;
  87              		.loc 1 169 0
  88 0036 8160     		str	r1, [r0, #8]
 170:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
  89              		.loc 1 170 0
  90 0038 0821     		movs	r1, #8
  91              	.LVL7:
  92 003a 8161     		str	r1, [r0, #24]
  93              	.L11:
 171:../Source Files/lpc17xx_i2c.c **** 
 172:../Source Files/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
  94              		.loc 1 172 0 discriminator 1
  95 003c 0368     		ldr	r3, [r0, #0]
  96 003e 1B07     		lsls	r3, r3, #28
  97 0040 FCD5     		bpl	.L11
 173:../Source Files/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
  98              		.loc 1 173 0
  99 0042 4068     		ldr	r0, [r0, #4]
 100              	.LVL8:
 174:../Source Files/lpc17xx_i2c.c **** }
 101              		.loc 1 174 0
 102 0044 00F0F800 		and	r0, r0, #248
 103 0048 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE58:
 107              		.align	1
 108              		.global	Buffer_Init
 109              		.thumb
 110              		.thumb_func
 112              	Buffer_Init:
 113              	.LFB61:
 175:../Source Files/lpc17xx_i2c.c **** 
 176:../Source Files/lpc17xx_i2c.c **** /********************************************************************//**
 177:../Source Files/lpc17xx_i2c.c ****  * @brief		Get a byte
 178:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx: I2C peripheral selected, should be:
 179:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 180:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 181:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 182:../Source Files/lpc17xx_i2c.c ****  * @param[out]	retdat	pointer to return data
 183:../Source Files/lpc17xx_i2c.c ****  * @param[in]	ack		assert acknowledge or not, should be: TRUE/FALSE
 184:../Source Files/lpc17xx_i2c.c ****  * @return 		value of I2C status register after sending
 185:../Source Files/lpc17xx_i2c.c ****  *********************************************************************/
 186:../Source Files/lpc17xx_i2c.c **** static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack)
 187:../Source Files/lpc17xx_i2c.c **** {
 188:../Source Files/lpc17xx_i2c.c **** 	if (ack == TRUE)
 189:../Source Files/lpc17xx_i2c.c **** 	{
 190:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 191:../Source Files/lpc17xx_i2c.c **** 	}
 192:../Source Files/lpc17xx_i2c.c **** 	else
 193:../Source Files/lpc17xx_i2c.c **** 	{
 194:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
 195:../Source Files/lpc17xx_i2c.c **** 	}
 196:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 197:../Source Files/lpc17xx_i2c.c **** 
 198:../Source Files/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 199:../Source Files/lpc17xx_i2c.c **** 	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 200:../Source Files/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 201:../Source Files/lpc17xx_i2c.c **** }
 202:../Source Files/lpc17xx_i2c.c **** 
 203:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
 204:../Source Files/lpc17xx_i2c.c ****  * @brief 		Setup clock rate for I2C peripheral
 205:../Source Files/lpc17xx_i2c.c ****  * @param[in] 	I2Cx	I2C peripheral selected, should be:
 206:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 207:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 208:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 209:../Source Files/lpc17xx_i2c.c ****  * @param[in]	target_clock : clock of SSP (Hz)
 210:../Source Files/lpc17xx_i2c.c ****  * @return 		None
 211:../Source Files/lpc17xx_i2c.c ****  ***********************************************************************/
 212:../Source Files/lpc17xx_i2c.c **** static void I2C_SetClock (LPC_I2C_TypeDef *I2Cx, uint32_t target_clock)
 213:../Source Files/lpc17xx_i2c.c **** {
 214:../Source Files/lpc17xx_i2c.c **** 	uint32_t temp;
 215:../Source Files/lpc17xx_i2c.c **** 
 216:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 217:../Source Files/lpc17xx_i2c.c **** 
 218:../Source Files/lpc17xx_i2c.c **** 	// Get PCLK of I2C controller
 219:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx == LPC_I2C0)
 220:../Source Files/lpc17xx_i2c.c **** 	{
 221:../Source Files/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
 222:../Source Files/lpc17xx_i2c.c **** 	}
 223:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx == LPC_I2C1)
 224:../Source Files/lpc17xx_i2c.c **** 	{
 225:../Source Files/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
 226:../Source Files/lpc17xx_i2c.c **** 	}
 227:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx == LPC_I2C2)
 228:../Source Files/lpc17xx_i2c.c **** 	{
 229:../Source Files/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
 230:../Source Files/lpc17xx_i2c.c **** 	}
 231:../Source Files/lpc17xx_i2c.c **** 
 232:../Source Files/lpc17xx_i2c.c **** 	/* Set the I2C clock value to register */
 233:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2SCLH = (uint32_t)(temp / 2);
 234:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
 235:../Source Files/lpc17xx_i2c.c **** }
 236:../Source Files/lpc17xx_i2c.c **** /* End of Private Functions --------------------------------------------------- */
 237:../Source Files/lpc17xx_i2c.c **** 
 238:../Source Files/lpc17xx_i2c.c **** 
 239:../Source Files/lpc17xx_i2c.c **** /* Public Functions ----------------------------------------------------------- */
 240:../Source Files/lpc17xx_i2c.c **** /** @addtogroup I2C_Public_Functions
 241:../Source Files/lpc17xx_i2c.c ****  * @{
 242:../Source Files/lpc17xx_i2c.c ****  */
 243:../Source Files/lpc17xx_i2c.c **** 
 244:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
 245:../Source Files/lpc17xx_i2c.c ****  * @brief		Initialize buffer
 246:../Source Files/lpc17xx_i2c.c ****  * @param[in]	None
 247:../Source Files/lpc17xx_i2c.c ****  * @return 		None
 248:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
 249:../Source Files/lpc17xx_i2c.c **** void Buffer_Init (void)
 250:../Source Files/lpc17xx_i2c.c **** {
 114              		.loc 1 250 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119              	.LVL9:
 120              		.loc 1 250 0
 121 004a 0023     		movs	r3, #0
 122              	.LVL10:
 123              	.L20:
 251:../Source Files/lpc17xx_i2c.c **** 	uint8_t i;
 252:../Source Files/lpc17xx_i2c.c **** #if (I2C_DATABIT_SIZE == 8)
 253:../Source Files/lpc17xx_i2c.c **** 	for (i = 0; i < BUFFER_SIZE; i++)
 254:../Source Files/lpc17xx_i2c.c **** 	{
 255:../Source Files/lpc17xx_i2c.c **** 		I2C_Tx_Buf[i] = 0;
 124              		.loc 1 255 0 discriminator 2
 125 004c 0449     		ldr	r1, .L22
 256:../Source Files/lpc17xx_i2c.c **** 		I2C_Rx_Buf[i] = 0;
 126              		.loc 1 256 0 discriminator 2
 127 004e 0548     		ldr	r0, .L22+4
 255:../Source Files/lpc17xx_i2c.c **** 		I2C_Tx_Buf[i] = 0;
 128              		.loc 1 255 0 discriminator 2
 129 0050 0022     		movs	r2, #0
 130 0052 5A54     		strb	r2, [r3, r1]
 131              		.loc 1 256 0 discriminator 2
 132 0054 1A54     		strb	r2, [r3, r0]
 133 0056 0133     		adds	r3, r3, #1
 253:../Source Files/lpc17xx_i2c.c **** 	for (i = 0; i < BUFFER_SIZE; i++)
 134              		.loc 1 253 0 discriminator 2
 135 0058 402B     		cmp	r3, #64
 136 005a F7D1     		bne	.L20
 257:../Source Files/lpc17xx_i2c.c **** 	}
 258:../Source Files/lpc17xx_i2c.c **** #else
 259:../Source Files/lpc17xx_i2c.c **** 	for (i = 0; i < BUFFER_SIZE/2; i++)
 260:../Source Files/lpc17xx_i2c.c **** 	{
 261:../Source Files/lpc17xx_i2c.c **** 		I2C_Tx_Buf[i] = 0;
 262:../Source Files/lpc17xx_i2c.c **** 		I2C_Rx_Buf[i] = 0;
 263:../Source Files/lpc17xx_i2c.c **** 	}
 264:../Source Files/lpc17xx_i2c.c **** #endif
 265:../Source Files/lpc17xx_i2c.c **** }
 137              		.loc 1 265 0
 138 005c 7047     		bx	lr
 139              	.L23:
 140 005e 00BF     		.align	2
 141              	.L22:
 142 0060 00000000 		.word	I2C_Tx_Buf
 143 0064 00000000 		.word	I2C_Rx_Buf
 144              		.cfi_endproc
 145              	.LFE61:
 147              		.align	1
 148              		.global	I2C_Init
 149              		.thumb
 150              		.thumb_func
 152              	I2C_Init:
 153              	.LFB63:
 266:../Source Files/lpc17xx_i2c.c **** 
 267:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
 268:../Source Files/lpc17xx_i2c.c ****  * @brief 		Initialize and Configure I2C device
 269:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
 270:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 271:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 272:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 273:../Source Files/lpc17xx_i2c.c ****  * @return 		None
 274:../Source Files/lpc17xx_i2c.c ****  ***********************************************************************/
 275:../Source Files/lpc17xx_i2c.c **** void I2C_Config (LPC_I2C_TypeDef *I2Cx)
 276:../Source Files/lpc17xx_i2c.c **** {
 277:../Source Files/lpc17xx_i2c.c **** 	// Pin configuration for I2C
 278:../Source Files/lpc17xx_i2c.c **** 	PINSEL_CFG_Type PinCfg;
 279:../Source Files/lpc17xx_i2c.c **** 
 280:../Source Files/lpc17xx_i2c.c **** 	if(I2Cx == LPC_I2C0)
 281:../Source Files/lpc17xx_i2c.c **** 	{
 282:../Source Files/lpc17xx_i2c.c **** 		/*
 283:../Source Files/lpc17xx_i2c.c **** 		 * Init I2C pin connect
 284:../Source Files/lpc17xx_i2c.c **** 		 */
 285:../Source Files/lpc17xx_i2c.c **** 		PinCfg.OpenDrain = 0;
 286:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Pinmode = 0;
 287:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Funcnum = 1;
 288:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Pinnum = 27;
 289:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Portnum = 0;
 290:../Source Files/lpc17xx_i2c.c **** 		PINSEL_ConfigPin(&PinCfg);
 291:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Pinnum = 28;
 292:../Source Files/lpc17xx_i2c.c **** 		PINSEL_ConfigPin(&PinCfg);
 293:../Source Files/lpc17xx_i2c.c **** 	}
 294:../Source Files/lpc17xx_i2c.c **** 
 295:../Source Files/lpc17xx_i2c.c **** 	/* I2C block ------------------------------------------------------------------- */
 296:../Source Files/lpc17xx_i2c.c **** 	// Initialize I2C peripheral
 297:../Source Files/lpc17xx_i2c.c **** 	I2C_Init(LPC_I2C0, 200000);
 298:../Source Files/lpc17xx_i2c.c **** 
 299:../Source Files/lpc17xx_i2c.c **** 	Buffer_Init ();
 300:../Source Files/lpc17xx_i2c.c **** 
 301:../Source Files/lpc17xx_i2c.c **** 	/* Enable I2C1 operation */
 302:../Source Files/lpc17xx_i2c.c **** 	I2C_Cmd(LPC_I2C0, ENABLE);
 303:../Source Files/lpc17xx_i2c.c **** }
 304:../Source Files/lpc17xx_i2c.c **** 
 305:../Source Files/lpc17xx_i2c.c **** 
 306:../Source Files/lpc17xx_i2c.c **** /********************************************************************//**
 307:../Source Files/lpc17xx_i2c.c ****  * @brief		Initializes the I2Cx peripheral with specified parameter.
 308:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
 309:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 310:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 311:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 312:../Source Files/lpc17xx_i2c.c ****  * @param[in]	clockrate Target clock rate value to initialized I2C
 313:../Source Files/lpc17xx_i2c.c ****  * 				peripheral (Hz)
 314:../Source Files/lpc17xx_i2c.c ****  * @return 		None
 315:../Source Files/lpc17xx_i2c.c ****  *********************************************************************/
 316:../Source Files/lpc17xx_i2c.c **** void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
 317:../Source Files/lpc17xx_i2c.c **** {
 154              		.loc 1 317 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL11:
 159 0068 38B5     		push	{r3, r4, r5, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 16
 162              		.cfi_offset 3, -16
 163              		.cfi_offset 4, -12
 164              		.cfi_offset 5, -8
 165              		.cfi_offset 14, -4
 318:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 319:../Source Files/lpc17xx_i2c.c **** 
 320:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx==LPC_I2C0)
 166              		.loc 1 320 0
 167 006a 1B4B     		ldr	r3, .L30
 317:../Source Files/lpc17xx_i2c.c **** {
 168              		.loc 1 317 0
 169 006c 0446     		mov	r4, r0
 170              		.loc 1 320 0
 171 006e 9842     		cmp	r0, r3
 317:../Source Files/lpc17xx_i2c.c **** {
 172              		.loc 1 317 0
 173 0070 0D46     		mov	r5, r1
 174              		.loc 1 320 0
 175 0072 09D1     		bne	.L25
 321:../Source Files/lpc17xx_i2c.c **** 	{
 322:../Source Files/lpc17xx_i2c.c **** 		/* Set up clock and power for I2C0 module */
 323:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
 176              		.loc 1 323 0
 177 0074 8020     		movs	r0, #128
 178              	.LVL12:
 179 0076 0121     		movs	r1, #1
 180              	.LVL13:
 181 0078 FFF7FEFF 		bl	CLKPWR_ConfigPPWR
 182              	.LVL14:
 324:../Source Files/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C0 module
 325:../Source Files/lpc17xx_i2c.c **** 		 * is set to FCCLK / 2 */
 326:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
 183              		.loc 1 326 0
 184 007c 0E20     		movs	r0, #14
 185 007e 0221     		movs	r1, #2
 186 0080 FFF7FEFF 		bl	CLKPWR_SetPCLKDiv
 187              	.LVL15:
 188              	.LBB6:
 189              	.LBB7:
 221:../Source Files/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
 190              		.loc 1 221 0
 191 0084 0E20     		movs	r0, #14
 192 0086 1AE0     		b	.L29
 193              	.LVL16:
 194              	.L25:
 195              	.LBE7:
 196              	.LBE6:
 327:../Source Files/lpc17xx_i2c.c **** 	}
 328:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C1)
 197              		.loc 1 328 0
 198 0088 1448     		ldr	r0, .L30+4
 199              	.LVL17:
 200 008a 8442     		cmp	r4, r0
 201 008c 0AD1     		bne	.L27
 329:../Source Files/lpc17xx_i2c.c **** 	{
 330:../Source Files/lpc17xx_i2c.c **** 		/* Set up clock and power for I2C1 module */
 331:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
 202              		.loc 1 331 0
 203 008e 4FF40020 		mov	r0, #524288
 204 0092 0121     		movs	r1, #1
 205              	.LVL18:
 206 0094 FFF7FEFF 		bl	CLKPWR_ConfigPPWR
 207              	.LVL19:
 332:../Source Files/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C1 module
 333:../Source Files/lpc17xx_i2c.c **** 		 * is set to FCCLK / 2 */
 334:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
 208              		.loc 1 334 0
 209 0098 2620     		movs	r0, #38
 210 009a 0221     		movs	r1, #2
 211 009c FFF7FEFF 		bl	CLKPWR_SetPCLKDiv
 212              	.LVL20:
 213              	.LBB11:
 214              	.LBB8:
 225:../Source Files/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
 215              		.loc 1 225 0
 216 00a0 2620     		movs	r0, #38
 217 00a2 0CE0     		b	.L29
 218              	.LVL21:
 219              	.L27:
 220              	.LBE8:
 221              	.LBE11:
 335:../Source Files/lpc17xx_i2c.c **** 	}
 336:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C2)
 222              		.loc 1 336 0
 223 00a4 0E49     		ldr	r1, .L30+8
 224              	.LVL22:
 225 00a6 8C42     		cmp	r4, r1
 226 00a8 14D1     		bne	.L24
 337:../Source Files/lpc17xx_i2c.c **** 	{
 338:../Source Files/lpc17xx_i2c.c **** 		/* Set up clock and power for I2C2 module */
 339:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, ENABLE);
 227              		.loc 1 339 0
 228 00aa 4FF08060 		mov	r0, #67108864
 229 00ae 0121     		movs	r1, #1
 230 00b0 FFF7FEFF 		bl	CLKPWR_ConfigPPWR
 231              	.LVL23:
 340:../Source Files/lpc17xx_i2c.c **** 		/* As default, peripheral clock for I2C2 module
 341:../Source Files/lpc17xx_i2c.c **** 		 * is set to FCCLK / 2 */
 342:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
 232              		.loc 1 342 0
 233 00b4 3420     		movs	r0, #52
 234 00b6 0221     		movs	r1, #2
 235 00b8 FFF7FEFF 		bl	CLKPWR_SetPCLKDiv
 236              	.LVL24:
 237              	.LBB12:
 238              	.LBB9:
 229:../Source Files/lpc17xx_i2c.c **** 		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
 239              		.loc 1 229 0
 240 00bc 3420     		movs	r0, #52
 241              	.LVL25:
 242              	.L29:
 243 00be FFF7FEFF 		bl	CLKPWR_GetPCLK
 244              	.LVL26:
 245 00c2 B0FBF5F2 		udiv	r2, r0, r5
 246              	.LVL27:
 233:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2SCLH = (uint32_t)(temp / 2);
 247              		.loc 1 233 0
 248 00c6 5308     		lsrs	r3, r2, #1
 249 00c8 2361     		str	r3, [r4, #16]
 234:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
 250              		.loc 1 234 0
 251 00ca 2069     		ldr	r0, [r4, #16]
 252 00cc 111A     		subs	r1, r2, r0
 253              	.LBE9:
 254              	.LBE12:
 343:../Source Files/lpc17xx_i2c.c **** 	}
 344:../Source Files/lpc17xx_i2c.c **** 	else {
 345:../Source Files/lpc17xx_i2c.c **** 		// Up-Support this device
 346:../Source Files/lpc17xx_i2c.c **** 		return;
 347:../Source Files/lpc17xx_i2c.c **** 	}
 348:../Source Files/lpc17xx_i2c.c **** 
 349:../Source Files/lpc17xx_i2c.c ****     /* Set clock rate */
 350:../Source Files/lpc17xx_i2c.c ****     I2C_SetClock(I2Cx, clockrate);
 351:../Source Files/lpc17xx_i2c.c ****     /* Set I2C operation to default */
 352:../Source Files/lpc17xx_i2c.c ****     I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
 255              		.loc 1 352 0
 256 00ce 6422     		movs	r2, #100
 257              	.LVL28:
 258              	.LBB13:
 259              	.LBB10:
 234:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
 260              		.loc 1 234 0
 261 00d0 6161     		str	r1, [r4, #20]
 262              	.LBE10:
 263              	.LBE13:
 264              		.loc 1 352 0
 265 00d2 A261     		str	r2, [r4, #24]
 266              	.LVL29:
 267              	.L24:
 268 00d4 38BD     		pop	{r3, r4, r5, pc}
 269              	.L31:
 270 00d6 00BF     		.align	2
 271              	.L30:
 272 00d8 00C00140 		.word	1073856512
 273 00dc 00C00540 		.word	1074118656
 274 00e0 00000A40 		.word	1074397184
 275              		.cfi_endproc
 276              	.LFE63:
 278              		.align	1
 279              		.global	I2C_Config
 280              		.thumb
 281              		.thumb_func
 283              	I2C_Config:
 284              	.LFB62:
 276:../Source Files/lpc17xx_i2c.c **** {
 285              		.loc 1 276 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 8
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              	.LVL30:
 280:../Source Files/lpc17xx_i2c.c **** 	if(I2Cx == LPC_I2C0)
 290              		.loc 1 280 0
 291 00e4 124B     		ldr	r3, .L34
 276:../Source Files/lpc17xx_i2c.c **** {
 292              		.loc 1 276 0
 293 00e6 13B5     		push	{r0, r1, r4, lr}
 294              	.LCFI1:
 295              		.cfi_def_cfa_offset 16
 296              		.cfi_offset 0, -16
 297              		.cfi_offset 1, -12
 298              		.cfi_offset 4, -8
 299              		.cfi_offset 14, -4
 280:../Source Files/lpc17xx_i2c.c **** 	if(I2Cx == LPC_I2C0)
 300              		.loc 1 280 0
 301 00e8 9842     		cmp	r0, r3
 302 00ea 16D1     		bne	.L33
 285:../Source Files/lpc17xx_i2c.c **** 		PinCfg.OpenDrain = 0;
 303              		.loc 1 285 0
 304 00ec 0020     		movs	r0, #0
 305              	.LVL31:
 289:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Portnum = 0;
 306              		.loc 1 289 0
 307 00ee 02AC     		add	r4, sp, #8
 285:../Source Files/lpc17xx_i2c.c **** 		PinCfg.OpenDrain = 0;
 308              		.loc 1 285 0
 309 00f0 8DF80400 		strb	r0, [sp, #4]
 286:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Pinmode = 0;
 310              		.loc 1 286 0
 311 00f4 8DF80300 		strb	r0, [sp, #3]
 287:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Funcnum = 1;
 312              		.loc 1 287 0
 313 00f8 0122     		movs	r2, #1
 288:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Pinnum = 27;
 314              		.loc 1 288 0
 315 00fa 1B21     		movs	r1, #27
 289:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Portnum = 0;
 316              		.loc 1 289 0
 317 00fc 04F8080D 		strb	r0, [r4, #-8]!
 290:../Source Files/lpc17xx_i2c.c **** 		PINSEL_ConfigPin(&PinCfg);
 318              		.loc 1 290 0
 319 0100 6846     		mov	r0, sp
 287:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Funcnum = 1;
 320              		.loc 1 287 0
 321 0102 8DF80220 		strb	r2, [sp, #2]
 288:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Pinnum = 27;
 322              		.loc 1 288 0
 323 0106 8DF80110 		strb	r1, [sp, #1]
 290:../Source Files/lpc17xx_i2c.c **** 		PINSEL_ConfigPin(&PinCfg);
 324              		.loc 1 290 0
 325 010a FFF7FEFF 		bl	PINSEL_ConfigPin
 326              	.LVL32:
 291:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Pinnum = 28;
 327              		.loc 1 291 0
 328 010e 1C23     		movs	r3, #28
 292:../Source Files/lpc17xx_i2c.c **** 		PINSEL_ConfigPin(&PinCfg);
 329              		.loc 1 292 0
 330 0110 6846     		mov	r0, sp
 291:../Source Files/lpc17xx_i2c.c **** 		PinCfg.Pinnum = 28;
 331              		.loc 1 291 0
 332 0112 8DF80130 		strb	r3, [sp, #1]
 292:../Source Files/lpc17xx_i2c.c **** 		PINSEL_ConfigPin(&PinCfg);
 333              		.loc 1 292 0
 334 0116 FFF7FEFF 		bl	PINSEL_ConfigPin
 335              	.LVL33:
 336              	.L33:
 297:../Source Files/lpc17xx_i2c.c **** 	I2C_Init(LPC_I2C0, 200000);
 337              		.loc 1 297 0
 338 011a 054C     		ldr	r4, .L34
 339 011c 0549     		ldr	r1, .L34+4
 340 011e 2046     		mov	r0, r4
 341 0120 FFF7FEFF 		bl	I2C_Init
 342              	.LVL34:
 299:../Source Files/lpc17xx_i2c.c **** 	Buffer_Init ();
 343              		.loc 1 299 0
 344 0124 FFF7FEFF 		bl	Buffer_Init
 345              	.LVL35:
 346              	.LBB14:
 347              	.LBB15:
 353:../Source Files/lpc17xx_i2c.c **** }
 354:../Source Files/lpc17xx_i2c.c **** 
 355:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
 356:../Source Files/lpc17xx_i2c.c ****  * @brief		De-initializes the I2C peripheral registers to their
 357:../Source Files/lpc17xx_i2c.c ****  *                  default reset values.
 358:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
 359:../Source Files/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 360:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 361:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 362:../Source Files/lpc17xx_i2c.c ****  * @return 		None
 363:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
 364:../Source Files/lpc17xx_i2c.c **** void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
 365:../Source Files/lpc17xx_i2c.c **** {
 366:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 367:../Source Files/lpc17xx_i2c.c **** 
 368:../Source Files/lpc17xx_i2c.c **** 	/* Disable I2C control */
 369:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
 370:../Source Files/lpc17xx_i2c.c **** 
 371:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx==LPC_I2C0)
 372:../Source Files/lpc17xx_i2c.c **** 	{
 373:../Source Files/lpc17xx_i2c.c **** 		/* Disable power for I2C0 module */
 374:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
 375:../Source Files/lpc17xx_i2c.c **** 	}
 376:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C1)
 377:../Source Files/lpc17xx_i2c.c **** 	{
 378:../Source Files/lpc17xx_i2c.c **** 		/* Disable power for I2C1 module */
 379:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
 380:../Source Files/lpc17xx_i2c.c **** 	}
 381:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C2)
 382:../Source Files/lpc17xx_i2c.c **** 	{
 383:../Source Files/lpc17xx_i2c.c **** 		/* Disable power for I2C2 module */
 384:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
 385:../Source Files/lpc17xx_i2c.c **** 	}
 386:../Source Files/lpc17xx_i2c.c **** }
 387:../Source Files/lpc17xx_i2c.c **** 
 388:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
 389:../Source Files/lpc17xx_i2c.c ****  * @brief		Enable or disable I2C peripheral's operation
 390:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx I2C peripheral selected, should be
 391:../Source Files/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 392:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 393:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 394:../Source Files/lpc17xx_i2c.c ****  * @param[in]	NewState New State of I2Cx peripheral's operation
 395:../Source Files/lpc17xx_i2c.c ****  * @return 		none
 396:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
 397:../Source Files/lpc17xx_i2c.c **** void I2C_Cmd(LPC_I2C_TypeDef* I2Cx, FunctionalState NewState)
 398:../Source Files/lpc17xx_i2c.c **** {
 399:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
 400:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
 401:../Source Files/lpc17xx_i2c.c **** 
 402:../Source Files/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 403:../Source Files/lpc17xx_i2c.c **** 	{
 404:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
 348              		.loc 1 404 0
 349 0128 4020     		movs	r0, #64
 350 012a 2060     		str	r0, [r4, #0]
 351              	.LBE15:
 352              	.LBE14:
 303:../Source Files/lpc17xx_i2c.c **** }
 353              		.loc 1 303 0
 354 012c 1CBD     		pop	{r2, r3, r4, pc}
 355              	.L35:
 356 012e 00BF     		.align	2
 357              	.L34:
 358 0130 00C00140 		.word	1073856512
 359 0134 400D0300 		.word	200000
 360              		.cfi_endproc
 361              	.LFE62:
 363              		.align	1
 364              		.global	I2C_DeInit
 365              		.thumb
 366              		.thumb_func
 368              	I2C_DeInit:
 369              	.LFB64:
 365:../Source Files/lpc17xx_i2c.c **** {
 370              		.loc 1 365 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              		@ link register save eliminated.
 375              	.LVL36:
 371:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx==LPC_I2C0)
 376              		.loc 1 371 0
 377 0138 0A49     		ldr	r1, .L41
 369:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
 378              		.loc 1 369 0
 379 013a 4023     		movs	r3, #64
 371:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx==LPC_I2C0)
 380              		.loc 1 371 0
 381 013c 8842     		cmp	r0, r1
 369:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
 382              		.loc 1 369 0
 383 013e 8361     		str	r3, [r0, #24]
 371:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx==LPC_I2C0)
 384              		.loc 1 371 0
 385 0140 01D1     		bne	.L37
 374:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
 386              		.loc 1 374 0
 387 0142 8020     		movs	r0, #128
 388              	.LVL37:
 389 0144 0AE0     		b	.L40
 390              	.LVL38:
 391              	.L37:
 376:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C1)
 392              		.loc 1 376 0
 393 0146 084A     		ldr	r2, .L41+4
 394 0148 9042     		cmp	r0, r2
 379:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
 395              		.loc 1 379 0
 396 014a 08BF     		it	eq
 397 014c 4FF40020 		moveq	r0, #524288
 398              	.LVL39:
 376:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C1)
 399              		.loc 1 376 0
 400 0150 04D0     		beq	.L40
 381:../Source Files/lpc17xx_i2c.c **** 	else if (I2Cx==LPC_I2C2)
 401              		.loc 1 381 0
 402 0152 064B     		ldr	r3, .L41+8
 403 0154 9842     		cmp	r0, r3
 404 0156 04D1     		bne	.L36
 384:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
 405              		.loc 1 384 0
 406 0158 4FF08060 		mov	r0, #67108864
 407              	.L40:
 408 015c 0021     		movs	r1, #0
 386:../Source Files/lpc17xx_i2c.c **** }
 409              		.loc 1 386 0
 384:../Source Files/lpc17xx_i2c.c **** 		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
 410              		.loc 1 384 0
 411 015e FFF7FEBF 		b	CLKPWR_ConfigPPWR
 412              	.LVL40:
 413              	.L36:
 414 0162 7047     		bx	lr
 415              	.L42:
 416              		.align	2
 417              	.L41:
 418 0164 00C00140 		.word	1073856512
 419 0168 00C00540 		.word	1074118656
 420 016c 00000A40 		.word	1074397184
 421              		.cfi_endproc
 422              	.LFE64:
 424              		.align	1
 425              		.global	I2C_Cmd
 426              		.thumb
 427              		.thumb_func
 429              	I2C_Cmd:
 430              	.LFB65:
 398:../Source Files/lpc17xx_i2c.c **** {
 431              		.loc 1 398 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 436              	.LVL41:
 402:../Source Files/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 437              		.loc 1 402 0
 438 0170 0129     		cmp	r1, #1
 439 0172 4FF04003 		mov	r3, #64
 440              		.loc 1 404 0
 441 0176 0CBF     		ite	eq
 442 0178 0360     		streq	r3, [r0, #0]
 405:../Source Files/lpc17xx_i2c.c **** 	}
 406:../Source Files/lpc17xx_i2c.c **** 	else
 407:../Source Files/lpc17xx_i2c.c **** 	{
 408:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
 443              		.loc 1 408 0
 444 017a 8361     		strne	r3, [r0, #24]
 445 017c 7047     		bx	lr
 446              		.cfi_endproc
 447              	.LFE65:
 449              		.align	1
 450              		.global	I2C_IntCmd
 451              		.thumb
 452              		.thumb_func
 454              	I2C_IntCmd:
 455              	.LFB66:
 409:../Source Files/lpc17xx_i2c.c **** 	}
 410:../Source Files/lpc17xx_i2c.c **** }
 411:../Source Files/lpc17xx_i2c.c **** 
 412:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
 413:../Source Files/lpc17xx_i2c.c ****  * @brief 		Enable/Disable interrupt for I2C peripheral
 414:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
 415:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
 416:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 417:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 418:../Source Files/lpc17xx_i2c.c ****  * @param[in]	NewState	New State of I2C peripheral interrupt in NVIC core
 419:../Source Files/lpc17xx_i2c.c ****  * 				should be:
 420:../Source Files/lpc17xx_i2c.c ****  * 				- ENABLE: enable interrupt for this I2C peripheral
 421:../Source Files/lpc17xx_i2c.c ****  * 				- DISABLE: disable interrupt for this I2C peripheral
 422:../Source Files/lpc17xx_i2c.c ****  * @return 		None
 423:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
 424:../Source Files/lpc17xx_i2c.c **** void I2C_IntCmd (LPC_I2C_TypeDef *I2Cx, Bool NewState)
 425:../Source Files/lpc17xx_i2c.c **** {
 456              		.loc 1 425 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 0
 459              		@ frame_needed = 0, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461              	.LVL42:
 462 017e 154B     		ldr	r3, .L55
 426:../Source Files/lpc17xx_i2c.c **** 	if (NewState)
 463              		.loc 1 426 0
 464 0180 99B1     		cbz	r1, .L47
 427:../Source Files/lpc17xx_i2c.c **** 	{
 428:../Source Files/lpc17xx_i2c.c **** 		if(I2Cx == LPC_I2C0)
 465              		.loc 1 428 0
 466 0182 9842     		cmp	r0, r3
 467              	.LBB30:
 468              	.LBB31:
 469              		.file 2 "../CM3 Core/core_cm3.h"
   1:../CM3 Core/core_cm3.h **** /**************************************************************************//**
   2:../CM3 Core/core_cm3.h ****  * @file     core_cm3.h
   3:../CM3 Core/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CM3 Core/core_cm3.h ****  * @version  V2.01
   5:../CM3 Core/core_cm3.h ****  * @date     06. December 2010
   6:../CM3 Core/core_cm3.h ****  *
   7:../CM3 Core/core_cm3.h ****  * @note
   8:../CM3 Core/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:../CM3 Core/core_cm3.h ****  *
  10:../CM3 Core/core_cm3.h ****  * @par
  11:../CM3 Core/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../CM3 Core/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../CM3 Core/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:../CM3 Core/core_cm3.h ****  *
  15:../CM3 Core/core_cm3.h ****  * @par
  16:../CM3 Core/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../CM3 Core/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../CM3 Core/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../CM3 Core/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../CM3 Core/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../CM3 Core/core_cm3.h ****  *
  22:../CM3 Core/core_cm3.h ****  ******************************************************************************/
  23:../CM3 Core/core_cm3.h **** #if defined ( __ICCARM__ )
  24:../CM3 Core/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:../CM3 Core/core_cm3.h **** #endif
  26:../CM3 Core/core_cm3.h **** 
  27:../CM3 Core/core_cm3.h **** #ifdef __cplusplus
  28:../CM3 Core/core_cm3.h ****  extern "C" {
  29:../CM3 Core/core_cm3.h **** #endif
  30:../CM3 Core/core_cm3.h **** 
  31:../CM3 Core/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:../CM3 Core/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:../CM3 Core/core_cm3.h **** 
  34:../CM3 Core/core_cm3.h **** 
  35:../CM3 Core/core_cm3.h **** /*******************************************************************************
  36:../CM3 Core/core_cm3.h ****  *                 CMSIS definitions
  37:../CM3 Core/core_cm3.h ****  ******************************************************************************/
  38:../CM3 Core/core_cm3.h **** /** @ingroup  CMSIS
  39:../CM3 Core/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  40:../CM3 Core/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  41:../CM3 Core/core_cm3.h ****    - CMSIS version number
  42:../CM3 Core/core_cm3.h ****    - Cortex-M core
  43:../CM3 Core/core_cm3.h ****    - Cortex-M core Revision Number
  44:../CM3 Core/core_cm3.h ****   @{
  45:../CM3 Core/core_cm3.h ****  */
  46:../CM3 Core/core_cm3.h **** 
  47:../CM3 Core/core_cm3.h **** /*  CMSIS CM3 definitions */
  48:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  49:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  50:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  51:../CM3 Core/core_cm3.h **** 
  52:../CM3 Core/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  53:../CM3 Core/core_cm3.h **** 
  54:../CM3 Core/core_cm3.h **** 
  55:../CM3 Core/core_cm3.h **** #if defined ( __CC_ARM   )
  56:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  57:../CM3 Core/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  58:../CM3 Core/core_cm3.h **** 
  59:../CM3 Core/core_cm3.h **** #elif defined ( __ICCARM__ )
  60:../CM3 Core/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  61:../CM3 Core/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  62:../CM3 Core/core_cm3.h **** 
  63:../CM3 Core/core_cm3.h **** #elif defined   (  __GNUC__  )
  64:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  65:../CM3 Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  66:../CM3 Core/core_cm3.h **** 
  67:../CM3 Core/core_cm3.h **** #elif defined   (  __TASKING__  )
  68:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  69:../CM3 Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  70:../CM3 Core/core_cm3.h **** 
  71:../CM3 Core/core_cm3.h **** #endif
  72:../CM3 Core/core_cm3.h **** 
  73:../CM3 Core/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  74:../CM3 Core/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  75:../CM3 Core/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  76:../CM3 Core/core_cm3.h **** 
  77:../CM3 Core/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  78:../CM3 Core/core_cm3.h **** 
  79:../CM3 Core/core_cm3.h **** 
  80:../CM3 Core/core_cm3.h **** #ifndef __CMSIS_GENERIC
  81:../CM3 Core/core_cm3.h **** 
  82:../CM3 Core/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  83:../CM3 Core/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  84:../CM3 Core/core_cm3.h **** 
  85:../CM3 Core/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  86:../CM3 Core/core_cm3.h **** #ifdef __cplusplus
  87:../CM3 Core/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  88:../CM3 Core/core_cm3.h **** #else
  89:../CM3 Core/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  90:../CM3 Core/core_cm3.h **** #endif
  91:../CM3 Core/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
  92:../CM3 Core/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
  93:../CM3 Core/core_cm3.h **** 
  94:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
  95:../CM3 Core/core_cm3.h **** 
  96:../CM3 Core/core_cm3.h **** 
  97:../CM3 Core/core_cm3.h **** 
  98:../CM3 Core/core_cm3.h **** /*******************************************************************************
  99:../CM3 Core/core_cm3.h ****  *                 Register Abstraction
 100:../CM3 Core/core_cm3.h ****  ******************************************************************************/
 101:../CM3 Core/core_cm3.h **** 
 102:../CM3 Core/core_cm3.h **** /** @ingroup  CMSIS
 103:../CM3 Core/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 104:../CM3 Core/core_cm3.h ****   Core Register contain:
 105:../CM3 Core/core_cm3.h ****   - Core Register
 106:../CM3 Core/core_cm3.h ****   - Core NVIC Register
 107:../CM3 Core/core_cm3.h ****   - Core SCB Register
 108:../CM3 Core/core_cm3.h ****   - Core SysTick Register
 109:../CM3 Core/core_cm3.h ****   - Core Debug Register
 110:../CM3 Core/core_cm3.h ****   - Core MPU Register
 111:../CM3 Core/core_cm3.h **** */
 112:../CM3 Core/core_cm3.h **** 
 113:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 114:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 115:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 116:../CM3 Core/core_cm3.h ****   @{
 117:../CM3 Core/core_cm3.h ****  */
 118:../CM3 Core/core_cm3.h **** 
 119:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 120:../CM3 Core/core_cm3.h ****  */
 121:../CM3 Core/core_cm3.h **** typedef union
 122:../CM3 Core/core_cm3.h **** {
 123:../CM3 Core/core_cm3.h ****   struct
 124:../CM3 Core/core_cm3.h ****   {
 125:../CM3 Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 126:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 127:../CM3 Core/core_cm3.h **** #else
 128:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 129:../CM3 Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 130:../CM3 Core/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 131:../CM3 Core/core_cm3.h **** #endif
 132:../CM3 Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 133:../CM3 Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 134:../CM3 Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 135:../CM3 Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 136:../CM3 Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 137:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 138:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 139:../CM3 Core/core_cm3.h **** } APSR_Type;
 140:../CM3 Core/core_cm3.h **** 
 141:../CM3 Core/core_cm3.h **** 
 142:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 143:../CM3 Core/core_cm3.h ****  */
 144:../CM3 Core/core_cm3.h **** typedef union
 145:../CM3 Core/core_cm3.h **** {
 146:../CM3 Core/core_cm3.h ****   struct
 147:../CM3 Core/core_cm3.h ****   {
 148:../CM3 Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 149:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 150:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 151:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 152:../CM3 Core/core_cm3.h **** } IPSR_Type;
 153:../CM3 Core/core_cm3.h **** 
 154:../CM3 Core/core_cm3.h **** 
 155:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 156:../CM3 Core/core_cm3.h ****  */
 157:../CM3 Core/core_cm3.h **** typedef union
 158:../CM3 Core/core_cm3.h **** {
 159:../CM3 Core/core_cm3.h ****   struct
 160:../CM3 Core/core_cm3.h ****   {
 161:../CM3 Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 162:../CM3 Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 163:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 164:../CM3 Core/core_cm3.h **** #else
 165:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 166:../CM3 Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 167:../CM3 Core/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 168:../CM3 Core/core_cm3.h **** #endif
 169:../CM3 Core/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 170:../CM3 Core/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 171:../CM3 Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 172:../CM3 Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 173:../CM3 Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 174:../CM3 Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 175:../CM3 Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 176:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 177:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 178:../CM3 Core/core_cm3.h **** } xPSR_Type;
 179:../CM3 Core/core_cm3.h **** 
 180:../CM3 Core/core_cm3.h **** 
 181:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 182:../CM3 Core/core_cm3.h ****  */
 183:../CM3 Core/core_cm3.h **** typedef union
 184:../CM3 Core/core_cm3.h **** {
 185:../CM3 Core/core_cm3.h ****   struct
 186:../CM3 Core/core_cm3.h ****   {
 187:../CM3 Core/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 188:../CM3 Core/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 189:../CM3 Core/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 190:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 191:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 192:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 193:../CM3 Core/core_cm3.h **** } CONTROL_Type;
 194:../CM3 Core/core_cm3.h **** 
 195:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_CORE */
 196:../CM3 Core/core_cm3.h **** 
 197:../CM3 Core/core_cm3.h **** 
 198:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 199:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 200:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 201:../CM3 Core/core_cm3.h ****   @{
 202:../CM3 Core/core_cm3.h ****  */
 203:../CM3 Core/core_cm3.h **** 
 204:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 205:../CM3 Core/core_cm3.h ****  */
 206:../CM3 Core/core_cm3.h **** typedef struct
 207:../CM3 Core/core_cm3.h **** {
 208:../CM3 Core/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 209:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0[24];
 210:../CM3 Core/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 211:../CM3 Core/core_cm3.h ****        uint32_t RSERVED1[24];
 212:../CM3 Core/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 213:../CM3 Core/core_cm3.h ****        uint32_t RESERVED2[24];
 214:../CM3 Core/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 215:../CM3 Core/core_cm3.h ****        uint32_t RESERVED3[24];
 216:../CM3 Core/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 217:../CM3 Core/core_cm3.h ****        uint32_t RESERVED4[56];
 218:../CM3 Core/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 219:../CM3 Core/core_cm3.h ****        uint32_t RESERVED5[644];
 220:../CM3 Core/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 221:../CM3 Core/core_cm3.h **** }  NVIC_Type;
 222:../CM3 Core/core_cm3.h **** 
 223:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 224:../CM3 Core/core_cm3.h **** 
 225:../CM3 Core/core_cm3.h **** 
 226:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 227:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 228:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 229:../CM3 Core/core_cm3.h ****   @{
 230:../CM3 Core/core_cm3.h ****  */
 231:../CM3 Core/core_cm3.h **** 
 232:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 233:../CM3 Core/core_cm3.h ****  */
 234:../CM3 Core/core_cm3.h **** typedef struct
 235:../CM3 Core/core_cm3.h **** {
 236:../CM3 Core/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 237:../CM3 Core/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 238:../CM3 Core/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 239:../CM3 Core/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 240:../CM3 Core/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 241:../CM3 Core/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 242:../CM3 Core/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 243:../CM3 Core/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 244:../CM3 Core/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 245:../CM3 Core/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 246:../CM3 Core/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 247:../CM3 Core/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 248:../CM3 Core/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 249:../CM3 Core/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 250:../CM3 Core/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 251:../CM3 Core/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 252:../CM3 Core/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 253:../CM3 Core/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 254:../CM3 Core/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 255:../CM3 Core/core_cm3.h **** } SCB_Type;
 256:../CM3 Core/core_cm3.h **** 
 257:../CM3 Core/core_cm3.h **** /* SCB CPUID Register Definitions */
 258:../CM3 Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 259:../CM3 Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 260:../CM3 Core/core_cm3.h **** 
 261:../CM3 Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 262:../CM3 Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 263:../CM3 Core/core_cm3.h **** 
 264:../CM3 Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 265:../CM3 Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 266:../CM3 Core/core_cm3.h **** 
 267:../CM3 Core/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 268:../CM3 Core/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 269:../CM3 Core/core_cm3.h **** 
 270:../CM3 Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 271:../CM3 Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 272:../CM3 Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 273:../CM3 Core/core_cm3.h **** 
 274:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 275:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 276:../CM3 Core/core_cm3.h **** 
 277:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 278:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 279:../CM3 Core/core_cm3.h **** 
 280:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 281:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 282:../CM3 Core/core_cm3.h **** 
 283:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 284:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 285:../CM3 Core/core_cm3.h **** 
 286:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 287:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 288:../CM3 Core/core_cm3.h **** 
 289:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 290:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 291:../CM3 Core/core_cm3.h **** 
 292:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 293:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 294:../CM3 Core/core_cm3.h **** 
 295:../CM3 Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 296:../CM3 Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 297:../CM3 Core/core_cm3.h **** 
 298:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 299:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 300:../CM3 Core/core_cm3.h **** 
 301:../CM3 Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 302:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 303:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 304:../CM3 Core/core_cm3.h **** 
 305:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 306:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 307:../CM3 Core/core_cm3.h **** 
 308:../CM3 Core/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 309:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 310:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 311:../CM3 Core/core_cm3.h **** 
 312:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 313:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 314:../CM3 Core/core_cm3.h **** 
 315:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 316:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 317:../CM3 Core/core_cm3.h **** 
 318:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 319:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 320:../CM3 Core/core_cm3.h **** 
 321:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 322:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 323:../CM3 Core/core_cm3.h **** 
 324:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 325:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 326:../CM3 Core/core_cm3.h **** 
 327:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 328:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 329:../CM3 Core/core_cm3.h **** 
 330:../CM3 Core/core_cm3.h **** /* SCB System Control Register Definitions */
 331:../CM3 Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 332:../CM3 Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 333:../CM3 Core/core_cm3.h **** 
 334:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 335:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 336:../CM3 Core/core_cm3.h **** 
 337:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 338:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 339:../CM3 Core/core_cm3.h **** 
 340:../CM3 Core/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 341:../CM3 Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 342:../CM3 Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 343:../CM3 Core/core_cm3.h **** 
 344:../CM3 Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 345:../CM3 Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 346:../CM3 Core/core_cm3.h **** 
 347:../CM3 Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 348:../CM3 Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 349:../CM3 Core/core_cm3.h **** 
 350:../CM3 Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 351:../CM3 Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 352:../CM3 Core/core_cm3.h **** 
 353:../CM3 Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 354:../CM3 Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 355:../CM3 Core/core_cm3.h **** 
 356:../CM3 Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 357:../CM3 Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 358:../CM3 Core/core_cm3.h **** 
 359:../CM3 Core/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 360:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 361:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 362:../CM3 Core/core_cm3.h **** 
 363:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 364:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 365:../CM3 Core/core_cm3.h **** 
 366:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 367:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 368:../CM3 Core/core_cm3.h **** 
 369:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 370:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 371:../CM3 Core/core_cm3.h **** 
 372:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 373:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 374:../CM3 Core/core_cm3.h **** 
 375:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 376:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 377:../CM3 Core/core_cm3.h **** 
 378:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 379:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 380:../CM3 Core/core_cm3.h **** 
 381:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 382:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 383:../CM3 Core/core_cm3.h **** 
 384:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 385:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 386:../CM3 Core/core_cm3.h **** 
 387:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 388:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 389:../CM3 Core/core_cm3.h **** 
 390:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 391:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 392:../CM3 Core/core_cm3.h **** 
 393:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 394:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 395:../CM3 Core/core_cm3.h **** 
 396:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 397:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 398:../CM3 Core/core_cm3.h **** 
 399:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 400:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 401:../CM3 Core/core_cm3.h **** 
 402:../CM3 Core/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 403:../CM3 Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 404:../CM3 Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 405:../CM3 Core/core_cm3.h **** 
 406:../CM3 Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 407:../CM3 Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 408:../CM3 Core/core_cm3.h **** 
 409:../CM3 Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 410:../CM3 Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 411:../CM3 Core/core_cm3.h **** 
 412:../CM3 Core/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 413:../CM3 Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 414:../CM3 Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 415:../CM3 Core/core_cm3.h **** 
 416:../CM3 Core/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 417:../CM3 Core/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 418:../CM3 Core/core_cm3.h **** 
 419:../CM3 Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 420:../CM3 Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 421:../CM3 Core/core_cm3.h **** 
 422:../CM3 Core/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 423:../CM3 Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 424:../CM3 Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 425:../CM3 Core/core_cm3.h **** 
 426:../CM3 Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 427:../CM3 Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 428:../CM3 Core/core_cm3.h **** 
 429:../CM3 Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 430:../CM3 Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 431:../CM3 Core/core_cm3.h **** 
 432:../CM3 Core/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 433:../CM3 Core/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 434:../CM3 Core/core_cm3.h **** 
 435:../CM3 Core/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 436:../CM3 Core/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 437:../CM3 Core/core_cm3.h **** 
 438:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_SCB */
 439:../CM3 Core/core_cm3.h **** 
 440:../CM3 Core/core_cm3.h **** 
 441:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 442:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 443:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 444:../CM3 Core/core_cm3.h ****   @{
 445:../CM3 Core/core_cm3.h ****  */
 446:../CM3 Core/core_cm3.h **** 
 447:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 448:../CM3 Core/core_cm3.h ****  */
 449:../CM3 Core/core_cm3.h **** typedef struct
 450:../CM3 Core/core_cm3.h **** {
 451:../CM3 Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 452:../CM3 Core/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 453:../CM3 Core/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 454:../CM3 Core/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 455:../CM3 Core/core_cm3.h **** } SysTick_Type;
 456:../CM3 Core/core_cm3.h **** 
 457:../CM3 Core/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 458:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 459:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 460:../CM3 Core/core_cm3.h **** 
 461:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 462:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 463:../CM3 Core/core_cm3.h **** 
 464:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 465:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 466:../CM3 Core/core_cm3.h **** 
 467:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 468:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 469:../CM3 Core/core_cm3.h **** 
 470:../CM3 Core/core_cm3.h **** /* SysTick Reload Register Definitions */
 471:../CM3 Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 472:../CM3 Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 473:../CM3 Core/core_cm3.h **** 
 474:../CM3 Core/core_cm3.h **** /* SysTick Current Register Definitions */
 475:../CM3 Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 476:../CM3 Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 477:../CM3 Core/core_cm3.h **** 
 478:../CM3 Core/core_cm3.h **** /* SysTick Calibration Register Definitions */
 479:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 480:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 481:../CM3 Core/core_cm3.h **** 
 482:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 483:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 484:../CM3 Core/core_cm3.h **** 
 485:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 486:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 487:../CM3 Core/core_cm3.h **** 
 488:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 489:../CM3 Core/core_cm3.h **** 
 490:../CM3 Core/core_cm3.h **** 
 491:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 492:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 493:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 494:../CM3 Core/core_cm3.h ****   @{
 495:../CM3 Core/core_cm3.h ****  */
 496:../CM3 Core/core_cm3.h **** 
 497:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 498:../CM3 Core/core_cm3.h ****  */
 499:../CM3 Core/core_cm3.h **** typedef struct
 500:../CM3 Core/core_cm3.h **** {
 501:../CM3 Core/core_cm3.h ****   __O  union
 502:../CM3 Core/core_cm3.h ****   {
 503:../CM3 Core/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 504:../CM3 Core/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 505:../CM3 Core/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 506:../CM3 Core/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 507:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0[864];
 508:../CM3 Core/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 509:../CM3 Core/core_cm3.h ****        uint32_t RESERVED1[15];
 510:../CM3 Core/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 511:../CM3 Core/core_cm3.h ****        uint32_t RESERVED2[15];
 512:../CM3 Core/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 513:../CM3 Core/core_cm3.h ****        uint32_t RESERVED3[29];
 514:../CM3 Core/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 515:../CM3 Core/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 516:../CM3 Core/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 517:../CM3 Core/core_cm3.h ****        uint32_t RESERVED4[43];
 518:../CM3 Core/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 519:../CM3 Core/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 520:../CM3 Core/core_cm3.h ****        uint32_t RESERVED5[6];
 521:../CM3 Core/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 522:../CM3 Core/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 523:../CM3 Core/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 524:../CM3 Core/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 525:../CM3 Core/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 526:../CM3 Core/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 527:../CM3 Core/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 528:../CM3 Core/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 529:../CM3 Core/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 530:../CM3 Core/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 531:../CM3 Core/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 532:../CM3 Core/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 533:../CM3 Core/core_cm3.h **** } ITM_Type;
 534:../CM3 Core/core_cm3.h **** 
 535:../CM3 Core/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 536:../CM3 Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 537:../CM3 Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 538:../CM3 Core/core_cm3.h **** 
 539:../CM3 Core/core_cm3.h **** /* ITM Trace Control Register Definitions */
 540:../CM3 Core/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 541:../CM3 Core/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 542:../CM3 Core/core_cm3.h **** 
 543:../CM3 Core/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 544:../CM3 Core/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 545:../CM3 Core/core_cm3.h **** 
 546:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 547:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 548:../CM3 Core/core_cm3.h **** 
 549:../CM3 Core/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 550:../CM3 Core/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 551:../CM3 Core/core_cm3.h **** 
 552:../CM3 Core/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 553:../CM3 Core/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 554:../CM3 Core/core_cm3.h **** 
 555:../CM3 Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 556:../CM3 Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 557:../CM3 Core/core_cm3.h **** 
 558:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 559:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 560:../CM3 Core/core_cm3.h **** 
 561:../CM3 Core/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 562:../CM3 Core/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 563:../CM3 Core/core_cm3.h **** 
 564:../CM3 Core/core_cm3.h **** /* ITM Integration Write Register Definitions */
 565:../CM3 Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 566:../CM3 Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 567:../CM3 Core/core_cm3.h **** 
 568:../CM3 Core/core_cm3.h **** /* ITM Integration Read Register Definitions */
 569:../CM3 Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 570:../CM3 Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 571:../CM3 Core/core_cm3.h **** 
 572:../CM3 Core/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 573:../CM3 Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 574:../CM3 Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 575:../CM3 Core/core_cm3.h **** 
 576:../CM3 Core/core_cm3.h **** /* ITM Lock Status Register Definitions */
 577:../CM3 Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 578:../CM3 Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 579:../CM3 Core/core_cm3.h **** 
 580:../CM3 Core/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 581:../CM3 Core/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 582:../CM3 Core/core_cm3.h **** 
 583:../CM3 Core/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 584:../CM3 Core/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 585:../CM3 Core/core_cm3.h **** 
 586:../CM3 Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 587:../CM3 Core/core_cm3.h **** 
 588:../CM3 Core/core_cm3.h **** 
 589:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 590:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 591:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 592:../CM3 Core/core_cm3.h ****   @{
 593:../CM3 Core/core_cm3.h ****  */
 594:../CM3 Core/core_cm3.h **** 
 595:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 596:../CM3 Core/core_cm3.h ****  */
 597:../CM3 Core/core_cm3.h **** typedef struct
 598:../CM3 Core/core_cm3.h **** {
 599:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0;
 600:../CM3 Core/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 601:../CM3 Core/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 602:../CM3 Core/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 603:../CM3 Core/core_cm3.h **** #else
 604:../CM3 Core/core_cm3.h ****        uint32_t RESERVED1;
 605:../CM3 Core/core_cm3.h **** #endif
 606:../CM3 Core/core_cm3.h **** } InterruptType_Type;
 607:../CM3 Core/core_cm3.h **** 
 608:../CM3 Core/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 609:../CM3 Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 610:../CM3 Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 611:../CM3 Core/core_cm3.h **** 
 612:../CM3 Core/core_cm3.h **** /* Auxiliary Control Register Definitions */
 613:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 614:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 615:../CM3 Core/core_cm3.h **** 
 616:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 617:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 618:../CM3 Core/core_cm3.h **** 
 619:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 620:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 621:../CM3 Core/core_cm3.h **** 
 622:../CM3 Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 623:../CM3 Core/core_cm3.h **** 
 624:../CM3 Core/core_cm3.h **** 
 625:../CM3 Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 626:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 627:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 628:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 629:../CM3 Core/core_cm3.h ****   @{
 630:../CM3 Core/core_cm3.h ****  */
 631:../CM3 Core/core_cm3.h **** 
 632:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 633:../CM3 Core/core_cm3.h ****  */
 634:../CM3 Core/core_cm3.h **** typedef struct
 635:../CM3 Core/core_cm3.h **** {
 636:../CM3 Core/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 637:../CM3 Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 638:../CM3 Core/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 639:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 640:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 641:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 642:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 643:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 644:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 645:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 646:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 647:../CM3 Core/core_cm3.h **** } MPU_Type;
 648:../CM3 Core/core_cm3.h **** 
 649:../CM3 Core/core_cm3.h **** /* MPU Type Register */
 650:../CM3 Core/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 651:../CM3 Core/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 652:../CM3 Core/core_cm3.h **** 
 653:../CM3 Core/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 654:../CM3 Core/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 655:../CM3 Core/core_cm3.h **** 
 656:../CM3 Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 657:../CM3 Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 658:../CM3 Core/core_cm3.h **** 
 659:../CM3 Core/core_cm3.h **** /* MPU Control Register */
 660:../CM3 Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 661:../CM3 Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 662:../CM3 Core/core_cm3.h **** 
 663:../CM3 Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 664:../CM3 Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 665:../CM3 Core/core_cm3.h **** 
 666:../CM3 Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 667:../CM3 Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 668:../CM3 Core/core_cm3.h **** 
 669:../CM3 Core/core_cm3.h **** /* MPU Region Number Register */
 670:../CM3 Core/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 671:../CM3 Core/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 672:../CM3 Core/core_cm3.h **** 
 673:../CM3 Core/core_cm3.h **** /* MPU Region Base Address Register */
 674:../CM3 Core/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 675:../CM3 Core/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 676:../CM3 Core/core_cm3.h **** 
 677:../CM3 Core/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 678:../CM3 Core/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 679:../CM3 Core/core_cm3.h **** 
 680:../CM3 Core/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 681:../CM3 Core/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 682:../CM3 Core/core_cm3.h **** 
 683:../CM3 Core/core_cm3.h **** /* MPU Region Attribute and Size Register */
 684:../CM3 Core/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 685:../CM3 Core/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 686:../CM3 Core/core_cm3.h **** 
 687:../CM3 Core/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 688:../CM3 Core/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 689:../CM3 Core/core_cm3.h **** 
 690:../CM3 Core/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 691:../CM3 Core/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 692:../CM3 Core/core_cm3.h **** 
 693:../CM3 Core/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 694:../CM3 Core/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 695:../CM3 Core/core_cm3.h **** 
 696:../CM3 Core/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 697:../CM3 Core/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 698:../CM3 Core/core_cm3.h **** 
 699:../CM3 Core/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 700:../CM3 Core/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 701:../CM3 Core/core_cm3.h **** 
 702:../CM3 Core/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 703:../CM3 Core/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 704:../CM3 Core/core_cm3.h **** 
 705:../CM3 Core/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 706:../CM3 Core/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 707:../CM3 Core/core_cm3.h **** 
 708:../CM3 Core/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 709:../CM3 Core/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 710:../CM3 Core/core_cm3.h **** 
 711:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_MPU */
 712:../CM3 Core/core_cm3.h **** #endif
 713:../CM3 Core/core_cm3.h **** 
 714:../CM3 Core/core_cm3.h **** 
 715:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 716:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 717:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 718:../CM3 Core/core_cm3.h ****   @{
 719:../CM3 Core/core_cm3.h ****  */
 720:../CM3 Core/core_cm3.h **** 
 721:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 722:../CM3 Core/core_cm3.h ****  */
 723:../CM3 Core/core_cm3.h **** typedef struct
 724:../CM3 Core/core_cm3.h **** {
 725:../CM3 Core/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 726:../CM3 Core/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 727:../CM3 Core/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 728:../CM3 Core/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 729:../CM3 Core/core_cm3.h **** } CoreDebug_Type;
 730:../CM3 Core/core_cm3.h **** 
 731:../CM3 Core/core_cm3.h **** /* Debug Halting Control and Status Register */
 732:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 733:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 734:../CM3 Core/core_cm3.h **** 
 735:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 736:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 737:../CM3 Core/core_cm3.h **** 
 738:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 739:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 740:../CM3 Core/core_cm3.h **** 
 741:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 742:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 743:../CM3 Core/core_cm3.h **** 
 744:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 745:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 746:../CM3 Core/core_cm3.h **** 
 747:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 748:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 749:../CM3 Core/core_cm3.h **** 
 750:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 751:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 752:../CM3 Core/core_cm3.h **** 
 753:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 754:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 755:../CM3 Core/core_cm3.h **** 
 756:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 757:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 758:../CM3 Core/core_cm3.h **** 
 759:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 760:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 761:../CM3 Core/core_cm3.h **** 
 762:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 763:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 764:../CM3 Core/core_cm3.h **** 
 765:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 766:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 767:../CM3 Core/core_cm3.h **** 
 768:../CM3 Core/core_cm3.h **** /* Debug Core Register Selector Register */
 769:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 770:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 771:../CM3 Core/core_cm3.h **** 
 772:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 773:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 774:../CM3 Core/core_cm3.h **** 
 775:../CM3 Core/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 776:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 777:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 778:../CM3 Core/core_cm3.h **** 
 779:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 780:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 781:../CM3 Core/core_cm3.h **** 
 782:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 783:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 784:../CM3 Core/core_cm3.h **** 
 785:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 786:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 787:../CM3 Core/core_cm3.h **** 
 788:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 789:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 790:../CM3 Core/core_cm3.h **** 
 791:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 792:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 793:../CM3 Core/core_cm3.h **** 
 794:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 795:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 796:../CM3 Core/core_cm3.h **** 
 797:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 798:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 799:../CM3 Core/core_cm3.h **** 
 800:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 801:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 802:../CM3 Core/core_cm3.h **** 
 803:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 804:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 805:../CM3 Core/core_cm3.h **** 
 806:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 807:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 808:../CM3 Core/core_cm3.h **** 
 809:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 810:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 811:../CM3 Core/core_cm3.h **** 
 812:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 813:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 814:../CM3 Core/core_cm3.h **** 
 815:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 816:../CM3 Core/core_cm3.h **** 
 817:../CM3 Core/core_cm3.h **** 
 818:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 819:../CM3 Core/core_cm3.h ****   @{
 820:../CM3 Core/core_cm3.h ****  */
 821:../CM3 Core/core_cm3.h **** 
 822:../CM3 Core/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 823:../CM3 Core/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 824:../CM3 Core/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 825:../CM3 Core/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 826:../CM3 Core/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 827:../CM3 Core/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 828:../CM3 Core/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 829:../CM3 Core/core_cm3.h **** 
 830:../CM3 Core/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 831:../CM3 Core/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 832:../CM3 Core/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 833:../CM3 Core/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 834:../CM3 Core/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 835:../CM3 Core/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 836:../CM3 Core/core_cm3.h **** 
 837:../CM3 Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 838:../CM3 Core/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 839:../CM3 Core/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 840:../CM3 Core/core_cm3.h **** #endif
 841:../CM3 Core/core_cm3.h **** 
 842:../CM3 Core/core_cm3.h **** /*@} */
 843:../CM3 Core/core_cm3.h **** 
 844:../CM3 Core/core_cm3.h **** 
 845:../CM3 Core/core_cm3.h **** 
 846:../CM3 Core/core_cm3.h **** /*******************************************************************************
 847:../CM3 Core/core_cm3.h ****  *                Hardware Abstraction Layer
 848:../CM3 Core/core_cm3.h ****  ******************************************************************************/
 849:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS
 850:../CM3 Core/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 851:../CM3 Core/core_cm3.h ****   Core Function Interface contains:
 852:../CM3 Core/core_cm3.h ****   - Core NVIC Functions
 853:../CM3 Core/core_cm3.h ****   - Core SysTick Functions
 854:../CM3 Core/core_cm3.h ****   - Core Debug Functions
 855:../CM3 Core/core_cm3.h ****   - Core Register Access Functions
 856:../CM3 Core/core_cm3.h **** */
 857:../CM3 Core/core_cm3.h **** 
 858:../CM3 Core/core_cm3.h **** 
 859:../CM3 Core/core_cm3.h **** 
 860:../CM3 Core/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 861:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 862:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 863:../CM3 Core/core_cm3.h ****   @{
 864:../CM3 Core/core_cm3.h ****  */
 865:../CM3 Core/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 866:../CM3 Core/core_cm3.h ****  * @{
 867:../CM3 Core/core_cm3.h ****  */
 868:../CM3 Core/core_cm3.h **** /** \brief  Set Priority Grouping
 869:../CM3 Core/core_cm3.h **** 
 870:../CM3 Core/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 871:../CM3 Core/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 872:../CM3 Core/core_cm3.h ****   Only values from 0..7 are used.
 873:../CM3 Core/core_cm3.h ****   In case of a conflict between priority grouping and available
 874:../CM3 Core/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 875:../CM3 Core/core_cm3.h **** 
 876:../CM3 Core/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 877:../CM3 Core/core_cm3.h ****  */
 878:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 879:../CM3 Core/core_cm3.h **** {
 880:../CM3 Core/core_cm3.h ****   uint32_t reg_value;
 881:../CM3 Core/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 882:../CM3 Core/core_cm3.h **** 
 883:../CM3 Core/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 884:../CM3 Core/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 885:../CM3 Core/core_cm3.h ****   reg_value  =  (reg_value                       |
 886:../CM3 Core/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 887:../CM3 Core/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 888:../CM3 Core/core_cm3.h ****   SCB->AIRCR =  reg_value;
 889:../CM3 Core/core_cm3.h **** }
 890:../CM3 Core/core_cm3.h **** 
 891:../CM3 Core/core_cm3.h **** 
 892:../CM3 Core/core_cm3.h **** /** \brief  Get Priority Grouping
 893:../CM3 Core/core_cm3.h **** 
 894:../CM3 Core/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 895:../CM3 Core/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 896:../CM3 Core/core_cm3.h **** 
 897:../CM3 Core/core_cm3.h ****     \return                Priority grouping field
 898:../CM3 Core/core_cm3.h ****  */
 899:../CM3 Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 900:../CM3 Core/core_cm3.h **** {
 901:../CM3 Core/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 902:../CM3 Core/core_cm3.h **** }
 903:../CM3 Core/core_cm3.h **** 
 904:../CM3 Core/core_cm3.h **** 
 905:../CM3 Core/core_cm3.h **** /** \brief  Enable External Interrupt
 906:../CM3 Core/core_cm3.h **** 
 907:../CM3 Core/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 908:../CM3 Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 909:../CM3 Core/core_cm3.h **** 
 910:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 911:../CM3 Core/core_cm3.h ****  */
 912:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 913:../CM3 Core/core_cm3.h **** {
 914:../CM3 Core/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 470              		.loc 2 914 0
 471 0184 08BF     		it	eq
 472 0186 4FF48062 		moveq	r2, #1024
 473              	.LBE31:
 474              	.LBE30:
 475              		.loc 1 428 0
 476 018a 04D0     		beq	.L53
 429:../Source Files/lpc17xx_i2c.c **** 		{
 430:../Source Files/lpc17xx_i2c.c **** 			NVIC_EnableIRQ(I2C0_IRQn);
 431:../Source Files/lpc17xx_i2c.c **** 		}
 432:../Source Files/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C1)
 477              		.loc 1 432 0
 478 018c 124B     		ldr	r3, .L55+4
 479 018e 9842     		cmp	r0, r3
 480 0190 04D1     		bne	.L50
 481              	.LVL43:
 482              	.LBB32:
 483              	.LBB33:
 484              		.loc 2 914 0
 485 0192 4FF40062 		mov	r2, #2048
 486              	.LVL44:
 487              	.L53:
 488 0196 1148     		ldr	r0, .L55+8
 489              	.LVL45:
 490 0198 0260     		str	r2, [r0, #0]
 491 019a 7047     		bx	lr
 492              	.LVL46:
 493              	.L50:
 494              	.LBE33:
 495              	.LBE32:
 496              	.LBB34:
 497              	.LBB35:
 433:../Source Files/lpc17xx_i2c.c **** 		{
 434:../Source Files/lpc17xx_i2c.c **** 			NVIC_EnableIRQ(I2C1_IRQn);
 435:../Source Files/lpc17xx_i2c.c **** 		}
 436:../Source Files/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C2)
 498              		.loc 1 436 0
 499 019c 1049     		ldr	r1, .L55+12
 500              	.LVL47:
 501 019e 8842     		cmp	r0, r1
 502              	.LBB36:
 503              	.LBB37:
 504              		.loc 2 914 0
 505 01a0 08BF     		it	eq
 506 01a2 4FF48052 		moveq	r2, #4096
 507              	.LBE37:
 508              	.LBE36:
 509              		.loc 1 436 0
 510 01a6 13D1     		bne	.L46
 511 01a8 F5E7     		b	.L53
 512              	.LVL48:
 513              	.L47:
 514              	.LBE35:
 515              	.LBE34:
 437:../Source Files/lpc17xx_i2c.c **** 		{
 438:../Source Files/lpc17xx_i2c.c **** 			NVIC_EnableIRQ(I2C2_IRQn);
 439:../Source Files/lpc17xx_i2c.c **** 		}
 440:../Source Files/lpc17xx_i2c.c **** 	}
 441:../Source Files/lpc17xx_i2c.c **** 	else
 442:../Source Files/lpc17xx_i2c.c **** 	{
 443:../Source Files/lpc17xx_i2c.c **** 		if(I2Cx == LPC_I2C0)
 516              		.loc 1 443 0
 517 01aa 9842     		cmp	r0, r3
 518              	.LBB38:
 519              	.LBB39:
 915:../CM3 Core/core_cm3.h **** }
 916:../CM3 Core/core_cm3.h **** 
 917:../CM3 Core/core_cm3.h **** 
 918:../CM3 Core/core_cm3.h **** /** \brief  Disable External Interrupt
 919:../CM3 Core/core_cm3.h **** 
 920:../CM3 Core/core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 921:../CM3 Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 922:../CM3 Core/core_cm3.h **** 
 923:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 924:../CM3 Core/core_cm3.h ****  */
 925:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 926:../CM3 Core/core_cm3.h **** {
 927:../CM3 Core/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 520              		.loc 2 927 0
 521 01ac 08BF     		it	eq
 522 01ae 4FF48062 		moveq	r2, #1024
 523              	.LBE39:
 524              	.LBE38:
 525              		.loc 1 443 0
 526 01b2 0AD0     		beq	.L54
 444:../Source Files/lpc17xx_i2c.c **** 		{
 445:../Source Files/lpc17xx_i2c.c **** 			NVIC_DisableIRQ(I2C0_IRQn);
 446:../Source Files/lpc17xx_i2c.c **** 		}
 447:../Source Files/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C1)
 527              		.loc 1 447 0
 528 01b4 0849     		ldr	r1, .L55+4
 529              	.LVL49:
 530 01b6 8842     		cmp	r0, r1
 531              	.LBB40:
 532              	.LBB41:
 533              		.loc 2 927 0
 534 01b8 08BF     		it	eq
 535 01ba 4FF40062 		moveq	r2, #2048
 536              	.LBE41:
 537              	.LBE40:
 538              		.loc 1 447 0
 539 01be 04D0     		beq	.L54
 448:../Source Files/lpc17xx_i2c.c **** 		{
 449:../Source Files/lpc17xx_i2c.c **** 			NVIC_DisableIRQ(I2C1_IRQn);
 450:../Source Files/lpc17xx_i2c.c **** 		}
 451:../Source Files/lpc17xx_i2c.c **** 		else if (I2Cx == LPC_I2C2)
 540              		.loc 1 451 0
 541 01c0 074A     		ldr	r2, .L55+12
 542 01c2 9042     		cmp	r0, r2
 543 01c4 04D1     		bne	.L46
 544              	.LVL50:
 545              	.LBB42:
 546              	.LBB43:
 547              		.loc 2 927 0
 548 01c6 4FF48052 		mov	r2, #4096
 549              	.LVL51:
 550              	.L54:
 551 01ca 0448     		ldr	r0, .L55+8
 552              	.LVL52:
 553 01cc C0F88020 		str	r2, [r0, #128]
 554              	.L46:
 555 01d0 7047     		bx	lr
 556              	.L56:
 557 01d2 00BF     		.align	2
 558              	.L55:
 559 01d4 00C00140 		.word	1073856512
 560 01d8 00C00540 		.word	1074118656
 561 01dc 00E100E0 		.word	-536813312
 562 01e0 00000A40 		.word	1074397184
 563              	.LBE43:
 564              	.LBE42:
 565              		.cfi_endproc
 566              	.LFE66:
 568              		.align	1
 569              		.global	I2C_MasterHandler
 570              		.thumb
 571              		.thumb_func
 573              	I2C_MasterHandler:
 574              	.LFB67:
 452:../Source Files/lpc17xx_i2c.c **** 		{
 453:../Source Files/lpc17xx_i2c.c **** 			NVIC_DisableIRQ(I2C2_IRQn);
 454:../Source Files/lpc17xx_i2c.c **** 		}
 455:../Source Files/lpc17xx_i2c.c **** 	}
 456:../Source Files/lpc17xx_i2c.c ****     return;
 457:../Source Files/lpc17xx_i2c.c **** }
 458:../Source Files/lpc17xx_i2c.c **** 
 459:../Source Files/lpc17xx_i2c.c **** 
 460:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
 461:../Source Files/lpc17xx_i2c.c ****  * @brief 		General Master Interrupt handler for I2C peripheral
 462:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
 463:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C
 464:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 465:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 466:../Source Files/lpc17xx_i2c.c ****  * @return 		None
 467:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
 468:../Source Files/lpc17xx_i2c.c **** void I2C_MasterHandler (LPC_I2C_TypeDef  *I2Cx)
 469:../Source Files/lpc17xx_i2c.c **** {
 575              		.loc 1 469 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              	.LVL53:
 580 01e4 38B5     		push	{r3, r4, r5, lr}
 581              	.LCFI2:
 582              		.cfi_def_cfa_offset 16
 583              		.cfi_offset 3, -16
 584              		.cfi_offset 4, -12
 585              		.cfi_offset 5, -8
 586              		.cfi_offset 14, -4
 587              		.loc 1 469 0
 588 01e6 0446     		mov	r4, r0
 470:../Source Files/lpc17xx_i2c.c **** 	int32_t tmp;
 471:../Source Files/lpc17xx_i2c.c **** 	uint8_t returnCode;
 472:../Source Files/lpc17xx_i2c.c **** 	I2C_M_SETUP_Type *txrx_setup;
 473:../Source Files/lpc17xx_i2c.c **** 
 474:../Source Files/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 589              		.loc 1 474 0
 590 01e8 FFF70AFF 		bl	I2C_getNum
 591              	.LVL54:
 475:../Source Files/lpc17xx_i2c.c **** 	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
 476:../Source Files/lpc17xx_i2c.c **** 
 477:../Source Files/lpc17xx_i2c.c **** 	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 592              		.loc 1 477 0
 593 01ec 6268     		ldr	r2, [r4, #4]
 475:../Source Files/lpc17xx_i2c.c **** 	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
 594              		.loc 1 475 0
 595 01ee 5B49     		ldr	r1, .L147
 596              		.loc 1 477 0
 597 01f0 02F0F802 		and	r2, r2, #248
 475:../Source Files/lpc17xx_i2c.c **** 	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
 598              		.loc 1 475 0
 599 01f4 51F83030 		ldr	r3, [r1, r0, lsl #3]
 478:../Source Files/lpc17xx_i2c.c **** 	// Save current status
 479:../Source Files/lpc17xx_i2c.c **** 	txrx_setup->status = returnCode;
 480:../Source Files/lpc17xx_i2c.c **** 	// there's no relevant information
 481:../Source Files/lpc17xx_i2c.c **** 	if (returnCode == I2C_I2STAT_NO_INF)
 600              		.loc 1 481 0
 601 01f8 F82A     		cmp	r2, #248
 474:../Source Files/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 602              		.loc 1 474 0
 603 01fa 0546     		mov	r5, r0
 604              	.LVL55:
 479:../Source Files/lpc17xx_i2c.c **** 	txrx_setup->status = returnCode;
 605              		.loc 1 479 0
 606 01fc 5A62     		str	r2, [r3, #36]
 607              		.loc 1 481 0
 608 01fe 76D0     		beq	.L84
 609              	.L58:
 482:../Source Files/lpc17xx_i2c.c **** 	{
 483:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 484:../Source Files/lpc17xx_i2c.c **** 		return;
 485:../Source Files/lpc17xx_i2c.c **** 	}
 486:../Source Files/lpc17xx_i2c.c **** 
 487:../Source Files/lpc17xx_i2c.c **** 	/* ----------------------------- TRANSMIT PHASE --------------------------*/
 488:../Source Files/lpc17xx_i2c.c **** 	if (i2cdat[tmp].dir == 0)
 610              		.loc 1 488 0
 611 0200 01EBC000 		add	r0, r1, r0, lsl #3
 612              	.LVL56:
 613 0204 4168     		ldr	r1, [r0, #4]
 614 0206 0029     		cmp	r1, #0
 615 0208 41D1     		bne	.L60
 489:../Source Files/lpc17xx_i2c.c **** 	{
 490:../Source Files/lpc17xx_i2c.c **** 		switch (returnCode)
 616              		.loc 1 490 0
 617 020a 202A     		cmp	r2, #32
 618 020c 3CD0     		beq	.L64
 619 020e 06DC     		bgt	.L66
 620 0210 102A     		cmp	r2, #16
 621 0212 0BD0     		beq	.L62
 622 0214 182A     		cmp	r2, #24
 623 0216 12D0     		beq	.L63
 624 0218 082A     		cmp	r2, #8
 625 021a 7ED1     		bne	.L61
 626 021c 06E0     		b	.L62
 627              	.L66:
 628 021e 302A     		cmp	r2, #48
 629 0220 32D0     		beq	.L64
 630 0222 382A     		cmp	r2, #56
 631 0224 76D0     		beq	.L73
 632 0226 282A     		cmp	r2, #40
 633 0228 77D1     		bne	.L61
 634 022a 08E0     		b	.L63
 635              	.L62:
 491:../Source Files/lpc17xx_i2c.c **** 		{
 492:../Source Files/lpc17xx_i2c.c **** 		/* A start/repeat start condition has been transmitted -------------------*/
 493:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_START:
 494:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_RESTART:
 495:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 496:../Source Files/lpc17xx_i2c.c **** 			/*
 497:../Source Files/lpc17xx_i2c.c **** 			 * If there's any transmit data, then start to
 498:../Source Files/lpc17xx_i2c.c **** 			 * send SLA+W right now, otherwise check whether if there's
 499:../Source Files/lpc17xx_i2c.c **** 			 * any receive data for next state.
 500:../Source Files/lpc17xx_i2c.c **** 			 */
 501:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0))
 636              		.loc 1 501 0
 637 022c 5968     		ldr	r1, [r3, #4]
 495:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 638              		.loc 1 495 0
 639 022e 2020     		movs	r0, #32
 640 0230 A061     		str	r0, [r4, #24]
 641              		.loc 1 501 0
 642 0232 79B1     		cbz	r1, .L67
 643              		.loc 1 501 0 is_stmt 0 discriminator 1
 644 0234 9868     		ldr	r0, [r3, #8]
 645 0236 68B1     		cbz	r0, .L67
 502:../Source Files/lpc17xx_i2c.c **** 			{
 503:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
 646              		.loc 1 503 0 is_stmt 1
 647 0238 1B68     		ldr	r3, [r3, #0]
 648              	.LVL57:
 649 023a 5900     		lsls	r1, r3, #1
 650 023c 1BE0     		b	.L144
 651              	.LVL58:
 652              	.L63:
 504:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 505:../Source Files/lpc17xx_i2c.c **** 			}
 506:../Source Files/lpc17xx_i2c.c **** 			else
 507:../Source Files/lpc17xx_i2c.c **** 			{
 508:../Source Files/lpc17xx_i2c.c **** 				goto next_stage;
 509:../Source Files/lpc17xx_i2c.c **** 			}
 510:../Source Files/lpc17xx_i2c.c **** 			break;
 511:../Source Files/lpc17xx_i2c.c **** 
 512:../Source Files/lpc17xx_i2c.c **** 		/* SLA+W has been transmitted, ACK has been received ----------------------*/
 513:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_SLAW_ACK:
 514:../Source Files/lpc17xx_i2c.c **** 		/* Data has been transmitted, ACK has been received */
 515:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_DAT_ACK:
 516:../Source Files/lpc17xx_i2c.c **** 			/* Send more data */
 517:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
 653              		.loc 1 517 0
 654 023e D968     		ldr	r1, [r3, #12]
 655 0240 9868     		ldr	r0, [r3, #8]
 656 0242 8142     		cmp	r1, r0
 657 0244 06D2     		bcs	.L67
 658              		.loc 1 517 0 is_stmt 0 discriminator 1
 659 0246 5868     		ldr	r0, [r3, #4]
 660 0248 20B1     		cbz	r0, .L67
 518:../Source Files/lpc17xx_i2c.c **** 			{
 519:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
 661              		.loc 1 519 0 is_stmt 1
 662 024a 425C     		ldrb	r2, [r0, r1]	@ zero_extendqisi2
 663              	.LVL59:
 520:../Source Files/lpc17xx_i2c.c **** 				txrx_setup->tx_count++;
 664              		.loc 1 520 0
 665 024c 0131     		adds	r1, r1, #1
 519:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
 666              		.loc 1 519 0
 667 024e A260     		str	r2, [r4, #8]
 668              		.loc 1 520 0
 669 0250 D960     		str	r1, [r3, #12]
 670 0252 4CE0     		b	.L84
 671              	.LVL60:
 672              	.L67:
 673              	.LDL1:
 521:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 522:../Source Files/lpc17xx_i2c.c **** 			}
 523:../Source Files/lpc17xx_i2c.c **** 			// no more data, switch to next stage
 524:../Source Files/lpc17xx_i2c.c **** 			else
 525:../Source Files/lpc17xx_i2c.c **** 			{
 526:../Source Files/lpc17xx_i2c.c **** next_stage:
 527:../Source Files/lpc17xx_i2c.c **** 				// change direction
 528:../Source Files/lpc17xx_i2c.c **** 				i2cdat[tmp].dir = 1;
 674              		.loc 1 528 0
 675 0254 4149     		ldr	r1, .L147
 676 0256 0120     		movs	r0, #1
 677 0258 01EBC501 		add	r1, r1, r5, lsl #3
 678 025c 4860     		str	r0, [r1, #4]
 529:../Source Files/lpc17xx_i2c.c **** 				// Check if any data to receive
 530:../Source Files/lpc17xx_i2c.c **** 				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL))
 679              		.loc 1 530 0
 680 025e 5969     		ldr	r1, [r3, #20]
 681 0260 0029     		cmp	r1, #0
 682 0262 53D0     		beq	.L142
 683              		.loc 1 530 0 is_stmt 0 discriminator 1
 684 0264 1869     		ldr	r0, [r3, #16]
 685 0266 0028     		cmp	r0, #0
 686 0268 50D0     		beq	.L142
 531:../Source Files/lpc17xx_i2c.c **** 				{
 532:../Source Files/lpc17xx_i2c.c **** 					// check whether if we need to issue an repeat start
 533:../Source Files/lpc17xx_i2c.c **** 					if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL))
 687              		.loc 1 533 0 is_stmt 1
 688 026a 9968     		ldr	r1, [r3, #8]
 689 026c 29B9     		cbnz	r1, .L69
 690              	.L70:
 691              	.LDL2:
 534:../Source Files/lpc17xx_i2c.c **** 					{
 535:../Source Files/lpc17xx_i2c.c **** 						// Send out an repeat start command
 536:../Source Files/lpc17xx_i2c.c **** 						I2Cx->I2CONSET = I2C_I2CONSET_STA;
 537:../Source Files/lpc17xx_i2c.c **** 						I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 538:../Source Files/lpc17xx_i2c.c **** 					}
 539:../Source Files/lpc17xx_i2c.c **** 					// Don't need issue an repeat start, just goto send SLA+R
 540:../Source Files/lpc17xx_i2c.c **** 					else
 541:../Source Files/lpc17xx_i2c.c **** 					{
 542:../Source Files/lpc17xx_i2c.c **** 						goto send_slar;
 543:../Source Files/lpc17xx_i2c.c **** 					}
 544:../Source Files/lpc17xx_i2c.c **** 				}
 545:../Source Files/lpc17xx_i2c.c **** 				// no more data send, the go to end stage now
 546:../Source Files/lpc17xx_i2c.c **** 				else
 547:../Source Files/lpc17xx_i2c.c **** 				{
 548:../Source Files/lpc17xx_i2c.c **** 					// success, goto end stage
 549:../Source Files/lpc17xx_i2c.c **** 					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 550:../Source Files/lpc17xx_i2c.c **** 					goto end_stage;
 551:../Source Files/lpc17xx_i2c.c **** 				}
 552:../Source Files/lpc17xx_i2c.c **** 			}
 553:../Source Files/lpc17xx_i2c.c **** 			break;
 554:../Source Files/lpc17xx_i2c.c **** 
 555:../Source Files/lpc17xx_i2c.c **** 		/* SLA+W has been transmitted, NACK has been received ----------------------*/
 556:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_SLAW_NACK:
 557:../Source Files/lpc17xx_i2c.c **** 		/* Data has been transmitted, NACK has been received -----------------------*/
 558:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_DAT_NACK:
 559:../Source Files/lpc17xx_i2c.c **** 			// update status
 560:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
 561:../Source Files/lpc17xx_i2c.c **** 			goto retry;
 562:../Source Files/lpc17xx_i2c.c **** 		/* Arbitration lost in SLA+R/W or Data bytes -------------------------------*/
 563:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_TX_ARB_LOST:
 564:../Source Files/lpc17xx_i2c.c **** 			// update status
 565:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
 566:../Source Files/lpc17xx_i2c.c **** 		default:
 567:../Source Files/lpc17xx_i2c.c **** 			goto retry;
 568:../Source Files/lpc17xx_i2c.c **** 		}
 569:../Source Files/lpc17xx_i2c.c **** 	}
 570:../Source Files/lpc17xx_i2c.c **** 
 571:../Source Files/lpc17xx_i2c.c **** 	/* ----------------------------- RECEIVE PHASE --------------------------*/
 572:../Source Files/lpc17xx_i2c.c **** 	else if (i2cdat[tmp].dir == 1)
 573:../Source Files/lpc17xx_i2c.c **** 	{
 574:../Source Files/lpc17xx_i2c.c **** 		switch (returnCode)
 575:../Source Files/lpc17xx_i2c.c **** 		{
 576:../Source Files/lpc17xx_i2c.c **** 			/* A start/repeat start condition has been transmitted ---------------------*/
 577:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_START:
 578:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_RESTART:
 579:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 580:../Source Files/lpc17xx_i2c.c **** 			/*
 581:../Source Files/lpc17xx_i2c.c **** 			 * If there's any receive data, then start to
 582:../Source Files/lpc17xx_i2c.c **** 			 * send SLA+R right now, otherwise check whether if there's
 583:../Source Files/lpc17xx_i2c.c **** 			 * any receive data for end of state.
 584:../Source Files/lpc17xx_i2c.c **** 			 */
 585:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
 586:../Source Files/lpc17xx_i2c.c **** 			{
 587:../Source Files/lpc17xx_i2c.c **** send_slar:
 588:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
 692              		.loc 1 588 0
 693 026e 1B68     		ldr	r3, [r3, #0]
 694              	.LVL61:
 695 0270 5A00     		lsls	r2, r3, #1
 696              	.LVL62:
 697 0272 42F00101 		orr	r1, r2, #1
 698              	.L144:
 699 0276 A160     		str	r1, [r4, #8]
 700 0278 39E0     		b	.L84
 701              	.LVL63:
 702              	.L69:
 533:../Source Files/lpc17xx_i2c.c **** 					if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL))
 703              		.loc 1 533 0 discriminator 1
 704 027a 5868     		ldr	r0, [r3, #4]
 705 027c 0028     		cmp	r0, #0
 706 027e F6D0     		beq	.L70
 536:../Source Files/lpc17xx_i2c.c **** 						I2Cx->I2CONSET = I2C_I2CONSET_STA;
 707              		.loc 1 536 0 discriminator 1
 708 0280 2020     		movs	r0, #32
 709 0282 2060     		str	r0, [r4, #0]
 537:../Source Files/lpc17xx_i2c.c **** 						I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 710              		.loc 1 537 0 discriminator 1
 711 0284 0C23     		movs	r3, #12
 712              	.LVL64:
 713 0286 33E0     		b	.L143
 714              	.LVL65:
 715              	.L64:
 560:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
 716              		.loc 1 560 0
 717 0288 42F40070 		orr	r0, r2, #512
 718 028c 44E0     		b	.L141
 719              	.L60:
 572:../Source Files/lpc17xx_i2c.c **** 	else if (i2cdat[tmp].dir == 1)
 720              		.loc 1 572 0
 721 028e 0129     		cmp	r1, #1
 722 0290 62D1     		bne	.L57
 574:../Source Files/lpc17xx_i2c.c **** 		switch (returnCode)
 723              		.loc 1 574 0
 724 0292 402A     		cmp	r2, #64
 725 0294 22D0     		beq	.L82
 726 0296 06DC     		bgt	.L78
 727 0298 102A     		cmp	r2, #16
 728 029a 0DD0     		beq	.L72
 729 029c 382A     		cmp	r2, #56
 730 029e 39D0     		beq	.L73
 731 02a0 082A     		cmp	r2, #8
 732 02a2 3AD1     		bne	.L61
 733 02a4 08E0     		b	.L72
 734              	.L78:
 735 02a6 502A     		cmp	r2, #80
 736 02a8 0DD0     		beq	.L76
 737 02aa 582A     		cmp	r2, #88
 738 02ac 22D0     		beq	.L77
 739 02ae 482A     		cmp	r2, #72
 740 02b0 33D1     		bne	.L61
 589:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 590:../Source Files/lpc17xx_i2c.c **** 			}
 591:../Source Files/lpc17xx_i2c.c **** 			else
 592:../Source Files/lpc17xx_i2c.c **** 			{
 593:../Source Files/lpc17xx_i2c.c **** 				// Success, goto end stage
 594:../Source Files/lpc17xx_i2c.c **** 				txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 595:../Source Files/lpc17xx_i2c.c **** 				goto end_stage;
 596:../Source Files/lpc17xx_i2c.c **** 			}
 597:../Source Files/lpc17xx_i2c.c **** 			break;
 598:../Source Files/lpc17xx_i2c.c **** 
 599:../Source Files/lpc17xx_i2c.c **** 		/* SLA+R has been transmitted, ACK has been received -----------------*/
 600:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_SLAR_ACK:
 601:../Source Files/lpc17xx_i2c.c **** 			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1))
 602:../Source Files/lpc17xx_i2c.c **** 			{
 603:../Source Files/lpc17xx_i2c.c **** 				/*Data will be received,  ACK will be return*/
 604:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_AA;
 605:../Source Files/lpc17xx_i2c.c **** 			}
 606:../Source Files/lpc17xx_i2c.c **** 			else
 607:../Source Files/lpc17xx_i2c.c **** 			{
 608:../Source Files/lpc17xx_i2c.c **** 				/*Last data will be received,  NACK will be return*/
 609:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
 610:../Source Files/lpc17xx_i2c.c **** 			}
 611:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 612:../Source Files/lpc17xx_i2c.c **** 			break;
 613:../Source Files/lpc17xx_i2c.c **** 
 614:../Source Files/lpc17xx_i2c.c **** 		/* Data has been received, ACK has been returned ----------------------*/
 615:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_DAT_ACK:
 616:../Source Files/lpc17xx_i2c.c **** 			// Note save data and increase counter first, then check later
 617:../Source Files/lpc17xx_i2c.c **** 			/* Save data  */
 618:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
 619:../Source Files/lpc17xx_i2c.c **** 			{
 620:../Source Files/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 621:../Source Files/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 622:../Source Files/lpc17xx_i2c.c **** 			}
 623:../Source Files/lpc17xx_i2c.c **** 			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1))
 624:../Source Files/lpc17xx_i2c.c **** 			{
 625:../Source Files/lpc17xx_i2c.c **** 				/*Data will be received,  ACK will be return*/
 626:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_AA;
 627:../Source Files/lpc17xx_i2c.c **** 			}
 628:../Source Files/lpc17xx_i2c.c **** 			else
 629:../Source Files/lpc17xx_i2c.c **** 			{
 630:../Source Files/lpc17xx_i2c.c **** 				/*Last data will be received,  NACK will be return*/
 631:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
 632:../Source Files/lpc17xx_i2c.c **** 			}
 633:../Source Files/lpc17xx_i2c.c **** 
 634:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 635:../Source Files/lpc17xx_i2c.c **** 			break;
 636:../Source Files/lpc17xx_i2c.c **** 
 637:../Source Files/lpc17xx_i2c.c **** 		/* Data has been received, NACK has been return -------------------------*/
 638:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_DAT_NACK:
 639:../Source Files/lpc17xx_i2c.c **** 			/* Save the last data */
 640:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
 641:../Source Files/lpc17xx_i2c.c **** 			{
 642:../Source Files/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 643:../Source Files/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 644:../Source Files/lpc17xx_i2c.c **** 			}
 645:../Source Files/lpc17xx_i2c.c **** 			// success, go to end stage
 646:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 647:../Source Files/lpc17xx_i2c.c **** 			goto end_stage;
 648:../Source Files/lpc17xx_i2c.c **** 
 649:../Source Files/lpc17xx_i2c.c **** 		/* SLA+R has been transmitted, NACK has been received ------------------*/
 650:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_SLAR_NACK:
 651:../Source Files/lpc17xx_i2c.c **** 			// update status
 652:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
 741              		.loc 1 652 0
 742 02b2 4FF41270 		mov	r0, #584
 743 02b6 2FE0     		b	.L141
 744              	.L72:
 585:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
 745              		.loc 1 585 0
 746 02b8 1969     		ldr	r1, [r3, #16]
 579:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 747              		.loc 1 579 0
 748 02ba 2020     		movs	r0, #32
 749 02bc A061     		str	r0, [r4, #24]
 585:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
 750              		.loc 1 585 0
 751 02be 29B3     		cbz	r1, .L142
 585:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
 752              		.loc 1 585 0 is_stmt 0 discriminator 1
 753 02c0 5869     		ldr	r0, [r3, #20]
 754 02c2 18B3     		cbz	r0, .L142
 755 02c4 D3E7     		b	.L70
 756              	.L76:
 618:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
 757              		.loc 1 618 0 is_stmt 1
 758 02c6 1969     		ldr	r1, [r3, #16]
 759 02c8 41B1     		cbz	r1, .L82
 618:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
 760              		.loc 1 618 0 is_stmt 0 discriminator 1
 761 02ca 9A69     		ldr	r2, [r3, #24]
 762              	.LVL66:
 763 02cc 5869     		ldr	r0, [r3, #20]
 764 02ce 8242     		cmp	r2, r0
 765 02d0 04D2     		bcs	.L82
 620:../Source Files/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 766              		.loc 1 620 0 is_stmt 1
 767 02d2 A068     		ldr	r0, [r4, #8]
 768 02d4 8854     		strb	r0, [r1, r2]
 621:../Source Files/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 769              		.loc 1 621 0
 770 02d6 9969     		ldr	r1, [r3, #24]
 771 02d8 4A1C     		adds	r2, r1, #1
 772 02da 9A61     		str	r2, [r3, #24]
 773              	.L82:
 623:../Source Files/lpc17xx_i2c.c **** 			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1))
 774              		.loc 1 623 0
 775 02dc 5869     		ldr	r0, [r3, #20]
 776 02de 9B69     		ldr	r3, [r3, #24]
 777              	.LVL67:
 778 02e0 411E     		subs	r1, r0, #1
 779 02e2 8B42     		cmp	r3, r1
 780 02e4 4FF00402 		mov	r2, #4
 626:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_AA;
 781              		.loc 1 626 0
 782 02e8 34BF     		ite	cc
 783 02ea 2260     		strcc	r2, [r4, #0]
 631:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
 784              		.loc 1 631 0
 785 02ec A261     		strcs	r2, [r4, #24]
 786              	.L84:
 634:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 787              		.loc 1 634 0
 788 02ee 0823     		movs	r3, #8
 789              	.L143:
 790 02f0 A361     		str	r3, [r4, #24]
 635:../Source Files/lpc17xx_i2c.c **** 			break;
 791              		.loc 1 635 0
 792 02f2 38BD     		pop	{r3, r4, r5, pc}
 793              	.LVL68:
 794              	.L77:
 640:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
 795              		.loc 1 640 0
 796 02f4 1969     		ldr	r1, [r3, #16]
 797 02f6 41B1     		cbz	r1, .L85
 640:../Source Files/lpc17xx_i2c.c **** 			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
 798              		.loc 1 640 0 is_stmt 0 discriminator 1
 799 02f8 9A69     		ldr	r2, [r3, #24]
 800              	.LVL69:
 801 02fa 5869     		ldr	r0, [r3, #20]
 802 02fc 8242     		cmp	r2, r0
 803 02fe 04D2     		bcs	.L85
 642:../Source Files/lpc17xx_i2c.c **** 				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 804              		.loc 1 642 0 is_stmt 1
 805 0300 A068     		ldr	r0, [r4, #8]
 806 0302 8854     		strb	r0, [r1, r2]
 643:../Source Files/lpc17xx_i2c.c **** 				txrx_setup->rx_count++;
 807              		.loc 1 643 0
 808 0304 9969     		ldr	r1, [r3, #24]
 809 0306 4A1C     		adds	r2, r1, #1
 810 0308 9A61     		str	r2, [r3, #24]
 811              	.L85:
 646:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 812              		.loc 1 646 0
 813 030a 5A6A     		ldr	r2, [r3, #36]
 814              	.L142:
 815 030c 42F48062 		orr	r2, r2, #1024
 816 0310 5A62     		str	r2, [r3, #36]
 647:../Source Files/lpc17xx_i2c.c **** 			goto end_stage;
 817              		.loc 1 647 0
 818 0312 0FE0     		b	.L71
 819              	.LVL70:
 820              	.L73:
 653:../Source Files/lpc17xx_i2c.c **** 			goto retry;
 654:../Source Files/lpc17xx_i2c.c **** 
 655:../Source Files/lpc17xx_i2c.c **** 		/* Arbitration lost ----------------------------------------------------*/
 656:../Source Files/lpc17xx_i2c.c **** 		case I2C_I2STAT_M_RX_ARB_LOST:
 657:../Source Files/lpc17xx_i2c.c **** 			// update status
 658:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
 821              		.loc 1 658 0
 822 0314 4FF49C70 		mov	r0, #312
 823              	.L141:
 824 0318 5862     		str	r0, [r3, #36]
 825              	.L61:
 659:../Source Files/lpc17xx_i2c.c **** 		default:
 660:../Source Files/lpc17xx_i2c.c **** retry:
 661:../Source Files/lpc17xx_i2c.c **** 			// check if retransmission is available
 662:../Source Files/lpc17xx_i2c.c **** 			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max)
 826              		.loc 1 662 0
 827 031a 1A6A     		ldr	r2, [r3, #32]
 828              	.LVL71:
 829 031c D969     		ldr	r1, [r3, #28]
 830 031e 8A42     		cmp	r2, r1
 831 0320 08D2     		bcs	.L71
 663:../Source Files/lpc17xx_i2c.c **** 			{
 664:../Source Files/lpc17xx_i2c.c **** 				// Clear tx count
 665:../Source Files/lpc17xx_i2c.c **** 				txrx_setup->tx_count = 0;
 832              		.loc 1 665 0
 833 0322 0021     		movs	r1, #0
 834 0324 D960     		str	r1, [r3, #12]
 666:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_STA;
 835              		.loc 1 666 0
 836 0326 2020     		movs	r0, #32
 667:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 837              		.loc 1 667 0
 838 0328 0C21     		movs	r1, #12
 668:../Source Files/lpc17xx_i2c.c **** 				txrx_setup->retransmissions_count++;
 839              		.loc 1 668 0
 840 032a 0132     		adds	r2, r2, #1
 666:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONSET = I2C_I2CONSET_STA;
 841              		.loc 1 666 0
 842 032c 2060     		str	r0, [r4, #0]
 667:../Source Files/lpc17xx_i2c.c **** 				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
 843              		.loc 1 667 0
 844 032e A161     		str	r1, [r4, #24]
 845              		.loc 1 668 0
 846 0330 1A62     		str	r2, [r3, #32]
 847 0332 38BD     		pop	{r3, r4, r5, pc}
 848              	.L71:
 669:../Source Files/lpc17xx_i2c.c **** 			}
 670:../Source Files/lpc17xx_i2c.c **** 			// End of stage
 671:../Source Files/lpc17xx_i2c.c **** 			else
 672:../Source Files/lpc17xx_i2c.c **** 			{
 673:../Source Files/lpc17xx_i2c.c **** end_stage:
 674:../Source Files/lpc17xx_i2c.c **** 				// Disable interrupt
 675:../Source Files/lpc17xx_i2c.c **** 				I2C_IntCmd(I2Cx, 0);
 849              		.loc 1 675 0
 850 0334 0021     		movs	r1, #0
 851 0336 2046     		mov	r0, r4
 852 0338 FFF7FEFF 		bl	I2C_IntCmd
 853              	.LVL72:
 854              	.LBB46:
 855              	.LBB47:
 145:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
 856              		.loc 1 145 0
 857 033c 2368     		ldr	r3, [r4, #0]
 858 033e 9906     		lsls	r1, r3, #26
 859 0340 01D5     		bpl	.L86
 147:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 860              		.loc 1 147 0
 861 0342 2020     		movs	r0, #32
 862 0344 A061     		str	r0, [r4, #24]
 863              	.L86:
 864              	.LBE47:
 865              	.LBE46:
 676:../Source Files/lpc17xx_i2c.c **** 				// Send stop
 677:../Source Files/lpc17xx_i2c.c **** 				I2C_Stop(I2Cx);
 678:../Source Files/lpc17xx_i2c.c **** 
 679:../Source Files/lpc17xx_i2c.c **** 				I2C_MasterComplete[tmp] = TRUE;
 866              		.loc 1 679 0
 867 0346 054B     		ldr	r3, .L147
 868              	.LBB51:
 869              	.LBB48:
 149:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STO;
 870              		.loc 1 149 0
 871 0348 1022     		movs	r2, #16
 150:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 872              		.loc 1 150 0
 873 034a 0821     		movs	r1, #8
 874              	.LBE48:
 875              	.LBE51:
 876              		.loc 1 679 0
 877 034c 03EB8505 		add	r5, r3, r5, lsl #2
 878              	.LVL73:
 879 0350 0120     		movs	r0, #1
 880              	.LBB52:
 881              	.LBB49:
 149:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STO;
 882              		.loc 1 149 0
 883 0352 2260     		str	r2, [r4, #0]
 884              	.LBE49:
 885              	.LBE52:
 886              		.loc 1 679 0
 887 0354 A861     		str	r0, [r5, #24]
 888              	.LBB53:
 889              	.LBB50:
 150:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 890              		.loc 1 150 0
 891 0356 A161     		str	r1, [r4, #24]
 892              	.LVL74:
 893              	.L57:
 894 0358 38BD     		pop	{r3, r4, r5, pc}
 895              	.L148:
 896 035a 00BF     		.align	2
 897              	.L147:
 898 035c 00000000 		.word	.LANCHOR0
 899              	.LBE50:
 900              	.LBE53:
 901              		.cfi_endproc
 902              	.LFE67:
 904              		.align	1
 905              		.global	I2C_SlaveHandler
 906              		.thumb
 907              		.thumb_func
 909              	I2C_SlaveHandler:
 910              	.LFB68:
 680:../Source Files/lpc17xx_i2c.c **** 			}
 681:../Source Files/lpc17xx_i2c.c **** 			break;
 682:../Source Files/lpc17xx_i2c.c **** 		}
 683:../Source Files/lpc17xx_i2c.c **** 	}
 684:../Source Files/lpc17xx_i2c.c **** }
 685:../Source Files/lpc17xx_i2c.c **** 
 686:../Source Files/lpc17xx_i2c.c **** 
 687:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
 688:../Source Files/lpc17xx_i2c.c ****  * @brief 		General Slave Interrupt handler for I2C peripheral
 689:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
 690:../Source Files/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 691:../Source Files/lpc17xx_i2c.c ****  *  			- LPC_I2C1
 692:../Source Files/lpc17xx_i2c.c ****  *  			- LPC_I2C2
 693:../Source Files/lpc17xx_i2c.c ****  * @return 		None
 694:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
 695:../Source Files/lpc17xx_i2c.c **** void I2C_SlaveHandler (LPC_I2C_TypeDef  *I2Cx)
 696:../Source Files/lpc17xx_i2c.c **** {
 911              		.loc 1 696 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915              	.LVL75:
 916 0360 70B5     		push	{r4, r5, r6, lr}
 917              	.LCFI3:
 918              		.cfi_def_cfa_offset 16
 919              		.cfi_offset 4, -16
 920              		.cfi_offset 5, -12
 921              		.cfi_offset 6, -8
 922              		.cfi_offset 14, -4
 923              		.loc 1 696 0
 924 0362 0446     		mov	r4, r0
 697:../Source Files/lpc17xx_i2c.c **** 	int32_t tmp;
 698:../Source Files/lpc17xx_i2c.c **** 	uint8_t returnCode;
 699:../Source Files/lpc17xx_i2c.c **** 	I2C_S_SETUP_Type *txrx_setup;
 700:../Source Files/lpc17xx_i2c.c **** 	uint32_t timeout;
 701:../Source Files/lpc17xx_i2c.c **** 
 702:../Source Files/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 925              		.loc 1 702 0
 926 0364 FFF74CFE 		bl	I2C_getNum
 927              	.LVL76:
 703:../Source Files/lpc17xx_i2c.c **** 	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
 928              		.loc 1 703 0
 929 0368 354B     		ldr	r3, .L202
 702:../Source Files/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 930              		.loc 1 702 0
 931 036a 0646     		mov	r6, r0
 932              	.LVL77:
 933              		.loc 1 703 0
 934 036c 53F83050 		ldr	r5, [r3, r0, lsl #3]
 935              	.LVL78:
 704:../Source Files/lpc17xx_i2c.c **** 
 705:../Source Files/lpc17xx_i2c.c **** 	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 936              		.loc 1 705 0
 937 0370 6068     		ldr	r0, [r4, #4]
 938              	.LVL79:
 939 0372 00F0F801 		and	r1, r0, #248
 940              	.LVL80:
 706:../Source Files/lpc17xx_i2c.c **** 	// Save current status
 707:../Source Files/lpc17xx_i2c.c **** 	txrx_setup->status = returnCode;
 708:../Source Files/lpc17xx_i2c.c **** 	// there's no relevant information
 709:../Source Files/lpc17xx_i2c.c **** 	if (returnCode == I2C_I2STAT_NO_INF)
 941              		.loc 1 709 0
 942 0376 F829     		cmp	r1, #248
 707:../Source Files/lpc17xx_i2c.c **** 	txrx_setup->status = returnCode;
 943              		.loc 1 707 0
 944 0378 A961     		str	r1, [r5, #24]
 945              		.loc 1 709 0
 946 037a 4BD0     		beq	.L199
 947              	.L150:
 710:../Source Files/lpc17xx_i2c.c **** 	{
 711:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 712:../Source Files/lpc17xx_i2c.c **** 		return;
 713:../Source Files/lpc17xx_i2c.c **** 	}
 714:../Source Files/lpc17xx_i2c.c **** 
 715:../Source Files/lpc17xx_i2c.c **** 
 716:../Source Files/lpc17xx_i2c.c **** 	switch (returnCode)
 948              		.loc 1 716 0
 949 037c 9829     		cmp	r1, #152
 950 037e 49D0     		beq	.L199
 951 0380 0BDC     		bgt	.L160
 952 0382 8029     		cmp	r1, #128
 953 0384 16D0     		beq	.L154
 954 0386 03DC     		bgt	.L161
 955 0388 6029     		cmp	r1, #96
 956 038a 41D0     		beq	.L166
 957 038c 7029     		cmp	r1, #112
 958 038e 0FE0     		b	.L201
 959              	.L161:
 960 0390 8829     		cmp	r1, #136
 961 0392 3FD0     		beq	.L199
 962 0394 9029     		cmp	r1, #144
 963 0396 47D1     		bne	.L152
 964 0398 0CE0     		b	.L154
 965              	.L160:
 966 039a B829     		cmp	r1, #184
 967 039c 2ED0     		beq	.L157
 968 039e 04DC     		bgt	.L162
 969 03a0 A029     		cmp	r1, #160
 970 03a2 14D0     		beq	.L156
 971 03a4 A829     		cmp	r1, #168
 972 03a6 3FD1     		bne	.L152
 973 03a8 28E0     		b	.L157
 974              	.L162:
 975 03aa C029     		cmp	r1, #192
 976 03ac 35D0     		beq	.L158
 977 03ae F829     		cmp	r1, #248
 978              	.L201:
 979 03b0 3AD1     		bne	.L152
 980 03b2 2DE0     		b	.L166
 981              	.L154:
 717:../Source Files/lpc17xx_i2c.c **** 	{
 718:../Source Files/lpc17xx_i2c.c **** 
 719:../Source Files/lpc17xx_i2c.c **** 	/* No status information */
 720:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_NO_INF:
 721:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 722:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 723:../Source Files/lpc17xx_i2c.c **** 		break;
 724:../Source Files/lpc17xx_i2c.c **** 
 725:../Source Files/lpc17xx_i2c.c **** 	/* Reading phase -------------------------------------------------------- */
 726:../Source Files/lpc17xx_i2c.c **** 	/* Own SLA+R has been received, ACK has been returned */
 727:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_SLAW_ACK:
 728:../Source Files/lpc17xx_i2c.c **** 	/* General call address has been received, ACK has been returned */
 729:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_GENCALL_ACK:
 730:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 731:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 732:../Source Files/lpc17xx_i2c.c **** 		break;
 733:../Source Files/lpc17xx_i2c.c **** 
 734:../Source Files/lpc17xx_i2c.c **** 	/* Previously addressed with own SLA;
 735:../Source Files/lpc17xx_i2c.c **** 	 * DATA byte has been received;
 736:../Source Files/lpc17xx_i2c.c **** 	 * ACK has been returned */
 737:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_SLA_DAT_ACK:
 738:../Source Files/lpc17xx_i2c.c **** 	/* DATA has been received, ACK hasn been return */
 739:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
 740:../Source Files/lpc17xx_i2c.c **** 		/*
 741:../Source Files/lpc17xx_i2c.c **** 		 * All data bytes that over-flow the specified receive
 742:../Source Files/lpc17xx_i2c.c **** 		 * data length, just ignore them.
 743:../Source Files/lpc17xx_i2c.c **** 		 */
 744:../Source Files/lpc17xx_i2c.c **** 		if ((txrx_setup->rx_count < txrx_setup->rx_length) && (txrx_setup->rx_data != NULL))
 982              		.loc 1 744 0
 983 03b4 6B69     		ldr	r3, [r5, #20]
 984 03b6 2A69     		ldr	r2, [r5, #16]
 985 03b8 9342     		cmp	r3, r2
 986 03ba 29D2     		bcs	.L166
 987              		.loc 1 744 0 is_stmt 0 discriminator 1
 988 03bc E868     		ldr	r0, [r5, #12]
 989 03be 0028     		cmp	r0, #0
 990 03c0 26D0     		beq	.L166
 745:../Source Files/lpc17xx_i2c.c **** 		{
 746:../Source Files/lpc17xx_i2c.c **** 			*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (uint8_t)I2Cx->I2DAT;
 991              		.loc 1 746 0 is_stmt 1
 992 03c2 A168     		ldr	r1, [r4, #8]
 993              	.LVL81:
 994 03c4 C154     		strb	r1, [r0, r3]
 747:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->rx_count++;
 995              		.loc 1 747 0
 996 03c6 6B69     		ldr	r3, [r5, #20]
 997 03c8 5A1C     		adds	r2, r3, #1
 998 03ca 6A61     		str	r2, [r5, #20]
 999 03cc 20E0     		b	.L166
 1000              	.LVL82:
 1001              	.L156:
 748:../Source Files/lpc17xx_i2c.c **** 		}
 749:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 750:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 751:../Source Files/lpc17xx_i2c.c **** 		break;
 752:../Source Files/lpc17xx_i2c.c **** 
 753:../Source Files/lpc17xx_i2c.c **** 	/* Previously addressed with own SLA;
 754:../Source Files/lpc17xx_i2c.c **** 	 * DATA byte has been received;
 755:../Source Files/lpc17xx_i2c.c **** 	 * NOT ACK has been returned */
 756:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
 757:../Source Files/lpc17xx_i2c.c **** 	/* DATA has been received, NOT ACK has been returned */
 758:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
 759:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 760:../Source Files/lpc17xx_i2c.c **** 		break;
 761:../Source Files/lpc17xx_i2c.c **** 
 762:../Source Files/lpc17xx_i2c.c **** 	/*
 763:../Source Files/lpc17xx_i2c.c **** 	 * Note that: Return code only let us know a stop condition mixed
 764:../Source Files/lpc17xx_i2c.c **** 	 * with a repeat start condition in the same code value.
 765:../Source Files/lpc17xx_i2c.c **** 	 * So we should provide a time-out. In case this is really a stop
 766:../Source Files/lpc17xx_i2c.c **** 	 * condition, this will return back after time out condition. Otherwise,
 767:../Source Files/lpc17xx_i2c.c **** 	 * next session that is slave receive data will be completed.
 768:../Source Files/lpc17xx_i2c.c **** 	 */
 769:../Source Files/lpc17xx_i2c.c **** 
 770:../Source Files/lpc17xx_i2c.c **** 	/* A Stop or a repeat start condition */
 771:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
 772:../Source Files/lpc17xx_i2c.c **** 		// Temporally lock the interrupt for timeout condition
 773:../Source Files/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, 0);
 1002              		.loc 1 773 0
 1003 03ce 2046     		mov	r0, r4
 1004 03d0 0021     		movs	r1, #0
 1005              	.LVL83:
 1006 03d2 FFF7FEFF 		bl	I2C_IntCmd
 1007              	.LVL84:
 774:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1008              		.loc 1 774 0
 1009 03d6 0820     		movs	r0, #8
 1010 03d8 A061     		str	r0, [r4, #24]
 1011              	.LVL85:
 1012 03da 4FF48033 		mov	r3, #65536
 1013              	.LVL86:
 1014              	.L165:
 775:../Source Files/lpc17xx_i2c.c **** 		// enable time out
 776:../Source Files/lpc17xx_i2c.c **** 		timeout = I2C_SLAVE_TIME_OUT;
 777:../Source Files/lpc17xx_i2c.c **** 		while(1)
 778:../Source Files/lpc17xx_i2c.c **** 		{
 779:../Source Files/lpc17xx_i2c.c **** 			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
 1015              		.loc 1 779 0
 1016 03de 2168     		ldr	r1, [r4, #0]
 1017 03e0 0807     		lsls	r0, r1, #28
 1018 03e2 05D5     		bpl	.L164
 780:../Source Files/lpc17xx_i2c.c **** 			{
 781:../Source Files/lpc17xx_i2c.c **** 				// re-Enable interrupt
 782:../Source Files/lpc17xx_i2c.c **** 				I2C_IntCmd(I2Cx, 1);
 1019              		.loc 1 782 0
 1020 03e4 2046     		mov	r0, r4
 1021 03e6 0121     		movs	r1, #1
 783:../Source Files/lpc17xx_i2c.c **** 				break;
 784:../Source Files/lpc17xx_i2c.c **** 			}
 785:../Source Files/lpc17xx_i2c.c **** 			else
 786:../Source Files/lpc17xx_i2c.c **** 			{
 787:../Source Files/lpc17xx_i2c.c **** 				timeout--;
 788:../Source Files/lpc17xx_i2c.c **** 				if (timeout == 0)
 789:../Source Files/lpc17xx_i2c.c **** 				{
 790:../Source Files/lpc17xx_i2c.c **** 					// timeout occur, it's really a stop condition
 791:../Source Files/lpc17xx_i2c.c **** 					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 792:../Source Files/lpc17xx_i2c.c **** 					goto s_int_end;
 793:../Source Files/lpc17xx_i2c.c **** 				}
 794:../Source Files/lpc17xx_i2c.c **** 			}
 795:../Source Files/lpc17xx_i2c.c **** 		}
 796:../Source Files/lpc17xx_i2c.c **** 		break;
 797:../Source Files/lpc17xx_i2c.c **** 
 798:../Source Files/lpc17xx_i2c.c **** 	/* Writing phase -------------------------------------------------------- */
 799:../Source Files/lpc17xx_i2c.c **** 	/* Own SLA+R has been received, ACK has been returned */
 800:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_TX_SLAR_ACK:
 801:../Source Files/lpc17xx_i2c.c **** 	/* Data has been transmitted, ACK has been received */
 802:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_TX_DAT_ACK:
 803:../Source Files/lpc17xx_i2c.c **** 		/*
 804:../Source Files/lpc17xx_i2c.c **** 		 * All data bytes that over-flow the specified receive
 805:../Source Files/lpc17xx_i2c.c **** 		 * data length, just ignore them.
 806:../Source Files/lpc17xx_i2c.c **** 		 */
 807:../Source Files/lpc17xx_i2c.c **** 		if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
 808:../Source Files/lpc17xx_i2c.c **** 		{
 809:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
 810:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->tx_count++;
 811:../Source Files/lpc17xx_i2c.c **** 		}
 812:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 813:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 814:../Source Files/lpc17xx_i2c.c **** 		break;
 815:../Source Files/lpc17xx_i2c.c **** 
 816:../Source Files/lpc17xx_i2c.c **** 	/* Data has been transmitted, NACK has been received,
 817:../Source Files/lpc17xx_i2c.c **** 	 * that means there's no more data to send, exit now */
 818:../Source Files/lpc17xx_i2c.c **** 	/*
 819:../Source Files/lpc17xx_i2c.c **** 	 * Note: Don't wait for stop event since in slave transmit mode,
 820:../Source Files/lpc17xx_i2c.c **** 	 * since there no proof lets us know when a stop signal has been received
 821:../Source Files/lpc17xx_i2c.c **** 	 * on slave side.
 822:../Source Files/lpc17xx_i2c.c **** 	 */
 823:../Source Files/lpc17xx_i2c.c **** 	case I2C_I2STAT_S_TX_DAT_NACK:
 824:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 825:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 826:../Source Files/lpc17xx_i2c.c **** 		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 827:../Source Files/lpc17xx_i2c.c **** 		goto s_int_end;
 828:../Source Files/lpc17xx_i2c.c **** 
 829:../Source Files/lpc17xx_i2c.c **** 	// Other status must be captured
 830:../Source Files/lpc17xx_i2c.c **** 	default:
 831:../Source Files/lpc17xx_i2c.c **** s_int_end:
 832:../Source Files/lpc17xx_i2c.c **** 		// Disable interrupt
 833:../Source Files/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, 0);
 834:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 835:../Source Files/lpc17xx_i2c.c **** 		I2C_SlaveComplete[tmp] = TRUE;
 836:../Source Files/lpc17xx_i2c.c **** 		break;
 837:../Source Files/lpc17xx_i2c.c **** 	}
 838:../Source Files/lpc17xx_i2c.c **** }
 1022              		.loc 1 838 0
 1023 03e8 BDE87040 		pop	{r4, r5, r6, lr}
 782:../Source Files/lpc17xx_i2c.c **** 				I2C_IntCmd(I2Cx, 1);
 1024              		.loc 1 782 0
 1025 03ec FFF7FEBF 		b	I2C_IntCmd
 1026              	.LVL87:
 1027              	.L164:
 788:../Source Files/lpc17xx_i2c.c **** 				if (timeout == 0)
 1028              		.loc 1 788 0
 1029 03f0 013B     		subs	r3, r3, #1
 1030 03f2 F4D1     		bne	.L165
 791:../Source Files/lpc17xx_i2c.c **** 					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 1031              		.loc 1 791 0
 1032 03f4 AA69     		ldr	r2, [r5, #24]
 1033 03f6 42F48063 		orr	r3, r2, #1024
 1034 03fa 14E0     		b	.L198
 1035              	.LVL88:
 1036              	.L157:
 807:../Source Files/lpc17xx_i2c.c **** 		if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
 1037              		.loc 1 807 0
 1038 03fc AB68     		ldr	r3, [r5, #8]
 1039 03fe 6A68     		ldr	r2, [r5, #4]
 1040 0400 9342     		cmp	r3, r2
 1041 0402 05D2     		bcs	.L166
 807:../Source Files/lpc17xx_i2c.c **** 		if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
 1042              		.loc 1 807 0 is_stmt 0 discriminator 1
 1043 0404 2868     		ldr	r0, [r5, #0]
 1044 0406 18B1     		cbz	r0, .L166
 809:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
 1045              		.loc 1 809 0 is_stmt 1
 1046 0408 C15C     		ldrb	r1, [r0, r3]	@ zero_extendqisi2
 1047              	.LVL89:
 810:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->tx_count++;
 1048              		.loc 1 810 0
 1049 040a 0133     		adds	r3, r3, #1
 809:../Source Files/lpc17xx_i2c.c **** 			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
 1050              		.loc 1 809 0
 1051 040c A160     		str	r1, [r4, #8]
 810:../Source Files/lpc17xx_i2c.c **** 			txrx_setup->tx_count++;
 1052              		.loc 1 810 0
 1053 040e AB60     		str	r3, [r5, #8]
 1054              	.L166:
 812:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1055              		.loc 1 812 0
 1056 0410 0422     		movs	r2, #4
 1057 0412 2260     		str	r2, [r4, #0]
 1058              	.L199:
 813:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1059              		.loc 1 813 0
 1060 0414 0820     		movs	r0, #8
 1061 0416 A061     		str	r0, [r4, #24]
 814:../Source Files/lpc17xx_i2c.c **** 		break;
 1062              		.loc 1 814 0
 1063 0418 70BD     		pop	{r4, r5, r6, pc}
 1064              	.LVL90:
 1065              	.L158:
 824:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1066              		.loc 1 824 0
 1067 041a 0420     		movs	r0, #4
 825:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1068              		.loc 1 825 0
 1069 041c 0821     		movs	r1, #8
 1070              	.LVL91:
 824:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1071              		.loc 1 824 0
 1072 041e 2060     		str	r0, [r4, #0]
 826:../Source Files/lpc17xx_i2c.c **** 		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 1073              		.loc 1 826 0
 1074 0420 4FF49863 		mov	r3, #1216
 825:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1075              		.loc 1 825 0
 1076 0424 A161     		str	r1, [r4, #24]
 1077              	.LVL92:
 1078              	.L198:
 826:../Source Files/lpc17xx_i2c.c **** 		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
 1079              		.loc 1 826 0
 1080 0426 AB61     		str	r3, [r5, #24]
 1081              	.L152:
 833:../Source Files/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, 0);
 1082              		.loc 1 833 0
 1083 0428 2046     		mov	r0, r4
 1084 042a 0021     		movs	r1, #0
 1085 042c FFF7FEFF 		bl	I2C_IntCmd
 1086              	.LVL93:
 835:../Source Files/lpc17xx_i2c.c **** 		I2C_SlaveComplete[tmp] = TRUE;
 1087              		.loc 1 835 0
 1088 0430 0348     		ldr	r0, .L202
 834:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 1089              		.loc 1 834 0
 1090 0432 2C22     		movs	r2, #44
 835:../Source Files/lpc17xx_i2c.c **** 		I2C_SlaveComplete[tmp] = TRUE;
 1091              		.loc 1 835 0
 1092 0434 00EB8606 		add	r6, r0, r6, lsl #2
 1093              	.LVL94:
 1094 0438 0121     		movs	r1, #1
 834:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 1095              		.loc 1 834 0
 1096 043a A261     		str	r2, [r4, #24]
 835:../Source Files/lpc17xx_i2c.c **** 		I2C_SlaveComplete[tmp] = TRUE;
 1097              		.loc 1 835 0
 1098 043c 7162     		str	r1, [r6, #36]
 1099 043e 70BD     		pop	{r4, r5, r6, pc}
 1100              	.L203:
 1101              		.align	2
 1102              	.L202:
 1103 0440 00000000 		.word	.LANCHOR0
 1104              		.cfi_endproc
 1105              	.LFE68:
 1107              		.align	1
 1108              		.global	I2C_MasterTransferData
 1109              		.thumb
 1110              		.thumb_func
 1112              	I2C_MasterTransferData:
 1113              	.LFB69:
 839:../Source Files/lpc17xx_i2c.c **** 
 840:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
 841:../Source Files/lpc17xx_i2c.c ****  * @brief 		Transmit and Receive data in master mode
 842:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx			I2C peripheral selected, should be:
 843:../Source Files/lpc17xx_i2c.c ****  *  			- LPC_I2C0
 844:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
 845:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
 846:../Source Files/lpc17xx_i2c.c ****  * @param[in]	TransferCfg		Pointer to a I2C_M_SETUP_Type structure that
 847:../Source Files/lpc17xx_i2c.c ****  * 								contains specified information about the
 848:../Source Files/lpc17xx_i2c.c ****  * 								configuration for master transfer.
 849:../Source Files/lpc17xx_i2c.c ****  * @param[in]	Opt				a I2C_TRANSFER_OPT_Type type that selected for
 850:../Source Files/lpc17xx_i2c.c ****  * 								interrupt or polling mode.
 851:../Source Files/lpc17xx_i2c.c ****  * @return 		SUCCESS or ERROR
 852:../Source Files/lpc17xx_i2c.c ****  *
 853:../Source Files/lpc17xx_i2c.c ****  * Note:
 854:../Source Files/lpc17xx_i2c.c ****  * - In case of using I2C to transmit data only, either transmit length set to 0
 855:../Source Files/lpc17xx_i2c.c ****  * or transmit data pointer set to NULL.
 856:../Source Files/lpc17xx_i2c.c ****  * - In case of using I2C to receive data only, either receive length set to 0
 857:../Source Files/lpc17xx_i2c.c ****  * or receive data pointer set to NULL.
 858:../Source Files/lpc17xx_i2c.c ****  * - In case of using I2C to transmit followed by receive data, transmit length,
 859:../Source Files/lpc17xx_i2c.c ****  * transmit data pointer, receive length and receive data pointer should be set
 860:../Source Files/lpc17xx_i2c.c ****  * corresponding.
 861:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
 862:../Source Files/lpc17xx_i2c.c **** Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
 863:../Source Files/lpc17xx_i2c.c **** 								I2C_TRANSFER_OPT_Type Opt)
 864:../Source Files/lpc17xx_i2c.c **** {
 1114              		.loc 1 864 0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 0
 1117              		@ frame_needed = 0, uses_anonymous_args = 0
 1118              	.LVL95:
 1119 0444 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1120              	.LCFI4:
 1121              		.cfi_def_cfa_offset 24
 1122              		.cfi_offset 3, -24
 1123              		.cfi_offset 4, -20
 1124              		.cfi_offset 5, -16
 1125              		.cfi_offset 6, -12
 1126              		.cfi_offset 7, -8
 1127              		.cfi_offset 14, -4
 865:../Source Files/lpc17xx_i2c.c **** 	uint8_t *txdat;
 866:../Source Files/lpc17xx_i2c.c **** 	uint8_t *rxdat;
 867:../Source Files/lpc17xx_i2c.c **** 	uint32_t CodeStatus;
 868:../Source Files/lpc17xx_i2c.c **** 	uint8_t tmp;
 869:../Source Files/lpc17xx_i2c.c **** 
 870:../Source Files/lpc17xx_i2c.c **** 	// reset all default state
 871:../Source Files/lpc17xx_i2c.c **** 	txdat = (uint8_t *) TransferCfg->tx_data;
 872:../Source Files/lpc17xx_i2c.c **** 	rxdat = (uint8_t *) TransferCfg->rx_data;
 873:../Source Files/lpc17xx_i2c.c **** 	// Reset I2C setup value to default state
 874:../Source Files/lpc17xx_i2c.c **** 	TransferCfg->tx_count = 0;
 1128              		.loc 1 874 0
 1129 0446 0026     		movs	r6, #0
 864:../Source Files/lpc17xx_i2c.c **** {
 1130              		.loc 1 864 0
 1131 0448 0546     		mov	r5, r0
 1132 044a 0C46     		mov	r4, r1
 1133              		.loc 1 874 0
 1134 044c CE60     		str	r6, [r1, #12]
 875:../Source Files/lpc17xx_i2c.c **** 	TransferCfg->rx_count = 0;
 1135              		.loc 1 875 0
 1136 044e 8E61     		str	r6, [r1, #24]
 876:../Source Files/lpc17xx_i2c.c **** 	TransferCfg->status = 0;
 1137              		.loc 1 876 0
 1138 0450 4E62     		str	r6, [r1, #36]
 877:../Source Files/lpc17xx_i2c.c **** 
 878:../Source Files/lpc17xx_i2c.c **** 	if (Opt == I2C_TRANSFER_POLLING)
 1139              		.loc 1 878 0
 1140 0452 1746     		mov	r7, r2
 1141 0454 002A     		cmp	r2, #0
 1142 0456 40F0B680 		bne	.L205
 879:../Source Files/lpc17xx_i2c.c **** 	{
 880:../Source Files/lpc17xx_i2c.c **** 		/* First Start condition -------------------------------------------------------------- */
 881:../Source Files/lpc17xx_i2c.c **** 		TransferCfg->retransmissions_count = 0;
 1143              		.loc 1 881 0
 1144 045a 2262     		str	r2, [r4, #32]
 1145              	.LVL96:
 1146              	.L288:
 882:../Source Files/lpc17xx_i2c.c **** retry:
 883:../Source Files/lpc17xx_i2c.c **** 		// reset all default state
 884:../Source Files/lpc17xx_i2c.c **** 		txdat = (uint8_t *) TransferCfg->tx_data;
 885:../Source Files/lpc17xx_i2c.c **** 		rxdat = (uint8_t *) TransferCfg->rx_data;
 886:../Source Files/lpc17xx_i2c.c **** 		// Reset I2C setup value to default state
 887:../Source Files/lpc17xx_i2c.c **** 		TransferCfg->tx_count = 0;
 1147              		.loc 1 887 0
 1148 045c 0023     		movs	r3, #0
 1149              	.LBB66:
 1150              	.LBB67:
 125:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STA;
 1151              		.loc 1 125 0
 1152 045e 2021     		movs	r1, #32
 126:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1153              		.loc 1 126 0
 1154 0460 0822     		movs	r2, #8
 1155              	.LBE67:
 1156              	.LBE66:
 884:../Source Files/lpc17xx_i2c.c **** 		txdat = (uint8_t *) TransferCfg->tx_data;
 1157              		.loc 1 884 0
 1158 0462 6768     		ldr	r7, [r4, #4]
 1159              	.LVL97:
 885:../Source Files/lpc17xx_i2c.c **** 		rxdat = (uint8_t *) TransferCfg->rx_data;
 1160              		.loc 1 885 0
 1161 0464 2669     		ldr	r6, [r4, #16]
 1162              	.LVL98:
 1163              		.loc 1 887 0
 1164 0466 E360     		str	r3, [r4, #12]
 888:../Source Files/lpc17xx_i2c.c **** 		TransferCfg->rx_count = 0;
 1165              		.loc 1 888 0
 1166 0468 A361     		str	r3, [r4, #24]
 1167              	.LVL99:
 1168              	.LBB69:
 1169              	.LBB68:
 125:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STA;
 1170              		.loc 1 125 0
 1171 046a 2960     		str	r1, [r5, #0]
 126:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1172              		.loc 1 126 0
 1173 046c AA61     		str	r2, [r5, #24]
 1174              	.L207:
 129:../Source Files/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 1175              		.loc 1 129 0
 1176 046e 2868     		ldr	r0, [r5, #0]
 1177 0470 0207     		lsls	r2, r0, #28
 1178 0472 FCD5     		bpl	.L207
 130:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 1179              		.loc 1 130 0
 1180 0474 2023     		movs	r3, #32
 1181 0476 AB61     		str	r3, [r5, #24]
 131:../Source Files/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1182              		.loc 1 131 0
 1183 0478 6968     		ldr	r1, [r5, #4]
 1184 047a 01F0F803 		and	r3, r1, #248
 1185              	.LVL100:
 1186              	.LBE68:
 1187              	.LBE69:
 889:../Source Files/lpc17xx_i2c.c **** 		CodeStatus = 0;
 890:../Source Files/lpc17xx_i2c.c **** 
 891:../Source Files/lpc17xx_i2c.c **** 		// Start command
 892:../Source Files/lpc17xx_i2c.c **** 		CodeStatus = I2C_Start(I2Cx);
 893:../Source Files/lpc17xx_i2c.c **** 		if ((CodeStatus != I2C_I2STAT_M_TX_START) && (CodeStatus != I2C_I2STAT_M_TX_RESTART))
 1188              		.loc 1 893 0
 1189 047e 082B     		cmp	r3, #8
 1190 0480 01D0     		beq	.L208
 1191              		.loc 1 893 0 is_stmt 0 discriminator 1
 1192 0482 102B     		cmp	r3, #16
 1193 0484 35D1     		bne	.L296
 1194              	.L208:
 894:../Source Files/lpc17xx_i2c.c **** 		{
 895:../Source Files/lpc17xx_i2c.c **** 			TransferCfg->retransmissions_count++;
 896:../Source Files/lpc17xx_i2c.c **** 			if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
 897:../Source Files/lpc17xx_i2c.c **** 			{
 898:../Source Files/lpc17xx_i2c.c **** 				// save status
 899:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->status = CodeStatus;
 900:../Source Files/lpc17xx_i2c.c **** 				goto error;
 901:../Source Files/lpc17xx_i2c.c **** 			}
 902:../Source Files/lpc17xx_i2c.c **** 			else
 903:../Source Files/lpc17xx_i2c.c **** 			{
 904:../Source Files/lpc17xx_i2c.c **** 				goto retry;
 905:../Source Files/lpc17xx_i2c.c **** 			}
 906:../Source Files/lpc17xx_i2c.c **** 		}
 907:../Source Files/lpc17xx_i2c.c **** 
 908:../Source Files/lpc17xx_i2c.c **** 		/* In case of sending data first --------------------------------------------------- */
 909:../Source Files/lpc17xx_i2c.c **** 		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL))
 1195              		.loc 1 909 0 is_stmt 1
 1196 0486 A268     		ldr	r2, [r4, #8]
 1197 0488 12B9     		cbnz	r2, .L211
 1198              	.LVL101:
 1199              	.L214:
 910:../Source Files/lpc17xx_i2c.c **** 		{
 911:../Source Files/lpc17xx_i2c.c **** 			/* Send slave address + WR direction bit = 0 ----------------------------------- */
 912:../Source Files/lpc17xx_i2c.c **** 			CodeStatus = I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
 913:../Source Files/lpc17xx_i2c.c **** 			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK)
 914:../Source Files/lpc17xx_i2c.c **** 			{
 915:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 916:../Source Files/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
 917:../Source Files/lpc17xx_i2c.c **** 				{
 918:../Source Files/lpc17xx_i2c.c **** 					// save status
 919:../Source Files/lpc17xx_i2c.c **** 					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
 920:../Source Files/lpc17xx_i2c.c **** 					goto error;
 921:../Source Files/lpc17xx_i2c.c **** 				}
 922:../Source Files/lpc17xx_i2c.c **** 				else
 923:../Source Files/lpc17xx_i2c.c **** 				{
 924:../Source Files/lpc17xx_i2c.c **** 					goto retry;
 925:../Source Files/lpc17xx_i2c.c **** 				}
 926:../Source Files/lpc17xx_i2c.c **** 			}
 927:../Source Files/lpc17xx_i2c.c **** 
 928:../Source Files/lpc17xx_i2c.c **** 			/* Send a number of data bytes ---------------------------------------- */
 929:../Source Files/lpc17xx_i2c.c **** 			while (TransferCfg->tx_count < TransferCfg->tx_length)
 930:../Source Files/lpc17xx_i2c.c **** 			{
 931:../Source Files/lpc17xx_i2c.c **** 				CodeStatus = I2C_SendByte(I2Cx, *txdat);
 932:../Source Files/lpc17xx_i2c.c **** 				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK)
 933:../Source Files/lpc17xx_i2c.c **** 				{
 934:../Source Files/lpc17xx_i2c.c **** 					TransferCfg->retransmissions_count++;
 935:../Source Files/lpc17xx_i2c.c **** 					if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
 936:../Source Files/lpc17xx_i2c.c **** 					{
 937:../Source Files/lpc17xx_i2c.c **** 						// save status
 938:../Source Files/lpc17xx_i2c.c **** 						TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
 939:../Source Files/lpc17xx_i2c.c **** 						goto error;
 940:../Source Files/lpc17xx_i2c.c **** 					}
 941:../Source Files/lpc17xx_i2c.c **** 					else
 942:../Source Files/lpc17xx_i2c.c **** 					{
 943:../Source Files/lpc17xx_i2c.c **** 						goto retry;
 944:../Source Files/lpc17xx_i2c.c **** 					}
 945:../Source Files/lpc17xx_i2c.c **** 				}
 946:../Source Files/lpc17xx_i2c.c **** 
 947:../Source Files/lpc17xx_i2c.c **** 				txdat++;
 948:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->tx_count++;
 949:../Source Files/lpc17xx_i2c.c **** 			}
 950:../Source Files/lpc17xx_i2c.c **** 		}
 951:../Source Files/lpc17xx_i2c.c **** 
 952:../Source Files/lpc17xx_i2c.c **** 		/* Second Start condition (Repeat Start) ------------------------------------------- */
 953:../Source Files/lpc17xx_i2c.c **** 		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
 1200              		.loc 1 953 0
 1201 048a A068     		ldr	r0, [r4, #8]
 1202 048c D8B9     		cbnz	r0, .L212
 1203 048e 38E0     		b	.L213
 1204              	.LVL102:
 1205              	.L211:
 909:../Source Files/lpc17xx_i2c.c **** 		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL))
 1206              		.loc 1 909 0 discriminator 1
 1207 0490 002F     		cmp	r7, #0
 1208 0492 FAD0     		beq	.L214
 912:../Source Files/lpc17xx_i2c.c **** 			CodeStatus = I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
 1209              		.loc 1 912 0
 1210 0494 2068     		ldr	r0, [r4, #0]
 1211 0496 4300     		lsls	r3, r0, #1
 1212 0498 03F0FE01 		and	r1, r3, #254
 1213 049c 2846     		mov	r0, r5
 1214 049e FFF7C5FD 		bl	I2C_SendByte
 1215              	.LVL103:
 913:../Source Files/lpc17xx_i2c.c **** 			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK)
 1216              		.loc 1 913 0
 1217 04a2 1828     		cmp	r0, #24
 1218 04a4 42D1     		bne	.L298
 862:../Source Files/lpc17xx_i2c.c **** Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
 1219              		.loc 1 862 0
 1220 04a6 013F     		subs	r7, r7, #1
 1221              	.LVL104:
 1222              	.L216:
 929:../Source Files/lpc17xx_i2c.c **** 			while (TransferCfg->tx_count < TransferCfg->tx_length)
 1223              		.loc 1 929 0 discriminator 1
 1224 04a8 E168     		ldr	r1, [r4, #12]
 1225 04aa A268     		ldr	r2, [r4, #8]
 1226 04ac 9142     		cmp	r1, r2
 1227 04ae ECD2     		bcs	.L214
 1228              	.L218:
 931:../Source Files/lpc17xx_i2c.c **** 				CodeStatus = I2C_SendByte(I2Cx, *txdat);
 1229              		.loc 1 931 0
 1230 04b0 2846     		mov	r0, r5
 1231 04b2 17F8011F 		ldrb	r1, [r7, #1]!	@ zero_extendqisi2
 1232 04b6 FFF7B9FD 		bl	I2C_SendByte
 1233              	.LVL105:
 932:../Source Files/lpc17xx_i2c.c **** 				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK)
 1234              		.loc 1 932 0
 1235 04ba 2828     		cmp	r0, #40
 1236 04bc 36D1     		bne	.L298
 1237              	.L217:
 948:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->tx_count++;
 1238              		.loc 1 948 0
 1239 04be E068     		ldr	r0, [r4, #12]
 1240              	.LVL106:
 1241 04c0 411C     		adds	r1, r0, #1
 1242 04c2 E160     		str	r1, [r4, #12]
 1243 04c4 F0E7     		b	.L216
 1244              	.L212:
 1245              		.loc 1 953 0 discriminator 1
 1246 04c6 6368     		ldr	r3, [r4, #4]
 1247 04c8 DBB1     		cbz	r3, .L213
 954:../Source Files/lpc17xx_i2c.c **** 				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
 1248              		.loc 1 954 0
 1249 04ca 6169     		ldr	r1, [r4, #20]
 1250 04cc C9B1     		cbz	r1, .L213
 1251              		.loc 1 954 0 is_stmt 0 discriminator 1
 1252 04ce 2269     		ldr	r2, [r4, #16]
 1253 04d0 BAB1     		cbz	r2, .L213
 1254              	.LVL107:
 1255              	.LBB70:
 1256              	.LBB71:
 125:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STA;
 1257              		.loc 1 125 0 is_stmt 1
 1258 04d2 2020     		movs	r0, #32
 126:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1259              		.loc 1 126 0
 1260 04d4 0823     		movs	r3, #8
 125:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STA;
 1261              		.loc 1 125 0
 1262 04d6 2860     		str	r0, [r5, #0]
 126:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1263              		.loc 1 126 0
 1264 04d8 AB61     		str	r3, [r5, #24]
 1265              	.L219:
 129:../Source Files/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 1266              		.loc 1 129 0
 1267 04da 2968     		ldr	r1, [r5, #0]
 1268 04dc 0B07     		lsls	r3, r1, #28
 1269 04de FCD5     		bpl	.L219
 130:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 1270              		.loc 1 130 0
 1271 04e0 2022     		movs	r2, #32
 1272 04e2 AA61     		str	r2, [r5, #24]
 131:../Source Files/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1273              		.loc 1 131 0
 1274 04e4 6868     		ldr	r0, [r5, #4]
 1275 04e6 00F0F803 		and	r3, r0, #248
 1276              	.LBE71:
 1277              	.LBE70:
 955:../Source Files/lpc17xx_i2c.c **** 		{
 956:../Source Files/lpc17xx_i2c.c **** 			CodeStatus = I2C_Start(I2Cx);
 957:../Source Files/lpc17xx_i2c.c **** 			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
 1278              		.loc 1 957 0
 1279 04ea 082B     		cmp	r3, #8
 1280 04ec 09D0     		beq	.L213
 1281              		.loc 1 957 0 is_stmt 0 discriminator 1
 1282 04ee 102B     		cmp	r3, #16
 1283 04f0 07D0     		beq	.L213
 1284              	.LVL108:
 1285              	.L296:
 958:../Source Files/lpc17xx_i2c.c **** 			{
 959:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1286              		.loc 1 959 0 is_stmt 1
 1287 04f2 226A     		ldr	r2, [r4, #32]
 960:../Source Files/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
 1288              		.loc 1 960 0
 1289 04f4 E169     		ldr	r1, [r4, #28]
 959:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1290              		.loc 1 959 0
 1291 04f6 501C     		adds	r0, r2, #1
 1292              		.loc 1 960 0
 1293 04f8 8842     		cmp	r0, r1
 959:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1294              		.loc 1 959 0
 1295 04fa 2062     		str	r0, [r4, #32]
 1296              		.loc 1 960 0
 1297 04fc AED9     		bls	.L288
 961:../Source Files/lpc17xx_i2c.c **** 				{
 962:../Source Files/lpc17xx_i2c.c **** 					// Update status
 963:../Source Files/lpc17xx_i2c.c **** 					TransferCfg->status = CodeStatus;
 1298              		.loc 1 963 0
 1299 04fe 6362     		str	r3, [r4, #36]
 964:../Source Files/lpc17xx_i2c.c **** 					goto error;
 1300              		.loc 1 964 0
 1301 0500 56E0     		b	.L210
 1302              	.L213:
 965:../Source Files/lpc17xx_i2c.c **** 				}
 966:../Source Files/lpc17xx_i2c.c **** 				else
 967:../Source Files/lpc17xx_i2c.c **** 				{
 968:../Source Files/lpc17xx_i2c.c **** 					goto retry;
 969:../Source Files/lpc17xx_i2c.c **** 				}
 970:../Source Files/lpc17xx_i2c.c **** 			}
 971:../Source Files/lpc17xx_i2c.c **** 		}
 972:../Source Files/lpc17xx_i2c.c **** 
 973:../Source Files/lpc17xx_i2c.c **** 		/* Then, start reading after sending data -------------------------------------- */
 974:../Source Files/lpc17xx_i2c.c **** 		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
 1303              		.loc 1 974 0
 1304 0502 6169     		ldr	r1, [r4, #20]
 1305 0504 29B9     		cbnz	r1, .L220
 1306              	.L223:
 1307              	.LVL109:
 1308              	.LBB72:
 1309              	.LBB73:
 145:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
 1310              		.loc 1 145 0
 1311 0506 2B68     		ldr	r3, [r5, #0]
 1312 0508 9806     		lsls	r0, r3, #26
 1313 050a 4BD5     		bpl	.L222
 1314              	.L221:
 147:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 1315              		.loc 1 147 0
 1316 050c 2021     		movs	r1, #32
 1317 050e A961     		str	r1, [r5, #24]
 1318 0510 48E0     		b	.L222
 1319              	.LVL110:
 1320              	.L220:
 1321              	.LBE73:
 1322              	.LBE72:
 1323              		.loc 1 974 0 discriminator 1
 1324 0512 2269     		ldr	r2, [r4, #16]
 1325 0514 002A     		cmp	r2, #0
 1326 0516 F6D0     		beq	.L223
 975:../Source Files/lpc17xx_i2c.c **** 		{
 976:../Source Files/lpc17xx_i2c.c **** 			/* Send slave address + RD direction bit = 1 ----------------------------------- */
 977:../Source Files/lpc17xx_i2c.c **** 
 978:../Source Files/lpc17xx_i2c.c **** 			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
 1327              		.loc 1 978 0
 1328 0518 2068     		ldr	r0, [r4, #0]
 1329 051a 4300     		lsls	r3, r0, #1
 1330 051c 43F00101 		orr	r1, r3, #1
 1331 0520 2846     		mov	r0, r5
 1332 0522 C9B2     		uxtb	r1, r1
 1333 0524 FFF782FD 		bl	I2C_SendByte
 1334              	.LVL111:
 979:../Source Files/lpc17xx_i2c.c **** 			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
 1335              		.loc 1 979 0
 1336 0528 4028     		cmp	r0, #64
 1337 052a 21D0     		beq	.L289
 1338              	.L298:
 980:../Source Files/lpc17xx_i2c.c **** 			{
 981:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1339              		.loc 1 981 0
 1340 052c 226A     		ldr	r2, [r4, #32]
 982:../Source Files/lpc17xx_i2c.c **** 				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
 1341              		.loc 1 982 0
 1342 052e E169     		ldr	r1, [r4, #28]
 981:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1343              		.loc 1 981 0
 1344 0530 531C     		adds	r3, r2, #1
 1345              		.loc 1 982 0
 1346 0532 8B42     		cmp	r3, r1
 981:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->retransmissions_count++;
 1347              		.loc 1 981 0
 1348 0534 2362     		str	r3, [r4, #32]
 1349              		.loc 1 982 0
 1350 0536 91D9     		bls	.L288
 983:../Source Files/lpc17xx_i2c.c **** 				{
 984:../Source Files/lpc17xx_i2c.c **** 					// update status
 985:../Source Files/lpc17xx_i2c.c **** 					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
 1351              		.loc 1 985 0
 1352 0538 40F40070 		orr	r0, r0, #512
 1353              	.LVL112:
 1354 053c 6062     		str	r0, [r4, #36]
 986:../Source Files/lpc17xx_i2c.c **** 					goto error;
 1355              		.loc 1 986 0
 1356 053e 37E0     		b	.L210
 1357              	.L230:
 987:../Source Files/lpc17xx_i2c.c **** 				}
 988:../Source Files/lpc17xx_i2c.c **** 				else
 989:../Source Files/lpc17xx_i2c.c **** 				{
 990:../Source Files/lpc17xx_i2c.c **** 					goto retry;
 991:../Source Files/lpc17xx_i2c.c **** 				}
 992:../Source Files/lpc17xx_i2c.c **** 			}
 993:../Source Files/lpc17xx_i2c.c **** 
 994:../Source Files/lpc17xx_i2c.c **** 			/* Receive a number of data bytes ------------------------------------------------- */
 995:../Source Files/lpc17xx_i2c.c **** 			while (TransferCfg->rx_count < TransferCfg->rx_length)
 996:../Source Files/lpc17xx_i2c.c **** 			{
 997:../Source Files/lpc17xx_i2c.c **** 				/*
 998:../Source Files/lpc17xx_i2c.c **** 				 * Note that: if data length is only one, the master should not
 999:../Source Files/lpc17xx_i2c.c **** 				 * issue an ACK signal on bus after reading to avoid of next data frame
1000:../Source Files/lpc17xx_i2c.c **** 				 * on slave side
1001:../Source Files/lpc17xx_i2c.c **** 				 */
1002:../Source Files/lpc17xx_i2c.c **** 				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1))
 1358              		.loc 1 1002 0
 1359 0540 431E     		subs	r3, r0, #1
 1360 0542 9A42     		cmp	r2, r3
 1361 0544 4FF00801 		mov	r1, #8
 1362 0548 4FF00402 		mov	r2, #4
 1363 054c 15D2     		bcs	.L226
 1364              	.LVL113:
 1365              	.LBB75:
 1366              	.LBB76:
 190:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1367              		.loc 1 190 0
 1368 054e 2A60     		str	r2, [r5, #0]
 196:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1369              		.loc 1 196 0
 1370 0550 A961     		str	r1, [r5, #24]
 1371              	.L227:
 198:../Source Files/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 1372              		.loc 1 198 0
 1373 0552 2B68     		ldr	r3, [r5, #0]
 1374 0554 1907     		lsls	r1, r3, #28
 1375 0556 FCD5     		bpl	.L227
 199:../Source Files/lpc17xx_i2c.c **** 	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 1376              		.loc 1 199 0
 1377 0558 A968     		ldr	r1, [r5, #8]
 200:../Source Files/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1378              		.loc 1 200 0
 1379 055a 6A68     		ldr	r2, [r5, #4]
 199:../Source Files/lpc17xx_i2c.c **** 	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 1380              		.loc 1 199 0
 1381 055c C9B2     		uxtb	r1, r1
 1382              	.LVL114:
 200:../Source Files/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1383              		.loc 1 200 0
 1384 055e 02F0F800 		and	r0, r2, #248
 1385              	.LBE76:
 1386              	.LBE75:
1003:../Source Files/lpc17xx_i2c.c **** 				{
1004:../Source Files/lpc17xx_i2c.c **** 					// Issue an ACK signal for next data frame
1005:../Source Files/lpc17xx_i2c.c **** 					CodeStatus = I2C_GetByte(I2Cx, &tmp, 1);
1006:../Source Files/lpc17xx_i2c.c **** 					if (CodeStatus != I2C_I2STAT_M_RX_DAT_ACK)
 1387              		.loc 1 1006 0
 1388 0562 5028     		cmp	r0, #80
 1389              	.LVL115:
 1390              	.L303:
1007:../Source Files/lpc17xx_i2c.c **** 					{
1008:../Source Files/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
1009:../Source Files/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
1010:../Source Files/lpc17xx_i2c.c **** 						{
1011:../Source Files/lpc17xx_i2c.c **** 							// update status
1012:../Source Files/lpc17xx_i2c.c **** 							TransferCfg->status = CodeStatus;
1013:../Source Files/lpc17xx_i2c.c **** 							goto error;
1014:../Source Files/lpc17xx_i2c.c **** 						}
1015:../Source Files/lpc17xx_i2c.c **** 						else
1016:../Source Files/lpc17xx_i2c.c **** 						{
1017:../Source Files/lpc17xx_i2c.c **** 							goto retry;
1018:../Source Files/lpc17xx_i2c.c **** 						}
1019:../Source Files/lpc17xx_i2c.c **** 					}
1020:../Source Files/lpc17xx_i2c.c **** 				}
1021:../Source Files/lpc17xx_i2c.c **** 				else
1022:../Source Files/lpc17xx_i2c.c **** 				{
1023:../Source Files/lpc17xx_i2c.c **** 					// Do not issue an ACK signal
1024:../Source Files/lpc17xx_i2c.c **** 					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
1025:../Source Files/lpc17xx_i2c.c **** 					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
 1391              		.loc 1 1025 0
 1392 0564 15D1     		bne	.L304
 1393              	.L228:
 1394              	.LVL116:
1026:../Source Files/lpc17xx_i2c.c **** 					{
1027:../Source Files/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
1028:../Source Files/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
1029:../Source Files/lpc17xx_i2c.c **** 						{
1030:../Source Files/lpc17xx_i2c.c **** 							// update status
1031:../Source Files/lpc17xx_i2c.c **** 							TransferCfg->status = CodeStatus;
1032:../Source Files/lpc17xx_i2c.c **** 							goto error;
1033:../Source Files/lpc17xx_i2c.c **** 						}
1034:../Source Files/lpc17xx_i2c.c **** 						else
1035:../Source Files/lpc17xx_i2c.c **** 						{
1036:../Source Files/lpc17xx_i2c.c **** 							goto retry;
1037:../Source Files/lpc17xx_i2c.c **** 						}
1038:../Source Files/lpc17xx_i2c.c **** 					}
1039:../Source Files/lpc17xx_i2c.c **** 				}
1040:../Source Files/lpc17xx_i2c.c **** 				*rxdat++ = tmp;
 1395              		.loc 1 1040 0
 1396 0566 06F8011B 		strb	r1, [r6], #1
 1397              	.LVL117:
1041:../Source Files/lpc17xx_i2c.c **** 				TransferCfg->rx_count++;
 1398              		.loc 1 1041 0
 1399 056a A069     		ldr	r0, [r4, #24]
 1400 056c 431C     		adds	r3, r0, #1
 1401 056e A361     		str	r3, [r4, #24]
 1402              	.LVL118:
 1403              	.L289:
 995:../Source Files/lpc17xx_i2c.c **** 			while (TransferCfg->rx_count < TransferCfg->rx_length)
 1404              		.loc 1 995 0 discriminator 1
 1405 0570 A269     		ldr	r2, [r4, #24]
 1406 0572 6069     		ldr	r0, [r4, #20]
 1407 0574 8242     		cmp	r2, r0
 1408 0576 E3D3     		bcc	.L230
 1409 0578 C5E7     		b	.L223
 1410              	.L226:
 1411              	.LVL119:
 1412              	.LBB77:
 1413              	.LBB78:
 194:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
 1414              		.loc 1 194 0
 1415 057a AA61     		str	r2, [r5, #24]
 196:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1416              		.loc 1 196 0
 1417 057c A961     		str	r1, [r5, #24]
 1418              	.L229:
 198:../Source Files/lpc17xx_i2c.c **** 	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
 1419              		.loc 1 198 0
 1420 057e 2868     		ldr	r0, [r5, #0]
 1421 0580 0207     		lsls	r2, r0, #28
 1422 0582 FCD5     		bpl	.L229
 199:../Source Files/lpc17xx_i2c.c **** 	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 1423              		.loc 1 199 0
 1424 0584 AB68     		ldr	r3, [r5, #8]
 200:../Source Files/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1425              		.loc 1 200 0
 1426 0586 6A68     		ldr	r2, [r5, #4]
 199:../Source Files/lpc17xx_i2c.c **** 	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
 1427              		.loc 1 199 0
 1428 0588 D9B2     		uxtb	r1, r3
 1429              	.LVL120:
 200:../Source Files/lpc17xx_i2c.c **** 	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
 1430              		.loc 1 200 0
 1431 058a 02F0F800 		and	r0, r2, #248
 1432              	.LBE78:
 1433              	.LBE77:
1025:../Source Files/lpc17xx_i2c.c **** 					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
 1434              		.loc 1 1025 0
 1435 058e 5828     		cmp	r0, #88
 1436 0590 E8E7     		b	.L303
 1437              	.LVL121:
 1438              	.L304:
1027:../Source Files/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 1439              		.loc 1 1027 0
 1440 0592 216A     		ldr	r1, [r4, #32]
1028:../Source Files/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
 1441              		.loc 1 1028 0
 1442 0594 E369     		ldr	r3, [r4, #28]
1027:../Source Files/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 1443              		.loc 1 1027 0
 1444 0596 4A1C     		adds	r2, r1, #1
1028:../Source Files/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
 1445              		.loc 1 1028 0
 1446 0598 9A42     		cmp	r2, r3
1027:../Source Files/lpc17xx_i2c.c **** 						TransferCfg->retransmissions_count++;
 1447              		.loc 1 1027 0
 1448 059a 2262     		str	r2, [r4, #32]
1028:../Source Files/lpc17xx_i2c.c **** 						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
 1449              		.loc 1 1028 0
 1450 059c 7FF65EAF 		bls	.L288
1031:../Source Files/lpc17xx_i2c.c **** 							TransferCfg->status = CodeStatus;
 1451              		.loc 1 1031 0
 1452 05a0 6062     		str	r0, [r4, #36]
1032:../Source Files/lpc17xx_i2c.c **** 							goto error;
 1453              		.loc 1 1032 0
 1454 05a2 05E0     		b	.L210
 1455              	.LVL122:
 1456              	.L222:
 1457              	.LBB79:
 1458              	.LBB74:
 149:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STO;
 1459              		.loc 1 149 0
 1460 05a4 1022     		movs	r2, #16
 150:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1461              		.loc 1 150 0
 1462 05a6 0820     		movs	r0, #8
 149:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STO;
 1463              		.loc 1 149 0
 1464 05a8 2A60     		str	r2, [r5, #0]
 150:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1465              		.loc 1 150 0
 1466 05aa A861     		str	r0, [r5, #24]
 1467              	.LVL123:
 1468              	.L294:
1042:../Source Files/lpc17xx_i2c.c **** 			}
1043:../Source Files/lpc17xx_i2c.c **** 		}
1044:../Source Files/lpc17xx_i2c.c **** 
1045:../Source Files/lpc17xx_i2c.c **** 		/* Send STOP condition ------------------------------------------------- */
1046:../Source Files/lpc17xx_i2c.c **** 		I2C_Stop(I2Cx);
1047:../Source Files/lpc17xx_i2c.c **** 		return SUCCESS;
 1469              		.loc 1 1047 0
 1470 05ac 0120     		movs	r0, #1
 1471 05ae F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1472              	.LVL124:
 1473              	.L210:
 1474              	.LBE74:
 1475              	.LBE79:
 1476              	.LBB80:
 1477              	.LBB81:
 145:../Source Files/lpc17xx_i2c.c **** 	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
 1478              		.loc 1 145 0
 1479 05b0 2B68     		ldr	r3, [r5, #0]
 1480 05b2 9B06     		lsls	r3, r3, #26
 1481 05b4 01D5     		bpl	.L232
 147:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
 1482              		.loc 1 147 0
 1483 05b6 2022     		movs	r2, #32
 1484 05b8 AA61     		str	r2, [r5, #24]
 1485              	.L232:
 149:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STO;
 1486              		.loc 1 149 0
 1487 05ba 1020     		movs	r0, #16
 150:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1488              		.loc 1 150 0
 1489 05bc 0821     		movs	r1, #8
 149:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONSET = I2C_I2CONSET_STO;
 1490              		.loc 1 149 0
 1491 05be 2860     		str	r0, [r5, #0]
 150:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1492              		.loc 1 150 0
 1493 05c0 A961     		str	r1, [r5, #24]
 1494              	.LVL125:
 1495              	.L293:
1048:../Source Files/lpc17xx_i2c.c **** 
1049:../Source Files/lpc17xx_i2c.c **** error:
1050:../Source Files/lpc17xx_i2c.c **** 		// Send stop condition
1051:../Source Files/lpc17xx_i2c.c **** 		I2C_Stop(I2Cx);
1052:../Source Files/lpc17xx_i2c.c **** 		return ERROR;
 1496              		.loc 1 1052 0
 1497 05c2 0020     		movs	r0, #0
 1498 05c4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1499              	.LVL126:
 1500              	.L205:
 1501              	.LBE81:
 1502              	.LBE80:
1053:../Source Files/lpc17xx_i2c.c **** 	}
1054:../Source Files/lpc17xx_i2c.c **** 
1055:../Source Files/lpc17xx_i2c.c **** 	else if (Opt == I2C_TRANSFER_INTERRUPT)
 1503              		.loc 1 1055 0
 1504 05c6 012A     		cmp	r2, #1
 1505 05c8 FBD1     		bne	.L293
1056:../Source Files/lpc17xx_i2c.c **** 	{
1057:../Source Files/lpc17xx_i2c.c **** 		// Setup tx_rx data, callback and interrupt handler
1058:../Source Files/lpc17xx_i2c.c **** 		tmp = I2C_getNum(I2Cx);
 1506              		.loc 1 1058 0
 1507 05ca FFF719FD 		bl	I2C_getNum
 1508              	.LVL127:
1059:../Source Files/lpc17xx_i2c.c **** 		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
 1509              		.loc 1 1059 0
 1510 05ce 084B     		ldr	r3, .L305
 1511 05d0 C0B2     		uxtb	r0, r0
1060:../Source Files/lpc17xx_i2c.c **** 		// Set direction phase, write first
1061:../Source Files/lpc17xx_i2c.c **** 		i2cdat[tmp].dir = 0;
 1512              		.loc 1 1061 0
 1513 05d2 03EBC001 		add	r1, r3, r0, lsl #3
1059:../Source Files/lpc17xx_i2c.c **** 		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
 1514              		.loc 1 1059 0
 1515 05d6 43F83040 		str	r4, [r3, r0, lsl #3]
1062:../Source Files/lpc17xx_i2c.c **** 
1063:../Source Files/lpc17xx_i2c.c **** 		/* First Start condition -------------------------------------------------------------- */
1064:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1516              		.loc 1 1064 0
 1517 05da 0822     		movs	r2, #8
1065:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_STA;
 1518              		.loc 1 1065 0
 1519 05dc 2020     		movs	r0, #32
 1520              	.LVL128:
1061:../Source Files/lpc17xx_i2c.c **** 		i2cdat[tmp].dir = 0;
 1521              		.loc 1 1061 0
 1522 05de 4E60     		str	r6, [r1, #4]
1064:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1523              		.loc 1 1064 0
 1524 05e0 AA61     		str	r2, [r5, #24]
1066:../Source Files/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, 1);
 1525              		.loc 1 1066 0
 1526 05e2 3946     		mov	r1, r7
1065:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_STA;
 1527              		.loc 1 1065 0
 1528 05e4 2860     		str	r0, [r5, #0]
 1529              		.loc 1 1066 0
 1530 05e6 2846     		mov	r0, r5
 1531 05e8 FFF7FEFF 		bl	I2C_IntCmd
 1532              	.LVL129:
 1533 05ec DEE7     		b	.L294
 1534              	.L306:
 1535 05ee 00BF     		.align	2
 1536              	.L305:
 1537 05f0 00000000 		.word	.LANCHOR0
 1538              		.cfi_endproc
 1539              	.LFE69:
 1541              		.align	1
 1542              		.global	I2C_SlaveTransferData
 1543              		.thumb
 1544              		.thumb_func
 1546              	I2C_SlaveTransferData:
 1547              	.LFB70:
1067:../Source Files/lpc17xx_i2c.c **** 
1068:../Source Files/lpc17xx_i2c.c **** 		return (SUCCESS);
1069:../Source Files/lpc17xx_i2c.c **** 	}
1070:../Source Files/lpc17xx_i2c.c **** 
1071:../Source Files/lpc17xx_i2c.c **** 	return ERROR;
1072:../Source Files/lpc17xx_i2c.c **** }
1073:../Source Files/lpc17xx_i2c.c **** 
1074:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
1075:../Source Files/lpc17xx_i2c.c ****  * @brief 		Receive and Transmit data in slave mode
1076:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx			I2C peripheral selected, should be
1077:../Source Files/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1078:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1079:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1080:../Source Files/lpc17xx_i2c.c ****  * @param[in]	TransferCfg		Pointer to a I2C_S_SETUP_Type structure that
1081:../Source Files/lpc17xx_i2c.c ****  * 								contains specified information about the
1082:../Source Files/lpc17xx_i2c.c ****  * 								configuration for master transfer.
1083:../Source Files/lpc17xx_i2c.c ****  * @param[in]	Opt				I2C_TRANSFER_OPT_Type type that selected for
1084:../Source Files/lpc17xx_i2c.c ****  * 								interrupt or polling mode.
1085:../Source Files/lpc17xx_i2c.c ****  * @return 		SUCCESS or ERROR
1086:../Source Files/lpc17xx_i2c.c ****  *
1087:../Source Files/lpc17xx_i2c.c ****  * Note:
1088:../Source Files/lpc17xx_i2c.c ****  * The mode of slave's operation depends on the command sent from master on
1089:../Source Files/lpc17xx_i2c.c ****  * the I2C bus. If the master send a SLA+W command, this sub-routine will
1090:../Source Files/lpc17xx_i2c.c ****  * use receive data length and receive data pointer. If the master send a SLA+R
1091:../Source Files/lpc17xx_i2c.c ****  * command, this sub-routine will use transmit data length and transmit data
1092:../Source Files/lpc17xx_i2c.c ****  * pointer.
1093:../Source Files/lpc17xx_i2c.c ****  * If the master issue an repeat start command or a stop command, the slave will
1094:../Source Files/lpc17xx_i2c.c ****  * enable an time out condition, during time out condition, if there's no activity
1095:../Source Files/lpc17xx_i2c.c ****  * on I2C bus, the slave will exit, otherwise (i.e. the master send a SLA+R/W),
1096:../Source Files/lpc17xx_i2c.c ****  * the slave then switch to relevant operation mode. The time out should be used
1097:../Source Files/lpc17xx_i2c.c ****  * because the return status code can not show difference from stop and repeat
1098:../Source Files/lpc17xx_i2c.c ****  * start command in slave operation.
1099:../Source Files/lpc17xx_i2c.c ****  * In case of the expected data length from master is greater than data length
1100:../Source Files/lpc17xx_i2c.c ****  * that slave can support:
1101:../Source Files/lpc17xx_i2c.c ****  * - In case of reading operation (from master): slave will return I2C_I2DAT_IDLE_CHAR
1102:../Source Files/lpc17xx_i2c.c ****  * value.
1103:../Source Files/lpc17xx_i2c.c ****  * - In case of writing operation (from master): slave will ignore remain data from master.
1104:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
1105:../Source Files/lpc17xx_i2c.c **** Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
1106:../Source Files/lpc17xx_i2c.c **** 								I2C_TRANSFER_OPT_Type Opt)
1107:../Source Files/lpc17xx_i2c.c **** {
 1548              		.loc 1 1107 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552              	.LVL130:
 1553 05f4 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1554              	.LCFI5:
 1555              		.cfi_def_cfa_offset 24
 1556              		.cfi_offset 3, -24
 1557              		.cfi_offset 4, -20
 1558              		.cfi_offset 5, -16
 1559              		.cfi_offset 6, -12
 1560              		.cfi_offset 7, -8
 1561              		.cfi_offset 14, -4
1108:../Source Files/lpc17xx_i2c.c **** 	uint8_t *txdat;
1109:../Source Files/lpc17xx_i2c.c **** 	uint8_t *rxdat;
1110:../Source Files/lpc17xx_i2c.c **** 	uint32_t CodeStatus;
1111:../Source Files/lpc17xx_i2c.c **** 	uint32_t timeout;
1112:../Source Files/lpc17xx_i2c.c **** 	int32_t time_en;
1113:../Source Files/lpc17xx_i2c.c **** 	int32_t tmp;
1114:../Source Files/lpc17xx_i2c.c **** 
1115:../Source Files/lpc17xx_i2c.c **** 	// reset all default state
1116:../Source Files/lpc17xx_i2c.c **** 	txdat = (uint8_t *) TransferCfg->tx_data;
1117:../Source Files/lpc17xx_i2c.c **** 	rxdat = (uint8_t *) TransferCfg->rx_data;
 1562              		.loc 1 1117 0
 1563 05f6 D1F80CC0 		ldr	ip, [r1, #12]
1107:../Source Files/lpc17xx_i2c.c **** {
 1564              		.loc 1 1107 0
 1565 05fa 0D46     		mov	r5, r1
1116:../Source Files/lpc17xx_i2c.c **** 	txdat = (uint8_t *) TransferCfg->tx_data;
 1566              		.loc 1 1116 0
 1567 05fc 0F68     		ldr	r7, [r1, #0]
 1568              	.LVL131:
1118:../Source Files/lpc17xx_i2c.c **** 	// Reset I2C setup value to default state
1119:../Source Files/lpc17xx_i2c.c **** 	TransferCfg->tx_count = 0;
 1569              		.loc 1 1119 0
 1570 05fe 0021     		movs	r1, #0
 1571              	.LVL132:
1107:../Source Files/lpc17xx_i2c.c **** {
 1572              		.loc 1 1107 0
 1573 0600 0446     		mov	r4, r0
 1574              		.loc 1 1119 0
 1575 0602 A960     		str	r1, [r5, #8]
1120:../Source Files/lpc17xx_i2c.c **** 	TransferCfg->rx_count = 0;
 1576              		.loc 1 1120 0
 1577 0604 6961     		str	r1, [r5, #20]
1121:../Source Files/lpc17xx_i2c.c **** 	TransferCfg->status = 0;
 1578              		.loc 1 1121 0
 1579 0606 A961     		str	r1, [r5, #24]
1122:../Source Files/lpc17xx_i2c.c **** 
1123:../Source Files/lpc17xx_i2c.c **** 
1124:../Source Files/lpc17xx_i2c.c **** 	// Polling option
1125:../Source Files/lpc17xx_i2c.c **** 	if (Opt == I2C_TRANSFER_POLLING)
 1580              		.loc 1 1125 0
 1581 0608 1646     		mov	r6, r2
 1582 060a 002A     		cmp	r2, #0
 1583 060c 65D1     		bne	.L308
1126:../Source Files/lpc17xx_i2c.c **** 	{
1127:../Source Files/lpc17xx_i2c.c **** 		/* Set AA bit to ACK command on I2C bus */
1128:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
1129:../Source Files/lpc17xx_i2c.c **** 		/* Clear SI bit to be ready ... */
1130:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
 1584              		.loc 1 1130 0
 1585 060e 2822     		movs	r2, #40
 1586              	.LVL133:
1128:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1587              		.loc 1 1128 0
 1588 0610 0420     		movs	r0, #4
 1589              	.LVL134:
 1590 0612 2060     		str	r0, [r4, #0]
1131:../Source Files/lpc17xx_i2c.c **** 
1132:../Source Files/lpc17xx_i2c.c **** 		time_en = 0;
1133:../Source Files/lpc17xx_i2c.c **** 		timeout = 0;
 1591              		.loc 1 1133 0
 1592 0614 3146     		mov	r1, r6
1130:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
 1593              		.loc 1 1130 0
 1594 0616 A261     		str	r2, [r4, #24]
 1595              	.LVL135:
1132:../Source Files/lpc17xx_i2c.c **** 		time_en = 0;
 1596              		.loc 1 1132 0
 1597 0618 3246     		mov	r2, r6
 1598              	.LVL136:
 1599              	.L364:
1134:../Source Files/lpc17xx_i2c.c **** 
1135:../Source Files/lpc17xx_i2c.c **** 		while (1)
1136:../Source Files/lpc17xx_i2c.c **** 		{
1137:../Source Files/lpc17xx_i2c.c **** 			/* Check SI flag ready */
1138:../Source Files/lpc17xx_i2c.c **** 			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
 1600              		.loc 1 1138 0
 1601 061a 2068     		ldr	r0, [r4, #0]
 1602 061c 0007     		lsls	r0, r0, #28
 1603 061e 4CD5     		bpl	.L310
 1604              	.LVL137:
1139:../Source Files/lpc17xx_i2c.c **** 			{
1140:../Source Files/lpc17xx_i2c.c **** 				time_en = 0;
1141:../Source Files/lpc17xx_i2c.c **** 
1142:../Source Files/lpc17xx_i2c.c **** 				switch (CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK))
 1605              		.loc 1 1142 0
 1606 0620 6068     		ldr	r0, [r4, #4]
 1607 0622 00F0F803 		and	r3, r0, #248
 1608              	.LVL138:
 1609 0626 982B     		cmp	r3, #152
 1610 0628 36D0     		beq	.L367
 1611 062a 0CD8     		bhi	.L319
 1612 062c 802B     		cmp	r3, #128
 1613 062e 19D0     		beq	.L313
 1614 0630 04D8     		bhi	.L320
 1615 0632 602B     		cmp	r3, #96
 1616 0634 2ED0     		beq	.L324
 1617 0636 702B     		cmp	r3, #112
 1618 0638 38D1     		bne	.L311
 1619 063a 2BE0     		b	.L324
 1620              	.L320:
 1621 063c 882B     		cmp	r3, #136
 1622 063e 2BD0     		beq	.L367
 1623 0640 902B     		cmp	r3, #144
 1624 0642 33D1     		bne	.L311
 1625 0644 0EE0     		b	.L313
 1626              	.L319:
 1627 0646 B82B     		cmp	r3, #184
 1628 0648 19D0     		beq	.L316
 1629 064a 04D8     		bhi	.L321
 1630 064c A02B     		cmp	r3, #160
 1631 064e 28D0     		beq	.L366
 1632 0650 A82B     		cmp	r3, #168
 1633 0652 2BD1     		bne	.L311
 1634 0654 13E0     		b	.L316
 1635              	.L321:
 1636 0656 C02B     		cmp	r3, #192
 1637 0658 4FF00400 		mov	r0, #4
 1638 065c 20D0     		beq	.L317
 1639 065e F82B     		cmp	r3, #248
 1640 0660 24D1     		bne	.L311
 1641 0662 18E0     		b	.L365
 1642              	.L313:
1143:../Source Files/lpc17xx_i2c.c **** 				{
1144:../Source Files/lpc17xx_i2c.c **** 				/* No status information */
1145:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_NO_INF:
1146:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1147:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1148:../Source Files/lpc17xx_i2c.c **** 					break;
1149:../Source Files/lpc17xx_i2c.c **** 
1150:../Source Files/lpc17xx_i2c.c **** 				/* Reading phase -------------------------------------------------------- */
1151:../Source Files/lpc17xx_i2c.c **** 				/* Own SLA+R has been received, ACK has been returned */
1152:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_SLAW_ACK:
1153:../Source Files/lpc17xx_i2c.c **** 				/* General call address has been received, ACK has been returned */
1154:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_GENCALL_ACK:
1155:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1156:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1157:../Source Files/lpc17xx_i2c.c **** 					break;
1158:../Source Files/lpc17xx_i2c.c **** 
1159:../Source Files/lpc17xx_i2c.c **** 				/* Previously addressed with own SLA;
1160:../Source Files/lpc17xx_i2c.c **** 				 * DATA byte has been received;
1161:../Source Files/lpc17xx_i2c.c **** 				 * ACK has been returned */
1162:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_SLA_DAT_ACK:
1163:../Source Files/lpc17xx_i2c.c **** 				/* DATA has been received, ACK hasn been return */
1164:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
1165:../Source Files/lpc17xx_i2c.c **** 					/*
1166:../Source Files/lpc17xx_i2c.c **** 					 * All data bytes that over-flow the specified receive
1167:../Source Files/lpc17xx_i2c.c **** 					 * data length, just ignore them.
1168:../Source Files/lpc17xx_i2c.c **** 					 */
1169:../Source Files/lpc17xx_i2c.c **** 					if ((TransferCfg->rx_count < TransferCfg->rx_length) \
 1643              		.loc 1 1169 0
 1644 0664 6869     		ldr	r0, [r5, #20]
 1645 0666 2A69     		ldr	r2, [r5, #16]
 1646 0668 9042     		cmp	r0, r2
 1647 066a 13D2     		bcs	.L324
1170:../Source Files/lpc17xx_i2c.c **** 							&& (TransferCfg->rx_data != NULL))
 1648              		.loc 1 1170 0
 1649 066c E868     		ldr	r0, [r5, #12]
 1650 066e 88B1     		cbz	r0, .L324
1171:../Source Files/lpc17xx_i2c.c **** 					{
1172:../Source Files/lpc17xx_i2c.c **** 						*rxdat++ = (uint8_t)I2Cx->I2DAT;
 1651              		.loc 1 1172 0
 1652 0670 A268     		ldr	r2, [r4, #8]
 1653 0672 0CF8012B 		strb	r2, [ip], #1
 1654              	.LVL139:
1173:../Source Files/lpc17xx_i2c.c **** 						TransferCfg->rx_count++;
 1655              		.loc 1 1173 0
 1656 0676 6869     		ldr	r0, [r5, #20]
 1657 0678 421C     		adds	r2, r0, #1
 1658 067a 6A61     		str	r2, [r5, #20]
 1659 067c 0AE0     		b	.L324
 1660              	.L316:
1174:../Source Files/lpc17xx_i2c.c **** 					}
1175:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
1176:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1177:../Source Files/lpc17xx_i2c.c **** 					break;
1178:../Source Files/lpc17xx_i2c.c **** 
1179:../Source Files/lpc17xx_i2c.c **** 				/* Previously addressed with own SLA;
1180:../Source Files/lpc17xx_i2c.c **** 				 * DATA byte has been received;
1181:../Source Files/lpc17xx_i2c.c **** 				 * NOT ACK has been returned */
1182:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_SLA_DAT_NACK:
1183:../Source Files/lpc17xx_i2c.c **** 				/* DATA has been received, NOT ACK has been returned */
1184:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK:
1185:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1186:../Source Files/lpc17xx_i2c.c **** 					break;
1187:../Source Files/lpc17xx_i2c.c **** 
1188:../Source Files/lpc17xx_i2c.c **** 				/*
1189:../Source Files/lpc17xx_i2c.c **** 				 * Note that: Return code only let us know a stop condition mixed
1190:../Source Files/lpc17xx_i2c.c **** 				 * with a repeat start condition in the same code value.
1191:../Source Files/lpc17xx_i2c.c **** 				 * So we should provide a time-out. In case this is really a stop
1192:../Source Files/lpc17xx_i2c.c **** 				 * condition, this will return back after time out condition. Otherwise,
1193:../Source Files/lpc17xx_i2c.c **** 				 * next session that is slave receive data will be completed.
1194:../Source Files/lpc17xx_i2c.c **** 				 */
1195:../Source Files/lpc17xx_i2c.c **** 
1196:../Source Files/lpc17xx_i2c.c **** 				/* A Stop or a repeat start condition */
1197:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
1198:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
1199:../Source Files/lpc17xx_i2c.c **** 					// enable time out
1200:../Source Files/lpc17xx_i2c.c **** 					time_en = 1;
1201:../Source Files/lpc17xx_i2c.c **** 					timeout = 0;
1202:../Source Files/lpc17xx_i2c.c **** 					break;
1203:../Source Files/lpc17xx_i2c.c **** 
1204:../Source Files/lpc17xx_i2c.c **** 				/* Writing phase -------------------------------------------------------- */
1205:../Source Files/lpc17xx_i2c.c **** 				/* Own SLA+R has been received, ACK has been returned */
1206:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_TX_SLAR_ACK:
1207:../Source Files/lpc17xx_i2c.c **** 				/* Data has been transmitted, ACK has been received */
1208:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_TX_DAT_ACK:
1209:../Source Files/lpc17xx_i2c.c **** 					/*
1210:../Source Files/lpc17xx_i2c.c **** 					 * All data bytes that over-flow the specified receive
1211:../Source Files/lpc17xx_i2c.c **** 					 * data length, just ignore them.
1212:../Source Files/lpc17xx_i2c.c **** 					 */
1213:../Source Files/lpc17xx_i2c.c **** 					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
 1661              		.loc 1 1213 0
 1662 067e AA68     		ldr	r2, [r5, #8]
 1663 0680 6868     		ldr	r0, [r5, #4]
 1664 0682 8242     		cmp	r2, r0
 1665 0684 06D2     		bcs	.L324
1214:../Source Files/lpc17xx_i2c.c **** 							&& (TransferCfg->tx_data != NULL))
 1666              		.loc 1 1214 0
 1667 0686 2868     		ldr	r0, [r5, #0]
 1668 0688 20B1     		cbz	r0, .L324
1215:../Source Files/lpc17xx_i2c.c **** 					{
1216:../Source Files/lpc17xx_i2c.c **** 						I2Cx->I2DAT = *txdat++;
 1669              		.loc 1 1216 0
 1670 068a 17F8010B 		ldrb	r0, [r7], #1	@ zero_extendqisi2
 1671              	.LVL140:
1217:../Source Files/lpc17xx_i2c.c **** 						TransferCfg->tx_count++;
 1672              		.loc 1 1217 0
 1673 068e 0132     		adds	r2, r2, #1
1216:../Source Files/lpc17xx_i2c.c **** 						I2Cx->I2DAT = *txdat++;
 1674              		.loc 1 1216 0
 1675 0690 A060     		str	r0, [r4, #8]
 1676              	.LVL141:
 1677              		.loc 1 1217 0
 1678 0692 AA60     		str	r2, [r5, #8]
 1679              	.L324:
1218:../Source Files/lpc17xx_i2c.c **** 					}
1219:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1680              		.loc 1 1219 0
 1681 0694 0420     		movs	r0, #4
 1682              	.L365:
 1683 0696 2060     		str	r0, [r4, #0]
 1684              	.L367:
1220:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1685              		.loc 1 1220 0
 1686 0698 0822     		movs	r2, #8
 1687 069a A261     		str	r2, [r4, #24]
1140:../Source Files/lpc17xx_i2c.c **** 				time_en = 0;
 1688              		.loc 1 1140 0
 1689 069c 0022     		movs	r2, #0
1221:../Source Files/lpc17xx_i2c.c **** 					break;
 1690              		.loc 1 1221 0
 1691 069e BCE7     		b	.L364
 1692              	.L317:
1222:../Source Files/lpc17xx_i2c.c **** 
1223:../Source Files/lpc17xx_i2c.c **** 				/* Data has been transmitted, NACK has been received,
1224:../Source Files/lpc17xx_i2c.c **** 				 * that means there's no more data to send, exit now */
1225:../Source Files/lpc17xx_i2c.c **** 				/*
1226:../Source Files/lpc17xx_i2c.c **** 				 * Note: Don't wait for stop event since in slave transmit mode,
1227:../Source Files/lpc17xx_i2c.c **** 				 * since there no proof lets us know when a stop signal has been received
1228:../Source Files/lpc17xx_i2c.c **** 				 * on slave side.
1229:../Source Files/lpc17xx_i2c.c **** 				 */
1230:../Source Files/lpc17xx_i2c.c **** 				case I2C_I2STAT_S_TX_DAT_NACK:
1231:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1693              		.loc 1 1231 0
 1694 06a0 2060     		str	r0, [r4, #0]
 1695              	.L366:
1232:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1696              		.loc 1 1232 0
 1697 06a2 0822     		movs	r2, #8
 1698 06a4 A261     		str	r2, [r4, #24]
 1699              	.LVL142:
1233:../Source Files/lpc17xx_i2c.c **** 					// enable time out
1234:../Source Files/lpc17xx_i2c.c **** 					time_en = 1;
1235:../Source Files/lpc17xx_i2c.c **** 					timeout = 0;
 1700              		.loc 1 1235 0
 1701 06a6 0021     		movs	r1, #0
1234:../Source Files/lpc17xx_i2c.c **** 					time_en = 1;
 1702              		.loc 1 1234 0
 1703 06a8 0122     		movs	r2, #1
1236:../Source Files/lpc17xx_i2c.c **** 					break;
 1704              		.loc 1 1236 0
 1705 06aa B6E7     		b	.L364
 1706              	.LVL143:
 1707              	.L311:
1237:../Source Files/lpc17xx_i2c.c **** 
1238:../Source Files/lpc17xx_i2c.c **** 				// Other status must be captured
1239:../Source Files/lpc17xx_i2c.c **** 				default:
1240:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1708              		.loc 1 1240 0
 1709 06ac 0821     		movs	r1, #8
 1710              	.LVL144:
1241:../Source Files/lpc17xx_i2c.c **** 					goto s_error;
1242:../Source Files/lpc17xx_i2c.c **** 				}
1243:../Source Files/lpc17xx_i2c.c **** 			}
1244:../Source Files/lpc17xx_i2c.c **** 			else if (time_en)
1245:../Source Files/lpc17xx_i2c.c **** 			{
1246:../Source Files/lpc17xx_i2c.c **** 				if (timeout++ > I2C_SLAVE_TIME_OUT)
1247:../Source Files/lpc17xx_i2c.c **** 				{
1248:../Source Files/lpc17xx_i2c.c **** 					// it's really a stop condition, goto end stage
1249:../Source Files/lpc17xx_i2c.c **** 					goto s_end_stage;
1250:../Source Files/lpc17xx_i2c.c **** 				}
1251:../Source Files/lpc17xx_i2c.c **** 			}
1252:../Source Files/lpc17xx_i2c.c **** 		}
1253:../Source Files/lpc17xx_i2c.c **** 
1254:../Source Files/lpc17xx_i2c.c **** s_end_stage:
1255:../Source Files/lpc17xx_i2c.c **** 		/* Clear AA bit to disable ACK on I2C bus */
1256:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
1257:../Source Files/lpc17xx_i2c.c **** 		// Check if there's no error during operation
1258:../Source Files/lpc17xx_i2c.c **** 		// Update status
1259:../Source Files/lpc17xx_i2c.c **** 		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
1260:../Source Files/lpc17xx_i2c.c **** 		return SUCCESS;
1261:../Source Files/lpc17xx_i2c.c **** 
1262:../Source Files/lpc17xx_i2c.c **** s_error:
1263:../Source Files/lpc17xx_i2c.c **** 		/* Clear AA bit to disable ACK on I2C bus */
1264:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
 1711              		.loc 1 1264 0
 1712 06ae 0420     		movs	r0, #4
1240:../Source Files/lpc17xx_i2c.c **** 					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 1713              		.loc 1 1240 0
 1714 06b0 A161     		str	r1, [r4, #24]
 1715              	.LDL3:
 1716              		.loc 1 1264 0
 1717 06b2 A061     		str	r0, [r4, #24]
1265:../Source Files/lpc17xx_i2c.c **** 		// Update status
1266:../Source Files/lpc17xx_i2c.c **** 		TransferCfg->status = CodeStatus;
 1718              		.loc 1 1266 0
 1719 06b4 AB61     		str	r3, [r5, #24]
 1720              	.LVL145:
 1721              	.L368:
1267:../Source Files/lpc17xx_i2c.c **** 		return ERROR;
 1722              		.loc 1 1267 0
 1723 06b6 0020     		movs	r0, #0
 1724 06b8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1725              	.LVL146:
 1726              	.L310:
1244:../Source Files/lpc17xx_i2c.c **** 			else if (time_en)
 1727              		.loc 1 1244 0
 1728 06ba 002A     		cmp	r2, #0
 1729 06bc ADD0     		beq	.L364
1246:../Source Files/lpc17xx_i2c.c **** 				if (timeout++ > I2C_SLAVE_TIME_OUT)
 1730              		.loc 1 1246 0
 1731 06be 4A1C     		adds	r2, r1, #1
 1732              	.LVL147:
 1733 06c0 B1F5803F 		cmp	r1, #65536
 1734 06c4 02D8     		bhi	.L370
 1735              	.L327:
 1736 06c6 1146     		mov	r1, r2
 1737 06c8 0122     		movs	r2, #1
 1738              	.LVL148:
 1739 06ca A6E7     		b	.L364
 1740              	.LVL149:
 1741              	.L370:
 1742              	.L326:
1256:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
 1743              		.loc 1 1256 0
 1744 06cc 0421     		movs	r1, #4
1259:../Source Files/lpc17xx_i2c.c **** 		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
 1745              		.loc 1 1259 0
 1746 06ce 43F48063 		orr	r3, r3, #1024
1256:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
 1747              		.loc 1 1256 0
 1748 06d2 A161     		str	r1, [r4, #24]
1259:../Source Files/lpc17xx_i2c.c **** 		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
 1749              		.loc 1 1259 0
 1750 06d4 AB61     		str	r3, [r5, #24]
 1751              	.LVL150:
 1752              	.L369:
1260:../Source Files/lpc17xx_i2c.c **** 		return SUCCESS;
 1753              		.loc 1 1260 0
 1754 06d6 0120     		movs	r0, #1
 1755 06d8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1756              	.LVL151:
 1757              	.L308:
1268:../Source Files/lpc17xx_i2c.c **** 	}
1269:../Source Files/lpc17xx_i2c.c **** 
1270:../Source Files/lpc17xx_i2c.c **** 	else if (Opt == I2C_TRANSFER_INTERRUPT)
 1758              		.loc 1 1270 0
 1759 06da 012A     		cmp	r2, #1
 1760 06dc EBD1     		bne	.L368
1271:../Source Files/lpc17xx_i2c.c **** 	{
1272:../Source Files/lpc17xx_i2c.c **** 		// Setup tx_rx data, callback and interrupt handler
1273:../Source Files/lpc17xx_i2c.c **** 		tmp = I2C_getNum(I2Cx);
 1761              		.loc 1 1273 0
 1762 06de FFF78FFC 		bl	I2C_getNum
 1763              	.LVL152:
1274:../Source Files/lpc17xx_i2c.c **** 		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
 1764              		.loc 1 1274 0
 1765 06e2 074B     		ldr	r3, .L371
1275:../Source Files/lpc17xx_i2c.c **** 		// Set direction phase, read first
1276:../Source Files/lpc17xx_i2c.c **** 		i2cdat[tmp].dir = 1;
1277:../Source Files/lpc17xx_i2c.c **** 
1278:../Source Files/lpc17xx_i2c.c **** 		// Enable AA
1279:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
1280:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 1766              		.loc 1 1280 0
 1767 06e4 2821     		movs	r1, #40
1274:../Source Files/lpc17xx_i2c.c **** 		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
 1768              		.loc 1 1274 0
 1769 06e6 43F83050 		str	r5, [r3, r0, lsl #3]
1279:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1770              		.loc 1 1279 0
 1771 06ea 0422     		movs	r2, #4
1276:../Source Files/lpc17xx_i2c.c **** 		i2cdat[tmp].dir = 1;
 1772              		.loc 1 1276 0
 1773 06ec 03EBC000 		add	r0, r3, r0, lsl #3
 1774              	.LVL153:
 1775 06f0 4660     		str	r6, [r0, #4]
1279:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1776              		.loc 1 1279 0
 1777 06f2 2260     		str	r2, [r4, #0]
1281:../Source Files/lpc17xx_i2c.c **** 		I2C_IntCmd(I2Cx, 1);
 1778              		.loc 1 1281 0
 1779 06f4 2046     		mov	r0, r4
1280:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 1780              		.loc 1 1280 0
 1781 06f6 A161     		str	r1, [r4, #24]
 1782              		.loc 1 1281 0
 1783 06f8 3146     		mov	r1, r6
 1784 06fa FFF7FEFF 		bl	I2C_IntCmd
 1785              	.LVL154:
 1786 06fe EAE7     		b	.L369
 1787              	.L372:
 1788              		.align	2
 1789              	.L371:
 1790 0700 00000000 		.word	.LANCHOR0
 1791              		.cfi_endproc
 1792              	.LFE70:
 1794              		.align	1
 1795              		.global	I2C_SetOwnSlaveAddr
 1796              		.thumb
 1797              		.thumb_func
 1799              	I2C_SetOwnSlaveAddr:
 1800              	.LFB71:
1282:../Source Files/lpc17xx_i2c.c **** 
1283:../Source Files/lpc17xx_i2c.c **** 		return (SUCCESS);
1284:../Source Files/lpc17xx_i2c.c **** 	}
1285:../Source Files/lpc17xx_i2c.c **** 
1286:../Source Files/lpc17xx_i2c.c **** 	return ERROR;
1287:../Source Files/lpc17xx_i2c.c **** }
1288:../Source Files/lpc17xx_i2c.c **** 
1289:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
1290:../Source Files/lpc17xx_i2c.c ****  * @brief		Set Own slave address in I2C peripheral corresponding to
1291:../Source Files/lpc17xx_i2c.c ****  * 				parameter specified in OwnSlaveAddrConfigStruct.
1292:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1293:../Source Files/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1294:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1295:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1296:../Source Files/lpc17xx_i2c.c ****  * @param[in]	OwnSlaveAddrConfigStruct	Pointer to a I2C_OWNSLAVEADDR_CFG_Type
1297:../Source Files/lpc17xx_i2c.c ****  * 				structure that contains the configuration information for the
1298:../Source Files/lpc17xx_i2c.c **** *               specified I2C slave address.
1299:../Source Files/lpc17xx_i2c.c ****  * @return 		None
1300:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
1301:../Source Files/lpc17xx_i2c.c **** void I2C_SetOwnSlaveAddr(LPC_I2C_TypeDef *I2Cx, I2C_OWNSLAVEADDR_CFG_Type *OwnSlaveAddrConfigStruct
1302:../Source Files/lpc17xx_i2c.c **** {
 1801              		.loc 1 1302 0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 1805              	.LVL155:
 1806 0704 10B5     		push	{r4, lr}
 1807              	.LCFI6:
 1808              		.cfi_def_cfa_offset 8
 1809              		.cfi_offset 4, -8
 1810              		.cfi_offset 14, -4
1303:../Source Files/lpc17xx_i2c.c **** 	uint32_t tmp;
1304:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
1305:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
1306:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));
1307:../Source Files/lpc17xx_i2c.c **** 
1308:../Source Files/lpc17xx_i2c.c **** 	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
1309:../Source Files/lpc17xx_i2c.c **** 			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
 1811              		.loc 1 1309 0
 1812 0706 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
1308:../Source Files/lpc17xx_i2c.c **** 	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
 1813              		.loc 1 1308 0
 1814 0708 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 1815              		.loc 1 1309 0
 1816 070a 5C1E     		subs	r4, r3, #1
 1817 070c 6342     		rsbs	r3, r4, #0
 1818 070e 5C41     		adcs	r4, r3, r4
 1819 0710 44EA4202 		orr	r2, r4, r2, lsl #1
1308:../Source Files/lpc17xx_i2c.c **** 	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
 1820              		.loc 1 1308 0
 1821 0714 D3B2     		uxtb	r3, r2
 1822              	.LVL156:
1310:../Source Files/lpc17xx_i2c.c **** 	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
 1823              		.loc 1 1310 0
 1824 0716 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 1825 0718 032A     		cmp	r2, #3
 1826 071a 1AD8     		bhi	.L373
 1827 071c DFE802F0 		tbb	[pc, r2]
 1828              	.L379:
 1829 0720 02       		.byte	(.L375-.L379)/2
 1830 0721 08       		.byte	(.L376-.L379)/2
 1831 0722 0E       		.byte	(.L377-.L379)/2
 1832 0723 14       		.byte	(.L378-.L379)/2
 1833              		.align	1
 1834              	.L375:
1311:../Source Files/lpc17xx_i2c.c **** 	{
1312:../Source Files/lpc17xx_i2c.c **** 	case 0:
1313:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2ADR0 = tmp;
 1835              		.loc 1 1313 0
 1836 0724 C360     		str	r3, [r0, #12]
1314:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2MASK0 = I2C_I2MASK_MASK((uint32_t) \
 1837              		.loc 1 1314 0
 1838 0726 C978     		ldrb	r1, [r1, #3]	@ zero_extendqisi2
 1839              	.LVL157:
 1840 0728 01F0FE03 		and	r3, r1, #254
 1841              	.LVL158:
 1842 072c 0363     		str	r3, [r0, #48]
1315:../Source Files/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1316:../Source Files/lpc17xx_i2c.c **** 		break;
 1843              		.loc 1 1316 0
 1844 072e 10BD     		pop	{r4, pc}
 1845              	.LVL159:
 1846              	.L376:
1317:../Source Files/lpc17xx_i2c.c **** 	case 1:
1318:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2ADR1 = tmp;
 1847              		.loc 1 1318 0
 1848 0730 0362     		str	r3, [r0, #32]
1319:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2MASK1 = I2C_I2MASK_MASK((uint32_t) \
 1849              		.loc 1 1319 0
 1850 0732 CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 1851              	.LVL160:
 1852 0734 03F0FE02 		and	r2, r3, #254
 1853 0738 4263     		str	r2, [r0, #52]
1320:../Source Files/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1321:../Source Files/lpc17xx_i2c.c **** 		break;
 1854              		.loc 1 1321 0
 1855 073a 10BD     		pop	{r4, pc}
 1856              	.LVL161:
 1857              	.L377:
1322:../Source Files/lpc17xx_i2c.c **** 	case 2:
1323:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2ADR2 = tmp;
 1858              		.loc 1 1323 0
 1859 073c 4362     		str	r3, [r0, #36]
1324:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2MASK2 = I2C_I2MASK_MASK((uint32_t) \
 1860              		.loc 1 1324 0
 1861 073e CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 1862 0740 02F0FE01 		and	r1, r2, #254
 1863              	.LVL162:
 1864 0744 8163     		str	r1, [r0, #56]
1325:../Source Files/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1326:../Source Files/lpc17xx_i2c.c **** 		break;
 1865              		.loc 1 1326 0
 1866 0746 10BD     		pop	{r4, pc}
 1867              	.LVL163:
 1868              	.L378:
1327:../Source Files/lpc17xx_i2c.c **** 	case 3:
1328:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2ADR3 = tmp;
 1869              		.loc 1 1328 0
 1870 0748 8362     		str	r3, [r0, #40]
1329:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2MASK3 = I2C_I2MASK_MASK((uint32_t) \
 1871              		.loc 1 1329 0
 1872 074a C978     		ldrb	r1, [r1, #3]	@ zero_extendqisi2
 1873              	.LVL164:
 1874 074c 01F0FE03 		and	r3, r1, #254
 1875              	.LVL165:
 1876 0750 C363     		str	r3, [r0, #60]
 1877              	.LVL166:
 1878              	.L373:
 1879 0752 10BD     		pop	{r4, pc}
 1880              		.cfi_endproc
 1881              	.LFE71:
 1883              		.align	1
 1884              		.global	I2C_MonitorModeConfig
 1885              		.thumb
 1886              		.thumb_func
 1888              	I2C_MonitorModeConfig:
 1889              	.LFB72:
1330:../Source Files/lpc17xx_i2c.c **** 				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
1331:../Source Files/lpc17xx_i2c.c **** 		break;
1332:../Source Files/lpc17xx_i2c.c **** 	}
1333:../Source Files/lpc17xx_i2c.c **** }
1334:../Source Files/lpc17xx_i2c.c **** 
1335:../Source Files/lpc17xx_i2c.c **** 
1336:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
1337:../Source Files/lpc17xx_i2c.c ****  * @brief		Configures functionality in I2C monitor mode
1338:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1339:../Source Files/lpc17xx_i2c.c ****  *   			- LPC_I2C0
1340:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1341:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1342:../Source Files/lpc17xx_i2c.c ****  * @param[in]	MonitorCfgType Monitor Configuration type, should be:
1343:../Source Files/lpc17xx_i2c.c ****  * 				- I2C_MONITOR_CFG_SCL_OUTPUT: I2C module can 'stretch'
1344:../Source Files/lpc17xx_i2c.c ****  * 				the clock line (hold it low) until it has had time to
1345:../Source Files/lpc17xx_i2c.c ****  * 				respond to an I2C interrupt.
1346:../Source Files/lpc17xx_i2c.c ****  * 				- I2C_MONITOR_CFG_MATCHALL: When this bit is set to '1'
1347:../Source Files/lpc17xx_i2c.c ****  * 				and the I2C is in monitor mode, an interrupt will be
1348:../Source Files/lpc17xx_i2c.c ****  * 				generated on ANY address received.
1349:../Source Files/lpc17xx_i2c.c ****  * @param[in]	NewState New State of this function, should be:
1350:../Source Files/lpc17xx_i2c.c ****  * 				- ENABLE: Enable this function.
1351:../Source Files/lpc17xx_i2c.c ****  * 				- DISABLE: Disable this function.
1352:../Source Files/lpc17xx_i2c.c ****  * @return		None
1353:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
1354:../Source Files/lpc17xx_i2c.c **** void I2C_MonitorModeConfig(LPC_I2C_TypeDef *I2Cx, uint32_t MonitorCfgType, FunctionalState NewState
1355:../Source Files/lpc17xx_i2c.c **** {
 1890              		.loc 1 1355 0
 1891              		.cfi_startproc
 1892              		@ args = 0, pretend = 0, frame = 0
 1893              		@ frame_needed = 0, uses_anonymous_args = 0
 1894              		@ link register save eliminated.
 1895              	.LVL167:
1356:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
1357:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
1358:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
1359:../Source Files/lpc17xx_i2c.c **** 
1360:../Source Files/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
1361:../Source Files/lpc17xx_i2c.c **** 	{
1362:../Source Files/lpc17xx_i2c.c **** 		I2Cx->MMCTRL |= MonitorCfgType;
 1896              		.loc 1 1362 0
 1897 0754 C369     		ldr	r3, [r0, #28]
1360:../Source Files/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 1898              		.loc 1 1360 0
 1899 0756 012A     		cmp	r2, #1
1363:../Source Files/lpc17xx_i2c.c **** 	}
1364:../Source Files/lpc17xx_i2c.c **** 	else
1365:../Source Files/lpc17xx_i2c.c **** 	{
1366:../Source Files/lpc17xx_i2c.c **** 		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
 1900              		.loc 1 1366 0
 1901 0758 16BF     		itet	ne
 1902 075a 03F00703 		andne	r3, r3, #7
1362:../Source Files/lpc17xx_i2c.c **** 		I2Cx->MMCTRL |= MonitorCfgType;
 1903              		.loc 1 1362 0
 1904 075e 1943     		orreq	r1, r1, r3
 1905              	.LVL168:
 1906              		.loc 1 1366 0
 1907 0760 23EA0101 		bicne	r1, r3, r1
 1908 0764 C161     		str	r1, [r0, #28]
 1909 0766 7047     		bx	lr
 1910              		.cfi_endproc
 1911              	.LFE72:
 1913              		.align	1
 1914              		.global	I2C_MonitorModeCmd
 1915              		.thumb
 1916              		.thumb_func
 1918              	I2C_MonitorModeCmd:
 1919              	.LFB73:
1367:../Source Files/lpc17xx_i2c.c **** 	}
1368:../Source Files/lpc17xx_i2c.c **** }
1369:../Source Files/lpc17xx_i2c.c **** 
1370:../Source Files/lpc17xx_i2c.c **** 
1371:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
1372:../Source Files/lpc17xx_i2c.c ****  * @brief		Enable/Disable I2C monitor mode
1373:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1374:../Source Files/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1375:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1376:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1377:../Source Files/lpc17xx_i2c.c ****  * @param[in]	NewState New State of this function, should be:
1378:../Source Files/lpc17xx_i2c.c ****  * 				- ENABLE: Enable monitor mode.
1379:../Source Files/lpc17xx_i2c.c ****  * 				- DISABLE: Disable monitor mode.
1380:../Source Files/lpc17xx_i2c.c ****  * @return		None
1381:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
1382:../Source Files/lpc17xx_i2c.c **** void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
1383:../Source Files/lpc17xx_i2c.c **** {
 1920              		.loc 1 1383 0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 0
 1923              		@ frame_needed = 0, uses_anonymous_args = 0
 1924              		@ link register save eliminated.
 1925              	.LVL169:
1384:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
1385:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
1386:../Source Files/lpc17xx_i2c.c **** 
1387:../Source Files/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 1926              		.loc 1 1387 0
 1927 0768 0129     		cmp	r1, #1
1388:../Source Files/lpc17xx_i2c.c **** 	{
1389:../Source Files/lpc17xx_i2c.c **** 		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
 1928              		.loc 1 1389 0
 1929 076a C369     		ldr	r3, [r0, #28]
1387:../Source Files/lpc17xx_i2c.c **** 	if (NewState == ENABLE)
 1930              		.loc 1 1387 0
 1931 076c 06D1     		bne	.L385
 1932              		.loc 1 1389 0
 1933 076e 43F00103 		orr	r3, r3, #1
1390:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1934              		.loc 1 1390 0
 1935 0772 0421     		movs	r1, #4
 1936              	.LVL170:
1389:../Source Files/lpc17xx_i2c.c **** 		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
 1937              		.loc 1 1389 0
 1938 0774 C361     		str	r3, [r0, #28]
1391:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
 1939              		.loc 1 1391 0
 1940 0776 2822     		movs	r2, #40
1390:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONSET = I2C_I2CONSET_AA;
 1941              		.loc 1 1390 0
 1942 0778 0160     		str	r1, [r0, #0]
 1943 077a 03E0     		b	.L387
 1944              	.LVL171:
 1945              	.L385:
1392:../Source Files/lpc17xx_i2c.c **** 	}
1393:../Source Files/lpc17xx_i2c.c **** 	else
1394:../Source Files/lpc17xx_i2c.c **** 	{
1395:../Source Files/lpc17xx_i2c.c **** 		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
 1946              		.loc 1 1395 0
 1947 077c 03F00601 		and	r1, r3, #6
 1948              	.LVL172:
 1949 0780 C161     		str	r1, [r0, #28]
1396:../Source Files/lpc17xx_i2c.c **** 		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
 1950              		.loc 1 1396 0
 1951 0782 2C22     		movs	r2, #44
 1952              	.L387:
 1953 0784 8261     		str	r2, [r0, #24]
1397:../Source Files/lpc17xx_i2c.c **** 	}
1398:../Source Files/lpc17xx_i2c.c **** 	I2C_MonitorBufferIndex = 0;
 1954              		.loc 1 1398 0
 1955 0786 024A     		ldr	r2, .L388
 1956 0788 0020     		movs	r0, #0
 1957              	.LVL173:
 1958 078a 1063     		str	r0, [r2, #48]
 1959 078c 7047     		bx	lr
 1960              	.L389:
 1961 078e 00BF     		.align	2
 1962              	.L388:
 1963 0790 00000000 		.word	.LANCHOR0
 1964              		.cfi_endproc
 1965              	.LFE73:
 1967              		.align	1
 1968              		.global	I2C_MonitorGetDatabuffer
 1969              		.thumb
 1970              		.thumb_func
 1972              	I2C_MonitorGetDatabuffer:
 1973              	.LFB74:
1399:../Source Files/lpc17xx_i2c.c **** }
1400:../Source Files/lpc17xx_i2c.c **** 
1401:../Source Files/lpc17xx_i2c.c **** 
1402:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
1403:../Source Files/lpc17xx_i2c.c ****  * @brief		Get data from I2C data buffer in monitor mode.
1404:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1405:../Source Files/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1406:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1407:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1408:../Source Files/lpc17xx_i2c.c ****  * @return		None
1409:../Source Files/lpc17xx_i2c.c ****  * Note:	In monitor mode, the I2C module may lose the ability to stretch
1410:../Source Files/lpc17xx_i2c.c ****  * the clock (stall the bus) if the ENA_SCL bit is not set. This means that
1411:../Source Files/lpc17xx_i2c.c ****  * the processor will have a limited amount of time to read the contents of
1412:../Source Files/lpc17xx_i2c.c ****  * the data received on the bus. If the processor reads the I2DAT shift
1413:../Source Files/lpc17xx_i2c.c ****  * register, as it ordinarily would, it could have only one bit-time to
1414:../Source Files/lpc17xx_i2c.c ****  * respond to the interrupt before the received data is overwritten by
1415:../Source Files/lpc17xx_i2c.c ****  * new data.
1416:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
1417:../Source Files/lpc17xx_i2c.c **** uint8_t I2C_MonitorGetDatabuffer(LPC_I2C_TypeDef *I2Cx)
1418:../Source Files/lpc17xx_i2c.c **** {
 1974              		.loc 1 1418 0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
 1978              		@ link register save eliminated.
 1979              	.LVL174:
1419:../Source Files/lpc17xx_i2c.c **** 	CHECK_PARAM(PARAM_I2Cx(I2Cx));
1420:../Source Files/lpc17xx_i2c.c **** 	return ((uint8_t)(I2Cx->I2DATA_BUFFER));
 1980              		.loc 1 1420 0
 1981 0794 C06A     		ldr	r0, [r0, #44]
 1982              	.LVL175:
1421:../Source Files/lpc17xx_i2c.c **** }
 1983              		.loc 1 1421 0
 1984 0796 C0B2     		uxtb	r0, r0
 1985 0798 7047     		bx	lr
 1986              		.cfi_endproc
 1987              	.LFE74:
 1989              		.align	1
 1990              		.global	I2C_MonitorHandler
 1991              		.thumb
 1992              		.thumb_func
 1994              	I2C_MonitorHandler:
 1995              	.LFB75:
1422:../Source Files/lpc17xx_i2c.c **** 
1423:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
1424:../Source Files/lpc17xx_i2c.c ****  * @brief		Get data from I2C data buffer in monitor mode.
1425:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be
1426:../Source Files/lpc17xx_i2c.c ****  *    			- LPC_I2C0
1427:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1428:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1429:../Source Files/lpc17xx_i2c.c ****  * @return		None
1430:../Source Files/lpc17xx_i2c.c ****  * Note:	In monitor mode, the I2C module may lose the ability to stretch
1431:../Source Files/lpc17xx_i2c.c ****  * the clock (stall the bus) if the ENA_SCL bit is not set. This means that
1432:../Source Files/lpc17xx_i2c.c ****  * the processor will have a limited amount of time to read the contents of
1433:../Source Files/lpc17xx_i2c.c ****  * the data received on the bus. If the processor reads the I2DAT shift
1434:../Source Files/lpc17xx_i2c.c ****  * register, as it ordinarily would, it could have only one bit-time to
1435:../Source Files/lpc17xx_i2c.c ****  * respond to the interrupt before the received data is overwritten by
1436:../Source Files/lpc17xx_i2c.c ****  * new data.
1437:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
1438:../Source Files/lpc17xx_i2c.c **** BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
1439:../Source Files/lpc17xx_i2c.c **** {
 1996              		.loc 1 1439 0
 1997              		.cfi_startproc
 1998              		@ args = 0, pretend = 0, frame = 0
 1999              		@ frame_needed = 0, uses_anonymous_args = 0
 2000              	.LVL176:
1440:../Source Files/lpc17xx_i2c.c **** 	BOOL_8 ret=FALSE;
1441:../Source Files/lpc17xx_i2c.c **** 
1442:../Source Files/lpc17xx_i2c.c **** 	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
 2001              		.loc 1 1442 0
 2002 079a 0823     		movs	r3, #8
1439:../Source Files/lpc17xx_i2c.c **** {
 2003              		.loc 1 1439 0
 2004 079c 10B5     		push	{r4, lr}
 2005              	.LCFI7:
 2006              		.cfi_def_cfa_offset 8
 2007              		.cfi_offset 4, -8
 2008              		.cfi_offset 14, -4
 2009              		.loc 1 1442 0
 2010 079e 8361     		str	r3, [r0, #24]
1443:../Source Files/lpc17xx_i2c.c **** 
1444:../Source Files/lpc17xx_i2c.c **** 	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
 2011              		.loc 1 1444 0
 2012 07a0 054B     		ldr	r3, .L392
 2013 07a2 C06A     		ldr	r0, [r0, #44]
 2014              	.LVL177:
 2015 07a4 1C6B     		ldr	r4, [r3, #48]
 2016 07a6 0855     		strb	r0, [r1, r4]
1445:../Source Files/lpc17xx_i2c.c **** 	I2C_MonitorBufferIndex++;
 2017              		.loc 1 1445 0
 2018 07a8 601C     		adds	r0, r4, #1
1446:../Source Files/lpc17xx_i2c.c **** 	if(I2C_MonitorBufferIndex >= size)
1447:../Source Files/lpc17xx_i2c.c **** 	{
1448:../Source Files/lpc17xx_i2c.c **** 		ret = TRUE;
1449:../Source Files/lpc17xx_i2c.c **** 	}
1450:../Source Files/lpc17xx_i2c.c **** 	return ret;
1451:../Source Files/lpc17xx_i2c.c **** }
 2019              		.loc 1 1451 0
 2020 07aa 9042     		cmp	r0, r2
1445:../Source Files/lpc17xx_i2c.c **** 	I2C_MonitorBufferIndex++;
 2021              		.loc 1 1445 0
 2022 07ac 1863     		str	r0, [r3, #48]
 2023              	.LVL178:
 2024              		.loc 1 1451 0
 2025 07ae 34BF     		ite	cc
 2026 07b0 0020     		movcc	r0, #0
 2027              	.LVL179:
 2028 07b2 0120     		movcs	r0, #1
 2029 07b4 10BD     		pop	{r4, pc}
 2030              	.L393:
 2031 07b6 00BF     		.align	2
 2032              	.L392:
 2033 07b8 00000000 		.word	.LANCHOR0
 2034              		.cfi_endproc
 2035              	.LFE75:
 2037              		.align	1
 2038              		.global	I2C_MasterTransferComplete
 2039              		.thumb
 2040              		.thumb_func
 2042              	I2C_MasterTransferComplete:
 2043              	.LFB76:
1452:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
1453:../Source Files/lpc17xx_i2c.c ****  * @brief 		Get status of Master Transfer
1454:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
1455:../Source Files/lpc17xx_i2c.c ****  *  			- LPC_I2C0
1456:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1457:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1458:../Source Files/lpc17xx_i2c.c ****  * @return 		Master transfer status, could be:
1459:../Source Files/lpc17xx_i2c.c ****  * 				- TRUE	master transfer completed
1460:../Source Files/lpc17xx_i2c.c ****  * 				- FALSE master transfer have not completed yet
1461:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
1462:../Source Files/lpc17xx_i2c.c **** uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
1463:../Source Files/lpc17xx_i2c.c **** {
 2044              		.loc 1 1463 0
 2045              		.cfi_startproc
 2046              		@ args = 0, pretend = 0, frame = 0
 2047              		@ frame_needed = 0, uses_anonymous_args = 0
 2048              	.LVL180:
 2049 07bc 08B5     		push	{r3, lr}
 2050              	.LCFI8:
 2051              		.cfi_def_cfa_offset 8
 2052              		.cfi_offset 3, -8
 2053              		.cfi_offset 14, -4
1464:../Source Files/lpc17xx_i2c.c **** 	uint32_t retval, tmp;
1465:../Source Files/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 2054              		.loc 1 1465 0
 2055 07be FFF71FFC 		bl	I2C_getNum
 2056              	.LVL181:
1466:../Source Files/lpc17xx_i2c.c **** 	retval = I2C_MasterComplete[tmp];
 2057              		.loc 1 1466 0
 2058 07c2 034B     		ldr	r3, .L395
1467:../Source Files/lpc17xx_i2c.c **** 	I2C_MasterComplete[tmp] = FALSE;
 2059              		.loc 1 1467 0
 2060 07c4 0022     		movs	r2, #0
1466:../Source Files/lpc17xx_i2c.c **** 	retval = I2C_MasterComplete[tmp];
 2061              		.loc 1 1466 0
 2062 07c6 03EB8001 		add	r1, r3, r0, lsl #2
 2063 07ca 8869     		ldr	r0, [r1, #24]
 2064              	.LVL182:
 2065              		.loc 1 1467 0
 2066 07cc 8A61     		str	r2, [r1, #24]
1468:../Source Files/lpc17xx_i2c.c **** 	return retval;
1469:../Source Files/lpc17xx_i2c.c **** }
 2067              		.loc 1 1469 0
 2068 07ce 08BD     		pop	{r3, pc}
 2069              	.L396:
 2070              		.align	2
 2071              	.L395:
 2072 07d0 00000000 		.word	.LANCHOR0
 2073              		.cfi_endproc
 2074              	.LFE76:
 2076              		.align	1
 2077              		.global	I2C_SlaveTransferComplete
 2078              		.thumb
 2079              		.thumb_func
 2081              	I2C_SlaveTransferComplete:
 2082              	.LFB77:
1470:../Source Files/lpc17xx_i2c.c **** 
1471:../Source Files/lpc17xx_i2c.c **** /*********************************************************************//**
1472:../Source Files/lpc17xx_i2c.c ****  * @brief 		Get status of Slave Transfer
1473:../Source Files/lpc17xx_i2c.c ****  * @param[in]	I2Cx	I2C peripheral selected, should be:
1474:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C0
1475:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C1
1476:../Source Files/lpc17xx_i2c.c ****  * 				- LPC_I2C2
1477:../Source Files/lpc17xx_i2c.c ****  * @return 		Complete status, could be: TRUE/FALSE
1478:../Source Files/lpc17xx_i2c.c ****  **********************************************************************/
1479:../Source Files/lpc17xx_i2c.c **** uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
1480:../Source Files/lpc17xx_i2c.c **** {
 2083              		.loc 1 1480 0
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 0
 2086              		@ frame_needed = 0, uses_anonymous_args = 0
 2087              	.LVL183:
 2088 07d4 08B5     		push	{r3, lr}
 2089              	.LCFI9:
 2090              		.cfi_def_cfa_offset 8
 2091              		.cfi_offset 3, -8
 2092              		.cfi_offset 14, -4
1481:../Source Files/lpc17xx_i2c.c **** 	uint32_t retval, tmp;
1482:../Source Files/lpc17xx_i2c.c **** 	tmp = I2C_getNum(I2Cx);
 2093              		.loc 1 1482 0
 2094 07d6 FFF713FC 		bl	I2C_getNum
 2095              	.LVL184:
1483:../Source Files/lpc17xx_i2c.c **** 	retval = I2C_SlaveComplete[tmp];
 2096              		.loc 1 1483 0
 2097 07da 034B     		ldr	r3, .L398
1484:../Source Files/lpc17xx_i2c.c **** 	I2C_SlaveComplete[tmp] = FALSE;
 2098              		.loc 1 1484 0
 2099 07dc 0022     		movs	r2, #0
1483:../Source Files/lpc17xx_i2c.c **** 	retval = I2C_SlaveComplete[tmp];
 2100              		.loc 1 1483 0
 2101 07de 03EB8001 		add	r1, r3, r0, lsl #2
 2102 07e2 486A     		ldr	r0, [r1, #36]
 2103              	.LVL185:
 2104              		.loc 1 1484 0
 2105 07e4 4A62     		str	r2, [r1, #36]
1485:../Source Files/lpc17xx_i2c.c **** 	return retval;
1486:../Source Files/lpc17xx_i2c.c **** }
 2106              		.loc 1 1486 0
 2107 07e6 08BD     		pop	{r3, pc}
 2108              	.L399:
 2109              		.align	2
 2110              	.L398:
 2111 07e8 00000000 		.word	.LANCHOR0
 2112              		.cfi_endproc
 2113              	.LFE77:
 2115              		.global	ignore_data_nack
 2116              		.comm	irqn,1,1
 2117              		.comm	regs,4,4
 2118              		.comm	I2C_Rx_Buf,64,1
 2119              		.comm	I2C_Tx_Buf,64,1
 2120              		.comm	Rx_Buf1,64,1
 2121              		.comm	Tx_Buf1,64,1
 2122              		.comm	TxIntStat,1,1
 2123              		.comm	rb,528,4
 2124              		.comm	EscFlag,2,2
 2125              		.data
 2126              		.align	2
 2129              	ignore_data_nack:
 2130 0000 01000000 		.word	1
 2131              		.bss
 2132              		.align	2
 2133              		.set	.LANCHOR0,. + 0
 2136              	i2cdat:
 2137 0000 00000000 		.space	24
 2137      00000000 
 2137      00000000 
 2137      00000000 
 2137      00000000 
 2140              	I2C_MasterComplete:
 2141 0018 00000000 		.space	12
 2141      00000000 
 2141      00000000 
 2144              	I2C_SlaveComplete:
 2145 0024 00000000 		.space	12
 2145      00000000 
 2145      00000000 
 2148              	I2C_MonitorBufferIndex:
 2149 0030 00000000 		.space	4
 2150              		.text
 2151              	.Letext0:
 2152              		.file 3 "../CM3 Core/LPC17xx.h"
 2153              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q2\\bin\\../lib/gcc/arm-none-eab
 2154              		.file 5 "../Header Files/lpc_types.h"
 2155              		.file 6 "../Header Files/lpc17xx_pinsel.h"
 2156              		.file 7 "../Header Files/lpc17xx_uart.h"
 2157              		.file 8 "../Header Files/lpc17xx_i2c.h"
 2158              		.file 9 "../Header Files/lpc17xx_ssp.h"
 2159              		.file 10 "../Header Files/lpc17xx_clkpwr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lpc17xx_i2c.c
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:18     .text:00000000 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:22     .text:00000000 I2C_getNum
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:63     .text:00000028 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:67     .text:0000002c $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:71     .text:0000002c I2C_SendByte
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:112    .text:0000004a Buffer_Init
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:142    .text:00000060 $d
                            *COM*:00000040 I2C_Tx_Buf
                            *COM*:00000040 I2C_Rx_Buf
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:147    .text:00000068 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:152    .text:00000068 I2C_Init
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:272    .text:000000d8 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:278    .text:000000e4 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:283    .text:000000e4 I2C_Config
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:358    .text:00000130 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:363    .text:00000138 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:368    .text:00000138 I2C_DeInit
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:418    .text:00000164 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:424    .text:00000170 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:429    .text:00000170 I2C_Cmd
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:454    .text:0000017e I2C_IntCmd
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:559    .text:000001d4 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:568    .text:000001e4 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:573    .text:000001e4 I2C_MasterHandler
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:898    .text:0000035c $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:904    .text:00000360 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:909    .text:00000360 I2C_SlaveHandler
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1103   .text:00000440 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1107   .text:00000444 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1112   .text:00000444 I2C_MasterTransferData
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1537   .text:000005f0 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1541   .text:000005f4 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1546   .text:000005f4 I2C_SlaveTransferData
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1790   .text:00000700 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1794   .text:00000704 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1799   .text:00000704 I2C_SetOwnSlaveAddr
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1829   .text:00000720 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1833   .text:00000724 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1888   .text:00000754 I2C_MonitorModeConfig
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1918   .text:00000768 I2C_MonitorModeCmd
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1963   .text:00000790 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1967   .text:00000794 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1972   .text:00000794 I2C_MonitorGetDatabuffer
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:1994   .text:0000079a I2C_MonitorHandler
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2033   .text:000007b8 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2037   .text:000007bc $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2042   .text:000007bc I2C_MasterTransferComplete
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2072   .text:000007d0 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2076   .text:000007d4 $t
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2081   .text:000007d4 I2C_SlaveTransferComplete
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2111   .text:000007e8 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2129   .data:00000000 ignore_data_nack
                            *COM*:00000001 irqn
                            *COM*:00000004 regs
                            *COM*:00000040 Rx_Buf1
                            *COM*:00000040 Tx_Buf1
                            *COM*:00000001 TxIntStat
                            *COM*:00000210 rb
                            *COM*:00000002 EscFlag
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2126   .data:00000000 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2132   .bss:00000000 $d
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2136   .bss:00000000 i2cdat
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2140   .bss:00000018 I2C_MasterComplete
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2144   .bss:00000024 I2C_SlaveComplete
C:\Users\raghav\AppData\Local\Temp\ccGuMrqI.s:2148   .bss:00000030 I2C_MonitorBufferIndex
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.549b84bf9d8399e395ff8216fcbb3d69
                           .group:00000000 wm4.LPC17xx.h.27.964facdaadd4aa3f18ac78c8a78f0013
                           .group:00000000 wm4.core_cm3.h.32.3cac756d6e704b813781f82afd94fa5f
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.6beb15babd14c076008ec0890c26e21c
                           .group:00000000 wm4.core_cm3.h.83.1a3cb9afc687cf157efeddb3d5f3109e
                           .group:00000000 wm4.LPC17xx.h.953.82b7a9ed60bb594048bc8738cf1d3489
                           .group:00000000 wm4.lpc_types.h.32.72d58ce80fabd1a5430c6ec0500a090b
                           .group:00000000 wm4.lpc17xx_pinsel.h.30.767cda9b27a5c688cd97e5947d664047
                           .group:00000000 wm4.lpc17xx_clkpwr.h.30.8537d92ff6965961e80fda89ac5019f2
                           .group:00000000 wm4.lpc17xx_systick.h.30.9f34c15ae315a203fed1d933040ad7b9
                           .group:00000000 wm4.lpc17xx_gpio.h.30.0b884ee110dd20865784f12e1569ecf1
                           .group:00000000 wm4.lpc17xx_wdt.h.34.a2dcafab9849854019efb51f717a8129
                           .group:00000000 wm4.stdarg.h.31.b70f21342353634f7b44d85f85f13832
                           .group:00000000 wm4.lpc17xx_uart.h.58.dbba6e724b29a6214e9cafbaf3ee8a9e
                           .group:00000000 wm4.lpc17xx_ssp.h.48.cd045d667ab7b89d5d550d38997df61b
                           .group:00000000 wm4.lpc_i2c_tsc2004.h.29.34082f268f216caa8d0bf2c0960ad4a6
                           .group:00000000 wm4.lpc_ssp_glcd.h.29.0f086fd3ba564c80425f085247dfad00
                           .group:00000000 wm4.lpc17xx_i2c.h.48.cbcc62074e22d3e2488081c03371f7be

UNDEFINED SYMBOLS
CLKPWR_ConfigPPWR
CLKPWR_SetPCLKDiv
CLKPWR_GetPCLK
PINSEL_ConfigPin
