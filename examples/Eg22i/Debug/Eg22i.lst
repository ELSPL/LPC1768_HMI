
Eg22i.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000cc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059dc  000000cc  000000cc  000080cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  00005aa8  00005aa8  0000daa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       00033b10  00005ab0  00005ab0  0000dab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000388  10000000  000395c0  00048000  2**2
                  ALLOC
  5 ._usrstack    00000100  10000388  000395c0  00048388  2**0
                  ALLOC
  6 .data         00000010  2007c000  000395c0  00044000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .comment      00000070  00000000  00000000  00044010  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 00000033  00000000  00000000  00044080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000230  00000000  00000000  000440b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000d92c  00000000  00000000  000442e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028cf  00000000  00000000  00051c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005a31  00000000  00000000  000544de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000015c0  00000000  00000000  00059f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00011c82  00000000  00000000  0005b4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000729c  00000000  00000000  0006d152  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004d75  00000000  00000000  000743ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000430  00000000  00000000  00079163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000000cc <CLKPWR_SetPCLKDiv>:
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
      cc:	281f      	cmp	r0, #31
 *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
 *
 * @return none
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
      ce:	b510      	push	{r4, lr}
      d0:	4b12      	ldr	r3, [pc, #72]	; (11c <_Minimum_Stack_Size+0x1c>)
      d2:	f04f 0203 	mov.w	r2, #3
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
      d6:	d910      	bls.n	fa <CLKPWR_SetPCLKDiv+0x2e>
      d8:	3820      	subs	r0, #32
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
      da:	fa02 f200 	lsl.w	r2, r2, r0

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
      de:	fa01 f000 	lsl.w	r0, r1, r0
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
      e2:	f8d3 41ac 	ldr.w	r4, [r3, #428]	; 0x1ac
      e6:	ea24 0202 	bic.w	r2, r4, r2
      ea:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
      ee:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
      f2:	4310      	orrs	r0, r2
      f4:	f8c3 01ac 	str.w	r0, [r3, #428]	; 0x1ac
      f8:	bd10      	pop	{r4, pc}

	/* PCLKSEL0 selected */
	if (ClkType < 32)
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
      fa:	fa02 f200 	lsl.w	r2, r2, r0

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
      fe:	fa01 f100 	lsl.w	r1, r1, r0

	/* PCLKSEL0 selected */
	if (ClkType < 32)
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
     102:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
     106:	ea24 0202 	bic.w	r2, r4, r2
     10a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
     10e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
     112:	4311      	orrs	r1, r2
     114:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     118:	bd10      	pop	{r4, pc}
     11a:	bf00      	nop
     11c:	400fc000 	.word	0x400fc000

00000120 <CLKPWR_GetPCLKSEL>:
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
	uint32_t bitpos, retval;

	if (ClkType < 32)
     120:	281f      	cmp	r0, #31
     122:	4b06      	ldr	r3, [pc, #24]	; (13c <CLKPWR_GetPCLKSEL+0x1c>)
     124:	d802      	bhi.n	12c <CLKPWR_GetPCLKSEL+0xc>
	{
		bitpos = ClkType;
		retval = LPC_SC->PCLKSEL0;
     126:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
     12a:	e002      	b.n	132 <CLKPWR_GetPCLKSEL+0x12>
	}
	else
	{
		bitpos = ClkType - 32;
		retval = LPC_SC->PCLKSEL1;
     12c:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		bitpos = ClkType;
		retval = LPC_SC->PCLKSEL0;
	}
	else
	{
		bitpos = ClkType - 32;
     130:	3820      	subs	r0, #32
		retval = LPC_SC->PCLKSEL1;
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
     132:	fa21 f000 	lsr.w	r0, r1, r0
	return retval;
}
     136:	f000 0003 	and.w	r0, r0, #3
     13a:	4770      	bx	lr
     13c:	400fc000 	.word	0x400fc000

00000140 <CLKPWR_GetPCLK>:
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
	uint32_t retval, div;

	retval = SystemCoreClock;
     140:	4b06      	ldr	r3, [pc, #24]	; (15c <CLKPWR_GetPCLK+0x1c>)
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
     142:	b510      	push	{r4, lr}
	uint32_t retval, div;

	retval = SystemCoreClock;
     144:	681c      	ldr	r4, [r3, #0]
	div = CLKPWR_GetPCLKSEL(ClkType);
     146:	f7ff ffeb 	bl	120 <CLKPWR_GetPCLKSEL>

	switch (div)
     14a:	b118      	cbz	r0, 154 <CLKPWR_GetPCLK+0x14>
	case 2:
		div = 2;
		break;

	case 3:
		div = 8;
     14c:	2803      	cmp	r0, #3
     14e:	bf08      	it	eq
     150:	2008      	moveq	r0, #8
     152:	e000      	b.n	156 <CLKPWR_GetPCLK+0x16>
	div = CLKPWR_GetPCLKSEL(ClkType);

	switch (div)
	{
	case 0:
		div = 4;
     154:	2004      	movs	r0, #4
		break;
	}
	retval /= div;

	return retval;
}
     156:	fbb4 f0f0 	udiv	r0, r4, r0
     15a:	bd10      	pop	{r4, pc}
     15c:	2007c008 	.word	0x2007c008

00000160 <CLKPWR_ConfigPPWR>:
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
	if (NewState == ENABLE)
     160:	2901      	cmp	r1, #1
     162:	d108      	bne.n	176 <CLKPWR_ConfigPPWR+0x16>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
     164:	4b09      	ldr	r3, [pc, #36]	; (18c <CLKPWR_ConfigPPWR+0x2c>)
     166:	4a0a      	ldr	r2, [pc, #40]	; (190 <CLKPWR_ConfigPPWR+0x30>)
     168:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
     16c:	4002      	ands	r2, r0
     16e:	430a      	orrs	r2, r1
     170:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
     174:	4770      	bx	lr
	}
	else if (NewState == DISABLE)
     176:	b941      	cbnz	r1, 18a <CLKPWR_ConfigPPWR+0x2a>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
     178:	4a04      	ldr	r2, [pc, #16]	; (18c <CLKPWR_ConfigPPWR+0x2c>)
     17a:	4b05      	ldr	r3, [pc, #20]	; (190 <CLKPWR_ConfigPPWR+0x30>)
     17c:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
     180:	400b      	ands	r3, r1
     182:	ea23 0300 	bic.w	r3, r3, r0
     186:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
     18a:	4770      	bx	lr
     18c:	400fc000 	.word	0x400fc000
     190:	efeff7de 	.word	0xefeff7de

00000194 <CLKPWR_Sleep>:
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_Sleep(void)
{
	LPC_SC->PCON = 0x00;
     194:	4b02      	ldr	r3, [pc, #8]	; (1a0 <CLKPWR_Sleep+0xc>)
     196:	2200      	movs	r2, #0
     198:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
     19c:	bf30      	wfi
     19e:	4770      	bx	lr
     1a0:	400fc000 	.word	0x400fc000

000001a4 <CLKPWR_DeepSleep>:
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1a4:	4b04      	ldr	r3, [pc, #16]	; (1b8 <CLKPWR_DeepSleep+0x14>)
	LPC_SC->PCON = 0x8;
     1a6:	4905      	ldr	r1, [pc, #20]	; (1bc <CLKPWR_DeepSleep+0x18>)
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1a8:	2204      	movs	r2, #4
	LPC_SC->PCON = 0x8;
     1aa:	2008      	movs	r0, #8
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1ac:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x8;
     1ae:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
     1b2:	bf30      	wfi
     1b4:	4770      	bx	lr
     1b6:	bf00      	nop
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	400fc000 	.word	0x400fc000

000001c0 <CLKPWR_PowerDown>:
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1c0:	4b04      	ldr	r3, [pc, #16]	; (1d4 <CLKPWR_PowerDown+0x14>)
	LPC_SC->PCON = 0x09;
     1c2:	4905      	ldr	r1, [pc, #20]	; (1d8 <CLKPWR_PowerDown+0x18>)
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1c4:	2204      	movs	r2, #4
	LPC_SC->PCON = 0x09;
     1c6:	2009      	movs	r0, #9
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1c8:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x09;
     1ca:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
     1ce:	bf30      	wfi
     1d0:	4770      	bx	lr
     1d2:	bf00      	nop
     1d4:	e000ed00 	.word	0xe000ed00
     1d8:	400fc000 	.word	0x400fc000

000001dc <CLKPWR_DeepPowerDown>:
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1dc:	4b04      	ldr	r3, [pc, #16]	; (1f0 <CLKPWR_DeepPowerDown+0x14>)
	LPC_SC->PCON = 0x03;
     1de:	4905      	ldr	r1, [pc, #20]	; (1f4 <CLKPWR_DeepPowerDown+0x18>)
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1e0:	2204      	movs	r2, #4
	LPC_SC->PCON = 0x03;
     1e2:	2003      	movs	r0, #3
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     1e4:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x03;
     1e6:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
     1ea:	bf30      	wfi
     1ec:	4770      	bx	lr
     1ee:	bf00      	nop
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	400fc000 	.word	0x400fc000

000001f8 <EINT3_IRQHandler>:
	else if ((portNum == 2) && (edgeState == 0))
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
	else if ((portNum == 2) && (edgeState == 1))
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
     1f8:	4b21      	ldr	r3, [pc, #132]	; (280 <EINT3_IRQHandler+0x88>)
 * @brief		External interrupt 3 handler sub-routine
 * @param[in]	None
 * @return		None
 **********************************************************************/
void EINT3_IRQHandler(void)
{
     1fa:	b507      	push	{r0, r1, r2, lr}
	else if ((portNum == 2) && (edgeState == 0))
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
	else if ((portNum == 2) && (edgeState == 1))
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
     1fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 * @return		None
 **********************************************************************/
void EINT3_IRQHandler(void)
{
	ts_eventCal Touch;
	if(GPIO_GetIntStatus(2, 7, 1)) //Falling Edge
     1fe:	0612      	lsls	r2, r2, #24
     200:	d53c      	bpl.n	27c <EINT3_IRQHandler+0x84>
void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	if(portNum == 0)
		LPC_GPIOINT->IO0IntClr = bitValue;
	else if (portNum == 2)
		LPC_GPIOINT->IO2IntClr = bitValue;
     202:	2080      	movs	r0, #128	; 0x80
{
	ts_eventCal Touch;
	if(GPIO_GetIntStatus(2, 7, 1)) //Falling Edge
	{
		GPIO_ClearInt(2,_BIT(7));
		if(CalTouch == 0)
     204:	491f      	ldr	r1, [pc, #124]	; (284 <EINT3_IRQHandler+0x8c>)
void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	if(portNum == 0)
		LPC_GPIOINT->IO0IntClr = bitValue;
	else if (portNum == 2)
		LPC_GPIOINT->IO2IntClr = bitValue;
     206:	62d8      	str	r0, [r3, #44]	; 0x2c
{
	ts_eventCal Touch;
	if(GPIO_GetIntStatus(2, 7, 1)) //Falling Edge
	{
		GPIO_ClearInt(2,_BIT(7));
		if(CalTouch == 0)
     208:	780b      	ldrb	r3, [r1, #0]
     20a:	b9eb      	cbnz	r3, 248 <EINT3_IRQHandler+0x50>
		{
			TSC2004_Cal_Values(&Touch, &cmatrix);
     20c:	491e      	ldr	r1, [pc, #120]	; (288 <EINT3_IRQHandler+0x90>)
     20e:	a801      	add	r0, sp, #4
     210:	f002 faa0 	bl	2754 <TSC2004_Cal_Values>
			if((Touch.x<=320) && (Touch.y<=240))
     214:	f8bd 1004 	ldrh.w	r1, [sp, #4]
     218:	b28b      	uxth	r3, r1
     21a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
     21e:	d80d      	bhi.n	23c <EINT3_IRQHandler+0x44>
     220:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     224:	b290      	uxth	r0, r2
     226:	28f0      	cmp	r0, #240	; 0xf0
     228:	d808      	bhi.n	23c <EINT3_IRQHandler+0x44>
			{
				gTouch.x=Touch.x;
     22a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
     22e:	4b17      	ldr	r3, [pc, #92]	; (28c <EINT3_IRQHandler+0x94>)
     230:	b28a      	uxth	r2, r1
     232:	801a      	strh	r2, [r3, #0]
				gTouch.y=Touch.y;
     234:	f8bd 0006 	ldrh.w	r0, [sp, #6]
     238:	b281      	uxth	r1, r0
     23a:	8059      	strh	r1, [r3, #2]

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     23c:	4b14      	ldr	r3, [pc, #80]	; (290 <EINT3_IRQHandler+0x98>)
     23e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
     246:	e016      	b.n	276 <EINT3_IRQHandler+0x7e>
			}
			NVIC_DisableIRQ(EINT3_IRQn);
		}
		else if(CalTouch==1)
     248:	780a      	ldrb	r2, [r1, #0]
     24a:	2a01      	cmp	r2, #1
     24c:	d113      	bne.n	276 <EINT3_IRQHandler+0x7e>
		{
			TSC2004_Read_Values(&Touch);
     24e:	a801      	add	r0, sp, #4
     250:	f002 fb2d 	bl	28ae <TSC2004_Read_Values>
			if((Touch.x!=0) && (Touch.y!=0))
     254:	f8bd 0004 	ldrh.w	r0, [sp, #4]
     258:	b281      	uxth	r1, r0
     25a:	b161      	cbz	r1, 276 <EINT3_IRQHandler+0x7e>
     25c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     260:	b29a      	uxth	r2, r3
     262:	b142      	cbz	r2, 276 <EINT3_IRQHandler+0x7e>
			{
				gTouch.x=Touch.x;
     264:	f8bd 0004 	ldrh.w	r0, [sp, #4]
     268:	4b08      	ldr	r3, [pc, #32]	; (28c <EINT3_IRQHandler+0x94>)
     26a:	b281      	uxth	r1, r0
     26c:	8019      	strh	r1, [r3, #0]
				gTouch.y=Touch.y;
     26e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     272:	b290      	uxth	r0, r2
     274:	8058      	strh	r0, [r3, #2]
			}
		}
		TReady=TRUE;
     276:	4907      	ldr	r1, [pc, #28]	; (294 <EINT3_IRQHandler+0x9c>)
     278:	2001      	movs	r0, #1
     27a:	7008      	strb	r0, [r1, #0]
    }
}
     27c:	bd0e      	pop	{r1, r2, r3, pc}
     27e:	bf00      	nop
     280:	40028080 	.word	0x40028080
     284:	2007c004 	.word	0x2007c004
     288:	10000360 	.word	0x10000360
     28c:	1000037c 	.word	0x1000037c
     290:	e000e100 	.word	0xe000e100
     294:	10000034 	.word	0x10000034

00000298 <GPIO_SetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
     298:	2804      	cmp	r0, #4
     29a:	d80b      	bhi.n	2b4 <GPIO_SetDir+0x1c>
     29c:	4b06      	ldr	r3, [pc, #24]	; (2b8 <GPIO_SetDir+0x20>)
     29e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     2a2:	b138      	cbz	r0, 2b4 <GPIO_SetDir+0x1c>
		// Enable Output
		if (dir) {
     2a4:	b112      	cbz	r2, 2ac <GPIO_SetDir+0x14>
			pGPIO->FIODIR |= bitValue;
     2a6:	6803      	ldr	r3, [r0, #0]
     2a8:	4319      	orrs	r1, r3
     2aa:	e002      	b.n	2b2 <GPIO_SetDir+0x1a>
		}
		// Enable Input
		else {
			pGPIO->FIODIR &= ~bitValue;
     2ac:	6802      	ldr	r2, [r0, #0]
     2ae:	ea22 0101 	bic.w	r1, r2, r1
     2b2:	6001      	str	r1, [r0, #0]
     2b4:	4770      	bx	lr
     2b6:	bf00      	nop
     2b8:	00005ab0 	.word	0x00005ab0

000002bc <GPIO_SetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
     2bc:	2804      	cmp	r0, #4
     2be:	d804      	bhi.n	2ca <GPIO_SetValue+0xe>
     2c0:	4b02      	ldr	r3, [pc, #8]	; (2cc <GPIO_SetValue+0x10>)
     2c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     2c6:	b100      	cbz	r0, 2ca <GPIO_SetValue+0xe>
		pGPIO->FIOSET = bitValue;
     2c8:	6181      	str	r1, [r0, #24]
     2ca:	4770      	bx	lr
     2cc:	00005ab0 	.word	0x00005ab0

000002d0 <GPIO_ClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
     2d0:	2804      	cmp	r0, #4
     2d2:	d804      	bhi.n	2de <GPIO_ClearValue+0xe>
     2d4:	4b02      	ldr	r3, [pc, #8]	; (2e0 <GPIO_ClearValue+0x10>)
     2d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     2da:	b100      	cbz	r0, 2de <GPIO_ClearValue+0xe>
		pGPIO->FIOCLR = bitValue;
     2dc:	61c1      	str	r1, [r0, #28]
     2de:	4770      	bx	lr
     2e0:	00005ab0 	.word	0x00005ab0

000002e4 <GPIO_ReadValue>:
 *
 * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 * its direction is input or output.
 **********************************************************************/
uint32_t GPIO_ReadValue(uint8_t portNum)
{
     2e4:	2804      	cmp	r0, #4
     2e6:	d805      	bhi.n	2f4 <GPIO_ReadValue+0x10>
     2e8:	4b03      	ldr	r3, [pc, #12]	; (2f8 <GPIO_ReadValue+0x14>)
     2ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     2ee:	b110      	cbz	r0, 2f6 <GPIO_ReadValue+0x12>
		return pGPIO->FIOPIN;
     2f0:	6940      	ldr	r0, [r0, #20]
     2f2:	4770      	bx	lr
	}

	return (0);
     2f4:	2000      	movs	r0, #0
}
     2f6:	4770      	bx	lr
     2f8:	00005ab0 	.word	0x00005ab0

000002fc <GPIO_IntCmd>:
 * 							- 1: Falling edge
 * @return		None
 **********************************************************************/
void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	if((portNum == 0)&&(edgeState == 0))
     2fc:	b918      	cbnz	r0, 306 <GPIO_IntCmd+0xa>
     2fe:	b942      	cbnz	r2, 312 <GPIO_IntCmd+0x16>
		LPC_GPIOINT->IO0IntEnR = bitValue;
     300:	4b09      	ldr	r3, [pc, #36]	; (328 <GPIO_IntCmd+0x2c>)
     302:	6119      	str	r1, [r3, #16]
     304:	4770      	bx	lr
	else if ((portNum == 2)&&(edgeState == 0))
     306:	2802      	cmp	r0, #2
     308:	d10d      	bne.n	326 <GPIO_IntCmd+0x2a>
     30a:	b93a      	cbnz	r2, 31c <GPIO_IntCmd+0x20>
		LPC_GPIOINT->IO2IntEnR = bitValue;
     30c:	4806      	ldr	r0, [pc, #24]	; (328 <GPIO_IntCmd+0x2c>)
     30e:	6301      	str	r1, [r0, #48]	; 0x30
     310:	4770      	bx	lr
	else if ((portNum == 0)&&(edgeState == 1))
     312:	2a01      	cmp	r2, #1
     314:	d107      	bne.n	326 <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO0IntEnF = bitValue;
     316:	4a04      	ldr	r2, [pc, #16]	; (328 <GPIO_IntCmd+0x2c>)
     318:	6151      	str	r1, [r2, #20]
     31a:	4770      	bx	lr
	else if ((portNum == 2)&&(edgeState == 1))
     31c:	2a01      	cmp	r2, #1
     31e:	d102      	bne.n	326 <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO2IntEnF = bitValue;
     320:	4b01      	ldr	r3, [pc, #4]	; (328 <GPIO_IntCmd+0x2c>)
     322:	6359      	str	r1, [r3, #52]	; 0x34
     324:	4770      	bx	lr
     326:	e7fe      	b.n	326 <GPIO_IntCmd+0x2a>
     328:	40028080 	.word	0x40028080

0000032c <GPIO_GetIntStatus>:
 * 								edge on P0.0
 * 						- DISABLE: A rising edge has not been detected on P0.0
 **********************************************************************/
FunctionalState GPIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
	if((portNum == 0) && (edgeState == 0))//Rising Edge
     32c:	b918      	cbnz	r0, 336 <GPIO_GetIntStatus+0xa>
     32e:	b942      	cbnz	r2, 342 <GPIO_GetIntStatus+0x16>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatR)>>pinNum)& 0x1));
     330:	480b      	ldr	r0, [pc, #44]	; (360 <GPIO_GetIntStatus+0x34>)
     332:	6840      	ldr	r0, [r0, #4]
     334:	e00e      	b.n	354 <GPIO_GetIntStatus+0x28>
	else if ((portNum == 2) && (edgeState == 0))
     336:	2802      	cmp	r0, #2
     338:	d111      	bne.n	35e <GPIO_GetIntStatus+0x32>
     33a:	b93a      	cbnz	r2, 34c <GPIO_GetIntStatus+0x20>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
     33c:	4a08      	ldr	r2, [pc, #32]	; (360 <GPIO_GetIntStatus+0x34>)
     33e:	6a50      	ldr	r0, [r2, #36]	; 0x24
     340:	e008      	b.n	354 <GPIO_GetIntStatus+0x28>
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
     342:	2a01      	cmp	r2, #1
     344:	d10b      	bne.n	35e <GPIO_GetIntStatus+0x32>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
     346:	4b06      	ldr	r3, [pc, #24]	; (360 <GPIO_GetIntStatus+0x34>)
     348:	6898      	ldr	r0, [r3, #8]
     34a:	e003      	b.n	354 <GPIO_GetIntStatus+0x28>
	else if ((portNum == 2) && (edgeState == 1))
     34c:	2a01      	cmp	r2, #1
     34e:	d106      	bne.n	35e <GPIO_GetIntStatus+0x32>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
     350:	4b03      	ldr	r3, [pc, #12]	; (360 <GPIO_GetIntStatus+0x34>)
     352:	6a98      	ldr	r0, [r3, #40]	; 0x28
     354:	fa20 f101 	lsr.w	r1, r0, r1
     358:	f001 0001 	and.w	r0, r1, #1
     35c:	4770      	bx	lr
     35e:	e7fe      	b.n	35e <GPIO_GetIntStatus+0x32>
     360:	40028080 	.word	0x40028080

00000364 <GPIO_ClearInt>:
 * 							in range from 0 to 0xFFFFFFFF.
 * @return		None
 **********************************************************************/
void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	if(portNum == 0)
     364:	b910      	cbnz	r0, 36c <GPIO_ClearInt+0x8>
		LPC_GPIOINT->IO0IntClr = bitValue;
     366:	4804      	ldr	r0, [pc, #16]	; (378 <GPIO_ClearInt+0x14>)
     368:	60c1      	str	r1, [r0, #12]
     36a:	4770      	bx	lr
	else if (portNum == 2)
     36c:	2802      	cmp	r0, #2
     36e:	d102      	bne.n	376 <GPIO_ClearInt+0x12>
		LPC_GPIOINT->IO2IntClr = bitValue;
     370:	4b01      	ldr	r3, [pc, #4]	; (378 <GPIO_ClearInt+0x14>)
     372:	62d9      	str	r1, [r3, #44]	; 0x2c
     374:	4770      	bx	lr
     376:	e7fe      	b.n	376 <GPIO_ClearInt+0x12>
     378:	40028080 	.word	0x40028080

0000037c <FIO_SetDir>:
/**
 * @brief The same with GPIO_SetDir()
 */
void FIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
	GPIO_SetDir(portNum, bitValue, dir);
     37c:	f7ff bf8c 	b.w	298 <GPIO_SetDir>

00000380 <FIO_SetValue>:
/**
 * @brief The same with GPIO_SetValue()
 */
void FIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
	GPIO_SetValue(portNum, bitValue);
     380:	f7ff bf9c 	b.w	2bc <GPIO_SetValue>

00000384 <FIO_ClearValue>:
/**
 * @brief The same with GPIO_ClearValue()
 */
void FIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
	GPIO_ClearValue(portNum, bitValue);
     384:	f7ff bfa4 	b.w	2d0 <GPIO_ClearValue>

00000388 <FIO_ReadValue>:
/**
 * @brief The same with GPIO_ReadValue()
 */
uint32_t FIO_ReadValue(uint8_t portNum)
{
	return (GPIO_ReadValue(portNum));
     388:	f7ff bfac 	b.w	2e4 <GPIO_ReadValue>

0000038c <FIO_IntCmd>:
/**
 * @brief The same with GPIO_IntCmd()
 */
void FIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	GPIO_IntCmd(portNum, bitValue, edgeState);
     38c:	f7ff bfb6 	b.w	2fc <GPIO_IntCmd>

00000390 <FIO_GetIntStatus>:
/**
 * @brief The same with GPIO_GetIntStatus()
 */
FunctionalState FIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
	return (GPIO_GetIntStatus(portNum, pinNum, edgeState));
     390:	f7ff bfcc 	b.w	32c <GPIO_GetIntStatus>

00000394 <FIO_ClearInt>:
/**
 * @brief The same with GPIO_ClearInt()
 */
void FIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	GPIO_ClearInt(portNum, bitValue);
     394:	f7ff bfe6 	b.w	364 <GPIO_ClearInt>

00000398 <FIO_SetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_SetMask(uint8_t portNum, uint32_t bitValue, uint8_t maskValue)
{
     398:	2804      	cmp	r0, #4
     39a:	d80b      	bhi.n	3b4 <FIO_SetMask+0x1c>
     39c:	4b06      	ldr	r3, [pc, #24]	; (3b8 <FIO_SetMask+0x20>)
     39e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pFIO = GPIO_GetPointer(portNum);
	if(pFIO != NULL) {
     3a2:	b138      	cbz	r0, 3b4 <FIO_SetMask+0x1c>
		// Mask
		if (maskValue){
     3a4:	b112      	cbz	r2, 3ac <FIO_SetMask+0x14>
			pFIO->FIOMASK |= bitValue;
     3a6:	6903      	ldr	r3, [r0, #16]
     3a8:	4319      	orrs	r1, r3
     3aa:	e002      	b.n	3b2 <FIO_SetMask+0x1a>
		}
		// Un-mask
		else {
			pFIO->FIOMASK &= ~bitValue;
     3ac:	6902      	ldr	r2, [r0, #16]
     3ae:	ea22 0101 	bic.w	r1, r2, r1
     3b2:	6101      	str	r1, [r0, #16]
     3b4:	4770      	bx	lr
     3b6:	bf00      	nop
     3b8:	00005ab0 	.word	0x00005ab0

000003bc <FIO_HalfWordSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetDir(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t dir)
{
     3bc:	2804      	cmp	r0, #4
     3be:	b510      	push	{r4, lr}
     3c0:	d819      	bhi.n	3f6 <FIO_HalfWordSetDir+0x3a>
     3c2:	4c0d      	ldr	r4, [pc, #52]	; (3f8 <FIO_HalfWordSetDir+0x3c>)
     3c4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     3c8:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     3ca:	b1a0      	cbz	r0, 3f6 <FIO_HalfWordSetDir+0x3a>
		// Output direction
		if (dir) {
     3cc:	b143      	cbz	r3, 3e0 <FIO_HalfWordSetDir+0x24>
			// Upper
			if(halfwordNum) {
     3ce:	b119      	cbz	r1, 3d8 <FIO_HalfWordSetDir+0x1c>
				pFIO->FIODIRU |= bitValue;
     3d0:	8843      	ldrh	r3, [r0, #2]
     3d2:	b299      	uxth	r1, r3
     3d4:	430a      	orrs	r2, r1
     3d6:	e008      	b.n	3ea <FIO_HalfWordSetDir+0x2e>
			}
			// lower
			else {
				pFIO->FIODIRL |= bitValue;
     3d8:	8803      	ldrh	r3, [r0, #0]
     3da:	b299      	uxth	r1, r3
     3dc:	430a      	orrs	r2, r1
     3de:	e009      	b.n	3f4 <FIO_HalfWordSetDir+0x38>
     3e0:	43d2      	mvns	r2, r2
			}
		}
		// Input direction
		else {
			// Upper
			if(halfwordNum) {
     3e2:	b121      	cbz	r1, 3ee <FIO_HalfWordSetDir+0x32>
				pFIO->FIODIRU &= ~bitValue;
     3e4:	8843      	ldrh	r3, [r0, #2]
     3e6:	b299      	uxth	r1, r3
     3e8:	400a      	ands	r2, r1
     3ea:	8042      	strh	r2, [r0, #2]
     3ec:	bd10      	pop	{r4, pc}
			}
			// lower
			else {
				pFIO->FIODIRL &= ~bitValue;
     3ee:	8803      	ldrh	r3, [r0, #0]
     3f0:	b299      	uxth	r1, r3
     3f2:	400a      	ands	r2, r1
     3f4:	8002      	strh	r2, [r0, #0]
     3f6:	bd10      	pop	{r4, pc}
     3f8:	00005ab0 	.word	0x00005ab0

000003fc <FIO_HalfWordSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_HalfWordSetMask(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t maskValue)
{
     3fc:	2804      	cmp	r0, #4
     3fe:	b510      	push	{r4, lr}
     400:	d819      	bhi.n	436 <FIO_HalfWordSetMask+0x3a>
     402:	4c0d      	ldr	r4, [pc, #52]	; (438 <FIO_HalfWordSetMask+0x3c>)
     404:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     408:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     40a:	b1a0      	cbz	r0, 436 <FIO_HalfWordSetMask+0x3a>
		// Mask
		if (maskValue){
     40c:	b143      	cbz	r3, 420 <FIO_HalfWordSetMask+0x24>
			// Upper
			if(halfwordNum) {
     40e:	b119      	cbz	r1, 418 <FIO_HalfWordSetMask+0x1c>
				pFIO->FIOMASKU |= bitValue;
     410:	8a43      	ldrh	r3, [r0, #18]
     412:	b299      	uxth	r1, r3
     414:	430a      	orrs	r2, r1
     416:	e008      	b.n	42a <FIO_HalfWordSetMask+0x2e>
			}
			// lower
			else {
				pFIO->FIOMASKL |= bitValue;
     418:	8a03      	ldrh	r3, [r0, #16]
     41a:	b299      	uxth	r1, r3
     41c:	430a      	orrs	r2, r1
     41e:	e009      	b.n	434 <FIO_HalfWordSetMask+0x38>
     420:	43d2      	mvns	r2, r2
			}
		}
		// Un-mask
		else {
			// Upper
			if(halfwordNum) {
     422:	b121      	cbz	r1, 42e <FIO_HalfWordSetMask+0x32>
				pFIO->FIOMASKU &= ~bitValue;
     424:	8a43      	ldrh	r3, [r0, #18]
     426:	b299      	uxth	r1, r3
     428:	400a      	ands	r2, r1
     42a:	8242      	strh	r2, [r0, #18]
     42c:	bd10      	pop	{r4, pc}
			}
			// lower
			else {
				pFIO->FIOMASKL &= ~bitValue;
     42e:	8a03      	ldrh	r3, [r0, #16]
     430:	b299      	uxth	r1, r3
     432:	400a      	ands	r2, r1
     434:	8202      	strh	r2, [r0, #16]
     436:	bd10      	pop	{r4, pc}
     438:	00005ab0 	.word	0x00005ab0

0000043c <FIO_HalfWordSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
     43c:	2804      	cmp	r0, #4
     43e:	d808      	bhi.n	452 <FIO_HalfWordSetValue+0x16>
     440:	4b04      	ldr	r3, [pc, #16]	; (454 <FIO_HalfWordSetValue+0x18>)
     442:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     446:	6943      	ldr	r3, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     448:	b11b      	cbz	r3, 452 <FIO_HalfWordSetValue+0x16>
		// Upper
		if(halfwordNum) {
     44a:	b109      	cbz	r1, 450 <FIO_HalfWordSetValue+0x14>
			pFIO->FIOSETU = bitValue;
     44c:	835a      	strh	r2, [r3, #26]
     44e:	4770      	bx	lr
		}
		// lower
		else {
			pFIO->FIOSETL = bitValue;
     450:	831a      	strh	r2, [r3, #24]
     452:	4770      	bx	lr
     454:	00005ab0 	.word	0x00005ab0

00000458 <FIO_HalfWordClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordClearValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
     458:	2804      	cmp	r0, #4
     45a:	d808      	bhi.n	46e <FIO_HalfWordClearValue+0x16>
     45c:	4b04      	ldr	r3, [pc, #16]	; (470 <FIO_HalfWordClearValue+0x18>)
     45e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     462:	6943      	ldr	r3, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     464:	b11b      	cbz	r3, 46e <FIO_HalfWordClearValue+0x16>
		// Upper
		if(halfwordNum) {
     466:	b109      	cbz	r1, 46c <FIO_HalfWordClearValue+0x14>
			pFIO->FIOCLRU = bitValue;
     468:	83da      	strh	r2, [r3, #30]
     46a:	4770      	bx	lr
		}
		// lower
		else {
			pFIO->FIOCLRL = bitValue;
     46c:	839a      	strh	r2, [r3, #28]
     46e:	4770      	bx	lr
     470:	00005ab0 	.word	0x00005ab0

00000474 <FIO_HalfWordReadValue>:
 * @return		Current value of FIO port pin of specified halfword.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint16_t FIO_HalfWordReadValue(uint8_t portNum, uint8_t halfwordNum)
{
     474:	2804      	cmp	r0, #4
     476:	d80a      	bhi.n	48e <FIO_HalfWordReadValue+0x1a>
     478:	4b06      	ldr	r3, [pc, #24]	; (494 <FIO_HalfWordReadValue+0x20>)
     47a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     47e:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     480:	b130      	cbz	r0, 490 <FIO_HalfWordReadValue+0x1c>
		// Upper
		if(halfwordNum) {
     482:	b109      	cbz	r1, 488 <FIO_HalfWordReadValue+0x14>
			return (pFIO->FIOPINU);
     484:	8ac1      	ldrh	r1, [r0, #22]
     486:	e000      	b.n	48a <FIO_HalfWordReadValue+0x16>
		}
		// lower
		else {
			return (pFIO->FIOPINL);
     488:	8a81      	ldrh	r1, [r0, #20]
     48a:	b288      	uxth	r0, r1
     48c:	4770      	bx	lr
		}
	}
	return (0);
     48e:	2000      	movs	r0, #0
}
     490:	4770      	bx	lr
     492:	bf00      	nop
     494:	00005ab0 	.word	0x00005ab0

00000498 <FIO_ByteSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetDir(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t dir)
{
     498:	2804      	cmp	r0, #4
     49a:	b510      	push	{r4, lr}
     49c:	d810      	bhi.n	4c0 <FIO_ByteSetDir+0x28>
     49e:	4c09      	ldr	r4, [pc, #36]	; (4c4 <FIO_ByteSetDir+0x2c>)
     4a0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     4a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
     4a6:	b158      	cbz	r0, 4c0 <FIO_ByteSetDir+0x28>
		// Output direction
		if (dir) {
     4a8:	b123      	cbz	r3, 4b4 <FIO_ByteSetDir+0x1c>
			if (byteNum <= 3) {
     4aa:	2903      	cmp	r1, #3
     4ac:	d808      	bhi.n	4c0 <FIO_ByteSetDir+0x28>
				pFIO->FIODIR[byteNum] |= bitValue;
     4ae:	5c43      	ldrb	r3, [r0, r1]
     4b0:	431a      	orrs	r2, r3
     4b2:	e004      	b.n	4be <FIO_ByteSetDir+0x26>
			}
		}
		// Input direction
		else {
			if (byteNum <= 3) {
     4b4:	2903      	cmp	r1, #3
     4b6:	d803      	bhi.n	4c0 <FIO_ByteSetDir+0x28>
				pFIO->FIODIR[byteNum] &= ~bitValue;
     4b8:	5c43      	ldrb	r3, [r0, r1]
     4ba:	ea23 0202 	bic.w	r2, r3, r2
     4be:	5442      	strb	r2, [r0, r1]
     4c0:	bd10      	pop	{r4, pc}
     4c2:	bf00      	nop
     4c4:	00005ab0 	.word	0x00005ab0

000004c8 <FIO_ByteSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_ByteSetMask(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t maskValue)
{
     4c8:	2804      	cmp	r0, #4
     4ca:	b510      	push	{r4, lr}
     4cc:	d812      	bhi.n	4f4 <FIO_ByteSetMask+0x2c>
     4ce:	4c0a      	ldr	r4, [pc, #40]	; (4f8 <FIO_ByteSetMask+0x30>)
     4d0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     4d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
     4d6:	b168      	cbz	r0, 4f4 <FIO_ByteSetMask+0x2c>
		// Mask
		if (maskValue) {
     4d8:	b12b      	cbz	r3, 4e6 <FIO_ByteSetMask+0x1e>
			if (byteNum <= 3) {
     4da:	2903      	cmp	r1, #3
     4dc:	d80a      	bhi.n	4f4 <FIO_ByteSetMask+0x2c>
				pFIO->FIOMASK[byteNum] |= bitValue;
     4de:	1841      	adds	r1, r0, r1
     4e0:	7c08      	ldrb	r0, [r1, #16]
     4e2:	4302      	orrs	r2, r0
     4e4:	e005      	b.n	4f2 <FIO_ByteSetMask+0x2a>
			}
		}
		// Un-mask
		else {
			if (byteNum <= 3) {
     4e6:	2903      	cmp	r1, #3
     4e8:	d804      	bhi.n	4f4 <FIO_ByteSetMask+0x2c>
				pFIO->FIOMASK[byteNum] &= ~bitValue;
     4ea:	1841      	adds	r1, r0, r1
     4ec:	7c0b      	ldrb	r3, [r1, #16]
     4ee:	ea23 0202 	bic.w	r2, r3, r2
     4f2:	740a      	strb	r2, [r1, #16]
     4f4:	bd10      	pop	{r4, pc}
     4f6:	bf00      	nop
     4f8:	00005ab0 	.word	0x00005ab0

000004fc <FIO_ByteSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
     4fc:	2804      	cmp	r0, #4
     4fe:	d808      	bhi.n	512 <FIO_ByteSetValue+0x16>
     500:	4b04      	ldr	r3, [pc, #16]	; (514 <FIO_ByteSetValue+0x18>)
     502:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     506:	6a83      	ldr	r3, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
     508:	b11b      	cbz	r3, 512 <FIO_ByteSetValue+0x16>
		if (byteNum <= 3){
     50a:	2903      	cmp	r1, #3
			pFIO->FIOSET[byteNum] = bitValue;
     50c:	bf9c      	itt	ls
     50e:	1859      	addls	r1, r3, r1
     510:	760a      	strbls	r2, [r1, #24]
     512:	4770      	bx	lr
     514:	00005ab0 	.word	0x00005ab0

00000518 <FIO_ByteClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteClearValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
     518:	2804      	cmp	r0, #4
     51a:	d808      	bhi.n	52e <FIO_ByteClearValue+0x16>
     51c:	4b04      	ldr	r3, [pc, #16]	; (530 <FIO_ByteClearValue+0x18>)
     51e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     522:	6a83      	ldr	r3, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
     524:	b11b      	cbz	r3, 52e <FIO_ByteClearValue+0x16>
		if (byteNum <= 3){
     526:	2903      	cmp	r1, #3
			pFIO->FIOCLR[byteNum] = bitValue;
     528:	bf9c      	itt	ls
     52a:	1859      	addls	r1, r3, r1
     52c:	770a      	strbls	r2, [r1, #28]
     52e:	4770      	bx	lr
     530:	00005ab0 	.word	0x00005ab0

00000534 <FIO_ByteReadValue>:
 * @return		Current value of FIO port pin of specified byte part.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint8_t FIO_ByteReadValue(uint8_t portNum, uint8_t byteNum)
{
     534:	2804      	cmp	r0, #4
     536:	d809      	bhi.n	54c <FIO_ByteReadValue+0x18>
     538:	4b05      	ldr	r3, [pc, #20]	; (550 <FIO_ByteReadValue+0x1c>)
     53a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     53e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
     540:	b128      	cbz	r0, 54e <FIO_ByteReadValue+0x1a>
		if (byteNum <= 3){
     542:	2903      	cmp	r1, #3
     544:	d802      	bhi.n	54c <FIO_ByteReadValue+0x18>
			return (pFIO->FIOPIN[byteNum]);
     546:	1841      	adds	r1, r0, r1
     548:	7d08      	ldrb	r0, [r1, #20]
     54a:	4770      	bx	lr
		}
	}
	return (0);
     54c:	2000      	movs	r0, #0
}
     54e:	4770      	bx	lr
     550:	00005ab0 	.word	0x00005ab0

00000554 <I2C_getNum>:
 * 				- LPC_I2C2
 * @return 		I2C number, could be: 0..2
 *********************************************************************/
static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx)
{
	if (I2Cx == LPC_I2C0)
     554:	4b09      	ldr	r3, [pc, #36]	; (57c <I2C_getNum+0x28>)
     556:	4298      	cmp	r0, r3
     558:	d00b      	beq.n	572 <I2C_getNum+0x1e>
	{
		return (0);
	}
	else if (I2Cx == LPC_I2C1)
     55a:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
     55e:	4288      	cmp	r0, r1
     560:	d009      	beq.n	576 <I2C_getNum+0x22>
	{
		return (1);
	}
	else if (I2Cx == LPC_I2C2)
	{
		return (2);
     562:	f501 2288 	add.w	r2, r1, #278528	; 0x44000
     566:	4290      	cmp	r0, r2
     568:	bf14      	ite	ne
     56a:	f04f 30ff 	movne.w	r0, #4294967295
     56e:	2002      	moveq	r0, #2
     570:	4770      	bx	lr
 *********************************************************************/
static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx)
{
	if (I2Cx == LPC_I2C0)
	{
		return (0);
     572:	2000      	movs	r0, #0
     574:	4770      	bx	lr
	}
	else if (I2Cx == LPC_I2C1)
	{
		return (1);
     576:	2001      	movs	r0, #1
	else if (I2Cx == LPC_I2C2)
	{
		return (2);
	}
	return (-1);
}
     578:	4770      	bx	lr
     57a:	bf00      	nop
     57c:	4001c000 	.word	0x4001c000

00000580 <I2C_SendByte>:
 * @return 		value of I2C status register after sending
 *********************************************************************/
static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     580:	6803      	ldr	r3, [r0, #0]
     582:	069a      	lsls	r2, r3, #26
     584:	d501      	bpl.n	58a <I2C_SendByte+0xa>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     586:	2220      	movs	r2, #32
     588:	6182      	str	r2, [r0, #24]
	}
	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;
     58a:	6081      	str	r1, [r0, #8]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     58c:	2108      	movs	r1, #8
     58e:	6181      	str	r1, [r0, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     590:	6803      	ldr	r3, [r0, #0]
     592:	071b      	lsls	r3, r3, #28
     594:	d5fc      	bpl.n	590 <I2C_SendByte+0x10>
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     596:	6840      	ldr	r0, [r0, #4]
}
     598:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
     59c:	4770      	bx	lr

0000059e <Buffer_Init>:
 * @brief		Initialize buffer
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Buffer_Init (void)
{
     59e:	2300      	movs	r3, #0
	uint8_t i;
#if (I2C_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE; i++)
	{
		I2C_Tx_Buf[i] = 0;
     5a0:	4904      	ldr	r1, [pc, #16]	; (5b4 <Buffer_Init+0x16>)
		I2C_Rx_Buf[i] = 0;
     5a2:	4805      	ldr	r0, [pc, #20]	; (5b8 <Buffer_Init+0x1a>)
{
	uint8_t i;
#if (I2C_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE; i++)
	{
		I2C_Tx_Buf[i] = 0;
     5a4:	2200      	movs	r2, #0
     5a6:	545a      	strb	r2, [r3, r1]
		I2C_Rx_Buf[i] = 0;
     5a8:	541a      	strb	r2, [r3, r0]
     5aa:	3301      	adds	r3, #1
 **********************************************************************/
void Buffer_Init (void)
{
	uint8_t i;
#if (I2C_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE; i++)
     5ac:	2b40      	cmp	r3, #64	; 0x40
     5ae:	d1f7      	bne.n	5a0 <Buffer_Init+0x2>
	{
		I2C_Tx_Buf[i] = 0;
		I2C_Rx_Buf[i] = 0;
	}
#endif
}
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	1000028c 	.word	0x1000028c
     5b8:	10000038 	.word	0x10000038

000005bc <I2C_Init>:
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
     5bc:	b538      	push	{r3, r4, r5, lr}
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
     5be:	4b1b      	ldr	r3, [pc, #108]	; (62c <I2C_Init+0x70>)
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
     5c0:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
     5c2:	4298      	cmp	r0, r3
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
     5c4:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
     5c6:	d109      	bne.n	5dc <I2C_Init+0x20>
	{
		/* Set up clock and power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
     5c8:	2080      	movs	r0, #128	; 0x80
     5ca:	2101      	movs	r1, #1
     5cc:	f7ff fdc8 	bl	160 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C0 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
     5d0:	200e      	movs	r0, #14
     5d2:	2102      	movs	r1, #2
     5d4:	f7ff fd7a 	bl	cc <CLKPWR_SetPCLKDiv>
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	// Get PCLK of I2C controller
	if (I2Cx == LPC_I2C0)
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
     5d8:	200e      	movs	r0, #14
     5da:	e01a      	b.n	612 <I2C_Init+0x56>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
		/* As default, peripheral clock for I2C0 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
	}
	else if (I2Cx==LPC_I2C1)
     5dc:	4814      	ldr	r0, [pc, #80]	; (630 <I2C_Init+0x74>)
     5de:	4284      	cmp	r4, r0
     5e0:	d10a      	bne.n	5f8 <I2C_Init+0x3c>
	{
		/* Set up clock and power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
     5e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     5e6:	2101      	movs	r1, #1
     5e8:	f7ff fdba 	bl	160 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C1 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
     5ec:	2026      	movs	r0, #38	; 0x26
     5ee:	2102      	movs	r1, #2
     5f0:	f7ff fd6c 	bl	cc <CLKPWR_SetPCLKDiv>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
	}
	else if (I2Cx == LPC_I2C1)
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
     5f4:	2026      	movs	r0, #38	; 0x26
     5f6:	e00c      	b.n	612 <I2C_Init+0x56>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
		/* As default, peripheral clock for I2C1 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
	}
	else if (I2Cx==LPC_I2C2)
     5f8:	490e      	ldr	r1, [pc, #56]	; (634 <I2C_Init+0x78>)
     5fa:	428c      	cmp	r4, r1
     5fc:	d114      	bne.n	628 <I2C_Init+0x6c>
	{
		/* Set up clock and power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, ENABLE);
     5fe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
     602:	2101      	movs	r1, #1
     604:	f7ff fdac 	bl	160 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C2 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
     608:	2034      	movs	r0, #52	; 0x34
     60a:	2102      	movs	r1, #2
     60c:	f7ff fd5e 	bl	cc <CLKPWR_SetPCLKDiv>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
	}
	else if (I2Cx == LPC_I2C2)
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
     610:	2034      	movs	r0, #52	; 0x34
     612:	f7ff fd95 	bl	140 <CLKPWR_GetPCLK>
     616:	fbb0 f2f5 	udiv	r2, r0, r5
	}

	/* Set the I2C clock value to register */
	I2Cx->I2SCLH = (uint32_t)(temp / 2);
     61a:	0853      	lsrs	r3, r2, #1
     61c:	6123      	str	r3, [r4, #16]
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
     61e:	6920      	ldr	r0, [r4, #16]
     620:	1a11      	subs	r1, r2, r0
	}

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
     622:	2264      	movs	r2, #100	; 0x64
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
	}

	/* Set the I2C clock value to register */
	I2Cx->I2SCLH = (uint32_t)(temp / 2);
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
     624:	6161      	str	r1, [r4, #20]
	}

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
     626:	61a2      	str	r2, [r4, #24]
     628:	bd38      	pop	{r3, r4, r5, pc}
     62a:	bf00      	nop
     62c:	4001c000 	.word	0x4001c000
     630:	4005c000 	.word	0x4005c000
     634:	400a0000 	.word	0x400a0000

00000638 <I2C_Config>:
void I2C_Config (LPC_I2C_TypeDef *I2Cx)
{
	// Pin configuration for I2C
	PINSEL_CFG_Type PinCfg;

	if(I2Cx == LPC_I2C0)
     638:	4b12      	ldr	r3, [pc, #72]	; (684 <I2C_Config+0x4c>)
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 ***********************************************************************/
void I2C_Config (LPC_I2C_TypeDef *I2Cx)
{
     63a:	b513      	push	{r0, r1, r4, lr}
	// Pin configuration for I2C
	PINSEL_CFG_Type PinCfg;

	if(I2Cx == LPC_I2C0)
     63c:	4298      	cmp	r0, r3
     63e:	d116      	bne.n	66e <I2C_Config+0x36>
	{
		/*
		 * Init I2C pin connect
		 */
		PinCfg.OpenDrain = 0;
     640:	2000      	movs	r0, #0
		PinCfg.Pinmode = 0;
		PinCfg.Funcnum = 1;
		PinCfg.Pinnum = 27;
		PinCfg.Portnum = 0;
     642:	ac02      	add	r4, sp, #8
	if(I2Cx == LPC_I2C0)
	{
		/*
		 * Init I2C pin connect
		 */
		PinCfg.OpenDrain = 0;
     644:	f88d 0004 	strb.w	r0, [sp, #4]
		PinCfg.Pinmode = 0;
     648:	f88d 0003 	strb.w	r0, [sp, #3]
		PinCfg.Funcnum = 1;
     64c:	2201      	movs	r2, #1
		PinCfg.Pinnum = 27;
     64e:	211b      	movs	r1, #27
		PinCfg.Portnum = 0;
     650:	f804 0d08 	strb.w	r0, [r4, #-8]!
		PINSEL_ConfigPin(&PinCfg);
     654:	4668      	mov	r0, sp
		/*
		 * Init I2C pin connect
		 */
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Funcnum = 1;
     656:	f88d 2002 	strb.w	r2, [sp, #2]
		PinCfg.Pinnum = 27;
     65a:	f88d 1001 	strb.w	r1, [sp, #1]
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
     65e:	f000 fbcd 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 28;
     662:	231c      	movs	r3, #28
		PINSEL_ConfigPin(&PinCfg);
     664:	4668      	mov	r0, sp
		PinCfg.Pinmode = 0;
		PinCfg.Funcnum = 1;
		PinCfg.Pinnum = 27;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 28;
     666:	f88d 3001 	strb.w	r3, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
     66a:	f000 fbc7 	bl	dfc <PINSEL_ConfigPin>
	}

	/* I2C block ------------------------------------------------------------------- */
	// Initialize I2C peripheral
	I2C_Init(LPC_I2C0, 200000);
     66e:	4c05      	ldr	r4, [pc, #20]	; (684 <I2C_Config+0x4c>)
     670:	4905      	ldr	r1, [pc, #20]	; (688 <I2C_Config+0x50>)
     672:	4620      	mov	r0, r4
     674:	f7ff ffa2 	bl	5bc <I2C_Init>

	Buffer_Init ();
     678:	f7ff ff91 	bl	59e <Buffer_Init>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (NewState == ENABLE)
	{
		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
     67c:	2040      	movs	r0, #64	; 0x40
     67e:	6020      	str	r0, [r4, #0]

	Buffer_Init ();

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C0, ENABLE);
}
     680:	bd1c      	pop	{r2, r3, r4, pc}
     682:	bf00      	nop
     684:	4001c000 	.word	0x4001c000
     688:	00030d40 	.word	0x00030d40

0000068c <I2C_DeInit>:
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;

	if (I2Cx==LPC_I2C0)
     68c:	490a      	ldr	r1, [pc, #40]	; (6b8 <I2C_DeInit+0x2c>)
void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
     68e:	2340      	movs	r3, #64	; 0x40

	if (I2Cx==LPC_I2C0)
     690:	4288      	cmp	r0, r1
void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
     692:	6183      	str	r3, [r0, #24]

	if (I2Cx==LPC_I2C0)
     694:	d101      	bne.n	69a <I2C_DeInit+0xe>
	{
		/* Disable power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
     696:	2080      	movs	r0, #128	; 0x80
     698:	e00a      	b.n	6b0 <I2C_DeInit+0x24>
	}
	else if (I2Cx==LPC_I2C1)
     69a:	4a08      	ldr	r2, [pc, #32]	; (6bc <I2C_DeInit+0x30>)
     69c:	4290      	cmp	r0, r2
	{
		/* Disable power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
     69e:	bf08      	it	eq
     6a0:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
	if (I2Cx==LPC_I2C0)
	{
		/* Disable power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
	}
	else if (I2Cx==LPC_I2C1)
     6a4:	d004      	beq.n	6b0 <I2C_DeInit+0x24>
	{
		/* Disable power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
	}
	else if (I2Cx==LPC_I2C2)
     6a6:	4b06      	ldr	r3, [pc, #24]	; (6c0 <I2C_DeInit+0x34>)
     6a8:	4298      	cmp	r0, r3
     6aa:	d104      	bne.n	6b6 <I2C_DeInit+0x2a>
	{
		/* Disable power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
     6ac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
     6b0:	2100      	movs	r1, #0
     6b2:	f7ff bd55 	b.w	160 <CLKPWR_ConfigPPWR>
     6b6:	4770      	bx	lr
     6b8:	4001c000 	.word	0x4001c000
     6bc:	4005c000 	.word	0x4005c000
     6c0:	400a0000 	.word	0x400a0000

000006c4 <I2C_Cmd>:
void I2C_Cmd(LPC_I2C_TypeDef* I2Cx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (NewState == ENABLE)
     6c4:	2901      	cmp	r1, #1
     6c6:	f04f 0340 	mov.w	r3, #64	; 0x40
	{
		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
     6ca:	bf0c      	ite	eq
     6cc:	6003      	streq	r3, [r0, #0]
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
     6ce:	6183      	strne	r3, [r0, #24]
     6d0:	4770      	bx	lr

000006d2 <I2C_IntCmd>:
 * 				- ENABLE: enable interrupt for this I2C peripheral
 * 				- DISABLE: disable interrupt for this I2C peripheral
 * @return 		None
 **********************************************************************/
void I2C_IntCmd (LPC_I2C_TypeDef *I2Cx, Bool NewState)
{
     6d2:	4b15      	ldr	r3, [pc, #84]	; (728 <I2C_IntCmd+0x56>)
	if (NewState)
     6d4:	b199      	cbz	r1, 6fe <I2C_IntCmd+0x2c>
	{
		if(I2Cx == LPC_I2C0)
     6d6:	4298      	cmp	r0, r3

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     6d8:	bf08      	it	eq
     6da:	f44f 6280 	moveq.w	r2, #1024	; 0x400
     6de:	d004      	beq.n	6ea <I2C_IntCmd+0x18>
		{
			NVIC_EnableIRQ(I2C0_IRQn);
		}
		else if (I2Cx == LPC_I2C1)
     6e0:	4b12      	ldr	r3, [pc, #72]	; (72c <I2C_IntCmd+0x5a>)
     6e2:	4298      	cmp	r0, r3
     6e4:	d104      	bne.n	6f0 <I2C_IntCmd+0x1e>
     6e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
     6ea:	4811      	ldr	r0, [pc, #68]	; (730 <I2C_IntCmd+0x5e>)
     6ec:	6002      	str	r2, [r0, #0]
     6ee:	4770      	bx	lr
		{
			NVIC_EnableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
     6f0:	4910      	ldr	r1, [pc, #64]	; (734 <I2C_IntCmd+0x62>)
     6f2:	4288      	cmp	r0, r1
     6f4:	bf08      	it	eq
     6f6:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
     6fa:	d113      	bne.n	724 <I2C_IntCmd+0x52>
     6fc:	e7f5      	b.n	6ea <I2C_IntCmd+0x18>
			NVIC_EnableIRQ(I2C2_IRQn);
		}
	}
	else
	{
		if(I2Cx == LPC_I2C0)
     6fe:	4298      	cmp	r0, r3

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     700:	bf08      	it	eq
     702:	f44f 6280 	moveq.w	r2, #1024	; 0x400
     706:	d00a      	beq.n	71e <I2C_IntCmd+0x4c>
		{
			NVIC_DisableIRQ(I2C0_IRQn);
		}
		else if (I2Cx == LPC_I2C1)
     708:	4908      	ldr	r1, [pc, #32]	; (72c <I2C_IntCmd+0x5a>)
     70a:	4288      	cmp	r0, r1
     70c:	bf08      	it	eq
     70e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
     712:	d004      	beq.n	71e <I2C_IntCmd+0x4c>
		{
			NVIC_DisableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
     714:	4a07      	ldr	r2, [pc, #28]	; (734 <I2C_IntCmd+0x62>)
     716:	4290      	cmp	r0, r2
     718:	d104      	bne.n	724 <I2C_IntCmd+0x52>
     71a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     71e:	4804      	ldr	r0, [pc, #16]	; (730 <I2C_IntCmd+0x5e>)
     720:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
     724:	4770      	bx	lr
     726:	bf00      	nop
     728:	4001c000 	.word	0x4001c000
     72c:	4005c000 	.word	0x4005c000
     730:	e000e100 	.word	0xe000e100
     734:	400a0000 	.word	0x400a0000

00000738 <I2C_MasterHandler>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_MasterHandler (LPC_I2C_TypeDef  *I2Cx)
{
     738:	b538      	push	{r3, r4, r5, lr}
     73a:	4604      	mov	r4, r0
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
     73c:	f7ff ff0a 	bl	554 <I2C_getNum>
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     740:	6862      	ldr	r2, [r4, #4]
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
     742:	495b      	ldr	r1, [pc, #364]	; (8b0 <__Stack_Size+0xe0>)

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     744:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
     748:	f851 3030 	ldr.w	r3, [r1, r0, lsl #3]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
	// Save current status
	txrx_setup->status = returnCode;
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     74c:	2af8      	cmp	r2, #248	; 0xf8
{
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
     74e:	4605      	mov	r5, r0
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
	// Save current status
	txrx_setup->status = returnCode;
     750:	625a      	str	r2, [r3, #36]	; 0x24
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     752:	d076      	beq.n	842 <__Stack_Size+0x72>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		return;
	}

	/* ----------------------------- TRANSMIT PHASE --------------------------*/
	if (i2cdat[tmp].dir == 0)
     754:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
     758:	6841      	ldr	r1, [r0, #4]
     75a:	2900      	cmp	r1, #0
     75c:	d141      	bne.n	7e2 <__Stack_Size+0x12>
	{
		switch (returnCode)
     75e:	2a20      	cmp	r2, #32
     760:	d03c      	beq.n	7dc <__Stack_Size+0xc>
     762:	dc06      	bgt.n	772 <I2C_MasterHandler+0x3a>
     764:	2a10      	cmp	r2, #16
     766:	d00b      	beq.n	780 <I2C_MasterHandler+0x48>
     768:	2a18      	cmp	r2, #24
     76a:	d012      	beq.n	792 <I2C_MasterHandler+0x5a>
     76c:	2a08      	cmp	r2, #8
     76e:	d17e      	bne.n	86e <__Stack_Size+0x9e>
     770:	e006      	b.n	780 <I2C_MasterHandler+0x48>
     772:	2a30      	cmp	r2, #48	; 0x30
     774:	d032      	beq.n	7dc <__Stack_Size+0xc>
     776:	2a38      	cmp	r2, #56	; 0x38
     778:	d076      	beq.n	868 <__Stack_Size+0x98>
     77a:	2a28      	cmp	r2, #40	; 0x28
     77c:	d177      	bne.n	86e <__Stack_Size+0x9e>
     77e:	e008      	b.n	792 <I2C_MasterHandler+0x5a>
			/*
			 * If there's any transmit data, then start to
			 * send SLA+W right now, otherwise check whether if there's
			 * any receive data for next state.
			 */
			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0))
     780:	6859      	ldr	r1, [r3, #4]
		switch (returnCode)
		{
		/* A start/repeat start condition has been transmitted -------------------*/
		case I2C_I2STAT_M_TX_START:
		case I2C_I2STAT_M_TX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     782:	2020      	movs	r0, #32
     784:	61a0      	str	r0, [r4, #24]
			/*
			 * If there's any transmit data, then start to
			 * send SLA+W right now, otherwise check whether if there's
			 * any receive data for next state.
			 */
			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0))
     786:	b179      	cbz	r1, 7a8 <I2C_MasterHandler+0x70>
     788:	6898      	ldr	r0, [r3, #8]
     78a:	b168      	cbz	r0, 7a8 <I2C_MasterHandler+0x70>
			{
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
     78c:	681b      	ldr	r3, [r3, #0]
     78e:	0059      	lsls	r1, r3, #1
     790:	e01b      	b.n	7ca <I2C_MasterHandler+0x92>
		/* SLA+W has been transmitted, ACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_ACK:
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
     792:	68d9      	ldr	r1, [r3, #12]
     794:	6898      	ldr	r0, [r3, #8]
     796:	4281      	cmp	r1, r0
     798:	d206      	bcs.n	7a8 <I2C_MasterHandler+0x70>
     79a:	6858      	ldr	r0, [r3, #4]
     79c:	b120      	cbz	r0, 7a8 <I2C_MasterHandler+0x70>
			{
				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
     79e:	5c42      	ldrb	r2, [r0, r1]
				txrx_setup->tx_count++;
     7a0:	3101      	adds	r1, #1
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
			{
				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
     7a2:	60a2      	str	r2, [r4, #8]
				txrx_setup->tx_count++;
     7a4:	60d9      	str	r1, [r3, #12]
     7a6:	e04c      	b.n	842 <__Stack_Size+0x72>
			// no more data, switch to next stage
			else
			{
next_stage:
				// change direction
				i2cdat[tmp].dir = 1;
     7a8:	4941      	ldr	r1, [pc, #260]	; (8b0 <__Stack_Size+0xe0>)
     7aa:	2001      	movs	r0, #1
     7ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
     7b0:	6048      	str	r0, [r1, #4]
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL))
     7b2:	6959      	ldr	r1, [r3, #20]
     7b4:	2900      	cmp	r1, #0
     7b6:	d053      	beq.n	860 <__Stack_Size+0x90>
     7b8:	6918      	ldr	r0, [r3, #16]
     7ba:	2800      	cmp	r0, #0
     7bc:	d050      	beq.n	860 <__Stack_Size+0x90>
				{
					// check whether if we need to issue an repeat start
					if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL))
     7be:	6899      	ldr	r1, [r3, #8]
     7c0:	b929      	cbnz	r1, 7ce <I2C_MasterHandler+0x96>
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
			{
send_slar:
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
     7c2:	681b      	ldr	r3, [r3, #0]
     7c4:	005a      	lsls	r2, r3, #1
     7c6:	f042 0101 	orr.w	r1, r2, #1
     7ca:	60a1      	str	r1, [r4, #8]
     7cc:	e039      	b.n	842 <__Stack_Size+0x72>
				i2cdat[tmp].dir = 1;
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL))
				{
					// check whether if we need to issue an repeat start
					if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL))
     7ce:	6858      	ldr	r0, [r3, #4]
     7d0:	2800      	cmp	r0, #0
     7d2:	d0f6      	beq.n	7c2 <I2C_MasterHandler+0x8a>
					{
						// Send out an repeat start command
						I2Cx->I2CONSET = I2C_I2CONSET_STA;
     7d4:	2020      	movs	r0, #32
     7d6:	6020      	str	r0, [r4, #0]
						I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
     7d8:	230c      	movs	r3, #12
     7da:	e033      	b.n	844 <__Stack_Size+0x74>
		/* SLA+W has been transmitted, NACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_NACK:
		/* Data has been transmitted, NACK has been received -----------------------*/
		case I2C_I2STAT_M_TX_DAT_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
     7dc:	f442 7000 	orr.w	r0, r2, #512	; 0x200
     7e0:	e044      	b.n	86c <__Stack_Size+0x9c>
			goto retry;
		}
	}

	/* ----------------------------- RECEIVE PHASE --------------------------*/
	else if (i2cdat[tmp].dir == 1)
     7e2:	2901      	cmp	r1, #1
     7e4:	d162      	bne.n	8ac <__Stack_Size+0xdc>
	{
		switch (returnCode)
     7e6:	2a40      	cmp	r2, #64	; 0x40
     7e8:	d022      	beq.n	830 <__Stack_Size+0x60>
     7ea:	dc06      	bgt.n	7fa <__Stack_Size+0x2a>
     7ec:	2a10      	cmp	r2, #16
     7ee:	d00d      	beq.n	80c <__Stack_Size+0x3c>
     7f0:	2a38      	cmp	r2, #56	; 0x38
     7f2:	d039      	beq.n	868 <__Stack_Size+0x98>
     7f4:	2a08      	cmp	r2, #8
     7f6:	d13a      	bne.n	86e <__Stack_Size+0x9e>
     7f8:	e008      	b.n	80c <__Stack_Size+0x3c>
     7fa:	2a50      	cmp	r2, #80	; 0x50
     7fc:	d00d      	beq.n	81a <__Stack_Size+0x4a>
     7fe:	2a58      	cmp	r2, #88	; 0x58
     800:	d022      	beq.n	848 <__Stack_Size+0x78>
     802:	2a48      	cmp	r2, #72	; 0x48
     804:	d133      	bne.n	86e <__Stack_Size+0x9e>
			goto end_stage;

		/* SLA+R has been transmitted, NACK has been received ------------------*/
		case I2C_I2STAT_M_RX_SLAR_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
     806:	f44f 7012 	mov.w	r0, #584	; 0x248
     80a:	e02f      	b.n	86c <__Stack_Size+0x9c>
			/*
			 * If there's any receive data, then start to
			 * send SLA+R right now, otherwise check whether if there's
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
     80c:	6919      	ldr	r1, [r3, #16]
		switch (returnCode)
		{
			/* A start/repeat start condition has been transmitted ---------------------*/
		case I2C_I2STAT_M_RX_START:
		case I2C_I2STAT_M_RX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     80e:	2020      	movs	r0, #32
     810:	61a0      	str	r0, [r4, #24]
			/*
			 * If there's any receive data, then start to
			 * send SLA+R right now, otherwise check whether if there's
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
     812:	b329      	cbz	r1, 860 <__Stack_Size+0x90>
     814:	6958      	ldr	r0, [r3, #20]
     816:	b318      	cbz	r0, 860 <__Stack_Size+0x90>
     818:	e7d3      	b.n	7c2 <I2C_MasterHandler+0x8a>

		/* Data has been received, ACK has been returned ----------------------*/
		case I2C_I2STAT_M_RX_DAT_ACK:
			// Note save data and increase counter first, then check later
			/* Save data  */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
     81a:	6919      	ldr	r1, [r3, #16]
     81c:	b141      	cbz	r1, 830 <__Stack_Size+0x60>
     81e:	699a      	ldr	r2, [r3, #24]
     820:	6958      	ldr	r0, [r3, #20]
     822:	4282      	cmp	r2, r0
     824:	d204      	bcs.n	830 <__Stack_Size+0x60>
			{
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     826:	68a0      	ldr	r0, [r4, #8]
     828:	5488      	strb	r0, [r1, r2]
				txrx_setup->rx_count++;
     82a:	6999      	ldr	r1, [r3, #24]
     82c:	1c4a      	adds	r2, r1, #1
     82e:	619a      	str	r2, [r3, #24]
			}
			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1))
     830:	6958      	ldr	r0, [r3, #20]
     832:	699b      	ldr	r3, [r3, #24]
     834:	1e41      	subs	r1, r0, #1
     836:	428b      	cmp	r3, r1
     838:	f04f 0204 	mov.w	r2, #4
			{
				/*Data will be received,  ACK will be return*/
				I2Cx->I2CONSET = I2C_I2CONSET_AA;
     83c:	bf34      	ite	cc
     83e:	6022      	strcc	r2, [r4, #0]
			}
			else
			{
				/*Last data will be received,  NACK will be return*/
				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
     840:	61a2      	strcs	r2, [r4, #24]
			}

			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     842:	2308      	movs	r3, #8
     844:	61a3      	str	r3, [r4, #24]
			break;
     846:	bd38      	pop	{r3, r4, r5, pc}

		/* Data has been received, NACK has been return -------------------------*/
		case I2C_I2STAT_M_RX_DAT_NACK:
			/* Save the last data */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
     848:	6919      	ldr	r1, [r3, #16]
     84a:	b141      	cbz	r1, 85e <__Stack_Size+0x8e>
     84c:	699a      	ldr	r2, [r3, #24]
     84e:	6958      	ldr	r0, [r3, #20]
     850:	4282      	cmp	r2, r0
     852:	d204      	bcs.n	85e <__Stack_Size+0x8e>
			{
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     854:	68a0      	ldr	r0, [r4, #8]
     856:	5488      	strb	r0, [r1, r2]
				txrx_setup->rx_count++;
     858:	6999      	ldr	r1, [r3, #24]
     85a:	1c4a      	adds	r2, r1, #1
     85c:	619a      	str	r2, [r3, #24]
			}
			// success, go to end stage
			txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     85e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     864:	625a      	str	r2, [r3, #36]	; 0x24
			goto end_stage;
     866:	e00f      	b.n	888 <__Stack_Size+0xb8>
			goto retry;

		/* Arbitration lost ----------------------------------------------------*/
		case I2C_I2STAT_M_RX_ARB_LOST:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
     868:	f44f 709c 	mov.w	r0, #312	; 0x138
     86c:	6258      	str	r0, [r3, #36]	; 0x24
		default:
retry:
			// check if retransmission is available
			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max)
     86e:	6a1a      	ldr	r2, [r3, #32]
     870:	69d9      	ldr	r1, [r3, #28]
     872:	428a      	cmp	r2, r1
     874:	d208      	bcs.n	888 <__Stack_Size+0xb8>
			{
				// Clear tx count
				txrx_setup->tx_count = 0;
     876:	2100      	movs	r1, #0
     878:	60d9      	str	r1, [r3, #12]
				I2Cx->I2CONSET = I2C_I2CONSET_STA;
     87a:	2020      	movs	r0, #32
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
     87c:	210c      	movs	r1, #12
				txrx_setup->retransmissions_count++;
     87e:	3201      	adds	r2, #1
			// check if retransmission is available
			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max)
			{
				// Clear tx count
				txrx_setup->tx_count = 0;
				I2Cx->I2CONSET = I2C_I2CONSET_STA;
     880:	6020      	str	r0, [r4, #0]
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
     882:	61a1      	str	r1, [r4, #24]
				txrx_setup->retransmissions_count++;
     884:	621a      	str	r2, [r3, #32]
     886:	bd38      	pop	{r3, r4, r5, pc}
			// End of stage
			else
			{
end_stage:
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
     888:	2100      	movs	r1, #0
     88a:	4620      	mov	r0, r4
     88c:	f7ff ff21 	bl	6d2 <I2C_IntCmd>
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     890:	6823      	ldr	r3, [r4, #0]
     892:	0699      	lsls	r1, r3, #26
     894:	d501      	bpl.n	89a <__Stack_Size+0xca>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     896:	2020      	movs	r0, #32
     898:	61a0      	str	r0, [r4, #24]
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
     89a:	4b05      	ldr	r3, [pc, #20]	; (8b0 <__Stack_Size+0xe0>)
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     89c:	2210      	movs	r2, #16
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     89e:	2108      	movs	r1, #8
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
     8a0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
     8a4:	2001      	movs	r0, #1
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     8a6:	6022      	str	r2, [r4, #0]
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
     8a8:	61a8      	str	r0, [r5, #24]
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     8aa:	61a1      	str	r1, [r4, #24]
     8ac:	bd38      	pop	{r3, r4, r5, pc}
     8ae:	bf00      	nop
     8b0:	10000000 	.word	0x10000000

000008b4 <I2C_SlaveHandler>:
 *  			- LPC_I2C1
 *  			- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_SlaveHandler (LPC_I2C_TypeDef  *I2Cx)
{
     8b4:	b570      	push	{r4, r5, r6, lr}
     8b6:	4604      	mov	r4, r0
	int32_t tmp;
	uint8_t returnCode;
	I2C_S_SETUP_Type *txrx_setup;
	uint32_t timeout;

	tmp = I2C_getNum(I2Cx);
     8b8:	f7ff fe4c 	bl	554 <I2C_getNum>
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
     8bc:	4b35      	ldr	r3, [pc, #212]	; (994 <I2C_SlaveHandler+0xe0>)
	int32_t tmp;
	uint8_t returnCode;
	I2C_S_SETUP_Type *txrx_setup;
	uint32_t timeout;

	tmp = I2C_getNum(I2Cx);
     8be:	4606      	mov	r6, r0
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
     8c0:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     8c4:	6860      	ldr	r0, [r4, #4]
     8c6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	// Save current status
	txrx_setup->status = returnCode;
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     8ca:	29f8      	cmp	r1, #248	; 0xf8
	tmp = I2C_getNum(I2Cx);
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
	// Save current status
	txrx_setup->status = returnCode;
     8cc:	61a9      	str	r1, [r5, #24]
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     8ce:	d04b      	beq.n	968 <I2C_SlaveHandler+0xb4>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		return;
	}


	switch (returnCode)
     8d0:	2998      	cmp	r1, #152	; 0x98
     8d2:	d049      	beq.n	968 <I2C_SlaveHandler+0xb4>
     8d4:	dc0b      	bgt.n	8ee <I2C_SlaveHandler+0x3a>
     8d6:	2980      	cmp	r1, #128	; 0x80
     8d8:	d016      	beq.n	908 <I2C_SlaveHandler+0x54>
     8da:	dc03      	bgt.n	8e4 <I2C_SlaveHandler+0x30>
     8dc:	2960      	cmp	r1, #96	; 0x60
     8de:	d041      	beq.n	964 <I2C_SlaveHandler+0xb0>
     8e0:	2970      	cmp	r1, #112	; 0x70
     8e2:	e00f      	b.n	904 <I2C_SlaveHandler+0x50>
     8e4:	2988      	cmp	r1, #136	; 0x88
     8e6:	d03f      	beq.n	968 <I2C_SlaveHandler+0xb4>
     8e8:	2990      	cmp	r1, #144	; 0x90
     8ea:	d147      	bne.n	97c <I2C_SlaveHandler+0xc8>
     8ec:	e00c      	b.n	908 <I2C_SlaveHandler+0x54>
     8ee:	29b8      	cmp	r1, #184	; 0xb8
     8f0:	d02e      	beq.n	950 <I2C_SlaveHandler+0x9c>
     8f2:	dc04      	bgt.n	8fe <I2C_SlaveHandler+0x4a>
     8f4:	29a0      	cmp	r1, #160	; 0xa0
     8f6:	d014      	beq.n	922 <I2C_SlaveHandler+0x6e>
     8f8:	29a8      	cmp	r1, #168	; 0xa8
     8fa:	d13f      	bne.n	97c <I2C_SlaveHandler+0xc8>
     8fc:	e028      	b.n	950 <I2C_SlaveHandler+0x9c>
     8fe:	29c0      	cmp	r1, #192	; 0xc0
     900:	d035      	beq.n	96e <I2C_SlaveHandler+0xba>
     902:	29f8      	cmp	r1, #248	; 0xf8
     904:	d13a      	bne.n	97c <I2C_SlaveHandler+0xc8>
     906:	e02d      	b.n	964 <I2C_SlaveHandler+0xb0>
	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->rx_count < txrx_setup->rx_length) && (txrx_setup->rx_data != NULL))
     908:	696b      	ldr	r3, [r5, #20]
     90a:	692a      	ldr	r2, [r5, #16]
     90c:	4293      	cmp	r3, r2
     90e:	d229      	bcs.n	964 <I2C_SlaveHandler+0xb0>
     910:	68e8      	ldr	r0, [r5, #12]
     912:	2800      	cmp	r0, #0
     914:	d026      	beq.n	964 <I2C_SlaveHandler+0xb0>
		{
			*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (uint8_t)I2Cx->I2DAT;
     916:	68a1      	ldr	r1, [r4, #8]
     918:	54c1      	strb	r1, [r0, r3]
			txrx_setup->rx_count++;
     91a:	696b      	ldr	r3, [r5, #20]
     91c:	1c5a      	adds	r2, r3, #1
     91e:	616a      	str	r2, [r5, #20]
     920:	e020      	b.n	964 <I2C_SlaveHandler+0xb0>
	 */

	/* A Stop or a repeat start condition */
	case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
		// Temporally lock the interrupt for timeout condition
		I2C_IntCmd(I2Cx, 0);
     922:	4620      	mov	r0, r4
     924:	2100      	movs	r1, #0
     926:	f7ff fed4 	bl	6d2 <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     92a:	2008      	movs	r0, #8
     92c:	61a0      	str	r0, [r4, #24]
     92e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		// enable time out
		timeout = I2C_SLAVE_TIME_OUT;
		while(1)
		{
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
     932:	6821      	ldr	r1, [r4, #0]
     934:	0708      	lsls	r0, r1, #28
     936:	d505      	bpl.n	944 <I2C_SlaveHandler+0x90>
			{
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
     938:	4620      	mov	r0, r4
     93a:	2101      	movs	r1, #1
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
		I2C_SlaveComplete[tmp] = TRUE;
		break;
	}
}
     93c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		while(1)
		{
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
			{
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
     940:	f7ff bec7 	b.w	6d2 <I2C_IntCmd>
				break;
			}
			else
			{
				timeout--;
				if (timeout == 0)
     944:	3b01      	subs	r3, #1
     946:	d1f4      	bne.n	932 <I2C_SlaveHandler+0x7e>
				{
					// timeout occur, it's really a stop condition
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     948:	69aa      	ldr	r2, [r5, #24]
     94a:	f442 6380 	orr.w	r3, r2, #1024	; 0x400
     94e:	e014      	b.n	97a <I2C_SlaveHandler+0xc6>
	case I2C_I2STAT_S_TX_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
     950:	68ab      	ldr	r3, [r5, #8]
     952:	686a      	ldr	r2, [r5, #4]
     954:	4293      	cmp	r3, r2
     956:	d205      	bcs.n	964 <I2C_SlaveHandler+0xb0>
     958:	6828      	ldr	r0, [r5, #0]
     95a:	b118      	cbz	r0, 964 <I2C_SlaveHandler+0xb0>
		{
			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
     95c:	5cc1      	ldrb	r1, [r0, r3]
			txrx_setup->tx_count++;
     95e:	3301      	adds	r3, #1
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
		{
			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
     960:	60a1      	str	r1, [r4, #8]
			txrx_setup->tx_count++;
     962:	60ab      	str	r3, [r5, #8]
		}
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     964:	2204      	movs	r2, #4
     966:	6022      	str	r2, [r4, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     968:	2008      	movs	r0, #8
     96a:	61a0      	str	r0, [r4, #24]
		break;
     96c:	bd70      	pop	{r4, r5, r6, pc}
	 * Note: Don't wait for stop event since in slave transmit mode,
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     96e:	2004      	movs	r0, #4
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     970:	2108      	movs	r1, #8
	 * Note: Don't wait for stop event since in slave transmit mode,
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     972:	6020      	str	r0, [r4, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     974:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     978:	61a1      	str	r1, [r4, #24]
		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     97a:	61ab      	str	r3, [r5, #24]

	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
     97c:	4620      	mov	r0, r4
     97e:	2100      	movs	r1, #0
     980:	f7ff fea7 	bl	6d2 <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
		I2C_SlaveComplete[tmp] = TRUE;
     984:	4803      	ldr	r0, [pc, #12]	; (994 <I2C_SlaveHandler+0xe0>)
	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     986:	222c      	movs	r2, #44	; 0x2c
		I2C_SlaveComplete[tmp] = TRUE;
     988:	eb00 0686 	add.w	r6, r0, r6, lsl #2
     98c:	2101      	movs	r1, #1
	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     98e:	61a2      	str	r2, [r4, #24]
		I2C_SlaveComplete[tmp] = TRUE;
     990:	6271      	str	r1, [r6, #36]	; 0x24
     992:	bd70      	pop	{r4, r5, r6, pc}
     994:	10000000 	.word	0x10000000

00000998 <I2C_MasterTransferData>:
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     99a:	2600      	movs	r6, #0
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     99c:	4605      	mov	r5, r0
     99e:	460c      	mov	r4, r1

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     9a0:	60ce      	str	r6, [r1, #12]
	TransferCfg->rx_count = 0;
     9a2:	618e      	str	r6, [r1, #24]
	TransferCfg->status = 0;
     9a4:	624e      	str	r6, [r1, #36]	; 0x24

	if (Opt == I2C_TRANSFER_POLLING)
     9a6:	4617      	mov	r7, r2
     9a8:	2a00      	cmp	r2, #0
     9aa:	f040 80b6 	bne.w	b1a <I2C_MasterTransferData+0x182>
	{
		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
     9ae:	6222      	str	r2, [r4, #32]
retry:
		// reset all default state
		txdat = (uint8_t *) TransferCfg->tx_data;
		rxdat = (uint8_t *) TransferCfg->rx_data;
		// Reset I2C setup value to default state
		TransferCfg->tx_count = 0;
     9b0:	2300      	movs	r3, #0
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     9b2:	2120      	movs	r1, #32
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     9b4:	2208      	movs	r2, #8
	{
		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
retry:
		// reset all default state
		txdat = (uint8_t *) TransferCfg->tx_data;
     9b6:	6867      	ldr	r7, [r4, #4]
		rxdat = (uint8_t *) TransferCfg->rx_data;
     9b8:	6926      	ldr	r6, [r4, #16]
		// Reset I2C setup value to default state
		TransferCfg->tx_count = 0;
     9ba:	60e3      	str	r3, [r4, #12]
		TransferCfg->rx_count = 0;
     9bc:	61a3      	str	r3, [r4, #24]
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     9be:	6029      	str	r1, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     9c0:	61aa      	str	r2, [r5, #24]

	// Wait for complete
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     9c2:	6828      	ldr	r0, [r5, #0]
     9c4:	0702      	lsls	r2, r0, #28
     9c6:	d5fc      	bpl.n	9c2 <I2C_MasterTransferData+0x2a>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     9c8:	2320      	movs	r3, #32
     9ca:	61ab      	str	r3, [r5, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     9cc:	6869      	ldr	r1, [r5, #4]
     9ce:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
		TransferCfg->rx_count = 0;
		CodeStatus = 0;

		// Start command
		CodeStatus = I2C_Start(I2Cx);
		if ((CodeStatus != I2C_I2STAT_M_TX_START) && (CodeStatus != I2C_I2STAT_M_TX_RESTART))
     9d2:	2b08      	cmp	r3, #8
     9d4:	d001      	beq.n	9da <I2C_MasterTransferData+0x42>
     9d6:	2b10      	cmp	r3, #16
     9d8:	d135      	bne.n	a46 <I2C_MasterTransferData+0xae>
				goto retry;
			}
		}

		/* In case of sending data first --------------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL))
     9da:	68a2      	ldr	r2, [r4, #8]
     9dc:	b912      	cbnz	r2, 9e4 <I2C_MasterTransferData+0x4c>
				TransferCfg->tx_count++;
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
     9de:	68a0      	ldr	r0, [r4, #8]
     9e0:	b9d8      	cbnz	r0, a1a <I2C_MasterTransferData+0x82>
     9e2:	e038      	b.n	a56 <I2C_MasterTransferData+0xbe>
				goto retry;
			}
		}

		/* In case of sending data first --------------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL))
     9e4:	2f00      	cmp	r7, #0
     9e6:	d0fa      	beq.n	9de <I2C_MasterTransferData+0x46>
		{
			/* Send slave address + WR direction bit = 0 ----------------------------------- */
			CodeStatus = I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
     9e8:	6820      	ldr	r0, [r4, #0]
     9ea:	0043      	lsls	r3, r0, #1
     9ec:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
     9f0:	4628      	mov	r0, r5
     9f2:	f7ff fdc5 	bl	580 <I2C_SendByte>
			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK)
     9f6:	2818      	cmp	r0, #24
     9f8:	d142      	bne.n	a80 <I2C_MasterTransferData+0xe8>
 * or receive data pointer set to NULL.
 * - In case of using I2C to transmit followed by receive data, transmit length,
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
     9fa:	3f01      	subs	r7, #1
					goto retry;
				}
			}

			/* Send a number of data bytes ---------------------------------------- */
			while (TransferCfg->tx_count < TransferCfg->tx_length)
     9fc:	68e1      	ldr	r1, [r4, #12]
     9fe:	68a2      	ldr	r2, [r4, #8]
     a00:	4291      	cmp	r1, r2
     a02:	d2ec      	bcs.n	9de <I2C_MasterTransferData+0x46>
			{
				CodeStatus = I2C_SendByte(I2Cx, *txdat);
     a04:	4628      	mov	r0, r5
     a06:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     a0a:	f7ff fdb9 	bl	580 <I2C_SendByte>
				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK)
     a0e:	2828      	cmp	r0, #40	; 0x28
     a10:	d136      	bne.n	a80 <I2C_MasterTransferData+0xe8>
						goto retry;
					}
				}

				txdat++;
				TransferCfg->tx_count++;
     a12:	68e0      	ldr	r0, [r4, #12]
     a14:	1c41      	adds	r1, r0, #1
     a16:	60e1      	str	r1, [r4, #12]
     a18:	e7f0      	b.n	9fc <I2C_MasterTransferData+0x64>
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
     a1a:	6863      	ldr	r3, [r4, #4]
     a1c:	b1db      	cbz	r3, a56 <I2C_MasterTransferData+0xbe>
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
     a1e:	6961      	ldr	r1, [r4, #20]
     a20:	b1c9      	cbz	r1, a56 <I2C_MasterTransferData+0xbe>
     a22:	6922      	ldr	r2, [r4, #16]
     a24:	b1ba      	cbz	r2, a56 <I2C_MasterTransferData+0xbe>
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     a26:	2020      	movs	r0, #32
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a28:	2308      	movs	r3, #8
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     a2a:	6028      	str	r0, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a2c:	61ab      	str	r3, [r5, #24]

	// Wait for complete
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     a2e:	6829      	ldr	r1, [r5, #0]
     a30:	070b      	lsls	r3, r1, #28
     a32:	d5fc      	bpl.n	a2e <I2C_MasterTransferData+0x96>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     a34:	2220      	movs	r2, #32
     a36:	61aa      	str	r2, [r5, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     a38:	6868      	ldr	r0, [r5, #4]
     a3a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
		{
			CodeStatus = I2C_Start(I2Cx);
			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
     a3e:	2b08      	cmp	r3, #8
     a40:	d009      	beq.n	a56 <I2C_MasterTransferData+0xbe>
     a42:	2b10      	cmp	r3, #16
     a44:	d007      	beq.n	a56 <I2C_MasterTransferData+0xbe>
			{
				TransferCfg->retransmissions_count++;
     a46:	6a22      	ldr	r2, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     a48:	69e1      	ldr	r1, [r4, #28]
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
		{
			CodeStatus = I2C_Start(I2Cx);
			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
			{
				TransferCfg->retransmissions_count++;
     a4a:	1c50      	adds	r0, r2, #1
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     a4c:	4288      	cmp	r0, r1
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
		{
			CodeStatus = I2C_Start(I2Cx);
			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
			{
				TransferCfg->retransmissions_count++;
     a4e:	6220      	str	r0, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     a50:	d9ae      	bls.n	9b0 <I2C_MasterTransferData+0x18>
				{
					// Update status
					TransferCfg->status = CodeStatus;
     a52:	6263      	str	r3, [r4, #36]	; 0x24
					goto error;
     a54:	e056      	b.n	b04 <I2C_MasterTransferData+0x16c>
				}
			}
		}

		/* Then, start reading after sending data -------------------------------------- */
		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
     a56:	6961      	ldr	r1, [r4, #20]
     a58:	b929      	cbnz	r1, a66 <I2C_MasterTransferData+0xce>
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     a5a:	682b      	ldr	r3, [r5, #0]
     a5c:	0698      	lsls	r0, r3, #26
     a5e:	d54b      	bpl.n	af8 <I2C_MasterTransferData+0x160>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     a60:	2120      	movs	r1, #32
     a62:	61a9      	str	r1, [r5, #24]
     a64:	e048      	b.n	af8 <I2C_MasterTransferData+0x160>
				}
			}
		}

		/* Then, start reading after sending data -------------------------------------- */
		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
     a66:	6922      	ldr	r2, [r4, #16]
     a68:	2a00      	cmp	r2, #0
     a6a:	d0f6      	beq.n	a5a <I2C_MasterTransferData+0xc2>
		{
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
     a6c:	6820      	ldr	r0, [r4, #0]
     a6e:	0043      	lsls	r3, r0, #1
     a70:	f043 0101 	orr.w	r1, r3, #1
     a74:	4628      	mov	r0, r5
     a76:	b2c9      	uxtb	r1, r1
     a78:	f7ff fd82 	bl	580 <I2C_SendByte>
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
     a7c:	2840      	cmp	r0, #64	; 0x40
     a7e:	d021      	beq.n	ac4 <I2C_MasterTransferData+0x12c>
			{
				TransferCfg->retransmissions_count++;
     a80:	6a22      	ldr	r2, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     a82:	69e1      	ldr	r1, [r4, #28]
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
			{
				TransferCfg->retransmissions_count++;
     a84:	1c53      	adds	r3, r2, #1
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     a86:	428b      	cmp	r3, r1
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
			{
				TransferCfg->retransmissions_count++;
     a88:	6223      	str	r3, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     a8a:	d991      	bls.n	9b0 <I2C_MasterTransferData+0x18>
				{
					// update status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
     a8c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
     a90:	6260      	str	r0, [r4, #36]	; 0x24
					goto error;
     a92:	e037      	b.n	b04 <I2C_MasterTransferData+0x16c>
				/*
				 * Note that: if data length is only one, the master should not
				 * issue an ACK signal on bus after reading to avoid of next data frame
				 * on slave side
				 */
				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1))
     a94:	1e43      	subs	r3, r0, #1
     a96:	429a      	cmp	r2, r3
     a98:	f04f 0108 	mov.w	r1, #8
     a9c:	f04f 0204 	mov.w	r2, #4
     aa0:	d215      	bcs.n	ace <I2C_MasterTransferData+0x136>
 *********************************************************************/
static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack)
{
	if (ack == TRUE)
	{
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     aa2:	602a      	str	r2, [r5, #0]
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     aa4:	61a9      	str	r1, [r5, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     aa6:	682b      	ldr	r3, [r5, #0]
     aa8:	0719      	lsls	r1, r3, #28
     aaa:	d5fc      	bpl.n	aa6 <I2C_MasterTransferData+0x10e>
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     aac:	68a9      	ldr	r1, [r5, #8]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     aae:	686a      	ldr	r2, [r5, #4]
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     ab0:	b2c9      	uxtb	r1, r1
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     ab2:	f002 00f8 	and.w	r0, r2, #248	; 0xf8
				 */
				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1))
				{
					// Issue an ACK signal for next data frame
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 1);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_ACK)
     ab6:	2850      	cmp	r0, #80	; 0x50
				}
				else
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
     ab8:	d115      	bne.n	ae6 <I2C_MasterTransferData+0x14e>
						{
							goto retry;
						}
					}
				}
				*rxdat++ = tmp;
     aba:	f806 1b01 	strb.w	r1, [r6], #1
				TransferCfg->rx_count++;
     abe:	69a0      	ldr	r0, [r4, #24]
     ac0:	1c43      	adds	r3, r0, #1
     ac2:	61a3      	str	r3, [r4, #24]
					goto retry;
				}
			}

			/* Receive a number of data bytes ------------------------------------------------- */
			while (TransferCfg->rx_count < TransferCfg->rx_length)
     ac4:	69a2      	ldr	r2, [r4, #24]
     ac6:	6960      	ldr	r0, [r4, #20]
     ac8:	4282      	cmp	r2, r0
     aca:	d3e3      	bcc.n	a94 <I2C_MasterTransferData+0xfc>
     acc:	e7c5      	b.n	a5a <I2C_MasterTransferData+0xc2>
	{
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     ace:	61aa      	str	r2, [r5, #24]
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     ad0:	61a9      	str	r1, [r5, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     ad2:	6828      	ldr	r0, [r5, #0]
     ad4:	0702      	lsls	r2, r0, #28
     ad6:	d5fc      	bpl.n	ad2 <I2C_MasterTransferData+0x13a>
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     ad8:	68ab      	ldr	r3, [r5, #8]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     ada:	686a      	ldr	r2, [r5, #4]
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     adc:	b2d9      	uxtb	r1, r3
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     ade:	f002 00f8 	and.w	r0, r2, #248	; 0xf8
				}
				else
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
     ae2:	2858      	cmp	r0, #88	; 0x58
     ae4:	e7e8      	b.n	ab8 <I2C_MasterTransferData+0x120>
					{
						TransferCfg->retransmissions_count++;
     ae6:	6a21      	ldr	r1, [r4, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     ae8:	69e3      	ldr	r3, [r4, #28]
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
					{
						TransferCfg->retransmissions_count++;
     aea:	1c4a      	adds	r2, r1, #1
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     aec:	429a      	cmp	r2, r3
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
					{
						TransferCfg->retransmissions_count++;
     aee:	6222      	str	r2, [r4, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     af0:	f67f af5e 	bls.w	9b0 <I2C_MasterTransferData+0x18>
						{
							// update status
							TransferCfg->status = CodeStatus;
     af4:	6260      	str	r0, [r4, #36]	; 0x24
							goto error;
     af6:	e005      	b.n	b04 <I2C_MasterTransferData+0x16c>
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     af8:	2210      	movs	r2, #16
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     afa:	2008      	movs	r0, #8
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     afc:	602a      	str	r2, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     afe:	61a8      	str	r0, [r5, #24]
			}
		}

		/* Send STOP condition ------------------------------------------------- */
		I2C_Stop(I2Cx);
		return SUCCESS;
     b00:	2001      	movs	r0, #1
     b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     b04:	682b      	ldr	r3, [r5, #0]
     b06:	069b      	lsls	r3, r3, #26
     b08:	d501      	bpl.n	b0e <I2C_MasterTransferData+0x176>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     b0a:	2220      	movs	r2, #32
     b0c:	61aa      	str	r2, [r5, #24]
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     b0e:	2010      	movs	r0, #16
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b10:	2108      	movs	r1, #8
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     b12:	6028      	str	r0, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b14:	61a9      	str	r1, [r5, #24]
		return SUCCESS;

error:
		// Send stop condition
		I2C_Stop(I2Cx);
		return ERROR;
     b16:	2000      	movs	r0, #0
     b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT)
     b1a:	2a01      	cmp	r2, #1
     b1c:	d1fb      	bne.n	b16 <I2C_MasterTransferData+0x17e>
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
     b1e:	f7ff fd19 	bl	554 <I2C_getNum>
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     b22:	4b08      	ldr	r3, [pc, #32]	; (b44 <I2C_MasterTransferData+0x1ac>)
     b24:	b2c0      	uxtb	r0, r0
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;
     b26:	eb03 01c0 	add.w	r1, r3, r0, lsl #3

	else if (Opt == I2C_TRANSFER_INTERRUPT)
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     b2a:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b2e:	2208      	movs	r2, #8
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
     b30:	2020      	movs	r0, #32
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;
     b32:	604e      	str	r6, [r1, #4]

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b34:	61aa      	str	r2, [r5, #24]
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
		I2C_IntCmd(I2Cx, 1);
     b36:	4639      	mov	r1, r7
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
     b38:	6028      	str	r0, [r5, #0]
		I2C_IntCmd(I2Cx, 1);
     b3a:	4628      	mov	r0, r5
     b3c:	f7ff fdc9 	bl	6d2 <I2C_IntCmd>
     b40:	e7de      	b.n	b00 <I2C_MasterTransferData+0x168>
     b42:	bf00      	nop
     b44:	10000000 	.word	0x10000000

00000b48 <I2C_SlaveTransferData>:
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t time_en;
	int32_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
     b4a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     b4e:	460d      	mov	r5, r1
	uint32_t timeout;
	int32_t time_en;
	int32_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
     b50:	680f      	ldr	r7, [r1, #0]
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     b52:	2100      	movs	r1, #0
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     b54:	4604      	mov	r4, r0

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     b56:	60a9      	str	r1, [r5, #8]
	TransferCfg->rx_count = 0;
     b58:	6169      	str	r1, [r5, #20]
	TransferCfg->status = 0;
     b5a:	61a9      	str	r1, [r5, #24]


	// Polling option
	if (Opt == I2C_TRANSFER_POLLING)
     b5c:	4616      	mov	r6, r2
     b5e:	2a00      	cmp	r2, #0
     b60:	d165      	bne.n	c2e <I2C_SlaveTransferData+0xe6>
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
     b62:	2228      	movs	r2, #40	; 0x28

	// Polling option
	if (Opt == I2C_TRANSFER_POLLING)
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     b64:	2004      	movs	r0, #4
     b66:	6020      	str	r0, [r4, #0]
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);

		time_en = 0;
		timeout = 0;
     b68:	4631      	mov	r1, r6
	if (Opt == I2C_TRANSFER_POLLING)
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
     b6a:	61a2      	str	r2, [r4, #24]

		time_en = 0;
     b6c:	4632      	mov	r2, r6
		timeout = 0;

		while (1)
		{
			/* Check SI flag ready */
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
     b6e:	6820      	ldr	r0, [r4, #0]
     b70:	0700      	lsls	r0, r0, #28
     b72:	d54c      	bpl.n	c0e <I2C_SlaveTransferData+0xc6>
			{
				time_en = 0;

				switch (CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK))
     b74:	6860      	ldr	r0, [r4, #4]
     b76:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
     b7a:	2b98      	cmp	r3, #152	; 0x98
     b7c:	d036      	beq.n	bec <I2C_SlaveTransferData+0xa4>
     b7e:	d80c      	bhi.n	b9a <I2C_SlaveTransferData+0x52>
     b80:	2b80      	cmp	r3, #128	; 0x80
     b82:	d019      	beq.n	bb8 <I2C_SlaveTransferData+0x70>
     b84:	d804      	bhi.n	b90 <I2C_SlaveTransferData+0x48>
     b86:	2b60      	cmp	r3, #96	; 0x60
     b88:	d02e      	beq.n	be8 <I2C_SlaveTransferData+0xa0>
     b8a:	2b70      	cmp	r3, #112	; 0x70
     b8c:	d138      	bne.n	c00 <I2C_SlaveTransferData+0xb8>
     b8e:	e02b      	b.n	be8 <I2C_SlaveTransferData+0xa0>
     b90:	2b88      	cmp	r3, #136	; 0x88
     b92:	d02b      	beq.n	bec <I2C_SlaveTransferData+0xa4>
     b94:	2b90      	cmp	r3, #144	; 0x90
     b96:	d133      	bne.n	c00 <I2C_SlaveTransferData+0xb8>
     b98:	e00e      	b.n	bb8 <I2C_SlaveTransferData+0x70>
     b9a:	2bb8      	cmp	r3, #184	; 0xb8
     b9c:	d019      	beq.n	bd2 <I2C_SlaveTransferData+0x8a>
     b9e:	d804      	bhi.n	baa <I2C_SlaveTransferData+0x62>
     ba0:	2ba0      	cmp	r3, #160	; 0xa0
     ba2:	d028      	beq.n	bf6 <I2C_SlaveTransferData+0xae>
     ba4:	2ba8      	cmp	r3, #168	; 0xa8
     ba6:	d12b      	bne.n	c00 <I2C_SlaveTransferData+0xb8>
     ba8:	e013      	b.n	bd2 <I2C_SlaveTransferData+0x8a>
     baa:	2bc0      	cmp	r3, #192	; 0xc0
     bac:	f04f 0004 	mov.w	r0, #4
     bb0:	d020      	beq.n	bf4 <I2C_SlaveTransferData+0xac>
     bb2:	2bf8      	cmp	r3, #248	; 0xf8
     bb4:	d124      	bne.n	c00 <I2C_SlaveTransferData+0xb8>
     bb6:	e018      	b.n	bea <I2C_SlaveTransferData+0xa2>
				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->rx_count < TransferCfg->rx_length) \
     bb8:	6968      	ldr	r0, [r5, #20]
     bba:	692a      	ldr	r2, [r5, #16]
     bbc:	4290      	cmp	r0, r2
     bbe:	d213      	bcs.n	be8 <I2C_SlaveTransferData+0xa0>
							&& (TransferCfg->rx_data != NULL))
     bc0:	68e8      	ldr	r0, [r5, #12]
     bc2:	b188      	cbz	r0, be8 <I2C_SlaveTransferData+0xa0>
					{
						*rxdat++ = (uint8_t)I2Cx->I2DAT;
     bc4:	68a2      	ldr	r2, [r4, #8]
     bc6:	f80c 2b01 	strb.w	r2, [ip], #1
						TransferCfg->rx_count++;
     bca:	6968      	ldr	r0, [r5, #20]
     bcc:	1c42      	adds	r2, r0, #1
     bce:	616a      	str	r2, [r5, #20]
     bd0:	e00a      	b.n	be8 <I2C_SlaveTransferData+0xa0>
				case I2C_I2STAT_S_TX_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
     bd2:	68aa      	ldr	r2, [r5, #8]
     bd4:	6868      	ldr	r0, [r5, #4]
     bd6:	4282      	cmp	r2, r0
     bd8:	d206      	bcs.n	be8 <I2C_SlaveTransferData+0xa0>
							&& (TransferCfg->tx_data != NULL))
     bda:	6828      	ldr	r0, [r5, #0]
     bdc:	b120      	cbz	r0, be8 <I2C_SlaveTransferData+0xa0>
					{
						I2Cx->I2DAT = *txdat++;
     bde:	f817 0b01 	ldrb.w	r0, [r7], #1
						TransferCfg->tx_count++;
     be2:	3201      	adds	r2, #1
					 * data length, just ignore them.
					 */
					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
							&& (TransferCfg->tx_data != NULL))
					{
						I2Cx->I2DAT = *txdat++;
     be4:	60a0      	str	r0, [r4, #8]
						TransferCfg->tx_count++;
     be6:	60aa      	str	r2, [r5, #8]
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
     be8:	2004      	movs	r0, #4
     bea:	6020      	str	r0, [r4, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     bec:	2208      	movs	r2, #8
     bee:	61a2      	str	r2, [r4, #24]
		while (1)
		{
			/* Check SI flag ready */
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
			{
				time_en = 0;
     bf0:	2200      	movs	r2, #0
						I2Cx->I2DAT = *txdat++;
						TransferCfg->tx_count++;
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					break;
     bf2:	e7bc      	b.n	b6e <I2C_SlaveTransferData+0x26>
				 * Note: Don't wait for stop event since in slave transmit mode,
				 * since there no proof lets us know when a stop signal has been received
				 * on slave side.
				 */
				case I2C_I2STAT_S_TX_DAT_NACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
     bf4:	6020      	str	r0, [r4, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     bf6:	2208      	movs	r2, #8
     bf8:	61a2      	str	r2, [r4, #24]
					// enable time out
					time_en = 1;
					timeout = 0;
     bfa:	2100      	movs	r1, #0
				 */
				case I2C_I2STAT_S_TX_DAT_NACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					// enable time out
					time_en = 1;
     bfc:	2201      	movs	r2, #1
					timeout = 0;
					break;
     bfe:	e7b6      	b.n	b6e <I2C_SlaveTransferData+0x26>

				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     c00:	2108      	movs	r1, #8
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
		return SUCCESS;

s_error:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     c02:	2004      	movs	r0, #4
					timeout = 0;
					break;

				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     c04:	61a1      	str	r1, [r4, #24]
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
		return SUCCESS;

s_error:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     c06:	61a0      	str	r0, [r4, #24]
		// Update status
		TransferCfg->status = CodeStatus;
     c08:	61ab      	str	r3, [r5, #24]
		return ERROR;
     c0a:	2000      	movs	r0, #0
     c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					goto s_error;
				}
			}
			else if (time_en)
     c0e:	2a00      	cmp	r2, #0
     c10:	d0ad      	beq.n	b6e <I2C_SlaveTransferData+0x26>
			{
				if (timeout++ > I2C_SLAVE_TIME_OUT)
     c12:	1c4a      	adds	r2, r1, #1
     c14:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
     c18:	d802      	bhi.n	c20 <I2C_SlaveTransferData+0xd8>
     c1a:	4611      	mov	r1, r2
     c1c:	2201      	movs	r2, #1
     c1e:	e7a6      	b.n	b6e <I2C_SlaveTransferData+0x26>
			}
		}

s_end_stage:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     c20:	2104      	movs	r1, #4
		// Check if there's no error during operation
		// Update status
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
     c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
			}
		}

s_end_stage:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     c26:	61a1      	str	r1, [r4, #24]
		// Check if there's no error during operation
		// Update status
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
     c28:	61ab      	str	r3, [r5, #24]
		return SUCCESS;
     c2a:	2001      	movs	r0, #1
     c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Update status
		TransferCfg->status = CodeStatus;
		return ERROR;
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT)
     c2e:	2a01      	cmp	r2, #1
     c30:	d1eb      	bne.n	c0a <I2C_SlaveTransferData+0xc2>
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
     c32:	f7ff fc8f 	bl	554 <I2C_getNum>
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     c36:	4b07      	ldr	r3, [pc, #28]	; (c54 <I2C_SlaveTransferData+0x10c>)
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     c38:	2128      	movs	r1, #40	; 0x28

	else if (Opt == I2C_TRANSFER_INTERRUPT)
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     c3a:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     c3e:	2204      	movs	r2, #4
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;
     c40:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     c44:	6046      	str	r6, [r0, #4]

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     c46:	6022      	str	r2, [r4, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
		I2C_IntCmd(I2Cx, 1);
     c48:	4620      	mov	r0, r4
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     c4a:	61a1      	str	r1, [r4, #24]
		I2C_IntCmd(I2Cx, 1);
     c4c:	4631      	mov	r1, r6
     c4e:	f7ff fd40 	bl	6d2 <I2C_IntCmd>
     c52:	e7ea      	b.n	c2a <I2C_SlaveTransferData+0xe2>
     c54:	10000000 	.word	0x10000000

00000c58 <I2C_SetOwnSlaveAddr>:
 * 				structure that contains the configuration information for the
*               specified I2C slave address.
 * @return 		None
 **********************************************************************/
void I2C_SetOwnSlaveAddr(LPC_I2C_TypeDef *I2Cx, I2C_OWNSLAVEADDR_CFG_Type *OwnSlaveAddrConfigStruct)
{
     c58:	b510      	push	{r4, lr}
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
     c5a:	788b      	ldrb	r3, [r1, #2]
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
     c5c:	784a      	ldrb	r2, [r1, #1]
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
     c5e:	1e5c      	subs	r4, r3, #1
     c60:	4263      	negs	r3, r4
     c62:	415c      	adcs	r4, r3
     c64:	ea44 0242 	orr.w	r2, r4, r2, lsl #1
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
     c68:	b2d3      	uxtb	r3, r2
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
     c6a:	780a      	ldrb	r2, [r1, #0]
     c6c:	2a03      	cmp	r2, #3
     c6e:	d81a      	bhi.n	ca6 <I2C_SetOwnSlaveAddr+0x4e>
     c70:	e8df f002 	tbb	[pc, r2]
     c74:	140e0802 	.word	0x140e0802
	{
	case 0:
		I2Cx->I2ADR0 = tmp;
     c78:	60c3      	str	r3, [r0, #12]
		I2Cx->I2MASK0 = I2C_I2MASK_MASK((uint32_t) \
     c7a:	78c9      	ldrb	r1, [r1, #3]
     c7c:	f001 03fe 	and.w	r3, r1, #254	; 0xfe
     c80:	6303      	str	r3, [r0, #48]	; 0x30
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
     c82:	bd10      	pop	{r4, pc}
	case 1:
		I2Cx->I2ADR1 = tmp;
     c84:	6203      	str	r3, [r0, #32]
		I2Cx->I2MASK1 = I2C_I2MASK_MASK((uint32_t) \
     c86:	78cb      	ldrb	r3, [r1, #3]
     c88:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
     c8c:	6342      	str	r2, [r0, #52]	; 0x34
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
     c8e:	bd10      	pop	{r4, pc}
	case 2:
		I2Cx->I2ADR2 = tmp;
     c90:	6243      	str	r3, [r0, #36]	; 0x24
		I2Cx->I2MASK2 = I2C_I2MASK_MASK((uint32_t) \
     c92:	78ca      	ldrb	r2, [r1, #3]
     c94:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
     c98:	6381      	str	r1, [r0, #56]	; 0x38
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
     c9a:	bd10      	pop	{r4, pc}
	case 3:
		I2Cx->I2ADR3 = tmp;
     c9c:	6283      	str	r3, [r0, #40]	; 0x28
		I2Cx->I2MASK3 = I2C_I2MASK_MASK((uint32_t) \
     c9e:	78c9      	ldrb	r1, [r1, #3]
     ca0:	f001 03fe 	and.w	r3, r1, #254	; 0xfe
     ca4:	63c3      	str	r3, [r0, #60]	; 0x3c
     ca6:	bd10      	pop	{r4, pc}

00000ca8 <I2C_MonitorModeConfig>:
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= MonitorCfgType;
     ca8:	69c3      	ldr	r3, [r0, #28]
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
     caa:	2a01      	cmp	r2, #1
	{
		I2Cx->MMCTRL |= MonitorCfgType;
	}
	else
	{
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
     cac:	bf16      	itet	ne
     cae:	f003 0307 	andne.w	r3, r3, #7
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= MonitorCfgType;
     cb2:	4319      	orreq	r1, r3
	}
	else
	{
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
     cb4:	ea23 0101 	bicne.w	r1, r3, r1
     cb8:	61c1      	str	r1, [r0, #28]
     cba:	4770      	bx	lr

00000cbc <I2C_MonitorModeCmd>:
void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
     cbc:	2901      	cmp	r1, #1
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
     cbe:	69c3      	ldr	r3, [r0, #28]
void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
     cc0:	d106      	bne.n	cd0 <I2C_MonitorModeCmd+0x14>
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
     cc2:	f043 0301 	orr.w	r3, r3, #1
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     cc6:	2104      	movs	r1, #4
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
     cc8:	61c3      	str	r3, [r0, #28]
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     cca:	2228      	movs	r2, #40	; 0x28
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     ccc:	6001      	str	r1, [r0, #0]
     cce:	e003      	b.n	cd8 <I2C_MonitorModeCmd+0x1c>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
	}
	else
	{
		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
     cd0:	f003 0106 	and.w	r1, r3, #6
     cd4:	61c1      	str	r1, [r0, #28]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
     cd6:	222c      	movs	r2, #44	; 0x2c
     cd8:	6182      	str	r2, [r0, #24]
	}
	I2C_MonitorBufferIndex = 0;
     cda:	4a02      	ldr	r2, [pc, #8]	; (ce4 <I2C_MonitorModeCmd+0x28>)
     cdc:	2000      	movs	r0, #0
     cde:	6310      	str	r0, [r2, #48]	; 0x30
     ce0:	4770      	bx	lr
     ce2:	bf00      	nop
     ce4:	10000000 	.word	0x10000000

00000ce8 <I2C_MonitorGetDatabuffer>:
 * new data.
 **********************************************************************/
uint8_t I2C_MonitorGetDatabuffer(LPC_I2C_TypeDef *I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	return ((uint8_t)(I2Cx->I2DATA_BUFFER));
     ce8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
     cea:	b2c0      	uxtb	r0, r0
     cec:	4770      	bx	lr

00000cee <I2C_MonitorHandler>:
 **********************************************************************/
BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
{
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     cee:	2308      	movs	r3, #8
 * register, as it ordinarily would, it could have only one bit-time to
 * respond to the interrupt before the received data is overwritten by
 * new data.
 **********************************************************************/
BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
{
     cf0:	b510      	push	{r4, lr}
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     cf2:	6183      	str	r3, [r0, #24]

	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
     cf4:	4b05      	ldr	r3, [pc, #20]	; (d0c <I2C_MonitorHandler+0x1e>)
     cf6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     cf8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
     cfa:	5508      	strb	r0, [r1, r4]
	I2C_MonitorBufferIndex++;
     cfc:	1c60      	adds	r0, r4, #1
	if(I2C_MonitorBufferIndex >= size)
	{
		ret = TRUE;
	}
	return ret;
}
     cfe:	4290      	cmp	r0, r2
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;

	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
	I2C_MonitorBufferIndex++;
     d00:	6318      	str	r0, [r3, #48]	; 0x30
	if(I2C_MonitorBufferIndex >= size)
	{
		ret = TRUE;
	}
	return ret;
}
     d02:	bf34      	ite	cc
     d04:	2000      	movcc	r0, #0
     d06:	2001      	movcs	r0, #1
     d08:	bd10      	pop	{r4, pc}
     d0a:	bf00      	nop
     d0c:	10000000 	.word	0x10000000

00000d10 <I2C_MasterTransferComplete>:
 * @return 		Master transfer status, could be:
 * 				- TRUE	master transfer completed
 * 				- FALSE master transfer have not completed yet
 **********************************************************************/
uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
     d10:	b508      	push	{r3, lr}
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
     d12:	f7ff fc1f 	bl	554 <I2C_getNum>
	retval = I2C_MasterComplete[tmp];
     d16:	4b03      	ldr	r3, [pc, #12]	; (d24 <I2C_MasterTransferComplete+0x14>)
	I2C_MasterComplete[tmp] = FALSE;
     d18:	2200      	movs	r2, #0
 **********************************************************************/
uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
	retval = I2C_MasterComplete[tmp];
     d1a:	eb03 0180 	add.w	r1, r3, r0, lsl #2
     d1e:	6988      	ldr	r0, [r1, #24]
	I2C_MasterComplete[tmp] = FALSE;
     d20:	618a      	str	r2, [r1, #24]
	return retval;
}
     d22:	bd08      	pop	{r3, pc}
     d24:	10000000 	.word	0x10000000

00000d28 <I2C_SlaveTransferComplete>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		Complete status, could be: TRUE/FALSE
 **********************************************************************/
uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
     d28:	b508      	push	{r3, lr}
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
     d2a:	f7ff fc13 	bl	554 <I2C_getNum>
	retval = I2C_SlaveComplete[tmp];
     d2e:	4b03      	ldr	r3, [pc, #12]	; (d3c <I2C_SlaveTransferComplete+0x14>)
	I2C_SlaveComplete[tmp] = FALSE;
     d30:	2200      	movs	r2, #0
 **********************************************************************/
uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
	retval = I2C_SlaveComplete[tmp];
     d32:	eb03 0180 	add.w	r1, r3, r0, lsl #2
     d36:	6a48      	ldr	r0, [r1, #36]	; 0x24
	I2C_SlaveComplete[tmp] = FALSE;
     d38:	624a      	str	r2, [r1, #36]	; 0x24
	return retval;
}
     d3a:	bd08      	pop	{r3, pc}
     d3c:	10000000 	.word	0x10000000

00000d40 <NVIC_DeInit>:
void NVIC_DeInit(void)
{
	uint8_t tmp;

	/* Disable all interrupts */
	NVIC->ICER[0] = 0xFFFFFFFF;
     d40:	4b0b      	ldr	r3, [pc, #44]	; (d70 <NVIC_DeInit+0x30>)
     d42:	f04f 31ff 	mov.w	r1, #4294967295
	NVIC->ICER[1] = 0x00000001;
     d46:	2201      	movs	r2, #1
void NVIC_DeInit(void)
{
	uint8_t tmp;

	/* Disable all interrupts */
	NVIC->ICER[0] = 0xFFFFFFFF;
     d48:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	NVIC->ICER[1] = 0x00000001;
     d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
     d50:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
	NVIC->ICPR[1] = 0x00000001;
     d54:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
     d58:	2300      	movs	r3, #0

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
		NVIC->IP[tmp] = 0x00;
     d5a:	f103 4060 	add.w	r0, r3, #3758096384	; 0xe0000000
     d5e:	3301      	adds	r3, #1
     d60:	2100      	movs	r1, #0
     d62:	f500 4261 	add.w	r2, r0, #57600	; 0xe100
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
	NVIC->ICPR[1] = 0x00000001;

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
     d66:	2b20      	cmp	r3, #32
		NVIC->IP[tmp] = 0x00;
     d68:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
	NVIC->ICPR[1] = 0x00000001;

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
     d6c:	d1f5      	bne.n	d5a <NVIC_DeInit+0x1a>
		NVIC->IP[tmp] = 0x00;
	}
}
     d6e:	4770      	bx	lr
     d70:	e000e100 	.word	0xe000e100

00000d74 <NVIC_SCBDeInit>:
 *******************************************************************************/
void NVIC_SCBDeInit(void)
{
	uint8_t tmp;

	SCB->ICSR = 0x0A000000;
     d74:	4b0d      	ldr	r3, [pc, #52]	; (dac <NVIC_SCBDeInit+0x38>)
     d76:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
     d7a:	490d      	ldr	r1, [pc, #52]	; (db0 <NVIC_SCBDeInit+0x3c>)
 *******************************************************************************/
void NVIC_SCBDeInit(void)
{
	uint8_t tmp;

	SCB->ICSR = 0x0A000000;
     d7c:	605a      	str	r2, [r3, #4]
	SCB->VTOR = 0x00000000;
     d7e:	2200      	movs	r2, #0
     d80:	609a      	str	r2, [r3, #8]
	SCB->AIRCR = 0x05FA0000;
     d82:	60d9      	str	r1, [r3, #12]
	SCB->SCR = 0x00000000;
     d84:	611a      	str	r2, [r3, #16]
	SCB->CCR = 0x00000000;
     d86:	615a      	str	r2, [r3, #20]

	for (tmp = 0; tmp < 32; tmp++) {
		SCB->SHP[tmp] = 0x00;
     d88:	f102 4060 	add.w	r0, r2, #3758096384	; 0xe0000000
     d8c:	3201      	adds	r2, #1
     d8e:	f500 416d 	add.w	r1, r0, #60672	; 0xed00
     d92:	2000      	movs	r0, #0
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
	SCB->SCR = 0x00000000;
	SCB->CCR = 0x00000000;

	for (tmp = 0; tmp < 32; tmp++) {
     d94:	2a20      	cmp	r2, #32
		SCB->SHP[tmp] = 0x00;
     d96:	4b05      	ldr	r3, [pc, #20]	; (dac <NVIC_SCBDeInit+0x38>)
     d98:	7608      	strb	r0, [r1, #24]
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
	SCB->SCR = 0x00000000;
	SCB->CCR = 0x00000000;

	for (tmp = 0; tmp < 32; tmp++) {
     d9a:	d1f5      	bne.n	d88 <NVIC_SCBDeInit+0x14>
		SCB->SHP[tmp] = 0x00;
	}

	SCB->SHCSR = 0x00000000;
	SCB->CFSR = 0xFFFFFFFF;
     d9c:	f04f 31ff 	mov.w	r1, #4294967295

	for (tmp = 0; tmp < 32; tmp++) {
		SCB->SHP[tmp] = 0x00;
	}

	SCB->SHCSR = 0x00000000;
     da0:	6258      	str	r0, [r3, #36]	; 0x24
	SCB->CFSR = 0xFFFFFFFF;
     da2:	6299      	str	r1, [r3, #40]	; 0x28
	SCB->HFSR = 0xFFFFFFFF;
     da4:	62d9      	str	r1, [r3, #44]	; 0x2c
	SCB->DFSR = 0xFFFFFFFF;
     da6:	6319      	str	r1, [r3, #48]	; 0x30
     da8:	4770      	bx	lr
     daa:	bf00      	nop
     dac:	e000ed00 	.word	0xe000ed00
     db0:	05fa0000 	.word	0x05fa0000

00000db4 <NVIC_SetVTOR>:
 * @param		offset Offset value
 * @return      None
 *******************************************************************************/
void NVIC_SetVTOR(uint32_t offset)
{
	SCB->VTOR  = (offset & NVIC_VTOR_MASK);
     db4:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
     db8:	4b02      	ldr	r3, [pc, #8]	; (dc4 <NVIC_SetVTOR+0x10>)
     dba:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
     dbe:	6099      	str	r1, [r3, #8]
     dc0:	4770      	bx	lr
     dc2:	bf00      	nop
     dc4:	e000ed00 	.word	0xe000ed00

00000dc8 <PINSEL_ConfigTraceFunc>:
 *
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigTraceFunc(FunctionalState NewState)
{
	if (NewState == ENABLE) {
     dc8:	2801      	cmp	r0, #1
     dca:	d104      	bne.n	dd6 <PINSEL_ConfigTraceFunc+0xe>
		LPC_PINCON->PINSEL10 |= (0x01UL << 3);
     dcc:	4b05      	ldr	r3, [pc, #20]	; (de4 <PINSEL_ConfigTraceFunc+0x1c>)
     dce:	6a99      	ldr	r1, [r3, #40]	; 0x28
     dd0:	f041 0008 	orr.w	r0, r1, #8
     dd4:	e004      	b.n	de0 <PINSEL_ConfigTraceFunc+0x18>
	} else if (NewState == DISABLE) {
     dd6:	b920      	cbnz	r0, de2 <PINSEL_ConfigTraceFunc+0x1a>
		LPC_PINCON->PINSEL10 &= ~(0x01UL << 3);
     dd8:	4b02      	ldr	r3, [pc, #8]	; (de4 <PINSEL_ConfigTraceFunc+0x1c>)
     dda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     ddc:	f022 0008 	bic.w	r0, r2, #8
     de0:	6298      	str	r0, [r3, #40]	; 0x28
     de2:	4770      	bx	lr
     de4:	4002c000 	.word	0x4002c000

00000de8 <PINSEL_SetI2C0Pins>:
	}

	if (filterSlewRateEnable == DISABLE){
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
	}
	LPC_PINCON->I2CPADCFG = regVal;
     de8:	4b03      	ldr	r3, [pc, #12]	; (df8 <PINSEL_SetI2C0Pins+0x10>)

	if (i2cPinMode == PINSEL_I2C_Fast_Mode){
		regVal = PINSEL_I2CPADCFG_SCLDRV0 | PINSEL_I2CPADCFG_SDADRV0;
	}

	if (filterSlewRateEnable == DISABLE){
     dea:	2900      	cmp	r1, #0
     dec:	bf0c      	ite	eq
     dee:	210a      	moveq	r1, #10
     df0:	2105      	movne	r1, #5
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
	}
	LPC_PINCON->I2CPADCFG = regVal;
     df2:	67d9      	str	r1, [r3, #124]	; 0x7c
     df4:	4770      	bx	lr
     df6:	bf00      	nop
     df8:	4002c000 	.word	0x4002c000

00000dfc <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
     dfc:	b570      	push	{r4, r5, r6, lr}
 *
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
	uint32_t pinnum_t = pinnum;
     dfe:	7843      	ldrb	r3, [r0, #1]
	uint32_t pinselreg_idx = 2 * portnum;
     e00:	7802      	ldrb	r2, [r0, #0]
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
     e02:	7884      	ldrb	r4, [r0, #2]
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
	uint32_t pinnum_t = pinnum;
	uint32_t pinselreg_idx = 2 * portnum;
     e04:	0051      	lsls	r1, r2, #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINSEL0;

	if (pinnum_t >= 16) {
     e06:	2b0f      	cmp	r3, #15
     e08:	d901      	bls.n	e0e <PINSEL_ConfigPin+0x12>
		pinnum_t -= 16;
     e0a:	3b10      	subs	r3, #16
		pinselreg_idx++;
     e0c:	3101      	adds	r1, #1
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
     e0e:	008d      	lsls	r5, r1, #2
     e10:	005b      	lsls	r3, r3, #1
     e12:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
     e16:	2503      	movs	r5, #3
     e18:	fa05 f503 	lsl.w	r5, r5, r3
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
     e1c:	fa04 f403 	lsl.w	r4, r4, r3

	if (pinnum_t >= 16) {
		pinnum_t -= 16;
		pinselreg_idx++;
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
     e20:	f506 3230 	add.w	r2, r6, #180224	; 0x2c000
     e24:	6811      	ldr	r1, [r2, #0]
     e26:	ea21 0105 	bic.w	r1, r1, r5
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
     e2a:	ea41 0604 	orr.w	r6, r1, r4
     e2e:	6016      	str	r6, [r2, #0]

 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t pinnum_t = pinnum;
     e30:	7842      	ldrb	r2, [r0, #1]
	uint32_t pinmodereg_idx = 2 * portnum;
     e32:	7803      	ldrb	r3, [r0, #0]
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
     e34:	78c5      	ldrb	r5, [r0, #3]
 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t pinnum_t = pinnum;
	uint32_t pinmodereg_idx = 2 * portnum;
     e36:	005b      	lsls	r3, r3, #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE0;

	if (pinnum_t >= 16) {
     e38:	2a0f      	cmp	r2, #15
     e3a:	d901      	bls.n	e40 <PINSEL_ConfigPin+0x44>
		pinnum_t -= 16;
     e3c:	3a10      	subs	r2, #16
		pinmodereg_idx++ ;
     e3e:	3301      	adds	r3, #1
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
     e40:	0052      	lsls	r2, r2, #1
     e42:	2603      	movs	r6, #3
     e44:	fa06 f602 	lsl.w	r6, r6, r2
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
     e48:	fa05 f202 	lsl.w	r2, r5, r2
	if (pinnum_t >= 16) {
		pinnum_t -= 16;
		pinmodereg_idx++ ;
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
     e4c:	490f      	ldr	r1, [pc, #60]	; (e8c <PINSEL_ConfigPin+0x90>)
     e4e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
     e52:	ea24 0406 	bic.w	r4, r4, r6
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
     e56:	4322      	orrs	r2, r4
     e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
     e5c:	7802      	ldrb	r2, [r0, #0]
     e5e:	7841      	ldrb	r1, [r0, #1]
 **********************************************************************/
void set_OpenDrainMode( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE_OD0;

	if (modenum == PINSEL_PINMODE_OPENDRAIN){
     e60:	7900      	ldrb	r0, [r0, #4]
     e62:	4b0b      	ldr	r3, [pc, #44]	; (e90 <PINSEL_ConfigPin+0x94>)
     e64:	2801      	cmp	r0, #1
     e66:	d107      	bne.n	e78 <PINSEL_ConfigPin+0x7c>
		*(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
     e68:	fa00 f101 	lsl.w	r1, r0, r1
     e6c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
     e70:	430c      	orrs	r4, r1
     e72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
     e76:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		*(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
     e78:	2001      	movs	r0, #1
     e7a:	fa00 f101 	lsl.w	r1, r0, r1
     e7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     e82:	ea20 0001 	bic.w	r0, r0, r1
     e86:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
     e8a:	bd70      	pop	{r4, r5, r6, pc}
     e8c:	4002c040 	.word	0x4002c040
     e90:	4002c068 	.word	0x4002c068

00000e94 <CS_Init1>:
 * 				due to definition of CS_PORT_NUM and CS_PORT_NUM
 * @param		None
 * @return		None
 ***********************************************************************/
void CS_Init1 (LPC_SSP_TypeDef *SSPx)
{
     e94:	b508      	push	{r3, lr}
	if(SSPx == LPC_SSP0)
     e96:	4b0e      	ldr	r3, [pc, #56]	; (ed0 <CS_Init1+0x3c>)
     e98:	4298      	cmp	r0, r3
     e9a:	d109      	bne.n	eb0 <CS_Init1+0x1c>
	{
		GPIO_SetDir(0, _BIT(16), 1);
     e9c:	2000      	movs	r0, #0
     e9e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     ea2:	2201      	movs	r2, #1
     ea4:	f7ff f9f8 	bl	298 <GPIO_SetDir>
		GPIO_SetValue(0, _BIT(16));
     ea8:	2000      	movs	r0, #0
     eaa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     eae:	e009      	b.n	ec4 <CS_Init1+0x30>
	}
	else if (SSPx == LPC_SSP1)
     eb0:	4908      	ldr	r1, [pc, #32]	; (ed4 <CS_Init1+0x40>)
     eb2:	4288      	cmp	r0, r1
     eb4:	d10a      	bne.n	ecc <CS_Init1+0x38>
	{
		GPIO_SetDir(0, _BIT(6), 1);
     eb6:	2000      	movs	r0, #0
     eb8:	2140      	movs	r1, #64	; 0x40
     eba:	2201      	movs	r2, #1
     ebc:	f7ff f9ec 	bl	298 <GPIO_SetDir>
		GPIO_SetValue(0, _BIT(6));
     ec0:	2000      	movs	r0, #0
     ec2:	2140      	movs	r1, #64	; 0x40
	}
}
     ec4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GPIO_SetValue(0, _BIT(16));
	}
	else if (SSPx == LPC_SSP1)
	{
		GPIO_SetDir(0, _BIT(6), 1);
		GPIO_SetValue(0, _BIT(6));
     ec8:	f7ff b9f8 	b.w	2bc <GPIO_SetValue>
     ecc:	bd08      	pop	{r3, pc}
     ece:	bf00      	nop
     ed0:	40088000 	.word	0x40088000
     ed4:	40030000 	.word	0x40030000

00000ed8 <CS_Force1>:
 * 				- 1: Drive CS pin to high level
 * @return		None
 ***********************************************************************/
void CS_Force1 (LPC_SSP_TypeDef *SSPx, FunctionalState state)
{
	if (SSPx == LPC_SSP0)
     ed8:	4b0c      	ldr	r3, [pc, #48]	; (f0c <CS_Force1+0x34>)
     eda:	4298      	cmp	r0, r3
     edc:	d108      	bne.n	ef0 <CS_Force1+0x18>
	{
		if (state)
     ede:	b119      	cbz	r1, ee8 <CS_Force1+0x10>
		{
			GPIO_SetValue(0, _BIT(16));
     ee0:	2000      	movs	r0, #0
     ee2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     ee6:	e009      	b.n	efc <CS_Force1+0x24>
		}
		else
		{
			GPIO_ClearValue(0, _BIT(16));
     ee8:	4608      	mov	r0, r1
     eea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     eee:	e009      	b.n	f04 <CS_Force1+0x2c>
		}
	}
	else if (SSPx == LPC_SSP1)
     ef0:	4a07      	ldr	r2, [pc, #28]	; (f10 <CS_Force1+0x38>)
     ef2:	4290      	cmp	r0, r2
     ef4:	d108      	bne.n	f08 <CS_Force1+0x30>
	{
		if (state)
     ef6:	b119      	cbz	r1, f00 <CS_Force1+0x28>
		{
			GPIO_SetValue(0, _BIT(6));
     ef8:	2000      	movs	r0, #0
     efa:	2140      	movs	r1, #64	; 0x40
     efc:	f7ff b9de 	b.w	2bc <GPIO_SetValue>
		}
		else
		{
			GPIO_ClearValue(0, _BIT(6));
     f00:	4608      	mov	r0, r1
     f02:	2140      	movs	r1, #64	; 0x40
     f04:	f7ff b9e4 	b.w	2d0 <GPIO_ClearValue>
     f08:	4770      	bx	lr
     f0a:	bf00      	nop
     f0c:	40088000 	.word	0x40088000
     f10:	40030000 	.word	0x40030000

00000f14 <Buffer_Init1>:
 * @brief		Initialize buffer
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Buffer_Init1 (void)
{
     f14:	2300      	movs	r3, #0
	uint8_t i;
#if (SSP_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE1; i++)
	{
		Tx_Buf1[i] = 0;
     f16:	4904      	ldr	r1, [pc, #16]	; (f28 <Buffer_Init1+0x14>)
		Rx_Buf1[i] = 0;
     f18:	4804      	ldr	r0, [pc, #16]	; (f2c <Buffer_Init1+0x18>)
{
	uint8_t i;
#if (SSP_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE1; i++)
	{
		Tx_Buf1[i] = 0;
     f1a:	2200      	movs	r2, #0
     f1c:	545a      	strb	r2, [r3, r1]
		Rx_Buf1[i] = 0;
     f1e:	541a      	strb	r2, [r3, r0]
     f20:	3301      	adds	r3, #1
 **********************************************************************/
void Buffer_Init1 (void)
{
	uint8_t i;
#if (SSP_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE1; i++)
     f22:	2b40      	cmp	r3, #64	; 0x40
     f24:	d1f7      	bne.n	f16 <Buffer_Init1+0x2>
	{
		Tx_Buf1[i] = 0;
		Rx_Buf1[i] = 0;
	}
#endif
}
     f26:	4770      	bx	lr
     f28:	100002cc 	.word	0x100002cc
     f2c:	1000030c 	.word	0x1000030c

00000f30 <SSP_Init>:
{
	uint32_t tmp;

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
     f30:	4b24      	ldr	r3, [pc, #144]	; (fc4 <SSP_Init+0x94>)
*                    that contains the configuration information for the
*                    specified SSP peripheral.
* @return 		None
 *********************************************************************/
void SSP_Init(LPC_SSP_TypeDef *SSPx, SSP_CFG_Type *SSP_ConfigStruct)
{
     f32:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp;

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
     f34:	4298      	cmp	r0, r3
*                    that contains the configuration information for the
*                    specified SSP peripheral.
* @return 		None
 *********************************************************************/
void SSP_Init(LPC_SSP_TypeDef *SSPx, SSP_CFG_Type *SSP_ConfigStruct)
{
     f36:	4604      	mov	r4, r0
     f38:	460d      	mov	r5, r1

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, ENABLE);
     f3a:	bf08      	it	eq
     f3c:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
{
	uint32_t tmp;

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
     f40:	d004      	beq.n	f4c <SSP_Init+0x1c>
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, ENABLE);
	} else if(SSPx == LPC_SSP1) {
     f42:	4821      	ldr	r0, [pc, #132]	; (fc8 <SSP_Init+0x98>)
     f44:	4284      	cmp	r4, r0
     f46:	d13b      	bne.n	fc0 <SSP_Init+0x90>
		/* Set up clock and power for SSP1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP1, ENABLE);
     f48:	f44f 6080 	mov.w	r0, #1024	; 0x400
     f4c:	2101      	movs	r1, #1
     f4e:	f7ff f907 	bl	160 <CLKPWR_ConfigPPWR>
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
     f52:	6869      	ldr	r1, [r5, #4]
     f54:	68aa      	ldr	r2, [r5, #8]
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
     f56:	692e      	ldr	r6, [r5, #16]
     f58:	682b      	ldr	r3, [r5, #0]
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
     f5a:	430a      	orrs	r2, r1
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
     f5c:	4332      	orrs	r2, r6
     f5e:	ea42 0003 	orr.w	r0, r2, r3
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
     f62:	68e9      	ldr	r1, [r5, #12]

    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
     f64:	4b17      	ldr	r3, [pc, #92]	; (fc4 <SSP_Init+0x94>)
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
     f66:	b282      	uxth	r2, r0
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
     f68:	f001 060f 	and.w	r6, r1, #15
    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP0);
     f6c:	202a      	movs	r0, #42	; 0x2a

    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
     f6e:	429c      	cmp	r4, r3
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;
     f70:	6022      	str	r2, [r4, #0]

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
	// Write back to CR1
	SSPx->CR1 = tmp;
     f72:	6066      	str	r6, [r4, #4]

	// Set clock rate for SSP peripheral
	setSSPclock(SSPx, SSP_ConfigStruct->ClockRate);
     f74:	696e      	ldr	r6, [r5, #20]

    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
     f76:	d003      	beq.n	f80 <SSP_Init+0x50>
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP0);
    } else if (SSPx == LPC_SSP1) {
     f78:	4813      	ldr	r0, [pc, #76]	; (fc8 <SSP_Init+0x98>)
     f7a:	4284      	cmp	r4, r0
     f7c:	d120      	bne.n	fc0 <SSP_Init+0x90>
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP1);
     f7e:	2014      	movs	r0, #20
     f80:	f7ff f8de 	bl	140 <CLKPWR_GetPCLK>

	/* Find closest divider to get at or under the target frequency.
	   Use smallest prescale possible and rely on the divider to get
	   the closest target frequency */
	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
     f84:	f04f 31ff 	mov.w	r1, #4294967295
    }

	/* Find closest divider to get at or under the target frequency.
	   Use smallest prescale possible and rely on the divider to get
	   the closest target frequency */
	cr0_div = 0;
     f88:	2200      	movs	r2, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
     f8a:	2302      	movs	r3, #2
	while (cmp_clk > target_clock)
     f8c:	42b1      	cmp	r1, r6
     f8e:	d90d      	bls.n	fac <SSP_Init+0x7c>
	{
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
     f90:	1c55      	adds	r5, r2, #1
     f92:	fb03 f105 	mul.w	r1, r3, r5
     f96:	fbb0 f1f1 	udiv	r1, r0, r1
		if (cmp_clk > target_clock)
     f9a:	42b1      	cmp	r1, r6
     f9c:	d906      	bls.n	fac <SSP_Init+0x7c>
		{
			cr0_div++;
			if (cr0_div > 0xFF)
     f9e:	2dff      	cmp	r5, #255	; 0xff
     fa0:	d902      	bls.n	fa8 <SSP_Init+0x78>
			{
				cr0_div = 0;
				prescale += 2;
     fa2:	3302      	adds	r3, #2
		if (cmp_clk > target_clock)
		{
			cr0_div++;
			if (cr0_div > 0xFF)
			{
				cr0_div = 0;
     fa4:	2200      	movs	r2, #0
     fa6:	e7f1      	b.n	f8c <SSP_Init+0x5c>
	{
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > target_clock)
		{
			cr0_div++;
			if (cr0_div > 0xFF)
     fa8:	462a      	mov	r2, r5
     faa:	e7ef      	b.n	f8c <SSP_Init+0x5c>
			}
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
     fac:	6820      	ldr	r0, [r4, #0]
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
     fae:	0612      	lsls	r2, r2, #24
			}
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
     fb0:	b2c1      	uxtb	r1, r0
     fb2:	6021      	str	r1, [r4, #0]
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
     fb4:	6820      	ldr	r0, [r4, #0]
    SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
     fb6:	b2db      	uxtb	r3, r3
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
     fb8:	ea40 4112 	orr.w	r1, r0, r2, lsr #16
     fbc:	6021      	str	r1, [r4, #0]
    SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
     fbe:	6123      	str	r3, [r4, #16]
     fc0:	bd70      	pop	{r4, r5, r6, pc}
     fc2:	bf00      	nop
     fc4:	40088000 	.word	0x40088000
     fc8:	40030000 	.word	0x40030000

00000fcc <SSP_DeInit>:
 **********************************************************************/
void SSP_DeInit(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (SSPx == LPC_SSP0){
     fcc:	4b07      	ldr	r3, [pc, #28]	; (fec <SSP_DeInit+0x20>)
     fce:	4298      	cmp	r0, r3
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, DISABLE);
     fd0:	bf08      	it	eq
     fd2:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
 **********************************************************************/
void SSP_DeInit(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (SSPx == LPC_SSP0){
     fd6:	d004      	beq.n	fe2 <SSP_DeInit+0x16>
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, DISABLE);
	} else if (SSPx == LPC_SSP1) {
     fd8:	4905      	ldr	r1, [pc, #20]	; (ff0 <SSP_DeInit+0x24>)
     fda:	4288      	cmp	r0, r1
     fdc:	d104      	bne.n	fe8 <SSP_DeInit+0x1c>
		/* Set up clock and power for SSP1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP1, DISABLE);
     fde:	f44f 6080 	mov.w	r0, #1024	; 0x400
     fe2:	2100      	movs	r1, #0
     fe4:	f7ff b8bc 	b.w	160 <CLKPWR_ConfigPPWR>
     fe8:	4770      	bx	lr
     fea:	bf00      	nop
     fec:	40088000 	.word	0x40088000
     ff0:	40030000 	.word	0x40030000

00000ff4 <SSP_GetDataSize>:
*				- SSP_DATABIT_16: 16 bit transfer
*******************************************************************************/
uint8_t SSP_GetDataSize(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->CR0 & (0xF));
     ff4:	6800      	ldr	r0, [r0, #0]
}
     ff6:	f000 000f 	and.w	r0, r0, #15
     ffa:	4770      	bx	lr

00000ffc <SSP_ConfigStructInit>:
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
	SSP_InitStruct->ClockRate = 3000000;
     ffc:	4a04      	ldr	r2, [pc, #16]	; (1010 <SSP_ConfigStructInit+0x14>)
*                    which will be initialized.
* @return		None
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
     ffe:	2300      	movs	r3, #0
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
	SSP_InitStruct->ClockRate = 3000000;
	SSP_InitStruct->Databit = SSP_DATABIT_8;
    1000:	2107      	movs	r1, #7
*                    which will be initialized.
* @return		None
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
    1002:	6043      	str	r3, [r0, #4]
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
    1004:	6083      	str	r3, [r0, #8]
	SSP_InitStruct->ClockRate = 3000000;
    1006:	6142      	str	r2, [r0, #20]
	SSP_InitStruct->Databit = SSP_DATABIT_8;
    1008:	6001      	str	r1, [r0, #0]
	SSP_InitStruct->Mode = SSP_MASTER_MODE;
    100a:	60c3      	str	r3, [r0, #12]
	SSP_InitStruct->FrameFormat = SSP_FRAME_SPI;
    100c:	6103      	str	r3, [r0, #16]
    100e:	4770      	bx	lr
    1010:	002dc6c0 	.word	0x002dc6c0

00001014 <SSP_Config>:
* 				 		- LPC_SSP0: SSP0 peripheral
* 						- LPC_SSP1: SSP1 peripheral
* @return 		None
***********************************************************************/
void SSP_Config (LPC_SSP_TypeDef *SSPx)
{
    1014:	b570      	push	{r4, r5, r6, lr}
	PINSEL_CFG_Type PinCfg;

	// SSP Configuration structure variable
	SSP_CFG_Type SSP_ConfigStruct;

	if(SSPx == LPC_SSP0)
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <SSP_Config+0xe8>)
* 				 		- LPC_SSP0: SSP0 peripheral
* 						- LPC_SSP1: SSP1 peripheral
* @return 		None
***********************************************************************/
void SSP_Config (LPC_SSP_TypeDef *SSPx)
{
    1018:	b088      	sub	sp, #32
	PINSEL_CFG_Type PinCfg;

	// SSP Configuration structure variable
	SSP_CFG_Type SSP_ConfigStruct;

	if(SSPx == LPC_SSP0)
    101a:	4298      	cmp	r0, r3
* 				 		- LPC_SSP0: SSP0 peripheral
* 						- LPC_SSP1: SSP1 peripheral
* @return 		None
***********************************************************************/
void SSP_Config (LPC_SSP_TypeDef *SSPx)
{
    101c:	4604      	mov	r4, r0
	PINSEL_CFG_Type PinCfg;

	// SSP Configuration structure variable
	SSP_CFG_Type SSP_ConfigStruct;

	if(SSPx == LPC_SSP0)
    101e:	d12b      	bne.n	1078 <SSP_Config+0x64>
		 * P0.15 - SCK0;
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
    1020:	2502      	movs	r5, #2
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
    1022:	200f      	movs	r0, #15
		 * P0.15 - SCK0;
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
    1024:	f88d 5002 	strb.w	r5, [sp, #2]
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
    1028:	f88d 0001 	strb.w	r0, [sp, #1]
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
		PinCfg.OpenDrain = 0;
    102c:	2500      	movs	r5, #0
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
    102e:	4668      	mov	r0, sp
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
		PinCfg.OpenDrain = 0;
    1030:	f88d 5004 	strb.w	r5, [sp, #4]
		PinCfg.Pinmode = 0;
    1034:	f88d 5003 	strb.w	r5, [sp, #3]
		PinCfg.Portnum = 0;
    1038:	f88d 5000 	strb.w	r5, [sp]
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
    103c:	f7ff fede 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 17;
    1040:	2111      	movs	r1, #17
		PINSEL_ConfigPin(&PinCfg);
    1042:	4668      	mov	r0, sp
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 17;
    1044:	f88d 1001 	strb.w	r1, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    1048:	f7ff fed8 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 18;
    104c:	2212      	movs	r2, #18
		PINSEL_ConfigPin(&PinCfg);
    104e:	4668      	mov	r0, sp
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 17;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 18;
    1050:	f88d 2001 	strb.w	r2, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    1054:	f7ff fed2 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 16;
    1058:	2310      	movs	r3, #16
		PinCfg.Funcnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    105a:	4668      	mov	r0, sp
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 17;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 18;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 16;
    105c:	f88d 3001 	strb.w	r3, [sp, #1]
		PinCfg.Funcnum = 0;
    1060:	f88d 5002 	strb.w	r5, [sp, #2]
		PINSEL_ConfigPin(&PinCfg);
    1064:	f7ff feca 	bl	dfc <PINSEL_ConfigPin>

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);
    1068:	a802      	add	r0, sp, #8
    106a:	f7ff ffc7 	bl	ffc <SSP_ConfigStructInit>

		SSP_ConfigStruct.ClockRate = 3000000;
    106e:	4824      	ldr	r0, [pc, #144]	; (1100 <SSP_Config+0xec>)
		SSP_ConfigStruct.Databit = SSP_DATABIT_8;
    1070:	2107      	movs	r1, #7
		PINSEL_ConfigPin(&PinCfg);

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);

		SSP_ConfigStruct.ClockRate = 3000000;
    1072:	9007      	str	r0, [sp, #28]
		SSP_ConfigStruct.Databit = SSP_DATABIT_8;
    1074:	9102      	str	r1, [sp, #8]
    1076:	e032      	b.n	10de <SSP_Config+0xca>
	}
	else if(SSPx == LPC_SSP1)
    1078:	4822      	ldr	r0, [pc, #136]	; (1104 <SSP_Config+0xf0>)
    107a:	4284      	cmp	r4, r0
    107c:	d12f      	bne.n	10de <SSP_Config+0xca>
		 * P0.6 - SSEL1 - used as GPIO
		 * P0.7 - SCK1
		 * P0.8 - MISO1
		 * P0.9 - MOSI1
		 */
		PinCfg.Funcnum = 2;
    107e:	2102      	movs	r1, #2
		PinCfg.OpenDrain = 0;
    1080:	2500      	movs	r5, #0
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 7;
    1082:	2607      	movs	r6, #7
		PINSEL_ConfigPin(&PinCfg);
    1084:	4668      	mov	r0, sp
		 * P0.6 - SSEL1 - used as GPIO
		 * P0.7 - SCK1
		 * P0.8 - MISO1
		 * P0.9 - MOSI1
		 */
		PinCfg.Funcnum = 2;
    1086:	f88d 1002 	strb.w	r1, [sp, #2]
		PinCfg.OpenDrain = 0;
    108a:	f88d 5004 	strb.w	r5, [sp, #4]
		PinCfg.Pinmode = 0;
    108e:	f88d 5003 	strb.w	r5, [sp, #3]
		PinCfg.Portnum = 0;
    1092:	f88d 5000 	strb.w	r5, [sp]
		PinCfg.Pinnum = 7;
    1096:	f88d 6001 	strb.w	r6, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    109a:	f7ff feaf 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 8;
    109e:	2208      	movs	r2, #8
		PINSEL_ConfigPin(&PinCfg);
    10a0:	4668      	mov	r0, sp
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 7;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 8;
    10a2:	f88d 2001 	strb.w	r2, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    10a6:	f7ff fea9 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 9;
    10aa:	2309      	movs	r3, #9
		PINSEL_ConfigPin(&PinCfg);
    10ac:	4668      	mov	r0, sp
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 7;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 8;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 9;
    10ae:	f88d 3001 	strb.w	r3, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    10b2:	f7ff fea3 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 6;
    10b6:	2006      	movs	r0, #6
    10b8:	f88d 0001 	strb.w	r0, [sp, #1]
		PinCfg.Funcnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    10bc:	4668      	mov	r0, sp
		PinCfg.Pinnum = 8;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 9;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 6;
		PinCfg.Funcnum = 0;
    10be:	f88d 5002 	strb.w	r5, [sp, #2]
		PINSEL_ConfigPin(&PinCfg);
    10c2:	f7ff fe9b 	bl	dfc <PINSEL_ConfigPin>

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);
    10c6:	a802      	add	r0, sp, #8
    10c8:	f7ff ff98 	bl	ffc <SSP_ConfigStructInit>

		SSP_ConfigStruct.CPHA = SSP_CPHA_SECOND;
		SSP_ConfigStruct.CPOL = SSP_CPOL_LO;
		SSP_ConfigStruct.ClockRate = 15000000;
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <SSP_Config+0xf4>)
		PINSEL_ConfigPin(&PinCfg);

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);

		SSP_ConfigStruct.CPHA = SSP_CPHA_SECOND;
    10ce:	2180      	movs	r1, #128	; 0x80
		SSP_ConfigStruct.CPOL = SSP_CPOL_LO;
    10d0:	2240      	movs	r2, #64	; 0x40
		PINSEL_ConfigPin(&PinCfg);

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);

		SSP_ConfigStruct.CPHA = SSP_CPHA_SECOND;
    10d2:	9103      	str	r1, [sp, #12]
		SSP_ConfigStruct.CPOL = SSP_CPOL_LO;
    10d4:	9204      	str	r2, [sp, #16]
		SSP_ConfigStruct.ClockRate = 15000000;
    10d6:	9307      	str	r3, [sp, #28]
		SSP_ConfigStruct.Databit = SSP_DATABIT_8;
    10d8:	9602      	str	r6, [sp, #8]
		SSP_ConfigStruct.Mode = SSP_MASTER_MODE;
    10da:	9505      	str	r5, [sp, #20]
		SSP_ConfigStruct.FrameFormat = SSP_FRAME_SPI;
    10dc:	9506      	str	r5, [sp, #24]
	}

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(SSPx, &SSP_ConfigStruct);
    10de:	4620      	mov	r0, r4
    10e0:	a902      	add	r1, sp, #8
    10e2:	f7ff ff25 	bl	f30 <SSP_Init>

	CS_Init1(SSPx);     // Chip Select Init
    10e6:	4620      	mov	r0, r4
    10e8:	f7ff fed4 	bl	e94 <CS_Init1>
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
    10ec:	6862      	ldr	r2, [r4, #4]
    10ee:	f042 0302 	orr.w	r3, r2, #2
    10f2:	6063      	str	r3, [r4, #4]
	CS_Init1(SSPx);     // Chip Select Init

	// Enable SSP peripheral
	SSP_Cmd(SSPx, ENABLE);

	Buffer_Init1(); // Empty Buffer
    10f4:	f7ff ff0e 	bl	f14 <Buffer_Init1>
}
    10f8:	b008      	add	sp, #32
    10fa:	bd70      	pop	{r4, r5, r6, pc}
    10fc:	40088000 	.word	0x40088000
    1100:	002dc6c0 	.word	0x002dc6c0
    1104:	40030000 	.word	0x40030000
    1108:	00e4e1c0 	.word	0x00e4e1c0

0000110c <SSP_Cmd>:
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
    110c:	6843      	ldr	r3, [r0, #4]
void SSP_Cmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    110e:	2901      	cmp	r1, #1
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
    1110:	bf0c      	ite	eq
    1112:	f043 0302 	orreq.w	r3, r3, #2
	}
	else
	{
		SSPx->CR1 &= (~SSP_CR1_SSP_EN) & SSP_CR1_BITMASK;
    1116:	f003 030d 	andne.w	r3, r3, #13
    111a:	6043      	str	r3, [r0, #4]
    111c:	4770      	bx	lr

0000111e <SSP_LoopBackCmd>:
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 |= SSP_CR1_LBM_EN;
    111e:	6843      	ldr	r3, [r0, #4]
void SSP_LoopBackCmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    1120:	2901      	cmp	r1, #1
	{
		SSPx->CR1 |= SSP_CR1_LBM_EN;
    1122:	bf0c      	ite	eq
    1124:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		SSPx->CR1 &= (~SSP_CR1_LBM_EN) & SSP_CR1_BITMASK;
    1128:	f003 030e 	andne.w	r3, r3, #14
    112c:	6043      	str	r3, [r0, #4]
    112e:	4770      	bx	lr

00001130 <SSP_SlaveOutputCmd>:
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 &= (~SSP_CR1_SO_DISABLE) & SSP_CR1_BITMASK;
    1130:	6843      	ldr	r3, [r0, #4]
void SSP_SlaveOutputCmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    1132:	2901      	cmp	r1, #1
	{
		SSPx->CR1 &= (~SSP_CR1_SO_DISABLE) & SSP_CR1_BITMASK;
    1134:	bf0c      	ite	eq
    1136:	f003 0307 	andeq.w	r3, r3, #7
	}
	else
	{
		SSPx->CR1 |= SSP_CR1_SO_DISABLE;
    113a:	f043 0308 	orrne.w	r3, r3, #8
    113e:	6043      	str	r3, [r0, #4]
    1140:	4770      	bx	lr

00001142 <SSP_SendData>:
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1142:	6081      	str	r1, [r0, #8]
    1144:	4770      	bx	lr

00001146 <SSP_ReceiveData>:
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    1146:	6880      	ldr	r0, [r0, #8]
}
    1148:	b280      	uxth	r0, r0
    114a:	4770      	bx	lr

0000114c <SSP_ReadWrite>:
    uint16_t *wdata16;
    uint32_t stat;
    uint32_t tmp;
    int32_t dataword;

    dataCfg->rx_cnt = 0;
    114c:	2300      	movs	r3, #0
 * 				Return (-1) if error.
 * Note: This function can be used in both master and slave mode.
 ***********************************************************************/
int32_t SSP_ReadWrite (LPC_SSP_TypeDef *SSPx, SSP_DATA_SETUP_Type *dataCfg, \
						SSP_TRANSFER_Type xfType)
{
    114e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *wdata16;
    uint32_t stat;
    uint32_t tmp;
    int32_t dataword;

    dataCfg->rx_cnt = 0;
    1152:	60cb      	str	r3, [r1, #12]
    dataCfg->tx_cnt = 0;
    1154:	604b      	str	r3, [r1, #4]
    dataCfg->status = 0;
    1156:	614b      	str	r3, [r1, #20]


	/* Clear all remaining data in RX FIFO */
	while (SSPx->SR & SSP_SR_RNE){
    1158:	68c4      	ldr	r4, [r0, #12]
    115a:	f014 0404 	ands.w	r4, r4, #4
    115e:	d001      	beq.n	1164 <SSP_ReadWrite+0x18>
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    1160:	6883      	ldr	r3, [r0, #8]
    1162:	e7f9      	b.n	1158 <SSP_ReadWrite+0xc>
	while (SSPx->SR & SSP_SR_RNE){
		tmp = (uint32_t) SSP_ReceiveData(SSPx);
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
    1164:	2303      	movs	r3, #3
    1166:	6203      	str	r3, [r0, #32]
*				- SSP_DATABIT_16: 16 bit transfer
*******************************************************************************/
uint8_t SSP_GetDataSize(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->CR0 & (0xF));
    1168:	6803      	ldr	r3, [r0, #0]
		tmp = (uint32_t) SSP_ReceiveData(SSPx);
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
	if(SSP_GetDataSize(SSPx)>8)
    116a:	f003 030f 	and.w	r3, r3, #15
    116e:	2b08      	cmp	r3, #8
    1170:	d804      	bhi.n	117c <SSP_ReadWrite+0x30>
		dataword = 1;
	else dataword = 0;

	// Polling mode ----------------------------------------------------------------------
	if (xfType == SSP_TRANSFER_POLLING){
    1172:	2a00      	cmp	r2, #0
    1174:	d157      	bne.n	1226 <SSP_ReadWrite+0xda>
		if (dataword == 0){
			rdata8 = (uint8_t *)dataCfg->rx_data;
    1176:	688d      	ldr	r5, [r1, #8]
			wdata8 = (uint8_t *)dataCfg->tx_data;
    1178:	680e      	ldr	r6, [r1, #0]
    117a:	e005      	b.n	1188 <SSP_ReadWrite+0x3c>
	if(SSP_GetDataSize(SSPx)>8)
		dataword = 1;
	else dataword = 0;

	// Polling mode ----------------------------------------------------------------------
	if (xfType == SSP_TRANSFER_POLLING){
    117c:	2a00      	cmp	r2, #0
    117e:	d151      	bne.n	1224 <SSP_ReadWrite+0xd8>
		if (dataword == 0){
			rdata8 = (uint8_t *)dataCfg->rx_data;
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
    1180:	688f      	ldr	r7, [r1, #8]
			wdata16 = (uint16_t *)dataCfg->tx_data;
    1182:	f8d1 c000 	ldr.w	ip, [r1]
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
	if(SSP_GetDataSize(SSPx)>8)
		dataword = 1;
    1186:	2201      	movs	r2, #1
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}
		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
    1188:	684b      	ldr	r3, [r1, #4]
    118a:	f8d1 8010 	ldr.w	r8, [r1, #16]
    118e:	4543      	cmp	r3, r8
    1190:	d036      	beq.n	1200 <SSP_ReadWrite+0xb4>
			if ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
    1192:	68c4      	ldr	r4, [r0, #12]
    1194:	f014 0f02 	tst.w	r4, #2
    1198:	d014      	beq.n	11c4 <SSP_ReadWrite+0x78>
    119a:	4543      	cmp	r3, r8
    119c:	d012      	beq.n	11c4 <SSP_ReadWrite+0x78>
				// Write data to buffer
				if(dataCfg->tx_data == NULL){
    119e:	680c      	ldr	r4, [r1, #0]
    11a0:	b92c      	cbnz	r4, 11ae <SSP_ReadWrite+0x62>
					if (dataword == 0){
    11a2:	b90a      	cbnz	r2, 11a8 <SSP_ReadWrite+0x5c>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    11a4:	24ff      	movs	r4, #255	; 0xff
    11a6:	e005      	b.n	11b4 <SSP_ReadWrite+0x68>
    11a8:	f64f 74ff 	movw	r4, #65535	; 0xffff
    11ac:	e007      	b.n	11be <SSP_ReadWrite+0x72>
					} else {
						SSP_SendData(SSPx, 0xFFFF);
						dataCfg->tx_cnt += 2;
					}
				} else {
					if (dataword == 0){
    11ae:	b922      	cbnz	r2, 11ba <SSP_ReadWrite+0x6e>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    11b0:	f816 4b01 	ldrb.w	r4, [r6], #1
    11b4:	6084      	str	r4, [r0, #8]
					}
				} else {
					if (dataword == 0){
						SSP_SendData(SSPx, *wdata8);
						wdata8++;
						dataCfg->tx_cnt++;
    11b6:	3301      	adds	r3, #1
    11b8:	e003      	b.n	11c2 <SSP_ReadWrite+0x76>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    11ba:	f83c 4b02 	ldrh.w	r4, [ip], #2
    11be:	6084      	str	r4, [r0, #8]
						wdata8++;
						dataCfg->tx_cnt++;
					} else {
						SSP_SendData(SSPx, *wdata16);
						wdata16++;
						dataCfg->tx_cnt += 2;
    11c0:	3302      	adds	r3, #2
    11c2:	604b      	str	r3, [r1, #4]
					}
				}
			}

			// Check overrun error
			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
    11c4:	6983      	ldr	r3, [r0, #24]
    11c6:	f013 0f01 	tst.w	r3, #1
    11ca:	d150      	bne.n	126e <SSP_ReadWrite+0x122>
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
    11cc:	68c4      	ldr	r4, [r0, #12]
    11ce:	0764      	lsls	r4, r4, #29
    11d0:	d5da      	bpl.n	1188 <SSP_ReadWrite+0x3c>
    11d2:	68cc      	ldr	r4, [r1, #12]
    11d4:	690b      	ldr	r3, [r1, #16]
    11d6:	429c      	cmp	r4, r3
    11d8:	d0d6      	beq.n	1188 <SSP_ReadWrite+0x3c>
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    11da:	688b      	ldr	r3, [r1, #8]
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    11dc:	f8d0 8008 	ldr.w	r8, [r0, #8]
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    11e0:	b133      	cbz	r3, 11f0 <SSP_ReadWrite+0xa4>
				{
					if (dataword == 0){
    11e2:	b912      	cbnz	r2, 11ea <SSP_ReadWrite+0x9e>
						*(rdata8) = (uint8_t) tmp;
    11e4:	f805 8b01 	strb.w	r8, [r5], #1
    11e8:	e003      	b.n	11f2 <SSP_ReadWrite+0xa6>
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    11ea:	f827 8b02 	strh.w	r8, [r7], #2
    11ee:	e004      	b.n	11fa <SSP_ReadWrite+0xae>
						*(rdata16) = (uint16_t) tmp;
						rdata16++;
					}
				}
				// Increase counter
				if (dataword == 0){
    11f0:	b91a      	cbnz	r2, 11fa <SSP_ReadWrite+0xae>
					dataCfg->rx_cnt++;
    11f2:	68cb      	ldr	r3, [r1, #12]
    11f4:	1c5c      	adds	r4, r3, #1
    11f6:	60cc      	str	r4, [r1, #12]
    11f8:	e7e8      	b.n	11cc <SSP_ReadWrite+0x80>
				} else {
					dataCfg->rx_cnt += 2;
    11fa:	3402      	adds	r4, #2
    11fc:	60cc      	str	r4, [r1, #12]
    11fe:	e7e5      	b.n	11cc <SSP_ReadWrite+0x80>
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}
		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
    1200:	68cc      	ldr	r4, [r1, #12]
    1202:	429c      	cmp	r4, r3
    1204:	d1c5      	bne.n	1192 <SSP_ReadWrite+0x46>
		}

		// save status
		dataCfg->status = SSP_STAT_DONE;

		if (dataCfg->tx_data != NULL){
    1206:	680a      	ldr	r2, [r1, #0]
				}
			}
		}

		// save status
		dataCfg->status = SSP_STAT_DONE;
    1208:	f44f 7080 	mov.w	r0, #256	; 0x100
    120c:	6148      	str	r0, [r1, #20]

		if (dataCfg->tx_data != NULL){
    120e:	b112      	cbz	r2, 1216 <SSP_ReadWrite+0xca>
			return dataCfg->tx_cnt;
    1210:	4620      	mov	r0, r4
    1212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (dataCfg->rx_data != NULL){
    1216:	6889      	ldr	r1, [r1, #8]
			return dataCfg->rx_cnt;
    1218:	2900      	cmp	r1, #0
    121a:	bf14      	ite	ne
    121c:	4620      	movne	r0, r4
    121e:	2000      	moveq	r0, #0
    1220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
	if(SSP_GetDataSize(SSPx)>8)
		dataword = 1;
    1224:	2401      	movs	r4, #1
			return (0);
		}
	}

	// Interrupt mode ----------------------------------------------------------------------
	else if (xfType == SSP_TRANSFER_INTERRUPT){
    1226:	2a01      	cmp	r2, #1
    1228:	d010      	beq.n	124c <SSP_ReadWrite+0x100>
    122a:	e023      	b.n	1274 <SSP_ReadWrite+0x128>
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
    122c:	68cb      	ldr	r3, [r1, #12]
    122e:	690a      	ldr	r2, [r1, #16]
    1230:	4293      	cmp	r3, r2
    1232:	d00b      	beq.n	124c <SSP_ReadWrite+0x100>
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    1234:	688a      	ldr	r2, [r1, #8]
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    1236:	6885      	ldr	r5, [r0, #8]
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    1238:	2a00      	cmp	r2, #0
    123a:	d02b      	beq.n	1294 <SSP_ReadWrite+0x148>
				{
					if (dataword == 0){
    123c:	bb44      	cbnz	r4, 1290 <SSP_ReadWrite+0x144>
						*(uint8_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint8_t) tmp;
    123e:	54d5      	strb	r5, [r2, r3]
						*(uint16_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint16_t) tmp;
					}
				}
				// Increase counter
				if (dataword == 0){
					dataCfg->rx_cnt++;
    1240:	68ca      	ldr	r2, [r1, #12]
    1242:	1c53      	adds	r3, r2, #1
				} else {
					dataCfg->rx_cnt += 2;
    1244:	60cb      	str	r3, [r1, #12]
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
    1246:	68c2      	ldr	r2, [r0, #12]
    1248:	0752      	lsls	r2, r2, #29
    124a:	d4ef      	bmi.n	122c <SSP_ReadWrite+0xe0>
	}

	// Interrupt mode ----------------------------------------------------------------------
	else if (xfType == SSP_TRANSFER_INTERRUPT){

		while ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
    124c:	68c2      	ldr	r2, [r0, #12]
    124e:	0793      	lsls	r3, r2, #30
    1250:	d524      	bpl.n	129c <SSP_ReadWrite+0x150>
    1252:	684b      	ldr	r3, [r1, #4]
    1254:	690a      	ldr	r2, [r1, #16]
    1256:	4293      	cmp	r3, r2
    1258:	d020      	beq.n	129c <SSP_ReadWrite+0x150>
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    125a:	680a      	ldr	r2, [r1, #0]
    125c:	b98a      	cbnz	r2, 1282 <SSP_ReadWrite+0x136>
				if (dataword == 0){
    125e:	b96c      	cbnz	r4, 127c <SSP_ReadWrite+0x130>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1260:	22ff      	movs	r2, #255	; 0xff
    1262:	6082      	str	r2, [r0, #8]
					dataCfg->tx_cnt += 2;
				}
			} else {
				if (dataword == 0){
					SSP_SendData(SSPx, (*(uint8_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt++;
    1264:	3301      	adds	r3, #1
				} else {
					SSP_SendData(SSPx, (*(uint16_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt += 2;
    1266:	604b      	str	r3, [r1, #4]
				}
			}

			// Check error
			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
    1268:	6983      	ldr	r3, [r0, #24]
    126a:	07da      	lsls	r2, r3, #31
    126c:	d5eb      	bpl.n	1246 <SSP_ReadWrite+0xfa>
				// save status and return
				dataCfg->status = stat | SSP_STAT_ERROR;
    126e:	f443 7000 	orr.w	r0, r3, #512	; 0x200
    1272:	6148      	str	r0, [r1, #20]
				return (-1);
    1274:	f04f 30ff 	mov.w	r0, #4294967295
    1278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    127c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1280:	e003      	b.n	128a <SSP_ReadWrite+0x13e>
				} else {
					SSP_SendData(SSPx, 0xFFFF);
					dataCfg->tx_cnt += 2;
				}
			} else {
				if (dataword == 0){
    1282:	b90c      	cbnz	r4, 1288 <SSP_ReadWrite+0x13c>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1284:	5cd2      	ldrb	r2, [r2, r3]
    1286:	e7ec      	b.n	1262 <SSP_ReadWrite+0x116>
    1288:	5ad2      	ldrh	r2, [r2, r3]
    128a:	6082      	str	r2, [r0, #8]
				if (dataword == 0){
					SSP_SendData(SSPx, (*(uint8_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt++;
				} else {
					SSP_SendData(SSPx, (*(uint16_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt += 2;
    128c:	3302      	adds	r3, #2
    128e:	e7ea      	b.n	1266 <SSP_ReadWrite+0x11a>
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    1290:	52d5      	strh	r5, [r2, r3]
    1292:	e001      	b.n	1298 <SSP_ReadWrite+0x14c>
					} else {
						*(uint16_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint16_t) tmp;
					}
				}
				// Increase counter
				if (dataword == 0){
    1294:	2c00      	cmp	r4, #0
    1296:	d0d3      	beq.n	1240 <SSP_ReadWrite+0xf4>
					dataCfg->rx_cnt++;
				} else {
					dataCfg->rx_cnt += 2;
    1298:	3302      	adds	r3, #2
    129a:	e7d3      	b.n	1244 <SSP_ReadWrite+0xf8>
				}
			}
		}

		// If there more data to sent or receive
		if ((dataCfg->rx_cnt != dataCfg->length) || (dataCfg->tx_cnt != dataCfg->length)){
    129c:	68cb      	ldr	r3, [r1, #12]
    129e:	690a      	ldr	r2, [r1, #16]
    12a0:	4293      	cmp	r3, r2
    12a2:	d102      	bne.n	12aa <SSP_ReadWrite+0x15e>
    12a4:	684a      	ldr	r2, [r1, #4]
    12a6:	429a      	cmp	r2, r3
    12a8:	d002      	beq.n	12b0 <SSP_ReadWrite+0x164>
			// Enable all interrupt
			SSPx->IMSC = SSP_IMSC_BITMASK;
    12aa:	210f      	movs	r1, #15
    12ac:	6141      	str	r1, [r0, #20]
    12ae:	e002      	b.n	12b6 <SSP_ReadWrite+0x16a>
		} else {
			// Save status
			dataCfg->status = SSP_STAT_DONE;
    12b0:	f44f 7080 	mov.w	r0, #256	; 0x100
    12b4:	6148      	str	r0, [r1, #20]
		}
		return (0);
    12b6:	2000      	movs	r0, #0
    12b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000012bc <SSP_GetStatus>:
FlagStatus SSP_GetStatus(LPC_SSP_TypeDef* SSPx, uint32_t FlagType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_STAT(FlagType));

	return ((SSPx->SR & FlagType) ? SET : RESET);
    12bc:	68c3      	ldr	r3, [r0, #12]
    12be:	4219      	tst	r1, r3
}
    12c0:	bf0c      	ite	eq
    12c2:	2000      	moveq	r0, #0
    12c4:	2001      	movne	r0, #1
    12c6:	4770      	bx	lr

000012c8 <SSP_IntConfig>:
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
	{
		SSPx->IMSC |= IntType;
    12c8:	6943      	ldr	r3, [r0, #20]
 **********************************************************************/
void SSP_IntConfig(LPC_SSP_TypeDef *SSPx, uint32_t IntType, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
    12ca:	2a01      	cmp	r2, #1
	{
		SSPx->IMSC |= IntType;
	}
	else
	{
		SSPx->IMSC &= (~IntType) & SSP_IMSC_BITMASK;
    12cc:	bf16      	itet	ne
    12ce:	f003 030f 	andne.w	r3, r3, #15
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
	{
		SSPx->IMSC |= IntType;
    12d2:	4319      	orreq	r1, r3
	}
	else
	{
		SSPx->IMSC &= (~IntType) & SSP_IMSC_BITMASK;
    12d4:	ea23 0101 	bicne.w	r1, r3, r1
    12d8:	6141      	str	r1, [r0, #20]
    12da:	4770      	bx	lr

000012dc <SSP_GetRawIntStatus>:
IntStatus SSP_GetRawIntStatus(LPC_SSP_TypeDef *SSPx, uint32_t RawIntType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_INTSTAT_RAW(RawIntType));

	return ((SSPx->RIS & RawIntType) ? SET : RESET);
    12dc:	6983      	ldr	r3, [r0, #24]
    12de:	4219      	tst	r1, r3
}
    12e0:	bf0c      	ite	eq
    12e2:	2000      	moveq	r0, #0
    12e4:	2001      	movne	r0, #1
    12e6:	4770      	bx	lr

000012e8 <SSP_GetRawIntStatusReg>:
 * @return		Raw Interrupt Status (RIS) register value
 **********************************************************************/
uint32_t SSP_GetRawIntStatusReg(LPC_SSP_TypeDef *SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->RIS);
    12e8:	6980      	ldr	r0, [r0, #24]
}
    12ea:	4770      	bx	lr

000012ec <SSP_GetIntStatus>:
IntStatus SSP_GetIntStatus (LPC_SSP_TypeDef *SSPx, uint32_t IntType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_INTSTAT(IntType));

	return ((SSPx->MIS & IntType) ? SET :RESET);
    12ec:	69c3      	ldr	r3, [r0, #28]
    12ee:	4219      	tst	r1, r3
}
    12f0:	bf0c      	ite	eq
    12f2:	2000      	moveq	r0, #0
    12f4:	2001      	movne	r0, #1
    12f6:	4770      	bx	lr

000012f8 <SSP_ClearIntPending>:
void SSP_ClearIntPending(LPC_SSP_TypeDef *SSPx, uint32_t IntType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_INTCLR(IntType));

	SSPx->ICR = IntType;
    12f8:	6201      	str	r1, [r0, #32]
    12fa:	4770      	bx	lr

000012fc <SSP_DMACmd>:
	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->DMACR |= DMAMode;
    12fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    12fe:	2a01      	cmp	r2, #1
	{
		SSPx->DMACR |= DMAMode;
	}
	else
	{
		SSPx->DMACR &= (~DMAMode) & SSP_DMA_BITMASK;
    1300:	bf16      	itet	ne
    1302:	f003 0303 	andne.w	r3, r3, #3
	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->DMACR |= DMAMode;
    1306:	4319      	orreq	r1, r3
	}
	else
	{
		SSPx->DMACR &= (~DMAMode) & SSP_DMA_BITMASK;
    1308:	ea23 0101 	bicne.w	r1, r3, r1
    130c:	6241      	str	r1, [r0, #36]	; 0x24
    130e:	4770      	bx	lr

00001310 <delay_ms>:
 * @param		value in ms
 * @return 		None
 ***********************************************************************/
void delay_ms (uint32_t dly_ticks) 
{
  delay_timer = dly_ticks;
    1310:	4b02      	ldr	r3, [pc, #8]	; (131c <delay_ms+0xc>)
    1312:	6018      	str	r0, [r3, #0]
  while(delay_timer)
    1314:	681a      	ldr	r2, [r3, #0]
    1316:	2a00      	cmp	r2, #0
    1318:	d1fc      	bne.n	1314 <delay_ms+0x4>
  {
    /* do nothing */
  } 
}
    131a:	4770      	bx	lr
    131c:	1000035c 	.word	0x1000035c

00001320 <SYSTICK_InternalInit>:
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
    1320:	4b0f      	ldr	r3, [pc, #60]	; (1360 <SYSTICK_InternalInit+0x40>)
 * @brief 		Initial System Tick with using internal CPU clock source
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_InternalInit(uint32_t time)
{
    1322:	b570      	push	{r4, r5, r6, lr}
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
    1324:	681c      	ldr	r4, [r3, #0]
    1326:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    132a:	fbb4 f4f1 	udiv	r4, r4, r1
 * @brief 		Initial System Tick with using internal CPU clock source
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_InternalInit(uint32_t time)
{
    132e:	4605      	mov	r5, r0
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
	if(time > maxtime)
    1330:	f003 febc 	bl	50ac <__aeabi_ui2f>
    1334:	4606      	mov	r6, r0
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
    1336:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    133a:	fbb0 f0f4 	udiv	r0, r0, r4
    133e:	f003 feb5 	bl	50ac <__aeabi_ui2f>
    1342:	4601      	mov	r1, r0
	if(time > maxtime)
    1344:	4630      	mov	r0, r6
    1346:	f003 ff75 	bl	5234 <__aeabi_fcmpgt>
    134a:	b100      	cbz	r0, 134e <SYSTICK_InternalInit+0x2e>
    134c:	e7fe      	b.n	134c <SYSTICK_InternalInit+0x2c>
		//Error loop
		while(1);
	else
	{
		//Select CPU clock is System Tick clock source
		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
    134e:	4b05      	ldr	r3, [pc, #20]	; (1364 <SYSTICK_InternalInit+0x44>)
		/* Set RELOAD value
		 * RELOAD = (SystemCoreClock/1000) * time - 1
		 * with time base is millisecond
		 */
		SysTick->LOAD = (cclk/1000)*time - 1;
    1350:	436c      	muls	r4, r5
		//Error loop
		while(1);
	else
	{
		//Select CPU clock is System Tick clock source
		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
    1352:	681a      	ldr	r2, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (SystemCoreClock/1000) * time - 1
		 * with time base is millisecond
		 */
		SysTick->LOAD = (cclk/1000)*time - 1;
    1354:	3c01      	subs	r4, #1
		//Error loop
		while(1);
	else
	{
		//Select CPU clock is System Tick clock source
		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
    1356:	f042 0104 	orr.w	r1, r2, #4
    135a:	6019      	str	r1, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (SystemCoreClock/1000) * time - 1
		 * with time base is millisecond
		 */
		SysTick->LOAD = (cclk/1000)*time - 1;
    135c:	605c      	str	r4, [r3, #4]
    135e:	bd70      	pop	{r4, r5, r6, pc}
    1360:	2007c008 	.word	0x2007c008
    1364:	e000e010 	.word	0xe000e010

00001368 <SYSTICK_ExternalInit>:
 * @param[in]	freq	external clock frequency(Hz)
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_ExternalInit(uint32_t freq, uint32_t time)
{
    1368:	b570      	push	{r4, r5, r6, lr}
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/freq * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(freq / 1000) ;
    136a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    136e:	fbb0 f4f4 	udiv	r4, r0, r4
	if (time>maxtime)
    1372:	4608      	mov	r0, r1
 * @param[in]	freq	external clock frequency(Hz)
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_ExternalInit(uint32_t freq, uint32_t time)
{
    1374:	460d      	mov	r5, r1
	 * So the maximum time can be set:
	 * 1/freq * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(freq / 1000) ;
	if (time>maxtime)
    1376:	f003 fe99 	bl	50ac <__aeabi_ui2f>
    137a:	4606      	mov	r6, r0
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/freq * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(freq / 1000) ;
    137c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    1380:	fbb0 f0f4 	udiv	r0, r0, r4
    1384:	f003 fe92 	bl	50ac <__aeabi_ui2f>
    1388:	4601      	mov	r1, r0
	if (time>maxtime)
    138a:	4630      	mov	r0, r6
    138c:	f003 ff52 	bl	5234 <__aeabi_fcmpgt>
    1390:	b100      	cbz	r0, 1394 <SYSTICK_ExternalInit+0x2c>
    1392:	e7fe      	b.n	1392 <SYSTICK_ExternalInit+0x2a>
		//Error Loop
		while(1);
	else
	{
		//Select external clock is System Tick clock source
		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
    1394:	4b04      	ldr	r3, [pc, #16]	; (13a8 <SYSTICK_ExternalInit+0x40>)
		/* Set RELOAD value
		 * RELOAD = (freq/1000) * time - 1
		 * with time base is millisecond
		 */
		maxtime = (freq/1000)*time - 1;
		SysTick->LOAD = (freq/1000)*time - 1;
    1396:	436c      	muls	r4, r5
		//Error Loop
		while(1);
	else
	{
		//Select external clock is System Tick clock source
		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
    1398:	681a      	ldr	r2, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (freq/1000) * time - 1
		 * with time base is millisecond
		 */
		maxtime = (freq/1000)*time - 1;
		SysTick->LOAD = (freq/1000)*time - 1;
    139a:	3c01      	subs	r4, #1
		//Error Loop
		while(1);
	else
	{
		//Select external clock is System Tick clock source
		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
    139c:	f022 0104 	bic.w	r1, r2, #4
    13a0:	6019      	str	r1, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (freq/1000) * time - 1
		 * with time base is millisecond
		 */
		maxtime = (freq/1000)*time - 1;
		SysTick->LOAD = (freq/1000)*time - 1;
    13a2:	605c      	str	r4, [r3, #4]
    13a4:	bd70      	pop	{r4, r5, r6, pc}
    13a6:	bf00      	nop
    13a8:	e000e010 	.word	0xe000e010

000013ac <SYSTICK_Cmd>:
 * 					- ENABLE
 * 					- DISABLE
 * @return 		None
 **********************************************************************/
void SYSTICK_Cmd(FunctionalState NewState)
{
    13ac:	4b04      	ldr	r3, [pc, #16]	; (13c0 <SYSTICK_Cmd+0x14>)
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if(NewState == ENABLE)
    13ae:	2801      	cmp	r0, #1
		//Enable System Tick counter
		SysTick->CTRL |= ST_CTRL_ENABLE;
    13b0:	681a      	ldr	r2, [r3, #0]
    13b2:	bf0c      	ite	eq
    13b4:	f042 0201 	orreq.w	r2, r2, #1
	else
		//Disable System Tick counter
		SysTick->CTRL &= ~ST_CTRL_ENABLE;
    13b8:	f022 0201 	bicne.w	r2, r2, #1
    13bc:	601a      	str	r2, [r3, #0]
    13be:	4770      	bx	lr
    13c0:	e000e010 	.word	0xe000e010

000013c4 <SYSTICK_IntCmd>:
 * 					- ENABLE
 * 					- DISABLE
 * @return 		None
 **********************************************************************/
void SYSTICK_IntCmd(FunctionalState NewState)
{
    13c4:	4b04      	ldr	r3, [pc, #16]	; (13d8 <SYSTICK_IntCmd+0x14>)
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if(NewState == ENABLE)
    13c6:	2801      	cmp	r0, #1
		//Enable System Tick counter
		SysTick->CTRL |= ST_CTRL_TICKINT;
    13c8:	681a      	ldr	r2, [r3, #0]
    13ca:	bf0c      	ite	eq
    13cc:	f042 0202 	orreq.w	r2, r2, #2
	else
		//Disable System Tick counter
		SysTick->CTRL &= ~ST_CTRL_TICKINT;
    13d0:	f022 0202 	bicne.w	r2, r2, #2
    13d4:	601a      	str	r2, [r3, #0]
    13d6:	4770      	bx	lr
    13d8:	e000e010 	.word	0xe000e010

000013dc <SYSTICK_Config>:
 * @brief 		Initial System Tick with Config
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void SYSTICK_Config(void)
{
    13dc:	b508      	push	{r3, lr}
  //Initialize System Tick with 10ms time interval
  SYSTICK_InternalInit(1);
    13de:	2001      	movs	r0, #1
    13e0:	f7ff ff9e 	bl	1320 <SYSTICK_InternalInit>
  //Enable System Tick interrupt
  SYSTICK_IntCmd(ENABLE);
    13e4:	2001      	movs	r0, #1
    13e6:	f7ff ffed 	bl	13c4 <SYSTICK_IntCmd>
  //Enable System Tick Counter
  SYSTICK_Cmd(ENABLE);
    13ea:	2001      	movs	r0, #1
}
    13ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //Initialize System Tick with 10ms time interval
  SYSTICK_InternalInit(1);
  //Enable System Tick interrupt
  SYSTICK_IntCmd(ENABLE);
  //Enable System Tick Counter
  SYSTICK_Cmd(ENABLE);
    13f0:	f7ff bfdc 	b.w	13ac <SYSTICK_Cmd>

000013f4 <SYSTICK_GetCurrentValue>:
 * @param[in]	None
 * @return 		current value of System Tick counter
 **********************************************************************/
uint32_t SYSTICK_GetCurrentValue(void)
{
	return (SysTick->VAL);
    13f4:	4b01      	ldr	r3, [pc, #4]	; (13fc <SYSTICK_GetCurrentValue+0x8>)
    13f6:	6898      	ldr	r0, [r3, #8]
}
    13f8:	4770      	bx	lr
    13fa:	bf00      	nop
    13fc:	e000e010 	.word	0xe000e010

00001400 <SYSTICK_ClearCounterFlag>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void SYSTICK_ClearCounterFlag(void)
{
	SysTick->CTRL &= ~ST_CTRL_COUNTFLAG;
    1400:	4b02      	ldr	r3, [pc, #8]	; (140c <SYSTICK_ClearCounterFlag+0xc>)
    1402:	681a      	ldr	r2, [r3, #0]
    1404:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    1408:	6018      	str	r0, [r3, #0]
    140a:	4770      	bx	lr
    140c:	e000e010 	.word	0xe000e010

00001410 <SysTick_Handler>:
 * @param		None
 * @return 		None
 ***********************************************************************/
void SysTick_Handler(void)
{
    if(led_timer)
    1410:	4b0a      	ldr	r3, [pc, #40]	; (143c <SysTick_Handler+0x2c>)
    1412:	681a      	ldr	r2, [r3, #0]
    1414:	b10a      	cbz	r2, 141a <SysTick_Handler+0xa>
    {
    	--led_timer;
    1416:	1e51      	subs	r1, r2, #1
    1418:	e006      	b.n	1428 <SysTick_Handler+0x18>
    }
    else
    {
    	LPC_GPIO3->FIOPIN ^= _BIT(25); //Toggle P3.25 Hearbeat led
    141a:	4809      	ldr	r0, [pc, #36]	; (1440 <SysTick_Handler+0x30>)
    141c:	6941      	ldr	r1, [r0, #20]
    141e:	f081 7200 	eor.w	r2, r1, #33554432	; 0x2000000
    1422:	6142      	str	r2, [r0, #20]
    	led_timer=led_delay;
    1424:	4807      	ldr	r0, [pc, #28]	; (1444 <SysTick_Handler+0x34>)
    1426:	6801      	ldr	r1, [r0, #0]
    1428:	6019      	str	r1, [r3, #0]
    }

	if(delay_timer)
    142a:	4b07      	ldr	r3, [pc, #28]	; (1448 <SysTick_Handler+0x38>)
    142c:	681a      	ldr	r2, [r3, #0]
    142e:	b112      	cbz	r2, 1436 <SysTick_Handler+0x26>
    {
      --delay_timer;           /*decrement Delay Timer */
    1430:	6818      	ldr	r0, [r3, #0]
    1432:	1e41      	subs	r1, r0, #1
    1434:	6019      	str	r1, [r3, #0]
    }
	
	//Clear System Tick counter flag
	SYSTICK_ClearCounterFlag();
    1436:	f7ff bfe3 	b.w	1400 <SYSTICK_ClearCounterFlag>
    143a:	bf00      	nop
    143c:	10000358 	.word	0x10000358
    1440:	2009c060 	.word	0x2009c060
    1444:	10000380 	.word	0x10000380
    1448:	1000035c 	.word	0x1000035c

0000144c <UART_Init>:
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    1450:	4ba3      	ldr	r3, [pc, #652]	; (16e0 <UART_Init+0x294>)
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    1452:	4604      	mov	r4, r0


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
    1454:	2008      	movs	r0, #8
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    1456:	429c      	cmp	r4, r3
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    1458:	b08b      	sub	sp, #44	; 0x2c
    145a:	468b      	mov	fp, r1
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    145c:	d016      	beq.n	148c <UART_Init+0x40>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
	}



	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    145e:	49a1      	ldr	r1, [pc, #644]	; (16e4 <UART_Init+0x298>)
    1460:	428c      	cmp	r4, r1
    1462:	d108      	bne.n	1476 <UART_Init+0x2a>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
    1464:	2101      	movs	r1, #1
    1466:	2010      	movs	r0, #16
    1468:	f7fe fe7a 	bl	160 <CLKPWR_ConfigPPWR>


	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    146c:	2107      	movs	r1, #7
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    146e:	2200      	movs	r2, #0


	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    1470:	7221      	strb	r1, [r4, #8]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    1472:	7222      	strb	r2, [r4, #8]

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    1474:	e00e      	b.n	1494 <UART_Init+0x48>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
	}



	if(UARTx == LPC_UART2)
    1476:	4a9c      	ldr	r2, [pc, #624]	; (16e8 <UART_Init+0x29c>)
    1478:	4294      	cmp	r4, r2
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
    147a:	bf08      	it	eq
    147c:	f04f 7080 	moveq.w	r0, #16777216	; 0x1000000
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
	}



	if(UARTx == LPC_UART2)
    1480:	d004      	beq.n	148c <UART_Init+0x40>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
	}



	if(UARTx == LPC_UART3)
    1482:	489a      	ldr	r0, [pc, #616]	; (16ec <UART_Init+0x2a0>)
    1484:	4284      	cmp	r4, r0
    1486:	d125      	bne.n	14d4 <UART_Init+0x88>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    1488:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    148c:	2101      	movs	r1, #1
    148e:	f7fe fe67 	bl	160 <CLKPWR_ConfigPPWR>
    1492:	e01f      	b.n	14d4 <UART_Init+0x88>
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    1494:	4893      	ldr	r0, [pc, #588]	; (16e4 <UART_Init+0x298>)
    1496:	7d05      	ldrb	r5, [r0, #20]
    1498:	07ea      	lsls	r2, r5, #31
    149a:	d501      	bpl.n	14a0 <UART_Init+0x54>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
    149c:	7803      	ldrb	r3, [r0, #0]
    149e:	e7f9      	b.n	1494 <UART_Init+0x48>
		}

		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
    14a0:	2680      	movs	r6, #128	; 0x80
    14a2:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
		// Wait for current transmit complete
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
    14a6:	4b8f      	ldr	r3, [pc, #572]	; (16e4 <UART_Init+0x298>)
    14a8:	7d19      	ldrb	r1, [r3, #20]
    14aa:	f001 0220 	and.w	r2, r1, #32
    14ae:	b2d0      	uxtb	r0, r2
    14b0:	2800      	cmp	r0, #0
    14b2:	d0f8      	beq.n	14a6 <UART_Init+0x5a>
		// Disable Tx
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
    14b4:	2500      	movs	r5, #0
    14b6:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30

		// Disable interrupt
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
    14ba:	605d      	str	r5, [r3, #4]
		// Set LCR to default state
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
    14bc:	731d      	strb	r5, [r3, #12]
		// Set ACR to default state
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    14be:	621d      	str	r5, [r3, #32]
		// Set Modem Control to default state
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
    14c0:	741d      	strb	r5, [r3, #16]
		// Set RS485 control to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
    14c2:	f883 504c 	strb.w	r5, [r3, #76]	; 0x4c
		// Set RS485 delay timer to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
    14c6:	f883 5054 	strb.w	r5, [r3, #84]	; 0x54
		// Set RS485 addr match to default state
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
    14ca:	f883 5050 	strb.w	r5, [r3, #80]	; 0x50
		//Dummy Reading to Clear Status
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
    14ce:	7e1a      	ldrb	r2, [r3, #24]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
    14d0:	7d1b      	ldrb	r3, [r3, #20]
    14d2:	e01d      	b.n	1510 <UART_Init+0xc4>
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    14d4:	2507      	movs	r5, #7
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    14d6:	2600      	movs	r6, #0
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    14d8:	7225      	strb	r5, [r4, #8]
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    14da:	7226      	strb	r6, [r4, #8]

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    14dc:	7d23      	ldrb	r3, [r4, #20]
    14de:	07db      	lsls	r3, r3, #31
    14e0:	d501      	bpl.n	14e6 <UART_Init+0x9a>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
    14e2:	7823      	ldrb	r3, [r4, #0]
    14e4:	e7fa      	b.n	14dc <UART_Init+0x90>
		}

		UARTx->TER = UART_TER_TXEN;
    14e6:	2180      	movs	r1, #128	; 0x80
    14e8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
    14ec:	7d22      	ldrb	r2, [r4, #20]
    14ee:	f002 0020 	and.w	r0, r2, #32
    14f2:	b2c5      	uxtb	r5, r0
    14f4:	2d00      	cmp	r5, #0
    14f6:	d0f9      	beq.n	14ec <UART_Init+0xa0>
		UARTx->ACR = 0;
		// Dummy reading
		tmp = UARTx->LSR;
	}

	if (UARTx == LPC_UART3)
    14f8:	4b7c      	ldr	r3, [pc, #496]	; (16ec <UART_Init+0x2a0>)

		UARTx->TER = UART_TER_TXEN;
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
		// Disable Tx
		UARTx->TER = 0;
    14fa:	2600      	movs	r6, #0
    14fc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
		UARTx->ACR = 0;
		// Dummy reading
		tmp = UARTx->LSR;
	}

	if (UARTx == LPC_UART3)
    1500:	429c      	cmp	r4, r3
		while (!(UARTx->LSR & UART_LSR_THRE));
		// Disable Tx
		UARTx->TER = 0;

		// Disable interrupt
		UARTx->/*DLIER.*/IER = 0;
    1502:	6066      	str	r6, [r4, #4]
		// Set LCR to default state
		UARTx->LCR = 0;
    1504:	7326      	strb	r6, [r4, #12]
		// Set ACR to default state
		UARTx->ACR = 0;
    1506:	6226      	str	r6, [r4, #32]
		// Dummy reading
		tmp = UARTx->LSR;
    1508:	7d22      	ldrb	r2, [r4, #20]
	}

	if (UARTx == LPC_UART3)
	{
		// Set IrDA to default state
		UARTx->ICR = 0;
    150a:	bf08      	it	eq
    150c:	f884 6024 	strbeq.w	r6, [r4, #36]	; 0x24
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    1510:	4e73      	ldr	r6, [pc, #460]	; (16e0 <UART_Init+0x294>)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
    1512:	2006      	movs	r0, #6
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    1514:	42b4      	cmp	r4, r6
		UARTx->ICR = 0;
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    1516:	f8db 5000 	ldr.w	r5, [fp]
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    151a:	d00b      	beq.n	1534 <UART_Init+0xe8>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    151c:	4b71      	ldr	r3, [pc, #452]	; (16e4 <UART_Init+0x298>)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
    151e:	2008      	movs	r0, #8
	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    1520:	429c      	cmp	r4, r3
    1522:	d007      	beq.n	1534 <UART_Init+0xe8>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
	}
	else if (UARTx == LPC_UART2)
    1524:	4970      	ldr	r1, [pc, #448]	; (16e8 <UART_Init+0x29c>)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
    1526:	2030      	movs	r0, #48	; 0x30
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
	}
	else if (UARTx == LPC_UART2)
    1528:	428c      	cmp	r4, r1
    152a:	d003      	beq.n	1534 <UART_Init+0xe8>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
	}
	else if (UARTx == LPC_UART3)
    152c:	4a6f      	ldr	r2, [pc, #444]	; (16ec <UART_Init+0x2a0>)
    152e:	4294      	cmp	r4, r2
    1530:	d103      	bne.n	153a <UART_Init+0xee>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
    1532:	2032      	movs	r0, #50	; 0x32
    1534:	f7fe fe04 	bl	140 <CLKPWR_GetPCLK>
    1538:	4607      	mov	r7, r0
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    153a:	073e      	lsls	r6, r7, #28
    153c:	0938      	lsrs	r0, r7, #4
    153e:	9604      	str	r6, [sp, #16]
    1540:	9005      	str	r0, [sp, #20]
    1542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1546:	e9cd 2308 	strd	r2, r3, [sp, #32]
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
    154a:	f04f 33ff 	mov.w	r3, #4294967295
    154e:	9307      	str	r3, [sp, #28]
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
    1550:	2200      	movs	r2, #0
    1552:	2300      	movs	r3, #0
    1554:	e9cd 2302 	strd	r2, r3, [sp, #8]
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
    1558:	2600      	movs	r6, #0
		UARTx->ICR = 0;
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    155a:	9506      	str	r5, [sp, #24]
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    155c:	f04f 0801 	mov.w	r8, #1
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
    1560:	46b1      	mov	r9, r6
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    1562:	f04f 0c00 	mov.w	ip, #0
    1566:	46e2      	mov	sl, ip
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    1568:	9a06      	ldr	r2, [sp, #24]
    156a:	2300      	movs	r3, #0
    156c:	4462      	add	r2, ip
    156e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1572:	f8cd c004 	str.w	ip, [sp, #4]
    1576:	f003 fe67 	bl	5248 <__aeabi_uldivmod>
		  current_error = divisor & 0xFFFFFFFF;

		  tmp = divisor>>32;

		  /* Adjust error */
		  if(current_error > ((uint32_t)1<<31)){
    157a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    157e:	f8dd c004 	ldr.w	ip, [sp, #4]
    1582:	d901      	bls.n	1588 <UART_Init+0x13c>
			current_error = -current_error;
    1584:	4240      	negs	r0, r0
			tmp++;
    1586:	3101      	adds	r1, #1
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
    1588:	1e4b      	subs	r3, r1, #1
    158a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    158e:	d209      	bcs.n	15a4 <UART_Init+0x158>
		  continue;

		  if( current_error < best_error){
    1590:	9a07      	ldr	r2, [sp, #28]
    1592:	4290      	cmp	r0, r2
    1594:	d206      	bcs.n	15a4 <UART_Init+0x158>
			best_error = current_error;
			best_divisor = tmp;
    1596:	9102      	str	r1, [sp, #8]
    1598:	2100      	movs	r1, #0
    159a:	9103      	str	r1, [sp, #12]
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    159c:	b300      	cbz	r0, 15e0 <UART_Init+0x194>
    159e:	9007      	str	r0, [sp, #28]
    15a0:	4646      	mov	r6, r8
    15a2:	46d1      	mov	r9, sl
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
    15a4:	f10a 0a01 	add.w	sl, sl, #1
    15a8:	45c2      	cmp	sl, r8
    15aa:	44ac      	add	ip, r5
    15ac:	d3dc      	bcc.n	1568 <UART_Init+0x11c>
			bestm = m;
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
    15ae:	9807      	ldr	r0, [sp, #28]
    15b0:	b180      	cbz	r0, 15d4 <UART_Init+0x188>
    15b2:	9b06      	ldr	r3, [sp, #24]
    15b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    15b8:	195a      	adds	r2, r3, r5
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    15ba:	f108 0801 	add.w	r8, r8, #1
    15be:	9206      	str	r2, [sp, #24]
    15c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    15c4:	1812      	adds	r2, r2, r0
    15c6:	eb43 0301 	adc.w	r3, r3, r1
    15ca:	f1b8 0f10 	cmp.w	r8, #16
    15ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
    15d2:	d1c6      	bne.n	1562 <UART_Init+0x116>

		if (best_error == 0)
		  break;
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */
    15d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    15d8:	ea50 0301 	orrs.w	r3, r0, r1
    15dc:	d04a      	beq.n	1674 <UART_Init+0x228>
    15de:	e001      	b.n	15e4 <UART_Init+0x198>
		  if( current_error < best_error){
			best_error = current_error;
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    15e0:	46d1      	mov	r9, sl
    15e2:	4646      	mov	r6, r8
		  break;
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */

	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
    15e4:	0938      	lsrs	r0, r7, #4
    15e6:	9f02      	ldr	r7, [sp, #8]
    15e8:	eb09 0106 	add.w	r1, r9, r6
    15ec:	fba1 2307 	umull	r2, r3, r1, r7
    15f0:	9f03      	ldr	r7, [sp, #12]
    15f2:	4370      	muls	r0, r6
    15f4:	fb01 3307 	mla	r3, r1, r7, r3
    15f8:	2100      	movs	r1, #0
    15fa:	f003 fe25 	bl	5248 <__aeabi_uldivmod>

	/* reuse best_error to evaluate baud error*/
	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
    15fe:	4285      	cmp	r5, r0
    1600:	bf8c      	ite	hi
    1602:	ebc0 0005 	rsbhi	r0, r0, r5
	else best_error = recalcbaud -baudrate;
    1606:	ebc5 0000 	rsbls	r0, r5, r0

	best_error = best_error * 100 / baudrate;
    160a:	2364      	movs	r3, #100	; 0x64
    160c:	4358      	muls	r0, r3
    160e:	fbb0 f5f5 	udiv	r5, r0, r5

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
    1612:	2d02      	cmp	r5, #2
    1614:	d82e      	bhi.n	1674 <UART_Init+0x228>
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    1616:	7b20      	ldrb	r0, [r4, #12]

	best_error = best_error * 100 / baudrate;

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1618:	4a32      	ldr	r2, [pc, #200]	; (16e4 <UART_Init+0x298>)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    161a:	f040 0180 	orr.w	r1, r0, #128	; 0x80

	best_error = best_error * 100 / baudrate;

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    161e:	4294      	cmp	r4, r2
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    1620:	7321      	strb	r1, [r4, #12]

	best_error = best_error * 100 / baudrate;

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1622:	d113      	bne.n	164c <UART_Init+0x200>
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    1624:	9b02      	ldr	r3, [sp, #8]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    1626:	f89d 0008 	ldrb.w	r0, [sp, #8]
	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    162a:	f3c3 2207 	ubfx	r2, r3, #8, #8
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    162e:	b2c1      	uxtb	r1, r0
	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    1630:	7122      	strb	r2, [r4, #4]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    1632:	7021      	strb	r1, [r4, #0]
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    1634:	7b23      	ldrb	r3, [r4, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    1636:	0136      	lsls	r6, r6, #4
    1638:	b2f0      	uxtb	r0, r6
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    163a:	f009 090f 	and.w	r9, r9, #15
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    163e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    1642:	ea40 0609 	orr.w	r6, r0, r9
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    1646:	7322      	strb	r2, [r4, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    1648:	62a6      	str	r6, [r4, #40]	; 0x28
    164a:	e016      	b.n	167a <UART_Init+0x22e>
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    164c:	9f02      	ldr	r7, [sp, #8]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    164e:	f009 090f 	and.w	r9, r9, #15
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    1652:	f3c7 2307 	ubfx	r3, r7, #8, #8
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    1656:	f89d 7008 	ldrb.w	r7, [sp, #8]
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    165a:	7123      	strb	r3, [r4, #4]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    165c:	b2fa      	uxtb	r2, r7
    165e:	7022      	strb	r2, [r4, #0]
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    1660:	7b20      	ldrb	r0, [r4, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    1662:	ea49 1606 	orr.w	r6, r9, r6, lsl #4
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    1666:	f000 017f 	and.w	r1, r0, #127	; 0x7f
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    166a:	b2f6      	uxtb	r6, r6
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    166c:	7321      	strb	r1, [r4, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    166e:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1672:	e005      	b.n	1680 <UART_Init+0x234>

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1674:	491b      	ldr	r1, [pc, #108]	; (16e4 <UART_Init+0x298>)
    1676:	428c      	cmp	r4, r1
    1678:	d102      	bne.n	1680 <UART_Init+0x234>
	{
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
    167a:	4a1a      	ldr	r2, [pc, #104]	; (16e4 <UART_Init+0x298>)
    167c:	7b13      	ldrb	r3, [r2, #12]
    167e:	e000      	b.n	1682 <UART_Init+0x236>
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    1680:	7b23      	ldrb	r3, [r4, #12]
	}

	switch (UART_ConfigStruct->Databits){
    1682:	f89b 0005 	ldrb.w	r0, [fp, #5]
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    1686:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	}

	switch (UART_ConfigStruct->Databits){
    168a:	2801      	cmp	r0, #1
    168c:	d005      	beq.n	169a <UART_Init+0x24e>
    168e:	d309      	bcc.n	16a4 <UART_Init+0x258>
    1690:	2802      	cmp	r0, #2
    1692:	d105      	bne.n	16a0 <UART_Init+0x254>
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
		break;
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
    1694:	f043 0302 	orr.w	r3, r3, #2
		break;
    1698:	e004      	b.n	16a4 <UART_Init+0x258>
	switch (UART_ConfigStruct->Databits){
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
    169a:	f043 0301 	orr.w	r3, r3, #1
		break;
    169e:	e001      	b.n	16a4 <UART_Init+0x258>
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
		break;
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
    16a0:	f043 0303 	orr.w	r3, r3, #3
		break;
	}

	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
    16a4:	f89b 1004 	ldrb.w	r1, [fp, #4]
    16a8:	b179      	cbz	r1, 16ca <UART_Init+0x27e>
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
		switch (UART_ConfigStruct->Parity)
    16aa:	2903      	cmp	r1, #3
    16ac:	d008      	beq.n	16c0 <UART_Init+0x274>
    16ae:	2904      	cmp	r1, #4
    16b0:	d009      	beq.n	16c6 <UART_Init+0x27a>
    16b2:	2902      	cmp	r1, #2
	{
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
    16b4:	bf14      	ite	ne
    16b6:	f043 0308 	orrne.w	r3, r3, #8
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
    16ba:	f043 0318 	orreq.w	r3, r3, #24
			break;
    16be:	e004      	b.n	16ca <UART_Init+0x27e>

		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
    16c0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
			break;
    16c4:	e001      	b.n	16ca <UART_Init+0x27e>

		case UART_PARITY_SP_0:
			tmp |= UART_LCR_PARITY_F_0;
    16c6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
		default:
			break;
		}
	}

	switch (UART_ConfigStruct->Stopbits){
    16ca:	f89b 2006 	ldrb.w	r2, [fp, #6]
    16ce:	2a01      	cmp	r2, #1
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
    16d0:	bf08      	it	eq
    16d2:	f043 0304 	orreq.w	r3, r3, #4
    16d6:	b2d8      	uxtb	r0, r3


	// Write back to LCR, configure FIFO and Disable Tx
	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    16d8:	7320      	strb	r0, [r4, #12]
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
	}
}
    16da:	b00b      	add	sp, #44	; 0x2c
    16dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16e0:	4000c000 	.word	0x4000c000
    16e4:	40010000 	.word	0x40010000
    16e8:	40098000 	.word	0x40098000
    16ec:	4009c000 	.word	0x4009c000

000016f0 <UART_ConfigStructInit>:
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
	UART_InitStruct->Parity = UART_PARITY_NONE;
    16f0:	2200      	movs	r2, #0
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
    16f2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	UART_InitStruct->Databits = UART_DATABIT_8;
    16f6:	2103      	movs	r1, #3
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
    16f8:	6003      	str	r3, [r0, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
    16fa:	7141      	strb	r1, [r0, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
    16fc:	7102      	strb	r2, [r0, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    16fe:	7182      	strb	r2, [r0, #6]
    1700:	4770      	bx	lr

00001702 <UART_SendByte>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    1702:	7001      	strb	r1, [r0, #0]
    1704:	4770      	bx	lr

00001706 <UART_ReceiveByte>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		Data received
 **********************************************************************/
uint8_t UART_ReceiveByte(LPC_UART_TypeDef* UARTx)
{
    1706:	4903      	ldr	r1, [pc, #12]	; (1714 <UART_ReceiveByte+0xe>)
    1708:	f04f 0200 	mov.w	r2, #0
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		EscFlag = 0;                    /* clear EscapeFlag */
    170c:	800a      	strh	r2, [r1, #0]
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    170e:	7800      	ldrb	r0, [r0, #0]
	else
	{
		EscFlag = 0;                    /* clear EscapeFlag */
		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
	}
}
    1710:	4770      	bx	lr
    1712:	bf00      	nop
    1714:	10000078 	.word	0x10000078

00001718 <UART_ForceBreak>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_BREAK_EN;
    1718:	7b01      	ldrb	r1, [r0, #12]
    171a:	f041 0240 	orr.w	r2, r1, #64	; 0x40
    171e:	7302      	strb	r2, [r0, #12]
    1720:	4770      	bx	lr

00001722 <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
    1722:	b510      	push	{r4, lr}
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
    1724:	2906      	cmp	r1, #6
    1726:	d814      	bhi.n	1752 <UART_IntConfig+0x30>
    1728:	e8df f001 	tbb	[pc, r1]
    172c:	08060412 	.word	0x08060412
    1730:	0c0a      	.short	0x0c0a
    1732:	0f          	.byte	0x0f
    1733:	00          	.byte	0x00
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
			break;
		case UART_INTCFG_THRE:
			tmp = UART_IER_THREINT_EN;
    1734:	2302      	movs	r3, #2
			break;
    1736:	e00c      	b.n	1752 <UART_IntConfig+0x30>
		case UART_INTCFG_RLS:
			tmp = UART_IER_RLSINT_EN;
    1738:	2304      	movs	r3, #4
			break;
    173a:	e00a      	b.n	1752 <UART_IntConfig+0x30>
		case UART1_INTCFG_MS:
			tmp = UART1_IER_MSINT_EN;
    173c:	2308      	movs	r3, #8
			break;
    173e:	e008      	b.n	1752 <UART_IntConfig+0x30>
		case UART1_INTCFG_CTS:
			tmp = UART1_IER_CTSINT_EN;
    1740:	2380      	movs	r3, #128	; 0x80
			break;
    1742:	e006      	b.n	1752 <UART_IntConfig+0x30>
		case UART_INTCFG_ABEO:
			tmp = UART_IER_ABEOINT_EN;
    1744:	f44f 7380 	mov.w	r3, #256	; 0x100
			break;
    1748:	e003      	b.n	1752 <UART_IntConfig+0x30>
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
    174a:	f44f 7300 	mov.w	r3, #512	; 0x200
			break;
    174e:	e000      	b.n	1752 <UART_IntConfig+0x30>
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
    1750:	2301      	movs	r3, #1
	else
	{
		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
	}

	if (NewState == ENABLE)
    1752:	2a01      	cmp	r2, #1
    1754:	4a0b      	ldr	r2, [pc, #44]	; (1784 <UART_IntConfig+0x62>)
    1756:	d103      	bne.n	1760 <UART_IntConfig+0x3e>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
    1758:	6844      	ldr	r4, [r0, #4]
    175a:	4323      	orrs	r3, r4
    175c:	6043      	str	r3, [r0, #4]
    175e:	bd10      	pop	{r4, pc}
			UARTx->/*DLIER.*/IER |= tmp;
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    1760:	4290      	cmp	r0, r2
    1762:	ea6f 0303 	mvn.w	r3, r3
    1766:	d105      	bne.n	1774 <UART_IntConfig+0x52>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
    1768:	6842      	ldr	r2, [r0, #4]
    176a:	f240 318f 	movw	r1, #911	; 0x38f
    176e:	4011      	ands	r1, r2
    1770:	400b      	ands	r3, r1
    1772:	e004      	b.n	177e <UART_IntConfig+0x5c>
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
    1774:	6841      	ldr	r1, [r0, #4]
    1776:	f240 3407 	movw	r4, #775	; 0x307
    177a:	400c      	ands	r4, r1
    177c:	4023      	ands	r3, r4
    177e:	6043      	str	r3, [r0, #4]
    1780:	bd10      	pop	{r4, pc}
    1782:	bf00      	nop
    1784:	40010000 	.word	0x40010000

00001788 <UART_GetLineStatus>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
    1788:	7d00      	ldrb	r0, [r0, #20]
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
	}
}
    178a:	4770      	bx	lr

0000178c <UART_GetIntId>:
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    178c:	6883      	ldr	r3, [r0, #8]
}
    178e:	f240 30cf 	movw	r0, #975	; 0x3cf
    1792:	4018      	ands	r0, r3
    1794:	4770      	bx	lr

00001796 <UART_CheckBusy>:
 * 				- LPC_UART3: UART3 peripheral
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
	if (UARTx->LSR & UART_LSR_TEMT){
    1796:	7d00      	ldrb	r0, [r0, #20]
    1798:	f080 0140 	eor.w	r1, r0, #64	; 0x40
		return RESET;
	} else {
		return SET;
	}
}
    179c:	f3c1 1080 	ubfx	r0, r1, #6, #1
    17a0:	4770      	bx	lr

000017a2 <UART_FIFOConfig>:
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
    17a2:	78cb      	ldrb	r3, [r1, #3]
    17a4:	2b02      	cmp	r3, #2
    17a6:	bf9c      	itt	ls
    17a8:	4a0b      	ldrls	r2, [pc, #44]	; (17d8 <UART_FIFOConfig+0x36>)
    17aa:	5cd3      	ldrbls	r3, [r2, r3]
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    17ac:	784a      	ldrb	r2, [r1, #1]
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
    17ae:	bf88      	it	hi
    17b0:	23c1      	movhi	r3, #193	; 0xc1
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    17b2:	2a01      	cmp	r2, #1
	{
		tmp |= UART_FCR_TX_RS;
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    17b4:	780a      	ldrb	r2, [r1, #0]
	{
		tmp |= UART_FCR_RX_RS;
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    17b6:	7889      	ldrb	r1, [r1, #2]
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
	{
		tmp |= UART_FCR_TX_RS;
    17b8:	bf08      	it	eq
    17ba:	f043 0304 	orreq.w	r3, r3, #4
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    17be:	2a01      	cmp	r2, #1
	{
		tmp |= UART_FCR_RX_RS;
    17c0:	bf08      	it	eq
    17c2:	f043 0302 	orreq.w	r3, r3, #2
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    17c6:	2901      	cmp	r1, #1
	{
		tmp |= UART_FCR_DMAMODE_SEL;
    17c8:	bf08      	it	eq
    17ca:	f043 0308 	orreq.w	r3, r3, #8
    17ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30


	//write to FIFO control register
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    17d2:	b2d9      	uxtb	r1, r3
    17d4:	7201      	strb	r1, [r0, #8]
    17d6:	4770      	bx	lr
    17d8:	00005aec 	.word	0x00005aec

000017dc <UART_Config>:
 * 				- LPC_UART2: UART2 peripheral
 * @param[in]	baud define the baudrate for UARTx
 * @return 		None
 *********************************************************************/
void UART_Config(LPC_UART_TypeDef *UARTx, long int baud)
{
    17dc:	b570      	push	{r4, r5, r6, lr}
//	NVIC_SetVTOR(0x10000000);
//#else
//	NVIC_SetVTOR(0x00000000);
//#endif

	if(UARTx == LPC_UART0)
    17de:	4b47      	ldr	r3, [pc, #284]	; (18fc <UART_Config+0x120>)
 * 				- LPC_UART2: UART2 peripheral
 * @param[in]	baud define the baudrate for UARTx
 * @return 		None
 *********************************************************************/
void UART_Config(LPC_UART_TypeDef *UARTx, long int baud)
{
    17e0:	b086      	sub	sp, #24
//	NVIC_SetVTOR(0x10000000);
//#else
//	NVIC_SetVTOR(0x00000000);
//#endif

	if(UARTx == LPC_UART0)
    17e2:	4298      	cmp	r0, r3
 * 				- LPC_UART2: UART2 peripheral
 * @param[in]	baud define the baudrate for UARTx
 * @return 		None
 *********************************************************************/
void UART_Config(LPC_UART_TypeDef *UARTx, long int baud)
{
    17e4:	4604      	mov	r4, r0
    17e6:	460e      	mov	r6, r1
//	NVIC_SetVTOR(0x10000000);
//#else
//	NVIC_SetVTOR(0x00000000);
//#endif

	if(UARTx == LPC_UART0)
    17e8:	d112      	bne.n	1810 <UART_Config+0x34>
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 2;
    17ea:	2502      	movs	r5, #2
	{
		/*
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
    17ec:	2000      	movs	r0, #0
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 2;
    17ee:	f88d 5009 	strb.w	r5, [sp, #9]
		PinCfg.Portnum = 0;
    17f2:	ad06      	add	r5, sp, #24
    17f4:	f805 0d10 	strb.w	r0, [r5, #-16]!
	if(UARTx == LPC_UART0)
	{
		/*
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
    17f8:	2301      	movs	r3, #1
		PinCfg.OpenDrain = 0;
    17fa:	f88d 000c 	strb.w	r0, [sp, #12]
		PinCfg.Pinmode = 0;
    17fe:	f88d 000b 	strb.w	r0, [sp, #11]
		PinCfg.Pinnum = 2;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    1802:	4628      	mov	r0, r5
	if(UARTx == LPC_UART0)
	{
		/*
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
    1804:	f88d 300a 	strb.w	r3, [sp, #10]
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 2;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    1808:	f7ff faf8 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 3;
    180c:	2003      	movs	r0, #3
    180e:	e029      	b.n	1864 <UART_Config+0x88>
		PINSEL_ConfigPin(&PinCfg);
	}

	else if((LPC_UART1_TypeDef *)UARTx == LPC_UART1)
    1810:	483b      	ldr	r0, [pc, #236]	; (1900 <UART_Config+0x124>)
    1812:	4284      	cmp	r4, r0
    1814:	d111      	bne.n	183a <UART_Config+0x5e>
	{
		/*
		 * Initialize UART1 pin connect
		 */
		PinCfg.Funcnum = 2;
    1816:	2102      	movs	r1, #2
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 0;
		PinCfg.Portnum = 2;
    1818:	ad06      	add	r5, sp, #24
    181a:	f805 1d10 	strb.w	r1, [r5, #-16]!
	{
		/*
		 * Initialize UART1 pin connect
		 */
		PinCfg.Funcnum = 2;
		PinCfg.OpenDrain = 0;
    181e:	2200      	movs	r2, #0
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 0;
		PinCfg.Portnum = 2;
		PINSEL_ConfigPin(&PinCfg);
    1820:	4628      	mov	r0, r5
	else if((LPC_UART1_TypeDef *)UARTx == LPC_UART1)
	{
		/*
		 * Initialize UART1 pin connect
		 */
		PinCfg.Funcnum = 2;
    1822:	f88d 100a 	strb.w	r1, [sp, #10]
		PinCfg.OpenDrain = 0;
    1826:	f88d 200c 	strb.w	r2, [sp, #12]
		PinCfg.Pinmode = 0;
    182a:	f88d 200b 	strb.w	r2, [sp, #11]
		PinCfg.Pinnum = 0;
    182e:	f88d 2009 	strb.w	r2, [sp, #9]
		PinCfg.Portnum = 2;
		PINSEL_ConfigPin(&PinCfg);
    1832:	f7ff fae3 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 1;
    1836:	2001      	movs	r0, #1
    1838:	e014      	b.n	1864 <UART_Config+0x88>
		PINSEL_ConfigPin(&PinCfg);
	}

	else if(UARTx == LPC_UART2)
    183a:	4932      	ldr	r1, [pc, #200]	; (1904 <UART_Config+0x128>)
    183c:	428c      	cmp	r4, r1
    183e:	d116      	bne.n	186e <UART_Config+0x92>
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 10;
    1840:	250a      	movs	r5, #10
	{
		/*
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
    1842:	2300      	movs	r3, #0
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 10;
    1844:	f88d 5009 	strb.w	r5, [sp, #9]
		PinCfg.Portnum = 0;
    1848:	ad06      	add	r5, sp, #24
    184a:	f805 3d10 	strb.w	r3, [r5, #-16]!
	else if(UARTx == LPC_UART2)
	{
		/*
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
    184e:	2201      	movs	r2, #1
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 10;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    1850:	4628      	mov	r0, r5
	else if(UARTx == LPC_UART2)
	{
		/*
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
    1852:	f88d 200a 	strb.w	r2, [sp, #10]
		PinCfg.OpenDrain = 0;
    1856:	f88d 300c 	strb.w	r3, [sp, #12]
		PinCfg.Pinmode = 0;
    185a:	f88d 300b 	strb.w	r3, [sp, #11]
		PinCfg.Pinnum = 10;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    185e:	f7ff facd 	bl	dfc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 11;
    1862:	200b      	movs	r0, #11
    1864:	f88d 0009 	strb.w	r0, [sp, #9]
		PINSEL_ConfigPin(&PinCfg);
    1868:	4628      	mov	r0, r5
    186a:	f7ff fac7 	bl	dfc <PINSEL_ConfigPin>
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
    186e:	2103      	movs	r1, #3
    1870:	f88d 1015 	strb.w	r1, [sp, #21]
	 * 1 Stop bit
	 * None parity
	 */

	UART_ConfigStructInit(&UARTConfigStruct);
	UARTConfigStruct.Baud_rate = baud;
    1874:	a906      	add	r1, sp, #24
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
	UART_InitStruct->Parity = UART_PARITY_NONE;
    1876:	2500      	movs	r5, #0
	 * 1 Stop bit
	 * None parity
	 */

	UART_ConfigStructInit(&UARTConfigStruct);
	UARTConfigStruct.Baud_rate = baud;
    1878:	f841 6d08 	str.w	r6, [r1, #-8]!

	// Initialize UARTx peripheral with given to corresponding parameter
	UART_Init(UARTx, &UARTConfigStruct);
    187c:	4620      	mov	r0, r4
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
	UART_InitStruct->Parity = UART_PARITY_NONE;
    187e:	f88d 5014 	strb.w	r5, [sp, #20]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    1882:	f88d 5016 	strb.w	r5, [sp, #22]

	UART_ConfigStructInit(&UARTConfigStruct);
	UARTConfigStruct.Baud_rate = baud;

	// Initialize UARTx peripheral with given to corresponding parameter
	UART_Init(UARTx, &UARTConfigStruct);
    1886:	f7ff fde1 	bl	144c <UART_Init>
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    188a:	2201      	movs	r2, #1
	 * 				- FIFO_State = ENABLE
	 */
	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);

	// Initialize FIFO for UARTx peripheral
	UART_FIFOConfig(UARTx, &UARTFIFOConfigStruct);
    188c:	4620      	mov	r0, r4
    188e:	a901      	add	r1, sp, #4
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    1890:	f88d 2004 	strb.w	r2, [sp, #4]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    1894:	f88d 2005 	strb.w	r2, [sp, #5]
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    1898:	f88d 5006 	strb.w	r5, [sp, #6]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    189c:	f88d 5007 	strb.w	r5, [sp, #7]
	 * 				- FIFO_State = ENABLE
	 */
	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);

	// Initialize FIFO for UARTx peripheral
	UART_FIFOConfig(UARTx, &UARTFIFOConfigStruct);
    18a0:	f7ff ff7f 	bl	17a2 <UART_FIFOConfig>

	if (NewState == ENABLE)
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    18a4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30

	// Enable UARTx Transmit
	UART_TxCmd(UARTx, ENABLE);

#ifdef INTERRUPT_MODE
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    18a8:	2100      	movs	r1, #0

	if (NewState == ENABLE)
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    18aa:	f043 0080 	orr.w	r0, r3, #128	; 0x80

	// Enable UARTx Transmit
	UART_TxCmd(UARTx, ENABLE);

#ifdef INTERRUPT_MODE
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    18ae:	2201      	movs	r2, #1

	if (NewState == ENABLE)
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    18b0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	// Enable UARTx Transmit
	UART_TxCmd(UARTx, ENABLE);

#ifdef INTERRUPT_MODE
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    18b4:	4620      	mov	r0, r4
    18b6:	f7ff ff34 	bl	1722 <UART_IntConfig>
	/* Enable UART line status interrupt */
	UART_IntConfig(UARTx, UART_INTCFG_RLS, ENABLE);
    18ba:	2102      	movs	r1, #2
    18bc:	2201      	movs	r2, #1
    18be:	4620      	mov	r0, r4
    18c0:	f7ff ff2f 	bl	1722 <UART_IntConfig>
	__BUF_RESET(rb.rx_head);
	__BUF_RESET(rb.rx_tail);
	__BUF_RESET(rb.tx_head);
	__BUF_RESET(rb.tx_tail);

	if(UARTx == LPC_UART0)
    18c4:	480d      	ldr	r0, [pc, #52]	; (18fc <UART_Config+0x120>)
	 * first time
	 */
	TxIntStat = RESET;

	// Reset ring buf head and tail idx
	__BUF_RESET(rb.rx_head);
    18c6:	4b10      	ldr	r3, [pc, #64]	; (1908 <UART_Config+0x12c>)
	/**
	 * Do not enable transmit interrupt here, since it is handled by
	 * UART_Send() function, just to reset Tx Interrupt state for the
	 * first time
	 */
	TxIntStat = RESET;
    18c8:	4a10      	ldr	r2, [pc, #64]	; (190c <UART_Config+0x130>)
    18ca:	2100      	movs	r1, #0
	__BUF_RESET(rb.rx_head);
	__BUF_RESET(rb.rx_tail);
	__BUF_RESET(rb.tx_head);
	__BUF_RESET(rb.tx_tail);

	if(UARTx == LPC_UART0)
    18cc:	4284      	cmp	r4, r0
	/**
	 * Do not enable transmit interrupt here, since it is handled by
	 * UART_Send() function, just to reset Tx Interrupt state for the
	 * first time
	 */
	TxIntStat = RESET;
    18ce:	7011      	strb	r1, [r2, #0]

	// Reset ring buf head and tail idx
	__BUF_RESET(rb.rx_head);
    18d0:	6099      	str	r1, [r3, #8]
	__BUF_RESET(rb.rx_tail);
    18d2:	60d9      	str	r1, [r3, #12]
	__BUF_RESET(rb.tx_head);
    18d4:	6019      	str	r1, [r3, #0]
	__BUF_RESET(rb.tx_tail);
    18d6:	6059      	str	r1, [r3, #4]

	if(UARTx == LPC_UART0)
    18d8:	d105      	bne.n	18e6 <UART_Config+0x10a>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    18da:	4b0d      	ldr	r3, [pc, #52]	; (1910 <UART_Config+0x134>)
    18dc:	2148      	movs	r1, #72	; 0x48
    18de:	f883 1305 	strb.w	r1, [r3, #773]	; 0x305

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    18e2:	2020      	movs	r0, #32
    18e4:	e007      	b.n	18f6 <UART_Config+0x11a>
		/* preemption = 1, sub-priority = 1 */
		NVIC_SetPriority(UART0_IRQn, ((0x01<<3)|0x01));
		/* Enable Interrupt for UART0 channel */
		NVIC_EnableIRQ(UART0_IRQn);
	}
	else if(UARTx == LPC_UART2)
    18e6:	4907      	ldr	r1, [pc, #28]	; (1904 <UART_Config+0x128>)
    18e8:	428c      	cmp	r4, r1
    18ea:	d105      	bne.n	18f8 <UART_Config+0x11c>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    18ec:	4b08      	ldr	r3, [pc, #32]	; (1910 <UART_Config+0x134>)
    18ee:	2210      	movs	r2, #16
    18f0:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    18f4:	2080      	movs	r0, #128	; 0x80
    18f6:	6018      	str	r0, [r3, #0]
		/* Enable Interrupt for UART2 channel */
		NVIC_EnableIRQ(UART2_IRQn);
	}

#endif
}
    18f8:	b006      	add	sp, #24
    18fa:	bd70      	pop	{r4, r5, r6, pc}
    18fc:	4000c000 	.word	0x4000c000
    1900:	40010000 	.word	0x40010000
    1904:	40098000 	.word	0x40098000
    1908:	1000007c 	.word	0x1000007c
    190c:	1000034c 	.word	0x1000034c
    1910:	e000e100 	.word	0xe000e100

00001914 <UART_FIFOConfigStructInit>:
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    1914:	2300      	movs	r3, #0
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    1916:	2101      	movs	r1, #1
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    1918:	7083      	strb	r3, [r0, #2]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    191a:	70c3      	strb	r3, [r0, #3]
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    191c:	7001      	strb	r1, [r0, #0]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    191e:	7041      	strb	r1, [r0, #1]
    1920:	4770      	bx	lr

00001922 <UART_ABCmd>:

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	tmp = 0;
	if (NewState == ENABLE) {
    1922:	2a01      	cmp	r2, #1
    1924:	f04f 0300 	mov.w	r3, #0
    1928:	d120      	bne.n	196c <UART_ABCmd+0x4a>
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
    192a:	780b      	ldrb	r3, [r1, #0]
			tmp |= UART_ACR_MODE;
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
    192c:	784a      	ldrb	r2, [r1, #1]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	tmp = 0;
    192e:	2b01      	cmp	r3, #1
    1930:	bf0c      	ite	eq
    1932:	2302      	moveq	r3, #2
    1934:	2300      	movne	r3, #0
	if (NewState == ENABLE) {
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
			tmp |= UART_ACR_MODE;
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
    1936:	2a01      	cmp	r2, #1
    1938:	d101      	bne.n	193e <UART_ABCmd+0x1c>
			tmp |= UART_ACR_AUTO_RESTART;
    193a:	f043 0304 	orr.w	r3, r3, #4
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    193e:	7b02      	ldrb	r2, [r0, #12]
		if (ABConfigStruct->AutoRestart == ENABLE){
			tmp |= UART_ACR_AUTO_RESTART;
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1940:	490b      	ldr	r1, [pc, #44]	; (1970 <UART_ABCmd+0x4e>)
    1942:	4288      	cmp	r0, r1
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    1944:	f042 0180 	orr.w	r1, r2, #128	; 0x80
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
    1948:	f04f 0200 	mov.w	r2, #0
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    194c:	7301      	strb	r1, [r0, #12]
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
    194e:	7002      	strb	r2, [r0, #0]
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
    1950:	7102      	strb	r2, [r0, #4]
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
    1952:	7b01      	ldrb	r1, [r0, #12]
    1954:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    1958:	7302      	strb	r2, [r0, #12]
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
    195a:	f04f 0110 	mov.w	r1, #16
		if (ABConfigStruct->AutoRestart == ENABLE){
			tmp |= UART_ACR_AUTO_RESTART;
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    195e:	d002      	beq.n	1966 <UART_ABCmd+0x44>
			UARTx->LCR |= UART_LCR_DLAB_EN;
			UARTx->DLL = 0;
			UARTx->DLM = 0;
			UARTx->LCR &= ~UART_LCR_DLAB_EN;
			// FDR value must be reset to default value
			UARTx->FDR = 0x10;
    1960:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    1964:	e000      	b.n	1968 <UART_ABCmd+0x46>
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
    1966:	6281      	str	r1, [r0, #40]	; 0x28
			((LPC_UART1_TypeDef *)UARTx)->ACR = UART_ACR_START | tmp;
    1968:	f043 0301 	orr.w	r3, r3, #1
		}
		else
		{
			((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    196c:	6203      	str	r3, [r0, #32]
    196e:	4770      	bx	lr
    1970:	40010000 	.word	0x40010000

00001974 <UART_ABClearIntPending>:
void UART_ABClearIntPending(LPC_UART_TypeDef *UARTx, UART_ABEO_Type ABIntType)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		UARTx->ACR |= ABIntType;
    1974:	6a02      	ldr	r2, [r0, #32]
    1976:	4311      	orrs	r1, r2
    1978:	6201      	str	r1, [r0, #32]
    197a:	4770      	bx	lr

0000197c <UART_TxCmd>:
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    197c:	2901      	cmp	r1, #1
    197e:	d106      	bne.n	198e <UART_TxCmd+0x12>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    1980:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    1984:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1988:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    198c:	4770      	bx	lr
    198e:	f04f 0100 	mov.w	r1, #0
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    1992:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    1996:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
    199a:	4770      	bx	lr

0000199c <UART_DeInit>:
void UART_DeInit(LPC_UART_TypeDef* UARTx)
{
	// For debug mode
	CHECK_PARAM(PARAM_UARTx(UARTx));

	UART_TxCmd(UARTx, DISABLE);
    199c:	2100      	movs	r1, #0
    199e:	f7ff bfed 	b.w	197c <UART_TxCmd>

000019a2 <UART_IrDAInvtInputCmd>:
void UART_IrDAInvtInputCmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    19a2:	2901      	cmp	r1, #1
    19a4:	d104      	bne.n	19b0 <UART_IrDAInvtInputCmd+0xe>
	{
		UARTx->ICR |= UART_ICR_IRDAINV;
    19a6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
    19aa:	f042 0102 	orr.w	r1, r2, #2
    19ae:	e004      	b.n	19ba <UART_IrDAInvtInputCmd+0x18>
	}
	else if (NewState == DISABLE)
    19b0:	b929      	cbnz	r1, 19be <UART_IrDAInvtInputCmd+0x1c>
	{
		UARTx->ICR &= (~UART_ICR_IRDAINV) & UART_ICR_BITMASK;
    19b2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    19b6:	f003 013d 	and.w	r1, r3, #61	; 0x3d
    19ba:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    19be:	4770      	bx	lr

000019c0 <UART_IrDACmd>:
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		UARTx->ICR |= UART_ICR_IRDAEN;
    19c0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
void UART_IrDACmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    19c4:	2901      	cmp	r1, #1
	{
		UARTx->ICR |= UART_ICR_IRDAEN;
    19c6:	bf0c      	ite	eq
    19c8:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		UARTx->ICR &= (~UART_ICR_IRDAEN) & UART_ICR_BITMASK;
    19cc:	f003 033e 	andne.w	r3, r3, #62	; 0x3e
    19d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    19d4:	4770      	bx	lr

000019d6 <UART_IrDAPulseDivConfig>:
	uint32_t tmp, tmp1;
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));

	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    19d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
	uint32_t tmp, tmp1;
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));

	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
    19da:	f001 0107 	and.w	r1, r1, #7
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    19de:	f003 02c7 	and.w	r2, r3, #199	; 0xc7
	tmp |= tmp1 | UART_ICR_FIXPULSE_EN;
    19e2:	ea42 03c1 	orr.w	r3, r2, r1, lsl #3
	UARTx->ICR = tmp & UART_ICR_BITMASK;
    19e6:	f003 013f 	and.w	r1, r3, #63	; 0x3f
    19ea:	f041 0204 	orr.w	r2, r1, #4
    19ee:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    19f2:	4770      	bx	lr

000019f4 <UART_FullModemForcePinState>:
				- ACTIVE: Force the pin to active signal.
 * @return none
 **********************************************************************/
void UART_FullModemForcePinState(LPC_UART1_TypeDef *UARTx, UART_MODEM_PIN_Type Pin, \
							UART1_SignalState NewState)
{
    19f4:	2901      	cmp	r1, #1
    19f6:	bf9d      	ittte	ls
    19f8:	4b06      	ldrls	r3, [pc, #24]	; (1a14 <UART_FullModemForcePinState+0x20>)
    19fa:	1859      	addls	r1, r3, r1
    19fc:	78cb      	ldrbls	r3, [r1, #3]
    19fe:	2300      	movhi	r3, #0
		break;
	default:
		break;
	}

	if (NewState == ACTIVE){
    1a00:	2a01      	cmp	r2, #1
		UARTx->MCR |= tmp;
    1a02:	7c02      	ldrb	r2, [r0, #16]
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1a04:	bf16      	itet	ne
    1a06:	f022 020c 	bicne.w	r2, r2, #12
	default:
		break;
	}

	if (NewState == ACTIVE){
		UARTx->MCR |= tmp;
    1a0a:	4313      	orreq	r3, r2
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1a0c:	ea22 0303 	bicne.w	r3, r2, r3
    1a10:	7403      	strb	r3, [r0, #16]
    1a12:	4770      	bx	lr
    1a14:	00005aec 	.word	0x00005aec

00001a18 <UART_FullModemConfigMode>:

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(Mode){
    1a18:	2901      	cmp	r1, #1
    1a1a:	d005      	beq.n	1a28 <UART_FullModemConfigMode+0x10>
    1a1c:	d306      	bcc.n	1a2c <UART_FullModemConfigMode+0x14>
		break;
	case UART1_MODEM_MODE_AUTO_RTS:
		tmp = UART1_MCR_AUTO_RTS_EN;
		break;
	case UART1_MODEM_MODE_AUTO_CTS:
		tmp = UART1_MCR_AUTO_CTS_EN;
    1a1e:	2902      	cmp	r1, #2
    1a20:	bf14      	ite	ne
    1a22:	2100      	movne	r1, #0
    1a24:	2180      	moveq	r1, #128	; 0x80
    1a26:	e002      	b.n	1a2e <UART_FullModemConfigMode+0x16>
	switch(Mode){
	case UART1_MODEM_MODE_LOOPBACK:
		tmp = UART1_MCR_LOOPB_EN;
		break;
	case UART1_MODEM_MODE_AUTO_RTS:
		tmp = UART1_MCR_AUTO_RTS_EN;
    1a28:	2140      	movs	r1, #64	; 0x40
		break;
    1a2a:	e000      	b.n	1a2e <UART_FullModemConfigMode+0x16>
	CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(Mode){
	case UART1_MODEM_MODE_LOOPBACK:
		tmp = UART1_MCR_LOOPB_EN;
    1a2c:	2110      	movs	r1, #16
		break;
	}

	if (NewState == ENABLE)
	{
		UARTx->MCR |= tmp;
    1a2e:	7c03      	ldrb	r3, [r0, #16]
		break;
	default:
		break;
	}

	if (NewState == ENABLE)
    1a30:	2a01      	cmp	r2, #1
	{
		UARTx->MCR |= tmp;
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1a32:	bf16      	itet	ne
    1a34:	f023 030c 	bicne.w	r3, r3, #12
		break;
	}

	if (NewState == ENABLE)
	{
		UARTx->MCR |= tmp;
    1a38:	4319      	orreq	r1, r3
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1a3a:	ea23 0101 	bicne.w	r1, r3, r1
    1a3e:	7401      	strb	r1, [r0, #16]
    1a40:	4770      	bx	lr

00001a42 <UART_FullModemGetStatus>:
 * 			used to check all flags.
 **********************************************************************/
uint8_t UART_FullModemGetStatus(LPC_UART1_TypeDef *UARTx)
{
	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	return ((UARTx->MSR) & UART1_MSR_BITMASK);
    1a42:	7e00      	ldrb	r0, [r0, #24]
}
    1a44:	4770      	bx	lr

00001a46 <UART_RS485Config>:
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));

	tmp = 0;
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
    1a46:	78cb      	ldrb	r3, [r1, #3]
    1a48:	2b01      	cmp	r3, #1
    1a4a:	d10d      	bne.n	1a68 <UART_RS485Config+0x22>
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;

		// Set polar
		if (RS485ConfigStruct->DirCtrlPol_Level == SET)
    1a4c:	794a      	ldrb	r2, [r1, #5]

	tmp = 0;
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;
    1a4e:	2a01      	cmp	r2, #1
    1a50:	bf0c      	ite	eq
    1a52:	2330      	moveq	r3, #48	; 0x30
    1a54:	2310      	movne	r3, #16
		{
			tmp |= UART1_RS485CTRL_OINV_1;
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
    1a56:	790a      	ldrb	r2, [r1, #4]
    1a58:	2a01      	cmp	r2, #1
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    1a5a:	79ca      	ldrb	r2, [r1, #7]
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
    1a5c:	bf08      	it	eq
    1a5e:	f043 0308 	orreq.w	r3, r3, #8
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    1a62:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
    1a66:	e000      	b.n	1a6a <UART_RS485Config+0x24>
	CHECK_PARAM(PARAM_UART_RS485_DIRCTRL_PIN(RS485ConfigStruct->DirCtrlPin));
	CHECK_PARAM(PARAM_UART1_RS485_CFG_MATCHADDRVALUE(RS485ConfigStruct->MatchAddrValue));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));

	tmp = 0;
    1a68:	2300      	movs	r3, #0
		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
    1a6a:	780a      	ldrb	r2, [r1, #0]
    1a6c:	2a01      	cmp	r2, #1
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    1a6e:	788a      	ldrb	r2, [r1, #2]
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
    1a70:	bf08      	it	eq
    1a72:	f043 0301 	orreq.w	r3, r3, #1
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    1a76:	2a01      	cmp	r2, #1
    1a78:	d104      	bne.n	1a84 <UART_RS485Config+0x3e>
	{
		tmp |= UART1_RS485CTRL_AADEN;
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    1a7a:	798a      	ldrb	r2, [r1, #6]
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
	{
		tmp |= UART1_RS485CTRL_AADEN;
    1a7c:	f043 0304 	orr.w	r3, r3, #4
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    1a80:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
	}


	// Receiver is disable
	if (RS485ConfigStruct->Rx_State == DISABLE)
    1a84:	7849      	ldrb	r1, [r1, #1]
    1a86:	b909      	cbnz	r1, 1a8c <UART_RS485Config+0x46>
	{
		tmp |= UART1_RS485CTRL_RX_DIS;
    1a88:	f043 0302 	orr.w	r3, r3, #2
	}

	// write back to RS485 control register
	UARTx->RS485CTRL = tmp & UART1_RS485CTRL_BITMASK;
    1a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    1a90:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c

	// Enable Parity function and leave parity in stick '0' parity as default
	UARTx->LCR |= (UART_LCR_PARITY_F_0 | UART_LCR_PARITY_EN);
    1a94:	7b01      	ldrb	r1, [r0, #12]
    1a96:	f041 0338 	orr.w	r3, r1, #56	; 0x38
    1a9a:	7303      	strb	r3, [r0, #12]
    1a9c:	4770      	bx	lr

00001a9e <UART_RS485ReceiverCmd>:
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
	if (NewState == ENABLE){
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    1a9e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 * 							- DISABLE: Disable this function.
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
	if (NewState == ENABLE){
    1aa2:	2901      	cmp	r1, #1
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    1aa4:	bf0c      	ite	eq
    1aa6:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
	} else {
		UARTx->RS485CTRL |= UART1_RS485CTRL_RX_DIS;
    1aaa:	f043 0302 	orrne.w	r3, r3, #2
    1aae:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    1ab2:	4770      	bx	lr

00001ab4 <UART_IntReceive>:
 * @brief 		UART receive function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntReceive(LPC_UART_TypeDef *UARTx)
{
    1ab4:	b510      	push	{r4, lr}
    1ab6:	4604      	mov	r4, r0
	uint8_t tmpc;

	while(1)
	{
		// Call UART read function in UART driver
		tmpc = UART_ReceiveByte(UARTx);
    1ab8:	4620      	mov	r0, r4
    1aba:	f7ff fe24 	bl	1706 <UART_ReceiveByte>
		if (tmpc)
    1abe:	4602      	mov	r2, r0
    1ac0:	b180      	cbz	r0, 1ae4 <UART_IntReceive+0x30>
		{
			/* Check if buffer is more space
			 * If no more space, remaining character will be trimmed out
			 */
			if (!__BUF_IS_FULL(rb.rx_head,rb.rx_tail))
    1ac2:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <UART_IntReceive+0x34>)
    1ac4:	68d8      	ldr	r0, [r3, #12]
    1ac6:	6899      	ldr	r1, [r3, #8]
    1ac8:	3101      	adds	r1, #1
    1aca:	4041      	eors	r1, r0
    1acc:	f011 0fff 	tst.w	r1, #255	; 0xff
    1ad0:	d0f2      	beq.n	1ab8 <UART_IntReceive+0x4>
			{
				rb.rx[rb.rx_head] = tmpc;
    1ad2:	6898      	ldr	r0, [r3, #8]
    1ad4:	1819      	adds	r1, r3, r0
    1ad6:	f881 2110 	strb.w	r2, [r1, #272]	; 0x110
				__BUF_INCR(rb.rx_head);
    1ada:	689a      	ldr	r2, [r3, #8]
    1adc:	1c50      	adds	r0, r2, #1
    1ade:	b2c1      	uxtb	r1, r0
    1ae0:	6099      	str	r1, [r3, #8]
    1ae2:	e7e9      	b.n	1ab8 <UART_IntReceive+0x4>
    1ae4:	bd10      	pop	{r4, pc}
    1ae6:	bf00      	nop
    1ae8:	1000007c 	.word	0x1000007c

00001aec <UART_IntTransmit>:
 * @brief 		UART transmit function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntTransmit(LPC_UART_TypeDef *UARTx)
{
    1aec:	b570      	push	{r4, r5, r6, lr}
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar;

    // Disable THRE interrupt
    UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1aee:	2101      	movs	r1, #1
    1af0:	2200      	movs	r2, #0
 * @brief 		UART transmit function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntTransmit(LPC_UART_TypeDef *UARTx)
{
    1af2:	4604      	mov	r4, r0
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar;

    // Disable THRE interrupt
    UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1af4:	f7ff fe15 	bl	1722 <UART_IntConfig>

	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
	 * of data or break whenever ring buffers are empty */
	/* Wait until THR empty */
    while (UART_CheckBusy(UARTx) == SET);
    1af8:	4620      	mov	r0, r4
    1afa:	f7ff fe4c 	bl	1796 <UART_CheckBusy>
    1afe:	2801      	cmp	r0, #1
    1b00:	d0fa      	beq.n	1af8 <UART_IntTransmit+0xc>

	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
    1b02:	4b1a      	ldr	r3, [pc, #104]	; (1b6c <UART_IntTransmit+0x80>)
    1b04:	681a      	ldr	r2, [r3, #0]
    1b06:	6859      	ldr	r1, [r3, #4]
    1b08:	ea81 0002 	eor.w	r0, r1, r2
    1b0c:	f010 0fff 	tst.w	r0, #255	; 0xff
    1b10:	d00b      	beq.n	1b2a <UART_IntTransmit+0x3e>
    {
        /* Move a piece of data into the transmit FIFO */
		// None blocking mode
		pChar = &rb.tx[rb.tx_tail];
    1b12:	685a      	ldr	r2, [r3, #4]
    1b14:	f04f 33ff 	mov.w	r3, #4294967295
		bSent = 0;
		while (bToSend)
		{
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE))
    1b18:	7d25      	ldrb	r5, [r4, #20]
    1b1a:	f005 0620 	and.w	r6, r5, #32
    1b1e:	b2f1      	uxtb	r1, r6
    1b20:	b911      	cbnz	r1, 1b28 <UART_IntTransmit+0x3c>
			{
				if (timeOut == 0) break;
    1b22:	b113      	cbz	r3, 1b2a <UART_IntTransmit+0x3e>
				timeOut--;
    1b24:	3b01      	subs	r3, #1
    1b26:	e7f7      	b.n	1b18 <UART_IntTransmit+0x2c>
			}
			// Time out!
			if(timeOut == 0) break;
    1b28:	b9b3      	cbnz	r3, 1b58 <UART_IntTransmit+0x6c>
    	}
    }

    /* If there is no more data to send, disable the transmit
       interrupt - else enable it or keep it enabled */
	if (__BUF_IS_EMPTY(rb.tx_head, rb.tx_tail))
    1b2a:	4810      	ldr	r0, [pc, #64]	; (1b6c <UART_IntTransmit+0x80>)
    1b2c:	6805      	ldr	r5, [r0, #0]
    1b2e:	6846      	ldr	r6, [r0, #4]
    1b30:	406e      	eors	r6, r5
    1b32:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    1b36:	4d0e      	ldr	r5, [pc, #56]	; (1b70 <UART_IntTransmit+0x84>)
    1b38:	d106      	bne.n	1b48 <UART_IntTransmit+0x5c>
	{
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1b3a:	4620      	mov	r0, r4
    1b3c:	2101      	movs	r1, #1
    1b3e:	4632      	mov	r2, r6
    1b40:	f7ff fdef 	bl	1722 <UART_IntConfig>
    	// Reset Tx Interrupt state
    	TxIntStat = RESET;
    1b44:	702e      	strb	r6, [r5, #0]
    1b46:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
      	// Set Tx Interrupt state
		TxIntStat = SET;
    1b48:	2101      	movs	r1, #1
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    1b4a:	4620      	mov	r0, r4
    1b4c:	460a      	mov	r2, r1
    	TxIntStat = RESET;
    }
    else
    {
      	// Set Tx Interrupt state
		TxIntStat = SET;
    1b4e:	7029      	strb	r1, [r5, #0]
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    }
}
    1b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }
    else
    {
      	// Set Tx Interrupt state
		TxIntStat = SET;
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    1b54:	f7ff bde5 	b.w	1722 <UART_IntConfig>
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend)
			{
				UART_SendByte(UARTx, (*pChar++));
    1b58:	4b04      	ldr	r3, [pc, #16]	; (1b6c <UART_IntTransmit+0x80>)
    1b5a:	189a      	adds	r2, r3, r2
    1b5c:	7c10      	ldrb	r0, [r2, #16]
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
	}
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    1b5e:	7020      	strb	r0, [r4, #0]
		}

    	if(bSent)
    	{
    		/* Update transmit ring FIFO tail pointer */
    		__BUF_INCR(rb.tx_tail);
    1b60:	685d      	ldr	r5, [r3, #4]
    1b62:	1c6e      	adds	r6, r5, #1
    1b64:	b2f1      	uxtb	r1, r6
    1b66:	6059      	str	r1, [r3, #4]
    1b68:	e7cb      	b.n	1b02 <UART_IntTransmit+0x16>
    1b6a:	bf00      	nop
    1b6c:	1000007c 	.word	0x1000007c
    1b70:	1000034c 	.word	0x1000034c

00001b74 <UART2_IRQHandler>:
 * @brief	UART2 interrupt handler sub-routine
 * @param	None
 * @return	None
 **********************************************************************/
void UART2_IRQHandler(void)
{
    1b74:	b510      	push	{r4, lr}
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    1b76:	4b0d      	ldr	r3, [pc, #52]	; (1bac <UART2_IRQHandler+0x38>)
    1b78:	689c      	ldr	r4, [r3, #8]
	// Call Standard UART 2 interrupt handler
	uint32_t intsrc, tmp, tmp1;

	/* Determine the interrupt source */
	intsrc = UART_GetIntId(LPC_UART2);
	tmp = intsrc & UART_IIR_INTID_MASK;
    1b7a:	f004 040e 	and.w	r4, r4, #14

	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS)
    1b7e:	2c06      	cmp	r4, #6
    1b80:	d104      	bne.n	1b8c <UART2_IRQHandler+0x18>
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    1b82:	7d18      	ldrb	r0, [r3, #20]
		// Check line status
		tmp1 = UART_GetLineStatus(LPC_UART2);
		// Mask out the Receive Ready and Transmit Holding empty status
		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_BI | UART_LSR_RXFE);
		// If any error exist
		if (tmp1)
    1b84:	f010 0f9e 	tst.w	r0, #158	; 0x9e
    1b88:	d00e      	beq.n	1ba8 <UART2_IRQHandler+0x34>
    1b8a:	e7fe      	b.n	1b8a <UART2_IRQHandler+0x16>
			}
		}
	}

	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI))
    1b8c:	2c04      	cmp	r4, #4
    1b8e:	d001      	beq.n	1b94 <UART2_IRQHandler+0x20>
    1b90:	2c0c      	cmp	r4, #12
    1b92:	d102      	bne.n	1b9a <UART2_IRQHandler+0x26>
	{
		UART_IntReceive(LPC_UART2);
    1b94:	4805      	ldr	r0, [pc, #20]	; (1bac <UART2_IRQHandler+0x38>)
    1b96:	f7ff ff8d 	bl	1ab4 <UART_IntReceive>
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
    1b9a:	2c02      	cmp	r4, #2
    1b9c:	d104      	bne.n	1ba8 <UART2_IRQHandler+0x34>
	{
		UART_IntTransmit(LPC_UART2);
    1b9e:	4803      	ldr	r0, [pc, #12]	; (1bac <UART2_IRQHandler+0x38>)
	}
}
    1ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
	{
		UART_IntTransmit(LPC_UART2);
    1ba4:	f7ff bfa2 	b.w	1aec <UART_IntTransmit>
    1ba8:	bd10      	pop	{r4, pc}
    1baa:	bf00      	nop
    1bac:	40098000 	.word	0x40098000

00001bb0 <UART0_IRQHandler>:
 * @brief	UART0 interrupt handler sub-routine
 * @param	None
 * @return	None
 **********************************************************************/
void UART0_IRQHandler(void)
{
    1bb0:	b510      	push	{r4, lr}
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    1bb2:	4b0d      	ldr	r3, [pc, #52]	; (1be8 <UART0_IRQHandler+0x38>)
    1bb4:	689c      	ldr	r4, [r3, #8]
	// Call Standard UART 0 interrupt handler
	uint32_t intsrc, tmp, tmp1;

	// Determine the interrupt source
	intsrc = UART_GetIntId(LPC_UART0);
	tmp = intsrc & UART_IIR_INTID_MASK;
    1bb6:	f004 040e 	and.w	r4, r4, #14

	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS)
    1bba:	2c06      	cmp	r4, #6
    1bbc:	d104      	bne.n	1bc8 <UART0_IRQHandler+0x18>
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    1bbe:	7d18      	ldrb	r0, [r3, #20]
		// Check line status
		tmp1 = UART_GetLineStatus(LPC_UART0);
		// Mask out the Receive Ready and Transmit Holding empty status
		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_BI | UART_LSR_RXFE);
		// If any error exist
		if (tmp1)
    1bc0:	f010 0f9e 	tst.w	r0, #158	; 0x9e
    1bc4:	d00e      	beq.n	1be4 <UART0_IRQHandler+0x34>
    1bc6:	e7fe      	b.n	1bc6 <UART0_IRQHandler+0x16>
			}
		}
	}

	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI))
    1bc8:	2c04      	cmp	r4, #4
    1bca:	d001      	beq.n	1bd0 <UART0_IRQHandler+0x20>
    1bcc:	2c0c      	cmp	r4, #12
    1bce:	d102      	bne.n	1bd6 <UART0_IRQHandler+0x26>
	{
		UART_IntReceive(LPC_UART0);
    1bd0:	4805      	ldr	r0, [pc, #20]	; (1be8 <UART0_IRQHandler+0x38>)
    1bd2:	f7ff ff6f 	bl	1ab4 <UART_IntReceive>
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
    1bd6:	2c02      	cmp	r4, #2
    1bd8:	d104      	bne.n	1be4 <UART0_IRQHandler+0x34>
	{
		UART_IntTransmit(LPC_UART0);
    1bda:	4803      	ldr	r0, [pc, #12]	; (1be8 <UART0_IRQHandler+0x38>)
	}
}
    1bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
	{
		UART_IntTransmit(LPC_UART0);
    1be0:	f7ff bf84 	b.w	1aec <UART_IntTransmit>
    1be4:	bd10      	pop	{r4, pc}
    1be6:	bf00      	nop
    1be8:	4000c000 	.word	0x4000c000

00001bec <UART_Send>:
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bee:	460e      	mov	r6, r1
    1bf0:	4617      	mov	r7, r2
	uint32_t bytes = 0;

	/* Temporarily lock out UART transmit interrupts during this
	   read so the UART transmit interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1bf2:	2101      	movs	r1, #1
    1bf4:	2200      	movs	r2, #0
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1bf6:	4605      	mov	r5, r0
	uint32_t bytes = 0;

	/* Temporarily lock out UART transmit interrupts during this
	   read so the UART transmit interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1bf8:	f7ff fd93 	bl	1722 <UART_IntConfig>
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
	uint8_t *data = (uint8_t *) txbuf;
	uint32_t bytes = 0;
    1bfc:	2400      	movs	r4, #0
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);

	/* Loop until transmit run buffer is full or until n_bytes
	   expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
    1bfe:	42bc      	cmp	r4, r7
    1c00:	d106      	bne.n	1c10 <UART_Send+0x24>
	 * Check if current Tx interrupt enable is reset,
	 * that means the Tx interrupt must be re-enabled
	 * due to call UART_IntTransmit() function to trigger
	 * this interrupt type
	 */
	if (TxIntStat == RESET)
    1c02:	4b10      	ldr	r3, [pc, #64]	; (1c44 <UART_Send+0x58>)
    1c04:	7819      	ldrb	r1, [r3, #0]
    1c06:	b9a9      	cbnz	r1, 1c34 <UART_Send+0x48>
	{
		UART_IntTransmit(UARTx);
    1c08:	4628      	mov	r0, r5
    1c0a:	f7ff ff6f 	bl	1aec <UART_IntTransmit>
    1c0e:	e016      	b.n	1c3e <UART_Send+0x52>
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);

	/* Loop until transmit run buffer is full or until n_bytes
	   expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
    1c10:	4b0d      	ldr	r3, [pc, #52]	; (1c48 <UART_Send+0x5c>)
    1c12:	6859      	ldr	r1, [r3, #4]
    1c14:	681a      	ldr	r2, [r3, #0]
    1c16:	1c50      	adds	r0, r2, #1
    1c18:	4048      	eors	r0, r1
    1c1a:	f010 0fff 	tst.w	r0, #255	; 0xff
    1c1e:	d0f0      	beq.n	1c02 <UART_Send+0x16>
	{
		/* Write data from buffer into ring buffer */
		rb.tx[rb.tx_head] = *data;
    1c20:	681a      	ldr	r2, [r3, #0]
    1c22:	5d30      	ldrb	r0, [r6, r4]
    1c24:	1899      	adds	r1, r3, r2
    1c26:	7408      	strb	r0, [r1, #16]
		data++;

		/* Increment head pointer */
		__BUF_INCR(rb.tx_head);
    1c28:	681a      	ldr	r2, [r3, #0]

		/* Increment data count and decrement buffer size count */
		bytes++;
    1c2a:	3401      	adds	r4, #1
		/* Write data from buffer into ring buffer */
		rb.tx[rb.tx_head] = *data;
		data++;

		/* Increment head pointer */
		__BUF_INCR(rb.tx_head);
    1c2c:	1c50      	adds	r0, r2, #1
    1c2e:	b2c1      	uxtb	r1, r0
    1c30:	6019      	str	r1, [r3, #0]
    1c32:	e7e4      	b.n	1bfe <UART_Send+0x12>
	/**
	 * Otherwise, re-enables Tx Interrupt
	 */
	else
	{
		UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    1c34:	2101      	movs	r1, #1
    1c36:	4628      	mov	r0, r5
    1c38:	460a      	mov	r2, r1
    1c3a:	f7ff fd72 	bl	1722 <UART_IntConfig>
	}

	return bytes;
}
    1c3e:	4620      	mov	r0, r4
    1c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c42:	bf00      	nop
    1c44:	1000034c 	.word	0x1000034c
    1c48:	1000007c 	.word	0x1000007c

00001c4c <printf>:
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
    1c4c:	b40e      	push	{r1, r2, r3}
    1c4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uchar hex[]= "0123456789ABCDEF";
    1c52:	4b86      	ldr	r3, [pc, #536]	; (1e6c <printf+0x220>)
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
    1c54:	b09c      	sub	sp, #112	; 0x70
    1c56:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    1c58:	4605      	mov	r5, r0
	uchar hex[]= "0123456789ABCDEF";
    1c5a:	aa03      	add	r2, sp, #12
    1c5c:	f103 0710 	add.w	r7, r3, #16
    1c60:	6818      	ldr	r0, [r3, #0]
    1c62:	6859      	ldr	r1, [r3, #4]
    1c64:	4616      	mov	r6, r2
    1c66:	c603      	stmia	r6!, {r0, r1}
    1c68:	3308      	adds	r3, #8
    1c6a:	42bb      	cmp	r3, r7
    1c6c:	4632      	mov	r2, r6
    1c6e:	d1f7      	bne.n	1c60 <printf+0x14>
    1c70:	7818      	ldrb	r0, [r3, #0]
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    1c72:	2100      	movs	r1, #0
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
    1c74:	7030      	strb	r0, [r6, #0]
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    1c76:	2228      	movs	r2, #40	; 0x28
    1c78:	a808      	add	r0, sp, #32
    1c7a:	f003 fe7f 	bl	597c <memset>
    1c7e:	210a      	movs	r1, #10
    1c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1c84:	9109      	str	r1, [sp, #36]	; 0x24
    1c86:	2364      	movs	r3, #100	; 0x64
    1c88:	920b      	str	r2, [sp, #44]	; 0x2c
    1c8a:	4979      	ldr	r1, [pc, #484]	; (1e70 <printf+0x224>)
    1c8c:	4a79      	ldr	r2, [pc, #484]	; (1e74 <printf+0x228>)
    1c8e:	930a      	str	r3, [sp, #40]	; 0x28
    1c90:	f242 7010 	movw	r0, #10000	; 0x2710
    1c94:	4b78      	ldr	r3, [pc, #480]	; (1e78 <printf+0x22c>)
    1c96:	2601      	movs	r6, #1
    1c98:	900c      	str	r0, [sp, #48]	; 0x30
    1c9a:	910d      	str	r1, [sp, #52]	; 0x34
    1c9c:	920f      	str	r2, [sp, #60]	; 0x3c
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    1c9e:	2100      	movs	r1, #0
    1ca0:	2228      	movs	r2, #40	; 0x28
    1ca2:	a812      	add	r0, sp, #72	; 0x48
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    1ca4:	930e      	str	r3, [sp, #56]	; 0x38
    1ca6:	9608      	str	r6, [sp, #32]
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    1ca8:	f003 fe68 	bl	597c <memset>
    1cac:	2010      	movs	r0, #16
    1cae:	f44f 7180 	mov.w	r1, #256	; 0x100
    1cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1cb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1cba:	9013      	str	r0, [sp, #76]	; 0x4c
    1cbc:	9114      	str	r1, [sp, #80]	; 0x50
    1cbe:	9315      	str	r3, [sp, #84]	; 0x54
    1cc0:	9216      	str	r2, [sp, #88]	; 0x58
    1cc2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1cc6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    1cca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	schar *ptr;
#ifdef RTC_MODE
	RTC_TIME_Type FullTime;
#endif
	va_list ap;
	va_start(ap, format);
    1cce:	aa24      	add	r2, sp, #144	; 0x90
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    1cd0:	9612      	str	r6, [sp, #72]	; 0x48
    1cd2:	9017      	str	r0, [sp, #92]	; 0x5c
    1cd4:	9118      	str	r1, [sp, #96]	; 0x60
    1cd6:	9319      	str	r3, [sp, #100]	; 0x64
	schar *ptr;
#ifdef RTC_MODE
	RTC_TIME_Type FullTime;
#endif
	va_list ap;
	va_start(ap, format);
    1cd8:	9202      	str	r2, [sp, #8]

	for(;;)
	{
		while((format_flag = *format++) != '%')      /* until full format string read */
    1cda:	7820      	ldrb	r0, [r4, #0]
    1cdc:	2825      	cmp	r0, #37	; 0x25
    1cde:	f88d 0002 	strb.w	r0, [sp, #2]
    1ce2:	d00c      	beq.n	1cfe <printf+0xb2>
		{
			if(!format_flag)
    1ce4:	2800      	cmp	r0, #0
    1ce6:	f000 80bb 	beq.w	1e60 <printf+0x214>
	va_list ap;
	va_start(ap, format);

	for(;;)
	{
		while((format_flag = *format++) != '%')      /* until full format string read */
    1cea:	1c67      	adds	r7, r4, #1
		{
			if(!format_flag)
			{                        /* until '%' or '\0' */
				return (0);
			}
			UART_Send(UARTx,&format_flag,1,BLOCKING);
    1cec:	4628      	mov	r0, r5
    1cee:	f10d 0102 	add.w	r1, sp, #2
    1cf2:	2201      	movs	r2, #1
    1cf4:	2302      	movs	r3, #2
    1cf6:	f7ff ff79 	bl	1bec <UART_Send>
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
    1cfa:	463c      	mov	r4, r7
    1cfc:	e7ed      	b.n	1cda <printf+0x8e>
				return (0);
			}
			UART_Send(UARTx,&format_flag,1,BLOCKING);
		}

		switch(format_flag = *format++)
    1cfe:	7860      	ldrb	r0, [r4, #1]
    1d00:	1ca7      	adds	r7, r4, #2
    1d02:	b241      	sxtb	r1, r0
    1d04:	2964      	cmp	r1, #100	; 0x64
    1d06:	f88d 0002 	strb.w	r0, [sp, #2]
    1d0a:	d054      	beq.n	1db6 <printf+0x16a>
    1d0c:	dc0c      	bgt.n	1d28 <printf+0xdc>
    1d0e:	2962      	cmp	r1, #98	; 0x62
    1d10:	d015      	beq.n	1d3e <printf+0xf2>
    1d12:	2963      	cmp	r1, #99	; 0x63
    1d14:	d1ea      	bne.n	1cec <printf+0xa0>
		{
			case 'c':
				format_flag = va_arg(ap, int);
    1d16:	9c02      	ldr	r4, [sp, #8]
    1d18:	a91c      	add	r1, sp, #112	; 0x70
    1d1a:	6822      	ldr	r2, [r4, #0]
    1d1c:	1d23      	adds	r3, r4, #4
    1d1e:	9302      	str	r3, [sp, #8]
    1d20:	f801 2d6e 	strb.w	r2, [r1, #-110]!
				UART_Send(UARTx,&format_flag,1,BLOCKING);
    1d24:	4628      	mov	r0, r5
    1d26:	e7e4      	b.n	1cf2 <printf+0xa6>
				return (0);
			}
			UART_Send(UARTx,&format_flag,1,BLOCKING);
		}

		switch(format_flag = *format++)
    1d28:	2975      	cmp	r1, #117	; 0x75
    1d2a:	d02c      	beq.n	1d86 <printf+0x13a>
    1d2c:	2978      	cmp	r1, #120	; 0x78
    1d2e:	d064      	beq.n	1dfa <printf+0x1ae>
    1d30:	2973      	cmp	r1, #115	; 0x73
    1d32:	d1db      	bne.n	1cec <printf+0xa0>
				UART_Send(UARTx,&(hex[(uint16)format_flag & 0x0F]),1,BLOCKING);

				continue;

			case 's':
				ptr = va_arg(ap, schar *);
    1d34:	9902      	ldr	r1, [sp, #8]
    1d36:	1d0a      	adds	r2, r1, #4
    1d38:	9202      	str	r2, [sp, #8]
    1d3a:	680c      	ldr	r4, [r1, #0]
				while(*ptr)
    1d3c:	e017      	b.n	1d6e <printf+0x122>
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1d3e:	9802      	ldr	r0, [sp, #8]
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1d40:	aa03      	add	r2, sp, #12
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1d42:	7804      	ldrb	r4, [r0, #0]
    1d44:	1d01      	adds	r1, r0, #4
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1d46:	b263      	sxtb	r3, r4
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1d48:	9102      	str	r1, [sp, #8]
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1d4a:	f3c3 110b 	ubfx	r1, r3, #4, #12
    1d4e:	1851      	adds	r1, r2, r1
    1d50:	2302      	movs	r3, #2
    1d52:	4628      	mov	r0, r5
    1d54:	2201      	movs	r2, #1
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1d56:	f88d 4002 	strb.w	r4, [sp, #2]
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1d5a:	f7ff ff47 	bl	1bec <UART_Send>
				UART_Send(UARTx,&(hex[(uint16)format_flag & 0x0F]),1,BLOCKING);
    1d5e:	f89d 0002 	ldrb.w	r0, [sp, #2]
    1d62:	ab03      	add	r3, sp, #12
    1d64:	f000 040f 	and.w	r4, r0, #15
    1d68:	1919      	adds	r1, r3, r4
    1d6a:	4628      	mov	r0, r5
    1d6c:	e7c1      	b.n	1cf2 <printf+0xa6>
    1d6e:	4621      	mov	r1, r4

				continue;

			case 's':
				ptr = va_arg(ap, schar *);
				while(*ptr)
    1d70:	f991 0000 	ldrsb.w	r0, [r1]
    1d74:	3401      	adds	r4, #1
    1d76:	2800      	cmp	r0, #0
    1d78:	d0bf      	beq.n	1cfa <printf+0xae>
				{
					UART_Send(UARTx,&(*ptr++),1,BLOCKING);
    1d7a:	4628      	mov	r0, r5
    1d7c:	2201      	movs	r2, #1
    1d7e:	2302      	movs	r3, #2
    1d80:	f7ff ff34 	bl	1bec <UART_Send>
    1d84:	e7f3      	b.n	1d6e <printf+0x122>
				continue;
#endif
			case 'u':
				base = 16;
				div_val = 0x100000;
				u_val = va_arg(ap, uint32_t);
    1d86:	9b02      	ldr	r3, [sp, #8]
    1d88:	2606      	movs	r6, #6
    1d8a:	1d19      	adds	r1, r3, #4
    1d8c:	f8d3 8000 	ldr.w	r8, [r3]
    1d90:	9102      	str	r1, [sp, #8]

				continue;
#endif
			case 'u':
				base = 16;
				div_val = 0x100000;
    1d92:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
				u_val = va_arg(ap, uint32_t);
				do
				{
					UART_Send(UARTx,&(hex[u_val/div_val]),1,BLOCKING);
    1d96:	fbb8 f9f4 	udiv	r9, r8, r4
    1d9a:	aa03      	add	r2, sp, #12
    1d9c:	eb02 0109 	add.w	r1, r2, r9
    1da0:	2302      	movs	r3, #2
    1da2:	2201      	movs	r2, #1
    1da4:	4628      	mov	r0, r5
    1da6:	f7ff ff21 	bl	1bec <UART_Send>
					u_val %= div_val;
    1daa:	fb04 8819 	mls	r8, r4, r9, r8
					div_val /= base;
    1dae:	0924      	lsrs	r4, r4, #4
				}while(div_val);
    1db0:	3e01      	subs	r6, #1
    1db2:	d1f0      	bne.n	1d96 <printf+0x14a>
    1db4:	e7a1      	b.n	1cfa <printf+0xae>
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    1db6:	78e0      	ldrb	r0, [r4, #3]

				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
    1db8:	78a7      	ldrb	r7, [r4, #2]
				format_flag = ( *format++ ) - '1';
    1dba:	3831      	subs	r0, #49	; 0x31
    1dbc:	b2c6      	uxtb	r6, r0
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);
    1dbe:	9802      	ldr	r0, [sp, #8]

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1dc0:	b273      	sxtb	r3, r6
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    1dc2:	f88d 6002 	strb.w	r6, [sp, #2]
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);
    1dc6:	1d06      	adds	r6, r0, #4
    1dc8:	9602      	str	r6, [sp, #8]
    1dca:	6806      	ldr	r6, [r0, #0]

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1dcc:	a91c      	add	r1, sp, #112	; 0x70

				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
    1dce:	f88d 7003 	strb.w	r7, [sp, #3]
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1dd2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    1dd6:	1d27      	adds	r7, r4, #4
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
    1dd8:	2e00      	cmp	r6, #0

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1dda:	f852 4c50 	ldr.w	r4, [r2, #-80]
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
    1dde:	da09      	bge.n	1df4 <printf+0x1a8>
				{
					u_val = - u_val;    /* applied to unsigned type, result still unsigned */
					temp = '-';
    1de0:	232d      	movs	r3, #45	; 0x2d
    1de2:	a91c      	add	r1, sp, #112	; 0x70
    1de4:	f841 3d6c 	str.w	r3, [r1, #-108]!
				    UART_Send(UARTx,&temp,1,BLOCKING);
    1de8:	4628      	mov	r0, r5
    1dea:	2201      	movs	r2, #1
    1dec:	2302      	movs	r3, #2
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
				{
					u_val = - u_val;    /* applied to unsigned type, result still unsigned */
    1dee:	4276      	negs	r6, r6
					temp = '-';
				    UART_Send(UARTx,&temp,1,BLOCKING);
    1df0:	f7ff fefc 	bl	1bec <UART_Send>
				}while(div_val);

				continue;

			case 'd':
				base = 10;
    1df4:	f04f 080a 	mov.w	r8, #10
    1df8:	e020      	b.n	1e3c <printf+0x1f0>
				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
    1dfa:	78e6      	ldrb	r6, [r4, #3]

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
    1dfc:	78a7      	ldrb	r7, [r4, #2]
				format_flag = (*format++) - '1';
    1dfe:	3e31      	subs	r6, #49	; 0x31
    1e00:	b2f3      	uxtb	r3, r6
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);
    1e02:	9802      	ldr	r0, [sp, #8]

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
    1e04:	b259      	sxtb	r1, r3
    1e06:	aa1c      	add	r2, sp, #112	; 0x70
				u_val = va_arg(ap, int);
    1e08:	1d06      	adds	r6, r0, #4

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
    1e0a:	f88d 7003 	strb.w	r7, [sp, #3]
				format_flag = (*format++) - '1';
    1e0e:	1d27      	adds	r7, r4, #4
				div_val = width_hex[format_flag];
    1e10:	eb02 0481 	add.w	r4, r2, r1, lsl #2
				u_val = va_arg(ap, int);
    1e14:	9602      	str	r6, [sp, #8]
				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
    1e16:	f88d 3002 	strb.w	r3, [sp, #2]
				div_val = width_hex[format_flag];
    1e1a:	f854 4c28 	ldr.w	r4, [r4, #-40]
				u_val = va_arg(ap, int);
    1e1e:	6806      	ldr	r6, [r0, #0]
				}

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
    1e20:	f04f 0810 	mov.w	r8, #16
    1e24:	e00a      	b.n	1e3c <printf+0x1f0>
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
    1e26:	42b4      	cmp	r4, r6
    1e28:	d90a      	bls.n	1e40 <printf+0x1f4>
				{
					div_val /= base;
					UART_Send(UARTx,&fill_char,1,BLOCKING);
    1e2a:	4628      	mov	r0, r5
    1e2c:	f10d 0103 	add.w	r1, sp, #3
    1e30:	2201      	movs	r2, #1
    1e32:	2302      	movs	r3, #2
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
				{
					div_val /= base;
    1e34:	fbb4 f4f8 	udiv	r4, r4, r8
					UART_Send(UARTx,&fill_char,1,BLOCKING);
    1e38:	f7ff fed8 	bl	1bec <UART_Send>
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
    1e3c:	2c01      	cmp	r4, #1
    1e3e:	d8f2      	bhi.n	1e26 <printf+0x1da>
					UART_Send(UARTx,&fill_char,1,BLOCKING);
				}

				do
				{
					UART_Send(UARTx,&(hex[u_val/div_val]),1,BLOCKING);
    1e40:	fbb6 f9f4 	udiv	r9, r6, r4
    1e44:	a903      	add	r1, sp, #12
    1e46:	4628      	mov	r0, r5
    1e48:	4449      	add	r1, r9
    1e4a:	2201      	movs	r2, #1
    1e4c:	2302      	movs	r3, #2
    1e4e:	f7ff fecd 	bl	1bec <UART_Send>
					u_val %= div_val;
    1e52:	fb04 6619 	mls	r6, r4, r9, r6
					div_val /= base;
    1e56:	fbb4 f4f8 	udiv	r4, r4, r8
				}while(div_val);
    1e5a:	2c00      	cmp	r4, #0
    1e5c:	d1f0      	bne.n	1e40 <printf+0x1f4>
    1e5e:	e74c      	b.n	1cfa <printf+0xae>
		}/* end of switch statement */
	}
	return(0);
}
    1e60:	b01c      	add	sp, #112	; 0x70
    1e62:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e66:	b003      	add	sp, #12
    1e68:	4770      	bx	lr
    1e6a:	bf00      	nop
    1e6c:	00005af1 	.word	0x00005af1
    1e70:	000186a0 	.word	0x000186a0
    1e74:	00989680 	.word	0x00989680
    1e78:	000f4240 	.word	0x000f4240

00001e7c <UART_RS485SendSlvAddr>:
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    1e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    1e7e:	7b05      	ldrb	r5, [r0, #12]
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    1e80:	ab02      	add	r3, sp, #8
    1e82:	f803 1d01 	strb.w	r1, [r3, #-1]!
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
		tmp &= ~(UART_LCR_PARITY_EVEN);
    1e86:	f005 02ef 	and.w	r2, r5, #239	; 0xef
		UARTx->LCR = tmp;
    1e8a:	7302      	strb	r2, [r0, #12]
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    1e8c:	4619      	mov	r1, r3
    1e8e:	2201      	movs	r2, #1
    1e90:	2302      	movs	r3, #2
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    1e92:	4604      	mov	r4, r0

	if (ParityStick){
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
		tmp &= ~(UART_LCR_PARITY_EVEN);
		UARTx->LCR = tmp;
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    1e94:	f7ff feaa 	bl	1bec <UART_Send>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    1e98:	7d20      	ldrb	r0, [r4, #20]
    1e9a:	f000 0140 	and.w	r1, r0, #64	; 0x40
    1e9e:	b2cb      	uxtb	r3, r1
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d0f9      	beq.n	1e98 <UART_RS485SendSlvAddr+0x1c>
		UARTx->LCR = save;
    1ea4:	7325      	strb	r5, [r4, #12]
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
	UART_RS485Send(UARTx, &SlvAddr, 1, 1);
}
    1ea6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00001ea8 <UART_RS485Send>:
 * @param[in]	ParityStick	Parity Stick value, should be 0 or 1.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485Send(LPC_UART1_TypeDef *UARTx, uint8_t *pDatFrm, \
					uint32_t size, uint8_t ParityStick)
{
    1ea8:	b538      	push	{r3, r4, r5, lr}
    1eaa:	4604      	mov	r4, r0
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
    1eac:	b173      	cbz	r3, 1ecc <UART_RS485Send+0x24>
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    1eae:	7b05      	ldrb	r5, [r0, #12]
		tmp &= ~(UART_LCR_PARITY_EVEN);
    1eb0:	f005 03ef 	and.w	r3, r5, #239	; 0xef
		UARTx->LCR = tmp;
    1eb4:	7303      	strb	r3, [r0, #12]
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    1eb6:	2302      	movs	r3, #2
    1eb8:	f7ff fe98 	bl	1bec <UART_Send>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    1ebc:	7d21      	ldrb	r1, [r4, #20]
    1ebe:	f001 0240 	and.w	r2, r1, #64	; 0x40
    1ec2:	b2d3      	uxtb	r3, r2
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d0f9      	beq.n	1ebc <UART_RS485Send+0x14>
		UARTx->LCR = save;
    1ec8:	7325      	strb	r5, [r4, #12]
    1eca:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    1ecc:	2302      	movs	r3, #2
    1ece:	f7ff fe8d 	bl	1bec <UART_Send>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    1ed2:	7d23      	ldrb	r3, [r4, #20]
    1ed4:	f003 0140 	and.w	r1, r3, #64	; 0x40
    1ed8:	b2ca      	uxtb	r2, r1
    1eda:	2a00      	cmp	r2, #0
    1edc:	d0f9      	beq.n	1ed2 <UART_RS485Send+0x2a>
	}
	return cnt;
}
    1ede:	bd38      	pop	{r3, r4, r5, pc}

00001ee0 <UART_RS485SendData>:
 * @param[in]	size Size of data frame to be sent.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485SendData(LPC_UART1_TypeDef *UARTx, uint8_t *pData, uint32_t size)
{
	return (UART_RS485Send(UARTx, pData, size, 0));
    1ee0:	2300      	movs	r3, #0
    1ee2:	f7ff bfe1 	b.w	1ea8 <UART_RS485Send>

00001ee6 <UART_Receive>:
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ee8:	460e      	mov	r6, r1
	uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);
    1eea:	2100      	movs	r1, #0
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1eec:	4617      	mov	r7, r2
	uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);
    1eee:	460a      	mov	r2, r1
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1ef0:	4605      	mov	r5, r0
	uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);
    1ef2:	f7ff fc16 	bl	1722 <UART_IntConfig>
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
	uint8_t *data = (uint8_t *) rxbuf;
	uint32_t bytes = 0;
    1ef6:	2400      	movs	r4, #0
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);

	/* Loop until receive buffer ring is empty or
		until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
    1ef8:	42bc      	cmp	r4, r7
    1efa:	d012      	beq.n	1f22 <UART_Receive+0x3c>
    1efc:	4b0c      	ldr	r3, [pc, #48]	; (1f30 <UART_Receive+0x4a>)
    1efe:	689a      	ldr	r2, [r3, #8]
    1f00:	68d9      	ldr	r1, [r3, #12]
    1f02:	ea81 0002 	eor.w	r0, r1, r2
    1f06:	f010 0fff 	tst.w	r0, #255	; 0xff
    1f0a:	d00a      	beq.n	1f22 <UART_Receive+0x3c>
	{
		/* Read data from ring buffer into user buffer */
		*data = rb.rx[rb.rx_tail];
    1f0c:	68da      	ldr	r2, [r3, #12]
    1f0e:	1899      	adds	r1, r3, r2
    1f10:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    1f14:	5530      	strb	r0, [r6, r4]
		data++;

		/* Update tail pointer */
		__BUF_INCR(rb.rx_tail);
    1f16:	68da      	ldr	r2, [r3, #12]

		/* Increment data count and decrement buffer size count */
		bytes++;
    1f18:	3401      	adds	r4, #1
		/* Read data from ring buffer into user buffer */
		*data = rb.rx[rb.rx_tail];
		data++;

		/* Update tail pointer */
		__BUF_INCR(rb.rx_tail);
    1f1a:	1c51      	adds	r1, r2, #1
    1f1c:	b2c8      	uxtb	r0, r1
    1f1e:	60d8      	str	r0, [r3, #12]
    1f20:	e7ea      	b.n	1ef8 <UART_Receive+0x12>
		bytes++;
		buflen--;
	}

	/* Re-enable UART interrupts */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    1f22:	4628      	mov	r0, r5
    1f24:	2100      	movs	r1, #0
    1f26:	2201      	movs	r2, #1
    1f28:	f7ff fbfb 	bl	1722 <UART_IntConfig>

    return bytes;
}
    1f2c:	4620      	mov	r0, r4
    1f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f30:	1000007c 	.word	0x1000007c

00001f34 <getche>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 getche(LPC_UART_TypeDef *UARTx)
{
    1f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1f36:	4605      	mov	r5, r0
	uint8_t key[1];
	uint32_t idx, len;
	while(1)
	{
	    if(UARTx == LPC_UART0)
    1f38:	4b1a      	ldr	r3, [pc, #104]	; (1fa4 <getche+0x70>)
    1f3a:	429d      	cmp	r5, r3
    1f3c:	d121      	bne.n	1f82 <getche+0x4e>
	    {
		    len = UART_Receive(UARTx, key, 1, BLOCKING);
    1f3e:	4628      	mov	r0, r5
    1f40:	a901      	add	r1, sp, #4
    1f42:	2201      	movs	r2, #1
    1f44:	2302      	movs	r3, #2
    1f46:	f7ff ffce 	bl	1ee6 <UART_Receive>
		    /* Got some data */
		    idx = 0;
    1f4a:	2400      	movs	r4, #0
	uint32_t idx, len;
	while(1)
	{
	    if(UARTx == LPC_UART0)
	    {
		    len = UART_Receive(UARTx, key, 1, BLOCKING);
    1f4c:	4606      	mov	r6, r0
		    /* Got some data */
		    idx = 0;
		    while (idx < len)
    1f4e:	42b4      	cmp	r4, r6
    1f50:	d0f2      	beq.n	1f38 <getche+0x4>
		    {
		        if ( key[idx] == In_CR )
    1f52:	a901      	add	r1, sp, #4
    1f54:	5c63      	ldrb	r3, [r4, r1]
    1f56:	2b0d      	cmp	r3, #13
    1f58:	d021      	beq.n	1f9e <getche+0x6a>
	            {
			        return(key[idx]);
	            }
	            else if ( key[idx] == In_DELETE || key[idx] == In_BACKSPACE )
    1f5a:	2b7f      	cmp	r3, #127	; 0x7f
    1f5c:	d01f      	beq.n	1f9e <getche+0x6a>
    1f5e:	2b08      	cmp	r3, #8
    1f60:	d01d      	beq.n	1f9e <getche+0x6a>
	            {
	    	        return(key[idx]);
	            }
	            else if ( key[idx] == In_ESC )
    1f62:	2b1b      	cmp	r3, #27
    1f64:	d103      	bne.n	1f6e <getche+0x3a>
	            {
	    	        EscFlag = 1;
    1f66:	4a10      	ldr	r2, [pc, #64]	; (1fa8 <getche+0x74>)
    1f68:	2001      	movs	r0, #1
    1f6a:	8010      	strh	r0, [r2, #0]
    1f6c:	e017      	b.n	1f9e <getche+0x6a>
	    	        return ( In_ESC );
	            }
	            else if ( key[idx] >= ' ' )
    1f6e:	2b1f      	cmp	r3, #31
    1f70:	d815      	bhi.n	1f9e <getche+0x6a>
	            {
	    	        return (key[idx]);
	            }
	            else
	            {
	    	        UART_Send(UARTx,&key[idx],1,BLOCKING);
    1f72:	1909      	adds	r1, r1, r4
    1f74:	480b      	ldr	r0, [pc, #44]	; (1fa4 <getche+0x70>)
    1f76:	2201      	movs	r2, #1
    1f78:	2302      	movs	r3, #2
    1f7a:	f7ff fe37 	bl	1bec <UART_Send>
	            }
		        idx++;
    1f7e:	3401      	adds	r4, #1
    1f80:	e7e5      	b.n	1f4e <getche+0x1a>
		    }
	    }
	    else if(UARTx == LPC_UART2)
    1f82:	480a      	ldr	r0, [pc, #40]	; (1fac <getche+0x78>)
    1f84:	4285      	cmp	r5, r0
    1f86:	d1d7      	bne.n	1f38 <getche+0x4>
	    {
		    len = UART_Receive(UARTx, key, 1, BLOCKING);
    1f88:	4628      	mov	r0, r5
    1f8a:	a901      	add	r1, sp, #4
    1f8c:	2201      	movs	r2, #1
    1f8e:	2302      	movs	r3, #2
    1f90:	f7ff ffa9 	bl	1ee6 <UART_Receive>
		    /* Got some data */
		    idx = 0;
		    while (idx < len)
    1f94:	2800      	cmp	r0, #0
    1f96:	d0cf      	beq.n	1f38 <getche+0x4>
		    {
		    	return(key[idx]);
    1f98:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1f9c:	e000      	b.n	1fa0 <getche+0x6c>
		    idx = 0;
		    while (idx < len)
		    {
		        if ( key[idx] == In_CR )
	            {
			        return(key[idx]);
    1f9e:	4618      	mov	r0, r3
		    	return(key[idx]);
		    }
	    }
	}
    return(0);
}
    1fa0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    1fa2:	bf00      	nop
    1fa4:	4000c000 	.word	0x4000c000
    1fa8:	10000078 	.word	0x10000078
    1fac:	40098000 	.word	0x40098000

00001fb0 <get_line>:
 * @param[out]	s[] Pointer to Received buffer
 * @param[in]   lim Length of Received buffer
 * @return 		return character count
 **********************************************************************/
uchar get_line(LPC_UART_TypeDef *UARTx, schar s[], uchar lim)
{
    1fb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	schar kb;                 /* input character */

	uchar pointer=0;          /* Pointer in buffer */
	uchar count=0;            /* character count */
    1fb4:	2500      	movs	r5, #0
 * @param[out]	s[] Pointer to Received buffer
 * @param[in]   lim Length of Received buffer
 * @return 		return character count
 **********************************************************************/
uchar get_line(LPC_UART_TypeDef *UARTx, schar s[], uchar lim)
{
    1fb6:	4606      	mov	r6, r0
    1fb8:	4688      	mov	r8, r1
    1fba:	4691      	mov	r9, r2
	schar kb;                 /* input character */

	uchar pointer=0;          /* Pointer in buffer */
    1fbc:	462c      	mov	r4, r5
	uchar count=0;            /* character count */
    uint8_t temp;

	while(1)
	{
		kb = getche(UARTx);
    1fbe:	4630      	mov	r0, r6
    1fc0:	f7ff ffb8 	bl	1f34 <getche>
    1fc4:	b2c2      	uxtb	r2, r0

		if (kb == In_ESC)                /* if ESCAPE pressed then exit */
    1fc6:	b253      	sxtb	r3, r2
    1fc8:	2b1b      	cmp	r3, #27
	uchar count=0;            /* character count */
    uint8_t temp;

	while(1)
	{
		kb = getche(UARTx);
    1fca:	f88d 2006 	strb.w	r2, [sp, #6]

		if (kb == In_ESC)                /* if ESCAPE pressed then exit */
    1fce:	d101      	bne.n	1fd4 <get_line+0x24>
		{
			return (kb);
    1fd0:	4615      	mov	r5, r2
    1fd2:	e043      	b.n	205c <get_line+0xac>
		}

		else if (kb == In_CR)            /* CARRIAGE return ? */
    1fd4:	2b0d      	cmp	r3, #13
    1fd6:	d103      	bne.n	1fe0 <get_line+0x30>
		{
			s[pointer] = '\0';             /* put null char on last position */
    1fd8:	2000      	movs	r0, #0
    1fda:	f808 0004 	strb.w	r0, [r8, r4]
    1fde:	e03d      	b.n	205c <get_line+0xac>
			break;                         /* yes, exit from this loop */
		}

		else if(kb == In_DELETE || kb == In_BACKSPACE)
    1fe0:	2b7f      	cmp	r3, #127	; 0x7f
    1fe2:	d001      	beq.n	1fe8 <get_line+0x38>
    1fe4:	2b08      	cmp	r3, #8
    1fe6:	d123      	bne.n	2030 <get_line+0x80>
		{
			if(pointer==0)                 /* any characters entered */
    1fe8:	2c00      	cmp	r4, #0
    1fea:	d0e8      	beq.n	1fbe <get_line+0xe>
			{
				continue;                    /* no, so get another character */
			}

			temp = Out_BACKSPACE;
    1fec:	f04f 0a08 	mov.w	sl, #8
    1ff0:	eb0d 070a 	add.w	r7, sp, sl
    1ff4:	f807 ad01 	strb.w	sl, [r7, #-1]!
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one position */
    1ff8:	4639      	mov	r1, r7
    1ffa:	2201      	movs	r2, #1
    1ffc:	2302      	movs	r3, #2
    1ffe:	4630      	mov	r0, r6
    2000:	f7ff fdf4 	bl	1bec <UART_Send>
			temp = Out_SPACE;
    2004:	2120      	movs	r1, #32
    2006:	f88d 1007 	strb.w	r1, [sp, #7]
			UART_Send(UARTx,&temp,1,BLOCKING);   /* erase char */
    200a:	2201      	movs	r2, #1
    200c:	4639      	mov	r1, r7
    200e:	2302      	movs	r3, #2
    2010:	4630      	mov	r0, r6
    2012:	f7ff fdeb 	bl	1bec <UART_Send>
			temp = Out_BACKSPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one more position */
    2016:	2201      	movs	r2, #1
    2018:	2302      	movs	r3, #2
    201a:	4630      	mov	r0, r6
    201c:	4639      	mov	r1, r7

			temp = Out_BACKSPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one position */
			temp = Out_SPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* erase char */
			temp = Out_BACKSPACE;
    201e:	f88d a007 	strb.w	sl, [sp, #7]
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one more position */
    2022:	f7ff fde3 	bl	1bec <UART_Send>

			pointer--;                     /* decrement pointer */
    2026:	1e62      	subs	r2, r4, #1
			count--;                       /* decrement character count */
    2028:	1e6b      	subs	r3, r5, #1
			temp = Out_SPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* erase char */
			temp = Out_BACKSPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one more position */

			pointer--;                     /* decrement pointer */
    202a:	b2d4      	uxtb	r4, r2
			count--;                       /* decrement character count */
    202c:	b2dd      	uxtb	r5, r3

			continue;
    202e:	e7c6      	b.n	1fbe <get_line+0xe>
		}

		else if(pointer < lim)
    2030:	454c      	cmp	r4, r9
    2032:	d209      	bcs.n	2048 <get_line+0x98>
		{
			s[pointer] = kb;               /* save character and increment pointer */
    2034:	f808 2004 	strb.w	r2, [r8, r4]
			pointer++;
			count++;                       /* increment count */
    2038:	3501      	adds	r5, #1
		}

		else if(pointer < lim)
		{
			s[pointer] = kb;               /* save character and increment pointer */
			pointer++;
    203a:	3401      	adds	r4, #1
    203c:	b2e4      	uxtb	r4, r4
			count++;                       /* increment count */
    203e:	b2ed      	uxtb	r5, r5
			UART_Send(UARTx,&kb,1,BLOCKING);       /* echo character */
    2040:	4630      	mov	r0, r6
    2042:	f10d 0106 	add.w	r1, sp, #6
    2046:	e004      	b.n	2052 <get_line+0xa2>

			continue;                      /* and get some more */
		}
		else
		{
			temp = In_BELL;
    2048:	2007      	movs	r0, #7
    204a:	a902      	add	r1, sp, #8
    204c:	f801 0d01 	strb.w	r0, [r1, #-1]!
			UART_Send(UARTx,&temp,1,BLOCKING);   /* ring the bell */
    2050:	4630      	mov	r0, r6
    2052:	2201      	movs	r2, #1
    2054:	2302      	movs	r3, #2
    2056:	f7ff fdc9 	bl	1bec <UART_Send>
    205a:	e7b0      	b.n	1fbe <get_line+0xe>
		}
	}
	return(count);
}
    205c:	4628      	mov	r0, r5
    205e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

00002062 <reset_cursor>:
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void reset_cursor (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx,"\x1b[H");   /* escape sequence for vt220 ^[H sets cursor to Home */
    2062:	4901      	ldr	r1, [pc, #4]	; (2068 <reset_cursor+0x6>)
    2064:	f7ff bdf2 	b.w	1c4c <printf>
    2068:	00005b02 	.word	0x00005b02

0000206c <clear_screen>:
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void clear_screen (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx,"\x1b[2J");   /* escape sequence for vt220 ESC[2J clears screen */
    206c:	4901      	ldr	r1, [pc, #4]	; (2074 <clear_screen+0x8>)
    206e:	f7ff bded 	b.w	1c4c <printf>
    2072:	bf00      	nop
    2074:	00005b06 	.word	0x00005b06

00002078 <clr_scr_rst_cur>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void clr_scr_rst_cur (LPC_UART_TypeDef *UARTx)
{
    2078:	b510      	push	{r4, lr}
    207a:	4604      	mov	r4, r0
	clear_screen(UARTx);
    207c:	f7ff fff6 	bl	206c <clear_screen>
	reset_cursor(UARTx);
    2080:	4620      	mov	r0, r4
}
    2082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @return 		None
 *********************************************************************/
void clr_scr_rst_cur (LPC_UART_TypeDef *UARTx)
{
	clear_screen(UARTx);
	reset_cursor(UARTx);
    2086:	f7ff bfec 	b.w	2062 <reset_cursor>

0000208a <Erase_Char>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char (LPC_UART_TypeDef *UARTx)
{
    208a:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);
    208c:	4c08      	ldr	r4, [pc, #32]	; (20b0 <Erase_Char+0x26>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char (LPC_UART_TypeDef *UARTx)
{
    208e:	4605      	mov	r5, r0
	printf(UARTx, "%c", Out_BACKSPACE);
    2090:	4621      	mov	r1, r4
    2092:	2208      	movs	r2, #8
    2094:	f7ff fdda 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_SPACE);
    2098:	4621      	mov	r1, r4
    209a:	2220      	movs	r2, #32
    209c:	4628      	mov	r0, r5
    209e:	f7ff fdd5 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);
    20a2:	4628      	mov	r0, r5
    20a4:	4621      	mov	r1, r4
    20a6:	2208      	movs	r2, #8
}
    20a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 *********************************************************************/
void Erase_Char (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx, "%c", Out_BACKSPACE);
	printf(UARTx, "%c", Out_SPACE);
	printf(UARTx, "%c", Out_BACKSPACE);
    20ac:	f7ff bdce 	b.w	1c4c <printf>
    20b0:	00005b0b 	.word	0x00005b0b

000020b4 <Erase_Char_With_UnderScore>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char_With_UnderScore (LPC_UART_TypeDef *UARTx)
{
    20b4:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20b6:	4d08      	ldr	r5, [pc, #32]	; (20d8 <Erase_Char_With_UnderScore+0x24>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char_With_UnderScore (LPC_UART_TypeDef *UARTx)
{
    20b8:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20ba:	2208      	movs	r2, #8
    20bc:	4629      	mov	r1, r5
    20be:	f7ff fdc5 	bl	1c4c <printf>
	printf(UARTx, "_");                   /* and write '_' on the screen */
    20c2:	4620      	mov	r0, r4
    20c4:	4905      	ldr	r1, [pc, #20]	; (20dc <Erase_Char_With_UnderScore+0x28>)
    20c6:	f7ff fdc1 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20ca:	4620      	mov	r0, r4
    20cc:	4629      	mov	r1, r5
    20ce:	2208      	movs	r2, #8
}
    20d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 *********************************************************************/
void Erase_Char_With_UnderScore (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "_");                   /* and write '_' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20d4:	f7ff bdba 	b.w	1c4c <printf>
    20d8:	00005b0b 	.word	0x00005b0b
    20dc:	00005b0e 	.word	0x00005b0e

000020e0 <Erase_BackLash>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_BackLash (LPC_UART_TypeDef *UARTx)
{
    20e0:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20e2:	4d0f      	ldr	r5, [pc, #60]	; (2120 <Erase_BackLash+0x40>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_BackLash (LPC_UART_TypeDef *UARTx)
{
    20e4:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20e6:	2208      	movs	r2, #8
    20e8:	4629      	mov	r1, r5
    20ea:	f7ff fdaf 	bl	1c4c <printf>
	printf(UARTx, "/");                   /* and write '/' on the screen */
    20ee:	4620      	mov	r0, r4
    20f0:	490c      	ldr	r1, [pc, #48]	; (2124 <Erase_BackLash+0x44>)
    20f2:	f7ff fdab 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    20f6:	4629      	mov	r1, r5
    20f8:	2208      	movs	r2, #8
    20fa:	4620      	mov	r0, r4
    20fc:	f7ff fda6 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2100:	2208      	movs	r2, #8
    2102:	4629      	mov	r1, r5
    2104:	4620      	mov	r0, r4
    2106:	f7ff fda1 	bl	1c4c <printf>
	printf(UARTx, "_");                   /* and write '_' on the screen */
    210a:	4620      	mov	r0, r4
    210c:	4906      	ldr	r1, [pc, #24]	; (2128 <Erase_BackLash+0x48>)
    210e:	f7ff fd9d 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2112:	4620      	mov	r0, r4
    2114:	4629      	mov	r1, r5
    2116:	2208      	movs	r2, #8
}
    2118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "/");                   /* and write '/' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "_");                   /* and write '_' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    211c:	f7ff bd96 	b.w	1c4c <printf>
    2120:	00005b0b 	.word	0x00005b0b
    2124:	00005b10 	.word	0x00005b10
    2128:	00005b0e 	.word	0x00005b0e

0000212c <Erase_SemiColon>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_SemiColon (LPC_UART_TypeDef *UARTx)
{
    212c:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    212e:	4d0f      	ldr	r5, [pc, #60]	; (216c <Erase_SemiColon+0x40>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_SemiColon (LPC_UART_TypeDef *UARTx)
{
    2130:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2132:	2208      	movs	r2, #8
    2134:	4629      	mov	r1, r5
    2136:	f7ff fd89 	bl	1c4c <printf>
	printf(UARTx, ":");                   /* and write ':' on the screen */
    213a:	4620      	mov	r0, r4
    213c:	490c      	ldr	r1, [pc, #48]	; (2170 <Erase_SemiColon+0x44>)
    213e:	f7ff fd85 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2142:	4629      	mov	r1, r5
    2144:	2208      	movs	r2, #8
    2146:	4620      	mov	r0, r4
    2148:	f7ff fd80 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    214c:	2208      	movs	r2, #8
    214e:	4629      	mov	r1, r5
    2150:	4620      	mov	r0, r4
    2152:	f7ff fd7b 	bl	1c4c <printf>
	printf(UARTx, "_");                   /* and write '_' on the screen */
    2156:	4620      	mov	r0, r4
    2158:	4906      	ldr	r1, [pc, #24]	; (2174 <Erase_SemiColon+0x48>)
    215a:	f7ff fd77 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    215e:	4620      	mov	r0, r4
    2160:	4629      	mov	r1, r5
    2162:	2208      	movs	r2, #8
}
    2164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, ":");                   /* and write ':' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "_");                   /* and write '_' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2168:	f7ff bd70 	b.w	1c4c <printf>
    216c:	00005b0b 	.word	0x00005b0b
    2170:	00005b12 	.word	0x00005b12
    2174:	00005b0e 	.word	0x00005b0e

00002178 <Erase_And_RingTheBell>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_And_RingTheBell (LPC_UART_TypeDef *UARTx)
{
    2178:	b570      	push	{r4, r5, r6, lr}
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    217a:	4d0f      	ldr	r5, [pc, #60]	; (21b8 <Erase_And_RingTheBell+0x40>)
	printf(UARTx, "_");                   /* erase 1st char on the screen */
    217c:	4e0f      	ldr	r6, [pc, #60]	; (21bc <Erase_And_RingTheBell+0x44>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_And_RingTheBell (LPC_UART_TypeDef *UARTx)
{
    217e:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    2180:	2208      	movs	r2, #8
    2182:	4629      	mov	r1, r5
    2184:	f7ff fd62 	bl	1c4c <printf>
	printf(UARTx, "_");                   /* erase 1st char on the screen */
    2188:	4631      	mov	r1, r6
    218a:	4620      	mov	r0, r4
    218c:	f7ff fd5e 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    2190:	2208      	movs	r2, #8
    2192:	4629      	mov	r1, r5
    2194:	4620      	mov	r0, r4
    2196:	f7ff fd59 	bl	1c4c <printf>
	printf(UARTx, "_");                   /* erase 2nd char on the screen */
    219a:	4631      	mov	r1, r6
    219c:	4620      	mov	r0, r4
    219e:	f7ff fd55 	bl	1c4c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    21a2:	4629      	mov	r1, r5
    21a4:	4620      	mov	r0, r4
    21a6:	2208      	movs	r2, #8
    21a8:	f7ff fd50 	bl	1c4c <printf>
	printf(UARTx, "\7");                  /* ring the bell */
    21ac:	4904      	ldr	r1, [pc, #16]	; (21c0 <Erase_And_RingTheBell+0x48>)
    21ae:	4620      	mov	r0, r4
}
    21b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
	printf(UARTx, "_");                   /* erase 1st char on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
	printf(UARTx, "_");                   /* erase 2nd char on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
	printf(UARTx, "\7");                  /* ring the bell */
    21b4:	f7ff bd4a 	b.w	1c4c <printf>
    21b8:	00005b0b 	.word	0x00005b0b
    21bc:	00005b0e 	.word	0x00005b0e
    21c0:	00005b14 	.word	0x00005b14

000021c4 <WDT_SetTimeOut>:
 * @param[in]	clk_source select Clock source for WDT device
 * @param[in]	timeout value of time-out for WDT (us)
 * @return		None
 *********************************************************************/
static uint8_t WDT_SetTimeOut (uint8_t clk_source, uint32_t timeout)
{
    21c4:	b538      	push	{r3, r4, r5, lr}

	uint32_t pclk_wdt = 0;
	uint32_t tempval = 0;

	switch ((WDT_CLK_OPT) clk_source)
    21c6:	4604      	mov	r4, r0
    21c8:	b110      	cbz	r0, 21d0 <WDT_SetTimeOut+0xc>
    21ca:	2801      	cmp	r0, #1
    21cc:	d12e      	bne.n	222c <WDT_SetTimeOut+0x68>
    21ce:	e008      	b.n	21e2 <WDT_SetTimeOut+0x1e>
    {
    case WDT_CLKSRC_IRC:
    	pclk_wdt = 4000000;
    	// Calculate TC in WDT
    	tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    21d0:	f021 0003 	bic.w	r0, r1, #3
    	// Check if it valid
    	if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    21d4:	28fe      	cmp	r0, #254	; 0xfe
    21d6:	d92b      	bls.n	2230 <WDT_SetTimeOut+0x6c>
    	{
    		LPC_WDT->WDTC = tempval;
    21d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21dc:	6058      	str	r0, [r3, #4]
    		return	SUCCESS;
    21de:	2001      	movs	r0, #1
    21e0:	bd38      	pop	{r3, r4, r5, pc}
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    21e2:	4b14      	ldr	r3, [pc, #80]	; (2234 <WDT_SetTimeOut+0x70>)
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    21e4:	4814      	ldr	r0, [pc, #80]	; (2238 <WDT_SetTimeOut+0x74>)
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    21e6:	681a      	ldr	r2, [r3, #0]
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    21e8:	0889      	lsrs	r1, r1, #2
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    21ea:	0895      	lsrs	r5, r2, #2
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    21ec:	fbb5 f5f0 	udiv	r5, r5, r0
    21f0:	434d      	muls	r5, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    21f2:	2dfe      	cmp	r5, #254	; 0xfe
    21f4:	d902      	bls.n	21fc <WDT_SetTimeOut+0x38>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    21f6:	2000      	movs	r0, #0
    21f8:	4601      	mov	r1, r0
    21fa:	e010      	b.n	221e <WDT_SetTimeOut+0x5a>
			LPC_WDT->WDTC = (uint32_t) tempval;
			return SUCCESS;
		}

		// Get WDT clock with CCLK divider = 2
		pclk_wdt = SystemCoreClock / 2;
    21fc:	0853      	lsrs	r3, r2, #1
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    21fe:	fbb3 f5f0 	udiv	r5, r3, r0
    2202:	434d      	muls	r5, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    2204:	2dfe      	cmp	r5, #254	; 0xfe
    2206:	d902      	bls.n	220e <WDT_SetTimeOut+0x4a>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_2);
    2208:	2000      	movs	r0, #0
    220a:	2102      	movs	r1, #2
    220c:	e007      	b.n	221e <WDT_SetTimeOut+0x5a>
		}

		// Get WDT clock with CCLK divider = 1
		pclk_wdt = SystemCoreClock;
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    220e:	fbb2 f2f0 	udiv	r2, r2, r0
    2212:	fb02 f501 	mul.w	r5, r2, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
    2216:	2000      	movs	r0, #0
		// Get WDT clock with CCLK divider = 1
		pclk_wdt = SystemCoreClock;
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    2218:	2dfe      	cmp	r5, #254	; 0xfe
    221a:	d906      	bls.n	222a <WDT_SetTimeOut+0x66>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
    221c:	4621      	mov	r1, r4
    221e:	f7fd ff55 	bl	cc <CLKPWR_SetPCLKDiv>
			LPC_WDT->WDTC = (uint32_t) tempval;
    2222:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2226:	604d      	str	r5, [r1, #4]
    2228:	e002      	b.n	2230 <WDT_SetTimeOut+0x6c>
    222a:	bd38      	pop	{r3, r4, r5, pc}
// Error parameter
		default:
			break;
}

	return ERROR;
    222c:	2000      	movs	r0, #0
    222e:	bd38      	pop	{r3, r4, r5, pc}
    2230:	4620      	mov	r0, r4
}
    2232:	bd38      	pop	{r3, r4, r5, pc}
    2234:	2007c008 	.word	0x2007c008
    2238:	000f4240 	.word	0x000f4240

0000223c <WDT_Init>:
* 				- WDT_MODE_INT_ONLY: Use WDT to generate interrupt only
* 				- WDT_MODE_RESET: Use WDT to generate interrupt and reset MCU
* @return 		None
 **********************************************************************/
void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
{
    223c:	b538      	push	{r3, r4, r5, lr}
    223e:	4605      	mov	r5, r0
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    2240:	2000      	movs	r0, #0
* 				- WDT_MODE_INT_ONLY: Use WDT to generate interrupt only
* 				- WDT_MODE_RESET: Use WDT to generate interrupt and reset MCU
* @return 		None
 **********************************************************************/
void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
{
    2242:	460c      	mov	r4, r1
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    2244:	4601      	mov	r1, r0
    2246:	f7fd ff41 	bl	cc <CLKPWR_SetPCLKDiv>

	//Set clock source
	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
    224a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    224e:	691a      	ldr	r2, [r3, #16]
	LPC_WDT->WDCLKSEL |= ClkSrc;
	//Set WDT mode
	if (WDTMode == WDT_MODE_RESET){
    2250:	2c01      	cmp	r4, #1
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);

	//Set clock source
	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
    2252:	f022 0003 	bic.w	r0, r2, #3
    2256:	6118      	str	r0, [r3, #16]
	LPC_WDT->WDCLKSEL |= ClkSrc;
    2258:	6919      	ldr	r1, [r3, #16]
    225a:	ea45 0501 	orr.w	r5, r5, r1
    225e:	611d      	str	r5, [r3, #16]
	//Set WDT mode
	if (WDTMode == WDT_MODE_RESET){
    2260:	d103      	bne.n	226a <WDT_Init+0x2e>
		LPC_WDT->WDMOD |= WDT_WDMOD(WDTMode);
    2262:	781a      	ldrb	r2, [r3, #0]
    2264:	f042 0002 	orr.w	r0, r2, #2
    2268:	7018      	strb	r0, [r3, #0]
    226a:	bd38      	pop	{r3, r4, r5, pc}

0000226c <WDT_ReadTimeOutFlag>:
 * @param[in]	None
 * @return		Time out flag status of WDT
 *********************************************************************/
FlagStatus WDT_ReadTimeOutFlag (void)
{
	return ((FlagStatus)((LPC_WDT->WDMOD & WDT_WDMOD_WDTOF) >>2));
    226c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2270:	7818      	ldrb	r0, [r3, #0]
}
    2272:	f3c0 0080 	ubfx	r0, r0, #2, #1
    2276:	4770      	bx	lr

00002278 <WDT_ClrTimeOutFlag>:
 * @param[in]	None
 * @return		None
 *********************************************************************/
void WDT_ClrTimeOutFlag (void)
{
	LPC_WDT->WDMOD &=~WDT_WDMOD_WDTOF;
    2278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    227c:	781a      	ldrb	r2, [r3, #0]
    227e:	f002 00fb 	and.w	r0, r2, #251	; 0xfb
    2282:	7018      	strb	r0, [r3, #0]
    2284:	4770      	bx	lr

00002286 <WDT_Feed>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2286:	b672      	cpsid	i
 *********************************************************************/
void WDT_Feed (void)
{
	// Disable irq interrupt
	__disable_irq();
	LPC_WDT->WDFEED = 0xAA;
    2288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    228c:	22aa      	movs	r2, #170	; 0xaa
	LPC_WDT->WDFEED = 0x55;
    228e:	2055      	movs	r0, #85	; 0x55
 *********************************************************************/
void WDT_Feed (void)
{
	// Disable irq interrupt
	__disable_irq();
	LPC_WDT->WDFEED = 0xAA;
    2290:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    2292:	7218      	strb	r0, [r3, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2294:	b662      	cpsie	i
    2296:	4770      	bx	lr

00002298 <WDT_UpdateTimeOut>:
 * @brief 		Update WDT timeout value and feed
 * @param[in]	TimeOut	TimeOut value to be updated
 * @return		None
 *********************************************************************/
void WDT_UpdateTimeOut ( uint32_t TimeOut)
{
    2298:	b508      	push	{r3, lr}
	uint32_t ClkSrc;
	ClkSrc = LPC_WDT->WDCLKSEL;
    229a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 * @brief 		Update WDT timeout value and feed
 * @param[in]	TimeOut	TimeOut value to be updated
 * @return		None
 *********************************************************************/
void WDT_UpdateTimeOut ( uint32_t TimeOut)
{
    229e:	4601      	mov	r1, r0
	uint32_t ClkSrc;
	ClkSrc = LPC_WDT->WDCLKSEL;
    22a0:	6918      	ldr	r0, [r3, #16]
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
    22a2:	f000 0003 	and.w	r0, r0, #3
    22a6:	f7ff ff8d 	bl	21c4 <WDT_SetTimeOut>
	WDT_Feed();
}
    22aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	uint32_t ClkSrc;
	ClkSrc = LPC_WDT->WDCLKSEL;
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
	WDT_Feed();
    22ae:	f7ff bfea 	b.w	2286 <WDT_Feed>

000022b2 <WDT_Start>:
* @brief 		Start WDT activity with given timeout value
* @param[in]	TimeOut WDT reset after timeout if it is not feed
* @return 		None
 **********************************************************************/
void WDT_Start(uint32_t TimeOut)
{
    22b2:	b510      	push	{r4, lr}
	uint32_t ClkSrc;

	ClkSrc = LPC_WDT->WDCLKSEL;
    22b4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
* @brief 		Start WDT activity with given timeout value
* @param[in]	TimeOut WDT reset after timeout if it is not feed
* @return 		None
 **********************************************************************/
void WDT_Start(uint32_t TimeOut)
{
    22b8:	4601      	mov	r1, r0
	uint32_t ClkSrc;

	ClkSrc = LPC_WDT->WDCLKSEL;
    22ba:	6920      	ldr	r0, [r4, #16]
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
    22bc:	f000 0003 	and.w	r0, r0, #3
    22c0:	f7ff ff80 	bl	21c4 <WDT_SetTimeOut>
	//enable watchdog
	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
    22c4:	7823      	ldrb	r3, [r4, #0]
    22c6:	f043 0101 	orr.w	r1, r3, #1
    22ca:	7021      	strb	r1, [r4, #0]
	WDT_Feed();
}
    22cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ClkSrc = LPC_WDT->WDCLKSEL;
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
	//enable watchdog
	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
	WDT_Feed();
    22d0:	f7ff bfd9 	b.w	2286 <WDT_Feed>

000022d4 <WDT_GetCurrentCount>:
 * @param[in]	None
 * @return		current value of WDT
 *********************************************************************/
uint32_t WDT_GetCurrentCount(void)
{
	return LPC_WDT->WDTV;
    22d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    22d8:	68d8      	ldr	r0, [r3, #12]
}
    22da:	4770      	bx	lr

000022dc <SetCalibrationMatrix>:
    	GLCD_Clear(White);

}

int SetCalibrationMatrix(ts_eventCal *displayPtr, ts_eventCal *screenPtr, MATRIX_Type *matrixPtr)
{
    22dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int  retValue = OK;

    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
    22e0:	f8b1 9000 	ldrh.w	r9, [r1]
    22e4:	890d      	ldrh	r5, [r1, #8]
    22e6:	88cb      	ldrh	r3, [r1, #6]
    22e8:	f8b1 800a 	ldrh.w	r8, [r1, #10]
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));
    22ec:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    22f0:	890e      	ldrh	r6, [r1, #8]
    22f2:	894c      	ldrh	r4, [r1, #10]
    22f4:	884f      	ldrh	r7, [r1, #2]
    22f6:	fa1f fc8c 	uxth.w	ip, ip
    22fa:	b2b6      	uxth	r6, r6
    22fc:	b2a4      	uxth	r4, r4
    22fe:	b2bf      	uxth	r7, r7
    2300:	ebc6 060c 	rsb	r6, r6, ip
    2304:	1be4      	subs	r4, r4, r7
    2306:	4374      	muls	r4, r6

int SetCalibrationMatrix(ts_eventCal *displayPtr, ts_eventCal *screenPtr, MATRIX_Type *matrixPtr)
{
	int  retValue = OK;

    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
    2308:	fa1f f989 	uxth.w	r9, r9
    230c:	b2ad      	uxth	r5, r5
    230e:	b29b      	uxth	r3, r3
    2310:	fa1f f888 	uxth.w	r8, r8
    2314:	ebc5 0509 	rsb	r5, r5, r9
    2318:	ebc8 0303 	rsb	r3, r8, r3
    231c:	fb03 4305 	mla	r3, r3, r5, r4
    	GLCD_Clear(White);

}

int SetCalibrationMatrix(ts_eventCal *displayPtr, ts_eventCal *screenPtr, MATRIX_Type *matrixPtr)
{
    2320:	b087      	sub	sp, #28
	int  retValue = OK;

    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
    2322:	6193      	str	r3, [r2, #24]
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

    if(matrixPtr->Divider == 0)
    2324:	2b00      	cmp	r3, #0
    2326:	f000 810a 	beq.w	253e <SetCalibrationMatrix+0x262>
    {
        retValue = NOT_OK;
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
    232a:	f8b0 a000 	ldrh.w	sl, [r0]
    232e:	8905      	ldrh	r5, [r0, #8]
    2330:	88ce      	ldrh	r6, [r1, #6]
    2332:	f8b1 900a 	ldrh.w	r9, [r1, #10]
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));
    2336:	f8b0 c004 	ldrh.w	ip, [r0, #4]
    233a:	8904      	ldrh	r4, [r0, #8]
    233c:	894f      	ldrh	r7, [r1, #10]
    {
        retValue = NOT_OK;
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
    233e:	b2b3      	uxth	r3, r6
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));
    2340:	b2a6      	uxth	r6, r4
    2342:	b2bc      	uxth	r4, r7
    2344:	884f      	ldrh	r7, [r1, #2]
    {
        retValue = NOT_OK;
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
    2346:	fa1f fb8a 	uxth.w	fp, sl
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));
    234a:	b2bf      	uxth	r7, r7
    234c:	fa1f fa8c 	uxth.w	sl, ip
    2350:	ebc6 060a 	rsb	r6, r6, sl
    2354:	1be4      	subs	r4, r4, r7
    2356:	4374      	muls	r4, r6
    {
        retValue = NOT_OK;
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
    2358:	fa1f f889 	uxth.w	r8, r9
    235c:	b2ad      	uxth	r5, r5
    235e:	ebc5 050b 	rsb	r5, r5, fp
    2362:	ebc8 0303 	rsb	r3, r8, r3
    2366:	fb03 4705 	mla	r7, r3, r5, r4
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
    236a:	f8b1 b000 	ldrh.w	fp, [r1]
    {
        retValue = NOT_OK;
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
    236e:	6017      	str	r7, [r2, #0]
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
    2370:	890d      	ldrh	r5, [r1, #8]
    2372:	8883      	ldrh	r3, [r0, #4]
    2374:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));
    2378:	f8b0 c000 	ldrh.w	ip, [r0]
    237c:	8906      	ldrh	r6, [r0, #8]
    237e:	890c      	ldrh	r4, [r1, #8]
    2380:	888f      	ldrh	r7, [r1, #4]
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
    2382:	fa1f f98b 	uxth.w	r9, fp
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));
    2386:	b2bf      	uxth	r7, r7
    2388:	fa1f fb8c 	uxth.w	fp, ip
    238c:	b2b6      	uxth	r6, r6
    238e:	b2a4      	uxth	r4, r4
    2390:	ebc6 060b 	rsb	r6, r6, fp
    2394:	1be4      	subs	r4, r4, r7
    2396:	4374      	muls	r4, r6
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
    2398:	fa1f fa88 	uxth.w	sl, r8
    239c:	b2ad      	uxth	r5, r5
    239e:	b29b      	uxth	r3, r3
    23a0:	ebc5 0509 	rsb	r5, r5, r9
    23a4:	ebca 0303 	rsb	r3, sl, r3
    23a8:	fb03 4705 	mla	r7, r3, r5, r4
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
    23ac:	f8b1 9008 	ldrh.w	r9, [r1, #8]
    23b0:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    23b4:	888d      	ldrh	r5, [r1, #4]
    23b6:	8903      	ldrh	r3, [r0, #8]
    23b8:	884e      	ldrh	r6, [r1, #2]
    23ba:	fa1f fb88 	uxth.w	fp, r8
    23be:	b2b4      	uxth	r4, r6
    23c0:	fa1f f885 	uxth.w	r8, r5
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
    23c4:	6057      	str	r7, [r2, #4]
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
    23c6:	880f      	ldrh	r7, [r1, #0]
    23c8:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    23cc:	890d      	ldrh	r5, [r1, #8]
    23ce:	8806      	ldrh	r6, [r0, #0]
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
    23d0:	fa1f fa89 	uxth.w	sl, r9
    23d4:	9401      	str	r4, [sp, #4]
    23d6:	fa1f f983 	uxth.w	r9, r3
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
    23da:	b2b4      	uxth	r4, r6
    23dc:	b2ab      	uxth	r3, r5
    23de:	88cd      	ldrh	r5, [r1, #6]
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;
    23e0:	888e      	ldrh	r6, [r1, #4]
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
    23e2:	fb0b fa0a 	mul.w	sl, fp, sl
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
    23e6:	fa1f fc8c 	uxth.w	ip, ip
    23ea:	9302      	str	r3, [sp, #8]
    23ec:	9403      	str	r4, [sp, #12]
    23ee:	b2ab      	uxth	r3, r5
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;
    23f0:	b2b4      	uxth	r4, r6

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
    23f2:	b2bf      	uxth	r7, r7
    23f4:	9304      	str	r3, [sp, #16]
    23f6:	fb0c f707 	mul.w	r7, ip, r7
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;
    23fa:	9405      	str	r4, [sp, #20]
    23fc:	8805      	ldrh	r5, [r0, #0]
    23fe:	880e      	ldrh	r6, [r1, #0]
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
    2400:	fb09 ab18 	mls	fp, r9, r8, sl
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;
    2404:	b2b4      	uxth	r4, r6

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
    2406:	f8dd 800c 	ldr.w	r8, [sp, #12]
    240a:	9e02      	ldr	r6, [sp, #8]
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;
    240c:	b2ab      	uxth	r3, r5

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
    240e:	fb08 7716 	mls	r7, r8, r6, r7
    2412:	9e04      	ldr	r6, [sp, #16]
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
    2414:	f8dd 9004 	ldr.w	r9, [sp, #4]
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
    2418:	4377      	muls	r7, r6
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;
    241a:	9300      	str	r3, [sp, #0]
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
    241c:	fb09 7c0b 	mla	ip, r9, fp, r7
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;
    2420:	9e05      	ldr	r6, [sp, #20]
    2422:	9f00      	ldr	r7, [sp, #0]
    2424:	8885      	ldrh	r5, [r0, #4]
    2426:	437e      	muls	r6, r7
    2428:	b2ad      	uxth	r5, r5
    242a:	fb05 6414 	mls	r4, r5, r4, r6
    242e:	894b      	ldrh	r3, [r1, #10]
    2430:	b29b      	uxth	r3, r3

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
    2432:	fb03 c504 	mla	r5, r3, r4, ip
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
    2436:	8843      	ldrh	r3, [r0, #2]
    2438:	8946      	ldrh	r6, [r0, #10]
    243a:	88cf      	ldrh	r7, [r1, #6]
    243c:	fa1f fa83 	uxth.w	sl, r3
    2440:	f8b1 b00a 	ldrh.w	fp, [r1, #10]
    2444:	b2bb      	uxth	r3, r7
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));
    2446:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    244a:	8944      	ldrh	r4, [r0, #10]
    244c:	894f      	ldrh	r7, [r1, #10]
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
    244e:	6095      	str	r5, [r2, #8]
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
    2450:	b2b5      	uxth	r5, r6
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));
    2452:	b2a6      	uxth	r6, r4
    2454:	b2bc      	uxth	r4, r7
    2456:	884f      	ldrh	r7, [r1, #2]
    2458:	fa1f fc89 	uxth.w	ip, r9
    245c:	b2bf      	uxth	r7, r7
    245e:	ebc6 060c 	rsb	r6, r6, ip
    2462:	1be4      	subs	r4, r4, r7
    2464:	4374      	muls	r4, r6

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
    2466:	fa1f f88b 	uxth.w	r8, fp
    246a:	ebc5 050a 	rsb	r5, r5, sl
    246e:	ebc8 0303 	rsb	r3, r8, r3
    2472:	fb03 4705 	mla	r7, r3, r5, r4
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
    2476:	f8b1 a000 	ldrh.w	sl, [r1]

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
    247a:	60d7      	str	r7, [r2, #12]
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
    247c:	890d      	ldrh	r5, [r1, #8]
    247e:	88c3      	ldrh	r3, [r0, #6]
    2480:	f8b0 800a 	ldrh.w	r8, [r0, #10]
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));
    2484:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    2488:	8946      	ldrh	r6, [r0, #10]
    248a:	890c      	ldrh	r4, [r1, #8]
    248c:	888f      	ldrh	r7, [r1, #4]
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
    248e:	fa1f fb8a 	uxth.w	fp, sl
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));
    2492:	b2bf      	uxth	r7, r7
    2494:	fa1f fa8c 	uxth.w	sl, ip
    2498:	b2b6      	uxth	r6, r6
    249a:	b2a4      	uxth	r4, r4
    249c:	ebc6 060a 	rsb	r6, r6, sl
    24a0:	1be4      	subs	r4, r4, r7
    24a2:	4374      	muls	r4, r6
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
    24a4:	fa1f f988 	uxth.w	r9, r8
    24a8:	b2ad      	uxth	r5, r5
    24aa:	b29b      	uxth	r3, r3
    24ac:	ebc5 050b 	rsb	r5, r5, fp
    24b0:	ebc9 0303 	rsb	r3, r9, r3
    24b4:	fb03 4705 	mla	r7, r3, r5, r4
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    24b8:	f8b1 b008 	ldrh.w	fp, [r1, #8]
    24bc:	88c5      	ldrh	r5, [r0, #6]
    24be:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    24c2:	f8b0 900a 	ldrh.w	r9, [r0, #10]
    24c6:	884b      	ldrh	r3, [r1, #2]
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y;

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
    24c8:	6117      	str	r7, [r2, #16]
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    24ca:	b29e      	uxth	r6, r3
    24cc:	9601      	str	r6, [sp, #4]
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
    24ce:	880c      	ldrh	r4, [r1, #0]
    24d0:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    24d4:	fa1f fa8b 	uxth.w	sl, fp
    24d8:	fa1f fb85 	uxth.w	fp, r5
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
    24dc:	890d      	ldrh	r5, [r1, #8]
    24de:	b2a7      	uxth	r7, r4
    24e0:	fa1f fc8c 	uxth.w	ip, ip
    24e4:	b2ab      	uxth	r3, r5
    24e6:	fb0c f707 	mul.w	r7, ip, r7
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    24ea:	fb0b fa0a 	mul.w	sl, fp, sl
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
    24ee:	8846      	ldrh	r6, [r0, #2]
    24f0:	9302      	str	r3, [sp, #8]
    24f2:	88cc      	ldrh	r4, [r1, #6]
    24f4:	f8dd c008 	ldr.w	ip, [sp, #8]
    24f8:	b2b6      	uxth	r6, r6
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    24fa:	fa1f f888 	uxth.w	r8, r8
    24fe:	fa1f f989 	uxth.w	r9, r9
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
    2502:	b2a5      	uxth	r5, r4
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    2504:	fb09 a818 	mls	r8, r9, r8, sl
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
    2508:	fb06 7a1c 	mls	sl, r6, ip, r7
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    250c:	888b      	ldrh	r3, [r1, #4]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
    250e:	9503      	str	r5, [sp, #12]
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    2510:	8845      	ldrh	r5, [r0, #2]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
    2512:	9e03      	ldr	r6, [sp, #12]
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    2514:	b29c      	uxth	r4, r3
    2516:	b2ad      	uxth	r5, r5

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
    2518:	fb06 fc0a 	mul.w	ip, r6, sl
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    251c:	436c      	muls	r4, r5
    251e:	880b      	ldrh	r3, [r1, #0]
    2520:	88c0      	ldrh	r0, [r0, #6]
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    2522:	9f01      	ldr	r7, [sp, #4]
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    2524:	b280      	uxth	r0, r0
    2526:	b29b      	uxth	r3, r3
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    2528:	fb07 ca08 	mla	sl, r7, r8, ip
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    252c:	fb00 4313 	mls	r3, r0, r3, r4
    2530:	8949      	ldrh	r1, [r1, #10]
    2532:	b289      	uxth	r1, r1

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
    2534:	fb01 a003 	mla	r0, r1, r3, sl
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y));

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x));

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    2538:	6150      	str	r0, [r2, #20]

}

int SetCalibrationMatrix(ts_eventCal *displayPtr, ts_eventCal *screenPtr, MATRIX_Type *matrixPtr)
{
	int  retValue = OK;
    253a:	2000      	movs	r0, #0
    253c:	e001      	b.n	2542 <SetCalibrationMatrix+0x266>
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y));

    if(matrixPtr->Divider == 0)
    {
        retValue = NOT_OK;
    253e:	f04f 30ff 	mov.w	r0, #4294967295
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    }

    return(retValue);
} /* end of setCalibrationMatrix() */
    2542:	b007      	add	sp, #28
    2544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002548 <TSC2004_Cal_Init>:

/** @addtogroup GLCD_CAL_Public_Functions
 * @{
 */
void TSC2004_Cal_Init(MATRIX_Type *matrixPtr)
{
    2548:	b570      	push	{r4, r5, r6, lr}
	int n;
	COLORCFG_Type ClrCfg;
	MATRIX_Type	matrix[4],avgmatrix;
	ts_event RTouch;
	ts_eventCal screenSample[5];
	ts_eventCal displaySample[5] =	{
    254a:	4b7e      	ldr	r3, [pc, #504]	; (2744 <TSC2004_Cal_Init+0x1fc>)

/** @addtogroup GLCD_CAL_Public_Functions
 * @{
 */
void TSC2004_Cal_Init(MATRIX_Type *matrixPtr)
{
    254c:	b0c0      	sub	sp, #256	; 0x100
    254e:	4604      	mov	r4, r0
	int n;
	COLORCFG_Type ClrCfg;
	MATRIX_Type	matrix[4],avgmatrix;
	ts_event RTouch;
	ts_eventCal screenSample[5];
	ts_eventCal displaySample[5] =	{
    2550:	aa1f      	add	r2, sp, #124	; 0x7c
    2552:	f103 0610 	add.w	r6, r3, #16
    2556:	6818      	ldr	r0, [r3, #0]
    2558:	6859      	ldr	r1, [r3, #4]
    255a:	4615      	mov	r5, r2
    255c:	c503      	stmia	r5!, {r0, r1}
    255e:	3308      	adds	r3, #8
    2560:	42b3      	cmp	r3, r6
    2562:	462a      	mov	r2, r5
    2564:	d1f7      	bne.n	2556 <TSC2004_Cal_Init+0xe>
    2566:	6818      	ldr	r0, [r3, #0]
    2568:	6028      	str	r0, [r5, #0]
									{ 300, 220 },
									{  20, 220 },
									{ 160, 120 },
								};

 ts_eventCal displaytriangle1[3] = {displaySample[0],displaySample[4],displaySample[1]};
    256a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 ts_eventCal displaytriangle2[3] = {displaySample[1],displaySample[4],displaySample[2]};
    256c:	9d21      	ldr	r5, [sp, #132]	; 0x84
									{ 300, 220 },
									{  20, 220 },
									{ 160, 120 },
								};

 ts_eventCal displaytriangle1[3] = {displaySample[0],displaySample[4],displaySample[1]};
    256e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
    2570:	9920      	ldr	r1, [sp, #128]	; 0x80
 ts_eventCal displaytriangle2[3] = {displaySample[1],displaySample[4],displaySample[2]};
 ts_eventCal displaytriangle3[3] = {displaySample[2],displaySample[4],displaySample[3]};
    2572:	9a22      	ldr	r2, [sp, #136]	; 0x88
 ts_eventCal displaytriangle4[3] = {displaySample[3],displaySample[4],displaySample[0]};



 GLCD_Clear(White);
    2574:	f64f 70ff 	movw	r0, #65535	; 0xffff
									{  20, 220 },
									{ 160, 120 },
								};

 ts_eventCal displaytriangle1[3] = {displaySample[0],displaySample[4],displaySample[1]};
 ts_eventCal displaytriangle2[3] = {displaySample[1],displaySample[4],displaySample[2]};
    2578:	9507      	str	r5, [sp, #28]
 ts_eventCal displaytriangle3[3] = {displaySample[2],displaySample[4],displaySample[3]};
    257a:	9508      	str	r5, [sp, #32]
									{ 300, 220 },
									{  20, 220 },
									{ 160, 120 },
								};

 ts_eventCal displaytriangle1[3] = {displaySample[0],displaySample[4],displaySample[1]};
    257c:	9602      	str	r6, [sp, #8]
    257e:	9303      	str	r3, [sp, #12]
    2580:	9104      	str	r1, [sp, #16]
 ts_eventCal displaytriangle2[3] = {displaySample[1],displaySample[4],displaySample[2]};
    2582:	9105      	str	r1, [sp, #20]
    2584:	9306      	str	r3, [sp, #24]
 ts_eventCal displaytriangle3[3] = {displaySample[2],displaySample[4],displaySample[3]};
    2586:	9309      	str	r3, [sp, #36]	; 0x24
    2588:	920a      	str	r2, [sp, #40]	; 0x28
 ts_eventCal displaytriangle4[3] = {displaySample[3],displaySample[4],displaySample[0]};
    258a:	920b      	str	r2, [sp, #44]	; 0x2c
    258c:	930c      	str	r3, [sp, #48]	; 0x30
    258e:	960d      	str	r6, [sp, #52]	; 0x34



 GLCD_Clear(White);
    2590:	f001 ff64 	bl	445c <GLCD_Clear>


 for(n=0; n<5; n++)
    2594:	2500      	movs	r5, #0
 	{
 		switch (n) {
    2596:	1e6e      	subs	r6, r5, #1
    2598:	2100      	movs	r1, #0
    259a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
    259e:	2e03      	cmp	r6, #3
    25a0:	d803      	bhi.n	25aa <TSC2004_Cal_Init+0x62>
    25a2:	e8df f006 	tbb	[pc, r6]
    25a6:	1b0e      	.short	0x1b0e
    25a8:	3327      	.short	0x3327
 			case 0:
 				ClrCfg.bcolor = Red;
 				ClrCfg.bndry = FALSE;
    25aa:	f88d 1001 	strb.w	r1, [sp, #1]
 				ClrCfg.fill = TRUE;
 				ClrCfg.fill_color = Red;
 				GLCD_Circle(20,20,3,&ClrCfg);
    25ae:	2014      	movs	r0, #20
 	{
 		switch (n) {
 			case 0:
 				ClrCfg.bcolor = Red;
 				ClrCfg.bndry = FALSE;
 				ClrCfg.fill = TRUE;
    25b0:	2101      	movs	r1, #1
    25b2:	f88d 1000 	strb.w	r1, [sp]

 for(n=0; n<5; n++)
 	{
 		switch (n) {
 			case 0:
 				ClrCfg.bcolor = Red;
    25b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 				ClrCfg.bndry = FALSE;
 				ClrCfg.fill = TRUE;
 				ClrCfg.fill_color = Red;
    25ba:	f8ad 3004 	strh.w	r3, [sp, #4]
 				GLCD_Circle(20,20,3,&ClrCfg);
    25be:	4601      	mov	r1, r0
    25c0:	e02f      	b.n	2622 <TSC2004_Cal_Init+0xda>
 				break;

 			case 1:
 				ClrCfg.bcolor = Red;
 				ClrCfg.bndry = FALSE;
 				ClrCfg.fill = TRUE;
    25c2:	2601      	movs	r6, #1
 				GLCD_Circle(20,20,3,&ClrCfg);
 				break;

 			case 1:
 				ClrCfg.bcolor = Red;
 				ClrCfg.bndry = FALSE;
    25c4:	f88d 1001 	strb.w	r1, [sp, #1]
 				ClrCfg.fill_color = Red;
 				GLCD_Circle(20,20,3,&ClrCfg);
 				break;

 			case 1:
 				ClrCfg.bcolor = Red;
    25c8:	f8ad 3002 	strh.w	r3, [sp, #2]
 				ClrCfg.bndry = FALSE;
 				ClrCfg.fill = TRUE;
    25cc:	f88d 6000 	strb.w	r6, [sp]
 				ClrCfg.fill_color = Red;
    25d0:	f8ad 3004 	strh.w	r3, [sp, #4]
 				GLCD_Circle(300,20,3,&ClrCfg);
    25d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
    25d8:	2114      	movs	r1, #20
    25da:	e022      	b.n	2622 <TSC2004_Cal_Init+0xda>
 				break;

 			case 2:
 				ClrCfg.bcolor = Red;
 				ClrCfg.bndry = FALSE;
 				ClrCfg.fill = TRUE;
    25dc:	2201      	movs	r2, #1
 				ClrCfg.fill_color = Red;
 				GLCD_Circle(300,20,3,&ClrCfg);
 				break;

 			case 2:
 				ClrCfg.bcolor = Red;
    25de:	f8ad 3002 	strh.w	r3, [sp, #2]
 				ClrCfg.bndry = FALSE;
    25e2:	f88d 1001 	strb.w	r1, [sp, #1]
 				ClrCfg.fill = TRUE;
    25e6:	f88d 2000 	strb.w	r2, [sp]
 				ClrCfg.fill_color = Red;
    25ea:	f8ad 3004 	strh.w	r3, [sp, #4]
 				GLCD_Circle(300,220,3,&ClrCfg);
    25ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
    25f2:	e009      	b.n	2608 <TSC2004_Cal_Init+0xc0>
 				break;

 			case 3:
 				ClrCfg.bcolor = Red;
 				ClrCfg.bndry = FALSE;
 				ClrCfg.fill = TRUE;
    25f4:	2001      	movs	r0, #1
    25f6:	f88d 0000 	strb.w	r0, [sp]
 				ClrCfg.fill_color = Red;
 				GLCD_Circle(300,220,3,&ClrCfg);
 				break;

 			case 3:
 				ClrCfg.bcolor = Red;
    25fa:	f8ad 3002 	strh.w	r3, [sp, #2]
 				ClrCfg.bndry = FALSE;
    25fe:	f88d 1001 	strb.w	r1, [sp, #1]
 				ClrCfg.fill = TRUE;
 				ClrCfg.fill_color = Red;
    2602:	f8ad 3004 	strh.w	r3, [sp, #4]
 				GLCD_Circle(20,220,3,&ClrCfg);
    2606:	2014      	movs	r0, #20
    2608:	21dc      	movs	r1, #220	; 0xdc
    260a:	e00a      	b.n	2622 <TSC2004_Cal_Init+0xda>
 				break;

 			case 4:
 				ClrCfg.bcolor = Red;
 				ClrCfg.bndry = FALSE;
 				ClrCfg.fill = TRUE;
    260c:	2001      	movs	r0, #1
 				GLCD_Circle(20,220,3,&ClrCfg);
 				break;

 			case 4:
 				ClrCfg.bcolor = Red;
 				ClrCfg.bndry = FALSE;
    260e:	f88d 1001 	strb.w	r1, [sp, #1]
 				ClrCfg.fill = TRUE;
    2612:	f88d 0000 	strb.w	r0, [sp]
 				ClrCfg.fill_color = Red;
 				GLCD_Circle(20,220,3,&ClrCfg);
 				break;

 			case 4:
 				ClrCfg.bcolor = Red;
    2616:	f8ad 3002 	strh.w	r3, [sp, #2]
 				ClrCfg.bndry = FALSE;
 				ClrCfg.fill = TRUE;
 				ClrCfg.fill_color = Red;
    261a:	f8ad 3004 	strh.w	r3, [sp, #4]
 				GLCD_Circle(160,120,3,&ClrCfg);
    261e:	20a0      	movs	r0, #160	; 0xa0
    2620:	2178      	movs	r1, #120	; 0x78
    2622:	2203      	movs	r2, #3
    2624:	466b      	mov	r3, sp
    2626:	f001 fdd8 	bl	41da <GLCD_Circle>

 			default:
 				break;
 		}
 		//printf(LPC_UART0, "Touch point\n\r");
 		while(TReady == FALSE);
    262a:	4e47      	ldr	r6, [pc, #284]	; (2748 <TSC2004_Cal_Init+0x200>)
    262c:	7833      	ldrb	r3, [r6, #0]
    262e:	2b00      	cmp	r3, #0
    2630:	d0fb      	beq.n	262a <TSC2004_Cal_Init+0xe2>
// 		printf(LPC_UART0,"\x1b[8;1After While\n\r");
 		delay_ms(2000);
    2632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    2636:	f7fe fe6b 	bl	1310 <delay_ms>

 		screenSample[n].x = gTouch.x;
    263a:	4a44      	ldr	r2, [pc, #272]	; (274c <TSC2004_Cal_Init+0x204>)
    263c:	a840      	add	r0, sp, #256	; 0x100
    263e:	8811      	ldrh	r1, [r2, #0]
    2640:	eb00 0385 	add.w	r3, r0, r5, lsl #2
    2644:	b289      	uxth	r1, r1
    2646:	f823 1c98 	strh.w	r1, [r3, #-152]
 		screenSample[n].y = gTouch.y;
    264a:	8852      	ldrh	r2, [r2, #2]


 GLCD_Clear(White);


 for(n=0; n<5; n++)
    264c:	3501      	adds	r5, #1

 		screenSample[n].x = gTouch.x;
 		screenSample[n].y = gTouch.y;
 //		printf(LPC_UART0,"\x1b[3;1H gTouchx = %d08",gTouch.x);
 //		printf(LPC_UART0,"\x1b[4;1H gTouchy = %d08",gTouch.y);
 		TReady = FALSE;
    264e:	2000      	movs	r0, #0
 		while(TReady == FALSE);
// 		printf(LPC_UART0,"\x1b[8;1After While\n\r");
 		delay_ms(2000);

 		screenSample[n].x = gTouch.x;
 		screenSample[n].y = gTouch.y;
    2650:	b291      	uxth	r1, r2


 GLCD_Clear(White);


 for(n=0; n<5; n++)
    2652:	2d05      	cmp	r5, #5
 		while(TReady == FALSE);
// 		printf(LPC_UART0,"\x1b[8;1After While\n\r");
 		delay_ms(2000);

 		screenSample[n].x = gTouch.x;
 		screenSample[n].y = gTouch.y;
    2654:	f823 1c96 	strh.w	r1, [r3, #-150]
 //		printf(LPC_UART0,"\x1b[3;1H gTouchx = %d08",gTouch.x);
 //		printf(LPC_UART0,"\x1b[4;1H gTouchy = %d08",gTouch.y);
 		TReady = FALSE;
    2658:	7030      	strb	r0, [r6, #0]


 GLCD_Clear(White);


 for(n=0; n<5; n++)
    265a:	d19c      	bne.n	2596 <TSC2004_Cal_Init+0x4e>
 		TReady = FALSE;
 	}

 	CalTouch=FALSE;
// 	printf(LPC_UART0,"line reached");
 	 ts_eventCal screentriangle1[3] = {screenSample[0],screenSample[4],screenSample[1]};
    265c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 //		printf(LPC_UART0,"\x1b[3;1H gTouchx = %d08",gTouch.x);
 //		printf(LPC_UART0,"\x1b[4;1H gTouchy = %d08",gTouch.y);
 		TReady = FALSE;
 	}

 	CalTouch=FALSE;
    265e:	4b3c      	ldr	r3, [pc, #240]	; (2750 <TSC2004_Cal_Init+0x208>)
// 	printf(LPC_UART0,"line reached");
 	 ts_eventCal screentriangle1[3] = {screenSample[0],screenSample[4],screenSample[1]};
    2660:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 //		printf(LPC_UART0,"\x1b[3;1H gTouchx = %d08",gTouch.x);
 //		printf(LPC_UART0,"\x1b[4;1H gTouchy = %d08",gTouch.y);
 		TReady = FALSE;
 	}

 	CalTouch=FALSE;
    2662:	7018      	strb	r0, [r3, #0]
// 	printf(LPC_UART0,"line reached");
 	 ts_eventCal screentriangle1[3] = {screenSample[0],screenSample[4],screenSample[1]};
    2664:	9110      	str	r1, [sp, #64]	; 0x40
    2666:	981e      	ldr	r0, [sp, #120]	; 0x78
     ts_eventCal screentriangle2[3] = {screenSample[1],screenSample[4],screenSample[2]};
    2668:	9111      	str	r1, [sp, #68]	; 0x44
     ts_eventCal screentriangle3[3] = {screenSample[2],screenSample[4],screenSample[3]};
    266a:	991d      	ldr	r1, [sp, #116]	; 0x74
 	}

 	CalTouch=FALSE;
// 	printf(LPC_UART0,"line reached");
 	 ts_eventCal screentriangle1[3] = {screenSample[0],screenSample[4],screenSample[1]};
     ts_eventCal screentriangle2[3] = {screenSample[1],screenSample[4],screenSample[2]};
    266c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 		TReady = FALSE;
 	}

 	CalTouch=FALSE;
// 	printf(LPC_UART0,"line reached");
 	 ts_eventCal screentriangle1[3] = {screenSample[0],screenSample[4],screenSample[1]};
    266e:	920e      	str	r2, [sp, #56]	; 0x38
    2670:	900f      	str	r0, [sp, #60]	; 0x3c
     ts_eventCal screentriangle2[3] = {screenSample[1],screenSample[4],screenSample[2]};
    2672:	9012      	str	r0, [sp, #72]	; 0x48
     ts_eventCal screentriangle3[3] = {screenSample[2],screenSample[4],screenSample[3]};
    2674:	9015      	str	r0, [sp, #84]	; 0x54
    2676:	9116      	str	r1, [sp, #88]	; 0x58
     ts_eventCal screentriangle4[3] = {screenSample[3],screenSample[4],screenSample[0]};
    2678:	9117      	str	r1, [sp, #92]	; 0x5c
    267a:	9018      	str	r0, [sp, #96]	; 0x60
    267c:	9219      	str	r2, [sp, #100]	; 0x64


     SetCalibrationMatrix(displaytriangle1, screentriangle1, &matrix[0]);
    267e:	a90e      	add	r1, sp, #56	; 0x38
    2680:	aa24      	add	r2, sp, #144	; 0x90
    2682:	a802      	add	r0, sp, #8
 	}

 	CalTouch=FALSE;
// 	printf(LPC_UART0,"line reached");
 	 ts_eventCal screentriangle1[3] = {screenSample[0],screenSample[4],screenSample[1]};
     ts_eventCal screentriangle2[3] = {screenSample[1],screenSample[4],screenSample[2]};
    2684:	9313      	str	r3, [sp, #76]	; 0x4c
     ts_eventCal screentriangle3[3] = {screenSample[2],screenSample[4],screenSample[3]};
    2686:	9314      	str	r3, [sp, #80]	; 0x50
     ts_eventCal screentriangle4[3] = {screenSample[3],screenSample[4],screenSample[0]};


     SetCalibrationMatrix(displaytriangle1, screentriangle1, &matrix[0]);
    2688:	f7ff fe28 	bl	22dc <SetCalibrationMatrix>
     SetCalibrationMatrix(displaytriangle2, screentriangle2, &matrix[1]);
    268c:	a911      	add	r1, sp, #68	; 0x44
    268e:	aa2b      	add	r2, sp, #172	; 0xac
    2690:	a805      	add	r0, sp, #20
    2692:	f7ff fe23 	bl	22dc <SetCalibrationMatrix>
     SetCalibrationMatrix(displaytriangle3, screentriangle3, &matrix[2]);
    2696:	a914      	add	r1, sp, #80	; 0x50
    2698:	aa32      	add	r2, sp, #200	; 0xc8
    269a:	a808      	add	r0, sp, #32
    269c:	f7ff fe1e 	bl	22dc <SetCalibrationMatrix>
     SetCalibrationMatrix(displaytriangle4, screentriangle4, &matrix[3]);
    26a0:	a917      	add	r1, sp, #92	; 0x5c
    26a2:	aa39      	add	r2, sp, #228	; 0xe4
    26a4:	a80b      	add	r0, sp, #44	; 0x2c
    26a6:	f7ff fe19 	bl	22dc <SetCalibrationMatrix>


    	matrixPtr->An = ( matrix[0].An + matrix[1].An + matrix[2].An + matrix[3].An ) / 4;
    26aa:	982b      	ldr	r0, [sp, #172]	; 0xac
    26ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
    26ae:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    26b0:	1811      	adds	r1, r2, r0
    26b2:	9a39      	ldr	r2, [sp, #228]	; 0xe4
    26b4:	18c8      	adds	r0, r1, r3
    26b6:	1881      	adds	r1, r0, r2
    26b8:	2304      	movs	r3, #4
    26ba:	fb91 f0f3 	sdiv	r0, r1, r3
    	matrixPtr->Bn = ( matrix[0].Bn + matrix[1].Bn + matrix[2].Bn + matrix[3].Bn ) / 4;
    26be:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    26c0:	9925      	ldr	r1, [sp, #148]	; 0x94
     SetCalibrationMatrix(displaytriangle2, screentriangle2, &matrix[1]);
     SetCalibrationMatrix(displaytriangle3, screentriangle3, &matrix[2]);
     SetCalibrationMatrix(displaytriangle4, screentriangle4, &matrix[3]);


    	matrixPtr->An = ( matrix[0].An + matrix[1].An + matrix[2].An + matrix[3].An ) / 4;
    26c2:	6020      	str	r0, [r4, #0]
    	matrixPtr->Bn = ( matrix[0].Bn + matrix[1].Bn + matrix[2].Bn + matrix[3].Bn ) / 4;
    26c4:	1888      	adds	r0, r1, r2
    26c6:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    26c8:	1881      	adds	r1, r0, r2
    26ca:	983a      	ldr	r0, [sp, #232]	; 0xe8
    26cc:	180a      	adds	r2, r1, r0
    26ce:	fb92 f1f3 	sdiv	r1, r2, r3
    	matrixPtr->Cn = ( matrix[0].Cn + matrix[1].Cn + matrix[2].Cn + matrix[3].Cn ) / 4;
    26d2:	982d      	ldr	r0, [sp, #180]	; 0xb4
    26d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
     SetCalibrationMatrix(displaytriangle3, screentriangle3, &matrix[2]);
     SetCalibrationMatrix(displaytriangle4, screentriangle4, &matrix[3]);


    	matrixPtr->An = ( matrix[0].An + matrix[1].An + matrix[2].An + matrix[3].An ) / 4;
    	matrixPtr->Bn = ( matrix[0].Bn + matrix[1].Bn + matrix[2].Bn + matrix[3].Bn ) / 4;
    26d6:	6061      	str	r1, [r4, #4]
    	matrixPtr->Cn = ( matrix[0].Cn + matrix[1].Cn + matrix[2].Cn + matrix[3].Cn ) / 4;
    26d8:	1811      	adds	r1, r2, r0
    26da:	9834      	ldr	r0, [sp, #208]	; 0xd0
    26dc:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    26de:	1809      	adds	r1, r1, r0
    26e0:	1888      	adds	r0, r1, r2
    26e2:	fb90 f1f3 	sdiv	r1, r0, r3
    	matrixPtr->Dn = ( matrix[0].Dn + matrix[1].Dn + matrix[2].Dn + matrix[3].Dn ) / 4;
    26e6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    26e8:	9827      	ldr	r0, [sp, #156]	; 0x9c
     SetCalibrationMatrix(displaytriangle4, screentriangle4, &matrix[3]);


    	matrixPtr->An = ( matrix[0].An + matrix[1].An + matrix[2].An + matrix[3].An ) / 4;
    	matrixPtr->Bn = ( matrix[0].Bn + matrix[1].Bn + matrix[2].Bn + matrix[3].Bn ) / 4;
    	matrixPtr->Cn = ( matrix[0].Cn + matrix[1].Cn + matrix[2].Cn + matrix[3].Cn ) / 4;
    26ea:	60a1      	str	r1, [r4, #8]
    	matrixPtr->Dn = ( matrix[0].Dn + matrix[1].Dn + matrix[2].Dn + matrix[3].Dn ) / 4;
    26ec:	1881      	adds	r1, r0, r2
    26ee:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    26f0:	1888      	adds	r0, r1, r2
    26f2:	993c      	ldr	r1, [sp, #240]	; 0xf0
    26f4:	1842      	adds	r2, r0, r1
    26f6:	fb92 f0f3 	sdiv	r0, r2, r3
    	matrixPtr->En = ( matrix[0].En + matrix[1].En + matrix[2].En + matrix[3].En ) / 4;
    26fa:	9928      	ldr	r1, [sp, #160]	; 0xa0
    26fc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc


    	matrixPtr->An = ( matrix[0].An + matrix[1].An + matrix[2].An + matrix[3].An ) / 4;
    	matrixPtr->Bn = ( matrix[0].Bn + matrix[1].Bn + matrix[2].Bn + matrix[3].Bn ) / 4;
    	matrixPtr->Cn = ( matrix[0].Cn + matrix[1].Cn + matrix[2].Cn + matrix[3].Cn ) / 4;
    	matrixPtr->Dn = ( matrix[0].Dn + matrix[1].Dn + matrix[2].Dn + matrix[3].Dn ) / 4;
    26fe:	60e0      	str	r0, [r4, #12]
    	matrixPtr->En = ( matrix[0].En + matrix[1].En + matrix[2].En + matrix[3].En ) / 4;
    2700:	1888      	adds	r0, r1, r2
    2702:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    2704:	1881      	adds	r1, r0, r2
    2706:	983d      	ldr	r0, [sp, #244]	; 0xf4
    2708:	180a      	adds	r2, r1, r0
    270a:	fb92 f1f3 	sdiv	r1, r2, r3
    	matrixPtr->Fn = ( matrix[0].Fn + matrix[1].Fn + matrix[2].Fn + matrix[3].Fn ) / 4;
    270e:	9830      	ldr	r0, [sp, #192]	; 0xc0
    2710:	9a29      	ldr	r2, [sp, #164]	; 0xa4

    	matrixPtr->An = ( matrix[0].An + matrix[1].An + matrix[2].An + matrix[3].An ) / 4;
    	matrixPtr->Bn = ( matrix[0].Bn + matrix[1].Bn + matrix[2].Bn + matrix[3].Bn ) / 4;
    	matrixPtr->Cn = ( matrix[0].Cn + matrix[1].Cn + matrix[2].Cn + matrix[3].Cn ) / 4;
    	matrixPtr->Dn = ( matrix[0].Dn + matrix[1].Dn + matrix[2].Dn + matrix[3].Dn ) / 4;
    	matrixPtr->En = ( matrix[0].En + matrix[1].En + matrix[2].En + matrix[3].En ) / 4;
    2712:	6121      	str	r1, [r4, #16]
    	matrixPtr->Fn = ( matrix[0].Fn + matrix[1].Fn + matrix[2].Fn + matrix[3].Fn ) / 4;
    2714:	1811      	adds	r1, r2, r0
    2716:	9837      	ldr	r0, [sp, #220]	; 0xdc
    2718:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    271a:	1809      	adds	r1, r1, r0
    271c:	1888      	adds	r0, r1, r2
    271e:	fb90 f1f3 	sdiv	r1, r0, r3
    	matrixPtr->Divider = ( matrix[0].Divider + matrix[1].Divider + matrix[2].Divider + matrix[3].Divider ) / 4;
    2722:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    2724:	982a      	ldr	r0, [sp, #168]	; 0xa8
    	matrixPtr->An = ( matrix[0].An + matrix[1].An + matrix[2].An + matrix[3].An ) / 4;
    	matrixPtr->Bn = ( matrix[0].Bn + matrix[1].Bn + matrix[2].Bn + matrix[3].Bn ) / 4;
    	matrixPtr->Cn = ( matrix[0].Cn + matrix[1].Cn + matrix[2].Cn + matrix[3].Cn ) / 4;
    	matrixPtr->Dn = ( matrix[0].Dn + matrix[1].Dn + matrix[2].Dn + matrix[3].Dn ) / 4;
    	matrixPtr->En = ( matrix[0].En + matrix[1].En + matrix[2].En + matrix[3].En ) / 4;
    	matrixPtr->Fn = ( matrix[0].Fn + matrix[1].Fn + matrix[2].Fn + matrix[3].Fn ) / 4;
    2726:	6161      	str	r1, [r4, #20]
    	matrixPtr->Divider = ( matrix[0].Divider + matrix[1].Divider + matrix[2].Divider + matrix[3].Divider ) / 4;
    2728:	1881      	adds	r1, r0, r2
    272a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    272c:	1888      	adds	r0, r1, r2
    272e:	993f      	ldr	r1, [sp, #252]	; 0xfc
    2730:	1842      	adds	r2, r0, r1
    2732:	fb92 f3f3 	sdiv	r3, r2, r3


    	GLCD_Clear(White);
    2736:	f64f 70ff 	movw	r0, #65535	; 0xffff
    	matrixPtr->Bn = ( matrix[0].Bn + matrix[1].Bn + matrix[2].Bn + matrix[3].Bn ) / 4;
    	matrixPtr->Cn = ( matrix[0].Cn + matrix[1].Cn + matrix[2].Cn + matrix[3].Cn ) / 4;
    	matrixPtr->Dn = ( matrix[0].Dn + matrix[1].Dn + matrix[2].Dn + matrix[3].Dn ) / 4;
    	matrixPtr->En = ( matrix[0].En + matrix[1].En + matrix[2].En + matrix[3].En ) / 4;
    	matrixPtr->Fn = ( matrix[0].Fn + matrix[1].Fn + matrix[2].Fn + matrix[3].Fn ) / 4;
    	matrixPtr->Divider = ( matrix[0].Divider + matrix[1].Divider + matrix[2].Divider + matrix[3].Divider ) / 4;
    273a:	61a3      	str	r3, [r4, #24]


    	GLCD_Clear(White);
    273c:	f001 fe8e 	bl	445c <GLCD_Clear>

}
    2740:	b040      	add	sp, #256	; 0x100
    2742:	bd70      	pop	{r4, r5, r6, pc}
    2744:	00005b16 	.word	0x00005b16
    2748:	10000034 	.word	0x10000034
    274c:	1000037c 	.word	0x1000037c
    2750:	2007c004 	.word	0x2007c004

00002754 <TSC2004_Cal_Values>:
} /* end of setCalibrationMatrix() */



int TSC2004_Cal_Values(ts_eventCal *displayPtr, MATRIX_Type *matrixPtr)
{
    2754:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2756:	460c      	mov	r4, r1
    2758:	4605      	mov	r5, r0
    int  retValue = OK;
	ts_event RTouchn;

    TSC2004_Read_Values(&RTouchn);
    275a:	4668      	mov	r0, sp
    275c:	f000 f8a7 	bl	28ae <TSC2004_Read_Values>

    if(matrixPtr->Divider != 0)
    2760:	69a3      	ldr	r3, [r4, #24]
    2762:	b1db      	cbz	r3, 279c <TSC2004_Cal_Values+0x48>
            /*  math. Make sure you add all terms together before      */
            /*  dividing, so that the remainder is not rounded off     */
            /*  prematurely.                                           */

        displayPtr->x = ( (matrixPtr->An * RTouchn.x) +
                          (matrixPtr->Bn * RTouchn.y) +
    2764:	6860      	ldr	r0, [r4, #4]
    2766:	f8bd 1002 	ldrh.w	r1, [sp, #2]
            /* Operation order is important since we are doing integer */
            /*  math. Make sure you add all terms together before      */
            /*  dividing, so that the remainder is not rounded off     */
            /*  prematurely.                                           */

        displayPtr->x = ( (matrixPtr->An * RTouchn.x) +
    276a:	6826      	ldr	r6, [r4, #0]
                          (matrixPtr->Bn * RTouchn.y) +
    276c:	4348      	muls	r0, r1
            /* Operation order is important since we are doing integer */
            /*  math. Make sure you add all terms together before      */
            /*  dividing, so that the remainder is not rounded off     */
            /*  prematurely.                                           */

        displayPtr->x = ( (matrixPtr->An * RTouchn.x) +
    276e:	f8bd 2000 	ldrh.w	r2, [sp]
    2772:	fb06 0602 	mla	r6, r6, r2, r0
                          (matrixPtr->Bn * RTouchn.y) +
    2776:	68a0      	ldr	r0, [r4, #8]
    2778:	1836      	adds	r6, r6, r0
                           matrixPtr->Cn
                        ) / matrixPtr->Divider;
    277a:	fb96 f0f3 	sdiv	r0, r6, r3
            /* Operation order is important since we are doing integer */
            /*  math. Make sure you add all terms together before      */
            /*  dividing, so that the remainder is not rounded off     */
            /*  prematurely.                                           */

        displayPtr->x = ( (matrixPtr->An * RTouchn.x) +
    277e:	b286      	uxth	r6, r0
    2780:	802e      	strh	r6, [r5, #0]
                          (matrixPtr->Bn * RTouchn.y) +
                           matrixPtr->Cn
                        ) / matrixPtr->Divider;

        displayPtr->y = ( (matrixPtr->Dn * RTouchn.x) +
                          (matrixPtr->En * RTouchn.y) +
    2782:	6926      	ldr	r6, [r4, #16]
        displayPtr->x = ( (matrixPtr->An * RTouchn.x) +
                          (matrixPtr->Bn * RTouchn.y) +
                           matrixPtr->Cn
                        ) / matrixPtr->Divider;

        displayPtr->y = ( (matrixPtr->Dn * RTouchn.x) +
    2784:	68e0      	ldr	r0, [r4, #12]
                          (matrixPtr->En * RTouchn.y) +
    2786:	4371      	muls	r1, r6
        displayPtr->x = ( (matrixPtr->An * RTouchn.x) +
                          (matrixPtr->Bn * RTouchn.y) +
                           matrixPtr->Cn
                        ) / matrixPtr->Divider;

        displayPtr->y = ( (matrixPtr->Dn * RTouchn.x) +
    2788:	fb00 1202 	mla	r2, r0, r2, r1
                          (matrixPtr->En * RTouchn.y) +
    278c:	6964      	ldr	r4, [r4, #20]
    278e:	1911      	adds	r1, r2, r4
                           matrixPtr->Fn
                        ) / matrixPtr->Divider;
    2790:	fb91 f3f3 	sdiv	r3, r1, r3
        displayPtr->x = ( (matrixPtr->An * RTouchn.x) +
                          (matrixPtr->Bn * RTouchn.y) +
                           matrixPtr->Cn
                        ) / matrixPtr->Divider;

        displayPtr->y = ( (matrixPtr->Dn * RTouchn.x) +
    2794:	b298      	uxth	r0, r3
    2796:	8068      	strh	r0, [r5, #2]



int TSC2004_Cal_Values(ts_eventCal *displayPtr, MATRIX_Type *matrixPtr)
{
    int  retValue = OK;
    2798:	2000      	movs	r0, #0
    279a:	e001      	b.n	27a0 <TSC2004_Cal_Values+0x4c>
                           matrixPtr->Fn
                        ) / matrixPtr->Divider;
    }
    else
    {
        retValue = NOT_OK;
    279c:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return(retValue);
} /* end of getDisplayPoint() */
    27a0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    27a2:	bf00      	nop

000027a4 <I2C_TSC2004_Write_Byte>:
 * @brief	    Writes Command Byte
 * @param[in]	Command  Write Command Byte
 * @return 		status
 **********************************************************************/
char I2C_TSC2004_Write_Byte (uint8_t Command)
{
    27a4:	b500      	push	{lr}
    27a6:	b08f      	sub	sp, #60	; 0x3c
    27a8:	f88d 0007 	strb.w	r0, [sp, #7]
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	txsetup.sl_addr7bit = TSC2004_ID;
    27ac:	2348      	movs	r3, #72	; 0x48
	txsetup.tx_data = &Command;
    27ae:	f10d 0007 	add.w	r0, sp, #7
	txsetup.tx_length = 1;
    27b2:	2101      	movs	r1, #1
	txsetup.rx_data = NULL;
    27b4:	2200      	movs	r2, #0
char I2C_TSC2004_Write_Byte (uint8_t Command)
{
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	txsetup.sl_addr7bit = TSC2004_ID;
    27b6:	9303      	str	r3, [sp, #12]
	txsetup.tx_data = &Command;
    27b8:	9004      	str	r0, [sp, #16]
	txsetup.tx_length = 1;
    27ba:	9105      	str	r1, [sp, #20]
	txsetup.rx_data = NULL;
	txsetup.rx_length = 0;
	txsetup.retransmissions_max = 3;
    27bc:	2303      	movs	r3, #3

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    27be:	a903      	add	r1, sp, #12
    27c0:	4805      	ldr	r0, [pc, #20]	; (27d8 <I2C_TSC2004_Write_Byte+0x34>)
	I2C_M_SETUP_Type txsetup;

	txsetup.sl_addr7bit = TSC2004_ID;
	txsetup.tx_data = &Command;
	txsetup.tx_length = 1;
	txsetup.rx_data = NULL;
    27c2:	9207      	str	r2, [sp, #28]
	txsetup.rx_length = 0;
    27c4:	9208      	str	r2, [sp, #32]
	txsetup.retransmissions_max = 3;
    27c6:	930a      	str	r3, [sp, #40]	; 0x28

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    27c8:	f7fe f8e6 	bl	998 <I2C_MasterTransferData>
	}
	else
	{
		return (-1);
	}
}
    27cc:	2801      	cmp	r0, #1
    27ce:	bf14      	ite	ne
    27d0:	20ff      	movne	r0, #255	; 0xff
    27d2:	2000      	moveq	r0, #0
    27d4:	b00f      	add	sp, #60	; 0x3c
    27d6:	bd00      	pop	{pc}
    27d8:	4001c000 	.word	0x4001c000

000027dc <I2C_TSC2004_Write_Word>:
 * @param[in]	Command      Configuration Commands
 * @param[in]   word_data    Configuration values
 * @return 		status
 **********************************************************************/
char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
{
    27dc:	b500      	push	{lr}
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
    27de:	4b0c      	ldr	r3, [pc, #48]	; (2810 <I2C_TSC2004_Write_Word+0x34>)
 * @param[in]	Command      Configuration Commands
 * @param[in]   word_data    Configuration values
 * @return 		status
 **********************************************************************/
char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
{
    27e0:	b08d      	sub	sp, #52	; 0x34
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
    27e2:	0a0a      	lsrs	r2, r1, #8
char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
{
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
    27e4:	7018      	strb	r0, [r3, #0]
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
	I2C_Tx_Buf[2] = (uint8_t)(word_data);
    27e6:	7099      	strb	r1, [r3, #2]

	txsetup.sl_addr7bit = TSC2004_ID;
    27e8:	2048      	movs	r0, #72	; 0x48
	txsetup.tx_data = I2C_Tx_Buf;
	txsetup.tx_length = 3;
    27ea:	2103      	movs	r1, #3
{
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
    27ec:	705a      	strb	r2, [r3, #1]
	I2C_Tx_Buf[2] = (uint8_t)(word_data);

	txsetup.sl_addr7bit = TSC2004_ID;
    27ee:	9001      	str	r0, [sp, #4]
	txsetup.tx_data = I2C_Tx_Buf;
	txsetup.tx_length = 3;
	txsetup.rx_data = NULL;
    27f0:	2200      	movs	r2, #0
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
	I2C_Tx_Buf[2] = (uint8_t)(word_data);

	txsetup.sl_addr7bit = TSC2004_ID;
	txsetup.tx_data = I2C_Tx_Buf;
	txsetup.tx_length = 3;
    27f2:	9103      	str	r1, [sp, #12]
	txsetup.rx_data = NULL;
	txsetup.rx_length = 0;
	txsetup.retransmissions_max = 3;
    27f4:	9108      	str	r1, [sp, #32]

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    27f6:	4807      	ldr	r0, [pc, #28]	; (2814 <I2C_TSC2004_Write_Word+0x38>)
    27f8:	a901      	add	r1, sp, #4
	I2C_Tx_Buf[0] = Command;
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
	I2C_Tx_Buf[2] = (uint8_t)(word_data);

	txsetup.sl_addr7bit = TSC2004_ID;
	txsetup.tx_data = I2C_Tx_Buf;
    27fa:	9302      	str	r3, [sp, #8]
	txsetup.tx_length = 3;
	txsetup.rx_data = NULL;
    27fc:	9205      	str	r2, [sp, #20]
	txsetup.rx_length = 0;
    27fe:	9206      	str	r2, [sp, #24]
	txsetup.retransmissions_max = 3;

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    2800:	f7fe f8ca 	bl	998 <I2C_MasterTransferData>
	}
	else
	{
		return (-1);
	}
}
    2804:	2801      	cmp	r0, #1
    2806:	bf14      	ite	ne
    2808:	20ff      	movne	r0, #255	; 0xff
    280a:	2000      	moveq	r0, #0
    280c:	b00d      	add	sp, #52	; 0x34
    280e:	bd00      	pop	{pc}
    2810:	1000028c 	.word	0x1000028c
    2814:	4001c000 	.word	0x4001c000

00002818 <TSC2004_Init>:
 * @brief	    Touch Screen Initialize
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Init (void)
{
    2818:	b508      	push	{r3, lr}
	uint16_t cmd,data;

	 /* Reset the TSC, configure for 10 bit */
	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_10BIT, SWRST_TRUE);
	I2C_TSC2004_Write_Byte(cmd);
    281a:	2082      	movs	r0, #130	; 0x82
    281c:	f7ff ffc2 	bl	27a4 <I2C_TSC2004_Write_Byte>

	/* Enable interrupt for PENIRQ and DAV */
	cmd = TSC2004_CMD0(CFR2_REG, PND0_FALSE, WRITE_REG);
	data = PINTS1 | PINTS0 | MEDIAN_VAL_FLTR_SIZE_1 |AVRG_VAL_FLTR_SIZE_7_8;
	I2C_TSC2004_Write_Word(cmd, data);
    2820:	2070      	movs	r0, #112	; 0x70
    2822:	f44f 4148 	mov.w	r1, #51200	; 0xc800
    2826:	f7ff ffd9 	bl	27dc <I2C_TSC2004_Write_Word>

	/* Configure the TSC in TSMode 1 */
	cmd = TSC2004_CMD0(CFR0_REG, PND0_FALSE, WRITE_REG);
	data = PEN_STS_CTRL_MODE | ADC_CLK_2MHZ;
	I2C_TSC2004_Write_Word(cmd, data);
    282a:	2060      	movs	r0, #96	; 0x60
    282c:	f44f 4108 	mov.w	r1, #34816	; 0x8800
    2830:	f7ff ffd4 	bl	27dc <I2C_TSC2004_Write_Word>

	/* Enable x, y, z1 and z2 conversion functions */
	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_10BIT, SWRST_FALSE);
	I2C_TSC2004_Write_Byte(cmd);
    2834:	2080      	movs	r0, #128	; 0x80
}
    2836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	data = PEN_STS_CTRL_MODE | ADC_CLK_2MHZ;
	I2C_TSC2004_Write_Word(cmd, data);

	/* Enable x, y, z1 and z2 conversion functions */
	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_10BIT, SWRST_FALSE);
	I2C_TSC2004_Write_Byte(cmd);
    283a:	f7ff bfb3 	b.w	27a4 <I2C_TSC2004_Write_Byte>

0000283e <I2C_TSC2004_Read_Word>:
 * @brief	    Reads Word data
 * @param[in]	Command    Read Register
 * @return 		Word value
 **********************************************************************/
uint16_t I2C_TSC2004_Read_Word (uint8_t Command)
{
    283e:	b530      	push	{r4, r5, lr}
    2840:	b08f      	sub	sp, #60	; 0x3c
    2842:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
	rxsetup.tx_data = &Command;	// Get address to read at writing address
	rxsetup.tx_length = 1;
    2846:	2101      	movs	r1, #1
	/* Receive setup */
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
	rxsetup.tx_data = &Command;	// Get address to read at writing address
    2848:	f10d 0007 	add.w	r0, sp, #7
	rxsetup.tx_length = 1;
	rxsetup.rx_data = I2C_Rx_Buf;
    284c:	4c0d      	ldr	r4, [pc, #52]	; (2884 <I2C_TSC2004_Read_Word+0x46>)
	rxsetup.rx_length = 2;
    284e:	2202      	movs	r2, #2
{
	/* Receive setup */
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
    2850:	2348      	movs	r3, #72	; 0x48
	rxsetup.tx_data = &Command;	// Get address to read at writing address
    2852:	9004      	str	r0, [sp, #16]
	rxsetup.tx_length = 1;
    2854:	9105      	str	r1, [sp, #20]
	rxsetup.rx_data = I2C_Rx_Buf;
	rxsetup.rx_length = 2;
    2856:	9208      	str	r2, [sp, #32]
	rxsetup.retransmissions_max = 3;
    2858:	2503      	movs	r5, #3
	 * * Data are in Right Justified format.
	 * */
	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
	word_data |= (I2C_Rx_Buf[1]&0xFF);

	if (I2C_MasterTransferData(LPC_I2C0, &rxsetup, I2C_TRANSFER_POLLING) == SUCCESS)
    285a:	2200      	movs	r2, #0
    285c:	a903      	add	r1, sp, #12
    285e:	480a      	ldr	r0, [pc, #40]	; (2888 <I2C_TSC2004_Read_Word+0x4a>)
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
	rxsetup.tx_data = &Command;	// Get address to read at writing address
	rxsetup.tx_length = 1;
	rxsetup.rx_data = I2C_Rx_Buf;
    2860:	9407      	str	r4, [sp, #28]
	rxsetup.rx_length = 2;
	rxsetup.retransmissions_max = 3;
    2862:	950a      	str	r5, [sp, #40]	; 0x28
{
	/* Receive setup */
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
    2864:	9303      	str	r3, [sp, #12]

	/* The protocol and raw data format from i2c interface:
	 * * S Addr Wr [A] Comm [A] S Addr Rd [A] [DataHigh] A [DataLow] NA P
	 * * Data are in Right Justified format.
	 * */
	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
    2866:	7825      	ldrb	r5, [r4, #0]
	word_data |= (I2C_Rx_Buf[1]&0xFF);
    2868:	7864      	ldrb	r4, [r4, #1]

	if (I2C_MasterTransferData(LPC_I2C0, &rxsetup, I2C_TRANSFER_POLLING) == SUCCESS)
    286a:	f7fe f895 	bl	998 <I2C_MasterTransferData>
    286e:	2801      	cmp	r0, #1

	/* The protocol and raw data format from i2c interface:
	 * * S Addr Wr [A] Comm [A] S Addr Rd [A] [DataHigh] A [DataLow] NA P
	 * * Data are in Right Justified format.
	 * */
	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
    2870:	bf06      	itte	eq
    2872:	f005 000f 	andeq.w	r0, r5, #15
	word_data |= (I2C_Rx_Buf[1]&0xFF);
    2876:	ea44 2000 	orreq.w	r0, r4, r0, lsl #8
	{
		return (word_data);
	}
	else
	{
		return (-1);
    287a:	f64f 70ff 	movwne	r0, #65535	; 0xffff
	}
}
    287e:	b00f      	add	sp, #60	; 0x3c
    2880:	bd30      	pop	{r4, r5, pc}
    2882:	bf00      	nop
    2884:	10000038 	.word	0x10000038
    2888:	4001c000 	.word	0x4001c000

0000288c <TSC2004_Read_Reg>:
 * @brief	    Reads Any Register value
 * @param[in]	reg    Register to access
 * @return 		Word Value
 **********************************************************************/
uint16_t TSC2004_Read_Reg (register_address reg)
{
    288c:	b510      	push	{r4, lr}
    288e:	4604      	mov	r4, r0
	uint16_t val;
	uint8_t cmd;

	TSC2004_Init ();					// Initialize Touch Screen
    2890:	f7ff ffc2 	bl	2818 <TSC2004_Init>

	 // Prepare val Measurement
	cmd = TSC2004_CMD0(reg, PND0_FALSE, READ_REG);
    2894:	00e0      	lsls	r0, r4, #3
    2896:	f040 0101 	orr.w	r1, r0, #1
    289a:	b2cc      	uxtb	r4, r1
	val = I2C_TSC2004_Read_Word(cmd);
    289c:	4620      	mov	r0, r4
    289e:	f7ff ffce 	bl	283e <I2C_TSC2004_Read_Word>

	 // Read val Measurement
	cmd = TSC2004_CMD0(reg, PND0_FALSE, READ_REG);
	val = I2C_TSC2004_Read_Word(cmd);
    28a2:	4620      	mov	r0, r4
    28a4:	f7ff ffcb 	bl	283e <I2C_TSC2004_Read_Word>

	val &= MEAS_MASK;
    28a8:	0502      	lsls	r2, r0, #20

	return (val);
}
    28aa:	0d10      	lsrs	r0, r2, #20
    28ac:	bd10      	pop	{r4, pc}

000028ae <TSC2004_Read_Values>:
 * @brief	    Read X,Y,Z1,Z2 Values
 * @param[in]	*tc    store values in structure
 * @return 		None
 **********************************************************************/
void TSC2004_Read_Values (ts_event *tc)
{
    28ae:	b510      	push	{r4, lr}
    28b0:	4604      	mov	r4, r0
	uint8_t cmd;

	TSC2004_Init ();					// Initialize Touch Screen
    28b2:	f7ff ffb1 	bl	2818 <TSC2004_Init>

	 // Prepare X Measurement
	cmd = TSC2004_CMD0(X_REG, PND0_FALSE, READ_REG);
	tc->x = I2C_TSC2004_Read_Word(cmd);
    28b6:	2001      	movs	r0, #1
    28b8:	f7ff ffc1 	bl	283e <I2C_TSC2004_Read_Word>
    28bc:	8020      	strh	r0, [r4, #0]

	 // Read X Measurement
	cmd = TSC2004_CMD0(X_REG, PND0_FALSE, READ_REG);
	tc->x = I2C_TSC2004_Read_Word(cmd);
    28be:	2001      	movs	r0, #1
    28c0:	f7ff ffbd 	bl	283e <I2C_TSC2004_Read_Word>
    28c4:	8020      	strh	r0, [r4, #0]

	// Prepare Y Measurement
	cmd = TSC2004_CMD0(Y_REG, PND0_FALSE, READ_REG);
	tc->y = I2C_TSC2004_Read_Word(cmd);
    28c6:	2009      	movs	r0, #9
    28c8:	f7ff ffb9 	bl	283e <I2C_TSC2004_Read_Word>
    28cc:	8060      	strh	r0, [r4, #2]

	// Read Y Measurement
	cmd = TSC2004_CMD0(Y_REG, PND0_FALSE, READ_REG);
	tc->y = I2C_TSC2004_Read_Word(cmd);
    28ce:	2009      	movs	r0, #9
    28d0:	f7ff ffb5 	bl	283e <I2C_TSC2004_Read_Word>
    28d4:	8060      	strh	r0, [r4, #2]

	// Prepare Z1 Measurement
	cmd = TSC2004_CMD0(Z1_REG, PND0_FALSE, READ_REG);
	tc->z1 = I2C_TSC2004_Read_Word(cmd);
    28d6:	2011      	movs	r0, #17
    28d8:	f7ff ffb1 	bl	283e <I2C_TSC2004_Read_Word>
    28dc:	80a0      	strh	r0, [r4, #4]

	// Read Z1 Measurement
	cmd = TSC2004_CMD0(Z1_REG, PND0_FALSE, READ_REG);
	tc->z1 = I2C_TSC2004_Read_Word(cmd);
    28de:	2011      	movs	r0, #17
    28e0:	f7ff ffad 	bl	283e <I2C_TSC2004_Read_Word>
    28e4:	80a0      	strh	r0, [r4, #4]

	// Prepare Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);
    28e6:	2019      	movs	r0, #25
    28e8:	f7ff ffa9 	bl	283e <I2C_TSC2004_Read_Word>
    28ec:	80e0      	strh	r0, [r4, #6]

	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);
    28ee:	2019      	movs	r0, #25
    28f0:	f7ff ffa5 	bl	283e <I2C_TSC2004_Read_Word>

	tc->x &= MEAS_MASK;
    28f4:	8823      	ldrh	r3, [r4, #0]
	tc->y &= MEAS_MASK;
    28f6:	8862      	ldrh	r2, [r4, #2]

	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
    28f8:	f423 4170 	bic.w	r1, r3, #61440	; 0xf000
    28fc:	8021      	strh	r1, [r4, #0]
	tc->y &= MEAS_MASK;
	tc->z1 &= MEAS_MASK;
    28fe:	88a1      	ldrh	r1, [r4, #4]
	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
	tc->y &= MEAS_MASK;
    2900:	f422 4370 	bic.w	r3, r2, #61440	; 0xf000
	tc->z1 &= MEAS_MASK;
	tc->z2 &= MEAS_MASK;
    2904:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
	tc->y &= MEAS_MASK;
	tc->z1 &= MEAS_MASK;
    2908:	f421 4270 	bic.w	r2, r1, #61440	; 0xf000
	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
	tc->y &= MEAS_MASK;
    290c:	8063      	strh	r3, [r4, #2]
	tc->z1 &= MEAS_MASK;
    290e:	80a2      	strh	r2, [r4, #4]
	tc->z2 &= MEAS_MASK;
    2910:	80e0      	strh	r0, [r4, #6]
    2912:	bd10      	pop	{r4, pc}

00002914 <TSC2004_Read_Value_Test>:
 * @brief	    Read X,Y,Z1,Z2 Values and Display on Terminal
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Read_Value_Test (void)
{
    2914:	b513      	push	{r0, r1, r4, lr}
	ts_event ts;
	TSC2004_Read_Values (&ts);

	printf(LPC_UART0,"\x1b[1;1HMeasure X    = %d05",ts.x);
    2916:	4c0e      	ldr	r4, [pc, #56]	; (2950 <TSC2004_Read_Value_Test+0x3c>)
 * @return 		None
 **********************************************************************/
void TSC2004_Read_Value_Test (void)
{
	ts_event ts;
	TSC2004_Read_Values (&ts);
    2918:	4668      	mov	r0, sp
    291a:	f7ff ffc8 	bl	28ae <TSC2004_Read_Values>

	printf(LPC_UART0,"\x1b[1;1HMeasure X    = %d05",ts.x);
    291e:	f8bd 2000 	ldrh.w	r2, [sp]
    2922:	4620      	mov	r0, r4
    2924:	490b      	ldr	r1, [pc, #44]	; (2954 <TSC2004_Read_Value_Test+0x40>)
    2926:	f7ff f991 	bl	1c4c <printf>
	printf(LPC_UART0,"\x1b[2;1HMeasure Y    = %d05",ts.y);
    292a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    292e:	4620      	mov	r0, r4
    2930:	4909      	ldr	r1, [pc, #36]	; (2958 <TSC2004_Read_Value_Test+0x44>)
    2932:	f7ff f98b 	bl	1c4c <printf>
	printf(LPC_UART0,"\x1b[3;1HMeasure Z1   = %d05",ts.z1);
    2936:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    293a:	4620      	mov	r0, r4
    293c:	4907      	ldr	r1, [pc, #28]	; (295c <TSC2004_Read_Value_Test+0x48>)
    293e:	f7ff f985 	bl	1c4c <printf>
	printf(LPC_UART0,"\x1b[4;1HMeasure Z2   = %d05",ts.z2);
    2942:	4620      	mov	r0, r4
    2944:	4906      	ldr	r1, [pc, #24]	; (2960 <TSC2004_Read_Value_Test+0x4c>)
    2946:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    294a:	f7ff f97f 	bl	1c4c <printf>
}
    294e:	bd1c      	pop	{r2, r3, r4, pc}
    2950:	4000c000 	.word	0x4000c000
    2954:	00005b2a 	.word	0x00005b2a
    2958:	00005b44 	.word	0x00005b44
    295c:	00005b5e 	.word	0x00005b5e
    2960:	00005b78 	.word	0x00005b78

00002964 <TSC2004_Draw_Test>:
 * @brief	    Read Touchscreen and PutPixel accordingly
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Draw_Test (void)
{
    2964:	b507      	push	{r0, r1, r2, lr}
	ts_event ts;

	TSC2004_Read_Values (&ts);
    2966:	4668      	mov	r0, sp
    2968:	f7ff ffa1 	bl	28ae <TSC2004_Read_Values>
	GLCD_PutPixel (((ts.x)/11)-24,((ts.y)/13)-36,Black);
    296c:	f8bd 0000 	ldrh.w	r0, [sp]
    2970:	230b      	movs	r3, #11
    2972:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    2976:	fbb0 f2f3 	udiv	r2, r0, r3
    297a:	200d      	movs	r0, #13
    297c:	fbb1 f3f0 	udiv	r3, r1, r0
    2980:	3a18      	subs	r2, #24
    2982:	3b24      	subs	r3, #36	; 0x24
    2984:	b290      	uxth	r0, r2
    2986:	b299      	uxth	r1, r3
    2988:	2200      	movs	r2, #0
    298a:	f000 fbe7 	bl	315c <GLCD_PutPixel>
}
    298e:	bd0e      	pop	{r1, r2, r3, pc}

00002990 <wr_dat_start>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_start (void)
{
	CS_Force1 (LPC_SSP1, DISABLE);
    2990:	2100      	movs	r1, #0
 * @brief	    Start of data writing to LCD controller
 * @param[in]	None
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_start (void)
{
    2992:	b508      	push	{r3, lr}
	CS_Force1 (LPC_SSP1, DISABLE);
    2994:	4804      	ldr	r0, [pc, #16]	; (29a8 <wr_dat_start+0x18>)
    2996:	f7fe fa9f 	bl	ed8 <CS_Force1>
	GPIO_SetValue(2, LCD_RS);  // select data mode
    299a:	2002      	movs	r0, #2
    299c:	2101      	movs	r1, #1
}
    299e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_start (void)
{
	CS_Force1 (LPC_SSP1, DISABLE);
	GPIO_SetValue(2, LCD_RS);  // select data mode
    29a2:	f7fd bc8b 	b.w	2bc <GPIO_SetValue>
    29a6:	bf00      	nop
    29a8:	40030000 	.word	0x40030000

000029ac <wr_dat_stop>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_stop (void)
{
	CS_Force1 (LPC_SSP1, ENABLE);
    29ac:	4801      	ldr	r0, [pc, #4]	; (29b4 <wr_dat_stop+0x8>)
    29ae:	2101      	movs	r1, #1
    29b0:	f7fe ba92 	b.w	ed8 <CS_Force1>
    29b4:	40030000 	.word	0x40030000

000029b8 <wr_dat_only>:
 * @brief	    Data writing to LCD controller
 * @param[in]	c     data to be written
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_only (uint16_t c)
{
    29b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	SSP_DATA_SETUP_Type xferConfig;

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
    29ba:	4b07      	ldr	r3, [pc, #28]	; (29d8 <wr_dat_only+0x20>)
    29bc:	0a02      	lsrs	r2, r0, #8
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract
    29be:	7058      	strb	r0, [r3, #1]

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
	xferConfig.length = 2;
    29c0:	2002      	movs	r0, #2
 **********************************************************************/
static __INLINE void wr_dat_only (uint16_t c)
{
	SSP_DATA_SETUP_Type xferConfig;

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
    29c2:	701a      	strb	r2, [r3, #0]
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
	xferConfig.length = 2;
    29c4:	9004      	str	r0, [sp, #16]

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
    29c6:	2200      	movs	r2, #0
	xferConfig.length = 2;
	SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    29c8:	4669      	mov	r1, sp
    29ca:	4804      	ldr	r0, [pc, #16]	; (29dc <wr_dat_only+0x24>)
	SSP_DATA_SETUP_Type xferConfig;

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
    29cc:	9300      	str	r3, [sp, #0]
	xferConfig.rx_data = NULL;
    29ce:	9202      	str	r2, [sp, #8]
	xferConfig.length = 2;
	SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    29d0:	f7fe fbbc 	bl	114c <SSP_ReadWrite>
}
    29d4:	b007      	add	sp, #28
    29d6:	bd00      	pop	{pc}
    29d8:	100002cc 	.word	0x100002cc
    29dc:	40030000 	.word	0x40030000

000029e0 <GLCD_Backlight>:
 * @param[in]	NewState	ENABLE/DISABLE the Backlight
 * @return 		None
 **********************************************************************/
void GLCD_Backlight (FunctionalState NewState)
{
	if(NewState)
    29e0:	b120      	cbz	r0, 29ec <GLCD_Backlight+0xc>
	{
		GPIO_SetValue(2, LCD_BK);
    29e2:	2002      	movs	r0, #2
    29e4:	f44f 7180 	mov.w	r1, #256	; 0x100
    29e8:	f7fd bc68 	b.w	2bc <GPIO_SetValue>
	}
	else
	{
		GPIO_ClearValue(2, LCD_BK);
    29ec:	2002      	movs	r0, #2
    29ee:	f44f 7180 	mov.w	r1, #256	; 0x100
    29f2:	f7fd bc6d 	b.w	2d0 <GPIO_ClearValue>

000029f6 <GLCD_Reset>:
 * @brief	    This function resets GLCD
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Reset (void)
{
    29f6:	b508      	push	{r3, lr}
	GPIO_SetValue(0, LCD_RST);
    29f8:	2120      	movs	r1, #32
    29fa:	2000      	movs	r0, #0
    29fc:	f7fd fc5e 	bl	2bc <GPIO_SetValue>
	delay_ms(2);
    2a00:	2002      	movs	r0, #2
    2a02:	f7fe fc85 	bl	1310 <delay_ms>
	GPIO_ClearValue(0, LCD_RST);  //reset low
    2a06:	2120      	movs	r1, #32
    2a08:	2000      	movs	r0, #0
    2a0a:	f7fd fc61 	bl	2d0 <GPIO_ClearValue>
	delay_ms(4);
    2a0e:	2004      	movs	r0, #4
    2a10:	f7fe fc7e 	bl	1310 <delay_ms>
	GPIO_SetValue(0, LCD_RST);  //reset low
    2a14:	2000      	movs	r0, #0
    2a16:	2120      	movs	r1, #32
}
    2a18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	GPIO_SetValue(0, LCD_RST);
	delay_ms(2);
	GPIO_ClearValue(0, LCD_RST);  //reset low
	delay_ms(4);
	GPIO_SetValue(0, LCD_RST);  //reset low
    2a1c:	f7fd bc4e 	b.w	2bc <GPIO_SetValue>

00002a20 <GLCD_SetTextColor>:
 * @param[in]	color    foreground color
 * @return 		None
 **********************************************************************/
void GLCD_SetTextColor (uint16_t color)
{
	TextColor = color;
    2a20:	4b01      	ldr	r3, [pc, #4]	; (2a28 <GLCD_SetTextColor+0x8>)
    2a22:	8018      	strh	r0, [r3, #0]
    2a24:	4770      	bx	lr
    2a26:	bf00      	nop
    2a28:	10000036 	.word	0x10000036

00002a2c <GLCD_SetBackColor>:
 * @param[in]	color    background color
 * @return 		None
 **********************************************************************/
void GLCD_SetBackColor (uint16_t color)
{
	BackColor = color;
    2a2c:	4b01      	ldr	r3, [pc, #4]	; (2a34 <GLCD_SetBackColor+0x8>)
    2a2e:	8018      	strh	r0, [r3, #0]
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop
    2a34:	2007c006 	.word	0x2007c006

00002a38 <Keyboard1>:

schar Keyboard1(uint16_t x, uint16_t y)
{
	schar key;

	if(y>138 && y<159)
    2a38:	f1a1 038b 	sub.w	r3, r1, #139	; 0x8b
    2a3c:	b29a      	uxth	r2, r3
    2a3e:	2a13      	cmp	r2, #19
    2a40:	d83b      	bhi.n	2aba <Keyboard1+0x82>
	{
		if(y>138 && y<154)
    2a42:	2a0e      	cmp	r2, #14
    2a44:	d808      	bhi.n	2a58 <Keyboard1+0x20>
		{
			if(x>5 && x<23)
    2a46:	1f82      	subs	r2, r0, #6
    2a48:	2a10      	cmp	r2, #16
    2a4a:	f240 80b5 	bls.w	2bb8 <Keyboard1+0x180>
			{
				return 'q';
			}
			else if(x>33 && x<52)
    2a4e:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    2a52:	2b11      	cmp	r3, #17
    2a54:	f240 80b2 	bls.w	2bbc <Keyboard1+0x184>
			{
				return 'w';
			}
		}
		if(y>141 && y<159)
    2a58:	398e      	subs	r1, #142	; 0x8e
    2a5a:	2910      	cmp	r1, #16
    2a5c:	f200 80e2 	bhi.w	2c24 <Keyboard1+0x1ec>
		{
			if(x>64 && x<84)
    2a60:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
    2a64:	2912      	cmp	r1, #18
    2a66:	f240 80ab 	bls.w	2bc0 <Keyboard1+0x188>
			{
				return 'e';
			}
			else if(x>98 && x<120)
    2a6a:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
    2a6e:	2a14      	cmp	r2, #20
    2a70:	f240 80a8 	bls.w	2bc4 <Keyboard1+0x18c>
			{
				return 'r';
			}
			else if(x>133 && x<155)
    2a74:	f1a0 0386 	sub.w	r3, r0, #134	; 0x86
    2a78:	2b14      	cmp	r3, #20
    2a7a:	f240 80a5 	bls.w	2bc8 <Keyboard1+0x190>
			{
				return 't';
			}
			else if(x>168 && x<189)
    2a7e:	f1a0 01a9 	sub.w	r1, r0, #169	; 0xa9
    2a82:	2913      	cmp	r1, #19
    2a84:	f240 80a2 	bls.w	2bcc <Keyboard1+0x194>
			{
				return 'y';
			}
			else if(x>200 && x<220)
    2a88:	f1a0 02c9 	sub.w	r2, r0, #201	; 0xc9
    2a8c:	2a12      	cmp	r2, #18
    2a8e:	f240 809f 	bls.w	2bd0 <Keyboard1+0x198>
			{
				return 'u';
			}
			else if(x>231 && x<256)
    2a92:	f1a0 03e8 	sub.w	r3, r0, #232	; 0xe8
    2a96:	2b17      	cmp	r3, #23
    2a98:	f240 809c 	bls.w	2bd4 <Keyboard1+0x19c>
			{
				return 'i';
			}
			else if(x>266 && x<289)
    2a9c:	f46f 7c85 	mvn.w	ip, #266	; 0x10a
    2aa0:	eb00 010c 	add.w	r1, r0, ip
    2aa4:	2915      	cmp	r1, #21
    2aa6:	f240 8097 	bls.w	2bd8 <Keyboard1+0x1a0>
			{
				return 'o';
			}
			else if(x>300 && x<320)
    2aaa:	f46f 7296 	mvn.w	r2, #300	; 0x12c
    2aae:	1880      	adds	r0, r0, r2
			{
				return 'p';
    2ab0:	2812      	cmp	r0, #18
    2ab2:	bf94      	ite	ls
    2ab4:	2070      	movls	r0, #112	; 0x70
    2ab6:	2000      	movhi	r0, #0
    2ab8:	4770      	bx	lr
			}
		}
	}
	else if(y>170 && y<192)
    2aba:	f1a1 03ab 	sub.w	r3, r1, #171	; 0xab
    2abe:	b29a      	uxth	r2, r3
    2ac0:	2a14      	cmp	r2, #20
    2ac2:	d82f      	bhi.n	2b24 <Keyboard1+0xec>
	{
		if(y>170 && y<188)
    2ac4:	2a10      	cmp	r2, #16
    2ac6:	d809      	bhi.n	2adc <Keyboard1+0xa4>
		{
			if(x>20 && x<40)
    2ac8:	f1a0 0215 	sub.w	r2, r0, #21
    2acc:	2a12      	cmp	r2, #18
    2ace:	f240 8085 	bls.w	2bdc <Keyboard1+0x1a4>
			{
				return 'a';
			}
			else if(x>50 && x<70)
    2ad2:	f1a0 0333 	sub.w	r3, r0, #51	; 0x33
    2ad6:	2b12      	cmp	r3, #18
    2ad8:	f240 8082 	bls.w	2be0 <Keyboard1+0x1a8>
			{
				return 's';
			}
		}

		if(y>173 && y<192)
    2adc:	39ae      	subs	r1, #174	; 0xae
    2ade:	2911      	cmp	r1, #17
    2ae0:	f200 80a0 	bhi.w	2c24 <Keyboard1+0x1ec>
		{
			if(x>81 && x<103)
    2ae4:	f1a0 0152 	sub.w	r1, r0, #82	; 0x52
    2ae8:	2914      	cmp	r1, #20
    2aea:	d97b      	bls.n	2be4 <Keyboard1+0x1ac>
			{
				return 'd';
			}
			else if(x>115 && x<138)
    2aec:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
    2af0:	2a15      	cmp	r2, #21
    2af2:	d979      	bls.n	2be8 <Keyboard1+0x1b0>
			{
				return 'f';
			}
			else if(x>150 && x<172)
    2af4:	f1a0 0397 	sub.w	r3, r0, #151	; 0x97
    2af8:	2b14      	cmp	r3, #20
    2afa:	d977      	bls.n	2bec <Keyboard1+0x1b4>
			{
				return 'g';
			}
			else if(x>184 && x<207)
    2afc:	f1a0 01b9 	sub.w	r1, r0, #185	; 0xb9
    2b00:	2915      	cmp	r1, #21
    2b02:	d975      	bls.n	2bf0 <Keyboard1+0x1b8>
			{
				return 'h';
			}
			else if(x>216 && x<238)
    2b04:	f1a0 02d9 	sub.w	r2, r0, #217	; 0xd9
    2b08:	2a14      	cmp	r2, #20
    2b0a:	d973      	bls.n	2bf4 <Keyboard1+0x1bc>
			{
				return 'j';
			}
			else if(x>249 && x<270)
    2b0c:	f1a0 03fa 	sub.w	r3, r0, #250	; 0xfa
    2b10:	2b13      	cmp	r3, #19
    2b12:	d971      	bls.n	2bf8 <Keyboard1+0x1c0>
			{
				return 'k';
			}
			else if(x>284 && x<304)
    2b14:	f46f 718e 	mvn.w	r1, #284	; 0x11c
    2b18:	1840      	adds	r0, r0, r1
			{
				return 'l';
    2b1a:	2812      	cmp	r0, #18
    2b1c:	bf94      	ite	ls
    2b1e:	206c      	movls	r0, #108	; 0x6c
    2b20:	2000      	movhi	r0, #0
    2b22:	4770      	bx	lr
			}
		}
	}
	else if(y>197 && y<221)
    2b24:	f1a1 03c6 	sub.w	r3, r1, #198	; 0xc6
    2b28:	2b16      	cmp	r3, #22
    2b2a:	d82b      	bhi.n	2b84 <Keyboard1+0x14c>
	{
		if(x>3 && x<30 && y>197 && y<214)
    2b2c:	1f02      	subs	r2, r0, #4
    2b2e:	2a19      	cmp	r2, #25
    2b30:	d801      	bhi.n	2b36 <Keyboard1+0xfe>
    2b32:	29d5      	cmp	r1, #213	; 0xd5
    2b34:	d962      	bls.n	2bfc <Keyboard1+0x1c4>
		{
			key = CAPS;
			return key; // CAPS FLAG
		}

		if(y>202 && y<221)
    2b36:	39cb      	subs	r1, #203	; 0xcb
    2b38:	2911      	cmp	r1, #17
    2b3a:	d873      	bhi.n	2c24 <Keyboard1+0x1ec>
		{
			if(x>49 && x<70)
    2b3c:	f1a0 0132 	sub.w	r1, r0, #50	; 0x32
    2b40:	2913      	cmp	r1, #19
    2b42:	d95d      	bls.n	2c00 <Keyboard1+0x1c8>
			{
				return 'z';
			}
			else if(x>82 && x<103)
    2b44:	f1a0 0353 	sub.w	r3, r0, #83	; 0x53
    2b48:	2b13      	cmp	r3, #19
    2b4a:	d95b      	bls.n	2c04 <Keyboard1+0x1cc>
			{
				return 'x';
			}
			else if(x>114 && x<139)
    2b4c:	f1a0 0273 	sub.w	r2, r0, #115	; 0x73
    2b50:	2a17      	cmp	r2, #23
    2b52:	d959      	bls.n	2c08 <Keyboard1+0x1d0>
			{
				return 'c';
			}
			else if(x>148 && x<172)
    2b54:	f1a0 0195 	sub.w	r1, r0, #149	; 0x95
    2b58:	2916      	cmp	r1, #22
    2b5a:	d957      	bls.n	2c0c <Keyboard1+0x1d4>
			{
				return 'v';
			}
			else if(x>183 && x<205)
    2b5c:	f1a0 03b8 	sub.w	r3, r0, #184	; 0xb8
    2b60:	2b14      	cmp	r3, #20
    2b62:	d955      	bls.n	2c10 <Keyboard1+0x1d8>
			{
				return 'b';
			}
			else if(x>216 && x<238)
    2b64:	f1a0 02d9 	sub.w	r2, r0, #217	; 0xd9
    2b68:	2a14      	cmp	r2, #20
    2b6a:	d953      	bls.n	2c14 <Keyboard1+0x1dc>
			{
				return 'n';
			}
			else if(x>249 && x<270)
    2b6c:	f1a0 01fa 	sub.w	r1, r0, #250	; 0xfa
    2b70:	2913      	cmp	r1, #19
    2b72:	d951      	bls.n	2c18 <Keyboard1+0x1e0>
			{
				return 'm';
			}
			else if(x>290 && x<320)
    2b74:	f46f 7391 	mvn.w	r3, #290	; 0x122
    2b78:	18c0      	adds	r0, r0, r3
			{
				key = BK_SPACE;
				return key;  // Backspace flag
    2b7a:	281c      	cmp	r0, #28
    2b7c:	bf94      	ite	ls
    2b7e:	2002      	movls	r0, #2
    2b80:	2000      	movhi	r0, #0
    2b82:	4770      	bx	lr
			}
		}
	}
	else if(x>5 && x<54 && y>230 && y<242)
    2b84:	1f82      	subs	r2, r0, #6
    2b86:	2a2f      	cmp	r2, #47	; 0x2f
    2b88:	d803      	bhi.n	2b92 <Keyboard1+0x15a>
    2b8a:	29e6      	cmp	r1, #230	; 0xe6
    2b8c:	d901      	bls.n	2b92 <Keyboard1+0x15a>
    2b8e:	29f1      	cmp	r1, #241	; 0xf1
    2b90:	d944      	bls.n	2c1c <Keyboard1+0x1e4>
	{
		key = KEY2;
		return key; // Keyboard2 flag
	}
	else if(x>67 && x<252 && y>234 && y<250)
    2b92:	f1a0 0344 	sub.w	r3, r0, #68	; 0x44
    2b96:	2bb7      	cmp	r3, #183	; 0xb7
    2b98:	d803      	bhi.n	2ba2 <Keyboard1+0x16a>
    2b9a:	29ea      	cmp	r1, #234	; 0xea
    2b9c:	d901      	bls.n	2ba2 <Keyboard1+0x16a>
    2b9e:	29f9      	cmp	r1, #249	; 0xf9
    2ba0:	d93e      	bls.n	2c20 <Keyboard1+0x1e8>
	{
		return ' ';
	}
	else if(x>265 && x<320 && y>231 && y<250)
    2ba2:	f5a0 7085 	sub.w	r0, r0, #266	; 0x10a
    2ba6:	2835      	cmp	r0, #53	; 0x35
    2ba8:	d83c      	bhi.n	2c24 <Keyboard1+0x1ec>
    2baa:	29e7      	cmp	r1, #231	; 0xe7
    2bac:	d93a      	bls.n	2c24 <Keyboard1+0x1ec>
	{
		key = CR;
		return key;  // Carriage Return
    2bae:	29f9      	cmp	r1, #249	; 0xf9
    2bb0:	bf94      	ite	ls
    2bb2:	2006      	movls	r0, #6
    2bb4:	2000      	movhi	r0, #0
    2bb6:	4770      	bx	lr
	{
		if(y>138 && y<154)
		{
			if(x>5 && x<23)
			{
				return 'q';
    2bb8:	2071      	movs	r0, #113	; 0x71
    2bba:	4770      	bx	lr
			}
			else if(x>33 && x<52)
			{
				return 'w';
    2bbc:	2077      	movs	r0, #119	; 0x77
    2bbe:	4770      	bx	lr
		}
		if(y>141 && y<159)
		{
			if(x>64 && x<84)
			{
				return 'e';
    2bc0:	2065      	movs	r0, #101	; 0x65
    2bc2:	4770      	bx	lr
			}
			else if(x>98 && x<120)
			{
				return 'r';
    2bc4:	2072      	movs	r0, #114	; 0x72
    2bc6:	4770      	bx	lr
			}
			else if(x>133 && x<155)
			{
				return 't';
    2bc8:	2074      	movs	r0, #116	; 0x74
    2bca:	4770      	bx	lr
			}
			else if(x>168 && x<189)
			{
				return 'y';
    2bcc:	2079      	movs	r0, #121	; 0x79
    2bce:	4770      	bx	lr
			}
			else if(x>200 && x<220)
			{
				return 'u';
    2bd0:	2075      	movs	r0, #117	; 0x75
    2bd2:	4770      	bx	lr
			}
			else if(x>231 && x<256)
			{
				return 'i';
    2bd4:	2069      	movs	r0, #105	; 0x69
    2bd6:	4770      	bx	lr
			}
			else if(x>266 && x<289)
			{
				return 'o';
    2bd8:	206f      	movs	r0, #111	; 0x6f
    2bda:	4770      	bx	lr
	{
		if(y>170 && y<188)
		{
			if(x>20 && x<40)
			{
				return 'a';
    2bdc:	2061      	movs	r0, #97	; 0x61
    2bde:	4770      	bx	lr
			}
			else if(x>50 && x<70)
			{
				return 's';
    2be0:	2073      	movs	r0, #115	; 0x73
    2be2:	4770      	bx	lr

		if(y>173 && y<192)
		{
			if(x>81 && x<103)
			{
				return 'd';
    2be4:	2064      	movs	r0, #100	; 0x64
    2be6:	4770      	bx	lr
			}
			else if(x>115 && x<138)
			{
				return 'f';
    2be8:	2066      	movs	r0, #102	; 0x66
    2bea:	4770      	bx	lr
			}
			else if(x>150 && x<172)
			{
				return 'g';
    2bec:	2067      	movs	r0, #103	; 0x67
    2bee:	4770      	bx	lr
			}
			else if(x>184 && x<207)
			{
				return 'h';
    2bf0:	2068      	movs	r0, #104	; 0x68
    2bf2:	4770      	bx	lr
			}
			else if(x>216 && x<238)
			{
				return 'j';
    2bf4:	206a      	movs	r0, #106	; 0x6a
    2bf6:	4770      	bx	lr
			}
			else if(x>249 && x<270)
			{
				return 'k';
    2bf8:	206b      	movs	r0, #107	; 0x6b
    2bfa:	4770      	bx	lr
	else if(y>197 && y<221)
	{
		if(x>3 && x<30 && y>197 && y<214)
		{
			key = CAPS;
			return key; // CAPS FLAG
    2bfc:	2001      	movs	r0, #1
    2bfe:	4770      	bx	lr

		if(y>202 && y<221)
		{
			if(x>49 && x<70)
			{
				return 'z';
    2c00:	207a      	movs	r0, #122	; 0x7a
    2c02:	4770      	bx	lr
			}
			else if(x>82 && x<103)
			{
				return 'x';
    2c04:	2078      	movs	r0, #120	; 0x78
    2c06:	4770      	bx	lr
			}
			else if(x>114 && x<139)
			{
				return 'c';
    2c08:	2063      	movs	r0, #99	; 0x63
    2c0a:	4770      	bx	lr
			}
			else if(x>148 && x<172)
			{
				return 'v';
    2c0c:	2076      	movs	r0, #118	; 0x76
    2c0e:	4770      	bx	lr
			}
			else if(x>183 && x<205)
			{
				return 'b';
    2c10:	2062      	movs	r0, #98	; 0x62
    2c12:	4770      	bx	lr
			}
			else if(x>216 && x<238)
			{
				return 'n';
    2c14:	206e      	movs	r0, #110	; 0x6e
    2c16:	4770      	bx	lr
			}
			else if(x>249 && x<270)
			{
				return 'm';
    2c18:	206d      	movs	r0, #109	; 0x6d
    2c1a:	4770      	bx	lr
		}
	}
	else if(x>5 && x<54 && y>230 && y<242)
	{
		key = KEY2;
		return key; // Keyboard2 flag
    2c1c:	2004      	movs	r0, #4
    2c1e:	4770      	bx	lr
	}
	else if(x>67 && x<252 && y>234 && y<250)
	{
		return ' ';
    2c20:	2020      	movs	r0, #32
    2c22:	4770      	bx	lr
	else if(x>265 && x<320 && y>231 && y<250)
	{
		key = CR;
		return key;  // Carriage Return
	}
	return 0;
    2c24:	2000      	movs	r0, #0
}
    2c26:	4770      	bx	lr

00002c28 <Keyboard2>:

schar Keyboard2(uint16_t x, uint16_t y)
{
	schar key;

	if(y>138 && y<161)
    2c28:	f1a1 038b 	sub.w	r3, r1, #139	; 0x8b
    2c2c:	b29a      	uxth	r2, r3
    2c2e:	2a15      	cmp	r2, #21
    2c30:	d838      	bhi.n	2ca4 <Keyboard2+0x7c>
	{
		if(y>138 && y<158)
    2c32:	2a12      	cmp	r2, #18
    2c34:	d808      	bhi.n	2c48 <Keyboard2+0x20>
		{
			if(x>5 && x<25)
    2c36:	1f82      	subs	r2, r0, #6
    2c38:	2a12      	cmp	r2, #18
    2c3a:	f240 80ad 	bls.w	2d98 <Keyboard2+0x170>
			{
				return '1';
			}
			else if(x>35 && x<55)
    2c3e:	f1a0 0324 	sub.w	r3, r0, #36	; 0x24
    2c42:	2b12      	cmp	r3, #18
    2c44:	f240 80aa 	bls.w	2d9c <Keyboard2+0x174>
			{
				return '2';
			}
		}
		if(y>141 && y<161)
    2c48:	398e      	subs	r1, #142	; 0x8e
    2c4a:	2912      	cmp	r1, #18
    2c4c:	f200 80d8 	bhi.w	2e00 <Keyboard2+0x1d8>
		{
			if(x>68 && x<86)
    2c50:	f1a0 0145 	sub.w	r1, r0, #69	; 0x45
    2c54:	2910      	cmp	r1, #16
    2c56:	f240 80a3 	bls.w	2da0 <Keyboard2+0x178>
			{
				return '3';
			}
			else if(x>99 && x<122)
    2c5a:	f1a0 0264 	sub.w	r2, r0, #100	; 0x64
    2c5e:	2a15      	cmp	r2, #21
    2c60:	f240 80a0 	bls.w	2da4 <Keyboard2+0x17c>
			{
				return '4';
			}
			else if(x>132 && x<154)
    2c64:	f1a0 0385 	sub.w	r3, r0, #133	; 0x85
    2c68:	2b14      	cmp	r3, #20
    2c6a:	f240 809d 	bls.w	2da8 <Keyboard2+0x180>
			{
				return '5';
			}
			else if(x>165 && x<186)
    2c6e:	f1a0 01a6 	sub.w	r1, r0, #166	; 0xa6
    2c72:	2913      	cmp	r1, #19
    2c74:	f240 809a 	bls.w	2dac <Keyboard2+0x184>
			{
				return '6';
			}
			else if(x>198 && x<218)
    2c78:	f1a0 02c7 	sub.w	r2, r0, #199	; 0xc7
    2c7c:	2a12      	cmp	r2, #18
    2c7e:	f240 8097 	bls.w	2db0 <Keyboard2+0x188>
			{
				return '7';
			}
			else if(x>229 && x<252)
    2c82:	f1a0 03e6 	sub.w	r3, r0, #230	; 0xe6
    2c86:	2b15      	cmp	r3, #21
    2c88:	f240 8094 	bls.w	2db4 <Keyboard2+0x18c>
			{
				return '8';
			}
			else if(x>263 && x<283)
    2c8c:	f5a0 7184 	sub.w	r1, r0, #264	; 0x108
    2c90:	2912      	cmp	r1, #18
    2c92:	f240 8091 	bls.w	2db8 <Keyboard2+0x190>
			{
				return '9';
			}
			else if(x>295 && x<317)
    2c96:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
			{
				return '0';
    2c9a:	2814      	cmp	r0, #20
    2c9c:	bf94      	ite	ls
    2c9e:	2030      	movls	r0, #48	; 0x30
    2ca0:	2000      	movhi	r0, #0
    2ca2:	4770      	bx	lr
			}
		}
	}
	else if(y>168 && y<192)
    2ca4:	f1a1 03a9 	sub.w	r3, r1, #169	; 0xa9
    2ca8:	b29a      	uxth	r2, r3
    2caa:	2a16      	cmp	r2, #22
    2cac:	d832      	bhi.n	2d14 <Keyboard2+0xec>
	{
		if(y>168 && y<189)
    2cae:	2a13      	cmp	r2, #19
    2cb0:	d807      	bhi.n	2cc2 <Keyboard2+0x9a>
		{
			if(x>5 && x<25)
    2cb2:	1f82      	subs	r2, r0, #6
    2cb4:	2a12      	cmp	r2, #18
    2cb6:	f240 8081 	bls.w	2dbc <Keyboard2+0x194>
			{
				return '-';
			}
			else if(x>35 && x<56)
    2cba:	f1a0 0324 	sub.w	r3, r0, #36	; 0x24
    2cbe:	2b13      	cmp	r3, #19
    2cc0:	d97e      	bls.n	2dc0 <Keyboard2+0x198>
			{
				return '/';
			}
		}

		if(y>173 && y<192)
    2cc2:	39ae      	subs	r1, #174	; 0xae
    2cc4:	2911      	cmp	r1, #17
    2cc6:	f200 809b 	bhi.w	2e00 <Keyboard2+0x1d8>
		{
			if(x>66 && x<88)
    2cca:	f1a0 0143 	sub.w	r1, r0, #67	; 0x43
    2cce:	2914      	cmp	r1, #20
    2cd0:	d978      	bls.n	2dc4 <Keyboard2+0x19c>
			{
				return ':';
			}
			else if(x>99 && x<122)
    2cd2:	f1a0 0264 	sub.w	r2, r0, #100	; 0x64
    2cd6:	2a15      	cmp	r2, #21
    2cd8:	d976      	bls.n	2dc8 <Keyboard2+0x1a0>
			{
				return ';';
			}
			else if(x>132 && x<155)
    2cda:	f1a0 0385 	sub.w	r3, r0, #133	; 0x85
    2cde:	2b15      	cmp	r3, #21
    2ce0:	d974      	bls.n	2dcc <Keyboard2+0x1a4>
			{
				return '(';
			}
			else if(x>166 && x<187)
    2ce2:	f1a0 01a7 	sub.w	r1, r0, #167	; 0xa7
    2ce6:	2913      	cmp	r1, #19
    2ce8:	d972      	bls.n	2dd0 <Keyboard2+0x1a8>
			{
				return ')';
			}
			else if(x>198 && x<218)
    2cea:	f1a0 02c7 	sub.w	r2, r0, #199	; 0xc7
    2cee:	2a12      	cmp	r2, #18
    2cf0:	d970      	bls.n	2dd4 <Keyboard2+0x1ac>
			{
				return '$';
			}
			else if(x>229 && x<251)
    2cf2:	f1a0 03e6 	sub.w	r3, r0, #230	; 0xe6
    2cf6:	2b14      	cmp	r3, #20
    2cf8:	d96e      	bls.n	2dd8 <Keyboard2+0x1b0>
			{
				return '&';
			}
			else if(x>262 && x<283)
    2cfa:	f46f 7183 	mvn.w	r1, #262	; 0x106
    2cfe:	1842      	adds	r2, r0, r1
    2d00:	2a13      	cmp	r2, #19
    2d02:	d96b      	bls.n	2ddc <Keyboard2+0x1b4>
			{
				return '@';
			}
			else if(x>294 && x<317)
    2d04:	f46f 7393 	mvn.w	r3, #294	; 0x126
    2d08:	18c0      	adds	r0, r0, r3
			{
				return '"';
    2d0a:	2815      	cmp	r0, #21
    2d0c:	bf94      	ite	ls
    2d0e:	2022      	movls	r0, #34	; 0x22
    2d10:	2000      	movhi	r0, #0
    2d12:	4770      	bx	lr
			}
		}
	}
	else if(y>197 && y<221)
    2d14:	f1a1 03c6 	sub.w	r3, r1, #198	; 0xc6
    2d18:	2b16      	cmp	r3, #22
    2d1a:	f1a0 0206 	sub.w	r2, r0, #6
	{
		if(x>5 && x<35 && y>197 && y<215)
    2d1e:	b293      	uxth	r3, r2
			{
				return '"';
			}
		}
	}
	else if(y>197 && y<221)
    2d20:	d821      	bhi.n	2d66 <Keyboard2+0x13e>
	{
		if(x>5 && x<35 && y>197 && y<215)
    2d22:	2b1c      	cmp	r3, #28
    2d24:	d801      	bhi.n	2d2a <Keyboard2+0x102>
    2d26:	29d6      	cmp	r1, #214	; 0xd6
    2d28:	d95a      	bls.n	2de0 <Keyboard2+0x1b8>
		{
			key = KEY3;
			return key; // CAPS FLAG
		}

		if(y>202 && y<221)
    2d2a:	39cb      	subs	r1, #203	; 0xcb
    2d2c:	2911      	cmp	r1, #17
    2d2e:	d867      	bhi.n	2e00 <Keyboard2+0x1d8>
		{
			if(x>52 && x<88)
    2d30:	f1a0 0135 	sub.w	r1, r0, #53	; 0x35
    2d34:	2922      	cmp	r1, #34	; 0x22
    2d36:	d955      	bls.n	2de4 <Keyboard2+0x1bc>
			{
				return '.';
			}
			else if(x>96 && x<132)
    2d38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    2d3c:	2b22      	cmp	r3, #34	; 0x22
    2d3e:	d953      	bls.n	2de8 <Keyboard2+0x1c0>
			{
				return ',';
			}
			else if(x>142 && x<180)
    2d40:	f1a0 028f 	sub.w	r2, r0, #143	; 0x8f
    2d44:	2a24      	cmp	r2, #36	; 0x24
    2d46:	d951      	bls.n	2dec <Keyboard2+0x1c4>
			{
				return '?';
			}
			else if(x>189 && x<225)
    2d48:	f1a0 01be 	sub.w	r1, r0, #190	; 0xbe
    2d4c:	2922      	cmp	r1, #34	; 0x22
    2d4e:	d94f      	bls.n	2df0 <Keyboard2+0x1c8>
			{
				return '!';
			}
			else if(x>235 && x<269)
    2d50:	f1a0 03ec 	sub.w	r3, r0, #236	; 0xec
    2d54:	2b20      	cmp	r3, #32
    2d56:	d94d      	bls.n	2df4 <Keyboard2+0x1cc>
			{
				return 0x27;   // ' single quote
			}
			else if(x>283 && x<317)
    2d58:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
			{
				key = BK_SPACE;
				return key;  // Backspace flag
    2d5c:	2820      	cmp	r0, #32
    2d5e:	bf94      	ite	ls
    2d60:	2002      	movls	r0, #2
    2d62:	2000      	movhi	r0, #0
    2d64:	4770      	bx	lr
			}
		}
	}
	else if(x>5 && x<57 && y>229 && y<242)
    2d66:	2b32      	cmp	r3, #50	; 0x32
    2d68:	d803      	bhi.n	2d72 <Keyboard2+0x14a>
    2d6a:	29e5      	cmp	r1, #229	; 0xe5
    2d6c:	d901      	bls.n	2d72 <Keyboard2+0x14a>
    2d6e:	29f1      	cmp	r1, #241	; 0xf1
    2d70:	d942      	bls.n	2df8 <Keyboard2+0x1d0>
	{
		key = KEY1;
		return key; // Keyboard2 flag
	}
	else if(x>69 && x<251 && y>234 && y<250)
    2d72:	f1a0 0246 	sub.w	r2, r0, #70	; 0x46
    2d76:	2ab4      	cmp	r2, #180	; 0xb4
    2d78:	d803      	bhi.n	2d82 <Keyboard2+0x15a>
    2d7a:	29ea      	cmp	r1, #234	; 0xea
    2d7c:	d901      	bls.n	2d82 <Keyboard2+0x15a>
    2d7e:	29f9      	cmp	r1, #249	; 0xf9
    2d80:	d93c      	bls.n	2dfc <Keyboard2+0x1d4>
	{
		return ' ';
	}
	else if(x>263 && x<318 && y>231 && y<250)
    2d82:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
    2d86:	2835      	cmp	r0, #53	; 0x35
    2d88:	d83a      	bhi.n	2e00 <Keyboard2+0x1d8>
    2d8a:	29e7      	cmp	r1, #231	; 0xe7
    2d8c:	d938      	bls.n	2e00 <Keyboard2+0x1d8>
	{
		key = CR;
		return key;  // Carriage Return
    2d8e:	29f9      	cmp	r1, #249	; 0xf9
    2d90:	bf94      	ite	ls
    2d92:	2006      	movls	r0, #6
    2d94:	2000      	movhi	r0, #0
    2d96:	4770      	bx	lr
	{
		if(y>138 && y<158)
		{
			if(x>5 && x<25)
			{
				return '1';
    2d98:	2031      	movs	r0, #49	; 0x31
    2d9a:	4770      	bx	lr
			}
			else if(x>35 && x<55)
			{
				return '2';
    2d9c:	2032      	movs	r0, #50	; 0x32
    2d9e:	4770      	bx	lr
		}
		if(y>141 && y<161)
		{
			if(x>68 && x<86)
			{
				return '3';
    2da0:	2033      	movs	r0, #51	; 0x33
    2da2:	4770      	bx	lr
			}
			else if(x>99 && x<122)
			{
				return '4';
    2da4:	2034      	movs	r0, #52	; 0x34
    2da6:	4770      	bx	lr
			}
			else if(x>132 && x<154)
			{
				return '5';
    2da8:	2035      	movs	r0, #53	; 0x35
    2daa:	4770      	bx	lr
			}
			else if(x>165 && x<186)
			{
				return '6';
    2dac:	2036      	movs	r0, #54	; 0x36
    2dae:	4770      	bx	lr
			}
			else if(x>198 && x<218)
			{
				return '7';
    2db0:	2037      	movs	r0, #55	; 0x37
    2db2:	4770      	bx	lr
			}
			else if(x>229 && x<252)
			{
				return '8';
    2db4:	2038      	movs	r0, #56	; 0x38
    2db6:	4770      	bx	lr
			}
			else if(x>263 && x<283)
			{
				return '9';
    2db8:	2039      	movs	r0, #57	; 0x39
    2dba:	4770      	bx	lr
	{
		if(y>168 && y<189)
		{
			if(x>5 && x<25)
			{
				return '-';
    2dbc:	202d      	movs	r0, #45	; 0x2d
    2dbe:	4770      	bx	lr
			}
			else if(x>35 && x<56)
			{
				return '/';
    2dc0:	202f      	movs	r0, #47	; 0x2f
    2dc2:	4770      	bx	lr

		if(y>173 && y<192)
		{
			if(x>66 && x<88)
			{
				return ':';
    2dc4:	203a      	movs	r0, #58	; 0x3a
    2dc6:	4770      	bx	lr
			}
			else if(x>99 && x<122)
			{
				return ';';
    2dc8:	203b      	movs	r0, #59	; 0x3b
    2dca:	4770      	bx	lr
			}
			else if(x>132 && x<155)
			{
				return '(';
    2dcc:	2028      	movs	r0, #40	; 0x28
    2dce:	4770      	bx	lr
			}
			else if(x>166 && x<187)
			{
				return ')';
    2dd0:	2029      	movs	r0, #41	; 0x29
    2dd2:	4770      	bx	lr
			}
			else if(x>198 && x<218)
			{
				return '$';
    2dd4:	2024      	movs	r0, #36	; 0x24
    2dd6:	4770      	bx	lr
			}
			else if(x>229 && x<251)
			{
				return '&';
    2dd8:	2026      	movs	r0, #38	; 0x26
    2dda:	4770      	bx	lr
			}
			else if(x>262 && x<283)
			{
				return '@';
    2ddc:	2040      	movs	r0, #64	; 0x40
    2dde:	4770      	bx	lr
	else if(y>197 && y<221)
	{
		if(x>5 && x<35 && y>197 && y<215)
		{
			key = KEY3;
			return key; // CAPS FLAG
    2de0:	2005      	movs	r0, #5
    2de2:	4770      	bx	lr

		if(y>202 && y<221)
		{
			if(x>52 && x<88)
			{
				return '.';
    2de4:	202e      	movs	r0, #46	; 0x2e
    2de6:	4770      	bx	lr
			}
			else if(x>96 && x<132)
			{
				return ',';
    2de8:	202c      	movs	r0, #44	; 0x2c
    2dea:	4770      	bx	lr
			}
			else if(x>142 && x<180)
			{
				return '?';
    2dec:	203f      	movs	r0, #63	; 0x3f
    2dee:	4770      	bx	lr
			}
			else if(x>189 && x<225)
			{
				return '!';
    2df0:	2021      	movs	r0, #33	; 0x21
    2df2:	4770      	bx	lr
			}
			else if(x>235 && x<269)
			{
				return 0x27;   // ' single quote
    2df4:	2027      	movs	r0, #39	; 0x27
    2df6:	4770      	bx	lr
		}
	}
	else if(x>5 && x<57 && y>229 && y<242)
	{
		key = KEY1;
		return key; // Keyboard2 flag
    2df8:	2003      	movs	r0, #3
    2dfa:	4770      	bx	lr
	}
	else if(x>69 && x<251 && y>234 && y<250)
	{
		return ' ';
    2dfc:	2020      	movs	r0, #32
    2dfe:	4770      	bx	lr
	else if(x>263 && x<318 && y>231 && y<250)
	{
		key = CR;
		return key;  // Carriage Return
	}
	return 0;
    2e00:	2000      	movs	r0, #0
}
    2e02:	4770      	bx	lr

00002e04 <Keyboard3>:

schar Keyboard3(uint16_t x, uint16_t y)
{
	schar key;

	if(y>138 && y<161)
    2e04:	f1a1 038b 	sub.w	r3, r1, #139	; 0x8b
    2e08:	b29a      	uxth	r2, r3
    2e0a:	2a15      	cmp	r2, #21
    2e0c:	d838      	bhi.n	2e80 <Keyboard3+0x7c>
	{
		if(y>138 && y<158)
    2e0e:	2a12      	cmp	r2, #18
    2e10:	d808      	bhi.n	2e24 <Keyboard3+0x20>
		{
			if(x>5 && x<25)
    2e12:	1f83      	subs	r3, r0, #6
    2e14:	2b12      	cmp	r3, #18
    2e16:	f240 80b5 	bls.w	2f84 <Keyboard3+0x180>
			{
				return '[';
			}
			else if(x>35 && x<55)
    2e1a:	f1a0 0224 	sub.w	r2, r0, #36	; 0x24
    2e1e:	2a12      	cmp	r2, #18
    2e20:	f240 80b2 	bls.w	2f88 <Keyboard3+0x184>
			{
				return ']';
			}
		}
		if(y>141 && y<161)
    2e24:	398e      	subs	r1, #142	; 0x8e
    2e26:	2912      	cmp	r1, #18
    2e28:	f200 80e0 	bhi.w	2fec <Keyboard3+0x1e8>
		{
			if(x>65 && x<87)
    2e2c:	f1a0 0342 	sub.w	r3, r0, #66	; 0x42
    2e30:	2b14      	cmp	r3, #20
    2e32:	f240 80ab 	bls.w	2f8c <Keyboard3+0x188>
			{
				return '{';
			}
			else if(x>97 && x<122)
    2e36:	f1a0 0262 	sub.w	r2, r0, #98	; 0x62
    2e3a:	2a17      	cmp	r2, #23
    2e3c:	f240 80a8 	bls.w	2f90 <Keyboard3+0x18c>
			{
				return '}';
			}
			else if(x>131 && x<155)
    2e40:	f1a0 0184 	sub.w	r1, r0, #132	; 0x84
    2e44:	2916      	cmp	r1, #22
    2e46:	f240 80a5 	bls.w	2f94 <Keyboard3+0x190>
			{
				return '#';
			}
			else if(x>164 && x<187)
    2e4a:	f1a0 03a5 	sub.w	r3, r0, #165	; 0xa5
    2e4e:	2b15      	cmp	r3, #21
    2e50:	f240 80a2 	bls.w	2f98 <Keyboard3+0x194>
			{
				return '%';
			}
			else if(x>197 && x<219)
    2e54:	f1a0 02c6 	sub.w	r2, r0, #198	; 0xc6
    2e58:	2a14      	cmp	r2, #20
    2e5a:	f240 809f 	bls.w	2f9c <Keyboard3+0x198>
			{
				return '^';
			}
			else if(x>230 && x<254)
    2e5e:	f1a0 01e7 	sub.w	r1, r0, #231	; 0xe7
    2e62:	2916      	cmp	r1, #22
    2e64:	f240 809c 	bls.w	2fa0 <Keyboard3+0x19c>
			{
				return '*';
			}
			else if(x>261 && x<282)
    2e68:	f5a0 7383 	sub.w	r3, r0, #262	; 0x106
    2e6c:	2b13      	cmp	r3, #19
    2e6e:	f240 8099 	bls.w	2fa4 <Keyboard3+0x1a0>
			{
				return '+';
			}
			else if(x>295 && x<317)
    2e72:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
			{
				return '=';
    2e76:	2814      	cmp	r0, #20
    2e78:	bf94      	ite	ls
    2e7a:	213d      	movls	r1, #61	; 0x3d
    2e7c:	2100      	movhi	r1, #0
    2e7e:	e0b6      	b.n	2fee <Keyboard3+0x1ea>
			}
		}
	}
	else if(y>168 && y<192)
    2e80:	f1a1 03a9 	sub.w	r3, r1, #169	; 0xa9
    2e84:	b29a      	uxth	r2, r3
    2e86:	2a16      	cmp	r2, #22
    2e88:	d831      	bhi.n	2eee <Keyboard3+0xea>
	{
		if(y>168 && y<189)
    2e8a:	2a13      	cmp	r2, #19
    2e8c:	d808      	bhi.n	2ea0 <Keyboard3+0x9c>
		{
			if(x>5 && x<25)
    2e8e:	1f83      	subs	r3, r0, #6
    2e90:	2b12      	cmp	r3, #18
    2e92:	f240 8089 	bls.w	2fa8 <Keyboard3+0x1a4>
			{
				return '_';
			}
			else if(x>35 && x<56)
    2e96:	f1a0 0224 	sub.w	r2, r0, #36	; 0x24
    2e9a:	2a13      	cmp	r2, #19
    2e9c:	f240 8086 	bls.w	2fac <Keyboard3+0x1a8>
			{
				return 0x5C; // '\' backslash
			}
		}

		if(y>173 && y<192)
    2ea0:	39ae      	subs	r1, #174	; 0xae
    2ea2:	2911      	cmp	r1, #17
    2ea4:	f200 80a2 	bhi.w	2fec <Keyboard3+0x1e8>
		{
			if(x>64 && x<86)
    2ea8:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
    2eac:	2914      	cmp	r1, #20
    2eae:	d97f      	bls.n	2fb0 <Keyboard3+0x1ac>
			{
				return '|';
			}
			else if(x>97 && x<122)
    2eb0:	f1a0 0362 	sub.w	r3, r0, #98	; 0x62
    2eb4:	2b17      	cmp	r3, #23
    2eb6:	d97d      	bls.n	2fb4 <Keyboard3+0x1b0>
			{
				return '~';
			}
			else if(x>131 && x<155)
    2eb8:	f1a0 0284 	sub.w	r2, r0, #132	; 0x84
    2ebc:	2a16      	cmp	r2, #22
    2ebe:	d97b      	bls.n	2fb8 <Keyboard3+0x1b4>
			{
				return '<';
			}
			else if(x>164 && x<187)
    2ec0:	f1a0 01a5 	sub.w	r1, r0, #165	; 0xa5
    2ec4:	2915      	cmp	r1, #21
    2ec6:	d979      	bls.n	2fbc <Keyboard3+0x1b8>
			{
				return '>';
			}
			else if(x>198 && x<219)
    2ec8:	f1a0 03c7 	sub.w	r3, r0, #199	; 0xc7
    2ecc:	2b13      	cmp	r3, #19
    2ece:	d977      	bls.n	2fc0 <Keyboard3+0x1bc>
			{
				return 0x7F;  // pound symbol
			}
			else if(x>230 && x<254)
    2ed0:	f1a0 02e7 	sub.w	r2, r0, #231	; 0xe7
    2ed4:	2a16      	cmp	r2, #22
    2ed6:	d975      	bls.n	2fc4 <Keyboard3+0x1c0>
			{
				return 0x81;  // Euro dollar symbol
			}
			else if(x>261 && x<282)
    2ed8:	f5a0 7183 	sub.w	r1, r0, #262	; 0x106
    2edc:	2913      	cmp	r1, #19
    2ede:	d973      	bls.n	2fc8 <Keyboard3+0x1c4>
			{
				return 0x80;  // Yen symbol
			}
			else if(x>293 && x<317)
    2ee0:	f5a0 7093 	sub.w	r0, r0, #294	; 0x126
			{
				return 0x82;   // Center dot
    2ee4:	2816      	cmp	r0, #22
    2ee6:	bf94      	ite	ls
    2ee8:	2182      	movls	r1, #130	; 0x82
    2eea:	2100      	movhi	r1, #0
    2eec:	e07f      	b.n	2fee <Keyboard3+0x1ea>
			}
		}
	}
	else if(y>197 && y<221)
    2eee:	f1a1 03c6 	sub.w	r3, r1, #198	; 0xc6
    2ef2:	2b16      	cmp	r3, #22
    2ef4:	f1a0 0206 	sub.w	r2, r0, #6
	{
		if(x>5 && x<34 && y>197 && y<215)
    2ef8:	b293      	uxth	r3, r2
			{
				return 0x82;   // Center dot
			}
		}
	}
	else if(y>197 && y<221)
    2efa:	d821      	bhi.n	2f40 <Keyboard3+0x13c>
	{
		if(x>5 && x<34 && y>197 && y<215)
    2efc:	2b1b      	cmp	r3, #27
    2efe:	d801      	bhi.n	2f04 <Keyboard3+0x100>
    2f00:	29d6      	cmp	r1, #214	; 0xd6
    2f02:	d963      	bls.n	2fcc <Keyboard3+0x1c8>
		{
			key = KEY2;
			return key; // CAPS FLAG
		}

		if(y>202 && y<221)
    2f04:	39cb      	subs	r1, #203	; 0xcb
    2f06:	2911      	cmp	r1, #17
    2f08:	d870      	bhi.n	2fec <Keyboard3+0x1e8>
		{
			if(x>50 && x<84)
    2f0a:	f1a0 0133 	sub.w	r1, r0, #51	; 0x33
    2f0e:	2920      	cmp	r1, #32
    2f10:	d95e      	bls.n	2fd0 <Keyboard3+0x1cc>
			{
				return '.';
			}
			else if(x>95 && x<131)
    2f12:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
    2f16:	2a22      	cmp	r2, #34	; 0x22
    2f18:	d95c      	bls.n	2fd4 <Keyboard3+0x1d0>
			{
				return ',';
			}
			else if(x>141 && x<179)
    2f1a:	f1a0 038e 	sub.w	r3, r0, #142	; 0x8e
    2f1e:	2b24      	cmp	r3, #36	; 0x24
    2f20:	d95a      	bls.n	2fd8 <Keyboard3+0x1d4>
			{
				return '?';
			}
			else if(x>188 && x<224)
    2f22:	f1a0 01bd 	sub.w	r1, r0, #189	; 0xbd
    2f26:	2922      	cmp	r1, #34	; 0x22
    2f28:	d958      	bls.n	2fdc <Keyboard3+0x1d8>
			{
				return '!';
			}
			else if(x>232 && x<269)
    2f2a:	f1a0 02e9 	sub.w	r2, r0, #233	; 0xe9
    2f2e:	2a23      	cmp	r2, #35	; 0x23
    2f30:	d956      	bls.n	2fe0 <Keyboard3+0x1dc>
			{
				return 0x27;   // ' single quote
			}
			else if(x>285 && x<317)
    2f32:	f5a0 708f 	sub.w	r0, r0, #286	; 0x11e
			{
				key = BK_SPACE;
				return key;  // Backspace flag
    2f36:	281e      	cmp	r0, #30
    2f38:	bf94      	ite	ls
    2f3a:	2102      	movls	r1, #2
    2f3c:	2100      	movhi	r1, #0
    2f3e:	e056      	b.n	2fee <Keyboard3+0x1ea>
			}
		}
	}
	else if(x>5 && x<24 && y>225 && y<241)
    2f40:	2b11      	cmp	r3, #17
    2f42:	d803      	bhi.n	2f4c <Keyboard3+0x148>
    2f44:	29e1      	cmp	r1, #225	; 0xe1
    2f46:	d901      	bls.n	2f4c <Keyboard3+0x148>
    2f48:	29f0      	cmp	r1, #240	; 0xf0
    2f4a:	d94b      	bls.n	2fe4 <Keyboard3+0x1e0>
	{
		key = KEY1;
		return key; // Keyboard2 flag
	}
	else if(x>34 && x<57 && y>225 && y<241)
    2f4c:	f1a0 0223 	sub.w	r2, r0, #35	; 0x23
    2f50:	2a15      	cmp	r2, #21
    2f52:	d803      	bhi.n	2f5c <Keyboard3+0x158>
    2f54:	29e1      	cmp	r1, #225	; 0xe1
    2f56:	d901      	bls.n	2f5c <Keyboard3+0x158>
    2f58:	29f0      	cmp	r1, #240	; 0xf0
    2f5a:	d947      	bls.n	2fec <Keyboard3+0x1e8>
	{
		// Globe Symbol
	}
	else if(x>68 && x<251 && y>234 && y<250)
    2f5c:	f1a0 0345 	sub.w	r3, r0, #69	; 0x45
    2f60:	2bb5      	cmp	r3, #181	; 0xb5
    2f62:	d803      	bhi.n	2f6c <Keyboard3+0x168>
    2f64:	29ea      	cmp	r1, #234	; 0xea
    2f66:	d901      	bls.n	2f6c <Keyboard3+0x168>
    2f68:	29f9      	cmp	r1, #249	; 0xf9
    2f6a:	d93d      	bls.n	2fe8 <Keyboard3+0x1e4>
	{
		return ' ';
	}
	else if(x>262 && x<318 && y>231 && y<250)
    2f6c:	f46f 7c83 	mvn.w	ip, #262	; 0x106
    2f70:	4460      	add	r0, ip
    2f72:	2836      	cmp	r0, #54	; 0x36
    2f74:	d83a      	bhi.n	2fec <Keyboard3+0x1e8>
    2f76:	29e7      	cmp	r1, #231	; 0xe7
    2f78:	d938      	bls.n	2fec <Keyboard3+0x1e8>
	{
		key = CR;
		return key;  // Carriage Return
    2f7a:	29f9      	cmp	r1, #249	; 0xf9
    2f7c:	bf94      	ite	ls
    2f7e:	2106      	movls	r1, #6
    2f80:	2100      	movhi	r1, #0
    2f82:	e034      	b.n	2fee <Keyboard3+0x1ea>
	{
		if(y>138 && y<158)
		{
			if(x>5 && x<25)
			{
				return '[';
    2f84:	215b      	movs	r1, #91	; 0x5b
    2f86:	e032      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>35 && x<55)
			{
				return ']';
    2f88:	215d      	movs	r1, #93	; 0x5d
    2f8a:	e030      	b.n	2fee <Keyboard3+0x1ea>
		}
		if(y>141 && y<161)
		{
			if(x>65 && x<87)
			{
				return '{';
    2f8c:	217b      	movs	r1, #123	; 0x7b
    2f8e:	e02e      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>97 && x<122)
			{
				return '}';
    2f90:	217d      	movs	r1, #125	; 0x7d
    2f92:	e02c      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>131 && x<155)
			{
				return '#';
    2f94:	2123      	movs	r1, #35	; 0x23
    2f96:	e02a      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>164 && x<187)
			{
				return '%';
    2f98:	2125      	movs	r1, #37	; 0x25
    2f9a:	e028      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>197 && x<219)
			{
				return '^';
    2f9c:	215e      	movs	r1, #94	; 0x5e
    2f9e:	e026      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>230 && x<254)
			{
				return '*';
    2fa0:	212a      	movs	r1, #42	; 0x2a
    2fa2:	e024      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>261 && x<282)
			{
				return '+';
    2fa4:	212b      	movs	r1, #43	; 0x2b
    2fa6:	e022      	b.n	2fee <Keyboard3+0x1ea>
	{
		if(y>168 && y<189)
		{
			if(x>5 && x<25)
			{
				return '_';
    2fa8:	215f      	movs	r1, #95	; 0x5f
    2faa:	e020      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>35 && x<56)
			{
				return 0x5C; // '\' backslash
    2fac:	215c      	movs	r1, #92	; 0x5c
    2fae:	e01e      	b.n	2fee <Keyboard3+0x1ea>

		if(y>173 && y<192)
		{
			if(x>64 && x<86)
			{
				return '|';
    2fb0:	217c      	movs	r1, #124	; 0x7c
    2fb2:	e01c      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>97 && x<122)
			{
				return '~';
    2fb4:	217e      	movs	r1, #126	; 0x7e
    2fb6:	e01a      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>131 && x<155)
			{
				return '<';
    2fb8:	213c      	movs	r1, #60	; 0x3c
    2fba:	e018      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>164 && x<187)
			{
				return '>';
    2fbc:	213e      	movs	r1, #62	; 0x3e
    2fbe:	e016      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>198 && x<219)
			{
				return 0x7F;  // pound symbol
    2fc0:	217f      	movs	r1, #127	; 0x7f
    2fc2:	e014      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>230 && x<254)
			{
				return 0x81;  // Euro dollar symbol
    2fc4:	2181      	movs	r1, #129	; 0x81
    2fc6:	e012      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>261 && x<282)
			{
				return 0x80;  // Yen symbol
    2fc8:	2180      	movs	r1, #128	; 0x80
    2fca:	e010      	b.n	2fee <Keyboard3+0x1ea>
	else if(y>197 && y<221)
	{
		if(x>5 && x<34 && y>197 && y<215)
		{
			key = KEY2;
			return key; // CAPS FLAG
    2fcc:	2104      	movs	r1, #4
    2fce:	e00e      	b.n	2fee <Keyboard3+0x1ea>

		if(y>202 && y<221)
		{
			if(x>50 && x<84)
			{
				return '.';
    2fd0:	212e      	movs	r1, #46	; 0x2e
    2fd2:	e00c      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>95 && x<131)
			{
				return ',';
    2fd4:	212c      	movs	r1, #44	; 0x2c
    2fd6:	e00a      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>141 && x<179)
			{
				return '?';
    2fd8:	213f      	movs	r1, #63	; 0x3f
    2fda:	e008      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>188 && x<224)
			{
				return '!';
    2fdc:	2121      	movs	r1, #33	; 0x21
    2fde:	e006      	b.n	2fee <Keyboard3+0x1ea>
			}
			else if(x>232 && x<269)
			{
				return 0x27;   // ' single quote
    2fe0:	2127      	movs	r1, #39	; 0x27
    2fe2:	e004      	b.n	2fee <Keyboard3+0x1ea>
		}
	}
	else if(x>5 && x<24 && y>225 && y<241)
	{
		key = KEY1;
		return key; // Keyboard2 flag
    2fe4:	2103      	movs	r1, #3
    2fe6:	e002      	b.n	2fee <Keyboard3+0x1ea>
	{
		// Globe Symbol
	}
	else if(x>68 && x<251 && y>234 && y<250)
	{
		return ' ';
    2fe8:	2120      	movs	r1, #32
    2fea:	e000      	b.n	2fee <Keyboard3+0x1ea>
	else if(x>262 && x<318 && y>231 && y<250)
	{
		key = CR;
		return key;  // Carriage Return
	}
	return 0;
    2fec:	2100      	movs	r1, #0
}
    2fee:	b248      	sxtb	r0, r1
    2ff0:	4770      	bx	lr

00002ff2 <Write_Command_Glcd>:
 * @brief	    This function writes commands to the GLCD
 * @param[in]	Command		command to be written on GLCD
 * @return 		status
 **********************************************************************/
uchar Write_Command_Glcd (uint8_t Command)
{
    2ff2:	b510      	push	{r4, lr}
    2ff4:	b08a      	sub	sp, #40	; 0x28
    2ff6:	ac0a      	add	r4, sp, #40	; 0x28
    2ff8:	f804 0d21 	strb.w	r0, [r4, #-33]!
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;
	__IO uint32_t i;

	GPIO_ClearValue(2, LCD_RS);  //select command mode
    2ffc:	2101      	movs	r1, #1
    2ffe:	2002      	movs	r0, #2
    3000:	f7fd f966 	bl	2d0 <GPIO_ClearValue>

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
    3004:	4810      	ldr	r0, [pc, #64]	; (3048 <Write_Command_Glcd+0x56>)
    3006:	2100      	movs	r1, #0
    3008:	f7fd ff66 	bl	ed8 <CS_Force1>
	xferConfig.tx_data = &Command;               /* Send Instruction Byte    */
    300c:	9404      	str	r4, [sp, #16]
	xferConfig.rx_data = NULL;
    300e:	2200      	movs	r2, #0
	xferConfig.length = 1;
    3010:	2401      	movs	r4, #1
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    3012:	480d      	ldr	r0, [pc, #52]	; (3048 <Write_Command_Glcd+0x56>)
    3014:	a904      	add	r1, sp, #16

	GPIO_ClearValue(2, LCD_RS);  //select command mode

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
	xferConfig.tx_data = &Command;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
    3016:	9206      	str	r2, [sp, #24]
	xferConfig.length = 1;
    3018:	9408      	str	r4, [sp, #32]
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    301a:	f7fe f897 	bl	114c <SSP_ReadWrite>

	if(WriteStatus)
    301e:	b2c0      	uxtb	r0, r0
    3020:	b180      	cbz	r0, 3044 <Write_Command_Glcd+0x52>
	{
		CS_Force1 (LPC_SSP1, ENABLE);                          /* CS high inactive        */
    3022:	4621      	mov	r1, r4
    3024:	4808      	ldr	r0, [pc, #32]	; (3048 <Write_Command_Glcd+0x56>)
    3026:	f7fd ff57 	bl	ed8 <CS_Force1>
		for(i=925; i>0; i--);
    302a:	f240 319d 	movw	r1, #925	; 0x39d
    302e:	9103      	str	r1, [sp, #12]
    3030:	9b03      	ldr	r3, [sp, #12]
    3032:	b113      	cbz	r3, 303a <Write_Command_Glcd+0x48>
    3034:	9803      	ldr	r0, [sp, #12]
    3036:	1e41      	subs	r1, r0, #1
    3038:	e7f9      	b.n	302e <Write_Command_Glcd+0x3c>
		GPIO_SetValue(2, LCD_RS);  // select data mode
    303a:	2002      	movs	r0, #2
    303c:	2101      	movs	r1, #1
    303e:	f7fd f93d 	bl	2bc <GPIO_SetValue>
    3042:	2001      	movs	r0, #1
		return(1);
	}
	else
		return(0);
}
    3044:	b00a      	add	sp, #40	; 0x28
    3046:	bd10      	pop	{r4, pc}
    3048:	40030000 	.word	0x40030000

0000304c <Write_Data_Glcd>:
 * @brief	    This function writes data to the GLCD
 * @param[in]	data	data to be written on GLCD
 * @return 		None
 **********************************************************************/
uchar Write_Data_Glcd (uint16_t data)
{
    304c:	b510      	push	{r4, lr}
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;

	Tx_Buf1[0] = (uchar)(data>>8);    // 1st byte extract
    304e:	4c0f      	ldr	r4, [pc, #60]	; (308c <Write_Data_Glcd+0x40>)
 * @brief	    This function writes data to the GLCD
 * @param[in]	data	data to be written on GLCD
 * @return 		None
 **********************************************************************/
uchar Write_Data_Glcd (uint16_t data)
{
    3050:	b086      	sub	sp, #24
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;

	Tx_Buf1[0] = (uchar)(data>>8);    // 1st byte extract
    3052:	0a03      	lsrs	r3, r0, #8
	Tx_Buf1[1] = (uchar) data;        // 2nd byte extract
    3054:	7060      	strb	r0, [r4, #1]

	GPIO_SetValue(2, LCD_RS);  // select data mode
    3056:	2101      	movs	r1, #1
    3058:	2002      	movs	r0, #2
uchar Write_Data_Glcd (uint16_t data)
{
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;

	Tx_Buf1[0] = (uchar)(data>>8);    // 1st byte extract
    305a:	7023      	strb	r3, [r4, #0]
	Tx_Buf1[1] = (uchar) data;        // 2nd byte extract

	GPIO_SetValue(2, LCD_RS);  // select data mode
    305c:	f7fd f92e 	bl	2bc <GPIO_SetValue>

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
    3060:	480b      	ldr	r0, [pc, #44]	; (3090 <Write_Data_Glcd+0x44>)
    3062:	2100      	movs	r1, #0
    3064:	f7fd ff38 	bl	ed8 <CS_Force1>
	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
	xferConfig.length = 2;
    3068:	2002      	movs	r0, #2

	GPIO_SetValue(2, LCD_RS);  // select data mode

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
    306a:	2200      	movs	r2, #0
	xferConfig.length = 2;
    306c:	9004      	str	r0, [sp, #16]
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    306e:	4669      	mov	r1, sp
    3070:	4807      	ldr	r0, [pc, #28]	; (3090 <Write_Data_Glcd+0x44>)
	Tx_Buf1[1] = (uchar) data;        // 2nd byte extract

	GPIO_SetValue(2, LCD_RS);  // select data mode

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
    3072:	9400      	str	r4, [sp, #0]
	xferConfig.rx_data = NULL;
    3074:	9202      	str	r2, [sp, #8]
	xferConfig.length = 2;
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    3076:	f7fe f869 	bl	114c <SSP_ReadWrite>

	if(WriteStatus)
    307a:	b2c0      	uxtb	r0, r0
    307c:	b120      	cbz	r0, 3088 <Write_Data_Glcd+0x3c>
	{
		CS_Force1 (LPC_SSP1, ENABLE);                          /* CS high inactive        */
    307e:	4804      	ldr	r0, [pc, #16]	; (3090 <Write_Data_Glcd+0x44>)
    3080:	2101      	movs	r1, #1
    3082:	f7fd ff29 	bl	ed8 <CS_Force1>
    3086:	2001      	movs	r0, #1
		return(1);
	}
	else
		return(0);
}
    3088:	b006      	add	sp, #24
    308a:	bd10      	pop	{r4, pc}
    308c:	100002cc 	.word	0x100002cc
    3090:	40030000 	.word	0x40030000

00003094 <GLCD_Draw_Char>:
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    3094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int idx = 0, i, j;

	x = x-CHAR_W;
    3096:	f1a0 0510 	sub.w	r5, r0, #16
    309a:	b2ad      	uxth	r5, r5
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    309c:	4606      	mov	r6, r0
	int idx = 0, i, j;

	x = x-CHAR_W;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    309e:	2045      	movs	r0, #69	; 0x45
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    30a0:	460c      	mov	r4, r1
    30a2:	4617      	mov	r7, r2
	int idx = 0, i, j;

	x = x-CHAR_W;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    30a4:	f7ff ffa5 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    30a8:	4628      	mov	r0, r5
    30aa:	f7ff ffcf 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
    30ae:	2046      	movs	r0, #70	; 0x46
    30b0:	f7ff ff9f 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(x+CHAR_W-1);
    30b4:	1e70      	subs	r0, r6, #1
    30b6:	b280      	uxth	r0, r0
    30b8:	f7ff ffc8 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
    30bc:	2044      	movs	r0, #68	; 0x44
    30be:	f7ff ff98 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    30c2:	4620      	mov	r0, r4
    30c4:	f7ff ffc2 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
    30c8:	2044      	movs	r0, #68	; 0x44
    30ca:	f7ff ff92 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd((y+CHAR_H-1)<<8);
    30ce:	f104 0117 	add.w	r1, r4, #23
    30d2:	020a      	lsls	r2, r1, #8
    30d4:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
    30d8:	f7ff ffb8 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    30dc:	204e      	movs	r0, #78	; 0x4e
    30de:	f7ff ff88 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    30e2:	4628      	mov	r0, r5
    30e4:	f7ff ffb2 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    30e8:	204f      	movs	r0, #79	; 0x4f
    30ea:	f7ff ff82 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    30ee:	4620      	mov	r0, r4
    30f0:	f7ff ffac 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x22);
    30f4:	2022      	movs	r0, #34	; 0x22
    30f6:	f7ff ff7c 	bl	2ff2 <Write_Command_Glcd>

	wr_dat_start();
    30fa:	f7ff fc49 	bl	2990 <wr_dat_start>
    30fe:	2500      	movs	r5, #0
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    3100:	2400      	movs	r4, #0
	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
	{
		for (i = 0; i<CHAR_W; i++)
		{
			if((c[idx] & (1 << i)) == 0x00)
    3102:	5b7b      	ldrh	r3, [r7, r5]
    3104:	fa43 f304 	asr.w	r3, r3, r4
    3108:	07d8      	lsls	r0, r3, #31
			{
				wr_dat_only(BackColor);
    310a:	bf54      	ite	pl
    310c:	4807      	ldrpl	r0, [pc, #28]	; (312c <GLCD_Draw_Char+0x98>)
			}
			else
			{
				wr_dat_only(TextColor);
    310e:	4808      	ldrmi	r0, [pc, #32]	; (3130 <GLCD_Draw_Char+0x9c>)
	Write_Command_Glcd(0x22);

	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
	{
		for (i = 0; i<CHAR_W; i++)
    3110:	3401      	adds	r4, #1
			{
				wr_dat_only(BackColor);
			}
			else
			{
				wr_dat_only(TextColor);
    3112:	8801      	ldrh	r1, [r0, #0]
    3114:	b288      	uxth	r0, r1
    3116:	f7ff fc4f 	bl	29b8 <wr_dat_only>
	Write_Command_Glcd(0x22);

	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
	{
		for (i = 0; i<CHAR_W; i++)
    311a:	2c10      	cmp	r4, #16
    311c:	d1f1      	bne.n	3102 <GLCD_Draw_Char+0x6e>
    311e:	3502      	adds	r5, #2
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x22);

	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
    3120:	2d30      	cmp	r5, #48	; 0x30
    3122:	d1ed      	bne.n	3100 <GLCD_Draw_Char+0x6c>
			}
		}
		c++;
	}
	wr_dat_stop();
}
    3124:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				wr_dat_only(TextColor);
			}
		}
		c++;
	}
	wr_dat_stop();
    3128:	f7ff bc40 	b.w	29ac <wr_dat_stop>
    312c:	2007c006 	.word	0x2007c006
    3130:	10000036 	.word	0x10000036

00003134 <GLCD_Display_Char>:
 *              c        ascii character
 * @return 		None
 **********************************************************************/
void GLCD_Display_Char (uint16_t ln, uint16_t col, uchar c)
{
	c -= 32;
    3134:	3a20      	subs	r2, #32
	GLCD_Draw_Char(col * CHAR_W, ln * CHAR_H, (uint16_t *)&Font_24x16[c * CHAR_H]);
    3136:	2318      	movs	r3, #24
    3138:	b2d2      	uxtb	r2, r2
    313a:	4358      	muls	r0, r3
 *              col      column number
 *              c        ascii character
 * @return 		None
 **********************************************************************/
void GLCD_Display_Char (uint16_t ln, uint16_t col, uchar c)
{
    313c:	b510      	push	{r4, lr}
	c -= 32;
	GLCD_Draw_Char(col * CHAR_W, ln * CHAR_H, (uint16_t *)&Font_24x16[c * CHAR_H]);
    313e:	4353      	muls	r3, r2
    3140:	0109      	lsls	r1, r1, #4
    3142:	4a05      	ldr	r2, [pc, #20]	; (3158 <GLCD_Display_Char+0x24>)
    3144:	b28c      	uxth	r4, r1
    3146:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    314a:	b281      	uxth	r1, r0
    314c:	4620      	mov	r0, r4
}
    314e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @return 		None
 **********************************************************************/
void GLCD_Display_Char (uint16_t ln, uint16_t col, uchar c)
{
	c -= 32;
	GLCD_Draw_Char(col * CHAR_W, ln * CHAR_H, (uint16_t *)&Font_24x16[c * CHAR_H]);
    3152:	f7ff bf9f 	b.w	3094 <GLCD_Draw_Char>
    3156:	bf00      	nop
    3158:	00005b92 	.word	0x00005b92

0000315c <GLCD_PutPixel>:
 * @param[in]	x        horizontal position
 *              y        vertical position
 * @return 		None
 **********************************************************************/
void GLCD_PutPixel (uint16_t x, uint16_t y, uint16_t color)
{
    315c:	b570      	push	{r4, r5, r6, lr}
    315e:	4604      	mov	r4, r0
	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    3160:	204e      	movs	r0, #78	; 0x4e
 * @param[in]	x        horizontal position
 *              y        vertical position
 * @return 		None
 **********************************************************************/
void GLCD_PutPixel (uint16_t x, uint16_t y, uint16_t color)
{
    3162:	460d      	mov	r5, r1
    3164:	4616      	mov	r6, r2
	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    3166:	f7ff ff44 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    316a:	4620      	mov	r0, r4
    316c:	f7ff ff6e 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    3170:	204f      	movs	r0, #79	; 0x4f
    3172:	f7ff ff3e 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    3176:	4628      	mov	r0, r5
    3178:	f7ff ff68 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x22);      /* RAM data write     */
    317c:	2022      	movs	r0, #34	; 0x22
    317e:	f7ff ff38 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(color);
    3182:	4630      	mov	r0, r6
}
    3184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x22);      /* RAM data write     */
	Write_Data_Glcd(color);
    3188:	f7ff bf60 	b.w	304c <Write_Data_Glcd>

0000318c <GLCD_Text>:
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
    318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3190:	b091      	sub	sp, #68	; 0x44
    3192:	af00      	add	r7, sp, #0
    3194:	f997 5074 	ldrsb.w	r5, [r7, #116]	; 0x74
    3198:	613b      	str	r3, [r7, #16]
    319a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
    319e:	f897 4068 	ldrb.w	r4, [r7, #104]	; 0x68
    31a2:	60fb      	str	r3, [r7, #12]
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    31a4:	b2ab      	uxth	r3, r5
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
    31a6:	617a      	str	r2, [r7, #20]
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    31a8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
    31aa:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    31ae:	4363      	muls	r3, r4

   for(i=0; i<length; ++i, ++x) // Loop through the passed string
   {
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
    31b0:	fb05 f604 	mul.w	r6, r5, r4
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
    31b4:	436a      	muls	r2, r5
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
    31b6:	63f8      	str	r0, [r7, #60]	; 0x3c
   int16_t i, j, k, l, m;                     // Loop counters
   uint8_t pixelData[row];                     // Stores character data
    31b8:	1de0      	adds	r0, r4, #7
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
    31ba:	6339      	str	r1, [r7, #48]	; 0x30
   int16_t i, j, k, l, m;                     // Loop counters
   uint8_t pixelData[row];                     // Stores character data
    31bc:	f400 71fc 	and.w	r1, r0, #504	; 0x1f8
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    31c0:	1c58      	adds	r0, r3, #1
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
   int16_t i, j, k, l, m;                     // Loop counters
   uint8_t pixelData[row];                     // Stores character data
    31c2:	ebad 0d01 	sub.w	sp, sp, r1

   for(i=0; i<length; ++i, ++x) // Loop through the passed string
   {
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
    31c6:	62be      	str	r6, [r7, #40]	; 0x28
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    31c8:	b281      	uxth	r1, r0
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    31ca:	b29e      	uxth	r6, r3
    31cc:	61be      	str	r6, [r7, #24]
{
   int16_t i, j, k, l, m;                     // Loop counters
   uint8_t pixelData[row];                     // Stores character data
    31ce:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    31d2:	6279      	str	r1, [r7, #36]	; 0x24
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
    31d4:	623a      	str	r2, [r7, #32]
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
   int16_t i, j, k, l, m;                     // Loop counters
   uint8_t pixelData[row];                     // Stores character data

   for(i=0; i<length; ++i, ++x) // Loop through the passed string
    31d6:	2600      	movs	r6, #0
    31d8:	693b      	ldr	r3, [r7, #16]
    31da:	429e      	cmp	r6, r3
    31dc:	da6a      	bge.n	32b4 <GLCD_Text+0x128>
   {
      memcpy(pixelData, font[textptr[i]-' '], row);
    31de:	6978      	ldr	r0, [r7, #20]
    31e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    31e2:	5d81      	ldrb	r1, [r0, r6]
    31e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    31e6:	3920      	subs	r1, #32
    31e8:	fb04 2101 	mla	r1, r4, r1, r2
    31ec:	4622      	mov	r2, r4
    31ee:	f002 fb17 	bl	5820 <memcpy>

      if(x+row*size >= 320)          // Performs character wrapping
    31f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    31f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    31f6:	1819      	adds	r1, r3, r0
    31f8:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
    31fc:	db06      	blt.n	320c <GLCD_Text+0x80>
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    31fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3202:	18d0      	adds	r0, r2, r3
    3204:	b201      	sxth	r1, r0
   {
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
    3206:	2200      	movs	r2, #0
         y += row*size + 1;                 // Set y at next position down
    3208:	6339      	str	r1, [r7, #48]	; 0x30
   {
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
    320a:	63fa      	str	r2, [r7, #60]	; 0x3c
         y += row*size + 1;                 // Set y at next position down
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
    320c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    320e:	f04f 0800 	mov.w	r8, #0
    3212:	63bb      	str	r3, [r7, #56]	; 0x38
    3214:	45a0      	cmp	r8, r4
    3216:	da45      	bge.n	32a4 <GLCD_Text+0x118>
    3218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    321a:	f04f 0c00 	mov.w	ip, #0
    321e:	fa1f fb81 	uxth.w	fp, r1
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
    3222:	6a3a      	ldr	r2, [r7, #32]
    3224:	4594      	cmp	ip, r2
    3226:	da35      	bge.n	3294 <GLCD_Text+0x108>
         {
            if(bit_test(pixelData[j], k)) // Check if the pixel should be set
    3228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    322a:	f813 0008 	ldrb.w	r0, [r3, r8]
    322e:	fa40 f10c 	asr.w	r1, r0, ip
    3232:	07ca      	lsls	r2, r1, #31
    3234:	d406      	bmi.n	3244 <GLCD_Text+0xb8>
    3236:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3238:	f10c 0c01 	add.w	ip, ip, #1
    323c:	4483      	add	fp, r0
    323e:	fa1f fb8b 	uxth.w	fp, fp
    3242:	e7ee      	b.n	3222 <GLCD_Text+0x96>
    3244:	f04f 0a00 	mov.w	sl, #0
            {
               for(l=0; l<size; ++l)      // The next two loops change the
    3248:	fa0f f28a 	sxth.w	r2, sl
    324c:	b2ab      	uxth	r3, r5
    324e:	4295      	cmp	r5, r2
    3250:	61fb      	str	r3, [r7, #28]
    3252:	ddf0      	ble.n	3236 <GLCD_Text+0xaa>
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    3254:	eb0b 010a 	add.w	r1, fp, sl
    3258:	b28b      	uxth	r3, r1
    325a:	f04f 0900 	mov.w	r9, #0
    325e:	6bba      	ldr	r2, [r7, #56]	; 0x38
            {
               for(l=0; l<size; ++l)      // The next two loops change the
               {                          // character's size
                  for(m=0; m<size; ++m)
                  {
                     GLCD_PutPixel(x+m, y+k*size+l, color); // Draws the pixel
    3260:	4619      	mov	r1, r3
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    3262:	eb09 0002 	add.w	r0, r9, r2
            {
               for(l=0; l<size; ++l)      // The next two loops change the
               {                          // character's size
                  for(m=0; m<size; ++m)
                  {
                     GLCD_PutPixel(x+m, y+k*size+l, color); // Draws the pixel
    3266:	b280      	uxth	r0, r0
    3268:	68fa      	ldr	r2, [r7, #12]
    326a:	607b      	str	r3, [r7, #4]
    326c:	f8c7 c008 	str.w	ip, [r7, #8]
    3270:	f7ff ff74 	bl	315c <GLCD_PutPixel>
         {
            if(bit_test(pixelData[j], k)) // Check if the pixel should be set
            {
               for(l=0; l<size; ++l)      // The next two loops change the
               {                          // character's size
                  for(m=0; m<size; ++m)
    3274:	69fb      	ldr	r3, [r7, #28]
    3276:	f109 0901 	add.w	r9, r9, #1
    327a:	b21a      	sxth	r2, r3
    327c:	fa0f f189 	sxth.w	r1, r9
    3280:	4291      	cmp	r1, r2
    3282:	687b      	ldr	r3, [r7, #4]
    3284:	f8d7 c008 	ldr.w	ip, [r7, #8]
    3288:	dbe9      	blt.n	325e <GLCD_Text+0xd2>
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
         {
            if(bit_test(pixelData[j], k)) // Check if the pixel should be set
            {
               for(l=0; l<size; ++l)      // The next two loops change the
    328a:	f10a 0a01 	add.w	sl, sl, #1
    328e:	fa1f fa8a 	uxth.w	sl, sl
    3292:	e7d9      	b.n	3248 <GLCD_Text+0xbc>
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, uint8_t* textptr, uint16_t length, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    3294:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3298:	f108 0801 	add.w	r8, r8, #1
    329c:	1819      	adds	r1, r3, r0
    329e:	b20a      	sxth	r2, r1
    32a0:	63ba      	str	r2, [r7, #56]	; 0x38
    32a2:	e7b7      	b.n	3214 <GLCD_Text+0x88>
    32a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    32a6:	69b9      	ldr	r1, [r7, #24]
    32a8:	3601      	adds	r6, #1
    32aa:	1842      	adds	r2, r0, r1
{
   int16_t i, j, k, l, m;                     // Loop counters
   uint8_t pixelData[row];                     // Stores character data

   for(i=0; i<length; ++i, ++x) // Loop through the passed string
    32ac:	1c53      	adds	r3, r2, #1
    32ae:	b218      	sxth	r0, r3
    32b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    32b2:	e791      	b.n	31d8 <GLCD_Text+0x4c>
               }
            }
         }
      }
   }
}
    32b4:	f107 0744 	add.w	r7, r7, #68	; 0x44
    32b8:	46bd      	mov	sp, r7
    32ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000032be <gprintf>:
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 gprintf(int16_t x, int16_t y, int8_t size, uint16_t color, const char *format, ...)
{
    32be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32c2:	469a      	mov	sl, r3
    32c4:	b0a7      	sub	sp, #156	; 0x9c
	uchar hex[]= "0123456789ABCDEF";
    32c6:	4ba0      	ldr	r3, [pc, #640]	; (3548 <gprintf+0x28a>)
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 gprintf(int16_t x, int16_t y, int8_t size, uint16_t color, const char *format, ...)
{
    32c8:	f8dd b0c0 	ldr.w	fp, [sp, #192]	; 0xc0
    32cc:	4616      	mov	r6, r2
    32ce:	4604      	mov	r4, r0
    32d0:	460d      	mov	r5, r1
	uchar hex[]= "0123456789ABCDEF";
    32d2:	aa0d      	add	r2, sp, #52	; 0x34
    32d4:	f103 0e10 	add.w	lr, r3, #16
    32d8:	6818      	ldr	r0, [r3, #0]
    32da:	6859      	ldr	r1, [r3, #4]
    32dc:	4617      	mov	r7, r2
    32de:	c703      	stmia	r7!, {r0, r1}
    32e0:	3308      	adds	r3, #8
    32e2:	4573      	cmp	r3, lr
    32e4:	463a      	mov	r2, r7
    32e6:	d1f7      	bne.n	32d8 <gprintf+0x1a>
    32e8:	7818      	ldrb	r0, [r3, #0]
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    32ea:	2100      	movs	r1, #0
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 gprintf(int16_t x, int16_t y, int8_t size, uint16_t color, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
    32ec:	7038      	strb	r0, [r7, #0]
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    32ee:	2228      	movs	r2, #40	; 0x28
    32f0:	a812      	add	r0, sp, #72	; 0x48
    32f2:	f002 fb43 	bl	597c <memset>
    32f6:	210a      	movs	r1, #10
    32f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    32fc:	9113      	str	r1, [sp, #76]	; 0x4c
    32fe:	2364      	movs	r3, #100	; 0x64
    3300:	9215      	str	r2, [sp, #84]	; 0x54
    3302:	4992      	ldr	r1, [pc, #584]	; (354c <gprintf+0x28e>)
    3304:	4a92      	ldr	r2, [pc, #584]	; (3550 <gprintf+0x292>)
    3306:	9314      	str	r3, [sp, #80]	; 0x50
    3308:	f242 7010 	movw	r0, #10000	; 0x2710
    330c:	4b91      	ldr	r3, [pc, #580]	; (3554 <gprintf+0x296>)
    330e:	2701      	movs	r7, #1
    3310:	9016      	str	r0, [sp, #88]	; 0x58
    3312:	9117      	str	r1, [sp, #92]	; 0x5c
    3314:	9219      	str	r2, [sp, #100]	; 0x64
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    3316:	2100      	movs	r1, #0
    3318:	2228      	movs	r2, #40	; 0x28
    331a:	a81c      	add	r0, sp, #112	; 0x70
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 gprintf(int16_t x, int16_t y, int8_t size, uint16_t color, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    331c:	9712      	str	r7, [sp, #72]	; 0x48
    331e:	9318      	str	r3, [sp, #96]	; 0x60
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    3320:	f002 fb2c 	bl	597c <memset>
    3324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
			if(!format_flag)
			{                        // until '%' or '\0'
				return (0);
			}

		    if(x+5*size >= 320)          // Performs character wrapping
    332c:	f04f 0905 	mov.w	r9, #5
 **********************************************************************/
int16 gprintf(int16_t x, int16_t y, int8_t size, uint16_t color, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    3330:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
			}

		    if(x+5*size >= 320)          // Performs character wrapping
		    {
		       x = 0;                           // Set x at far left position
		       y += 7*size + 1;                 // Set y at next position down
    3334:	f04f 0807 	mov.w	r8, #7
 **********************************************************************/
int16 gprintf(int16_t x, int16_t y, int8_t size, uint16_t color, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    3338:	911f      	str	r1, [sp, #124]	; 0x7c
    333a:	9320      	str	r3, [sp, #128]	; 0x80
	uchar *ptr;
#ifdef RTC_MODE
	RTC_TIME_Type FullTime;
#endif
	va_list ap;
	va_start(ap, format);
    333c:	a931      	add	r1, sp, #196	; 0xc4
			}

		    if(x+5*size >= 320)          // Performs character wrapping
		    {
		       x = 0;                           // Set x at far left position
		       y += 7*size + 1;                 // Set y at next position down
    333e:	b2b3      	uxth	r3, r6
 **********************************************************************/
int16 gprintf(int16_t x, int16_t y, int8_t size, uint16_t color, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    3340:	9221      	str	r2, [sp, #132]	; 0x84
	uchar *ptr;
#ifdef RTC_MODE
	RTC_TIME_Type FullTime;
#endif
	va_list ap;
	va_start(ap, format);
    3342:	910c      	str	r1, [sp, #48]	; 0x30
			}

		    if(x+5*size >= 320)          // Performs character wrapping
		    {
		       x = 0;                           // Set x at far left position
		       y += 7*size + 1;                 // Set y at next position down
    3344:	fb08 f203 	mul.w	r2, r8, r3
		    }
			GLCD_Text(x,y,&format_flag,1,5,7,default5x7,size,color);
			x=x+5*size+1;
    3348:	fb09 f103 	mul.w	r1, r9, r3
 **********************************************************************/
int16 gprintf(int16_t x, int16_t y, int8_t size, uint16_t color, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    334c:	f44f 7080 	mov.w	r0, #256	; 0x100
    3350:	971c      	str	r7, [sp, #112]	; 0x70
    3352:	901e      	str	r0, [sp, #120]	; 0x78
    3354:	2710      	movs	r7, #16
    3356:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    335a:	971d      	str	r7, [sp, #116]	; 0x74
    335c:	9023      	str	r0, [sp, #140]	; 0x8c
    335e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
			}

		    if(x+5*size >= 320)          // Performs character wrapping
		    {
		       x = 0;                           // Set x at far left position
		       y += 7*size + 1;                 // Set y at next position down
    3362:	f102 0001 	add.w	r0, r2, #1
		    }
			GLCD_Text(x,y,&format_flag,1,5,7,default5x7,size,color);
			x=x+5*size+1;
    3366:	f101 0c01 	add.w	ip, r1, #1
 **********************************************************************/
int16 gprintf(int16_t x, int16_t y, int8_t size, uint16_t color, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    336a:	9722      	str	r7, [sp, #136]	; 0x88
			}

		    if(x+5*size >= 320)          // Performs character wrapping
		    {
		       x = 0;                           // Set x at far left position
		       y += 7*size + 1;                 // Set y at next position down
    336c:	fa1f f880 	uxth.w	r8, r0
			if(!format_flag)
			{                        // until '%' or '\0'
				return (0);
			}

		    if(x+5*size >= 320)          // Performs character wrapping
    3370:	fb09 f706 	mul.w	r7, r9, r6
		    {
		       x = 0;                           // Set x at far left position
		       y += 7*size + 1;                 // Set y at next position down
		    }
			GLCD_Text(x,y,&format_flag,1,5,7,default5x7,size,color);
			x=x+5*size+1;
    3374:	fa1f f98c 	uxth.w	r9, ip
	va_list ap;
	va_start(ap, format);

	for(;;)
	{
		while((format_flag = *format++) != '%')      // until full format string read
    3378:	f89b 0000 	ldrb.w	r0, [fp]
    337c:	2825      	cmp	r0, #37	; 0x25
    337e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
    3382:	d025      	beq.n	33d0 <gprintf+0x112>
		{
			if(!format_flag)
    3384:	2800      	cmp	r0, #0
    3386:	f000 8196 	beq.w	36b6 <gprintf+0x3f8>
			{                        // until '%' or '\0'
				return (0);
			}

		    if(x+5*size >= 320)          // Performs character wrapping
    338a:	19e1      	adds	r1, r4, r7
    338c:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
    3390:	db03      	blt.n	339a <gprintf+0xdc>
		    {
		       x = 0;                           // Set x at far left position
		       y += 7*size + 1;                 // Set y at next position down
    3392:	eb08 0305 	add.w	r3, r8, r5
    3396:	b21d      	sxth	r5, r3
				return (0);
			}

		    if(x+5*size >= 320)          // Performs character wrapping
		    {
		       x = 0;                           // Set x at far left position
    3398:	2400      	movs	r4, #0
	va_list ap;
	va_start(ap, format);

	for(;;)
	{
		while((format_flag = *format++) != '%')      // until full format string read
    339a:	f10b 0e01 	add.w	lr, fp, #1
    339e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
		    if(x+5*size >= 320)          // Performs character wrapping
		    {
		       x = 0;                           // Set x at far left position
		       y += 7*size + 1;                 // Set y at next position down
		    }
			GLCD_Text(x,y,&format_flag,1,5,7,default5x7,size,color);
    33a2:	2305      	movs	r3, #5
    33a4:	f04f 0c07 	mov.w	ip, #7
    33a8:	4a6b      	ldr	r2, [pc, #428]	; (3558 <gprintf+0x29a>)
    33aa:	e88d 1008 	stmia.w	sp, {r3, ip}
    33ae:	9202      	str	r2, [sp, #8]
    33b0:	9603      	str	r6, [sp, #12]
    33b2:	f8cd a010 	str.w	sl, [sp, #16]
    33b6:	4620      	mov	r0, r4
    33b8:	4629      	mov	r1, r5
    33ba:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
    33be:	2301      	movs	r3, #1
    33c0:	f7ff fee4 	bl	318c <GLCD_Text>
			x=x+5*size+1;
    33c4:	eb09 0004 	add.w	r0, r9, r4
    33c8:	b204      	sxth	r4, r0
				return (0);
			}

		    if(x+5*size >= 320)          // Performs character wrapping
		    {
		       x = 0;                           // Set x at far left position
    33ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    33ce:	e7d3      	b.n	3378 <gprintf+0xba>
		    }
			GLCD_Text(x,y,&format_flag,1,5,7,default5x7,size,color);
			x=x+5*size+1;
		}

		switch(format_flag = *format++)
    33d0:	f89b 3001 	ldrb.w	r3, [fp, #1]
    33d4:	f10b 0202 	add.w	r2, fp, #2
    33d8:	2b64      	cmp	r3, #100	; 0x64
    33da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    33de:	9209      	str	r2, [sp, #36]	; 0x24
    33e0:	f000 80bc 	beq.w	355c <gprintf+0x29e>
    33e4:	d80a      	bhi.n	33fc <gprintf+0x13e>
    33e6:	2b62      	cmp	r3, #98	; 0x62
    33e8:	d017      	beq.n	341a <gprintf+0x15c>
    33ea:	2b63      	cmp	r3, #99	; 0x63
    33ec:	d10d      	bne.n	340a <gprintf+0x14c>
		{
			case 'c':
				format_flag = va_arg(ap, int);
    33ee:	980c      	ldr	r0, [sp, #48]	; 0x30
    33f0:	6803      	ldr	r3, [r0, #0]
    33f2:	1d01      	adds	r1, r0, #4
    33f4:	910c      	str	r1, [sp, #48]	; 0x30
    33f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    33fa:	e006      	b.n	340a <gprintf+0x14c>
		    }
			GLCD_Text(x,y,&format_flag,1,5,7,default5x7,size,color);
			x=x+5*size+1;
		}

		switch(format_flag = *format++)
    33fc:	2b75      	cmp	r3, #117	; 0x75
    33fe:	d06d      	beq.n	34dc <gprintf+0x21e>
    3400:	2b78      	cmp	r3, #120	; 0x78
    3402:	f000 80eb 	beq.w	35dc <gprintf+0x31e>
    3406:	2b73      	cmp	r3, #115	; 0x73
    3408:	d043      	beq.n	3492 <gprintf+0x1d4>
				x=x+5*size+1;

				continue;

			default:
			    if(x+5*size >= 320)          // Performs character wrapping
    340a:	19e0      	adds	r0, r4, r7
    340c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
    3410:	dbc7      	blt.n	33a2 <gprintf+0xe4>
			    {
			       x = 0;                           // Set x at far left position
			       y += 7*size + 1;                 // Set y at next position down
    3412:	4445      	add	r5, r8
    3414:	b22d      	sxth	r5, r5
				continue;

			default:
			    if(x+5*size >= 320)          // Performs character wrapping
			    {
			       x = 0;                           // Set x at far left position
    3416:	2400      	movs	r4, #0
    3418:	e7c3      	b.n	33a2 <gprintf+0xe4>
				x=x+5*size+1;

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    341a:	980c      	ldr	r0, [sp, #48]	; 0x30
			    if(x+5*size >= 320)          // Performs character wrapping
    341c:	19e1      	adds	r1, r4, r7
				x=x+5*size+1;

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    341e:	1d02      	adds	r2, r0, #4
    3420:	920c      	str	r2, [sp, #48]	; 0x30
    3422:	7802      	ldrb	r2, [r0, #0]
			    if(x+5*size >= 320)          // Performs character wrapping
    3424:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
				x=x+5*size+1;

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    3428:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
			    if(x+5*size >= 320)          // Performs character wrapping
    342c:	db02      	blt.n	3434 <gprintf+0x176>
			    {
			       x = 0;                           // Set x at far left position
			       y += 7*size + 1;                 // Set y at next position down
    342e:	4445      	add	r5, r8
    3430:	b22d      	sxth	r5, r5

			case 'b':
				format_flag = va_arg(ap,int);
			    if(x+5*size >= 320)          // Performs character wrapping
			    {
			       x = 0;                           // Set x at far left position
    3432:	2400      	movs	r4, #0
			       y += 7*size + 1;                 // Set y at next position down
			    }
				GLCD_Text(x,y,&(hex[(uint16)format_flag >> 4]),1,5,7,default5x7,size,color);
    3434:	2305      	movs	r3, #5
    3436:	f04f 0e07 	mov.w	lr, #7
    343a:	e88d 4008 	stmia.w	sp, {r3, lr}
    343e:	4b46      	ldr	r3, [pc, #280]	; (3558 <gprintf+0x29a>)
    3440:	4620      	mov	r0, r4
    3442:	9302      	str	r3, [sp, #8]
				x=x+5*size+1;
    3444:	444c      	add	r4, r9
			    if(x+5*size >= 320)          // Performs character wrapping
			    {
			       x = 0;                           // Set x at far left position
			       y += 7*size + 1;                 // Set y at next position down
			    }
				GLCD_Text(x,y,&(hex[(uint16)format_flag >> 4]),1,5,7,default5x7,size,color);
    3446:	ab0d      	add	r3, sp, #52	; 0x34
    3448:	eb03 1212 	add.w	r2, r3, r2, lsr #4
    344c:	9603      	str	r6, [sp, #12]
    344e:	2301      	movs	r3, #1
    3450:	f8cd a010 	str.w	sl, [sp, #16]
    3454:	4629      	mov	r1, r5
				x=x+5*size+1;
    3456:	b224      	sxth	r4, r4
			    if(x+5*size >= 320)          // Performs character wrapping
			    {
			       x = 0;                           // Set x at far left position
			       y += 7*size + 1;                 // Set y at next position down
			    }
				GLCD_Text(x,y,&(hex[(uint16)format_flag >> 4]),1,5,7,default5x7,size,color);
    3458:	f7ff fe98 	bl	318c <GLCD_Text>
				x=x+5*size+1;
			    if(x+5*size >= 320)          // Performs character wrapping
    345c:	19e0      	adds	r0, r4, r7
    345e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
    3462:	db03      	blt.n	346c <gprintf+0x1ae>
			    {
			       x = 0;                           // Set x at far left position
			       y += 7*size + 1;                 // Set y at next position down
    3464:	eb08 0205 	add.w	r2, r8, r5
    3468:	b215      	sxth	r5, r2
			    }
				GLCD_Text(x,y,&(hex[(uint16)format_flag >> 4]),1,5,7,default5x7,size,color);
				x=x+5*size+1;
			    if(x+5*size >= 320)          // Performs character wrapping
			    {
			       x = 0;                           // Set x at far left position
    346a:	2400      	movs	r4, #0
			       y += 7*size + 1;                 // Set y at next position down
			    }
				GLCD_Text(x,y,&(hex[(uint16)format_flag & 0x0F]),1,5,7,default5x7,size,color);
    346c:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
    3470:	2005      	movs	r0, #5
    3472:	2307      	movs	r3, #7
    3474:	e88d 0009 	stmia.w	sp, {r0, r3}
    3478:	4b37      	ldr	r3, [pc, #220]	; (3558 <gprintf+0x29a>)
    347a:	f001 020f 	and.w	r2, r1, #15
    347e:	f10d 0b34 	add.w	fp, sp, #52	; 0x34
    3482:	9302      	str	r3, [sp, #8]
    3484:	9603      	str	r6, [sp, #12]
    3486:	f8cd a010 	str.w	sl, [sp, #16]
    348a:	4620      	mov	r0, r4
    348c:	4629      	mov	r1, r5
    348e:	445a      	add	r2, fp
    3490:	e795      	b.n	33be <gprintf+0x100>
				x=x+5*size+1;

				continue;

			case 's':
				ptr = va_arg(ap, schar *);
    3492:	990c      	ldr	r1, [sp, #48]	; 0x30
    3494:	1d0a      	adds	r2, r1, #4
    3496:	f8d1 b000 	ldr.w	fp, [r1]
    349a:	920c      	str	r2, [sp, #48]	; 0x30
    349c:	465a      	mov	r2, fp
				while(*ptr)
    349e:	7813      	ldrb	r3, [r2, #0]
    34a0:	f10b 0b01 	add.w	fp, fp, #1
    34a4:	2b00      	cmp	r3, #0
    34a6:	d090      	beq.n	33ca <gprintf+0x10c>
				{
				    if(x+5*size >= 320)          // Performs character wrapping
    34a8:	19e0      	adds	r0, r4, r7
    34aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
    34ae:	db03      	blt.n	34b8 <gprintf+0x1fa>
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
    34b0:	eb08 0405 	add.w	r4, r8, r5
    34b4:	b225      	sxth	r5, r4
				ptr = va_arg(ap, schar *);
				while(*ptr)
				{
				    if(x+5*size >= 320)          // Performs character wrapping
				    {
				       x = 0;                           // Set x at far left position
    34b6:	2400      	movs	r4, #0
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&(*ptr++),1,5,7,default5x7,size,color);
    34b8:	2105      	movs	r1, #5
    34ba:	2307      	movs	r3, #7
    34bc:	e88d 000a 	stmia.w	sp, {r1, r3}
    34c0:	4925      	ldr	r1, [pc, #148]	; (3558 <gprintf+0x29a>)
    34c2:	4620      	mov	r0, r4
    34c4:	9102      	str	r1, [sp, #8]
    34c6:	9603      	str	r6, [sp, #12]
    34c8:	f8cd a010 	str.w	sl, [sp, #16]
    34cc:	4629      	mov	r1, r5
    34ce:	2301      	movs	r3, #1
    34d0:	f7ff fe5c 	bl	318c <GLCD_Text>
					x=x+5*size+1;
    34d4:	eb09 0204 	add.w	r2, r9, r4
    34d8:	b214      	sxth	r4, r2
    34da:	e7df      	b.n	349c <gprintf+0x1de>
				continue;
#endif
			case 'u':
				base = 16;
				div_val = 0x100000;
				u_val = va_arg(ap, uint32_t);
    34dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34de:	2106      	movs	r1, #6
    34e0:	1d18      	adds	r0, r3, #4
    34e2:	f8d3 c000 	ldr.w	ip, [r3]
    34e6:	900c      	str	r0, [sp, #48]	; 0x30
    34e8:	9107      	str	r1, [sp, #28]

				continue;
#endif
			case 'u':
				base = 16;
				div_val = 0x100000;
    34ea:	f44f 1b80 	mov.w	fp, #1048576	; 0x100000
				u_val = va_arg(ap, uint32_t);
				do
				{
				    if(x+5*size >= 320)          // Performs character wrapping
    34ee:	19e2      	adds	r2, r4, r7
    34f0:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
    34f4:	db02      	blt.n	34fc <gprintf+0x23e>
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
    34f6:	4445      	add	r5, r8
    34f8:	b22d      	sxth	r5, r5
				u_val = va_arg(ap, uint32_t);
				do
				{
				    if(x+5*size >= 320)          // Performs character wrapping
				    {
				       x = 0;                           // Set x at far left position
    34fa:	2400      	movs	r4, #0
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&(hex[u_val/div_val]),1,5,7,default5x7,size,color);
    34fc:	fbbc f3fb 	udiv	r3, ip, fp
    3500:	9308      	str	r3, [sp, #32]
    3502:	2205      	movs	r2, #5
    3504:	2307      	movs	r3, #7
    3506:	4814      	ldr	r0, [pc, #80]	; (3558 <gprintf+0x29a>)
    3508:	f8dd e020 	ldr.w	lr, [sp, #32]
    350c:	e88d 000c 	stmia.w	sp, {r2, r3}
    3510:	aa0d      	add	r2, sp, #52	; 0x34
    3512:	2301      	movs	r3, #1
    3514:	9002      	str	r0, [sp, #8]
    3516:	4629      	mov	r1, r5
    3518:	4620      	mov	r0, r4
    351a:	9603      	str	r6, [sp, #12]
    351c:	f8cd a010 	str.w	sl, [sp, #16]
    3520:	4472      	add	r2, lr
    3522:	f8cd c018 	str.w	ip, [sp, #24]
    3526:	f7ff fe31 	bl	318c <GLCD_Text>
					x=x+5*size+1;
					u_val %= div_val;
					div_val /= base;
				}while(div_val);
    352a:	9b07      	ldr	r3, [sp, #28]
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&(hex[u_val/div_val]),1,5,7,default5x7,size,color);
					x=x+5*size+1;
					u_val %= div_val;
    352c:	f8dd c018 	ldr.w	ip, [sp, #24]
    3530:	9908      	ldr	r1, [sp, #32]
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&(hex[u_val/div_val]),1,5,7,default5x7,size,color);
					x=x+5*size+1;
    3532:	444c      	add	r4, r9
					u_val %= div_val;
					div_val /= base;
				}while(div_val);
    3534:	1e58      	subs	r0, r3, #1
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&(hex[u_val/div_val]),1,5,7,default5x7,size,color);
					x=x+5*size+1;
					u_val %= div_val;
    3536:	fb0b cc11 	mls	ip, fp, r1, ip
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&(hex[u_val/div_val]),1,5,7,default5x7,size,color);
					x=x+5*size+1;
    353a:	b224      	sxth	r4, r4
					u_val %= div_val;
					div_val /= base;
    353c:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
				}while(div_val);
    3540:	9007      	str	r0, [sp, #28]
    3542:	d1d4      	bne.n	34ee <gprintf+0x230>
    3544:	e741      	b.n	33ca <gprintf+0x10c>
    3546:	bf00      	nop
    3548:	00005af1 	.word	0x00005af1
    354c:	000186a0 	.word	0x000186a0
    3550:	00989680 	.word	0x00989680
    3554:	000f4240 	.word	0x000f4240
    3558:	00007092 	.word	0x00007092
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    355c:	f89b 1003 	ldrb.w	r1, [fp, #3]

				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
    3560:	f89b 2002 	ldrb.w	r2, [fp, #2]
				format_flag = ( *format++ ) - '1';
    3564:	3931      	subs	r1, #49	; 0x31
    3566:	b2cb      	uxtb	r3, r1
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);
    3568:	990c      	ldr	r1, [sp, #48]	; 0x30

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    356a:	a826      	add	r0, sp, #152	; 0x98
				u_val = va_arg(ap,int);
    356c:	f8d1 c000 	ldr.w	ip, [r1]
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    3570:	f10b 0e04 	add.w	lr, fp, #4

				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
    3574:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
				format_flag = ( *format++ ) - '1';
    3578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				div_val = width_dec[format_flag];
    357c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
				u_val = va_arg(ap,int);
    3580:	1d0b      	adds	r3, r1, #4

				if(((int)u_val) < 0)
    3582:	f1bc 0f00 	cmp.w	ip, #0
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    3586:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
				div_val = width_dec[format_flag];
    358a:	f852 bc50 	ldr.w	fp, [r2, #-80]
				u_val = va_arg(ap,int);
    358e:	930c      	str	r3, [sp, #48]	; 0x30

				if(((int)u_val) < 0)
    3590:	da21      	bge.n	35d6 <gprintf+0x318>
				{
					u_val = - u_val;    // applied to unsigned type, result still unsigned
					temp = '-';
				    if(x+5*size >= 320)          // Performs character wrapping
    3592:	19e1      	adds	r1, r4, r7
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
				{
					u_val = - u_val;    // applied to unsigned type, result still unsigned
					temp = '-';
    3594:	222d      	movs	r2, #45	; 0x2d
				    if(x+5*size >= 320)          // Performs character wrapping
    3596:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
				{
					u_val = - u_val;    // applied to unsigned type, result still unsigned
    359a:	f1cc 0c00 	rsb	ip, ip, #0
					temp = '-';
    359e:	920b      	str	r2, [sp, #44]	; 0x2c
				    if(x+5*size >= 320)          // Performs character wrapping
    35a0:	db02      	blt.n	35a8 <gprintf+0x2ea>
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
    35a2:	4445      	add	r5, r8
    35a4:	b22d      	sxth	r5, r5
				{
					u_val = - u_val;    // applied to unsigned type, result still unsigned
					temp = '-';
				    if(x+5*size >= 320)          // Performs character wrapping
				    {
				       x = 0;                           // Set x at far left position
    35a6:	2400      	movs	r4, #0
				       y += 7*size + 1;                 // Set y at next position down
				    }
				    GLCD_Text(x,y,&temp,1,5,7,default5x7,size,color);
    35a8:	2305      	movs	r3, #5
    35aa:	f04f 0e07 	mov.w	lr, #7
    35ae:	e88d 4008 	stmia.w	sp, {r3, lr}
    35b2:	4b42      	ldr	r3, [pc, #264]	; (36bc <gprintf+0x3fe>)
    35b4:	4620      	mov	r0, r4
    35b6:	9302      	str	r3, [sp, #8]
    35b8:	9603      	str	r6, [sp, #12]
    35ba:	f8cd a010 	str.w	sl, [sp, #16]
    35be:	4629      	mov	r1, r5
    35c0:	aa0b      	add	r2, sp, #44	; 0x2c
    35c2:	2301      	movs	r3, #1
    35c4:	f8cd c018 	str.w	ip, [sp, #24]
				    x=x+5*size+1;
    35c8:	444c      	add	r4, r9
				    if(x+5*size >= 320)          // Performs character wrapping
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
				    }
				    GLCD_Text(x,y,&temp,1,5,7,default5x7,size,color);
    35ca:	f7ff fddf 	bl	318c <GLCD_Text>
				}while(div_val);

				continue;

			case 'd':
				base = 10;
    35ce:	200a      	movs	r0, #10
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
				    }
				    GLCD_Text(x,y,&temp,1,5,7,default5x7,size,color);
				    x=x+5*size+1;
    35d0:	b224      	sxth	r4, r4
				}while(div_val);

				continue;

			case 'd':
				base = 10;
    35d2:	9007      	str	r0, [sp, #28]
    35d4:	e03f      	b.n	3656 <gprintf+0x398>
    35d6:	200a      	movs	r0, #10
    35d8:	9007      	str	r0, [sp, #28]
    35da:	e019      	b.n	3610 <gprintf+0x352>
				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
    35dc:	f89b 0003 	ldrb.w	r0, [fp, #3]

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
    35e0:	f89b 3002 	ldrb.w	r3, [fp, #2]
				format_flag = (*format++) - '1';
    35e4:	3831      	subs	r0, #49	; 0x31
    35e6:	b2c1      	uxtb	r1, r0
				div_val = width_hex[format_flag];
    35e8:	aa26      	add	r2, sp, #152	; 0x98
				u_val = va_arg(ap, int);
    35ea:	980c      	ldr	r0, [sp, #48]	; 0x30

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
    35ec:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
    35f0:	eb02 0381 	add.w	r3, r2, r1, lsl #2
				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
    35f4:	f10b 0e04 	add.w	lr, fp, #4
    35f8:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
				}

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
    35fc:	2210      	movs	r2, #16
				fill_char = *format++;
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);
    35fe:	1d01      	adds	r1, r0, #4

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
    3600:	f853 bc28 	ldr.w	fp, [r3, #-40]
				u_val = va_arg(ap, int);
    3604:	f8d0 c000 	ldr.w	ip, [r0]
				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
    3608:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);
    360c:	910c      	str	r1, [sp, #48]	; 0x30
				}

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
    360e:	9207      	str	r2, [sp, #28]
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
    3610:	f1bb 0f01 	cmp.w	fp, #1
    3614:	d946      	bls.n	36a4 <gprintf+0x3e6>
    3616:	45e3      	cmp	fp, ip
    3618:	d944      	bls.n	36a4 <gprintf+0x3e6>
				{
					div_val /= base;
    361a:	9b07      	ldr	r3, [sp, #28]
				    if(x+5*size >= 320)          // Performs character wrapping
    361c:	19e2      	adds	r2, r4, r7
    361e:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
				{
					div_val /= base;
    3622:	fbbb fbf3 	udiv	fp, fp, r3
				    if(x+5*size >= 320)          // Performs character wrapping
    3626:	db02      	blt.n	362e <gprintf+0x370>
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
    3628:	4445      	add	r5, r8
    362a:	b22d      	sxth	r5, r5
				while(div_val > 1 && div_val > u_val)
				{
					div_val /= base;
				    if(x+5*size >= 320)          // Performs character wrapping
				    {
				       x = 0;                           // Set x at far left position
    362c:	2400      	movs	r4, #0
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&fill_char,1,5,7,default5x7,size,color);
    362e:	2005      	movs	r0, #5
    3630:	2307      	movs	r3, #7
    3632:	e88d 0009 	stmia.w	sp, {r0, r3}
    3636:	4821      	ldr	r0, [pc, #132]	; (36bc <gprintf+0x3fe>)
    3638:	9603      	str	r6, [sp, #12]
    363a:	9002      	str	r0, [sp, #8]
    363c:	f8cd a010 	str.w	sl, [sp, #16]
    3640:	4620      	mov	r0, r4
    3642:	4629      	mov	r1, r5
    3644:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
    3648:	2301      	movs	r3, #1
    364a:	f8cd c018 	str.w	ip, [sp, #24]
    364e:	f7ff fd9d 	bl	318c <GLCD_Text>
					x=x+5*size+1;
    3652:	444c      	add	r4, r9
    3654:	b224      	sxth	r4, r4
    3656:	f8dd c018 	ldr.w	ip, [sp, #24]
    365a:	e7d9      	b.n	3610 <gprintf+0x352>
				    if(x+5*size >= 320)          // Performs character wrapping
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&(hex[u_val/div_val]),1,5,7,default5x7,size,color);
    365c:	2105      	movs	r1, #5
    365e:	2307      	movs	r3, #7
    3660:	e88d 000a 	stmia.w	sp, {r1, r3}
    3664:	4b15      	ldr	r3, [pc, #84]	; (36bc <gprintf+0x3fe>)
    3666:	fbbc fefb 	udiv	lr, ip, fp
    366a:	aa0d      	add	r2, sp, #52	; 0x34
    366c:	4620      	mov	r0, r4
    366e:	9302      	str	r3, [sp, #8]
    3670:	4629      	mov	r1, r5
    3672:	9603      	str	r6, [sp, #12]
    3674:	f8cd a010 	str.w	sl, [sp, #16]
    3678:	4472      	add	r2, lr
    367a:	2301      	movs	r3, #1
    367c:	f8cd c018 	str.w	ip, [sp, #24]
    3680:	f8cd e020 	str.w	lr, [sp, #32]
    3684:	f7ff fd82 	bl	318c <GLCD_Text>
					x=x+5*size+1;
					u_val %= div_val;
    3688:	f8dd c018 	ldr.w	ip, [sp, #24]
    368c:	9808      	ldr	r0, [sp, #32]
					div_val /= base;
    368e:	9907      	ldr	r1, [sp, #28]
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&(hex[u_val/div_val]),1,5,7,default5x7,size,color);
					x=x+5*size+1;
    3690:	444c      	add	r4, r9
					u_val %= div_val;
    3692:	fb0b cc10 	mls	ip, fp, r0, ip
					div_val /= base;
    3696:	fbbb fbf1 	udiv	fp, fp, r1
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
				    }
					GLCD_Text(x,y,&(hex[u_val/div_val]),1,5,7,default5x7,size,color);
					x=x+5*size+1;
    369a:	b224      	sxth	r4, r4
					u_val %= div_val;
					div_val /= base;
				}while(div_val);
    369c:	f1bb 0f00 	cmp.w	fp, #0
    36a0:	f43f ae93 	beq.w	33ca <gprintf+0x10c>
					x=x+5*size+1;
				}

				do
				{
				    if(x+5*size >= 320)          // Performs character wrapping
    36a4:	19e2      	adds	r2, r4, r7
    36a6:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
    36aa:	dbd7      	blt.n	365c <gprintf+0x39e>
				    {
				       x = 0;                           // Set x at far left position
				       y += 7*size + 1;                 // Set y at next position down
    36ac:	eb08 0105 	add.w	r1, r8, r5
    36b0:	b20d      	sxth	r5, r1

				do
				{
				    if(x+5*size >= 320)          // Performs character wrapping
				    {
				       x = 0;                           // Set x at far left position
    36b2:	2400      	movs	r4, #0
    36b4:	e7d2      	b.n	365c <gprintf+0x39e>
					div_val /= base;
				}while(div_val);
		}// end of switch statement
	}
	return(0);
}
    36b6:	b027      	add	sp, #156	; 0x9c
    36b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36bc:	00007092 	.word	0x00007092

000036c0 <GLCD_Line>:
 *              (x2, y2)   the end coordinate
 *              color      line color
 * @return 		None
 **********************************************************************/
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
    36c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t  x, y, addx, addy, dx, dy;
	int32_t P,i;

	dx = abs((int16_t)(x2 - x1));
    36c4:	1a14      	subs	r4, r2, r0
	dy = abs((int16_t)(y2 - y1));
    36c6:	1a5e      	subs	r6, r3, r1
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
	int16_t  x, y, addx, addy, dx, dy;
	int32_t P,i;

	dx = abs((int16_t)(x2 - x1));
    36c8:	b224      	sxth	r4, r4
	dy = abs((int16_t)(y2 - y1));
    36ca:	b236      	sxth	r6, r6
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
	int16_t  x, y, addx, addy, dx, dy;
	int32_t P,i;

	dx = abs((int16_t)(x2 - x1));
    36cc:	2c00      	cmp	r4, #0
    36ce:	bfb8      	it	lt
    36d0:	4264      	neglt	r4, r4
	dy = abs((int16_t)(y2 - y1));
    36d2:	2e00      	cmp	r6, #0
    36d4:	bfb8      	it	lt
    36d6:	4276      	neglt	r6, r6
	x = x1;
	y = y1;

	if(x1 > x2)
		addx = -1;
    36d8:	f64f 75ff 	movw	r5, #65535	; 0xffff
		addy = -1;
	else
		addy = 1;


	if(dx >= dy)
    36dc:	b224      	sxth	r4, r4
    36de:	b236      	sxth	r6, r6
 *              (x2, y2)   the end coordinate
 *              color      line color
 * @return 		None
 **********************************************************************/
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
    36e0:	b085      	sub	sp, #20
	dy = abs((int16_t)(y2 - y1));
	x = x1;
	y = y1;

	if(x1 > x2)
		addx = -1;
    36e2:	4290      	cmp	r0, r2
    36e4:	bfcc      	ite	gt
    36e6:	462f      	movgt	r7, r5
    36e8:	2701      	movle	r7, #1
	else
		addx = 1;
	if(y1 > y2)
		addy = -1;
    36ea:	4299      	cmp	r1, r3
    36ec:	bfcc      	ite	gt
    36ee:	46a8      	movgt	r8, r5
    36f0:	f04f 0801 	movle.w	r8, #1
	else
		addy = 1;


	if(dx >= dy)
    36f4:	42b4      	cmp	r4, r6
 *              (x2, y2)   the end coordinate
 *              color      line color
 * @return 		None
 **********************************************************************/
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
    36f6:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
		addy = -1;
	else
		addy = 1;


	if(dx >= dy)
    36fa:	db29      	blt.n	3750 <GLCD_Line+0x90>
	{
		P = 2*dy - dx;
    36fc:	ea4f 0b46 	mov.w	fp, r6, lsl #1
				P += 2*dy;
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
    3700:	1b36      	subs	r6, r6, r4
    3702:	0073      	lsls	r3, r6, #1
		addy = 1;


	if(dx >= dy)
	{
		P = 2*dy - dx;
    3704:	ebc4 050b 	rsb	r5, r4, fp
				P += 2*dy;
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
    3708:	9303      	str	r3, [sp, #12]

	if(dx >= dy)
	{
		P = 2*dy - dx;

		for(i=0; i<=dx; ++i)
    370a:	468a      	mov	sl, r1
    370c:	2600      	movs	r6, #0
    370e:	42a6      	cmp	r6, r4
    3710:	dc47      	bgt.n	37a2 <GLCD_Line+0xe2>
		{
			GLCD_PutPixel(x, y, color);
    3712:	fa1f f38a 	uxth.w	r3, sl
    3716:	fa1f fe80 	uxth.w	lr, r0
    371a:	4619      	mov	r1, r3
    371c:	4670      	mov	r0, lr
    371e:	464a      	mov	r2, r9
    3720:	9301      	str	r3, [sp, #4]
    3722:	f8cd e008 	str.w	lr, [sp, #8]
    3726:	f7ff fd19 	bl	315c <GLCD_PutPixel>
    372a:	f8dd c008 	ldr.w	ip, [sp, #8]

			if(P < 0)
    372e:	2d00      	cmp	r5, #0
    3730:	eb0c 0107 	add.w	r1, ip, r7
    3734:	9b01      	ldr	r3, [sp, #4]
    3736:	da02      	bge.n	373e <GLCD_Line+0x7e>
			{
				P += 2*dy;
    3738:	445d      	add	r5, fp
				x += addx;
    373a:	b288      	uxth	r0, r1
    373c:	e006      	b.n	374c <GLCD_Line+0x8c>
			}
			else
			{
				P += 2*dy - 2*dx;
    373e:	9803      	ldr	r0, [sp, #12]
				x += addx;
				y += addy;
    3740:	eb03 0a08 	add.w	sl, r3, r8
				P += 2*dy;
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
    3744:	182d      	adds	r5, r5, r0
				x += addx;
				y += addy;
    3746:	fa1f fa8a 	uxth.w	sl, sl
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
				x += addx;
    374a:	b288      	uxth	r0, r1

	if(dx >= dy)
	{
		P = 2*dy - dx;

		for(i=0; i<=dx; ++i)
    374c:	3601      	adds	r6, #1
    374e:	e7de      	b.n	370e <GLCD_Line+0x4e>
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    3750:	1ba2      	subs	r2, r4, r6
			}
		}
	}
	else
	{
		P = 2*dx - dy;
    3752:	ea4f 0a44 	mov.w	sl, r4, lsl #1
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    3756:	0053      	lsls	r3, r2, #1
			}
		}
	}
	else
	{
		P = 2*dx - dy;
    3758:	ebc6 050a 	rsb	r5, r6, sl
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    375c:	9303      	str	r3, [sp, #12]
	}
	else
	{
		P = 2*dx - dy;

		for(i=0; i<=dy; ++i)
    375e:	4683      	mov	fp, r0
    3760:	2400      	movs	r4, #0
    3762:	42b4      	cmp	r4, r6
    3764:	dc1d      	bgt.n	37a2 <GLCD_Line+0xe2>
		{
			GLCD_PutPixel(x, y, color);
    3766:	fa1f fc81 	uxth.w	ip, r1
    376a:	fa1f f38b 	uxth.w	r3, fp
    376e:	4661      	mov	r1, ip
    3770:	4618      	mov	r0, r3
    3772:	464a      	mov	r2, r9
    3774:	f8cd c008 	str.w	ip, [sp, #8]
    3778:	9301      	str	r3, [sp, #4]
    377a:	f7ff fcef 	bl	315c <GLCD_PutPixel>
    377e:	f8dd c008 	ldr.w	ip, [sp, #8]

			if(P < 0)
    3782:	2d00      	cmp	r5, #0
    3784:	eb0c 0108 	add.w	r1, ip, r8
    3788:	9801      	ldr	r0, [sp, #4]
    378a:	da01      	bge.n	3790 <GLCD_Line+0xd0>
			{
				P += 2*dx;
    378c:	4455      	add	r5, sl
    378e:	e005      	b.n	379c <GLCD_Line+0xdc>
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    3790:	9a03      	ldr	r2, [sp, #12]
				x += addx;
    3792:	eb00 0b07 	add.w	fp, r0, r7
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    3796:	18ad      	adds	r5, r5, r2
				x += addx;
    3798:	fa1f fb8b 	uxth.w	fp, fp
				y += addy;
    379c:	b289      	uxth	r1, r1
	}
	else
	{
		P = 2*dx - dy;

		for(i=0; i<=dy; ++i)
    379e:	3401      	adds	r4, #1
    37a0:	e7df      	b.n	3762 <GLCD_Line+0xa2>
				x += addx;
				y += addy;
			}
		}
	}
}
    37a2:	b005      	add	sp, #20
    37a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000037a8 <GLCD_LBar>:
 *              dec        decrement bar YES/NO or TRUE/FALSE
 *              color      Bar Color
 * @return 		None
 **********************************************************************/
void GLCD_LBar(int16_t index, uint8_t width, int16_t y, int16_t per, Bool dec,uint16_t color)
{
    37a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    37ac:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
    37b0:	4614      	mov	r4, r2
    37b2:	461d      	mov	r5, r3
    37b4:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
	int16_t x1,x2,h,y_diff;

	if(dec)
    37b8:	b10e      	cbz	r6, 37be <GLCD_LBar+0x16>
	{
		y_diff=y+(per);
    37ba:	189b      	adds	r3, r3, r2
    37bc:	e000      	b.n	37c0 <GLCD_LBar+0x18>
	}
	else
	{
		y_diff=y-(per);
    37be:	1ad3      	subs	r3, r2, r3
    37c0:	b29b      	uxth	r3, r3
	}

	if((y_diff>=20) && (index<=10) && !dec)
    37c2:	b21a      	sxth	r2, r3
    37c4:	2a13      	cmp	r2, #19
    37c6:	dd1d      	ble.n	3804 <GLCD_LBar+0x5c>
    37c8:	280a      	cmp	r0, #10
    37ca:	dc1b      	bgt.n	3804 <GLCD_LBar+0x5c>
    37cc:	2e00      	cmp	r6, #0
    37ce:	d13a      	bne.n	3846 <GLCD_LBar+0x9e>
	{
		for(h=0;h<=per;h++)
		{
			x1 = 30+(index*26)-(width-(width/2));
    37d0:	221a      	movs	r2, #26
    37d2:	4350      	muls	r0, r2
    37d4:	301e      	adds	r0, #30
    37d6:	eb00 0351 	add.w	r3, r0, r1, lsr #1
    37da:	b298      	uxth	r0, r3
    37dc:	1a41      	subs	r1, r0, r1
    37de:	fa1f f881 	uxth.w	r8, r1
			x2 = x1+width;
    37e2:	fa1f f980 	uxth.w	r9, r0
		y_diff=y-(per);
	}

	if((y_diff>=20) && (index<=10) && !dec)
	{
		for(h=0;h<=per;h++)
    37e6:	b232      	sxth	r2, r6
    37e8:	42aa      	cmp	r2, r5
    37ea:	dc2e      	bgt.n	384a <GLCD_LBar+0xa2>
 *              per        Percentage height
 *              dec        decrement bar YES/NO or TRUE/FALSE
 *              color      Bar Color
 * @return 		None
 **********************************************************************/
void GLCD_LBar(int16_t index, uint8_t width, int16_t y, int16_t per, Bool dec,uint16_t color)
    37ec:	1ba3      	subs	r3, r4, r6
	{
		for(h=0;h<=per;h++)
		{
			x1 = 30+(index*26)-(width-(width/2));
			x2 = x1+width;
			GLCD_Line(x1,y-h,x2,y-h,color);
    37ee:	b219      	sxth	r1, r3
    37f0:	9700      	str	r7, [sp, #0]
    37f2:	fa0f f088 	sxth.w	r0, r8
    37f6:	fa0f f289 	sxth.w	r2, r9
    37fa:	460b      	mov	r3, r1
    37fc:	f7ff ff60 	bl	36c0 <GLCD_Line>
    3800:	3601      	adds	r6, #1
    3802:	e7f0      	b.n	37e6 <GLCD_LBar+0x3e>
		}
	}
	else if(dec && (y_diff<=219) && (index<=10))
    3804:	b30e      	cbz	r6, 384a <GLCD_LBar+0xa2>
    3806:	b21b      	sxth	r3, r3
    3808:	2bdb      	cmp	r3, #219	; 0xdb
    380a:	dc1e      	bgt.n	384a <GLCD_LBar+0xa2>
    380c:	280a      	cmp	r0, #10
    380e:	dc1c      	bgt.n	384a <GLCD_LBar+0xa2>
	{
		for(h=0;h<=per;h++)
		{
			x1 = 30+(index*26)-(width-(width/2));
    3810:	261a      	movs	r6, #26
    3812:	4370      	muls	r0, r6
    3814:	301e      	adds	r0, #30
    3816:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    381a:	b282      	uxth	r2, r0
    381c:	1a51      	subs	r1, r2, r1
    381e:	fa1f f881 	uxth.w	r8, r1
			x2 = x1+width;
    3822:	fa1f f982 	uxth.w	r9, r2
    3826:	2600      	movs	r6, #0
			GLCD_Line(x1,y-h,x2,y-h,color);
		}
	}
	else if(dec && (y_diff<=219) && (index<=10))
	{
		for(h=0;h<=per;h++)
    3828:	b233      	sxth	r3, r6
    382a:	42ab      	cmp	r3, r5
    382c:	dc0d      	bgt.n	384a <GLCD_LBar+0xa2>
 *              per        Percentage height
 *              dec        decrement bar YES/NO or TRUE/FALSE
 *              color      Bar Color
 * @return 		None
 **********************************************************************/
void GLCD_LBar(int16_t index, uint8_t width, int16_t y, int16_t per, Bool dec,uint16_t color)
    382e:	1930      	adds	r0, r6, r4
	{
		for(h=0;h<=per;h++)
		{
			x1 = 30+(index*26)-(width-(width/2));
			x2 = x1+width;
			GLCD_Line(x1,y+h,x2,y+h,color);
    3830:	b201      	sxth	r1, r0
    3832:	9700      	str	r7, [sp, #0]
    3834:	fa0f f088 	sxth.w	r0, r8
    3838:	fa0f f289 	sxth.w	r2, r9
    383c:	460b      	mov	r3, r1
    383e:	f7ff ff3f 	bl	36c0 <GLCD_Line>
    3842:	3601      	adds	r6, #1
    3844:	e7f0      	b.n	3828 <GLCD_LBar+0x80>
			x1 = 30+(index*26)-(width-(width/2));
			x2 = x1+width;
			GLCD_Line(x1,y-h,x2,y-h,color);
		}
	}
	else if(dec && (y_diff<=219) && (index<=10))
    3846:	2adb      	cmp	r2, #219	; 0xdb
    3848:	e7e1      	b.n	380e <GLCD_LBar+0x66>
			x1 = 30+(index*26)-(width-(width/2));
			x2 = x1+width;
			GLCD_Line(x1,y+h,x2,y+h,color);
		}
	}
}
    384a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0000384e <GLCD_Triangle>:
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
{
    384e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3852:	b08f      	sub	sp, #60	; 0x3c
    3854:	9306      	str	r3, [sp, #24]
    if(cfg->fill)
    3856:	781b      	ldrb	r3, [r3, #0]
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
{
    3858:	4607      	mov	r7, r0
    385a:	460d      	mov	r5, r1
    385c:	4616      	mov	r6, r2
    if(cfg->fill)
    385e:	2b00      	cmp	r3, #0
    3860:	f000 8230 	beq.w	3cc4 <GLCD_Triangle+0x476>
    	Bool changed1 = FALSE;
    	Bool changed2 = FALSE;
    	int16_t signx1,signx2,dx1,dy1,dx2,dy2;
    	uint16_t e1,e2;
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    3864:	8844      	ldrh	r4, [r0, #2]
    3866:	884a      	ldrh	r2, [r1, #2]
    3868:	b220      	sxth	r0, r4
    386a:	b211      	sxth	r1, r2
    386c:	4288      	cmp	r0, r1
    386e:	dd14      	ble.n	389a <GLCD_Triangle+0x4c>
    3870:	ea82 0304 	eor.w	r3, r2, r4
    3874:	807b      	strh	r3, [r7, #2]
    3876:	886c      	ldrh	r4, [r5, #2]
    3878:	8828      	ldrh	r0, [r5, #0]
    387a:	4063      	eors	r3, r4
    387c:	806b      	strh	r3, [r5, #2]
    387e:	887a      	ldrh	r2, [r7, #2]
    3880:	8839      	ldrh	r1, [r7, #0]
    3882:	4053      	eors	r3, r2
    3884:	807b      	strh	r3, [r7, #2]
    3886:	ea80 0301 	eor.w	r3, r0, r1
    388a:	b29c      	uxth	r4, r3
    388c:	803c      	strh	r4, [r7, #0]
    388e:	882a      	ldrh	r2, [r5, #0]
    3890:	4054      	eors	r4, r2
    3892:	802c      	strh	r4, [r5, #0]
    3894:	8838      	ldrh	r0, [r7, #0]
    3896:	4044      	eors	r4, r0
    3898:	803c      	strh	r4, [r7, #0]
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    389a:	887b      	ldrh	r3, [r7, #2]
    389c:	8874      	ldrh	r4, [r6, #2]
    389e:	b21a      	sxth	r2, r3
    38a0:	b221      	sxth	r1, r4
    38a2:	428a      	cmp	r2, r1
    38a4:	dd14      	ble.n	38d0 <GLCD_Triangle+0x82>
    38a6:	ea84 0003 	eor.w	r0, r4, r3
    38aa:	8078      	strh	r0, [r7, #2]
    38ac:	8873      	ldrh	r3, [r6, #2]
    38ae:	8832      	ldrh	r2, [r6, #0]
    38b0:	4058      	eors	r0, r3
    38b2:	8070      	strh	r0, [r6, #2]
    38b4:	887c      	ldrh	r4, [r7, #2]
    38b6:	8839      	ldrh	r1, [r7, #0]
    38b8:	4060      	eors	r0, r4
    38ba:	8078      	strh	r0, [r7, #2]
    38bc:	ea82 0001 	eor.w	r0, r2, r1
    38c0:	b283      	uxth	r3, r0
    38c2:	803b      	strh	r3, [r7, #0]
    38c4:	8834      	ldrh	r4, [r6, #0]
    38c6:	4063      	eors	r3, r4
    38c8:	8033      	strh	r3, [r6, #0]
    38ca:	883a      	ldrh	r2, [r7, #0]
    38cc:	4053      	eors	r3, r2
    38ce:	803b      	strh	r3, [r7, #0]
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }
    38d0:	886b      	ldrh	r3, [r5, #2]
    38d2:	8874      	ldrh	r4, [r6, #2]
    38d4:	b218      	sxth	r0, r3
    38d6:	b221      	sxth	r1, r4
    38d8:	4288      	cmp	r0, r1
    38da:	dd13      	ble.n	3904 <GLCD_Triangle+0xb6>
    38dc:	4063      	eors	r3, r4
    38de:	806b      	strh	r3, [r5, #2]
    38e0:	8872      	ldrh	r2, [r6, #2]
    38e2:	8830      	ldrh	r0, [r6, #0]
    38e4:	4053      	eors	r3, r2
    38e6:	8073      	strh	r3, [r6, #2]
    38e8:	886c      	ldrh	r4, [r5, #2]
    38ea:	8829      	ldrh	r1, [r5, #0]
    38ec:	4063      	eors	r3, r4
    38ee:	806b      	strh	r3, [r5, #2]
    38f0:	ea80 0301 	eor.w	r3, r0, r1
    38f4:	b29c      	uxth	r4, r3
    38f6:	802c      	strh	r4, [r5, #0]
    38f8:	8832      	ldrh	r2, [r6, #0]
    38fa:	4054      	eors	r4, r2
    38fc:	8034      	strh	r4, [r6, #0]
    38fe:	8828      	ldrh	r0, [r5, #0]
    3900:	4044      	eors	r4, r0
    3902:	802c      	strh	r4, [r5, #0]

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    3904:	8839      	ldrh	r1, [r7, #0]

    	dx1 = (int16_t)(p2->x - p1->x);
    3906:	882a      	ldrh	r2, [r5, #0]
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    3908:	b28c      	uxth	r4, r1

    	dx1 = (int16_t)(p2->x - p1->x);
    390a:	1b10      	subs	r0, r2, r4
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    390c:	887b      	ldrh	r3, [r7, #2]

    	dx1 = (int16_t)(p2->x - p1->x);
    390e:	b282      	uxth	r2, r0
    3910:	fa1f f982 	uxth.w	r9, r2
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    3914:	fa1f f883 	uxth.w	r8, r3

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    3918:	f419 4f00 	tst.w	r9, #32768	; 0x8000
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    391c:	f8cd 8014 	str.w	r8, [sp, #20]

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    3920:	d008      	beq.n	3934 <GLCD_Triangle+0xe6>
    3922:	f1c2 0900 	rsb	r9, r2, #0
    3926:	f64f 7cff 	movw	ip, #65535	; 0xffff
    392a:	fa1f f989 	uxth.w	r9, r9
    392e:	f8cd c020 	str.w	ip, [sp, #32]
    3932:	e003      	b.n	393c <GLCD_Triangle+0xee>
    3934:	f04f 0a01 	mov.w	sl, #1
    3938:	f8cd a020 	str.w	sl, [sp, #32]
    	dy1 = (int16_t)(p2->y - p1->y);
    393c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
    3940:	f8dd 8014 	ldr.w	r8, [sp, #20]
    3944:	ebc8 000b 	rsb	r0, r8, fp
    3948:	b282      	uxth	r2, r0

    	dx2 = (int8_t)(p3->x - p1->x);
    394a:	7830      	ldrb	r0, [r6, #0]

    	t1x=t2x=p1->x; y=p1->y;   // Starting points

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);
    394c:	9203      	str	r2, [sp, #12]

    	dx2 = (int8_t)(p3->x - p1->x);
    394e:	1a41      	subs	r1, r0, r1
    3950:	b24a      	sxtb	r2, r1
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    3952:	b211      	sxth	r1, r2

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    3954:	fa1f fa82 	uxth.w	sl, r2
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    3958:	2900      	cmp	r1, #0

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    395a:	f8cd a010 	str.w	sl, [sp, #16]
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    395e:	da07      	bge.n	3970 <GLCD_Triangle+0x122>
    3960:	4252      	negs	r2, r2
    3962:	b290      	uxth	r0, r2
    3964:	f64f 78ff 	movw	r8, #65535	; 0xffff
    3968:	9004      	str	r0, [sp, #16]
    396a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    396e:	e003      	b.n	3978 <GLCD_Triangle+0x12a>
    3970:	f04f 0c01 	mov.w	ip, #1
    3974:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    	dy2 = (int8_t)(p3->y - p1->y);
    3978:	78b1      	ldrb	r1, [r6, #2]

    	if (dy1 > dx1)
    397a:	f8dd c00c 	ldr.w	ip, [sp, #12]
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    	dy2 = (int8_t)(p3->y - p1->y);
    397e:	1aca      	subs	r2, r1, r3
    3980:	b251      	sxtb	r1, r2

    	if (dy1 > dx1)
    3982:	fa0f f88c 	sxth.w	r8, ip
    3986:	fa0f f289 	sxth.w	r2, r9
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    	dy2 = (int8_t)(p3->y - p1->y);
    398a:	fa1f fa81 	uxth.w	sl, r1

    	if (dy1 > dx1)
    398e:	4590      	cmp	r8, r2
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    	dy2 = (int8_t)(p3->y - p1->y);
    3990:	4608      	mov	r0, r1
    3992:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34

    	if (dy1 > dx1)
    3996:	dd0f      	ble.n	39b8 <GLCD_Triangle+0x16a>
    	{   // swap values
            SWAP(dx1,dy1);
    3998:	f8dd a00c 	ldr.w	sl, [sp, #12]
    399c:	ea89 090a 	eor.w	r9, r9, sl
    39a0:	ea89 0c0a 	eor.w	ip, r9, sl
    39a4:	fa1f f88c 	uxth.w	r8, ip
    39a8:	ea88 0209 	eor.w	r2, r8, r9
    39ac:	fa1f f982 	uxth.w	r9, r2
    39b0:	f8cd 800c 	str.w	r8, [sp, #12]
    		changed1 = TRUE;
    39b4:	2201      	movs	r2, #1
    39b6:	e000      	b.n	39ba <GLCD_Triangle+0x16c>
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
{
    if(cfg->fill)
    {
    	uint16_t t1x,t2x,y,minx,maxx,t1xp,t2xp;
    	Bool changed1 = FALSE;
    39b8:	2200      	movs	r2, #0
    	if (dy1 > dx1)
    	{   // swap values
            SWAP(dx1,dy1);
    		changed1 = TRUE;
    	}
    	if (dy2 > dx2)
    39ba:	f8dd a010 	ldr.w	sl, [sp, #16]
    39be:	b200      	sxth	r0, r0
    39c0:	fa0f fc8a 	sxth.w	ip, sl
    39c4:	4560      	cmp	r0, ip
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
{
    if(cfg->fill)
    {
    	uint16_t t1x,t2x,y,minx,maxx,t1xp,t2xp;
    	Bool changed1 = FALSE;
    39c6:	9207      	str	r2, [sp, #28]
    	if (dy1 > dx1)
    	{   // swap values
            SWAP(dx1,dy1);
    		changed1 = TRUE;
    	}
    	if (dy2 > dx2)
    39c8:	dd0d      	ble.n	39e6 <GLCD_Triangle+0x198>
    	{   // swap values
            SWAP(dy2,dx2);
    39ca:	ea8a 0001 	eor.w	r0, sl, r1
    39ce:	b281      	uxth	r1, r0
    39d0:	ea81 080a 	eor.w	r8, r1, sl
    39d4:	ea88 0001 	eor.w	r0, r8, r1
    39d8:	b281      	uxth	r1, r0
    		changed2 = TRUE;
    39da:	2001      	movs	r0, #1
            SWAP(dx1,dy1);
    		changed1 = TRUE;
    	}
    	if (dy2 > dx2)
    	{   // swap values
            SWAP(dy2,dx2);
    39dc:	f8cd 8010 	str.w	r8, [sp, #16]
    39e0:	910d      	str	r1, [sp, #52]	; 0x34
    		changed2 = TRUE;
    39e2:	9009      	str	r0, [sp, #36]	; 0x24
    39e4:	e001      	b.n	39ea <GLCD_Triangle+0x19c>
{
    if(cfg->fill)
    {
    	uint16_t t1x,t2x,y,minx,maxx,t1xp,t2xp;
    	Bool changed1 = FALSE;
    	Bool changed2 = FALSE;
    39e6:	2100      	movs	r1, #0
    39e8:	9109      	str	r1, [sp, #36]	; 0x24
    	{   // swap values
            SWAP(dy2,dx2);
    		changed2 = TRUE;
    	}

    	e2 = (uint16_t)(dx2>>1);
    39ea:	f8dd a010 	ldr.w	sl, [sp, #16]
        // Flat top, just process the second half
        if(p1->y==p2->y) goto next;
    39ee:	459b      	cmp	fp, r3
    	{   // swap values
            SWAP(dy2,dx2);
    		changed2 = TRUE;
    	}

    	e2 = (uint16_t)(dx2>>1);
    39f0:	f34a 014e 	sbfx	r1, sl, #1, #15
    39f4:	fa1f fc81 	uxth.w	ip, r1
        // Flat top, just process the second half
        if(p1->y==p2->y) goto next;
    39f8:	f000 8095 	beq.w	3b26 <GLCD_Triangle+0x2d8>
        e1 = (uint16_t)(dx1>>1);
    39fc:	f349 034e 	sbfx	r3, r9, #1, #15
    3a00:	fa1f fa83 	uxth.w	sl, r3
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    3a04:	46a0      	mov	r8, r4
    	e2 = (uint16_t)(dx2>>1);
        // Flat top, just process the second half
        if(p1->y==p2->y) goto next;
        e1 = (uint16_t)(dx1>>1);

    	for (uint8_t i = 0; i < dx1;)
    3a06:	f04f 0b00 	mov.w	fp, #0
    3a0a:	fa0f f389 	sxth.w	r3, r9
    3a0e:	459b      	cmp	fp, r3
    3a10:	f280 8089 	bge.w	3b26 <GLCD_Triangle+0x2d8>
    	{
    		t1xp=0; t2xp=0;
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    3a14:	45a0      	cmp	r8, r4
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    3a16:	f04f 0e00 	mov.w	lr, #0
        e1 = (uint16_t)(dx1>>1);

    	for (uint8_t i = 0; i < dx1;)
    	{
    		t1xp=0; t2xp=0;
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    3a1a:	bf39      	ittee	cc
    3a1c:	4622      	movcc	r2, r4
    3a1e:	4641      	movcc	r1, r8
    3a20:	4642      	movcs	r2, r8
    3a22:	4621      	movcs	r1, r4
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    3a24:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    3a28:	459b      	cmp	fp, r3
    3a2a:	da08      	bge.n	3a3e <GLCD_Triangle+0x1f0>
    		{
    			i++;
    			e1 += dy1;
    3a2c:	9803      	ldr	r0, [sp, #12]
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    		{
    			i++;
    3a2e:	f10b 0b01 	add.w	fp, fp, #1
    			e1 += dy1;
    3a32:	4482      	add	sl, r0
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    		{
    			i++;
    3a34:	fa5f fb8b 	uxtb.w	fp, fp
    			e1 += dy1;
    3a38:	fa1f fa8a 	uxth.w	sl, sl
    	   	   	while (e1 >= dx1)
    3a3c:	e00f      	b.n	3a5e <GLCD_Triangle+0x210>
    3a3e:	2300      	movs	r3, #0
    3a40:	930c      	str	r3, [sp, #48]	; 0x30
    3a42:	e02d      	b.n	3aa0 <GLCD_Triangle+0x252>
    	   	   	{
    				e1 -= dx1;
       	   	   	   if (changed1) t1xp=signx1;//t1x += signx1;
    3a44:	9807      	ldr	r0, [sp, #28]
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3a46:	ebc9 0a0a 	rsb	sl, r9, sl
    3a4a:	fa1f fa8a 	uxth.w	sl, sl
    			i++;
    			e1 += dy1;
    	   	   	while (e1 >= dx1)
    	   	   	{
    				e1 -= dx1;
       	   	   	   if (changed1) t1xp=signx1;//t1x += signx1;
    3a4e:	2800      	cmp	r0, #0
    3a50:	d0f5      	beq.n	3a3e <GLCD_Triangle+0x1f0>
    3a52:	f8dd e020 	ldr.w	lr, [sp, #32]
    3a56:	fa1f fe8e 	uxth.w	lr, lr
    3a5a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
            // process first line until y value is about to change
    		while(i<dx1)
    		{
    			i++;
    			e1 += dy1;
    	   	   	while (e1 >= dx1)
    3a5e:	459a      	cmp	sl, r3
    3a60:	daf0      	bge.n	3a44 <GLCD_Triangle+0x1f6>
    	   	   	{
    				e1 -= dx1;
       	   	   	   if (changed1) t1xp=signx1;//t1x += signx1;
    				else          goto next1;
    			}
    			if (changed1) break;
    3a62:	9807      	ldr	r0, [sp, #28]
    3a64:	2800      	cmp	r0, #0
    3a66:	d1ea      	bne.n	3a3e <GLCD_Triangle+0x1f0>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3a68:	f8dd e020 	ldr.w	lr, [sp, #32]
    3a6c:	44f0      	add	r8, lr
    3a6e:	fa1f f888 	uxth.w	r8, r8
    3a72:	e7d9      	b.n	3a28 <GLCD_Triangle+0x1da>
    3a74:	f8dd e010 	ldr.w	lr, [sp, #16]
    		{
    			e2 += dy2;
    			while (e2 >= dx2)
    			{
    				e2 -= dx2;
    				if (changed2) t2xp=signx2;//t2x += signx2;
    3a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3a7a:	ebce 030c 	rsb	r3, lr, ip
    3a7e:	fa1f fc83 	uxth.w	ip, r3
    		{
    			e2 += dy2;
    			while (e2 >= dx2)
    			{
    				e2 -= dx2;
    				if (changed2) t2xp=signx2;//t2x += signx2;
    3a82:	b198      	cbz	r0, 3aac <GLCD_Triangle+0x25e>
    3a84:	980a      	ldr	r0, [sp, #40]	; 0x28
    3a86:	b283      	uxth	r3, r0
    3a88:	930c      	str	r3, [sp, #48]	; 0x30
    	next1:
            // process second line until y value is about to change
    		while (1)
    		{
    			e2 += dy2;
    			while (e2 >= dx2)
    3a8a:	f8dd e010 	ldr.w	lr, [sp, #16]
    3a8e:	fa0f f08e 	sxth.w	r0, lr
    3a92:	4584      	cmp	ip, r0
    3a94:	daee      	bge.n	3a74 <GLCD_Triangle+0x226>
    			{
    				e2 -= dx2;
    				if (changed2) t2xp=signx2;//t2x += signx2;
    				else          goto next2;
    			}
    			if (changed2)     break;
    3a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a98:	b943      	cbnz	r3, 3aac <GLCD_Triangle+0x25e>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3a9a:	980a      	ldr	r0, [sp, #40]	; 0x28
    3a9c:	1824      	adds	r4, r4, r0
    3a9e:	b2a4      	uxth	r4, r4
    	// Move line
    	next1:
            // process second line until y value is about to change
    		while (1)
    		{
    			e2 += dy2;
    3aa0:	980d      	ldr	r0, [sp, #52]	; 0x34
    3aa2:	eb0c 0300 	add.w	r3, ip, r0
    3aa6:	fa1f fc83 	uxth.w	ip, r3
    			while (e2 >= dx2)
    3aaa:	e7ee      	b.n	3a8a <GLCD_Triangle+0x23c>
    			else              t2x += signx2;
    		}
    	next2:
    		if(minx>t1x) minx=t1x; if(minx>t2x) minx=t2x;
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    3aac:	f8dd e014 	ldr.w	lr, [sp, #20]
    3ab0:	9b06      	ldr	r3, [sp, #24]
    3ab2:	4588      	cmp	r8, r1
    3ab4:	bf38      	it	cc
    3ab6:	4641      	movcc	r1, r8
    3ab8:	4590      	cmp	r8, r2
    3aba:	bf28      	it	cs
    3abc:	4642      	movcs	r2, r8
    3abe:	b288      	uxth	r0, r1
    3ac0:	b292      	uxth	r2, r2
    3ac2:	fa0f f18e 	sxth.w	r1, lr
    3ac6:	f8b3 e004 	ldrh.w	lr, [r3, #4]
    3aca:	42a0      	cmp	r0, r4
    3acc:	bf28      	it	cs
    3ace:	4620      	movcs	r0, r4
    3ad0:	42a2      	cmp	r2, r4
    3ad2:	bf38      	it	cc
    3ad4:	4622      	movcc	r2, r4
    3ad6:	460b      	mov	r3, r1
    3ad8:	f8cd e000 	str.w	lr, [sp]
    3adc:	b200      	sxth	r0, r0
    3ade:	b212      	sxth	r2, r2
    3ae0:	f8cd c008 	str.w	ip, [sp, #8]
    3ae4:	f7ff fdec 	bl	36c0 <GLCD_Line>

    		// Now increase y
    		if(!changed1) t1x += signx1;
    3ae8:	9907      	ldr	r1, [sp, #28]
    3aea:	f8dd c008 	ldr.w	ip, [sp, #8]
    3aee:	b919      	cbnz	r1, 3af8 <GLCD_Triangle+0x2aa>
    3af0:	9808      	ldr	r0, [sp, #32]
    3af2:	4480      	add	r8, r0
    3af4:	fa1f f888 	uxth.w	r8, r8
    		t1x+=t1xp;
    3af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    		if(!changed2) t2x += signx2;
    3afa:	9909      	ldr	r1, [sp, #36]	; 0x24
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y

    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    3afc:	eb08 0302 	add.w	r3, r8, r2
    3b00:	fa1f f883 	uxth.w	r8, r3
    		if(!changed2) t2x += signx2;
    3b04:	b911      	cbnz	r1, 3b0c <GLCD_Triangle+0x2be>
    3b06:	980a      	ldr	r0, [sp, #40]	; 0x28
    3b08:	1824      	adds	r4, r4, r0
    3b0a:	b2a4      	uxth	r4, r4
    		t2x+=t2xp;
        	y += 1;
    3b0c:	9b05      	ldr	r3, [sp, #20]

    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    3b0e:	990c      	ldr	r1, [sp, #48]	; 0x30
        	y += 1;
    3b10:	1c58      	adds	r0, r3, #1

    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    3b12:	1862      	adds	r2, r4, r1
    3b14:	b294      	uxth	r4, r2
        	y += 1;
    3b16:	b282      	uxth	r2, r0
    3b18:	9205      	str	r2, [sp, #20]
    		if(y==p2->y) break;
    3b1a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    3b1e:	9a05      	ldr	r2, [sp, #20]
    3b20:	429a      	cmp	r2, r3
    3b22:	f47f af72 	bne.w	3a0a <GLCD_Triangle+0x1bc>
       }
    	next:
    	// Second half
    	dx1 = (int8_t)(p3->x - p2->x); if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    3b26:	7831      	ldrb	r1, [r6, #0]
    3b28:	f8b5 a000 	ldrh.w	sl, [r5]
    3b2c:	ebca 0201 	rsb	r2, sl, r1
    3b30:	b250      	sxtb	r0, r2
    3b32:	b201      	sxth	r1, r0
    3b34:	2900      	cmp	r1, #0
    3b36:	fa1f f980 	uxth.w	r9, r0
    3b3a:	da07      	bge.n	3b4c <GLCD_Triangle+0x2fe>
    3b3c:	f1c0 0900 	rsb	r9, r0, #0
    3b40:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3b44:	fa1f f989 	uxth.w	r9, r9
    3b48:	9007      	str	r0, [sp, #28]
    3b4a:	e001      	b.n	3b50 <GLCD_Triangle+0x302>
    3b4c:	2201      	movs	r2, #1
    3b4e:	9207      	str	r2, [sp, #28]
    	dy1 = (int8_t)(p3->y - p2->y);
    3b50:	78b1      	ldrb	r1, [r6, #2]
    3b52:	78ab      	ldrb	r3, [r5, #2]
    	t1x=p2->x;
    3b54:	fa1f f88a 	uxth.w	r8, sl
    		if(y==p2->y) break;
       }
    	next:
    	// Second half
    	dx1 = (int8_t)(p3->x - p2->x); if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int8_t)(p3->y - p2->y);
    3b58:	1aca      	subs	r2, r1, r3
    3b5a:	b250      	sxtb	r0, r2
    3b5c:	b281      	uxth	r1, r0
    3b5e:	910c      	str	r1, [sp, #48]	; 0x30
    	t1x=p2->x;

    	if (dy1 > dx1)
    3b60:	b202      	sxth	r2, r0
    3b62:	fa0f f189 	sxth.w	r1, r9
    3b66:	428a      	cmp	r2, r1
    3b68:	dd0b      	ble.n	3b82 <GLCD_Triangle+0x334>
    	{   // swap values
            SWAP(dy1,dx1);
    3b6a:	ea89 0200 	eor.w	r2, r9, r0
    3b6e:	b293      	uxth	r3, r2
    3b70:	ea83 0909 	eor.w	r9, r3, r9
    3b74:	ea89 0003 	eor.w	r0, r9, r3
    3b78:	b282      	uxth	r2, r0
    3b7a:	920c      	str	r2, [sp, #48]	; 0x30
    		changed1 = TRUE;
    3b7c:	2201      	movs	r2, #1
    3b7e:	9203      	str	r2, [sp, #12]
    3b80:	e001      	b.n	3b86 <GLCD_Triangle+0x338>
    	} else changed1=FALSE;
    3b82:	2000      	movs	r0, #0
    3b84:	9003      	str	r0, [sp, #12]

    	e1 = (uint8_t)(dx1>>1);
    3b86:	f3c9 0b47 	ubfx	fp, r9, #1, #8

    	for (uint8_t i = 0; i<=dx1; i++)
    3b8a:	f04f 0a00 	mov.w	sl, #0
    3b8e:	fa0f f389 	sxth.w	r3, r9
    3b92:	459a      	cmp	sl, r3
    3b94:	f300 808d 	bgt.w	3cb2 <GLCD_Triangle+0x464>
    	{
    		t1xp=0; t2xp=0;
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    3b98:	45a0      	cmp	r8, r4
    3b9a:	bf39      	ittee	cc
    3b9c:	4622      	movcc	r2, r4
    3b9e:	4641      	movcc	r1, r8
    3ba0:	4642      	movcs	r2, r8
    3ba2:	4621      	movcs	r1, r4
    		else		{ minx=t2x; maxx=t1x; }
    	    // process first line until y value is about to change
    		while(i<dx1)
    3ba4:	459a      	cmp	sl, r3
    3ba6:	da12      	bge.n	3bce <GLCD_Triangle+0x380>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3ba8:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    3bac:	eb0b 000e 	add.w	r0, fp, lr
    3bb0:	fa1f fb80 	uxth.w	fp, r0
    		else		{ minx=t2x; maxx=t1x; }
    	    // process first line until y value is about to change
    		while(i<dx1)
    		{
        		e1 += dy1;
    	   	   	while (e1 >= dx1)
    3bb4:	459b      	cmp	fp, r3
    3bb6:	db08      	blt.n	3bca <GLCD_Triangle+0x37c>
    	   	   	{
    				e1 -= dx1;
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    3bb8:	9b03      	ldr	r3, [sp, #12]
    		while(i<dx1)
    		{
        		e1 += dy1;
    	   	   	while (e1 >= dx1)
    	   	   	{
    				e1 -= dx1;
    3bba:	ebc9 000b 	rsb	r0, r9, fp
    3bbe:	fa1f fb80 	uxth.w	fp, r0
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    3bc2:	b13b      	cbz	r3, 3bd4 <GLCD_Triangle+0x386>
    3bc4:	9b07      	ldr	r3, [sp, #28]
    3bc6:	b29b      	uxth	r3, r3
    3bc8:	e002      	b.n	3bd0 <GLCD_Triangle+0x382>
    				else          goto next3;
    			}
    			if (changed1) break;
    3bca:	9803      	ldr	r0, [sp, #12]
    3bcc:	b158      	cbz	r0, 3be6 <GLCD_Triangle+0x398>
    3bce:	2300      	movs	r3, #0
    3bd0:	9308      	str	r3, [sp, #32]
    3bd2:	e001      	b.n	3bd8 <GLCD_Triangle+0x38a>
    		{
        		e1 += dy1;
    	   	   	while (e1 >= dx1)
    	   	   	{
    				e1 -= dx1;
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    3bd4:	9803      	ldr	r0, [sp, #12]
    3bd6:	9008      	str	r0, [sp, #32]
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    		}
    	next3:
            // process second line until y value is about to change
    		while (t2x!=p3->x)
    3bd8:	f04f 0e00 	mov.w	lr, #0
    3bdc:	f9b6 3000 	ldrsh.w	r3, [r6]
    3be0:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    3be4:	e022      	b.n	3c2c <GLCD_Triangle+0x3de>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3be6:	9807      	ldr	r0, [sp, #28]
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    				else          goto next3;
    			}
    			if (changed1) break;
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    3be8:	f10a 0a01 	add.w	sl, sl, #1
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3bec:	4480      	add	r8, r0
    3bee:	fa1f f888 	uxth.w	r8, r8
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    				else          goto next3;
    			}
    			if (changed1) break;
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    3bf2:	fa5f fa8a 	uxtb.w	sl, sl
    3bf6:	e7d5      	b.n	3ba4 <GLCD_Triangle+0x356>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3bf8:	f8dd e010 	ldr.w	lr, [sp, #16]
    3bfc:	ebce 000c 	rsb	r0, lr, ip
    3c00:	fa1f fc80 	uxth.w	ip, r0
    		{
    			e2 += dy2;
    	   	   	while (e2 >= dx2)
    	   	   	{
    				e2 -= dx2;
    				if(changed2) t2xp=signx2;
    3c04:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c06:	b1d0      	cbz	r0, 3c3e <GLCD_Triangle+0x3f0>
    3c08:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    3c0c:	fa1f fe8e 	uxth.w	lr, lr
    3c10:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    	next3:
            // process second line until y value is about to change
    		while (t2x!=p3->x)
    		{
    			e2 += dy2;
    	   	   	while (e2 >= dx2)
    3c14:	f8dd e010 	ldr.w	lr, [sp, #16]
    3c18:	fa0f f08e 	sxth.w	r0, lr
    3c1c:	4584      	cmp	ip, r0
    3c1e:	daeb      	bge.n	3bf8 <GLCD_Triangle+0x3aa>
    	   	   	{
    				e2 -= dx2;
    				if(changed2) t2xp=signx2;
    				else          goto next4;
    			}
    			if (changed2)     break;
    3c20:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c22:	b960      	cbnz	r0, 3c3e <GLCD_Triangle+0x3f0>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3c24:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    3c28:	4474      	add	r4, lr
    3c2a:	b2a4      	uxth	r4, r4
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    		}
    	next3:
            // process second line until y value is about to change
    		while (t2x!=p3->x)
    3c2c:	429c      	cmp	r4, r3
    3c2e:	d006      	beq.n	3c3e <GLCD_Triangle+0x3f0>
    		{
    			e2 += dy2;
    3c30:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    3c34:	eb0c 000e 	add.w	r0, ip, lr
    3c38:	fa1f fc80 	uxth.w	ip, r0
    	   	   	while (e2 >= dx2)
    3c3c:	e7ea      	b.n	3c14 <GLCD_Triangle+0x3c6>
    		}
    	next4:

    		if(minx>t1x) minx=t1x; if(minx>t2x) minx=t2x;
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    3c3e:	9b05      	ldr	r3, [sp, #20]
    3c40:	4588      	cmp	r8, r1
    3c42:	bf38      	it	cc
    3c44:	4641      	movcc	r1, r8
    3c46:	b288      	uxth	r0, r1
    3c48:	b219      	sxth	r1, r3
    3c4a:	9b06      	ldr	r3, [sp, #24]
    3c4c:	4590      	cmp	r8, r2
    3c4e:	bf28      	it	cs
    3c50:	4642      	movcs	r2, r8
    3c52:	f8b3 e004 	ldrh.w	lr, [r3, #4]
    3c56:	b292      	uxth	r2, r2
    3c58:	42a0      	cmp	r0, r4
    3c5a:	bf28      	it	cs
    3c5c:	4620      	movcs	r0, r4
    3c5e:	42a2      	cmp	r2, r4
    3c60:	bf38      	it	cc
    3c62:	4622      	movcc	r2, r4
    3c64:	460b      	mov	r3, r1
    3c66:	f8cd e000 	str.w	lr, [sp]
    3c6a:	b200      	sxth	r0, r0
    3c6c:	b212      	sxth	r2, r2
    3c6e:	f8cd c008 	str.w	ip, [sp, #8]
    3c72:	f7ff fd25 	bl	36c0 <GLCD_Line>
    		// Now increase y
    		if(!changed1) t1x += signx1;
    3c76:	9903      	ldr	r1, [sp, #12]
    3c78:	f8dd c008 	ldr.w	ip, [sp, #8]
    3c7c:	b919      	cbnz	r1, 3c86 <GLCD_Triangle+0x438>
    3c7e:	9807      	ldr	r0, [sp, #28]
    3c80:	4480      	add	r8, r0
    3c82:	fa1f f888 	uxth.w	r8, r8
    		t1x+=t1xp;
    3c86:	9a08      	ldr	r2, [sp, #32]
    		if(!changed2) t2x += signx2;
    3c88:	9909      	ldr	r1, [sp, #36]	; 0x24
    		if(minx>t1x) minx=t1x; if(minx>t2x) minx=t2x;
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    3c8a:	eb08 0302 	add.w	r3, r8, r2
    3c8e:	fa1f f883 	uxth.w	r8, r3
    		if(!changed2) t2x += signx2;
    3c92:	b911      	cbnz	r1, 3c9a <GLCD_Triangle+0x44c>
    3c94:	980a      	ldr	r0, [sp, #40]	; 0x28
    3c96:	1824      	adds	r4, r4, r0
    3c98:	b2a4      	uxth	r4, r4
    		t2x+=t2xp;
        	y += 1;
    3c9a:	9b05      	ldr	r3, [sp, #20]
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    3c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
        	y += 1;
    3c9e:	1c58      	adds	r0, r3, #1
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    3ca0:	1862      	adds	r2, r4, r1
    3ca2:	b294      	uxth	r4, r2
        	y += 1;
    3ca4:	b282      	uxth	r2, r0
    3ca6:	9205      	str	r2, [sp, #20]
    		if(y>p3->y) break;
    3ca8:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
    3cac:	9a05      	ldr	r2, [sp, #20]
    3cae:	429a      	cmp	r2, r3
    3cb0:	dd03      	ble.n	3cba <GLCD_Triangle+0x46c>
    	}
    	cfg->fill = NO;
    3cb2:	9c06      	ldr	r4, [sp, #24]
    3cb4:	2100      	movs	r1, #0
    3cb6:	7021      	strb	r1, [r4, #0]
    3cb8:	e004      	b.n	3cc4 <GLCD_Triangle+0x476>
    		changed1 = TRUE;
    	} else changed1=FALSE;

    	e1 = (uint8_t)(dx1>>1);

    	for (uint8_t i = 0; i<=dx1; i++)
    3cba:	f10a 0a01 	add.w	sl, sl, #1
    3cbe:	fa5f fa8a 	uxtb.w	sl, sl
    3cc2:	e764      	b.n	3b8e <GLCD_Triangle+0x340>
    	}
    	cfg->fill = NO;
    }


	if(!cfg->fill && cfg->bndry)
    3cc4:	9c06      	ldr	r4, [sp, #24]
    3cc6:	7820      	ldrb	r0, [r4, #0]
    3cc8:	bb40      	cbnz	r0, 3d1c <GLCD_Triangle+0x4ce>
    3cca:	7863      	ldrb	r3, [r4, #1]
    3ccc:	b333      	cbz	r3, 3d1c <GLCD_Triangle+0x4ce>
	{
		GLCD_Line(p1->x, p1->y, p2->x, p2->y, cfg->bcolor);
    3cce:	f8b4 e002 	ldrh.w	lr, [r4, #2]
    3cd2:	f9b7 0000 	ldrsh.w	r0, [r7]
    3cd6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    3cda:	f9b5 2000 	ldrsh.w	r2, [r5]
    3cde:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    3ce2:	f8cd e000 	str.w	lr, [sp]
    3ce6:	f7ff fceb 	bl	36c0 <GLCD_Line>
		GLCD_Line(p1->x, p1->y, p3->x, p3->y, cfg->bcolor);
    3cea:	f9b7 0000 	ldrsh.w	r0, [r7]
    3cee:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    3cf2:	9f06      	ldr	r7, [sp, #24]
    3cf4:	f9b6 2000 	ldrsh.w	r2, [r6]
    3cf8:	887c      	ldrh	r4, [r7, #2]
    3cfa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
    3cfe:	9400      	str	r4, [sp, #0]
    3d00:	f7ff fcde 	bl	36c0 <GLCD_Line>
		GLCD_Line(p2->x, p2->y, p3->x, p3->y, cfg->bcolor);
    3d04:	887c      	ldrh	r4, [r7, #2]
    3d06:	f9b5 0000 	ldrsh.w	r0, [r5]
    3d0a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    3d0e:	f9b6 2000 	ldrsh.w	r2, [r6]
    3d12:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
    3d16:	9400      	str	r4, [sp, #0]
    3d18:	f7ff fcd2 	bl	36c0 <GLCD_Line>
	}
}
    3d1c:	b00f      	add	sp, #60	; 0x3c
    3d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003d22 <Show_BarGraph_VI>:
 * @brief	    Display Bar Graph function
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Show_BarGraph_VI(void)
{
    3d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	COORDINATE_Type point1,point2,point3;
	COLORCFG_Type tricfg;
    uint16_t y_scale,x_scale,i;

	// X and Y lines
	GLCD_Line(30,5,30,238,Black);
    3d26:	201e      	movs	r0, #30
 * @brief	    Display Bar Graph function
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Show_BarGraph_VI(void)
{
    3d28:	b089      	sub	sp, #36	; 0x24
	COORDINATE_Type point1,point2,point3;
	COLORCFG_Type tricfg;
    uint16_t y_scale,x_scale,i;

	// X and Y lines
	GLCD_Line(30,5,30,238,Black);
    3d2a:	2400      	movs	r4, #0
    3d2c:	4602      	mov	r2, r0
    3d2e:	9400      	str	r4, [sp, #0]
    3d30:	2105      	movs	r1, #5
    3d32:	23ee      	movs	r3, #238	; 0xee
    3d34:	f7ff fcc4 	bl	36c0 <GLCD_Line>
	GLCD_Line(1,220,315,220,Black);
    3d38:	f240 1b3b 	movw	fp, #315	; 0x13b
    3d3c:	21dc      	movs	r1, #220	; 0xdc
    3d3e:	460b      	mov	r3, r1
    3d40:	9400      	str	r4, [sp, #0]
    3d42:	2001      	movs	r0, #1
    3d44:	465a      	mov	r2, fp
    3d46:	f7ff fcbb 	bl	36c0 <GLCD_Line>

	gprintf(22,5,1,Black,"Y");
    3d4a:	4b65      	ldr	r3, [pc, #404]	; (3ee0 <Show_BarGraph_VI+0x1be>)
    3d4c:	2105      	movs	r1, #5
    3d4e:	9300      	str	r3, [sp, #0]
    3d50:	2201      	movs	r2, #1
    3d52:	4623      	mov	r3, r4
    3d54:	2016      	movs	r0, #22
    3d56:	f7ff fab2 	bl	32be <gprintf>
	gprintf(310,225,1,Black,"X");
    3d5a:	4862      	ldr	r0, [pc, #392]	; (3ee4 <Show_BarGraph_VI+0x1c2>)
    3d5c:	4623      	mov	r3, r4
    3d5e:	9000      	str	r0, [sp, #0]
    3d60:	21e1      	movs	r1, #225	; 0xe1
    3d62:	2201      	movs	r2, #1
    3d64:	f44f 709b 	mov.w	r0, #310	; 0x136
    3d68:	f7ff faa9 	bl	32be <gprintf>
	gprintf(50,5,1,Black,"X=T  Y=V");
    3d6c:	495e      	ldr	r1, [pc, #376]	; (3ee8 <Show_BarGraph_VI+0x1c6>)
    3d6e:	4623      	mov	r3, r4
    3d70:	9100      	str	r1, [sp, #0]
    3d72:	2201      	movs	r2, #1
    3d74:	2105      	movs	r1, #5
    3d76:	2032      	movs	r0, #50	; 0x32
    3d78:	f7ff faa1 	bl	32be <gprintf>

	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
	point1.y = 5;
    3d7c:	2205      	movs	r2, #5
	point2.x = 28;
	point2.y = 10;
	point3.x = 32;
	point3.y = 10;
	tricfg.fill = YES;
    3d7e:	2501      	movs	r5, #1
	gprintf(310,225,1,Black,"X");
	gprintf(50,5,1,Black,"X=T  Y=V");

	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
    3d80:	f04f 0a1e 	mov.w	sl, #30
	point1.y = 5;
	point2.x = 28;
    3d84:	f04f 091c 	mov.w	r9, #28
	point2.y = 10;
    3d88:	270a      	movs	r7, #10
	point3.x = 32;
    3d8a:	f04f 0820 	mov.w	r8, #32
	gprintf(50,5,1,Black,"X=T  Y=V");

	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
	point1.y = 5;
    3d8e:	f8ad 200e 	strh.w	r2, [sp, #14]
	point3.x = 32;
	point3.y = 10;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3d92:	a803      	add	r0, sp, #12
    3d94:	a904      	add	r1, sp, #16
    3d96:	aa05      	add	r2, sp, #20
    3d98:	ab06      	add	r3, sp, #24
	gprintf(310,225,1,Black,"X");
	gprintf(50,5,1,Black,"X=T  Y=V");

	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
    3d9a:	f8ad a00c 	strh.w	sl, [sp, #12]
	point1.y = 5;
	point2.x = 28;
    3d9e:	f8ad 9010 	strh.w	r9, [sp, #16]
	point2.y = 10;
	point3.x = 32;
    3da2:	f8ad 8014 	strh.w	r8, [sp, #20]
	point3.y = 10;
	tricfg.fill = YES;
    3da6:	f88d 5018 	strb.w	r5, [sp, #24]
	tricfg.bndry= NO;
    3daa:	f88d 4019 	strb.w	r4, [sp, #25]
	tricfg.fill_color=Black;
    3dae:	f8ad 401c 	strh.w	r4, [sp, #28]
	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
	point1.y = 5;
	point2.x = 28;
	point2.y = 10;
    3db2:	f8ad 7012 	strh.w	r7, [sp, #18]
	point3.x = 32;
	point3.y = 10;
    3db6:	f8ad 7016 	strh.w	r7, [sp, #22]
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3dba:	f7ff fd48 	bl	384e <GLCD_Triangle>

	// Bottom arrow coordinates
	point1.x = 30;
	point1.y = 238;
	point2.x = 28;
	point2.y = 233;
    3dbe:	20e9      	movs	r0, #233	; 0xe9
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// Bottom arrow coordinates
	point1.x = 30;
	point1.y = 238;
    3dc0:	23ee      	movs	r3, #238	; 0xee
    3dc2:	f8ad 300e 	strh.w	r3, [sp, #14]
	point2.x = 28;
	point2.y = 233;
    3dc6:	f8ad 0012 	strh.w	r0, [sp, #18]
	point3.x = 32;
	point3.y = 233;
    3dca:	f8ad 0016 	strh.w	r0, [sp, #22]
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3dce:	a904      	add	r1, sp, #16
    3dd0:	a803      	add	r0, sp, #12
    3dd2:	aa05      	add	r2, sp, #20
    3dd4:	ab06      	add	r3, sp, #24
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// Bottom arrow coordinates
	point1.x = 30;
    3dd6:	f8ad a00c 	strh.w	sl, [sp, #12]
	point1.y = 238;
	point2.x = 28;
    3dda:	f8ad 9010 	strh.w	r9, [sp, #16]
	point2.y = 233;
	point3.x = 32;
    3dde:	f8ad 8014 	strh.w	r8, [sp, #20]
	point3.y = 233;
	tricfg.fill = YES;
    3de2:	f88d 5018 	strb.w	r5, [sp, #24]
	tricfg.bndry= NO;
    3de6:	f88d 4019 	strb.w	r4, [sp, #25]
	tricfg.fill_color=Black;
    3dea:	f8ad 401c 	strh.w	r4, [sp, #28]
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3dee:	f7ff fd2e 	bl	384e <GLCD_Triangle>

	// X Line Arrows Left and Right
	// Left arrow coordinates
	point1.x = 1;
	point1.y = 220;
	point2.x = 6;
    3df2:	2106      	movs	r1, #6
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X Line Arrows Left and Right
	// Left arrow coordinates
	point1.x = 1;
	point1.y = 220;
    3df4:	f04f 0adc 	mov.w	sl, #220	; 0xdc
	point2.x = 6;
    3df8:	f8ad 1010 	strh.w	r1, [sp, #16]
	point2.y = 218;
    3dfc:	f04f 09da 	mov.w	r9, #218	; 0xda
	point3.x = 6;
    3e00:	f8ad 1014 	strh.w	r1, [sp, #20]
	point3.y = 222;
    3e04:	f04f 08de 	mov.w	r8, #222	; 0xde
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3e08:	a803      	add	r0, sp, #12
    3e0a:	a904      	add	r1, sp, #16
    3e0c:	aa05      	add	r2, sp, #20
    3e0e:	ab06      	add	r3, sp, #24
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X Line Arrows Left and Right
	// Left arrow coordinates
	point1.x = 1;
    3e10:	f8ad 500c 	strh.w	r5, [sp, #12]
	point1.y = 220;
	point2.x = 6;
	point2.y = 218;
	point3.x = 6;
	point3.y = 222;
	tricfg.fill = YES;
    3e14:	f88d 5018 	strb.w	r5, [sp, #24]
	tricfg.bndry= NO;
    3e18:	f88d 4019 	strb.w	r4, [sp, #25]
	tricfg.fill_color=Black;
    3e1c:	f8ad 401c 	strh.w	r4, [sp, #28]
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X Line Arrows Left and Right
	// Left arrow coordinates
	point1.x = 1;
	point1.y = 220;
    3e20:	f8ad a00e 	strh.w	sl, [sp, #14]
	point2.x = 6;
	point2.y = 218;
    3e24:	f8ad 9012 	strh.w	r9, [sp, #18]
	point3.x = 6;
	point3.y = 222;
    3e28:	f8ad 8016 	strh.w	r8, [sp, #22]
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3e2c:	f7ff fd0f 	bl	384e <GLCD_Triangle>

	// Right arrow coordinates
	point1.x = 315;
	point1.y = 220;
	point2.x = 310;
    3e30:	f44f 729b 	mov.w	r2, #310	; 0x136
    3e34:	f8ad 2010 	strh.w	r2, [sp, #16]
	point2.y = 218;
	point3.x = 310;
    3e38:	f8ad 2014 	strh.w	r2, [sp, #20]
	point3.y = 222;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3e3c:	a803      	add	r0, sp, #12
    3e3e:	a904      	add	r1, sp, #16
    3e40:	aa05      	add	r2, sp, #20
    3e42:	ab06      	add	r3, sp, #24
	point1.y = 220;
	point2.x = 310;
	point2.y = 218;
	point3.x = 310;
	point3.y = 222;
	tricfg.fill = YES;
    3e44:	f88d 5018 	strb.w	r5, [sp, #24]
	tricfg.bndry= NO;
    3e48:	f88d 4019 	strb.w	r4, [sp, #25]
	tricfg.fill_color=Black;
    3e4c:	f8ad 401c 	strh.w	r4, [sp, #28]
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// Right arrow coordinates
	point1.x = 315;
    3e50:	f8ad b00c 	strh.w	fp, [sp, #12]
	point1.y = 220;
    3e54:	f8ad a00e 	strh.w	sl, [sp, #14]
	point2.x = 310;
	point2.y = 218;
    3e58:	f8ad 9012 	strh.w	r9, [sp, #18]
	point3.x = 310;
	point3.y = 222;
    3e5c:	f8ad 8016 	strh.w	r8, [sp, #22]
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3e60:	f7ff fcf5 	bl	384e <GLCD_Triangle>

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
    3e64:	4b21      	ldr	r3, [pc, #132]	; (3eec <Show_BarGraph_VI+0x1ca>)
    3e66:	4620      	mov	r0, r4
    3e68:	9300      	str	r3, [sp, #0]
    3e6a:	462a      	mov	r2, r5
    3e6c:	4623      	mov	r3, r4
    3e6e:	21e1      	movs	r1, #225	; 0xe1
    3e70:	f7ff fa25 	bl	32be <gprintf>
	point2.y = 10;
	point3.x = 32;
	point3.y = 10;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
    3e74:	4626      	mov	r6, r4
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
    3e76:	463d      	mov	r5, r7
	for(y_scale=200,i=1; y_scale>=20; y_scale=y_scale-20,i++)
    3e78:	24c8      	movs	r4, #200	; 0xc8
	{
		if(y_scale!=20)
    3e7a:	2c14      	cmp	r4, #20
    3e7c:	d005      	beq.n	3e8a <Show_BarGraph_VI+0x168>
		{
			gprintf(14,y_scale,1,Black,"%d02",i*10);
    3e7e:	4b1c      	ldr	r3, [pc, #112]	; (3ef0 <Show_BarGraph_VI+0x1ce>)
    3e80:	200e      	movs	r0, #14
    3e82:	e88d 0028 	stmia.w	sp, {r3, r5}
    3e86:	b221      	sxth	r1, r4
    3e88:	e004      	b.n	3e94 <Show_BarGraph_VI+0x172>
		}
		else
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
    3e8a:	4b1a      	ldr	r3, [pc, #104]	; (3ef4 <Show_BarGraph_VI+0x1d2>)
    3e8c:	200a      	movs	r0, #10
    3e8e:	e88d 0028 	stmia.w	sp, {r3, r5}
    3e92:	4621      	mov	r1, r4
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
	for(y_scale=200,i=1; y_scale>=20; y_scale=y_scale-20,i++)
    3e94:	3c14      	subs	r4, #20
		{
			gprintf(14,y_scale,1,Black,"%d02",i*10);
		}
		else
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
    3e96:	2201      	movs	r2, #1
    3e98:	2300      	movs	r3, #0
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
	for(y_scale=200,i=1; y_scale>=20; y_scale=y_scale-20,i++)
    3e9a:	b2a4      	uxth	r4, r4
		{
			gprintf(14,y_scale,1,Black,"%d02",i*10);
		}
		else
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
    3e9c:	f7ff fa0f 	bl	32be <gprintf>
    3ea0:	350a      	adds	r5, #10
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
	for(y_scale=200,i=1; y_scale>=20; y_scale=y_scale-20,i++)
    3ea2:	2c00      	cmp	r4, #0
    3ea4:	d1e9      	bne.n	3e7a <Show_BarGraph_VI+0x158>
    3ea6:	250a      	movs	r5, #10
    3ea8:	2438      	movs	r4, #56	; 0x38
		}

	}
	for(x_scale=56,i=1; x_scale<=300; x_scale=x_scale+26,i++)
	{
		if(x_scale<290)
    3eaa:	f5b4 7f91 	cmp.w	r4, #290	; 0x122
    3eae:	d004      	beq.n	3eba <Show_BarGraph_VI+0x198>
		{
			gprintf(x_scale,225,1,Black,"%d02",i*10);
    3eb0:	4b0f      	ldr	r3, [pc, #60]	; (3ef0 <Show_BarGraph_VI+0x1ce>)
    3eb2:	b220      	sxth	r0, r4
    3eb4:	e88d 0028 	stmia.w	sp, {r3, r5}
    3eb8:	e004      	b.n	3ec4 <Show_BarGraph_VI+0x1a2>
		}
		else
		{
			gprintf(x_scale-5,225,1,Black,"%d03",i*10);
    3eba:	4b0e      	ldr	r3, [pc, #56]	; (3ef4 <Show_BarGraph_VI+0x1d2>)
    3ebc:	f240 101d 	movw	r0, #285	; 0x11d
    3ec0:	e88d 0028 	stmia.w	sp, {r3, r5}
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
		}

	}
	for(x_scale=56,i=1; x_scale<=300; x_scale=x_scale+26,i++)
    3ec4:	341a      	adds	r4, #26
		{
			gprintf(x_scale,225,1,Black,"%d02",i*10);
		}
		else
		{
			gprintf(x_scale-5,225,1,Black,"%d03",i*10);
    3ec6:	21e1      	movs	r1, #225	; 0xe1
    3ec8:	2201      	movs	r2, #1
    3eca:	2300      	movs	r3, #0
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
		}

	}
	for(x_scale=56,i=1; x_scale<=300; x_scale=x_scale+26,i++)
    3ecc:	b2a4      	uxth	r4, r4
		{
			gprintf(x_scale,225,1,Black,"%d02",i*10);
		}
		else
		{
			gprintf(x_scale-5,225,1,Black,"%d03",i*10);
    3ece:	f7ff f9f6 	bl	32be <gprintf>
    3ed2:	350a      	adds	r5, #10
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
		}

	}
	for(x_scale=56,i=1; x_scale<=300; x_scale=x_scale+26,i++)
    3ed4:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
    3ed8:	d1e7      	bne.n	3eaa <Show_BarGraph_VI+0x188>
		else
		{
			gprintf(x_scale-5,225,1,Black,"%d03",i*10);
		}
	}
}
    3eda:	b009      	add	sp, #36	; 0x24
    3edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ee0:	00039562 	.word	0x00039562
    3ee4:	00039564 	.word	0x00039564
    3ee8:	00039566 	.word	0x00039566
    3eec:	0003956f 	.word	0x0003956f
    3ef0:	00039575 	.word	0x00039575
    3ef4:	0003957a 	.word	0x0003957a

00003ef8 <Show_BarGraph>:
 * @brief	    Display Bar Graph function
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Show_BarGraph(void)
{
    3ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	COORDINATE_Type point1,point2,point3;
	COLORCFG_Type tricfg;
    uint16_t y_scale,x_scale,i;

	// X and Y lines
	GLCD_Line(30,5,30,238,Black);
    3efc:	201e      	movs	r0, #30
 * @brief	    Display Bar Graph function
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Show_BarGraph(void)
{
    3efe:	b089      	sub	sp, #36	; 0x24
	COORDINATE_Type point1,point2,point3;
	COLORCFG_Type tricfg;
    uint16_t y_scale,x_scale,i;

	// X and Y lines
	GLCD_Line(30,5,30,238,Black);
    3f00:	2400      	movs	r4, #0
    3f02:	4602      	mov	r2, r0
    3f04:	9400      	str	r4, [sp, #0]
    3f06:	2105      	movs	r1, #5
    3f08:	23ee      	movs	r3, #238	; 0xee
    3f0a:	f7ff fbd9 	bl	36c0 <GLCD_Line>
	GLCD_Line(1,220,315,220,Black);
    3f0e:	f240 1b3b 	movw	fp, #315	; 0x13b
    3f12:	21dc      	movs	r1, #220	; 0xdc
    3f14:	460b      	mov	r3, r1
    3f16:	9400      	str	r4, [sp, #0]
    3f18:	2001      	movs	r0, #1
    3f1a:	465a      	mov	r2, fp
    3f1c:	f7ff fbd0 	bl	36c0 <GLCD_Line>

	gprintf(22,5,1,Black,"Y");
    3f20:	4b60      	ldr	r3, [pc, #384]	; (40a4 <Show_BarGraph+0x1ac>)
    3f22:	2105      	movs	r1, #5
    3f24:	9300      	str	r3, [sp, #0]
    3f26:	2201      	movs	r2, #1
    3f28:	4623      	mov	r3, r4
    3f2a:	2016      	movs	r0, #22
    3f2c:	f7ff f9c7 	bl	32be <gprintf>
	gprintf(310,225,1,Black,"X");
    3f30:	485d      	ldr	r0, [pc, #372]	; (40a8 <Show_BarGraph+0x1b0>)
    3f32:	4623      	mov	r3, r4
    3f34:	9000      	str	r0, [sp, #0]
    3f36:	21e1      	movs	r1, #225	; 0xe1
    3f38:	2201      	movs	r2, #1
    3f3a:	f44f 709b 	mov.w	r0, #310	; 0x136
    3f3e:	f7ff f9be 	bl	32be <gprintf>
	gprintf(50,5,1,Black,"X=ADC-CH  Y=VAL  Y-MAX=4095  Y-UNIT=40.95");
    3f42:	495a      	ldr	r1, [pc, #360]	; (40ac <Show_BarGraph+0x1b4>)
    3f44:	4623      	mov	r3, r4
    3f46:	9100      	str	r1, [sp, #0]
    3f48:	2201      	movs	r2, #1
    3f4a:	2105      	movs	r1, #5
    3f4c:	2032      	movs	r0, #50	; 0x32
    3f4e:	f7ff f9b6 	bl	32be <gprintf>

	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
	point1.y = 5;
    3f52:	2205      	movs	r2, #5
	point2.x = 28;
	point2.y = 10;
	point3.x = 32;
	point3.y = 10;
	tricfg.fill = YES;
    3f54:	2501      	movs	r5, #1
	gprintf(310,225,1,Black,"X");
	gprintf(50,5,1,Black,"X=ADC-CH  Y=VAL  Y-MAX=4095  Y-UNIT=40.95");

	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
    3f56:	f04f 0a1e 	mov.w	sl, #30
	point1.y = 5;
	point2.x = 28;
    3f5a:	f04f 091c 	mov.w	r9, #28
	point2.y = 10;
    3f5e:	270a      	movs	r7, #10
	point3.x = 32;
    3f60:	f04f 0820 	mov.w	r8, #32
	gprintf(50,5,1,Black,"X=ADC-CH  Y=VAL  Y-MAX=4095  Y-UNIT=40.95");

	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
	point1.y = 5;
    3f64:	f8ad 200e 	strh.w	r2, [sp, #14]
	point3.x = 32;
	point3.y = 10;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3f68:	a803      	add	r0, sp, #12
    3f6a:	a904      	add	r1, sp, #16
    3f6c:	aa05      	add	r2, sp, #20
    3f6e:	ab06      	add	r3, sp, #24
	gprintf(310,225,1,Black,"X");
	gprintf(50,5,1,Black,"X=ADC-CH  Y=VAL  Y-MAX=4095  Y-UNIT=40.95");

	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
    3f70:	f8ad a00c 	strh.w	sl, [sp, #12]
	point1.y = 5;
	point2.x = 28;
    3f74:	f8ad 9010 	strh.w	r9, [sp, #16]
	point2.y = 10;
	point3.x = 32;
    3f78:	f8ad 8014 	strh.w	r8, [sp, #20]
	point3.y = 10;
	tricfg.fill = YES;
    3f7c:	f88d 5018 	strb.w	r5, [sp, #24]
	tricfg.bndry= NO;
    3f80:	f88d 4019 	strb.w	r4, [sp, #25]
	tricfg.fill_color=Black;
    3f84:	f8ad 401c 	strh.w	r4, [sp, #28]
	// Y Line Arrows Top and Bottom
	// Top arrow coordinates
	point1.x = 30;
	point1.y = 5;
	point2.x = 28;
	point2.y = 10;
    3f88:	f8ad 7012 	strh.w	r7, [sp, #18]
	point3.x = 32;
	point3.y = 10;
    3f8c:	f8ad 7016 	strh.w	r7, [sp, #22]
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3f90:	f7ff fc5d 	bl	384e <GLCD_Triangle>

	// Bottom arrow coordinates
	point1.x = 30;
	point1.y = 238;
	point2.x = 28;
	point2.y = 233;
    3f94:	20e9      	movs	r0, #233	; 0xe9
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// Bottom arrow coordinates
	point1.x = 30;
	point1.y = 238;
    3f96:	23ee      	movs	r3, #238	; 0xee
    3f98:	f8ad 300e 	strh.w	r3, [sp, #14]
	point2.x = 28;
	point2.y = 233;
    3f9c:	f8ad 0012 	strh.w	r0, [sp, #18]
	point3.x = 32;
	point3.y = 233;
    3fa0:	f8ad 0016 	strh.w	r0, [sp, #22]
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3fa4:	a904      	add	r1, sp, #16
    3fa6:	a803      	add	r0, sp, #12
    3fa8:	aa05      	add	r2, sp, #20
    3faa:	ab06      	add	r3, sp, #24
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// Bottom arrow coordinates
	point1.x = 30;
    3fac:	f8ad a00c 	strh.w	sl, [sp, #12]
	point1.y = 238;
	point2.x = 28;
    3fb0:	f8ad 9010 	strh.w	r9, [sp, #16]
	point2.y = 233;
	point3.x = 32;
    3fb4:	f8ad 8014 	strh.w	r8, [sp, #20]
	point3.y = 233;
	tricfg.fill = YES;
    3fb8:	f88d 5018 	strb.w	r5, [sp, #24]
	tricfg.bndry= NO;
    3fbc:	f88d 4019 	strb.w	r4, [sp, #25]
	tricfg.fill_color=Black;
    3fc0:	f8ad 401c 	strh.w	r4, [sp, #28]
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3fc4:	f7ff fc43 	bl	384e <GLCD_Triangle>

	// X Line Arrows Left and Right
	// Left arrow coordinates
	point1.x = 1;
	point1.y = 220;
	point2.x = 6;
    3fc8:	2106      	movs	r1, #6
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X Line Arrows Left and Right
	// Left arrow coordinates
	point1.x = 1;
	point1.y = 220;
    3fca:	f04f 0adc 	mov.w	sl, #220	; 0xdc
	point2.x = 6;
    3fce:	f8ad 1010 	strh.w	r1, [sp, #16]
	point2.y = 218;
    3fd2:	f04f 09da 	mov.w	r9, #218	; 0xda
	point3.x = 6;
    3fd6:	f8ad 1014 	strh.w	r1, [sp, #20]
	point3.y = 222;
    3fda:	f04f 08de 	mov.w	r8, #222	; 0xde
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3fde:	a803      	add	r0, sp, #12
    3fe0:	a904      	add	r1, sp, #16
    3fe2:	aa05      	add	r2, sp, #20
    3fe4:	ab06      	add	r3, sp, #24
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X Line Arrows Left and Right
	// Left arrow coordinates
	point1.x = 1;
    3fe6:	f8ad 500c 	strh.w	r5, [sp, #12]
	point1.y = 220;
	point2.x = 6;
	point2.y = 218;
	point3.x = 6;
	point3.y = 222;
	tricfg.fill = YES;
    3fea:	f88d 5018 	strb.w	r5, [sp, #24]
	tricfg.bndry= NO;
    3fee:	f88d 4019 	strb.w	r4, [sp, #25]
	tricfg.fill_color=Black;
    3ff2:	f8ad 401c 	strh.w	r4, [sp, #28]
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X Line Arrows Left and Right
	// Left arrow coordinates
	point1.x = 1;
	point1.y = 220;
    3ff6:	f8ad a00e 	strh.w	sl, [sp, #14]
	point2.x = 6;
	point2.y = 218;
    3ffa:	f8ad 9012 	strh.w	r9, [sp, #18]
	point3.x = 6;
	point3.y = 222;
    3ffe:	f8ad 8016 	strh.w	r8, [sp, #22]
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    4002:	f7ff fc24 	bl	384e <GLCD_Triangle>

	// Right arrow coordinates
	point1.x = 315;
	point1.y = 220;
	point2.x = 310;
    4006:	f44f 729b 	mov.w	r2, #310	; 0x136
    400a:	f8ad 2010 	strh.w	r2, [sp, #16]
	point2.y = 218;
	point3.x = 310;
    400e:	f8ad 2014 	strh.w	r2, [sp, #20]
	point3.y = 222;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    4012:	a803      	add	r0, sp, #12
    4014:	a904      	add	r1, sp, #16
    4016:	aa05      	add	r2, sp, #20
    4018:	ab06      	add	r3, sp, #24
	point1.y = 220;
	point2.x = 310;
	point2.y = 218;
	point3.x = 310;
	point3.y = 222;
	tricfg.fill = YES;
    401a:	f88d 5018 	strb.w	r5, [sp, #24]
	tricfg.bndry= NO;
    401e:	f88d 4019 	strb.w	r4, [sp, #25]
	tricfg.fill_color=Black;
    4022:	f8ad 401c 	strh.w	r4, [sp, #28]
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// Right arrow coordinates
	point1.x = 315;
    4026:	f8ad b00c 	strh.w	fp, [sp, #12]
	point1.y = 220;
    402a:	f8ad a00e 	strh.w	sl, [sp, #14]
	point2.x = 310;
	point2.y = 218;
    402e:	f8ad 9012 	strh.w	r9, [sp, #18]
	point3.x = 310;
	point3.y = 222;
    4032:	f8ad 8016 	strh.w	r8, [sp, #22]
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    4036:	f7ff fc0a 	bl	384e <GLCD_Triangle>

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
    403a:	4b1d      	ldr	r3, [pc, #116]	; (40b0 <Show_BarGraph+0x1b8>)
    403c:	4620      	mov	r0, r4
    403e:	9300      	str	r3, [sp, #0]
    4040:	462a      	mov	r2, r5
    4042:	4623      	mov	r3, r4
    4044:	21e1      	movs	r1, #225	; 0xe1
    4046:	f7ff f93a 	bl	32be <gprintf>
	point2.y = 10;
	point3.x = 32;
	point3.y = 10;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
    404a:	4626      	mov	r6, r4
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
    404c:	463d      	mov	r5, r7
	for(y_scale=200,i=1; y_scale>=20; y_scale=y_scale-20,i++)
    404e:	24c8      	movs	r4, #200	; 0xc8
	{
		if(y_scale!=20)
    4050:	2c14      	cmp	r4, #20
    4052:	d005      	beq.n	4060 <Show_BarGraph+0x168>
		{
			gprintf(14,y_scale,1,Black,"%d02",i*10);
    4054:	4b17      	ldr	r3, [pc, #92]	; (40b4 <Show_BarGraph+0x1bc>)
    4056:	200e      	movs	r0, #14
    4058:	e88d 0028 	stmia.w	sp, {r3, r5}
    405c:	b221      	sxth	r1, r4
    405e:	e004      	b.n	406a <Show_BarGraph+0x172>
		}
		else
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
    4060:	4b15      	ldr	r3, [pc, #84]	; (40b8 <Show_BarGraph+0x1c0>)
    4062:	200a      	movs	r0, #10
    4064:	e88d 0028 	stmia.w	sp, {r3, r5}
    4068:	4621      	mov	r1, r4
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
	for(y_scale=200,i=1; y_scale>=20; y_scale=y_scale-20,i++)
    406a:	3c14      	subs	r4, #20
		{
			gprintf(14,y_scale,1,Black,"%d02",i*10);
		}
		else
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
    406c:	2201      	movs	r2, #1
    406e:	2300      	movs	r3, #0
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
	for(y_scale=200,i=1; y_scale>=20; y_scale=y_scale-20,i++)
    4070:	b2a4      	uxth	r4, r4
		{
			gprintf(14,y_scale,1,Black,"%d02",i*10);
		}
		else
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
    4072:	f7ff f924 	bl	32be <gprintf>
    4076:	350a      	adds	r5, #10
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	// X and Y scaling
	gprintf(0,225,1,Black,"(0,0)");
	for(y_scale=200,i=1; y_scale>=20; y_scale=y_scale-20,i++)
    4078:	2c00      	cmp	r4, #0
    407a:	d1e9      	bne.n	4050 <Show_BarGraph+0x158>
    407c:	2501      	movs	r5, #1
    407e:	2438      	movs	r4, #56	; 0x38
		}

	}
	for(x_scale=56,i=1; x_scale<=300; x_scale=x_scale+26,i++)
	{
		gprintf(x_scale,225,1,Black,"%d02",i);
    4080:	4b0c      	ldr	r3, [pc, #48]	; (40b4 <Show_BarGraph+0x1bc>)
    4082:	b220      	sxth	r0, r4
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
		}

	}
	for(x_scale=56,i=1; x_scale<=300; x_scale=x_scale+26,i++)
    4084:	341a      	adds	r4, #26
	{
		gprintf(x_scale,225,1,Black,"%d02",i);
    4086:	e88d 0028 	stmia.w	sp, {r3, r5}
    408a:	21e1      	movs	r1, #225	; 0xe1
    408c:	2201      	movs	r2, #1
    408e:	2300      	movs	r3, #0
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
		}

	}
	for(x_scale=56,i=1; x_scale<=300; x_scale=x_scale+26,i++)
    4090:	b2a4      	uxth	r4, r4
	{
		gprintf(x_scale,225,1,Black,"%d02",i);
    4092:	f7ff f914 	bl	32be <gprintf>
    4096:	3501      	adds	r5, #1
		{
			gprintf(10,y_scale,1,Black,"%d03",i*10);
		}

	}
	for(x_scale=56,i=1; x_scale<=300; x_scale=x_scale+26,i++)
    4098:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
    409c:	d1f0      	bne.n	4080 <Show_BarGraph+0x188>
	{
		gprintf(x_scale,225,1,Black,"%d02",i);
	}
}
    409e:	b009      	add	sp, #36	; 0x24
    40a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40a4:	00039562 	.word	0x00039562
    40a8:	00039564 	.word	0x00039564
    40ac:	0003957f 	.word	0x0003957f
    40b0:	0003956f 	.word	0x0003956f
    40b4:	00039575 	.word	0x00039575
    40b8:	0003957a 	.word	0x0003957a

000040bc <GLCD_Frame>:
 *              color        Boundary color
 *              fill_color   Frame fill color
 * @return 		None
 **********************************************************************/
void GLCD_Frame(COORDINATE_Type *p1, COORDINATE_Type *p2, int16_t frame_width, uint16_t color, uint16_t fill_color)
{
    40bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    40c0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    40c4:	4605      	mov	r5, r0
    40c6:	460c      	mov	r4, r1
    40c8:	4691      	mov	r9, r2
    40ca:	461f      	mov	r7, r3
    40cc:	b296      	uxth	r6, r2
	int16_t fw;                          // Find the y min and max

	fw = frame_width;

	while(fw)
    40ce:	2e00      	cmp	r6, #0
    40d0:	d058      	beq.n	4184 <GLCD_Frame+0xc8>
    40d2:	8869      	ldrh	r1, [r5, #2]
	{
		if(fw < frame_width)
    40d4:	b233      	sxth	r3, r6
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, fill_color);      // Draw the interior 4 sides
    40d6:	1872      	adds	r2, r6, r1

	fw = frame_width;

	while(fw)
	{
		if(fw < frame_width)
    40d8:	454b      	cmp	r3, r9
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, fill_color);      // Draw the interior 4 sides
    40da:	b211      	sxth	r1, r2
    40dc:	f9b5 0000 	ldrsh.w	r0, [r5]
    40e0:	f9b4 2000 	ldrsh.w	r2, [r4]

	fw = frame_width;

	while(fw)
	{
		if(fw < frame_width)
    40e4:	da26      	bge.n	4134 <GLCD_Frame+0x78>
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, fill_color);      // Draw the interior 4 sides
    40e6:	460b      	mov	r3, r1
    40e8:	f8cd 8000 	str.w	r8, [sp]
    40ec:	f7ff fae8 	bl	36c0 <GLCD_Line>
			GLCD_Line(p1->x, p2->y-fw, p2->x, p2->y-fw, fill_color);
    40f0:	8861      	ldrh	r1, [r4, #2]
    40f2:	f9b5 0000 	ldrsh.w	r0, [r5]
    40f6:	1b8a      	subs	r2, r1, r6
    40f8:	b211      	sxth	r1, r2
    40fa:	460b      	mov	r3, r1
    40fc:	f9b4 2000 	ldrsh.w	r2, [r4]
    4100:	f8cd 8000 	str.w	r8, [sp]
    4104:	f7ff fadc 	bl	36c0 <GLCD_Line>
			GLCD_Line(p1->x+fw, p1->y, p1->x+fw, p2->y, fill_color);
    4108:	8828      	ldrh	r0, [r5, #0]
    410a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    410e:	1833      	adds	r3, r6, r0
    4110:	b218      	sxth	r0, r3
    4112:	4602      	mov	r2, r0
    4114:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    4118:	f8cd 8000 	str.w	r8, [sp]
    411c:	f7ff fad0 	bl	36c0 <GLCD_Line>
			GLCD_Line(p2->x-fw, p1->y, p2->x-fw, p2->y, fill_color);
    4120:	8821      	ldrh	r1, [r4, #0]
    4122:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    4126:	1b8a      	subs	r2, r1, r6
    4128:	b210      	sxth	r0, r2
    412a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    412e:	f8cd 8000 	str.w	r8, [sp]
    4132:	e021      	b.n	4178 <GLCD_Frame+0xbc>
			fw--;
		}
		else
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, color);      // inner border 4 sides
    4134:	460b      	mov	r3, r1
    4136:	9700      	str	r7, [sp, #0]
    4138:	f7ff fac2 	bl	36c0 <GLCD_Line>
			GLCD_Line(p1->x, p2->y-fw, p2->x, p2->y-fw, color);
    413c:	8860      	ldrh	r0, [r4, #2]
    413e:	f9b4 2000 	ldrsh.w	r2, [r4]
    4142:	1b83      	subs	r3, r0, r6
    4144:	b219      	sxth	r1, r3
    4146:	460b      	mov	r3, r1
    4148:	f9b5 0000 	ldrsh.w	r0, [r5]
    414c:	9700      	str	r7, [sp, #0]
    414e:	f7ff fab7 	bl	36c0 <GLCD_Line>
			GLCD_Line(p1->x+fw, p1->y, p1->x+fw, p2->y, color);
    4152:	8829      	ldrh	r1, [r5, #0]
    4154:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    4158:	1872      	adds	r2, r6, r1
    415a:	b210      	sxth	r0, r2
    415c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    4160:	4602      	mov	r2, r0
    4162:	9700      	str	r7, [sp, #0]
    4164:	f7ff faac 	bl	36c0 <GLCD_Line>
			GLCD_Line(p2->x-fw, p1->y, p2->x-fw, p2->y, color);
    4168:	8820      	ldrh	r0, [r4, #0]
    416a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    416e:	1b83      	subs	r3, r0, r6
    4170:	b218      	sxth	r0, r3
    4172:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    4176:	9700      	str	r7, [sp, #0]
    4178:	4602      	mov	r2, r0
    417a:	3e01      	subs	r6, #1
    417c:	f7ff faa0 	bl	36c0 <GLCD_Line>
    4180:	b2b6      	uxth	r6, r6
    4182:	e7a4      	b.n	40ce <GLCD_Frame+0x12>
		}
	}

	if(!fw)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
    4184:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    4188:	f9b5 0000 	ldrsh.w	r0, [r5]
    418c:	f9b4 2000 	ldrsh.w	r2, [r4]
    4190:	460b      	mov	r3, r1
    4192:	9700      	str	r7, [sp, #0]
    4194:	f7ff fa94 	bl	36c0 <GLCD_Line>
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
    4198:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    419c:	f9b5 0000 	ldrsh.w	r0, [r5]
    41a0:	f9b4 2000 	ldrsh.w	r2, [r4]
    41a4:	460b      	mov	r3, r1
    41a6:	9700      	str	r7, [sp, #0]
    41a8:	f7ff fa8a 	bl	36c0 <GLCD_Line>
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
    41ac:	f9b5 0000 	ldrsh.w	r0, [r5]
    41b0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    41b4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    41b8:	4602      	mov	r2, r0
    41ba:	9700      	str	r7, [sp, #0]
    41bc:	f7ff fa80 	bl	36c0 <GLCD_Line>
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    41c0:	f9b4 0000 	ldrsh.w	r0, [r4]
    41c4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    41c8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    41cc:	4602      	mov	r2, r0
    41ce:	970a      	str	r7, [sp, #40]	; 0x28
	}
}
    41d0:	b003      	add	sp, #12
    41d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(!fw)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    41d6:	f7ff ba73 	b.w	36c0 <GLCD_Line>

000041da <GLCD_Circle>:
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
{
    41da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41de:	461c      	mov	r4, r3
    41e0:	b08b      	sub	sp, #44	; 0x2c
	int16_t a, b, P;
	a = 0;
	b = radius;
	P = 1 - radius;
    41e2:	f1c2 0301 	rsb	r3, r2, #1
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
{
    41e6:	9008      	str	r0, [sp, #32]
	int16_t a, b, P;
	a = 0;
	b = radius;
	P = 1 - radius;
    41e8:	b298      	uxth	r0, r3
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
{
    41ea:	9109      	str	r1, [sp, #36]	; 0x24
    41ec:	9207      	str	r2, [sp, #28]
	int16_t a, b, P;
	a = 0;
	b = radius;
	P = 1 - radius;
    41ee:	9006      	str	r0, [sp, #24]
    41f0:	4607      	mov	r7, r0
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
{
	int16_t a, b, P;
	a = 0;
	b = radius;
    41f2:	4616      	mov	r6, r2
	P = 1 - radius;
    41f4:	2500      	movs	r5, #0

	do
	{
		if(cfg->fill)
    41f6:	7821      	ldrb	r1, [r4, #0]
    41f8:	2900      	cmp	r1, #0
    41fa:	d047      	beq.n	428c <GLCD_Circle+0xb2>
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
    41fc:	9a08      	ldr	r2, [sp, #32]
    41fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    4200:	fa1f f982 	uxth.w	r9, r2
    4204:	fa1f f880 	uxth.w	r8, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4208:	b2ab      	uxth	r3, r5

	do
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
    420a:	fa1f fa86 	uxth.w	sl, r6
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    420e:	ebc3 0c09 	rsb	ip, r3, r9
    4212:	eb03 0b09 	add.w	fp, r3, r9

	do
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
    4216:	88a2      	ldrh	r2, [r4, #4]
    4218:	eb0a 0108 	add.w	r1, sl, r8
    421c:	fa0f fe8c 	sxth.w	lr, ip
    4220:	b209      	sxth	r1, r1
    4222:	fa0f fb8b 	sxth.w	fp, fp
    4226:	4670      	mov	r0, lr
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4228:	9305      	str	r3, [sp, #20]

	do
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
    422a:	9200      	str	r2, [sp, #0]
    422c:	460b      	mov	r3, r1
    422e:	465a      	mov	r2, fp
    4230:	f8cd e00c 	str.w	lr, [sp, #12]
    4234:	f7ff fa44 	bl	36c0 <GLCD_Line>
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
    4238:	ebca 0308 	rsb	r3, sl, r8
    423c:	88a0      	ldrh	r0, [r4, #4]
    423e:	f8dd c00c 	ldr.w	ip, [sp, #12]
    4242:	b219      	sxth	r1, r3
    4244:	465a      	mov	r2, fp
    4246:	460b      	mov	r3, r1
    4248:	9000      	str	r0, [sp, #0]
    424a:	4660      	mov	r0, ip
    424c:	f7ff fa38 	bl	36c0 <GLCD_Line>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4250:	9905      	ldr	r1, [sp, #20]
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
    4252:	88a3      	ldrh	r3, [r4, #4]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4254:	eb01 0208 	add.w	r2, r1, r8
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
    4258:	ebca 0b09 	rsb	fp, sl, r9
    425c:	44d1      	add	r9, sl
    425e:	b211      	sxth	r1, r2
    4260:	fa0f fb8b 	sxth.w	fp, fp
    4264:	fa0f f989 	sxth.w	r9, r9
    4268:	9300      	str	r3, [sp, #0]
    426a:	4658      	mov	r0, fp
    426c:	460b      	mov	r3, r1
    426e:	464a      	mov	r2, r9
    4270:	f7ff fa26 	bl	36c0 <GLCD_Line>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4274:	9805      	ldr	r0, [sp, #20]
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, cfg->fill_color);
    4276:	88a2      	ldrh	r2, [r4, #4]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4278:	ebc0 0808 	rsb	r8, r0, r8
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, cfg->fill_color);
    427c:	fa0f f188 	sxth.w	r1, r8
    4280:	9200      	str	r2, [sp, #0]
    4282:	4658      	mov	r0, fp
    4284:	464a      	mov	r2, r9
    4286:	460b      	mov	r3, r1
    4288:	f7ff fa1a 	bl	36c0 <GLCD_Line>
		}

		if(P < 0)
    428c:	043a      	lsls	r2, r7, #16
    428e:	d507      	bpl.n	42a0 <GLCD_Circle+0xc6>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4290:	b2ab      	uxth	r3, r5
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, cfg->fill_color);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    4292:	3703      	adds	r7, #3
    4294:	eb07 0043 	add.w	r0, r7, r3, lsl #1
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4298:	1c5a      	adds	r2, r3, #1
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, cfg->fill_color);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    429a:	b287      	uxth	r7, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    429c:	b291      	uxth	r1, r2
    429e:	e009      	b.n	42b4 <GLCD_Circle+0xda>
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    42a0:	b231      	sxth	r1, r6
    42a2:	3705      	adds	r7, #5
    42a4:	1a6b      	subs	r3, r5, r1
    42a6:	eb07 0043 	add.w	r0, r7, r3, lsl #1
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    42aa:	1c6a      	adds	r2, r5, #1
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    42ac:	3e01      	subs	r6, #1
    42ae:	b287      	uxth	r7, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    42b0:	b291      	uxth	r1, r2
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    42b2:	b2b6      	uxth	r6, r6
	} while(a <= b);
    42b4:	b209      	sxth	r1, r1
    42b6:	b233      	sxth	r3, r6
    42b8:	3501      	adds	r5, #1
    42ba:	4299      	cmp	r1, r3
    42bc:	dd9b      	ble.n	41f6 <GLCD_Circle+0x1c>

	cfg->fill = NO;
    42be:	2500      	movs	r5, #0
	a = 0;
	b = radius;
    42c0:	9e07      	ldr	r6, [sp, #28]
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
	} while(a <= b);

	cfg->fill = NO;
    42c2:	7025      	strb	r5, [r4, #0]
	a = 0;
	b = radius;
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
    42c4:	7820      	ldrb	r0, [r4, #0]
    42c6:	2800      	cmp	r0, #0
    42c8:	d157      	bne.n	437a <GLCD_Circle+0x1a0>
    42ca:	7862      	ldrb	r2, [r4, #1]
    42cc:	2a00      	cmp	r2, #0
    42ce:	d054      	beq.n	437a <GLCD_Circle+0x1a0>
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    42d0:	9f08      	ldr	r7, [sp, #32]
    42d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    42d4:	fa1f fa87 	uxth.w	sl, r7
    42d8:	fa1f f880 	uxth.w	r8, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    42dc:	fa1f f985 	uxth.w	r9, r5
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    42e0:	b2b7      	uxth	r7, r6
    42e2:	eb07 0e08 	add.w	lr, r7, r8
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    42e6:	eb09 010a 	add.w	r1, r9, sl
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    42ea:	fa1f fc8e 	uxth.w	ip, lr
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    42ee:	b28b      	uxth	r3, r1
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    42f0:	4618      	mov	r0, r3
    42f2:	4661      	mov	r1, ip
    42f4:	8862      	ldrh	r2, [r4, #2]
    42f6:	f8cd c00c 	str.w	ip, [sp, #12]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    42fa:	9307      	str	r3, [sp, #28]
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    42fc:	f7fe ff2e 	bl	315c <GLCD_PutPixel>
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
    4300:	eb07 020a 	add.w	r2, r7, sl
    4304:	b291      	uxth	r1, r2
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4306:	eb09 0308 	add.w	r3, r9, r8
    430a:	b29b      	uxth	r3, r3
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
    430c:	9105      	str	r1, [sp, #20]
    430e:	9805      	ldr	r0, [sp, #20]
    4310:	4619      	mov	r1, r3
    4312:	8862      	ldrh	r2, [r4, #2]
    4314:	9304      	str	r3, [sp, #16]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4316:	ebc9 0b0a 	rsb	fp, r9, sl
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
    431a:	f7fe ff1f 	bl	315c <GLCD_PutPixel>
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
    431e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4322:	fa1f fb8b 	uxth.w	fp, fp
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
    4326:	4661      	mov	r1, ip
    4328:	4658      	mov	r0, fp
    432a:	8862      	ldrh	r2, [r4, #2]
    432c:	f7fe ff16 	bl	315c <GLCD_PutPixel>
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
    4330:	ebc7 0a0a 	rsb	sl, r7, sl
    4334:	9a04      	ldr	r2, [sp, #16]
    4336:	fa1f fa8a 	uxth.w	sl, sl
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    433a:	ebc9 0908 	rsb	r9, r9, r8
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
    433e:	4611      	mov	r1, r2
    4340:	4650      	mov	r0, sl
    4342:	8862      	ldrh	r2, [r4, #2]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4344:	fa1f f989 	uxth.w	r9, r9
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
			GLCD_PutPixel(b+x, y-a, cfg->bcolor);
			GLCD_PutPixel(a+x, y-b, cfg->bcolor);
    4348:	ebc7 0708 	rsb	r7, r7, r8
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
    434c:	f7fe ff06 	bl	315c <GLCD_PutPixel>
			GLCD_PutPixel(b+x, y-a, cfg->bcolor);
			GLCD_PutPixel(a+x, y-b, cfg->bcolor);
    4350:	b2bf      	uxth	r7, r7
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
			GLCD_PutPixel(b+x, y-a, cfg->bcolor);
    4352:	9805      	ldr	r0, [sp, #20]
    4354:	4649      	mov	r1, r9
    4356:	8862      	ldrh	r2, [r4, #2]
    4358:	f7fe ff00 	bl	315c <GLCD_PutPixel>
			GLCD_PutPixel(a+x, y-b, cfg->bcolor);
    435c:	9807      	ldr	r0, [sp, #28]
    435e:	4639      	mov	r1, r7
    4360:	8862      	ldrh	r2, [r4, #2]
    4362:	f7fe fefb 	bl	315c <GLCD_PutPixel>
			GLCD_PutPixel(x-a, y-b, cfg->bcolor);
    4366:	4658      	mov	r0, fp
    4368:	4639      	mov	r1, r7
    436a:	8862      	ldrh	r2, [r4, #2]
    436c:	f7fe fef6 	bl	315c <GLCD_PutPixel>
			GLCD_PutPixel(x-b, y-a, cfg->bcolor);
    4370:	4650      	mov	r0, sl
    4372:	4649      	mov	r1, r9
    4374:	8862      	ldrh	r2, [r4, #2]
    4376:	f7fe fef1 	bl	315c <GLCD_PutPixel>
		}

		if(P < 0)
    437a:	9806      	ldr	r0, [sp, #24]
    437c:	0403      	lsls	r3, r0, #16
    437e:	d509      	bpl.n	4394 <GLCD_Circle+0x1ba>
			P+= 3 + 2*a++;
    4380:	9a06      	ldr	r2, [sp, #24]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4382:	b2a9      	uxth	r1, r5
			GLCD_PutPixel(x-a, y-b, cfg->bcolor);
			GLCD_PutPixel(x-b, y-a, cfg->bcolor);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    4384:	1cd3      	adds	r3, r2, #3
    4386:	eb03 0041 	add.w	r0, r3, r1, lsl #1
    438a:	b282      	uxth	r2, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    438c:	3101      	adds	r1, #1
			GLCD_PutPixel(x-a, y-b, cfg->bcolor);
			GLCD_PutPixel(x-b, y-a, cfg->bcolor);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    438e:	9206      	str	r2, [sp, #24]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    4390:	b288      	uxth	r0, r1
    4392:	e00b      	b.n	43ac <GLCD_Circle+0x1d2>
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    4394:	9906      	ldr	r1, [sp, #24]
    4396:	b233      	sxth	r3, r6
    4398:	1ae8      	subs	r0, r5, r3
    439a:	1d4a      	adds	r2, r1, #5
    439c:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    43a0:	b28a      	uxth	r2, r1
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    43a2:	1c6b      	adds	r3, r5, #1
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    43a4:	3e01      	subs	r6, #1
    43a6:	9206      	str	r2, [sp, #24]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    43a8:	b298      	uxth	r0, r3
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    43aa:	b2b6      	uxth	r6, r6
	} while(a <= b);
    43ac:	b203      	sxth	r3, r0
    43ae:	b230      	sxth	r0, r6
    43b0:	3501      	adds	r5, #1
    43b2:	4283      	cmp	r3, r0
    43b4:	dd86      	ble.n	42c4 <GLCD_Circle+0xea>
}
    43b6:	b00b      	add	sp, #44	; 0x2c
    43b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000043bc <GLCD_Window>:
 *              w        width of bitmap
 *              h        height of bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Window (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
    43bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43be:	4605      	mov	r5, r0
	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    43c0:	2045      	movs	r0, #69	; 0x45
 *              w        width of bitmap
 *              h        height of bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Window (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
    43c2:	460c      	mov	r4, r1
    43c4:	4616      	mov	r6, r2
    43c6:	461f      	mov	r7, r3
	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    43c8:	f7fe fe13 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    43cc:	4628      	mov	r0, r5
    43ce:	f7fe fe3d 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
	Write_Data_Glcd(x+w-1);
    43d2:	3d01      	subs	r5, #1
void GLCD_Window (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
	Write_Data_Glcd(x);

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
    43d4:	2046      	movs	r0, #70	; 0x46
    43d6:	f7fe fe0c 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(x+w-1);
    43da:	1970      	adds	r0, r6, r5
    43dc:	b280      	uxth	r0, r0
    43de:	f7fe fe35 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
    43e2:	2044      	movs	r0, #68	; 0x44
    43e4:	f7fe fe05 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    43e8:	4620      	mov	r0, r4
    43ea:	f7fe fe2f 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
    43ee:	2044      	movs	r0, #68	; 0x44
    43f0:	f7fe fdff 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd((y+h-1)<<8);
    43f4:	3c01      	subs	r4, #1
    43f6:	193f      	adds	r7, r7, r4
    43f8:	0239      	lsls	r1, r7, #8
    43fa:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
}
    43fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
	Write_Data_Glcd((y+h-1)<<8);
    4402:	f7fe be23 	b.w	304c <Write_Data_Glcd>

00004406 <GLCD_Display_String>:
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
{
    4406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4408:	4607      	mov	r7, r0
	GLCD_Window(0,0,320,240);  // Window Max
    440a:	2000      	movs	r0, #0
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
{
    440c:	460e      	mov	r6, r1
    440e:	4615      	mov	r5, r2
	GLCD_Window(0,0,320,240);  // Window Max
    4410:	4601      	mov	r1, r0
    4412:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4416:	23f0      	movs	r3, #240	; 0xf0
    4418:	f7ff ffd0 	bl	43bc <GLCD_Window>
	while (*s)
    441c:	2400      	movs	r4, #0
 * @param[in]	ln       line number
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
    441e:	1931      	adds	r1, r6, r4
    4420:	3401      	adds	r4, #1
    4422:	192b      	adds	r3, r5, r4
{
	GLCD_Window(0,0,320,240);  // Window Max
	while (*s)
    4424:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 * @param[in]	ln       line number
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
    4428:	b289      	uxth	r1, r1
{
	GLCD_Window(0,0,320,240);  // Window Max
	while (*s)
    442a:	b11a      	cbz	r2, 4434 <GLCD_Display_String+0x2e>
	{
		GLCD_Display_Char(ln, col++, *s++);
    442c:	4638      	mov	r0, r7
    442e:	f7fe fe81 	bl	3134 <GLCD_Display_Char>
    4432:	e7f4      	b.n	441e <GLCD_Display_String+0x18>
	}
}
    4434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004436 <GLCD_ClearLn>:
 * @brief	    Clear given line
 * @param[in]	ln       line number
 * @return 		None
 **********************************************************************/
void GLCD_ClearLn (uint16_t ln)
{
    4436:	b510      	push	{r4, lr}
    4438:	4604      	mov	r4, r0
	GLCD_Window(0,0,320,240);  // Window Max
    443a:	2000      	movs	r0, #0
    443c:	4601      	mov	r1, r0
    443e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4442:	23f0      	movs	r3, #240	; 0xf0
    4444:	f7ff ffba 	bl	43bc <GLCD_Window>
	GLCD_Display_String(ln, 0, "                    ");
    4448:	4a03      	ldr	r2, [pc, #12]	; (4458 <GLCD_ClearLn+0x22>)
    444a:	4620      	mov	r0, r4
    444c:	2100      	movs	r1, #0
}
    444e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @return 		None
 **********************************************************************/
void GLCD_ClearLn (uint16_t ln)
{
	GLCD_Window(0,0,320,240);  // Window Max
	GLCD_Display_String(ln, 0, "                    ");
    4452:	f7ff bfd8 	b.w	4406 <GLCD_Display_String>
    4456:	bf00      	nop
    4458:	000395a9 	.word	0x000395a9

0000445c <GLCD_Clear>:
 * @brief	    Clear display
 * @param[in]	color    display clearing color
 * @return 		None
 **********************************************************************/
void GLCD_Clear (uint16_t color)
{
    445c:	b538      	push	{r3, r4, r5, lr}
    445e:	4605      	mov	r5, r0
	unsigned int   i;

	GLCD_Window (0,0,320,240);    // Window Max
    4460:	2000      	movs	r0, #0
    4462:	4601      	mov	r1, r0
    4464:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4468:	23f0      	movs	r3, #240	; 0xf0
    446a:	f7ff ffa7 	bl	43bc <GLCD_Window>

	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    446e:	204e      	movs	r0, #78	; 0x4e
    4470:	f7fe fdbf 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0);
    4474:	2000      	movs	r0, #0
    4476:	f7fe fde9 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    447a:	204f      	movs	r0, #79	; 0x4f
    447c:	f7fe fdb9 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0);
    4480:	2000      	movs	r0, #0
    4482:	f7fe fde3 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x22);
    4486:	2022      	movs	r0, #34	; 0x22
    4488:	f7fe fdb3 	bl	2ff2 <Write_Command_Glcd>
	wr_dat_start();
    448c:	f7fe fa80 	bl	2990 <wr_dat_start>
    4490:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
	for(i = 0; i < (WIDTH*HEIGHT); i++)
		wr_dat_only(color);
    4494:	4628      	mov	r0, r5
    4496:	f7fe fa8f 	bl	29b8 <wr_dat_only>
	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
	Write_Data_Glcd(0);

	Write_Command_Glcd(0x22);
	wr_dat_start();
	for(i = 0; i < (WIDTH*HEIGHT); i++)
    449a:	3c01      	subs	r4, #1
    449c:	d1fa      	bne.n	4494 <GLCD_Clear+0x38>
		wr_dat_only(color);
	wr_dat_stop();
}
    449e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	Write_Command_Glcd(0x22);
	wr_dat_start();
	for(i = 0; i < (WIDTH*HEIGHT); i++)
		wr_dat_only(color);
	wr_dat_stop();
    44a2:	f7fe ba83 	b.w	29ac <wr_dat_stop>

000044a6 <GLCD_Set_Loc>:
 *              w        width of bitmap
 *              h        height of bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Set_Loc (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
    44a6:	b538      	push	{r3, r4, r5, lr}
    44a8:	460c      	mov	r4, r1
    44aa:	4605      	mov	r5, r0
	GLCD_Window (x,y,w,h);
    44ac:	f7ff ff86 	bl	43bc <GLCD_Window>

	Write_Command_Glcd(0x4E);    // GDDRAM Horizontal
    44b0:	204e      	movs	r0, #78	; 0x4e
    44b2:	f7fe fd9e 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(x);       // Page 58 of SSD2119 datasheet
    44b6:	4628      	mov	r0, r5
    44b8:	f7fe fdc8 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);    // GDDRAM Vertical
    44bc:	204f      	movs	r0, #79	; 0x4f
    44be:	f7fe fd98 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(y);       // Page 58 of SSD2119 datasheet
    44c2:	4620      	mov	r0, r4
    44c4:	f7fe fdc2 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x22);    // RAM data write/read
    44c8:	2022      	movs	r0, #34	; 0x22
}
    44ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Write_Data_Glcd(x);       // Page 58 of SSD2119 datasheet

	Write_Command_Glcd(0x4F);    // GDDRAM Vertical
	Write_Data_Glcd(y);       // Page 58 of SSD2119 datasheet

	Write_Command_Glcd(0x22);    // RAM data write/read
    44ce:	f7fe bd90 	b.w	2ff2 <Write_Command_Glcd>

000044d2 <GLCD_Window_Fill>:
 *              h        height of bitmap
 *              color    window color
 * @return 		None
 **********************************************************************/
void GLCD_Window_Fill (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
    44d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44d6:	4617      	mov	r7, r2
    44d8:	461e      	mov	r6, r3
    44da:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	uint32_t i,j;

	GLCD_Set_Loc (x,y,w,h);
    44de:	f7ff ffe2 	bl	44a6 <GLCD_Set_Loc>

	wr_dat_start();
    44e2:	f7fe fa55 	bl	2990 <wr_dat_start>
	for (j = 0; j < h; j++)
    44e6:	2400      	movs	r4, #0
    44e8:	42b4      	cmp	r4, r6
    44ea:	d209      	bcs.n	4500 <GLCD_Window_Fill+0x2e>
    44ec:	2500      	movs	r5, #0
	{
		for (i = 0; i < w; i++)
    44ee:	42bd      	cmp	r5, r7
    44f0:	d204      	bcs.n	44fc <GLCD_Window_Fill+0x2a>
		{
			wr_dat_only(color);
    44f2:	4640      	mov	r0, r8
    44f4:	f7fe fa60 	bl	29b8 <wr_dat_only>
	GLCD_Set_Loc (x,y,w,h);

	wr_dat_start();
	for (j = 0; j < h; j++)
	{
		for (i = 0; i < w; i++)
    44f8:	3501      	adds	r5, #1
    44fa:	e7f8      	b.n	44ee <GLCD_Window_Fill+0x1c>
	uint32_t i,j;

	GLCD_Set_Loc (x,y,w,h);

	wr_dat_start();
	for (j = 0; j < h; j++)
    44fc:	3401      	adds	r4, #1
    44fe:	e7f3      	b.n	44e8 <GLCD_Window_Fill+0x16>
		{
			wr_dat_only(color);
		}
	}
	wr_dat_stop();
}
    4500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		for (i = 0; i < w; i++)
		{
			wr_dat_only(color);
		}
	}
	wr_dat_stop();
    4504:	f7fe ba52 	b.w	29ac <wr_dat_stop>

00004508 <GLCD_Bar>:
	 * half of width should be left and other half on right, so after subracting
	 * half width from center we get x point of bar.
	 * Par2 : 220 is Y ref line so (220 - bar heigth) will give y point of bar.
	 * Par4 : per*2 is scaling for 200 pixels for 100 percentage heigth.
	 **************************************************************************/
	if((per<=100) && (index<=10))
    4508:	2a64      	cmp	r2, #100	; 0x64
 *              per        Percentage height
 *              color      Bar Color
 * @return 		None
 **********************************************************************/
void GLCD_Bar(int16_t index,uint8_t width,int16_t per,uint16_t color)
{
    450a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    450c:	460c      	mov	r4, r1
    450e:	461d      	mov	r5, r3
	 * half of width should be left and other half on right, so after subracting
	 * half width from center we get x point of bar.
	 * Par2 : 220 is Y ref line so (220 - bar heigth) will give y point of bar.
	 * Par4 : per*2 is scaling for 200 pixels for 100 percentage heigth.
	 **************************************************************************/
	if((per<=100) && (index<=10))
    4510:	dc12      	bgt.n	4538 <GLCD_Bar+0x30>
    4512:	280a      	cmp	r0, #10
    4514:	dc10      	bgt.n	4538 <GLCD_Bar+0x30>
	{
		GLCD_Window_Fill(30+(index*26)-(width-(width/2)),220-(per*2),width,per*2,color);
    4516:	231a      	movs	r3, #26
    4518:	4358      	muls	r0, r3
    451a:	301e      	adds	r0, #30
    451c:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    4520:	1a40      	subs	r0, r0, r1
    4522:	f1c2 016e 	rsb	r1, r2, #110	; 0x6e
    4526:	004b      	lsls	r3, r1, #1
    4528:	0052      	lsls	r2, r2, #1
    452a:	b299      	uxth	r1, r3
    452c:	9500      	str	r5, [sp, #0]
    452e:	b293      	uxth	r3, r2
    4530:	b280      	uxth	r0, r0
    4532:	4622      	mov	r2, r4
    4534:	f7ff ffcd 	bl	44d2 <GLCD_Window_Fill>
	}
}
    4538:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000453a <GLCD_Erase>:
 *              length   length of string
 *              color    Erase color
 * @return 		None
 **********************************************************************/
void GLCD_Erase(uint16_t x, uint16_t y, int8_t size, uint16_t length, uint16_t color)
{
    453a:	b530      	push	{r4, r5, lr}
    if(x+6*size >= 320)          // Performs character wrapping
    453c:	2406      	movs	r4, #6
    453e:	fb04 0402 	mla	r4, r4, r2, r0
    4542:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 *              length   length of string
 *              color    Erase color
 * @return 		None
 **********************************************************************/
void GLCD_Erase(uint16_t x, uint16_t y, int8_t size, uint16_t length, uint16_t color)
{
    4546:	f8bd 500c 	ldrh.w	r5, [sp, #12]
    if(x+6*size >= 320)          // Performs character wrapping
    454a:	db05      	blt.n	4558 <GLCD_Erase+0x1e>
    {
       x = 0;                           // Set x at far left position
       y += 7*size + 1;                 // Set y at next position down
    454c:	3101      	adds	r1, #1
    454e:	2007      	movs	r0, #7
    4550:	fb00 1402 	mla	r4, r0, r2, r1
 **********************************************************************/
void GLCD_Erase(uint16_t x, uint16_t y, int8_t size, uint16_t length, uint16_t color)
{
    if(x+6*size >= 320)          // Performs character wrapping
    {
       x = 0;                           // Set x at far left position
    4554:	2000      	movs	r0, #0
       y += 7*size + 1;                 // Set y at next position down
    4556:	b2a1      	uxth	r1, r4
    }
	GLCD_Window_Fill(x,y,(6*size*length)+1,(7*size)+1,color);
    4558:	b294      	uxth	r4, r2
    455a:	4363      	muls	r3, r4
    455c:	2206      	movs	r2, #6
    455e:	435a      	muls	r2, r3
    4560:	2307      	movs	r3, #7
    4562:	435c      	muls	r4, r3
    4564:	3201      	adds	r2, #1
    4566:	1c63      	adds	r3, r4, #1
    4568:	b292      	uxth	r2, r2
    456a:	b29b      	uxth	r3, r3
    456c:	9503      	str	r5, [sp, #12]
}
    456e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if(x+6*size >= 320)          // Performs character wrapping
    {
       x = 0;                           // Set x at far left position
       y += 7*size + 1;                 // Set y at next position down
    }
	GLCD_Window_Fill(x,y,(6*size*length)+1,(7*size)+1,color);
    4572:	f7ff bfae 	b.w	44d2 <GLCD_Window_Fill>

00004576 <GLCD_Rect>:
 *              color        Boundary color
 *              fill_color   fill color
 * @return 		None
 **********************************************************************/
void GLCD_Rect(COORDINATE_Type *p1, COORDINATE_Type *p2, Bool fill, uint16_t color, uint16_t fill_color)
{
    4576:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    457a:	460c      	mov	r4, r1
    457c:	4605      	mov	r5, r0
    457e:	4698      	mov	r8, r3
    4580:	f8bd 1020 	ldrh.w	r1, [sp, #32]
	int16_t  width,height;                          // Find the y min and max

	if(fill)
    4584:	2a00      	cmp	r2, #0
    4586:	d041      	beq.n	460c <GLCD_Rect+0x96>
	{
		if(p2->x > p1->x)
    4588:	f8b0 e000 	ldrh.w	lr, [r0]
    458c:	8822      	ldrh	r2, [r4, #0]
    458e:	fa0f f38e 	sxth.w	r3, lr
    4592:	b210      	sxth	r0, r2
    4594:	8867      	ldrh	r7, [r4, #2]
    4596:	886e      	ldrh	r6, [r5, #2]
    4598:	4298      	cmp	r0, r3
		{
			if(p2->y > p1->y)
    459a:	b238      	sxth	r0, r7
    459c:	b233      	sxth	r3, r6
{
	int16_t  width,height;                          // Find the y min and max

	if(fill)
	{
		if(p2->x > p1->x)
    459e:	dd13      	ble.n	45c8 <GLCD_Rect+0x52>
		{
			if(p2->y > p1->y)
    45a0:	4298      	cmp	r0, r3
    45a2:	fa1f fc8e 	uxth.w	ip, lr
    45a6:	dd07      	ble.n	45b8 <GLCD_Rect+0x42>
			{
				width = p2->x - p1->x;
				height = p2->y - p1->y;
    45a8:	b2b6      	uxth	r6, r6
	{
		if(p2->x > p1->x)
		{
			if(p2->y > p1->y)
			{
				width = p2->x - p1->x;
    45aa:	3a01      	subs	r2, #1
				height = p2->y - p1->y;
				GLCD_Window_Fill(p1->x+1,p1->y+1,width-1,height-1,fill_color);
    45ac:	f10c 0001 	add.w	r0, ip, #1
    45b0:	1c73      	adds	r3, r6, #1
    45b2:	ebcc 0202 	rsb	r2, ip, r2
    45b6:	e011      	b.n	45dc <GLCD_Rect+0x66>
			}
			else
			{
				width = p2->x - p1->x;
				height = p1->y - p2->y;
    45b8:	b2bf      	uxth	r7, r7
				height = p2->y - p1->y;
				GLCD_Window_Fill(p1->x+1,p1->y+1,width-1,height-1,fill_color);
			}
			else
			{
				width = p2->x - p1->x;
    45ba:	3a01      	subs	r2, #1
				height = p1->y - p2->y;
				GLCD_Window_Fill(p1->x+1,p2->y+1,width-1,height-1,fill_color);
    45bc:	f10c 0001 	add.w	r0, ip, #1
    45c0:	1c7b      	adds	r3, r7, #1
    45c2:	ebcc 0202 	rsb	r2, ip, r2
    45c6:	e018      	b.n	45fa <GLCD_Rect+0x84>
			}
		}
		else
		{
			if(p2->y > p1->y)
    45c8:	4298      	cmp	r0, r3
    45ca:	b292      	uxth	r2, r2
    45cc:	dd0e      	ble.n	45ec <GLCD_Rect+0x76>
			{
				width = p1->x - p2->x;
				height = p2->y - p1->y;
    45ce:	b2b6      	uxth	r6, r6
		}
		else
		{
			if(p2->y > p1->y)
			{
				width = p1->x - p2->x;
    45d0:	f10e 3eff 	add.w	lr, lr, #4294967295
				height = p2->y - p1->y;
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
    45d4:	1c50      	adds	r0, r2, #1
    45d6:	1c73      	adds	r3, r6, #1
    45d8:	ebc2 020e 	rsb	r2, r2, lr
		else
		{
			if(p2->y > p1->y)
			{
				width = p1->x - p2->x;
				height = p2->y - p1->y;
    45dc:	3f01      	subs	r7, #1
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
    45de:	1bbe      	subs	r6, r7, r6
    45e0:	9100      	str	r1, [sp, #0]
    45e2:	b280      	uxth	r0, r0
    45e4:	b299      	uxth	r1, r3
    45e6:	b292      	uxth	r2, r2
    45e8:	b2b3      	uxth	r3, r6
    45ea:	e00d      	b.n	4608 <GLCD_Rect+0x92>
			}
			else
			{
				width = p1->x - p2->x;
				height = p1->y - p2->y;
    45ec:	b2bf      	uxth	r7, r7
				height = p2->y - p1->y;
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
			}
			else
			{
				width = p1->x - p2->x;
    45ee:	f10e 3cff 	add.w	ip, lr, #4294967295
				height = p1->y - p2->y;
				GLCD_Window_Fill(p2->x+1,p2->y+1,width-1,height-1,fill_color);
    45f2:	1c50      	adds	r0, r2, #1
    45f4:	1c7b      	adds	r3, r7, #1
    45f6:	ebc2 020c 	rsb	r2, r2, ip
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
			}
			else
			{
				width = p1->x - p2->x;
				height = p1->y - p2->y;
    45fa:	3e01      	subs	r6, #1
				GLCD_Window_Fill(p2->x+1,p2->y+1,width-1,height-1,fill_color);
    45fc:	1bf7      	subs	r7, r6, r7
    45fe:	9100      	str	r1, [sp, #0]
    4600:	b280      	uxth	r0, r0
    4602:	b299      	uxth	r1, r3
    4604:	b292      	uxth	r2, r2
    4606:	b2bb      	uxth	r3, r7
    4608:	f7ff ff63 	bl	44d2 <GLCD_Window_Fill>
		}
		fill = NO;
	}
	if(!fill)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
    460c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    4610:	f9b5 0000 	ldrsh.w	r0, [r5]
    4614:	f9b4 2000 	ldrsh.w	r2, [r4]
    4618:	460b      	mov	r3, r1
    461a:	f8cd 8000 	str.w	r8, [sp]
    461e:	f7ff f84f 	bl	36c0 <GLCD_Line>
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
    4622:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    4626:	f9b5 0000 	ldrsh.w	r0, [r5]
    462a:	f9b4 2000 	ldrsh.w	r2, [r4]
    462e:	460b      	mov	r3, r1
    4630:	f8cd 8000 	str.w	r8, [sp]
    4634:	f7ff f844 	bl	36c0 <GLCD_Line>
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
    4638:	f9b5 0000 	ldrsh.w	r0, [r5]
    463c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    4640:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    4644:	4602      	mov	r2, r0
    4646:	f8cd 8000 	str.w	r8, [sp]
    464a:	f7ff f839 	bl	36c0 <GLCD_Line>
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    464e:	f9b4 0000 	ldrsh.w	r0, [r4]
    4652:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    4656:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    465a:	4602      	mov	r2, r0
    465c:	f8cd 8020 	str.w	r8, [sp, #32]
	}
}
    4660:	b002      	add	sp, #8
    4662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if(!fill)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    4666:	f7ff b82b 	b.w	36c0 <GLCD_Line>

0000466a <GLCD_Bitmap>:
 *              h        height of bitmap
 *              bitmap   address at which the bitmap data resides
 * @return 		None
 **********************************************************************/
void GLCD_Bitmap (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap)
{
    466a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    466e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    4672:	4617      	mov	r7, r2
    4674:	4699      	mov	r9, r3
	uint32_t i,j,k;

	GLCD_Set_Loc (x,y,w,h);
    4676:	f7ff ff16 	bl	44a6 <GLCD_Set_Loc>

	wr_dat_start();
    467a:	f7fe f989 	bl	2990 <wr_dat_start>
	k = 16;
    467e:	2510      	movs	r5, #16
	for (j = 0; j < h; j++)
    4680:	2600      	movs	r6, #0
    4682:	454e      	cmp	r6, r9
    4684:	d20d      	bcs.n	46a2 <GLCD_Bitmap+0x38>
 *              w        width of bitmap
 *              h        height of bitmap
 *              bitmap   address at which the bitmap data resides
 * @return 		None
 **********************************************************************/
void GLCD_Bitmap (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap)
    4686:	eb08 0a45 	add.w	sl, r8, r5, lsl #1
    468a:	2400      	movs	r4, #0

	wr_dat_start();
	k = 16;
	for (j = 0; j < h; j++)
	{
		for (i = 0; i < w; i++)
    468c:	42bc      	cmp	r4, r7
    468e:	d205      	bcs.n	469c <GLCD_Bitmap+0x32>
		{
			wr_dat_only(bitmap[k++]);
    4690:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
    4694:	f7fe f990 	bl	29b8 <wr_dat_only>

	wr_dat_start();
	k = 16;
	for (j = 0; j < h; j++)
	{
		for (i = 0; i < w; i++)
    4698:	3401      	adds	r4, #1
    469a:	e7f7      	b.n	468c <GLCD_Bitmap+0x22>
 *              w        width of bitmap
 *              h        height of bitmap
 *              bitmap   address at which the bitmap data resides
 * @return 		None
 **********************************************************************/
void GLCD_Bitmap (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap)
    469c:	19ed      	adds	r5, r5, r7

	GLCD_Set_Loc (x,y,w,h);

	wr_dat_start();
	k = 16;
	for (j = 0; j < h; j++)
    469e:	3601      	adds	r6, #1
    46a0:	e7ef      	b.n	4682 <GLCD_Bitmap+0x18>
		{
			wr_dat_only(bitmap[k++]);
		}
	}
	wr_dat_stop();
}
    46a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		for (i = 0; i < w; i++)
		{
			wr_dat_only(bitmap[k++]);
		}
	}
	wr_dat_stop();
    46a6:	f7fe b981 	b.w	29ac <wr_dat_stop>

000046aa <GLCD_Getche>:
	return(0);
}


schar GLCD_Getche(void)
{
    46aa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	schar key=0;
	ts_event ts;
	uint16_t x,y;
	Bool flag = 0,up=1;
    46ae:	2400      	movs	r4, #0
    46b0:	2501      	movs	r5, #1
}


schar GLCD_Getche(void)
{
	schar key=0;
    46b2:	4626      	mov	r6, r4
    uint16_t temp;

	while(1)
	{
		good_state = 0;
		adc_state = 0;
    46b4:	2700      	movs	r7, #0
		   	{
		   		good_state++;
		   	}
		   	else
		   	{
		   		good_state = 0;
    46b6:	f04f 0800 	mov.w	r8, #0
		good_state = 0;
		adc_state = 0;

		while (good_state<3)          // while less that 3 good samples
		{
			TSC2004_Read_Values (&ts);
    46ba:	a802      	add	r0, sp, #8
    46bc:	f7fe f8f7 	bl	28ae <TSC2004_Read_Values>

			x = (uint16_t)((ts.x)/11)-24;
    46c0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    46c4:	230b      	movs	r3, #11
    46c6:	fbb2 f0f3 	udiv	r0, r2, r3
    46ca:	3818      	subs	r0, #24
    46cc:	b281      	uxth	r1, r0
		   	y = (uint16_t)((ts.y)/13)-36;

		   	temp = x;
		   	if (adc_state == temp)
    46ce:	428f      	cmp	r7, r1
		while (good_state<3)          // while less that 3 good samples
		{
			TSC2004_Read_Values (&ts);

			x = (uint16_t)((ts.x)/11)-24;
		   	y = (uint16_t)((ts.y)/13)-36;
    46d0:	f8bd 200a 	ldrh.w	r2, [sp, #10]

		   	temp = x;
		   	if (adc_state == temp)
    46d4:	d001      	beq.n	46da <GLCD_Getche+0x30>
    46d6:	460f      	mov	r7, r1
    46d8:	e7ed      	b.n	46b6 <GLCD_Getche+0xc>
		   	{
		   		good_state++;
    46da:	f108 0801 	add.w	r8, r8, #1
    46de:	fa1f f888 	uxth.w	r8, r8
	while(1)
	{
		good_state = 0;
		adc_state = 0;

		while (good_state<3)          // while less that 3 good samples
    46e2:	f1b8 0f02 	cmp.w	r8, #2
    46e6:	d9e8      	bls.n	46ba <GLCD_Getche+0x10>
		{
			TSC2004_Read_Values (&ts);

			x = (uint16_t)((ts.x)/11)-24;
		   	y = (uint16_t)((ts.y)/13)-36;
    46e8:	230d      	movs	r3, #13
    46ea:	fbb2 f0f3 	udiv	r0, r2, r3

		   	adc_state = temp;
		}
		x = adc_state;               //Sampled X value

		switch(keybd)
    46ee:	4a2c      	ldr	r2, [pc, #176]	; (47a0 <GLCD_Getche+0xf6>)
		while (good_state<3)          // while less that 3 good samples
		{
			TSC2004_Read_Values (&ts);

			x = (uint16_t)((ts.x)/11)-24;
		   	y = (uint16_t)((ts.y)/13)-36;
    46f0:	f1a0 0124 	sub.w	r1, r0, #36	; 0x24

		   	adc_state = temp;
		}
		x = adc_state;               //Sampled X value

		switch(keybd)
    46f4:	7813      	ldrb	r3, [r2, #0]
		while (good_state<3)          // while less that 3 good samples
		{
			TSC2004_Read_Values (&ts);

			x = (uint16_t)((ts.x)/11)-24;
		   	y = (uint16_t)((ts.y)/13)-36;
    46f6:	fa1f f881 	uxth.w	r8, r1

		   	adc_state = temp;
		}
		x = adc_state;               //Sampled X value

		switch(keybd)
    46fa:	b258      	sxtb	r0, r3
    46fc:	2804      	cmp	r0, #4
    46fe:	d012      	beq.n	4726 <GLCD_Getche+0x7c>
    4700:	2805      	cmp	r0, #5
    4702:	d01f      	beq.n	4744 <GLCD_Getche+0x9a>
    4704:	2803      	cmp	r0, #3
    4706:	d12d      	bne.n	4764 <GLCD_Getche+0xba>
		{
		case KEY1:
			if(!flag)
    4708:	b944      	cbnz	r4, 471c <GLCD_Getche+0x72>
			{
				GLCD_Bitmap(0,133,320,107,key1);
    470a:	4e26      	ldr	r6, [pc, #152]	; (47a4 <GLCD_Getche+0xfa>)
    470c:	4620      	mov	r0, r4
    470e:	9600      	str	r6, [sp, #0]
    4710:	2185      	movs	r1, #133	; 0x85
    4712:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4716:	236b      	movs	r3, #107	; 0x6b
    4718:	f7ff ffa7 	bl	466a <GLCD_Bitmap>
				flag = 1;
			}
			key = Keyboard1(x,y);
    471c:	4638      	mov	r0, r7
    471e:	4641      	mov	r1, r8
    4720:	f7fe f98a 	bl	2a38 <Keyboard1>
    4724:	e01c      	b.n	4760 <GLCD_Getche+0xb6>
			break;

		case KEY2:
			if(!flag)
    4726:	b944      	cbnz	r4, 473a <GLCD_Getche+0x90>
			{
				GLCD_Bitmap(0,133,320,107,key2);
    4728:	4a1f      	ldr	r2, [pc, #124]	; (47a8 <GLCD_Getche+0xfe>)
    472a:	4620      	mov	r0, r4
    472c:	9200      	str	r2, [sp, #0]
    472e:	2185      	movs	r1, #133	; 0x85
    4730:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4734:	236b      	movs	r3, #107	; 0x6b
    4736:	f7ff ff98 	bl	466a <GLCD_Bitmap>
				flag = 1;
			}
			key = Keyboard2(x,y);
    473a:	4638      	mov	r0, r7
    473c:	4641      	mov	r1, r8
    473e:	f7fe fa73 	bl	2c28 <Keyboard2>
    4742:	e00d      	b.n	4760 <GLCD_Getche+0xb6>
			break;

		case KEY3:
			if(!flag)
    4744:	b944      	cbnz	r4, 4758 <GLCD_Getche+0xae>
			{
				GLCD_Bitmap(0,133,320,107,key3);
    4746:	4919      	ldr	r1, [pc, #100]	; (47ac <GLCD_Getche+0x102>)
    4748:	4620      	mov	r0, r4
    474a:	9100      	str	r1, [sp, #0]
    474c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4750:	2185      	movs	r1, #133	; 0x85
    4752:	236b      	movs	r3, #107	; 0x6b
    4754:	f7ff ff89 	bl	466a <GLCD_Bitmap>
				flag = 1;
			}
			key = Keyboard3(x,y);
    4758:	4638      	mov	r0, r7
    475a:	4641      	mov	r1, r8
    475c:	f7fe fb52 	bl	2e04 <Keyboard3>
    4760:	4606      	mov	r6, r0
			break;
    4762:	2401      	movs	r4, #1
		}

		if(key == 0)
    4764:	b166      	cbz	r6, 4780 <GLCD_Getche+0xd6>
		{
			up = 0;    // pen up done now key can be pressed
		}

		if(key == KEY1 && !up)
    4766:	b273      	sxtb	r3, r6
    4768:	2b03      	cmp	r3, #3
    476a:	d003      	beq.n	4774 <GLCD_Getche+0xca>
		{
			flag = 0;
			keybd = KEY1;
			up = 1;
		}
		else if(key == KEY2 && !up)
    476c:	2b04      	cmp	r3, #4
    476e:	d001      	beq.n	4774 <GLCD_Getche+0xca>
		{
			flag = 0;
			keybd = KEY2;
			up = 1;
		}
		else if(key == KEY3 && !up)
    4770:	2b05      	cmp	r3, #5
    4772:	d108      	bne.n	4786 <GLCD_Getche+0xdc>
    4774:	b935      	cbnz	r5, 4784 <GLCD_Getche+0xda>
		{
			flag = 0;
			keybd = KEY3;
    4776:	4c0a      	ldr	r4, [pc, #40]	; (47a0 <GLCD_Getche+0xf6>)
			up = 1;
    4778:	2501      	movs	r5, #1
			up = 1;
		}
		else if(key == KEY3 && !up)
		{
			flag = 0;
			keybd = KEY3;
    477a:	7023      	strb	r3, [r4, #0]
			keybd = KEY2;
			up = 1;
		}
		else if(key == KEY3 && !up)
		{
			flag = 0;
    477c:	2400      	movs	r4, #0
    477e:	e002      	b.n	4786 <GLCD_Getche+0xdc>
			break;
		}

		if(key == 0)
		{
			up = 0;    // pen up done now key can be pressed
    4780:	4635      	mov	r5, r6
    4782:	e000      	b.n	4786 <GLCD_Getche+0xdc>
		{
			flag = 0;
			keybd = KEY2;
			up = 1;
		}
		else if(key == KEY3 && !up)
    4784:	2501      	movs	r5, #1
			flag = 0;
			keybd = KEY3;
			up = 1;
		}

		if((key!=KEY1) && (key!=KEY2) && (key!=KEY3) && key && !up)
    4786:	1ef0      	subs	r0, r6, #3
    4788:	b2c1      	uxtb	r1, r0
    478a:	2902      	cmp	r1, #2
    478c:	d992      	bls.n	46b4 <GLCD_Getche+0xa>
    478e:	2e00      	cmp	r6, #0
    4790:	d090      	beq.n	46b4 <GLCD_Getche+0xa>
    4792:	b10d      	cbz	r5, 4798 <GLCD_Getche+0xee>
    4794:	2501      	movs	r5, #1
    4796:	e78d      	b.n	46b4 <GLCD_Getche+0xa>
		{
			return(key);
		}
	}
}
    4798:	b270      	sxtb	r0, r6
    479a:	b004      	add	sp, #16
    479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47a0:	2007c005 	.word	0x2007c005
    47a4:	00007282 	.word	0x00007282
    47a8:	00017e22 	.word	0x00017e22
    47ac:	000289c2 	.word	0x000289c2

000047b0 <GLCD_Get_Line>:
	return 0;
}


uchar GLCD_Get_Line(schar s[], uint8_t lim)
{
    47b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	Bool CAPSLOCK=0;

    /*Frame Coordinate*/
    point1.x = 0;
    point1.y = 0;
    point2.x = 320;
    47b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
	return 0;
}


uchar GLCD_Get_Line(schar s[], uint8_t lim)
{
    47b8:	4681      	mov	r9, r0
    47ba:	468a      	mov	sl, r1

    /*Frame Coordinate*/
    point1.x = 0;
    point1.y = 0;
    point2.x = 320;
    point2.y = 133;
    47bc:	2085      	movs	r0, #133	; 0x85
    GLCD_Frame(&point1,&point2,3,DarkGrey,LightGrey);
    47be:	f24c 6118 	movw	r1, #50712	; 0xc618

	uint16_t i=6,j=6;
	Bool CAPSLOCK=0;

    /*Frame Coordinate*/
    point1.x = 0;
    47c2:	f04f 0800 	mov.w	r8, #0
    point1.y = 0;
    point2.x = 320;
    47c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    point2.y = 133;
    47ca:	f8ad 000e 	strh.w	r0, [sp, #14]
    GLCD_Frame(&point1,&point2,3,DarkGrey,LightGrey);
    47ce:	9100      	str	r1, [sp, #0]
    47d0:	a802      	add	r0, sp, #8
    47d2:	a903      	add	r1, sp, #12
    47d4:	2203      	movs	r2, #3
    47d6:	f647 33ef 	movw	r3, #31727	; 0x7bef

	uint16_t i=6,j=6;
	Bool CAPSLOCK=0;

    /*Frame Coordinate*/
    point1.x = 0;
    47da:	f8ad 8008 	strh.w	r8, [sp, #8]
    point1.y = 0;
    47de:	f8ad 800a 	strh.w	r8, [sp, #10]
    point2.x = 320;
    point2.y = 133;
    GLCD_Frame(&point1,&point2,3,DarkGrey,LightGrey);
    47e2:	f7ff fc6b 	bl	40bc <GLCD_Frame>
	schar kb;             // input character

	uint8_t pointer=0;    // Pointer in buffer
	uint8_t count=0;      // character count

	uint16_t i=6,j=6;
    47e6:	2606      	movs	r6, #6
    47e8:	4634      	mov	r4, r6
{
	COORDINATE_Type point1,point2;
	schar kb;             // input character

	uint8_t pointer=0;    // Pointer in buffer
	uint8_t count=0;      // character count
    47ea:	4647      	mov	r7, r8
uchar GLCD_Get_Line(schar s[], uint8_t lim)
{
	COORDINATE_Type point1,point2;
	schar kb;             // input character

	uint8_t pointer=0;    // Pointer in buffer
    47ec:	4645      	mov	r5, r8
    point2.y = 133;
    GLCD_Frame(&point1,&point2,3,DarkGrey,LightGrey);

	while(1)
	{
		kb = GLCD_Getche();
    47ee:	f7ff ff5c 	bl	46aa <GLCD_Getche>

		if(kb == CR)                        // CARRIAGE return
    47f2:	2806      	cmp	r0, #6
    point2.y = 133;
    GLCD_Frame(&point1,&point2,3,DarkGrey,LightGrey);

	while(1)
	{
		kb = GLCD_Getche();
    47f4:	4603      	mov	r3, r0

		if(kb == CR)                        // CARRIAGE return
    47f6:	d05b      	beq.n	48b0 <GLCD_Get_Line+0x100>
		    i = 0;                         // Set x at far left position
		    j += 8;                         // Set y at next position down
			break;                         // yes, exit from this loop
		}

		else if(kb == BK_SPACE)
    47f8:	2802      	cmp	r0, #2
    47fa:	d111      	bne.n	4820 <GLCD_Get_Line+0x70>
		{
			if(pointer==0)                 // any characters entered
    47fc:	2d00      	cmp	r5, #0
    47fe:	d0f6      	beq.n	47ee <GLCD_Get_Line+0x3e>
			{
				continue;                    // no, so get another character
			}

			i=i-6;
    4800:	1fa3      	subs	r3, r4, #6
			GLCD_Erase(i,j,1,1,White);
    4802:	f64f 72ff 	movw	r2, #65535	; 0xffff
			if(pointer==0)                 // any characters entered
			{
				continue;                    // no, so get another character
			}

			i=i-6;
    4806:	b29c      	uxth	r4, r3
			GLCD_Erase(i,j,1,1,White);
    4808:	9200      	str	r2, [sp, #0]
    480a:	2201      	movs	r2, #1
    480c:	4620      	mov	r0, r4
    480e:	4631      	mov	r1, r6
    4810:	4613      	mov	r3, r2

			pointer--;                     // decrement pointer
    4812:	3d01      	subs	r5, #1
			count--;                       // decrement character count
    4814:	3f01      	subs	r7, #1
			{
				continue;                    // no, so get another character
			}

			i=i-6;
			GLCD_Erase(i,j,1,1,White);
    4816:	f7ff fe90 	bl	453a <GLCD_Erase>

			pointer--;                     // decrement pointer
    481a:	b2ed      	uxtb	r5, r5
			count--;                       // decrement character count
    481c:	b2ff      	uxtb	r7, r7

			continue;
    481e:	e7e6      	b.n	47ee <GLCD_Get_Line+0x3e>
		}

		else if((pointer < lim) && (kb!=CR) && (kb!=BK_SPACE))
    4820:	4555      	cmp	r5, sl
    4822:	d2e4      	bcs.n	47ee <GLCD_Get_Line+0x3e>
		{
		    if(kb == CAPS)
    4824:	2801      	cmp	r0, #1
    4826:	d102      	bne.n	482e <GLCD_Get_Line+0x7e>
		    {
		    	CAPSLOCK = !CAPSLOCK;
		    }
		    if(CAPSLOCK && (kb!=CAPS) && (keybd==KEY1))
    4828:	f088 0801 	eor.w	r8, r8, #1
    482c:	e7df      	b.n	47ee <GLCD_Get_Line+0x3e>
    482e:	4a24      	ldr	r2, [pc, #144]	; (48c0 <GLCD_Get_Line+0x110>)
    4830:	7810      	ldrb	r0, [r2, #0]
    4832:	f1b8 0f00 	cmp.w	r8, #0
    4836:	d117      	bne.n	4868 <GLCD_Get_Line+0xb8>
		    }
		    else if(kb!=CAPS)
		    {
		    	s[pointer] = kb;               // save character and increment pointer
		    	pointer++;
		    	count++;                       // increment count
    4838:	3701      	adds	r7, #1
		    	gprintf(i,j,1,Black,"%c",kb);
		    	i=i+6;
		    }
		    else if(kb!=CAPS)
		    {
		    	s[pointer] = kb;               // save character and increment pointer
    483a:	f809 3005 	strb.w	r3, [r9, r5]
		    	pointer++;
    483e:	3501      	adds	r5, #1
		    	count++;                       // increment count

		    	if(i+5 >= 314)          // Performs character wrapping
    4840:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
		    	i=i+6;
		    }
		    else if(kb!=CAPS)
		    {
		    	s[pointer] = kb;               // save character and increment pointer
		    	pointer++;
    4844:	b2ed      	uxtb	r5, r5
		    	count++;                       // increment count
    4846:	b2ff      	uxtb	r7, r7

		    	if(i+5 >= 314)          // Performs character wrapping
    4848:	dd02      	ble.n	4850 <GLCD_Get_Line+0xa0>
		    	{
		    		i = 6;                           // Set x at far left position
		    		j += 8;                 // Set y at next position down
    484a:	3608      	adds	r6, #8
    484c:	b2b6      	uxth	r6, r6
		    	pointer++;
		    	count++;                       // increment count

		    	if(i+5 >= 314)          // Performs character wrapping
		    	{
		    		i = 6;                           // Set x at far left position
    484e:	2406      	movs	r4, #6
		    		j += 8;                 // Set y at next position down
				}

		    	gprintf(i,j,1,Black,"%c",kb);
    4850:	4a1c      	ldr	r2, [pc, #112]	; (48c4 <GLCD_Get_Line+0x114>)
    4852:	b220      	sxth	r0, r4
    4854:	e88d 000c 	stmia.w	sp, {r2, r3}
    4858:	b231      	sxth	r1, r6
    485a:	2201      	movs	r2, #1
    485c:	2300      	movs	r3, #0
		    	i=i+6;
    485e:	3406      	adds	r4, #6
		    	{
		    		i = 6;                           // Set x at far left position
		    		j += 8;                 // Set y at next position down
				}

		    	gprintf(i,j,1,Black,"%c",kb);
    4860:	f7fe fd2d 	bl	32be <gprintf>
		    	i=i+6;
    4864:	b2a4      	uxth	r4, r4
    4866:	e7c2      	b.n	47ee <GLCD_Get_Line+0x3e>
		{
		    if(kb == CAPS)
		    {
		    	CAPSLOCK = !CAPSLOCK;
		    }
		    if(CAPSLOCK && (kb!=CAPS) && (keybd==KEY1))
    4868:	2803      	cmp	r0, #3
    486a:	d1e5      	bne.n	4838 <GLCD_Get_Line+0x88>
		    {
		    	s[pointer] = to_upper(kb);               // save character and increment pointer
    486c:	b2d9      	uxtb	r1, r3
    486e:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
    4872:	b2d2      	uxtb	r2, r2
    4874:	2a19      	cmp	r2, #25
    4876:	eb09 0005 	add.w	r0, r9, r5
    487a:	d802      	bhi.n	4882 <GLCD_Get_Line+0xd2>
    487c:	3920      	subs	r1, #32
    487e:	b2c9      	uxtb	r1, r1
    4880:	e000      	b.n	4884 <GLCD_Get_Line+0xd4>
    4882:	4619      	mov	r1, r3
		    	pointer++;
    4884:	3501      	adds	r5, #1
		    	count++;                       // increment count
    4886:	3701      	adds	r7, #1

		    	if(i+5 >= 314)          // Performs character wrapping
    4888:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
		    {
		    	CAPSLOCK = !CAPSLOCK;
		    }
		    if(CAPSLOCK && (kb!=CAPS) && (keybd==KEY1))
		    {
		    	s[pointer] = to_upper(kb);               // save character and increment pointer
    488c:	7001      	strb	r1, [r0, #0]
		    	pointer++;
    488e:	b2ed      	uxtb	r5, r5
		    	count++;                       // increment count
    4890:	b2ff      	uxtb	r7, r7

		    	if(i+5 >= 314)          // Performs character wrapping
    4892:	dd02      	ble.n	489a <GLCD_Get_Line+0xea>
		    	{
		    		i = 6;                           // Set x at far left position
		    		j += 8;                 // Set y at next position down
    4894:	3608      	adds	r6, #8
    4896:	b2b6      	uxth	r6, r6
		    	pointer++;
		    	count++;                       // increment count

		    	if(i+5 >= 314)          // Performs character wrapping
		    	{
		    		i = 6;                           // Set x at far left position
    4898:	2406      	movs	r4, #6
		    		j += 8;                 // Set y at next position down
				}

		    	gprintf(i,j,1,Black,"%c",to_upper(kb));
    489a:	2a19      	cmp	r2, #25
    489c:	4a09      	ldr	r2, [pc, #36]	; (48c4 <GLCD_Get_Line+0x114>)
    489e:	b2a0      	uxth	r0, r4
    48a0:	b2b1      	uxth	r1, r6
    48a2:	bf98      	it	ls
    48a4:	3b20      	subls	r3, #32
    48a6:	e88d 000c 	stmia.w	sp, {r2, r3}
    48aa:	b200      	sxth	r0, r0
    48ac:	b209      	sxth	r1, r1
    48ae:	e7d4      	b.n	485a <GLCD_Get_Line+0xaa>
	{
		kb = GLCD_Getche();

		if(kb == CR)                        // CARRIAGE return
		{
			s[pointer] = '\0';             // put null char on last position
    48b0:	2000      	movs	r0, #0
    48b2:	f809 0005 	strb.w	r0, [r9, r5]

			continue;                      // and get some more
		}
	}
	return(count);
}
    48b6:	4638      	mov	r0, r7
    48b8:	b004      	add	sp, #16
    48ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48be:	bf00      	nop
    48c0:	2007c005 	.word	0x2007c005
    48c4:	00005b0b 	.word	0x00005b0b

000048c8 <GLCD_Display_Home>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Display_Home (void)
{
	GLCD_Set_Loc (0,0,320,240);
    48c8:	2000      	movs	r0, #0
    48ca:	4601      	mov	r1, r0
    48cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    48d0:	23f0      	movs	r3, #240	; 0xf0
    48d2:	f7ff bde8 	b.w	44a6 <GLCD_Set_Loc>

000048d6 <GLCD_Driver_OutCtrl>:
 * 						- BOTTOM_LEFT
 * 						- BOTTOM_RIGHT
 * @return 		None
 **********************************************************************/
void GLCD_Driver_OutCtrl (DRIVER_OUT_Type drv)
{
    48d6:	b510      	push	{r4, lr}
    48d8:	4604      	mov	r4, r0
	Write_Command_Glcd(0x01);    // Driver Output Control
    48da:	2001      	movs	r0, #1
    48dc:	f7fe fb89 	bl	2ff2 <Write_Command_Glcd>

	switch (drv)
    48e0:	2c03      	cmp	r4, #3
    48e2:	d812      	bhi.n	490a <GLCD_Driver_OutCtrl+0x34>
    48e4:	e8df f004 	tbb	[pc, r4]
    48e8:	0b080502 	.word	0x0b080502
	{
	case TOP_LEFT:
		Write_Data_Glcd(0x72EF);       // Page 36-39 of SSD2119 datasheet
    48ec:	f247 20ef 	movw	r0, #29423	; 0x72ef
    48f0:	e007      	b.n	4902 <GLCD_Driver_OutCtrl+0x2c>
		break;

	case TOP_RIGHT:
		Write_Data_Glcd(0x70EF);       // Page 36-39 of SSD2119 datasheet
    48f2:	f247 00ef 	movw	r0, #28911	; 0x70ef
    48f6:	e004      	b.n	4902 <GLCD_Driver_OutCtrl+0x2c>
		break;

	case BOTTOM_LEFT:
		Write_Data_Glcd(0x32EF);       // Page 36-39 of SSD2119 datasheet
    48f8:	f243 20ef 	movw	r0, #13039	; 0x32ef
    48fc:	e001      	b.n	4902 <GLCD_Driver_OutCtrl+0x2c>
		break;

	case BOTTOM_RIGHT:
		Write_Data_Glcd(0x30EF);       // Page 36-39 of SSD2119 datasheet
    48fe:	f243 00ef 	movw	r0, #12527	; 0x30ef
		break;

	default:
		break;
	}
}
    4902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BOTTOM_LEFT:
		Write_Data_Glcd(0x32EF);       // Page 36-39 of SSD2119 datasheet
		break;

	case BOTTOM_RIGHT:
		Write_Data_Glcd(0x30EF);       // Page 36-39 of SSD2119 datasheet
    4906:	f7fe bba1 	b.w	304c <Write_Data_Glcd>
    490a:	bd10      	pop	{r4, pc}

0000490c <GLCD_Init>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Init (void)
{
	GPIO_SetDir(2, LCD_RS, 1);   // RS as output
    490c:	2101      	movs	r1, #1
 * @brief	    This function Initializes GLCD
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Init (void)
{
    490e:	b510      	push	{r4, lr}
	GPIO_SetDir(2, LCD_RS, 1);   // RS as output
    4910:	2002      	movs	r0, #2
    4912:	460a      	mov	r2, r1
    4914:	f7fb fcc0 	bl	298 <GPIO_SetDir>
	GPIO_SetDir(0, LCD_RST, 1);  // Reset as Output
    4918:	2000      	movs	r0, #0
    491a:	2120      	movs	r1, #32
    491c:	2201      	movs	r2, #1
    491e:	f7fb fcbb 	bl	298 <GPIO_SetDir>
	GPIO_SetDir(2, LCD_BK, 1);   // Backlight as output
    4922:	f44f 7180 	mov.w	r1, #256	; 0x100
    4926:	2201      	movs	r2, #1
    4928:	2002      	movs	r0, #2
    492a:	f7fb fcb5 	bl	298 <GPIO_SetDir>

	delay_ms(2);
    492e:	2002      	movs	r0, #2
    4930:	f7fc fcee 	bl	1310 <delay_ms>
	GLCD_Reset();                // Reset GLCD
    4934:	f7fe f85f 	bl	29f6 <GLCD_Reset>
	GLCD_Backlight(ENABLE);
    4938:	2001      	movs	r0, #1
    493a:	f7fe f851 	bl	29e0 <GLCD_Backlight>
	delay_ms(2);
    493e:	2002      	movs	r0, #2
    4940:	f7fc fce6 	bl	1310 <delay_ms>

	Write_Command_Glcd(0x28);    // VCOM OTP
    4944:	2028      	movs	r0, #40	; 0x28
    4946:	f7fe fb54 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0006);     // Page 55-56 of SSD2119 datasheet
    494a:	2006      	movs	r0, #6
    494c:	f7fe fb7e 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x00);    // start Oscillator
    4950:	2000      	movs	r0, #0
    4952:	f7fe fb4e 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0001);     // Page 36 of SSD2119 datasheet
    4956:	2001      	movs	r0, #1
    4958:	f7fe fb78 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x10);    // Sleep mode
    495c:	2010      	movs	r0, #16
    495e:	f7fe fb48 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 49 of SSD2119 datasheet
    4962:	2000      	movs	r0, #0
    4964:	f7fe fb72 	bl	304c <Write_Data_Glcd>

	GLCD_Driver_OutCtrl (TOP_LEFT);
    4968:	2000      	movs	r0, #0
    496a:	f7ff ffb4 	bl	48d6 <GLCD_Driver_OutCtrl>

	Write_Command_Glcd(0x02);    // LCD Driving Waveform Control
    496e:	2002      	movs	r0, #2
    4970:	f7fe fb3f 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0600);     // Page 40-42 of SSD2119 datasheet
    4974:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    4978:	f7fe fb68 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x03);    // Power Control 1
    497c:	2003      	movs	r0, #3
    497e:	f7fe fb38 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x6A38);     // Page 43-44 of SSD2119 datasheet 6A38
    4982:	f646 2038 	movw	r0, #27192	; 0x6a38
    4986:	f7fe fb61 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x11);    // Entry Mode
    498a:	2011      	movs	r0, #17
    498c:	f7fe fb31 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x6870);     // Page 50-52 of SSD2119 datasheet
    4990:	f646 0070 	movw	r0, #26736	; 0x6870
    4994:	f7fe fb5a 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x0F);    // Gate Scan Position
    4998:	200f      	movs	r0, #15
    499a:	f7fe fb2a 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 49 of SSD2119 datasheet
    499e:	2000      	movs	r0, #0
    49a0:	f7fe fb54 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x0B);    // Frame Cycle Control
    49a4:	200b      	movs	r0, #11
    49a6:	f7fe fb24 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x5308);     // Page 45 of SSD2119 datasheet
    49aa:	f245 3008 	movw	r0, #21256	; 0x5308
    49ae:	f7fe fb4d 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x0C);    // Power Control 2
    49b2:	200c      	movs	r0, #12
    49b4:	f7fe fb1d 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0003);     // Page 47 of SSD2119 datasheet
    49b8:	2003      	movs	r0, #3
    49ba:	f7fe fb47 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x0D);    // Power Control 3
    49be:	200d      	movs	r0, #13
    49c0:	f7fe fb17 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x000A);     // Page 48 of SSD2119 datasheet
    49c4:	200a      	movs	r0, #10
    49c6:	f7fe fb41 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x0E);    // Power Control 4
    49ca:	200e      	movs	r0, #14
    49cc:	f7fe fb11 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x2E00);     // Page 48 of SSD2119 datasheet
    49d0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
    49d4:	f7fe fb3a 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x1E);    // Power Control 5
    49d8:	201e      	movs	r0, #30
    49da:	f7fe fb0a 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x00BE);     // Page 53 of SSD2119 datasheet
    49de:	20be      	movs	r0, #190	; 0xbe
    49e0:	f7fe fb34 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x25);    // Frame Frequency Control
    49e4:	2025      	movs	r0, #37	; 0x25
    49e6:	f7fe fb04 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x8000);     // Page 53 of SSD2119 datasheet  8000
    49ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    49ee:	f7fe fb2d 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x26);    // Analog setting
    49f2:	2026      	movs	r0, #38	; 0x26
    49f4:	f7fe fafd 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x7800);     // Page 54 of SSD2119 datasheet
    49f8:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
    49fc:	f7fe fb26 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x4E);    // Ram Address Set
    4a00:	204e      	movs	r0, #78	; 0x4e
    4a02:	f7fe faf6 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 58 of SSD2119 datasheet
    4a06:	2000      	movs	r0, #0
    4a08:	f7fe fb20 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);    // Ram Address Set
    4a0c:	204f      	movs	r0, #79	; 0x4f
    4a0e:	f7fe faf0 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 58 of SSD2119 datasheet
    4a12:	2000      	movs	r0, #0
    4a14:	f7fe fb1a 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x12);    // Sleep mode
    4a18:	2012      	movs	r0, #18
    4a1a:	f7fe faea 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x08D9);     // Page 49 of SSD2119 datasheet
    4a1e:	f640 00d9 	movw	r0, #2265	; 0x8d9
    4a22:	f7fe fb13 	bl	304c <Write_Data_Glcd>

	// Gamma Control (R30h to R3Bh) -- Page 56 of SSD2119 datasheet
	Write_Command_Glcd(0x30);
    4a26:	2030      	movs	r0, #48	; 0x30
    4a28:	f7fe fae3 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);
    4a2c:	2000      	movs	r0, #0
    4a2e:	f7fe fb0d 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x31);
    4a32:	2031      	movs	r0, #49	; 0x31
    4a34:	f7fe fadd 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0104);
    4a38:	f44f 7082 	mov.w	r0, #260	; 0x104
    4a3c:	f7fe fb06 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x32);
    4a40:	2032      	movs	r0, #50	; 0x32
    4a42:	f7fe fad6 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0100);
    4a46:	f44f 7080 	mov.w	r0, #256	; 0x100
    4a4a:	f7fe faff 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x33);
	Write_Data_Glcd(0x0305);
    4a4e:	f240 3405 	movw	r4, #773	; 0x305
	Write_Data_Glcd(0x0104);

	Write_Command_Glcd(0x32);
	Write_Data_Glcd(0x0100);

	Write_Command_Glcd(0x33);
    4a52:	2033      	movs	r0, #51	; 0x33
    4a54:	f7fe facd 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0305);
    4a58:	4620      	mov	r0, r4
    4a5a:	f7fe faf7 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x34);
    4a5e:	2034      	movs	r0, #52	; 0x34
    4a60:	f7fe fac7 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0505);
    4a64:	f240 5005 	movw	r0, #1285	; 0x505
    4a68:	f7fe faf0 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x35);
    4a6c:	2035      	movs	r0, #53	; 0x35
    4a6e:	f7fe fac0 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0305);
    4a72:	4620      	mov	r0, r4
    4a74:	f7fe faea 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x36);
    4a78:	2036      	movs	r0, #54	; 0x36
    4a7a:	f7fe faba 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0707);
    4a7e:	f240 7007 	movw	r0, #1799	; 0x707
    4a82:	f7fe fae3 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x37);
    4a86:	2037      	movs	r0, #55	; 0x37
    4a88:	f7fe fab3 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0300);
    4a8c:	f44f 7040 	mov.w	r0, #768	; 0x300
    4a90:	f7fe fadc 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x3A);
    4a94:	203a      	movs	r0, #58	; 0x3a
    4a96:	f7fe faac 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x1200);
    4a9a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    4a9e:	f7fe fad5 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x3B);
    4aa2:	203b      	movs	r0, #59	; 0x3b
    4aa4:	f7fe faa5 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0800);
    4aa8:	f44f 6000 	mov.w	r0, #2048	; 0x800
    4aac:	f7fe face 	bl	304c <Write_Data_Glcd>

	Write_Command_Glcd(0x07);      // Display Control
    4ab0:	2007      	movs	r0, #7
    4ab2:	f7fe fa9e 	bl	2ff2 <Write_Command_Glcd>
	Write_Data_Glcd(0x0033);       // Page 45 of SSD2119 datasheet
    4ab6:	2033      	movs	r0, #51	; 0x33
    4ab8:	f7fe fac8 	bl	304c <Write_Data_Glcd>

	delay_ms(5);
    4abc:	2005      	movs	r0, #5
    4abe:	f7fc fc27 	bl	1310 <delay_ms>

	Write_Command_Glcd(0x22);    // RAM data write/read
    4ac2:	2022      	movs	r0, #34	; 0x22
}
    4ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Write_Command_Glcd(0x07);      // Display Control
	Write_Data_Glcd(0x0033);       // Page 45 of SSD2119 datasheet

	delay_ms(5);

	Write_Command_Glcd(0x22);    // RAM data write/read
    4ac8:	f7fe ba93 	b.w	2ff2 <Write_Command_Glcd>

00004acc <Port_Init>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Port_Init(void)
{
	GPIO_SetDir(3, _BIT(25), 1);        // Set HeartBeat Led P3.25 to Output
    4acc:	2003      	movs	r0, #3
    4ace:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    4ad2:	2201      	movs	r2, #1
    4ad4:	f7fb bbe0 	b.w	298 <GPIO_SetDir>

00004ad8 <System_Init>:
 * @brief	Initial System Init using Port and Peripheral
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void System_Init(void)
{
    4ad8:	b508      	push	{r3, lr}
	LPC_WDT->WDMOD &= ~WDT_WDMOD_WDEN;  // Disable Watchdog
    4ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ade:	781a      	ldrb	r2, [r3, #0]
    4ae0:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
    4ae4:	7018      	strb	r0, [r3, #0]
	SystemInit();						// Initialize system and update core clock
    4ae6:	f000 f989 	bl	4dfc <SystemInit>
	Port_Init();                        // Port Initialization
    4aea:	f7ff ffef 	bl	4acc <Port_Init>
	SYSTICK_Config();                   // Systick Initialization
    4aee:	f7fc fc75 	bl	13dc <SYSTICK_Config>
	led_delay = 1000;                   // Heart Beat rate of 1Sec toggle
    4af2:	4b13      	ldr	r3, [pc, #76]	; (4b40 <System_Init+0x68>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    4af4:	4813      	ldr	r0, [pc, #76]	; (4b44 <System_Init+0x6c>)
    4af6:	2200      	movs	r2, #0
    4af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4afc:	6019      	str	r1, [r3, #0]
    4afe:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
	NVIC_SetPriority(SysTick_IRQn, 0);  // Set SysTick as Highest Priority

	UART_Config(LPC_UART0, 115200);       // Uart0 Initialize at 9600 Baud Rate
    4b02:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    4b06:	4810      	ldr	r0, [pc, #64]	; (4b48 <System_Init+0x70>)
    4b08:	f7fc fe68 	bl	17dc <UART_Config>
	SSP_Config (LPC_SSP1);              // Initialize SPI
    4b0c:	480f      	ldr	r0, [pc, #60]	; (4b4c <System_Init+0x74>)
    4b0e:	f7fc fa81 	bl	1014 <SSP_Config>
	I2C_Config (LPC_I2C0);              // Initialize I2C0
    4b12:	480f      	ldr	r0, [pc, #60]	; (4b50 <System_Init+0x78>)
    4b14:	f7fb fd90 	bl	638 <I2C_Config>
	GLCD_Init();                        // Initialize GLCD
    4b18:	f7ff fef8 	bl	490c <GLCD_Init>

	GPIO_IntCmd(2,_BIT(7),1);          // Enable GPIO Interrupt at P0.19 Falling Edge
    4b1c:	2002      	movs	r0, #2
    4b1e:	2180      	movs	r1, #128	; 0x80
    4b20:	2201      	movs	r2, #1
    4b22:	f7fb fbeb 	bl	2fc <GPIO_IntCmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    4b26:	490b      	ldr	r1, [pc, #44]	; (4b54 <System_Init+0x7c>)
	NVIC_EnableIRQ(EINT3_IRQn);         // NVIC Interrupt EINT3_IRQn for GPIO
	NVIC_SetPriority(EINT3_IRQn, 4);    // Set any lower Priority than SysTick

	TSC2004_Cal_Init(&cmatrix);
    4b28:	480b      	ldr	r0, [pc, #44]	; (4b58 <System_Init+0x80>)
    4b2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    4b2e:	2220      	movs	r2, #32

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    4b30:	600b      	str	r3, [r1, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    4b32:	f881 2315 	strb.w	r2, [r1, #789]	; 0x315

}
    4b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	GPIO_IntCmd(2,_BIT(7),1);          // Enable GPIO Interrupt at P0.19 Falling Edge
	NVIC_EnableIRQ(EINT3_IRQn);         // NVIC Interrupt EINT3_IRQn for GPIO
	NVIC_SetPriority(EINT3_IRQn, 4);    // Set any lower Priority than SysTick

	TSC2004_Cal_Init(&cmatrix);
    4b3a:	f7fd bd05 	b.w	2548 <TSC2004_Cal_Init>
    4b3e:	bf00      	nop
    4b40:	10000380 	.word	0x10000380
    4b44:	e000ed00 	.word	0xe000ed00
    4b48:	4000c000 	.word	0x4000c000
    4b4c:	40030000 	.word	0x40030000
    4b50:	4001c000 	.word	0x4001c000
    4b54:	e000e100 	.word	0xe000e100
    4b58:	10000360 	.word	0x10000360

00004b5c <main>:
   allow the linker to generate wrapper code to setup stacks, allocate
   heap area, and initialize and copy code and data segments. For GNU
   toolsets, the entry point is through __start() in the crt0_gnu.asm
   file, and that startup code will setup stacks and data */
int main(void)
{
    4b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b60:	b093      	sub	sp, #76	; 0x4c

	Bool flag[11]={0,0,0,0,0,0,0,0,0,0,0};  // y_ref init index flag
    4b62:	2100      	movs	r1, #0
    4b64:	220b      	movs	r2, #11
    4b66:	a803      	add	r0, sp, #12
    4b68:	f000 ff08 	bl	597c <memset>
	uint16_t PercentBy2;
	int16_t prev[11]={0,0,0,0,0,0,0,0,0,0,0},diff,index,prev_index;
    4b6c:	2100      	movs	r1, #0
    4b6e:	2216      	movs	r2, #22
    4b70:	a806      	add	r0, sp, #24
    4b72:	f000 ff03 	bl	597c <memset>

	uint16_t good_state = 0;
	uint16_t adc_state = 0;
	uint16_t temp;

	System_Init();                        // Initialize System
    4b76:	f7ff ffaf 	bl	4ad8 <System_Init>
	GLCD_Clear(White);
    4b7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4b7e:	f7ff fc6d 	bl	445c <GLCD_Clear>

	Show_BarGraph();      // Bar Graph layout
    4b82:	f7ff f9b9 	bl	3ef8 <Show_BarGraph>

	while(1)
    {
		if(TReady == TRUE)
    4b86:	4b71      	ldr	r3, [pc, #452]	; (4d4c <main+0x1f0>)
    4b88:	7818      	ldrb	r0, [r3, #0]
    4b8a:	2801      	cmp	r0, #1
    4b8c:	d1fb      	bne.n	4b86 <main+0x2a>
    4b8e:	2200      	movs	r2, #0
    4b90:	4610      	mov	r0, r2
		   	good_state = 0;
		    adc_state = 0;

			while (good_state<5)          /* while less that 3 good samples */
			{
				temp = gTouch.x;
    4b92:	4e6f      	ldr	r6, [pc, #444]	; (4d50 <main+0x1f4>)
    4b94:	8837      	ldrh	r7, [r6, #0]
    4b96:	b2bb      	uxth	r3, r7
				if (adc_state == temp)
    4b98:	429a      	cmp	r2, r3
    4b9a:	d002      	beq.n	4ba2 <main+0x46>
    4b9c:	461a      	mov	r2, r3
				{
					good_state++;
				}
				else
				{
					good_state = 0;
    4b9e:	2000      	movs	r0, #0
    4ba0:	e7f7      	b.n	4b92 <main+0x36>
			while (good_state<5)          /* while less that 3 good samples */
			{
				temp = gTouch.x;
				if (adc_state == temp)
				{
					good_state++;
    4ba2:	1c41      	adds	r1, r0, #1
    4ba4:	b288      	uxth	r0, r1
		if(TReady == TRUE)
		{
		   	good_state = 0;
		    adc_state = 0;

			while (good_state<5)          /* while less that 3 good samples */
    4ba6:	2804      	cmp	r0, #4
    4ba8:	d9f3      	bls.n	4b92 <main+0x36>
					good_state = 0;
				}

				adc_state = temp;
			}
			gTouch.x = adc_state;    // sample x value
    4baa:	8032      	strh	r2, [r6, #0]

				if(gTouch.y>30 && gTouch.y<230)  // bar touch area
    4bac:	8872      	ldrh	r2, [r6, #2]
    4bae:	b297      	uxth	r7, r2
    4bb0:	2f1e      	cmp	r7, #30
    4bb2:	f240 80c2 	bls.w	4d3a <main+0x1de>
    4bb6:	8873      	ldrh	r3, [r6, #2]
    4bb8:	b299      	uxth	r1, r3
    4bba:	29e5      	cmp	r1, #229	; 0xe5
    4bbc:	f200 80bd 	bhi.w	4d3a <main+0x1de>
				{
					// touch area selecting which bar is selected
					if (gTouch.x>41 && gTouch.x<66)
    4bc0:	8830      	ldrh	r0, [r6, #0]
    4bc2:	b282      	uxth	r2, r0
    4bc4:	2a29      	cmp	r2, #41	; 0x29
    4bc6:	d903      	bls.n	4bd0 <main+0x74>
    4bc8:	8836      	ldrh	r6, [r6, #0]
    4bca:	b2b7      	uxth	r7, r6
    4bcc:	2f41      	cmp	r7, #65	; 0x41
    4bce:	d957      	bls.n	4c80 <main+0x124>
					{index = 1;}
					else if (gTouch.x>67 && gTouch.x<91)
    4bd0:	4b5f      	ldr	r3, [pc, #380]	; (4d50 <main+0x1f4>)
    4bd2:	8819      	ldrh	r1, [r3, #0]
    4bd4:	b288      	uxth	r0, r1
    4bd6:	2843      	cmp	r0, #67	; 0x43
    4bd8:	d903      	bls.n	4be2 <main+0x86>
    4bda:	881a      	ldrh	r2, [r3, #0]
    4bdc:	b296      	uxth	r6, r2
    4bde:	2e5a      	cmp	r6, #90	; 0x5a
    4be0:	d950      	bls.n	4c84 <main+0x128>
					{index = 2;}
					else if (gTouch.x>93 && gTouch.x<120)
    4be2:	881f      	ldrh	r7, [r3, #0]
    4be4:	b2bb      	uxth	r3, r7
    4be6:	2b5d      	cmp	r3, #93	; 0x5d
    4be8:	d904      	bls.n	4bf4 <main+0x98>
    4bea:	4959      	ldr	r1, [pc, #356]	; (4d50 <main+0x1f4>)
    4bec:	8808      	ldrh	r0, [r1, #0]
    4bee:	b282      	uxth	r2, r0
    4bf0:	2a77      	cmp	r2, #119	; 0x77
    4bf2:	d949      	bls.n	4c88 <main+0x12c>
					{index = 3;}
					else if (gTouch.x>127 && gTouch.x<148)
    4bf4:	4e56      	ldr	r6, [pc, #344]	; (4d50 <main+0x1f4>)
    4bf6:	8837      	ldrh	r7, [r6, #0]
    4bf8:	b2bb      	uxth	r3, r7
    4bfa:	2b7f      	cmp	r3, #127	; 0x7f
    4bfc:	d903      	bls.n	4c06 <main+0xaa>
    4bfe:	8831      	ldrh	r1, [r6, #0]
    4c00:	b288      	uxth	r0, r1
    4c02:	2893      	cmp	r0, #147	; 0x93
    4c04:	d942      	bls.n	4c8c <main+0x130>
					{index = 4;}
					else if (gTouch.x>156 && gTouch.x<178)
    4c06:	8832      	ldrh	r2, [r6, #0]
    4c08:	b296      	uxth	r6, r2
    4c0a:	2e9c      	cmp	r6, #156	; 0x9c
    4c0c:	d904      	bls.n	4c18 <main+0xbc>
    4c0e:	4f50      	ldr	r7, [pc, #320]	; (4d50 <main+0x1f4>)
    4c10:	883b      	ldrh	r3, [r7, #0]
    4c12:	b299      	uxth	r1, r3
    4c14:	29b1      	cmp	r1, #177	; 0xb1
    4c16:	d93b      	bls.n	4c90 <main+0x134>
					{index = 5;}
					else if (gTouch.x>182 && gTouch.x<206)
    4c18:	484d      	ldr	r0, [pc, #308]	; (4d50 <main+0x1f4>)
    4c1a:	8802      	ldrh	r2, [r0, #0]
    4c1c:	b296      	uxth	r6, r2
    4c1e:	2eb6      	cmp	r6, #182	; 0xb6
    4c20:	d903      	bls.n	4c2a <main+0xce>
    4c22:	8807      	ldrh	r7, [r0, #0]
    4c24:	b2bb      	uxth	r3, r7
    4c26:	2bcd      	cmp	r3, #205	; 0xcd
    4c28:	d934      	bls.n	4c94 <main+0x138>
					{index = 6;}
					else if (gTouch.x>208 && gTouch.x<232)
    4c2a:	8801      	ldrh	r1, [r0, #0]
    4c2c:	b288      	uxth	r0, r1
    4c2e:	28d0      	cmp	r0, #208	; 0xd0
    4c30:	d904      	bls.n	4c3c <main+0xe0>
    4c32:	4a47      	ldr	r2, [pc, #284]	; (4d50 <main+0x1f4>)
    4c34:	8816      	ldrh	r6, [r2, #0]
    4c36:	b2b7      	uxth	r7, r6
    4c38:	2fe7      	cmp	r7, #231	; 0xe7
    4c3a:	d92d      	bls.n	4c98 <main+0x13c>
					{index = 7;}
					else if (gTouch.x>235 && gTouch.x<257)
    4c3c:	4b44      	ldr	r3, [pc, #272]	; (4d50 <main+0x1f4>)
    4c3e:	8819      	ldrh	r1, [r3, #0]
    4c40:	b288      	uxth	r0, r1
    4c42:	28eb      	cmp	r0, #235	; 0xeb
    4c44:	d904      	bls.n	4c50 <main+0xf4>
    4c46:	881a      	ldrh	r2, [r3, #0]
    4c48:	b296      	uxth	r6, r2
    4c4a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    4c4e:	d925      	bls.n	4c9c <main+0x140>
					{index = 8;}
					else if (gTouch.x>260 && gTouch.x<284)
    4c50:	881f      	ldrh	r7, [r3, #0]
    4c52:	b2bb      	uxth	r3, r7
    4c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    4c58:	d905      	bls.n	4c66 <main+0x10a>
    4c5a:	493d      	ldr	r1, [pc, #244]	; (4d50 <main+0x1f4>)
    4c5c:	8808      	ldrh	r0, [r1, #0]
    4c5e:	b282      	uxth	r2, r0
    4c60:	f5b2 7f8e 	cmp.w	r2, #284	; 0x11c
    4c64:	d31c      	bcc.n	4ca0 <main+0x144>
					{index = 9;}
					else if (gTouch.x>289 && gTouch.x<313)
    4c66:	4e3a      	ldr	r6, [pc, #232]	; (4d50 <main+0x1f4>)
    4c68:	8837      	ldrh	r7, [r6, #0]
    4c6a:	b2bb      	uxth	r3, r7
    4c6c:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
    4c70:	d317      	bcc.n	4ca2 <main+0x146>
    4c72:	8831      	ldrh	r1, [r6, #0]
    4c74:	b288      	uxth	r0, r1
					{index = 10;}
    4c76:	f5b0 7f9c 	cmp.w	r0, #312	; 0x138
    4c7a:	bf98      	it	ls
    4c7c:	240a      	movls	r4, #10
    4c7e:	e010      	b.n	4ca2 <main+0x146>

				if(gTouch.y>30 && gTouch.y<230)  // bar touch area
				{
					// touch area selecting which bar is selected
					if (gTouch.x>41 && gTouch.x<66)
					{index = 1;}
    4c80:	2401      	movs	r4, #1
    4c82:	e00e      	b.n	4ca2 <main+0x146>
					else if (gTouch.x>67 && gTouch.x<91)
					{index = 2;}
    4c84:	2402      	movs	r4, #2
    4c86:	e00c      	b.n	4ca2 <main+0x146>
					else if (gTouch.x>93 && gTouch.x<120)
					{index = 3;}
    4c88:	2403      	movs	r4, #3
    4c8a:	e00a      	b.n	4ca2 <main+0x146>
					else if (gTouch.x>127 && gTouch.x<148)
					{index = 4;}
    4c8c:	2404      	movs	r4, #4
    4c8e:	e008      	b.n	4ca2 <main+0x146>
					else if (gTouch.x>156 && gTouch.x<178)
					{index = 5;}
    4c90:	2405      	movs	r4, #5
    4c92:	e006      	b.n	4ca2 <main+0x146>
					else if (gTouch.x>182 && gTouch.x<206)
					{index = 6;}
    4c94:	2406      	movs	r4, #6
    4c96:	e004      	b.n	4ca2 <main+0x146>
					else if (gTouch.x>208 && gTouch.x<232)
					{index = 7;}
    4c98:	2407      	movs	r4, #7
    4c9a:	e002      	b.n	4ca2 <main+0x146>
					else if (gTouch.x>235 && gTouch.x<257)
					{index = 8;}
    4c9c:	2408      	movs	r4, #8
    4c9e:	e000      	b.n	4ca2 <main+0x146>
					else if (gTouch.x>260 && gTouch.x<284)
					{index = 9;}
    4ca0:	2409      	movs	r4, #9
					else if (gTouch.x>289 && gTouch.x<313)
					{index = 10;}

					if((prev_index - index) !=0)
    4ca2:	b22d      	sxth	r5, r5
    4ca4:	b226      	sxth	r6, r4
    4ca6:	42b5      	cmp	r5, r6
    4ca8:	d009      	beq.n	4cbe <main+0x162>
					{
						if(!flag[index])  // first time selected bar y_ref value
    4caa:	af12      	add	r7, sp, #72	; 0x48
    4cac:	19ba      	adds	r2, r7, r6
    4cae:	f812 3c3c 	ldrb.w	r3, [r2, #-60]
    4cb2:	b923      	cbnz	r3, 4cbe <main+0x162>
						{
							y_ref[index]=219;
    4cb4:	eb07 0146 	add.w	r1, r7, r6, lsl #1
    4cb8:	20db      	movs	r0, #219	; 0xdb
    4cba:	f821 0c18 	strh.w	r0, [r1, #-24]
						}
					}
					PercentBy2 = 229-gTouch.y;  // bar value
    4cbe:	4d24      	ldr	r5, [pc, #144]	; (4d50 <main+0x1f4>)
					diff = prev[index] - PercentBy2; // find difference in value to change
    4cc0:	af12      	add	r7, sp, #72	; 0x48
						if(!flag[index])  // first time selected bar y_ref value
						{
							y_ref[index]=219;
						}
					}
					PercentBy2 = 229-gTouch.y;  // bar value
    4cc2:	f8b5 8002 	ldrh.w	r8, [r5, #2]
					diff = prev[index] - PercentBy2; // find difference in value to change
    4cc6:	b225      	sxth	r5, r4
						if(!flag[index])  // first time selected bar y_ref value
						{
							y_ref[index]=219;
						}
					}
					PercentBy2 = 229-gTouch.y;  // bar value
    4cc8:	f1c8 06e5 	rsb	r6, r8, #229	; 0xe5
    4ccc:	fa1f f886 	uxth.w	r8, r6
					diff = prev[index] - PercentBy2; // find difference in value to change
    4cd0:	eb07 0645 	add.w	r6, r7, r5, lsl #1
    4cd4:	f836 2c30 	ldrh.w	r2, [r6, #-48]
    4cd8:	ebc8 0302 	rsb	r3, r8, r2
    4cdc:	b29f      	uxth	r7, r3
    4cde:	b2b9      	uxth	r1, r7
					if(diff < 0)  // Negative value indicate inc in value over past
    4ce0:	b20b      	sxth	r3, r1
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	da0d      	bge.n	4d02 <main+0x1a6>
					{
						diff = -diff;   // change sign
						GLCD_LBar(index,20,y_ref[index],diff,0,Green); // according to index plot line
    4ce6:	f836 9c18 	ldrh.w	r9, [r6, #-24]
    4cea:	2000      	movs	r0, #0
    4cec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
					}
					PercentBy2 = 229-gTouch.y;  // bar value
					diff = prev[index] - PercentBy2; // find difference in value to change
					if(diff < 0)  // Negative value indicate inc in value over past
					{
						diff = -diff;   // change sign
    4cf0:	427b      	negs	r3, r7
						GLCD_LBar(index,20,y_ref[index],diff,0,Green); // according to index plot line
    4cf2:	e88d 0005 	stmia.w	sp, {r0, r2}
    4cf6:	2114      	movs	r1, #20
    4cf8:	4628      	mov	r0, r5
    4cfa:	fa0f f289 	sxth.w	r2, r9
    4cfe:	b21b      	sxth	r3, r3
    4d00:	e00b      	b.n	4d1a <main+0x1be>
						y_ref[index]=y_ref[index]-diff;  // new y_ref of selected bar
					}
					else if(diff>0) // positive value indicate dec in value over past
    4d02:	b181      	cbz	r1, 4d26 <main+0x1ca>
					{
						GLCD_LBar(index,20,y_ref[index],diff,1,White); // select dec flag
    4d04:	f836 9c18 	ldrh.w	r9, [r6, #-24]
    4d08:	2101      	movs	r1, #1
    4d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4d0e:	e88d 0006 	stmia.w	sp, {r1, r2}
    4d12:	4628      	mov	r0, r5
    4d14:	2114      	movs	r1, #20
    4d16:	fa0f f289 	sxth.w	r2, r9
    4d1a:	f7fe fd45 	bl	37a8 <GLCD_LBar>
						y_ref[index]=y_ref[index]+diff;  // new y_ref of selected bar
    4d1e:	eb07 0009 	add.w	r0, r7, r9
    4d22:	f826 0c18 	strh.w	r0, [r6, #-24]
					}

					prev[index] = PercentBy2;   // store past value
    4d26:	ae12      	add	r6, sp, #72	; 0x48
    4d28:	eb06 0245 	add.w	r2, r6, r5, lsl #1
					flag[index] = 1;            // set flag for that bar as it is initialized
    4d2c:	2701      	movs	r7, #1
    4d2e:	1975      	adds	r5, r6, r5
    4d30:	f805 7c3c 	strb.w	r7, [r5, #-60]
					{
						GLCD_LBar(index,20,y_ref[index],diff,1,White); // select dec flag
						y_ref[index]=y_ref[index]+diff;  // new y_ref of selected bar
					}

					prev[index] = PercentBy2;   // store past value
    4d34:	f822 8c30 	strh.w	r8, [r2, #-48]
					flag[index] = 1;            // set flag for that bar as it is initialized
    4d38:	4625      	mov	r5, r4

					prev_index = index;  // past index value

			}
			TReady=FALSE;
    4d3a:	4b04      	ldr	r3, [pc, #16]	; (4d4c <main+0x1f0>)

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    4d3c:	4e05      	ldr	r6, [pc, #20]	; (4d54 <main+0x1f8>)
    4d3e:	2100      	movs	r1, #0
    4d40:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    4d44:	7019      	strb	r1, [r3, #0]
    4d46:	6030      	str	r0, [r6, #0]
    4d48:	e71d      	b.n	4b86 <main+0x2a>
    4d4a:	bf00      	nop
    4d4c:	10000034 	.word	0x10000034
    4d50:	1000037c 	.word	0x1000037c
    4d54:	e000e100 	.word	0xe000e100

00004d58 <SystemCoreClockUpdate>:
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    4d58:	4b22      	ldr	r3, [pc, #136]	; (4de4 <SystemCoreClockUpdate+0x8c>)

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    4d5a:	b510      	push	{r4, lr}
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    4d5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    4d60:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    4d64:	f3c2 6001 	ubfx	r0, r2, #24, #2
    4d68:	2803      	cmp	r0, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    4d6a:	f001 0103 	and.w	r1, r1, #3
    4d6e:	4a1e      	ldr	r2, [pc, #120]	; (4de8 <SystemCoreClockUpdate+0x90>)
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    4d70:	d125      	bne.n	4dbe <SystemCoreClockUpdate+0x66>
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    4d72:	2901      	cmp	r1, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    4d74:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    4d78:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    4d7c:	d00b      	beq.n	4d96 <SystemCoreClockUpdate+0x3e>
    4d7e:	2902      	cmp	r1, #2
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    4d80:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    4d84:	ea4f 4344 	mov.w	r3, r4, lsl #17
    4d88:	ea4f 4353 	mov.w	r3, r3, lsr #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    4d8c:	f103 0301 	add.w	r3, r3, #1
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    4d90:	d008      	beq.n	4da4 <SystemCoreClockUpdate+0x4c>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
    4d92:	4c16      	ldr	r4, [pc, #88]	; (4dec <SystemCoreClockUpdate+0x94>)
    4d94:	e008      	b.n	4da8 <SystemCoreClockUpdate+0x50>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    4d96:	0464      	lsls	r4, r4, #17
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    4d98:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    4d9c:	0c63      	lsrs	r3, r4, #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
    4d9e:	3301      	adds	r3, #1
    4da0:	4c13      	ldr	r4, [pc, #76]	; (4df0 <SystemCoreClockUpdate+0x98>)
    4da2:	e001      	b.n	4da8 <SystemCoreClockUpdate+0x50>
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    4da4:	f44f 447a 	mov.w	r4, #64000	; 0xfa00
    4da8:	4363      	muls	r3, r4
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    4daa:	f3c0 4007 	ubfx	r0, r0, #16, #8
    4dae:	3001      	adds	r0, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    4db0:	b2c9      	uxtb	r1, r1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    4db2:	fbb3 f3f0 	udiv	r3, r3, r0
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    4db6:	1c48      	adds	r0, r1, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    4db8:	fbb3 f0f0 	udiv	r0, r3, r0
    4dbc:	e00f      	b.n	4dde <SystemCoreClockUpdate+0x86>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    4dbe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    4dc2:	b2d8      	uxtb	r0, r3
    4dc4:	1c43      	adds	r3, r0, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    4dc6:	2901      	cmp	r1, #1
    4dc8:	d003      	beq.n	4dd2 <SystemCoreClockUpdate+0x7a>
    4dca:	2902      	cmp	r1, #2
    4dcc:	d003      	beq.n	4dd6 <SystemCoreClockUpdate+0x7e>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    4dce:	4909      	ldr	r1, [pc, #36]	; (4df4 <SystemCoreClockUpdate+0x9c>)
    4dd0:	e003      	b.n	4dda <SystemCoreClockUpdate+0x82>
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    4dd2:	4909      	ldr	r1, [pc, #36]	; (4df8 <SystemCoreClockUpdate+0xa0>)
    4dd4:	e001      	b.n	4dda <SystemCoreClockUpdate+0x82>
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    4dd6:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
    4dda:	fbb1 f0f3 	udiv	r0, r1, r3
    4dde:	6010      	str	r0, [r2, #0]
    4de0:	bd10      	pop	{r4, pc}
    4de2:	bf00      	nop
    4de4:	400fc000 	.word	0x400fc000
    4de8:	2007c008 	.word	0x2007c008
    4dec:	007a1200 	.word	0x007a1200
    4df0:	016e3600 	.word	0x016e3600
    4df4:	003d0900 	.word	0x003d0900
    4df8:	00b71b00 	.word	0x00b71b00

00004dfc <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    4dfc:	4b33      	ldr	r3, [pc, #204]	; (4ecc <SystemInit+0xd0>)
    4dfe:	2220      	movs	r2, #32
    4e00:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    4e04:	4619      	mov	r1, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    4e06:	f8d1 01a0 	ldr.w	r0, [r1, #416]	; 0x1a0
    4e0a:	4b30      	ldr	r3, [pc, #192]	; (4ecc <SystemInit+0xd0>)
    4e0c:	0640      	lsls	r0, r0, #25
    4e0e:	d5fa      	bpl.n	4e06 <SystemInit+0xa>
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    4e10:	492f      	ldr	r1, [pc, #188]	; (4ed0 <SystemInit+0xd4>)
  LPC_SC->SCS       = SCS_Val;
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    4e12:	2202      	movs	r2, #2

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    4e14:	2001      	movs	r0, #1
  LPC_SC->SCS       = SCS_Val;
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    4e16:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    4e1a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    4e1e:	2255      	movs	r2, #85	; 0x55
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    4e20:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
    4e24:	21aa      	movs	r1, #170	; 0xaa
    4e26:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    4e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    4e2e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    4e32:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    4e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    4e3a:	4824      	ldr	r0, [pc, #144]	; (4ecc <SystemInit+0xd0>)
    4e3c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    4e40:	0159      	lsls	r1, r3, #5
    4e42:	d5fa      	bpl.n	4e3a <SystemInit+0x3e>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    4e44:	2103      	movs	r1, #3
  LPC_SC->PLL0FEED  = 0xAA;
    4e46:	22aa      	movs	r2, #170	; 0xaa
  LPC_SC->PLL0FEED  = 0x55;
    4e48:	2355      	movs	r3, #85	; 0x55
  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    4e4a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    4e4e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    4e52:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    4e56:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
    4e5a:	4b1c      	ldr	r3, [pc, #112]	; (4ecc <SystemInit+0xd0>)
    4e5c:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    4e60:	d0f9      	beq.n	4e56 <SystemInit+0x5a>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    4e62:	2013      	movs	r0, #19
    4e64:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    4e68:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    4e6a:	2255      	movs	r2, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    4e6c:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    4e6e:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    4e72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    4e76:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    4e7a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    4e7e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    4e82:	4a12      	ldr	r2, [pc, #72]	; (4ecc <SystemInit+0xd0>)
    4e84:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    4e88:	055b      	lsls	r3, r3, #21
    4e8a:	d5fa      	bpl.n	4e82 <SystemInit+0x86>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    4e8c:	2103      	movs	r1, #3
  LPC_SC->PLL1FEED  = 0xAA;
    4e8e:	20aa      	movs	r0, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    4e90:	2355      	movs	r3, #85	; 0x55
  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
  LPC_SC->PLL1FEED  = 0xAA;
  LPC_SC->PLL1FEED  = 0x55;
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    4e92:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    4e96:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    4e9a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    4e9e:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
    4ea2:	480a      	ldr	r0, [pc, #40]	; (4ecc <SystemInit+0xd0>)
    4ea4:	f411 7f40 	tst.w	r1, #768	; 0x300
    4ea8:	d0f9      	beq.n	4e9e <SystemInit+0xa2>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    4eaa:	2200      	movs	r2, #0
    4eac:	f8c0 21a8 	str.w	r2, [r0, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    4eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    4eb4:	f8c0 21ac 	str.w	r2, [r0, #428]	; 0x1ac

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    4eb8:	2120      	movs	r1, #32
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    4eba:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    4ebe:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    4ec2:	f8c0 11c8 	str.w	r1, [r0, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    4ec6:	6002      	str	r2, [r0, #0]
    4ec8:	4770      	bx	lr
    4eca:	bf00      	nop
    4ecc:	400fc000 	.word	0x400fc000
    4ed0:	00010018 	.word	0x00010018

00004ed4 <ADC_IRQHandler>:
 * @param  None    
 * @retval : None      
*/

void Default_Handler(void)
{
    4ed4:	e7fe      	b.n	4ed4 <ADC_IRQHandler>

00004ed6 <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
    4ed6:	4668      	mov	r0, sp
    4ed8:	f020 0107 	bic.w	r1, r0, #7
    4edc:	468d      	mov	sp, r1
    4ede:	b501      	push	{r0, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    4ee0:	2300      	movs	r3, #0
 *          supplied main() routine is called.
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
    4ee2:	4a0f      	ldr	r2, [pc, #60]	; (4f20 <Reset_Handler+0x4a>)
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    4ee4:	490f      	ldr	r1, [pc, #60]	; (4f24 <Reset_Handler+0x4e>)
 *          supplied main() routine is called.
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
    4ee6:	1898      	adds	r0, r3, r2
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    4ee8:	4288      	cmp	r0, r1
    4eea:	d204      	bcs.n	4ef6 <Reset_Handler+0x20>
  {
    *(pulDest++) = *(pulSrc++);
    4eec:	490e      	ldr	r1, [pc, #56]	; (4f28 <Reset_Handler+0x52>)
    4eee:	5858      	ldr	r0, [r3, r1]
    4ef0:	5098      	str	r0, [r3, r2]
    4ef2:	3304      	adds	r3, #4
    4ef4:	e7f5      	b.n	4ee2 <Reset_Handler+0xc>
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    4ef6:	480d      	ldr	r0, [pc, #52]	; (4f2c <Reset_Handler+0x56>)
  {
    *(pulDest++) = *(pulSrc++);
  }

  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
    4ef8:	4a0d      	ldr	r2, [pc, #52]	; (4f30 <Reset_Handler+0x5a>)
    4efa:	4290      	cmp	r0, r2
    4efc:	d203      	bcs.n	4f06 <Reset_Handler+0x30>
  {
    *(pulDest++) = 0;
    4efe:	2200      	movs	r2, #0
    4f00:	f840 2b04 	str.w	r2, [r0], #4
    4f04:	e7f8      	b.n	4ef8 <Reset_Handler+0x22>
  {
    *(pulDest++) = *(pulSrc++);
  }

  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
    4f06:	4b0b      	ldr	r3, [pc, #44]	; (4f34 <Reset_Handler+0x5e>)
  {
    *(pulDest++) = 0;
  }

  /* Zero fill the bss_ahb segment. */
  for(pulDest = &_sbss_ahb; pulDest < &_ebss_ahb; )
    4f08:	480b      	ldr	r0, [pc, #44]	; (4f38 <Reset_Handler+0x62>)
    4f0a:	4283      	cmp	r3, r0
    4f0c:	d203      	bcs.n	4f16 <Reset_Handler+0x40>
  {
    *(pulDest++) = 0;
    4f0e:	2100      	movs	r1, #0
    4f10:	f843 1b04 	str.w	r1, [r3], #4
    4f14:	e7f8      	b.n	4f08 <Reset_Handler+0x32>
  }

  /* Call the application's entry point.*/
  SystemInit();
    4f16:	f7ff ff71 	bl	4dfc <SystemInit>
  main();
    4f1a:	f7ff fe1f 	bl	4b5c <main>
    4f1e:	e7fe      	b.n	4f1e <Reset_Handler+0x48>
    4f20:	2007c000 	.word	0x2007c000
    4f24:	2007c010 	.word	0x2007c010
    4f28:	000395c0 	.word	0x000395c0
    4f2c:	10000000 	.word	0x10000000
    4f30:	10000388 	.word	0x10000388
    4f34:	2007c010 	.word	0x2007c010
    4f38:	2007c010 	.word	0x2007c010

00004f3c <_init>:
  while( 1 );
}

// dummy for newer gcc versions
void _init()
{
    4f3c:	4770      	bx	lr
    4f3e:	bf00      	nop

00004f40 <__aeabi_frsub>:
    4f40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    4f44:	e002      	b.n	4f4c <__addsf3>
    4f46:	bf00      	nop

00004f48 <__aeabi_fsub>:
    4f48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00004f4c <__addsf3>:
    4f4c:	0042      	lsls	r2, r0, #1
    4f4e:	bf1f      	itttt	ne
    4f50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    4f54:	ea92 0f03 	teqne	r2, r3
    4f58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    4f5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4f60:	d06a      	beq.n	5038 <__addsf3+0xec>
    4f62:	ea4f 6212 	mov.w	r2, r2, lsr #24
    4f66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    4f6a:	bfc1      	itttt	gt
    4f6c:	18d2      	addgt	r2, r2, r3
    4f6e:	4041      	eorgt	r1, r0
    4f70:	4048      	eorgt	r0, r1
    4f72:	4041      	eorgt	r1, r0
    4f74:	bfb8      	it	lt
    4f76:	425b      	neglt	r3, r3
    4f78:	2b19      	cmp	r3, #25
    4f7a:	bf88      	it	hi
    4f7c:	4770      	bxhi	lr
    4f7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4f86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4f8a:	bf18      	it	ne
    4f8c:	4240      	negne	r0, r0
    4f8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4f92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    4f96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4f9a:	bf18      	it	ne
    4f9c:	4249      	negne	r1, r1
    4f9e:	ea92 0f03 	teq	r2, r3
    4fa2:	d03f      	beq.n	5024 <__addsf3+0xd8>
    4fa4:	f1a2 0201 	sub.w	r2, r2, #1
    4fa8:	fa41 fc03 	asr.w	ip, r1, r3
    4fac:	eb10 000c 	adds.w	r0, r0, ip
    4fb0:	f1c3 0320 	rsb	r3, r3, #32
    4fb4:	fa01 f103 	lsl.w	r1, r1, r3
    4fb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4fbc:	d502      	bpl.n	4fc4 <__addsf3+0x78>
    4fbe:	4249      	negs	r1, r1
    4fc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4fc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4fc8:	d313      	bcc.n	4ff2 <__addsf3+0xa6>
    4fca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4fce:	d306      	bcc.n	4fde <__addsf3+0x92>
    4fd0:	0840      	lsrs	r0, r0, #1
    4fd2:	ea4f 0131 	mov.w	r1, r1, rrx
    4fd6:	f102 0201 	add.w	r2, r2, #1
    4fda:	2afe      	cmp	r2, #254	; 0xfe
    4fdc:	d251      	bcs.n	5082 <__addsf3+0x136>
    4fde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4fe2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4fe6:	bf08      	it	eq
    4fe8:	f020 0001 	biceq.w	r0, r0, #1
    4fec:	ea40 0003 	orr.w	r0, r0, r3
    4ff0:	4770      	bx	lr
    4ff2:	0049      	lsls	r1, r1, #1
    4ff4:	eb40 0000 	adc.w	r0, r0, r0
    4ff8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4ffc:	f1a2 0201 	sub.w	r2, r2, #1
    5000:	d1ed      	bne.n	4fde <__addsf3+0x92>
    5002:	fab0 fc80 	clz	ip, r0
    5006:	f1ac 0c08 	sub.w	ip, ip, #8
    500a:	ebb2 020c 	subs.w	r2, r2, ip
    500e:	fa00 f00c 	lsl.w	r0, r0, ip
    5012:	bfaa      	itet	ge
    5014:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    5018:	4252      	neglt	r2, r2
    501a:	4318      	orrge	r0, r3
    501c:	bfbc      	itt	lt
    501e:	40d0      	lsrlt	r0, r2
    5020:	4318      	orrlt	r0, r3
    5022:	4770      	bx	lr
    5024:	f092 0f00 	teq	r2, #0
    5028:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    502c:	bf06      	itte	eq
    502e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    5032:	3201      	addeq	r2, #1
    5034:	3b01      	subne	r3, #1
    5036:	e7b5      	b.n	4fa4 <__addsf3+0x58>
    5038:	ea4f 0341 	mov.w	r3, r1, lsl #1
    503c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    5040:	bf18      	it	ne
    5042:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    5046:	d021      	beq.n	508c <__addsf3+0x140>
    5048:	ea92 0f03 	teq	r2, r3
    504c:	d004      	beq.n	5058 <__addsf3+0x10c>
    504e:	f092 0f00 	teq	r2, #0
    5052:	bf08      	it	eq
    5054:	4608      	moveq	r0, r1
    5056:	4770      	bx	lr
    5058:	ea90 0f01 	teq	r0, r1
    505c:	bf1c      	itt	ne
    505e:	2000      	movne	r0, #0
    5060:	4770      	bxne	lr
    5062:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    5066:	d104      	bne.n	5072 <__addsf3+0x126>
    5068:	0040      	lsls	r0, r0, #1
    506a:	bf28      	it	cs
    506c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    5070:	4770      	bx	lr
    5072:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    5076:	bf3c      	itt	cc
    5078:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    507c:	4770      	bxcc	lr
    507e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    5082:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    5086:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    508a:	4770      	bx	lr
    508c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    5090:	bf16      	itet	ne
    5092:	4608      	movne	r0, r1
    5094:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    5098:	4601      	movne	r1, r0
    509a:	0242      	lsls	r2, r0, #9
    509c:	bf06      	itte	eq
    509e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    50a2:	ea90 0f01 	teqeq	r0, r1
    50a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    50aa:	4770      	bx	lr

000050ac <__aeabi_ui2f>:
    50ac:	f04f 0300 	mov.w	r3, #0
    50b0:	e004      	b.n	50bc <__aeabi_i2f+0x8>
    50b2:	bf00      	nop

000050b4 <__aeabi_i2f>:
    50b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    50b8:	bf48      	it	mi
    50ba:	4240      	negmi	r0, r0
    50bc:	ea5f 0c00 	movs.w	ip, r0
    50c0:	bf08      	it	eq
    50c2:	4770      	bxeq	lr
    50c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    50c8:	4601      	mov	r1, r0
    50ca:	f04f 0000 	mov.w	r0, #0
    50ce:	e01c      	b.n	510a <__aeabi_l2f+0x2a>

000050d0 <__aeabi_ul2f>:
    50d0:	ea50 0201 	orrs.w	r2, r0, r1
    50d4:	bf08      	it	eq
    50d6:	4770      	bxeq	lr
    50d8:	f04f 0300 	mov.w	r3, #0
    50dc:	e00a      	b.n	50f4 <__aeabi_l2f+0x14>
    50de:	bf00      	nop

000050e0 <__aeabi_l2f>:
    50e0:	ea50 0201 	orrs.w	r2, r0, r1
    50e4:	bf08      	it	eq
    50e6:	4770      	bxeq	lr
    50e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    50ec:	d502      	bpl.n	50f4 <__aeabi_l2f+0x14>
    50ee:	4240      	negs	r0, r0
    50f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    50f4:	ea5f 0c01 	movs.w	ip, r1
    50f8:	bf02      	ittt	eq
    50fa:	4684      	moveq	ip, r0
    50fc:	4601      	moveq	r1, r0
    50fe:	2000      	moveq	r0, #0
    5100:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    5104:	bf08      	it	eq
    5106:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    510a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    510e:	fabc f28c 	clz	r2, ip
    5112:	3a08      	subs	r2, #8
    5114:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    5118:	db10      	blt.n	513c <__aeabi_l2f+0x5c>
    511a:	fa01 fc02 	lsl.w	ip, r1, r2
    511e:	4463      	add	r3, ip
    5120:	fa00 fc02 	lsl.w	ip, r0, r2
    5124:	f1c2 0220 	rsb	r2, r2, #32
    5128:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    512c:	fa20 f202 	lsr.w	r2, r0, r2
    5130:	eb43 0002 	adc.w	r0, r3, r2
    5134:	bf08      	it	eq
    5136:	f020 0001 	biceq.w	r0, r0, #1
    513a:	4770      	bx	lr
    513c:	f102 0220 	add.w	r2, r2, #32
    5140:	fa01 fc02 	lsl.w	ip, r1, r2
    5144:	f1c2 0220 	rsb	r2, r2, #32
    5148:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    514c:	fa21 f202 	lsr.w	r2, r1, r2
    5150:	eb43 0002 	adc.w	r0, r3, r2
    5154:	bf08      	it	eq
    5156:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    515a:	4770      	bx	lr

0000515c <__gesf2>:
    515c:	f04f 3cff 	mov.w	ip, #4294967295
    5160:	e006      	b.n	5170 <__cmpsf2+0x4>
    5162:	bf00      	nop

00005164 <__lesf2>:
    5164:	f04f 0c01 	mov.w	ip, #1
    5168:	e002      	b.n	5170 <__cmpsf2+0x4>
    516a:	bf00      	nop

0000516c <__cmpsf2>:
    516c:	f04f 0c01 	mov.w	ip, #1
    5170:	f84d cd04 	str.w	ip, [sp, #-4]!
    5174:	ea4f 0240 	mov.w	r2, r0, lsl #1
    5178:	ea4f 0341 	mov.w	r3, r1, lsl #1
    517c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    5180:	bf18      	it	ne
    5182:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    5186:	d011      	beq.n	51ac <__cmpsf2+0x40>
    5188:	b001      	add	sp, #4
    518a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    518e:	bf18      	it	ne
    5190:	ea90 0f01 	teqne	r0, r1
    5194:	bf58      	it	pl
    5196:	ebb2 0003 	subspl.w	r0, r2, r3
    519a:	bf88      	it	hi
    519c:	17c8      	asrhi	r0, r1, #31
    519e:	bf38      	it	cc
    51a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    51a4:	bf18      	it	ne
    51a6:	f040 0001 	orrne.w	r0, r0, #1
    51aa:	4770      	bx	lr
    51ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    51b0:	d102      	bne.n	51b8 <__cmpsf2+0x4c>
    51b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    51b6:	d105      	bne.n	51c4 <__cmpsf2+0x58>
    51b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    51bc:	d1e4      	bne.n	5188 <__cmpsf2+0x1c>
    51be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    51c2:	d0e1      	beq.n	5188 <__cmpsf2+0x1c>
    51c4:	f85d 0b04 	ldr.w	r0, [sp], #4
    51c8:	4770      	bx	lr
    51ca:	bf00      	nop

000051cc <__aeabi_cfrcmple>:
    51cc:	4684      	mov	ip, r0
    51ce:	4608      	mov	r0, r1
    51d0:	4661      	mov	r1, ip
    51d2:	e7ff      	b.n	51d4 <__aeabi_cfcmpeq>

000051d4 <__aeabi_cfcmpeq>:
    51d4:	b50f      	push	{r0, r1, r2, r3, lr}
    51d6:	f7ff ffc9 	bl	516c <__cmpsf2>
    51da:	2800      	cmp	r0, #0
    51dc:	bf48      	it	mi
    51de:	f110 0f00 	cmnmi.w	r0, #0
    51e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

000051e4 <__aeabi_fcmpeq>:
    51e4:	f84d ed08 	str.w	lr, [sp, #-8]!
    51e8:	f7ff fff4 	bl	51d4 <__aeabi_cfcmpeq>
    51ec:	bf0c      	ite	eq
    51ee:	2001      	moveq	r0, #1
    51f0:	2000      	movne	r0, #0
    51f2:	f85d fb08 	ldr.w	pc, [sp], #8
    51f6:	bf00      	nop

000051f8 <__aeabi_fcmplt>:
    51f8:	f84d ed08 	str.w	lr, [sp, #-8]!
    51fc:	f7ff ffea 	bl	51d4 <__aeabi_cfcmpeq>
    5200:	bf34      	ite	cc
    5202:	2001      	movcc	r0, #1
    5204:	2000      	movcs	r0, #0
    5206:	f85d fb08 	ldr.w	pc, [sp], #8
    520a:	bf00      	nop

0000520c <__aeabi_fcmple>:
    520c:	f84d ed08 	str.w	lr, [sp, #-8]!
    5210:	f7ff ffe0 	bl	51d4 <__aeabi_cfcmpeq>
    5214:	bf94      	ite	ls
    5216:	2001      	movls	r0, #1
    5218:	2000      	movhi	r0, #0
    521a:	f85d fb08 	ldr.w	pc, [sp], #8
    521e:	bf00      	nop

00005220 <__aeabi_fcmpge>:
    5220:	f84d ed08 	str.w	lr, [sp, #-8]!
    5224:	f7ff ffd2 	bl	51cc <__aeabi_cfrcmple>
    5228:	bf94      	ite	ls
    522a:	2001      	movls	r0, #1
    522c:	2000      	movhi	r0, #0
    522e:	f85d fb08 	ldr.w	pc, [sp], #8
    5232:	bf00      	nop

00005234 <__aeabi_fcmpgt>:
    5234:	f84d ed08 	str.w	lr, [sp, #-8]!
    5238:	f7ff ffc8 	bl	51cc <__aeabi_cfrcmple>
    523c:	bf34      	ite	cc
    523e:	2001      	movcc	r0, #1
    5240:	2000      	movcs	r0, #0
    5242:	f85d fb08 	ldr.w	pc, [sp], #8
    5246:	bf00      	nop

00005248 <__aeabi_uldivmod>:
    5248:	b94b      	cbnz	r3, 525e <__aeabi_uldivmod+0x16>
    524a:	b942      	cbnz	r2, 525e <__aeabi_uldivmod+0x16>
    524c:	2900      	cmp	r1, #0
    524e:	bf08      	it	eq
    5250:	2800      	cmpeq	r0, #0
    5252:	d002      	beq.n	525a <__aeabi_uldivmod+0x12>
    5254:	f04f 31ff 	mov.w	r1, #4294967295
    5258:	4608      	mov	r0, r1
    525a:	f000 b83b 	b.w	52d4 <__aeabi_idiv0>
    525e:	b082      	sub	sp, #8
    5260:	46ec      	mov	ip, sp
    5262:	e92d 5000 	stmdb	sp!, {ip, lr}
    5266:	f000 f81d 	bl	52a4 <__gnu_uldivmod_helper>
    526a:	f8dd e004 	ldr.w	lr, [sp, #4]
    526e:	b002      	add	sp, #8
    5270:	bc0c      	pop	{r2, r3}
    5272:	4770      	bx	lr

00005274 <__gnu_ldivmod_helper>:
    5274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5278:	4616      	mov	r6, r2
    527a:	4698      	mov	r8, r3
    527c:	4604      	mov	r4, r0
    527e:	460d      	mov	r5, r1
    5280:	f000 f82a 	bl	52d8 <__divdi3>
    5284:	fb06 fc01 	mul.w	ip, r6, r1
    5288:	fba6 2300 	umull	r2, r3, r6, r0
    528c:	fb00 c708 	mla	r7, r0, r8, ip
    5290:	18fb      	adds	r3, r7, r3
    5292:	1aa2      	subs	r2, r4, r2
    5294:	eb65 0303 	sbc.w	r3, r5, r3
    5298:	9c06      	ldr	r4, [sp, #24]
    529a:	e9c4 2300 	strd	r2, r3, [r4]
    529e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52a2:	bf00      	nop

000052a4 <__gnu_uldivmod_helper>:
    52a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52a8:	4690      	mov	r8, r2
    52aa:	4606      	mov	r6, r0
    52ac:	460f      	mov	r7, r1
    52ae:	461d      	mov	r5, r3
    52b0:	f000 f970 	bl	5594 <__udivdi3>
    52b4:	fb00 f305 	mul.w	r3, r0, r5
    52b8:	fba0 4508 	umull	r4, r5, r0, r8
    52bc:	fb08 3801 	mla	r8, r8, r1, r3
    52c0:	9b06      	ldr	r3, [sp, #24]
    52c2:	4445      	add	r5, r8
    52c4:	1b34      	subs	r4, r6, r4
    52c6:	eb67 0505 	sbc.w	r5, r7, r5
    52ca:	e9c3 4500 	strd	r4, r5, [r3]
    52ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52d2:	bf00      	nop

000052d4 <__aeabi_idiv0>:
    52d4:	4770      	bx	lr
    52d6:	bf00      	nop

000052d8 <__divdi3>:
    52d8:	2900      	cmp	r1, #0
    52da:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    52de:	461d      	mov	r5, r3
    52e0:	f2c0 809d 	blt.w	541e <__divdi3+0x146>
    52e4:	2400      	movs	r4, #0
    52e6:	2d00      	cmp	r5, #0
    52e8:	f2c0 8094 	blt.w	5414 <__divdi3+0x13c>
    52ec:	4680      	mov	r8, r0
    52ee:	460f      	mov	r7, r1
    52f0:	4694      	mov	ip, r2
    52f2:	461e      	mov	r6, r3
    52f4:	bbe3      	cbnz	r3, 5370 <__divdi3+0x98>
    52f6:	428a      	cmp	r2, r1
    52f8:	d955      	bls.n	53a6 <__divdi3+0xce>
    52fa:	fab2 f782 	clz	r7, r2
    52fe:	b147      	cbz	r7, 5312 <__divdi3+0x3a>
    5300:	f1c7 0520 	rsb	r5, r7, #32
    5304:	fa20 f605 	lsr.w	r6, r0, r5
    5308:	fa01 f107 	lsl.w	r1, r1, r7
    530c:	40ba      	lsls	r2, r7
    530e:	40b8      	lsls	r0, r7
    5310:	4331      	orrs	r1, r6
    5312:	0c17      	lsrs	r7, r2, #16
    5314:	fbb1 f6f7 	udiv	r6, r1, r7
    5318:	fa1f fc82 	uxth.w	ip, r2
    531c:	fb07 1116 	mls	r1, r7, r6, r1
    5320:	fb0c f506 	mul.w	r5, ip, r6
    5324:	0c03      	lsrs	r3, r0, #16
    5326:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    532a:	429d      	cmp	r5, r3
    532c:	d908      	bls.n	5340 <__divdi3+0x68>
    532e:	1e71      	subs	r1, r6, #1
    5330:	189b      	adds	r3, r3, r2
    5332:	f080 8113 	bcs.w	555c <__divdi3+0x284>
    5336:	429d      	cmp	r5, r3
    5338:	f240 8110 	bls.w	555c <__divdi3+0x284>
    533c:	3e02      	subs	r6, #2
    533e:	189b      	adds	r3, r3, r2
    5340:	1b59      	subs	r1, r3, r5
    5342:	fbb1 f5f7 	udiv	r5, r1, r7
    5346:	fb07 1315 	mls	r3, r7, r5, r1
    534a:	fb0c fc05 	mul.w	ip, ip, r5
    534e:	b280      	uxth	r0, r0
    5350:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    5354:	458c      	cmp	ip, r1
    5356:	d907      	bls.n	5368 <__divdi3+0x90>
    5358:	1e6b      	subs	r3, r5, #1
    535a:	188a      	adds	r2, r1, r2
    535c:	f080 8100 	bcs.w	5560 <__divdi3+0x288>
    5360:	4594      	cmp	ip, r2
    5362:	f240 80fd 	bls.w	5560 <__divdi3+0x288>
    5366:	3d02      	subs	r5, #2
    5368:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    536c:	2500      	movs	r5, #0
    536e:	e003      	b.n	5378 <__divdi3+0xa0>
    5370:	428b      	cmp	r3, r1
    5372:	d90c      	bls.n	538e <__divdi3+0xb6>
    5374:	2500      	movs	r5, #0
    5376:	4629      	mov	r1, r5
    5378:	460a      	mov	r2, r1
    537a:	462b      	mov	r3, r5
    537c:	b114      	cbz	r4, 5384 <__divdi3+0xac>
    537e:	4252      	negs	r2, r2
    5380:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5384:	4610      	mov	r0, r2
    5386:	4619      	mov	r1, r3
    5388:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    538c:	4770      	bx	lr
    538e:	fab3 f583 	clz	r5, r3
    5392:	2d00      	cmp	r5, #0
    5394:	f040 8087 	bne.w	54a6 <__divdi3+0x1ce>
    5398:	428b      	cmp	r3, r1
    539a:	d301      	bcc.n	53a0 <__divdi3+0xc8>
    539c:	4282      	cmp	r2, r0
    539e:	d8ea      	bhi.n	5376 <__divdi3+0x9e>
    53a0:	2500      	movs	r5, #0
    53a2:	2101      	movs	r1, #1
    53a4:	e7e8      	b.n	5378 <__divdi3+0xa0>
    53a6:	b912      	cbnz	r2, 53ae <__divdi3+0xd6>
    53a8:	2601      	movs	r6, #1
    53aa:	fbb6 f2f2 	udiv	r2, r6, r2
    53ae:	fab2 f682 	clz	r6, r2
    53b2:	2e00      	cmp	r6, #0
    53b4:	d139      	bne.n	542a <__divdi3+0x152>
    53b6:	1a8e      	subs	r6, r1, r2
    53b8:	0c13      	lsrs	r3, r2, #16
    53ba:	fa1f fc82 	uxth.w	ip, r2
    53be:	2501      	movs	r5, #1
    53c0:	fbb6 f7f3 	udiv	r7, r6, r3
    53c4:	fb03 6117 	mls	r1, r3, r7, r6
    53c8:	fb0c f807 	mul.w	r8, ip, r7
    53cc:	ea4f 4910 	mov.w	r9, r0, lsr #16
    53d0:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    53d4:	45b0      	cmp	r8, r6
    53d6:	d906      	bls.n	53e6 <__divdi3+0x10e>
    53d8:	1e79      	subs	r1, r7, #1
    53da:	18b6      	adds	r6, r6, r2
    53dc:	d202      	bcs.n	53e4 <__divdi3+0x10c>
    53de:	45b0      	cmp	r8, r6
    53e0:	f200 80d3 	bhi.w	558a <__divdi3+0x2b2>
    53e4:	460f      	mov	r7, r1
    53e6:	ebc8 0606 	rsb	r6, r8, r6
    53ea:	fbb6 f1f3 	udiv	r1, r6, r3
    53ee:	fb03 6311 	mls	r3, r3, r1, r6
    53f2:	fb0c fc01 	mul.w	ip, ip, r1
    53f6:	b280      	uxth	r0, r0
    53f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    53fc:	459c      	cmp	ip, r3
    53fe:	d906      	bls.n	540e <__divdi3+0x136>
    5400:	1e4e      	subs	r6, r1, #1
    5402:	189a      	adds	r2, r3, r2
    5404:	d202      	bcs.n	540c <__divdi3+0x134>
    5406:	4594      	cmp	ip, r2
    5408:	f200 80c2 	bhi.w	5590 <__divdi3+0x2b8>
    540c:	4631      	mov	r1, r6
    540e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    5412:	e7b1      	b.n	5378 <__divdi3+0xa0>
    5414:	43e4      	mvns	r4, r4
    5416:	4252      	negs	r2, r2
    5418:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    541c:	e766      	b.n	52ec <__divdi3+0x14>
    541e:	4240      	negs	r0, r0
    5420:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5424:	f04f 34ff 	mov.w	r4, #4294967295
    5428:	e75d      	b.n	52e6 <__divdi3+0xe>
    542a:	40b2      	lsls	r2, r6
    542c:	f1c6 0920 	rsb	r9, r6, #32
    5430:	fa21 f709 	lsr.w	r7, r1, r9
    5434:	fa20 f909 	lsr.w	r9, r0, r9
    5438:	fa01 f106 	lsl.w	r1, r1, r6
    543c:	0c13      	lsrs	r3, r2, #16
    543e:	fbb7 f8f3 	udiv	r8, r7, r3
    5442:	fa1f fc82 	uxth.w	ip, r2
    5446:	fb03 7718 	mls	r7, r3, r8, r7
    544a:	fb0c f508 	mul.w	r5, ip, r8
    544e:	ea49 0901 	orr.w	r9, r9, r1
    5452:	ea4f 4119 	mov.w	r1, r9, lsr #16
    5456:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    545a:	40b0      	lsls	r0, r6
    545c:	42bd      	cmp	r5, r7
    545e:	d90a      	bls.n	5476 <__divdi3+0x19e>
    5460:	18bf      	adds	r7, r7, r2
    5462:	f108 36ff 	add.w	r6, r8, #4294967295
    5466:	f080 808e 	bcs.w	5586 <__divdi3+0x2ae>
    546a:	42bd      	cmp	r5, r7
    546c:	f240 808b 	bls.w	5586 <__divdi3+0x2ae>
    5470:	f1a8 0802 	sub.w	r8, r8, #2
    5474:	18bf      	adds	r7, r7, r2
    5476:	1b79      	subs	r1, r7, r5
    5478:	fbb1 f5f3 	udiv	r5, r1, r3
    547c:	fb03 1715 	mls	r7, r3, r5, r1
    5480:	fb0c f605 	mul.w	r6, ip, r5
    5484:	fa1f f989 	uxth.w	r9, r9
    5488:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    548c:	428e      	cmp	r6, r1
    548e:	d906      	bls.n	549e <__divdi3+0x1c6>
    5490:	1e6f      	subs	r7, r5, #1
    5492:	1889      	adds	r1, r1, r2
    5494:	d271      	bcs.n	557a <__divdi3+0x2a2>
    5496:	428e      	cmp	r6, r1
    5498:	d96f      	bls.n	557a <__divdi3+0x2a2>
    549a:	3d02      	subs	r5, #2
    549c:	1889      	adds	r1, r1, r2
    549e:	1b8e      	subs	r6, r1, r6
    54a0:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    54a4:	e78c      	b.n	53c0 <__divdi3+0xe8>
    54a6:	f1c5 0120 	rsb	r1, r5, #32
    54aa:	fa22 f301 	lsr.w	r3, r2, r1
    54ae:	fa06 f605 	lsl.w	r6, r6, r5
    54b2:	fa27 f201 	lsr.w	r2, r7, r1
    54b6:	fa07 f705 	lsl.w	r7, r7, r5
    54ba:	fa20 f101 	lsr.w	r1, r0, r1
    54be:	431e      	orrs	r6, r3
    54c0:	ea4f 4916 	mov.w	r9, r6, lsr #16
    54c4:	fbb2 f8f9 	udiv	r8, r2, r9
    54c8:	fa1f fa86 	uxth.w	sl, r6
    54cc:	fb09 2218 	mls	r2, r9, r8, r2
    54d0:	fb0a fb08 	mul.w	fp, sl, r8
    54d4:	430f      	orrs	r7, r1
    54d6:	0c3b      	lsrs	r3, r7, #16
    54d8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    54dc:	4593      	cmp	fp, r2
    54de:	fa0c fc05 	lsl.w	ip, ip, r5
    54e2:	d908      	bls.n	54f6 <__divdi3+0x21e>
    54e4:	1992      	adds	r2, r2, r6
    54e6:	f108 31ff 	add.w	r1, r8, #4294967295
    54ea:	d24a      	bcs.n	5582 <__divdi3+0x2aa>
    54ec:	4593      	cmp	fp, r2
    54ee:	d948      	bls.n	5582 <__divdi3+0x2aa>
    54f0:	f1a8 0802 	sub.w	r8, r8, #2
    54f4:	1992      	adds	r2, r2, r6
    54f6:	ebcb 0302 	rsb	r3, fp, r2
    54fa:	fbb3 f1f9 	udiv	r1, r3, r9
    54fe:	fb09 3211 	mls	r2, r9, r1, r3
    5502:	fb0a fa01 	mul.w	sl, sl, r1
    5506:	b2bf      	uxth	r7, r7
    5508:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    550c:	459a      	cmp	sl, r3
    550e:	d906      	bls.n	551e <__divdi3+0x246>
    5510:	1e4a      	subs	r2, r1, #1
    5512:	199b      	adds	r3, r3, r6
    5514:	d233      	bcs.n	557e <__divdi3+0x2a6>
    5516:	459a      	cmp	sl, r3
    5518:	d931      	bls.n	557e <__divdi3+0x2a6>
    551a:	3902      	subs	r1, #2
    551c:	199b      	adds	r3, r3, r6
    551e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    5522:	0c0f      	lsrs	r7, r1, #16
    5524:	fa1f f88c 	uxth.w	r8, ip
    5528:	fb08 f607 	mul.w	r6, r8, r7
    552c:	b28a      	uxth	r2, r1
    552e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    5532:	fb08 f802 	mul.w	r8, r8, r2
    5536:	fb0c 6202 	mla	r2, ip, r2, r6
    553a:	fb0c fc07 	mul.w	ip, ip, r7
    553e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    5542:	4296      	cmp	r6, r2
    5544:	bf88      	it	hi
    5546:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    554a:	ebca 0303 	rsb	r3, sl, r3
    554e:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    5552:	4563      	cmp	r3, ip
    5554:	d30e      	bcc.n	5574 <__divdi3+0x29c>
    5556:	d005      	beq.n	5564 <__divdi3+0x28c>
    5558:	2500      	movs	r5, #0
    555a:	e70d      	b.n	5378 <__divdi3+0xa0>
    555c:	460e      	mov	r6, r1
    555e:	e6ef      	b.n	5340 <__divdi3+0x68>
    5560:	461d      	mov	r5, r3
    5562:	e701      	b.n	5368 <__divdi3+0x90>
    5564:	fa00 f005 	lsl.w	r0, r0, r5
    5568:	fa1f f888 	uxth.w	r8, r8
    556c:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    5570:	42a8      	cmp	r0, r5
    5572:	d2f1      	bcs.n	5558 <__divdi3+0x280>
    5574:	3901      	subs	r1, #1
    5576:	2500      	movs	r5, #0
    5578:	e6fe      	b.n	5378 <__divdi3+0xa0>
    557a:	463d      	mov	r5, r7
    557c:	e78f      	b.n	549e <__divdi3+0x1c6>
    557e:	4611      	mov	r1, r2
    5580:	e7cd      	b.n	551e <__divdi3+0x246>
    5582:	4688      	mov	r8, r1
    5584:	e7b7      	b.n	54f6 <__divdi3+0x21e>
    5586:	46b0      	mov	r8, r6
    5588:	e775      	b.n	5476 <__divdi3+0x19e>
    558a:	3f02      	subs	r7, #2
    558c:	18b6      	adds	r6, r6, r2
    558e:	e72a      	b.n	53e6 <__divdi3+0x10e>
    5590:	3902      	subs	r1, #2
    5592:	e73c      	b.n	540e <__divdi3+0x136>

00005594 <__udivdi3>:
    5594:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    5598:	4614      	mov	r4, r2
    559a:	4605      	mov	r5, r0
    559c:	460e      	mov	r6, r1
    559e:	2b00      	cmp	r3, #0
    55a0:	d13d      	bne.n	561e <__udivdi3+0x8a>
    55a2:	428a      	cmp	r2, r1
    55a4:	d949      	bls.n	563a <__udivdi3+0xa6>
    55a6:	fab2 f782 	clz	r7, r2
    55aa:	b147      	cbz	r7, 55be <__udivdi3+0x2a>
    55ac:	f1c7 0120 	rsb	r1, r7, #32
    55b0:	fa20 f201 	lsr.w	r2, r0, r1
    55b4:	fa06 f607 	lsl.w	r6, r6, r7
    55b8:	40bc      	lsls	r4, r7
    55ba:	40bd      	lsls	r5, r7
    55bc:	4316      	orrs	r6, r2
    55be:	0c22      	lsrs	r2, r4, #16
    55c0:	fbb6 f0f2 	udiv	r0, r6, r2
    55c4:	b2a1      	uxth	r1, r4
    55c6:	fb02 6610 	mls	r6, r2, r0, r6
    55ca:	fb01 f300 	mul.w	r3, r1, r0
    55ce:	0c2f      	lsrs	r7, r5, #16
    55d0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    55d4:	42b3      	cmp	r3, r6
    55d6:	d908      	bls.n	55ea <__udivdi3+0x56>
    55d8:	1e47      	subs	r7, r0, #1
    55da:	1936      	adds	r6, r6, r4
    55dc:	f080 80fa 	bcs.w	57d4 <__udivdi3+0x240>
    55e0:	42b3      	cmp	r3, r6
    55e2:	f240 80f7 	bls.w	57d4 <__udivdi3+0x240>
    55e6:	3802      	subs	r0, #2
    55e8:	1936      	adds	r6, r6, r4
    55ea:	1af6      	subs	r6, r6, r3
    55ec:	fbb6 f3f2 	udiv	r3, r6, r2
    55f0:	fb02 6213 	mls	r2, r2, r3, r6
    55f4:	fb01 f103 	mul.w	r1, r1, r3
    55f8:	b2ad      	uxth	r5, r5
    55fa:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    55fe:	4291      	cmp	r1, r2
    5600:	d907      	bls.n	5612 <__udivdi3+0x7e>
    5602:	1e5e      	subs	r6, r3, #1
    5604:	1912      	adds	r2, r2, r4
    5606:	f080 80e7 	bcs.w	57d8 <__udivdi3+0x244>
    560a:	4291      	cmp	r1, r2
    560c:	f240 80e4 	bls.w	57d8 <__udivdi3+0x244>
    5610:	3b02      	subs	r3, #2
    5612:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    5616:	2100      	movs	r1, #0
    5618:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    561c:	4770      	bx	lr
    561e:	428b      	cmp	r3, r1
    5620:	d843      	bhi.n	56aa <__udivdi3+0x116>
    5622:	fab3 f483 	clz	r4, r3
    5626:	2c00      	cmp	r4, #0
    5628:	d142      	bne.n	56b0 <__udivdi3+0x11c>
    562a:	428b      	cmp	r3, r1
    562c:	d302      	bcc.n	5634 <__udivdi3+0xa0>
    562e:	4282      	cmp	r2, r0
    5630:	f200 80e1 	bhi.w	57f6 <__udivdi3+0x262>
    5634:	2100      	movs	r1, #0
    5636:	2001      	movs	r0, #1
    5638:	e7ee      	b.n	5618 <__udivdi3+0x84>
    563a:	b912      	cbnz	r2, 5642 <__udivdi3+0xae>
    563c:	2701      	movs	r7, #1
    563e:	fbb7 f4f2 	udiv	r4, r7, r2
    5642:	fab4 f284 	clz	r2, r4
    5646:	2a00      	cmp	r2, #0
    5648:	f040 8089 	bne.w	575e <__udivdi3+0x1ca>
    564c:	1b0a      	subs	r2, r1, r4
    564e:	0c23      	lsrs	r3, r4, #16
    5650:	b2a7      	uxth	r7, r4
    5652:	2101      	movs	r1, #1
    5654:	fbb2 f6f3 	udiv	r6, r2, r3
    5658:	fb03 2216 	mls	r2, r3, r6, r2
    565c:	fb07 f006 	mul.w	r0, r7, r6
    5660:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    5664:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    5668:	4290      	cmp	r0, r2
    566a:	d907      	bls.n	567c <__udivdi3+0xe8>
    566c:	1912      	adds	r2, r2, r4
    566e:	f106 3cff 	add.w	ip, r6, #4294967295
    5672:	d202      	bcs.n	567a <__udivdi3+0xe6>
    5674:	4290      	cmp	r0, r2
    5676:	f200 80d0 	bhi.w	581a <__udivdi3+0x286>
    567a:	4666      	mov	r6, ip
    567c:	1a12      	subs	r2, r2, r0
    567e:	fbb2 f0f3 	udiv	r0, r2, r3
    5682:	fb03 2310 	mls	r3, r3, r0, r2
    5686:	fb07 f700 	mul.w	r7, r7, r0
    568a:	b2ad      	uxth	r5, r5
    568c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    5690:	429f      	cmp	r7, r3
    5692:	d907      	bls.n	56a4 <__udivdi3+0x110>
    5694:	1e42      	subs	r2, r0, #1
    5696:	191b      	adds	r3, r3, r4
    5698:	f080 80a0 	bcs.w	57dc <__udivdi3+0x248>
    569c:	429f      	cmp	r7, r3
    569e:	f240 809d 	bls.w	57dc <__udivdi3+0x248>
    56a2:	3802      	subs	r0, #2
    56a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    56a8:	e7b6      	b.n	5618 <__udivdi3+0x84>
    56aa:	2100      	movs	r1, #0
    56ac:	4608      	mov	r0, r1
    56ae:	e7b3      	b.n	5618 <__udivdi3+0x84>
    56b0:	f1c4 0620 	rsb	r6, r4, #32
    56b4:	fa22 f706 	lsr.w	r7, r2, r6
    56b8:	fa03 f304 	lsl.w	r3, r3, r4
    56bc:	fa21 f506 	lsr.w	r5, r1, r6
    56c0:	fa01 f104 	lsl.w	r1, r1, r4
    56c4:	fa20 f606 	lsr.w	r6, r0, r6
    56c8:	433b      	orrs	r3, r7
    56ca:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    56ce:	fbb5 f7fc 	udiv	r7, r5, ip
    56d2:	fa1f f883 	uxth.w	r8, r3
    56d6:	fb0c 5517 	mls	r5, ip, r7, r5
    56da:	fb08 f907 	mul.w	r9, r8, r7
    56de:	ea46 0a01 	orr.w	sl, r6, r1
    56e2:	ea4f 411a 	mov.w	r1, sl, lsr #16
    56e6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    56ea:	45a9      	cmp	r9, r5
    56ec:	fa02 f204 	lsl.w	r2, r2, r4
    56f0:	d904      	bls.n	56fc <__udivdi3+0x168>
    56f2:	1e7e      	subs	r6, r7, #1
    56f4:	18ed      	adds	r5, r5, r3
    56f6:	f0c0 8081 	bcc.w	57fc <__udivdi3+0x268>
    56fa:	4637      	mov	r7, r6
    56fc:	ebc9 0105 	rsb	r1, r9, r5
    5700:	fbb1 f6fc 	udiv	r6, r1, ip
    5704:	fb0c 1516 	mls	r5, ip, r6, r1
    5708:	fb08 f806 	mul.w	r8, r8, r6
    570c:	fa1f fa8a 	uxth.w	sl, sl
    5710:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    5714:	4588      	cmp	r8, r1
    5716:	d903      	bls.n	5720 <__udivdi3+0x18c>
    5718:	1e75      	subs	r5, r6, #1
    571a:	18c9      	adds	r1, r1, r3
    571c:	d374      	bcc.n	5808 <__udivdi3+0x274>
    571e:	462e      	mov	r6, r5
    5720:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    5724:	0c37      	lsrs	r7, r6, #16
    5726:	fa1f fc82 	uxth.w	ip, r2
    572a:	fb0c f507 	mul.w	r5, ip, r7
    572e:	0c12      	lsrs	r2, r2, #16
    5730:	b2b3      	uxth	r3, r6
    5732:	fb0c fc03 	mul.w	ip, ip, r3
    5736:	fb02 5303 	mla	r3, r2, r3, r5
    573a:	fb02 f207 	mul.w	r2, r2, r7
    573e:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    5742:	429d      	cmp	r5, r3
    5744:	bf88      	it	hi
    5746:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    574a:	ebc8 0101 	rsb	r1, r8, r1
    574e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    5752:	4291      	cmp	r1, r2
    5754:	d34c      	bcc.n	57f0 <__udivdi3+0x25c>
    5756:	d043      	beq.n	57e0 <__udivdi3+0x24c>
    5758:	4630      	mov	r0, r6
    575a:	2100      	movs	r1, #0
    575c:	e75c      	b.n	5618 <__udivdi3+0x84>
    575e:	4094      	lsls	r4, r2
    5760:	f1c2 0520 	rsb	r5, r2, #32
    5764:	fa21 f605 	lsr.w	r6, r1, r5
    5768:	fa20 f505 	lsr.w	r5, r0, r5
    576c:	fa01 f102 	lsl.w	r1, r1, r2
    5770:	0c23      	lsrs	r3, r4, #16
    5772:	fbb6 fcf3 	udiv	ip, r6, r3
    5776:	b2a7      	uxth	r7, r4
    5778:	fb03 661c 	mls	r6, r3, ip, r6
    577c:	fb07 f80c 	mul.w	r8, r7, ip
    5780:	4329      	orrs	r1, r5
    5782:	0c0d      	lsrs	r5, r1, #16
    5784:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    5788:	45b0      	cmp	r8, r6
    578a:	fa00 f502 	lsl.w	r5, r0, r2
    578e:	d908      	bls.n	57a2 <__udivdi3+0x20e>
    5790:	1936      	adds	r6, r6, r4
    5792:	f10c 30ff 	add.w	r0, ip, #4294967295
    5796:	d23e      	bcs.n	5816 <__udivdi3+0x282>
    5798:	45b0      	cmp	r8, r6
    579a:	d93c      	bls.n	5816 <__udivdi3+0x282>
    579c:	f1ac 0c02 	sub.w	ip, ip, #2
    57a0:	1936      	adds	r6, r6, r4
    57a2:	ebc8 0206 	rsb	r2, r8, r6
    57a6:	fbb2 f0f3 	udiv	r0, r2, r3
    57aa:	fb03 2610 	mls	r6, r3, r0, r2
    57ae:	fb07 f800 	mul.w	r8, r7, r0
    57b2:	b289      	uxth	r1, r1
    57b4:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
    57b8:	4590      	cmp	r8, r2
    57ba:	d906      	bls.n	57ca <__udivdi3+0x236>
    57bc:	1e46      	subs	r6, r0, #1
    57be:	1912      	adds	r2, r2, r4
    57c0:	d227      	bcs.n	5812 <__udivdi3+0x27e>
    57c2:	4590      	cmp	r8, r2
    57c4:	d925      	bls.n	5812 <__udivdi3+0x27e>
    57c6:	3802      	subs	r0, #2
    57c8:	1912      	adds	r2, r2, r4
    57ca:	ebc8 0202 	rsb	r2, r8, r2
    57ce:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    57d2:	e73f      	b.n	5654 <__udivdi3+0xc0>
    57d4:	4638      	mov	r0, r7
    57d6:	e708      	b.n	55ea <__udivdi3+0x56>
    57d8:	4633      	mov	r3, r6
    57da:	e71a      	b.n	5612 <__udivdi3+0x7e>
    57dc:	4610      	mov	r0, r2
    57de:	e761      	b.n	56a4 <__udivdi3+0x110>
    57e0:	fa00 f004 	lsl.w	r0, r0, r4
    57e4:	fa1f fc8c 	uxth.w	ip, ip
    57e8:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    57ec:	4298      	cmp	r0, r3
    57ee:	d2b3      	bcs.n	5758 <__udivdi3+0x1c4>
    57f0:	1e70      	subs	r0, r6, #1
    57f2:	2100      	movs	r1, #0
    57f4:	e710      	b.n	5618 <__udivdi3+0x84>
    57f6:	4621      	mov	r1, r4
    57f8:	4620      	mov	r0, r4
    57fa:	e70d      	b.n	5618 <__udivdi3+0x84>
    57fc:	45a9      	cmp	r9, r5
    57fe:	f67f af7c 	bls.w	56fa <__udivdi3+0x166>
    5802:	3f02      	subs	r7, #2
    5804:	18ed      	adds	r5, r5, r3
    5806:	e779      	b.n	56fc <__udivdi3+0x168>
    5808:	4588      	cmp	r8, r1
    580a:	d988      	bls.n	571e <__udivdi3+0x18a>
    580c:	3e02      	subs	r6, #2
    580e:	18c9      	adds	r1, r1, r3
    5810:	e786      	b.n	5720 <__udivdi3+0x18c>
    5812:	4630      	mov	r0, r6
    5814:	e7d9      	b.n	57ca <__udivdi3+0x236>
    5816:	4684      	mov	ip, r0
    5818:	e7c3      	b.n	57a2 <__udivdi3+0x20e>
    581a:	3e02      	subs	r6, #2
    581c:	1912      	adds	r2, r2, r4
    581e:	e72d      	b.n	567c <__udivdi3+0xe8>

00005820 <memcpy>:
    5820:	2a0f      	cmp	r2, #15
    5822:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    5826:	f240 80a1 	bls.w	596c <memcpy+0x14c>
    582a:	ea41 0300 	orr.w	r3, r1, r0
    582e:	079b      	lsls	r3, r3, #30
    5830:	f040 809e 	bne.w	5970 <memcpy+0x150>
    5834:	680c      	ldr	r4, [r1, #0]
    5836:	f1a2 0510 	sub.w	r5, r2, #16
    583a:	6004      	str	r4, [r0, #0]
    583c:	684b      	ldr	r3, [r1, #4]
    583e:	46ac      	mov	ip, r5
    5840:	6043      	str	r3, [r0, #4]
    5842:	688c      	ldr	r4, [r1, #8]
    5844:	f1bc 0f0f 	cmp.w	ip, #15
    5848:	6084      	str	r4, [r0, #8]
    584a:	68cc      	ldr	r4, [r1, #12]
    584c:	f3c5 1500 	ubfx	r5, r5, #4, #1
    5850:	60c4      	str	r4, [r0, #12]
    5852:	f100 0310 	add.w	r3, r0, #16
    5856:	f101 0410 	add.w	r4, r1, #16
    585a:	d92b      	bls.n	58b4 <memcpy+0x94>
    585c:	b175      	cbz	r5, 587c <memcpy+0x5c>
    585e:	6825      	ldr	r5, [r4, #0]
    5860:	f1ac 0c10 	sub.w	ip, ip, #16
    5864:	601d      	str	r5, [r3, #0]
    5866:	6865      	ldr	r5, [r4, #4]
    5868:	605d      	str	r5, [r3, #4]
    586a:	68a5      	ldr	r5, [r4, #8]
    586c:	609d      	str	r5, [r3, #8]
    586e:	68e5      	ldr	r5, [r4, #12]
    5870:	3410      	adds	r4, #16
    5872:	60dd      	str	r5, [r3, #12]
    5874:	3310      	adds	r3, #16
    5876:	f1bc 0f0f 	cmp.w	ip, #15
    587a:	d91b      	bls.n	58b4 <memcpy+0x94>
    587c:	6827      	ldr	r7, [r4, #0]
    587e:	f104 0610 	add.w	r6, r4, #16
    5882:	601f      	str	r7, [r3, #0]
    5884:	6867      	ldr	r7, [r4, #4]
    5886:	f103 0510 	add.w	r5, r3, #16
    588a:	605f      	str	r7, [r3, #4]
    588c:	68a7      	ldr	r7, [r4, #8]
    588e:	f1ac 0c20 	sub.w	ip, ip, #32
    5892:	609f      	str	r7, [r3, #8]
    5894:	68e7      	ldr	r7, [r4, #12]
    5896:	60df      	str	r7, [r3, #12]
    5898:	6924      	ldr	r4, [r4, #16]
    589a:	611c      	str	r4, [r3, #16]
    589c:	6877      	ldr	r7, [r6, #4]
    589e:	f106 0410 	add.w	r4, r6, #16
    58a2:	606f      	str	r7, [r5, #4]
    58a4:	68b7      	ldr	r7, [r6, #8]
    58a6:	3320      	adds	r3, #32
    58a8:	60af      	str	r7, [r5, #8]
    58aa:	68f6      	ldr	r6, [r6, #12]
    58ac:	f1bc 0f0f 	cmp.w	ip, #15
    58b0:	60ee      	str	r6, [r5, #12]
    58b2:	d8e3      	bhi.n	587c <memcpy+0x5c>
    58b4:	f1a2 0810 	sub.w	r8, r2, #16
    58b8:	f028 030f 	bic.w	r3, r8, #15
    58bc:	f002 040f 	and.w	r4, r2, #15
    58c0:	f103 0c10 	add.w	ip, r3, #16
    58c4:	2c03      	cmp	r4, #3
    58c6:	eb00 030c 	add.w	r3, r0, ip
    58ca:	eb01 080c 	add.w	r8, r1, ip
    58ce:	d951      	bls.n	5974 <memcpy+0x154>
    58d0:	1f21      	subs	r1, r4, #4
    58d2:	ea4f 0991 	mov.w	r9, r1, lsr #2
    58d6:	4644      	mov	r4, r8
    58d8:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
    58dc:	f854 6b04 	ldr.w	r6, [r4], #4
    58e0:	ebc8 010c 	rsb	r1, r8, ip
    58e4:	f10c 0c04 	add.w	ip, ip, #4
    58e8:	461d      	mov	r5, r3
    58ea:	4564      	cmp	r4, ip
    58ec:	f845 6b04 	str.w	r6, [r5], #4
    58f0:	f3c1 0180 	ubfx	r1, r1, #2, #1
    58f4:	d012      	beq.n	591c <memcpy+0xfc>
    58f6:	b129      	cbz	r1, 5904 <memcpy+0xe4>
    58f8:	f854 1b04 	ldr.w	r1, [r4], #4
    58fc:	4564      	cmp	r4, ip
    58fe:	f845 1b04 	str.w	r1, [r5], #4
    5902:	d00b      	beq.n	591c <memcpy+0xfc>
    5904:	4627      	mov	r7, r4
    5906:	f857 1b04 	ldr.w	r1, [r7], #4
    590a:	462e      	mov	r6, r5
    590c:	f846 1b04 	str.w	r1, [r6], #4
    5910:	6864      	ldr	r4, [r4, #4]
    5912:	606c      	str	r4, [r5, #4]
    5914:	1d3c      	adds	r4, r7, #4
    5916:	1d35      	adds	r5, r6, #4
    5918:	4564      	cmp	r4, ip
    591a:	d1f3      	bne.n	5904 <memcpy+0xe4>
    591c:	f109 0c01 	add.w	ip, r9, #1
    5920:	ea4f 098c 	mov.w	r9, ip, lsl #2
    5924:	f002 0203 	and.w	r2, r2, #3
    5928:	eb08 0109 	add.w	r1, r8, r9
    592c:	444b      	add	r3, r9
    592e:	b1d2      	cbz	r2, 5966 <memcpy+0x146>
    5930:	780d      	ldrb	r5, [r1, #0]
    5932:	189a      	adds	r2, r3, r2
    5934:	43dc      	mvns	r4, r3
    5936:	f803 5b01 	strb.w	r5, [r3], #1
    593a:	1914      	adds	r4, r2, r4
    593c:	4293      	cmp	r3, r2
    593e:	f004 0401 	and.w	r4, r4, #1
    5942:	d010      	beq.n	5966 <memcpy+0x146>
    5944:	b12c      	cbz	r4, 5952 <memcpy+0x132>
    5946:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    594a:	f803 4b01 	strb.w	r4, [r3], #1
    594e:	4293      	cmp	r3, r2
    5950:	d009      	beq.n	5966 <memcpy+0x146>
    5952:	784d      	ldrb	r5, [r1, #1]
    5954:	461c      	mov	r4, r3
    5956:	f804 5b01 	strb.w	r5, [r4], #1
    595a:	788d      	ldrb	r5, [r1, #2]
    595c:	3102      	adds	r1, #2
    595e:	705d      	strb	r5, [r3, #1]
    5960:	1c63      	adds	r3, r4, #1
    5962:	4293      	cmp	r3, r2
    5964:	d1f5      	bne.n	5952 <memcpy+0x132>
    5966:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    596a:	4770      	bx	lr
    596c:	4603      	mov	r3, r0
    596e:	e7de      	b.n	592e <memcpy+0x10e>
    5970:	4603      	mov	r3, r0
    5972:	e7dd      	b.n	5930 <memcpy+0x110>
    5974:	4641      	mov	r1, r8
    5976:	4622      	mov	r2, r4
    5978:	e7d9      	b.n	592e <memcpy+0x10e>
    597a:	bf00      	nop

0000597c <memset>:
    597c:	b4f0      	push	{r4, r5, r6, r7}
    597e:	0784      	lsls	r4, r0, #30
    5980:	4603      	mov	r3, r0
    5982:	f000 808d 	beq.w	5aa0 <memset+0x124>
    5986:	1e54      	subs	r4, r2, #1
    5988:	2a00      	cmp	r2, #0
    598a:	f000 8087 	beq.w	5a9c <memset+0x120>
    598e:	07e5      	lsls	r5, r4, #31
    5990:	b2ce      	uxtb	r6, r1
    5992:	d411      	bmi.n	59b8 <memset+0x3c>
    5994:	461a      	mov	r2, r3
    5996:	f802 6b01 	strb.w	r6, [r2], #1
    599a:	4613      	mov	r3, r2
    599c:	4615      	mov	r5, r2
    599e:	0792      	lsls	r2, r2, #30
    59a0:	d010      	beq.n	59c4 <memset+0x48>
    59a2:	1e62      	subs	r2, r4, #1
    59a4:	2c00      	cmp	r4, #0
    59a6:	d079      	beq.n	5a9c <memset+0x120>
    59a8:	f803 6b01 	strb.w	r6, [r3], #1
    59ac:	4614      	mov	r4, r2
    59ae:	079a      	lsls	r2, r3, #30
    59b0:	461d      	mov	r5, r3
    59b2:	d007      	beq.n	59c4 <memset+0x48>
    59b4:	3c01      	subs	r4, #1
    59b6:	e7ed      	b.n	5994 <memset+0x18>
    59b8:	4603      	mov	r3, r0
    59ba:	f803 6b01 	strb.w	r6, [r3], #1
    59be:	079a      	lsls	r2, r3, #30
    59c0:	461d      	mov	r5, r3
    59c2:	d1f7      	bne.n	59b4 <memset+0x38>
    59c4:	2c03      	cmp	r4, #3
    59c6:	d952      	bls.n	5a6e <memset+0xf2>
    59c8:	b2ce      	uxtb	r6, r1
    59ca:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
    59ce:	2c0f      	cmp	r4, #15
    59d0:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
    59d4:	d92d      	bls.n	5a32 <memset+0xb6>
    59d6:	f1a4 0210 	sub.w	r2, r4, #16
    59da:	4617      	mov	r7, r2
    59dc:	2f0f      	cmp	r7, #15
    59de:	f3c2 1600 	ubfx	r6, r2, #4, #1
    59e2:	602b      	str	r3, [r5, #0]
    59e4:	606b      	str	r3, [r5, #4]
    59e6:	60ab      	str	r3, [r5, #8]
    59e8:	60eb      	str	r3, [r5, #12]
    59ea:	f105 0210 	add.w	r2, r5, #16
    59ee:	d916      	bls.n	5a1e <memset+0xa2>
    59f0:	b13e      	cbz	r6, 5a02 <memset+0x86>
    59f2:	3f10      	subs	r7, #16
    59f4:	6013      	str	r3, [r2, #0]
    59f6:	6053      	str	r3, [r2, #4]
    59f8:	6093      	str	r3, [r2, #8]
    59fa:	60d3      	str	r3, [r2, #12]
    59fc:	3210      	adds	r2, #16
    59fe:	2f0f      	cmp	r7, #15
    5a00:	d90d      	bls.n	5a1e <memset+0xa2>
    5a02:	3f20      	subs	r7, #32
    5a04:	f102 0610 	add.w	r6, r2, #16
    5a08:	6013      	str	r3, [r2, #0]
    5a0a:	6053      	str	r3, [r2, #4]
    5a0c:	6093      	str	r3, [r2, #8]
    5a0e:	60d3      	str	r3, [r2, #12]
    5a10:	6113      	str	r3, [r2, #16]
    5a12:	6153      	str	r3, [r2, #20]
    5a14:	6193      	str	r3, [r2, #24]
    5a16:	61d3      	str	r3, [r2, #28]
    5a18:	3220      	adds	r2, #32
    5a1a:	2f0f      	cmp	r7, #15
    5a1c:	d8f1      	bhi.n	5a02 <memset+0x86>
    5a1e:	f1a4 0210 	sub.w	r2, r4, #16
    5a22:	f022 020f 	bic.w	r2, r2, #15
    5a26:	f004 040f 	and.w	r4, r4, #15
    5a2a:	3210      	adds	r2, #16
    5a2c:	2c03      	cmp	r4, #3
    5a2e:	4415      	add	r5, r2
    5a30:	d91d      	bls.n	5a6e <memset+0xf2>
    5a32:	1f27      	subs	r7, r4, #4
    5a34:	463e      	mov	r6, r7
    5a36:	462a      	mov	r2, r5
    5a38:	2e03      	cmp	r6, #3
    5a3a:	f842 3b04 	str.w	r3, [r2], #4
    5a3e:	f3c7 0780 	ubfx	r7, r7, #2, #1
    5a42:	d90d      	bls.n	5a60 <memset+0xe4>
    5a44:	b127      	cbz	r7, 5a50 <memset+0xd4>
    5a46:	3e04      	subs	r6, #4
    5a48:	2e03      	cmp	r6, #3
    5a4a:	f842 3b04 	str.w	r3, [r2], #4
    5a4e:	d907      	bls.n	5a60 <memset+0xe4>
    5a50:	4617      	mov	r7, r2
    5a52:	f847 3b04 	str.w	r3, [r7], #4
    5a56:	3e08      	subs	r6, #8
    5a58:	6053      	str	r3, [r2, #4]
    5a5a:	1d3a      	adds	r2, r7, #4
    5a5c:	2e03      	cmp	r6, #3
    5a5e:	d8f7      	bhi.n	5a50 <memset+0xd4>
    5a60:	1f23      	subs	r3, r4, #4
    5a62:	f023 0203 	bic.w	r2, r3, #3
    5a66:	1d13      	adds	r3, r2, #4
    5a68:	f004 0403 	and.w	r4, r4, #3
    5a6c:	18ed      	adds	r5, r5, r3
    5a6e:	b1ac      	cbz	r4, 5a9c <memset+0x120>
    5a70:	b2c9      	uxtb	r1, r1
    5a72:	43ea      	mvns	r2, r5
    5a74:	192c      	adds	r4, r5, r4
    5a76:	f805 1b01 	strb.w	r1, [r5], #1
    5a7a:	18a3      	adds	r3, r4, r2
    5a7c:	42a5      	cmp	r5, r4
    5a7e:	f003 0201 	and.w	r2, r3, #1
    5a82:	d00b      	beq.n	5a9c <memset+0x120>
    5a84:	b11a      	cbz	r2, 5a8e <memset+0x112>
    5a86:	f805 1b01 	strb.w	r1, [r5], #1
    5a8a:	42a5      	cmp	r5, r4
    5a8c:	d006      	beq.n	5a9c <memset+0x120>
    5a8e:	462b      	mov	r3, r5
    5a90:	f803 1b01 	strb.w	r1, [r3], #1
    5a94:	7069      	strb	r1, [r5, #1]
    5a96:	1c5d      	adds	r5, r3, #1
    5a98:	42a5      	cmp	r5, r4
    5a9a:	d1f8      	bne.n	5a8e <memset+0x112>
    5a9c:	bcf0      	pop	{r4, r5, r6, r7}
    5a9e:	4770      	bx	lr
    5aa0:	4605      	mov	r5, r0
    5aa2:	4614      	mov	r4, r2
    5aa4:	e78e      	b.n	59c4 <memset+0x48>
    5aa6:	bf00      	nop
