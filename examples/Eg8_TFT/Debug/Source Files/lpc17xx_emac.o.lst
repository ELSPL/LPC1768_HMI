   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"lpc17xx_emac.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	1
  19              		.thumb
  20              		.thumb_func
  22              	read_PHY:
  23              	.LFB60:
  24              		.file 1 "../Source Files/lpc17xx_emac.c"
   1:../Source Files/lpc17xx_emac.c **** /**********************************************************************
   2:../Source Files/lpc17xx_emac.c **** * $Id$		lpc17xx_emac.c
   3:../Source Files/lpc17xx_emac.c **** *//**
   4:../Source Files/lpc17xx_emac.c **** * @file		lpc17xx_emac.c
   5:../Source Files/lpc17xx_emac.c **** * @brief	Contains all functions support for EMAC firmware library on LPC17xx
   6:../Source Files/lpc17xx_emac.c **** * @version	1.0
   7:../Source Files/lpc17xx_emac.c **** * @date		21. Jan. 2014
   8:../Source Files/lpc17xx_emac.c **** * @author	Dwijay.Edutech Learning Solutions
   9:../Source Files/lpc17xx_emac.c **** ***********************************************************************
  10:../Source Files/lpc17xx_emac.c **** * Software that is described herein is for illustrative purposes only
  11:../Source Files/lpc17xx_emac.c **** * which provides customers with programming information regarding the
  12:../Source Files/lpc17xx_emac.c **** * products. This software is supplied "AS IS" without any warranties.
  13:../Source Files/lpc17xx_emac.c **** * NXP Semiconductors assumes no responsibility or liability for the
  14:../Source Files/lpc17xx_emac.c **** * use of the software, conveys no license or title under any patent,
  15:../Source Files/lpc17xx_emac.c **** * copyright, or mask work right to the product. NXP Semiconductors
  16:../Source Files/lpc17xx_emac.c **** * reserves the right to make changes in the software without
  17:../Source Files/lpc17xx_emac.c **** * notification. NXP Semiconductors also make no representation or
  18:../Source Files/lpc17xx_emac.c **** * warranty that such application will be suitable for the specified
  19:../Source Files/lpc17xx_emac.c **** * use without further testing or modification.
  20:../Source Files/lpc17xx_emac.c **** **********************************************************************/
  21:../Source Files/lpc17xx_emac.c **** 
  22:../Source Files/lpc17xx_emac.c **** /* Peripheral group ----------------------------------------------------------- */
  23:../Source Files/lpc17xx_emac.c **** /** @addtogroup EMAC
  24:../Source Files/lpc17xx_emac.c ****  * @{
  25:../Source Files/lpc17xx_emac.c ****  */
  26:../Source Files/lpc17xx_emac.c **** 
  27:../Source Files/lpc17xx_emac.c **** /* Includes ------------------------------------------------------------------- */
  28:../Source Files/lpc17xx_emac.c **** #include "lpc17xx_emac.h"
  29:../Source Files/lpc17xx_emac.c **** 
  30:../Source Files/lpc17xx_emac.c **** /* If this source file built with example, the LPC17xx FW library configuration
  31:../Source Files/lpc17xx_emac.c ****  * file in each example directory ("lpc17xx_libcfg.h") must be included,
  32:../Source Files/lpc17xx_emac.c ****  * otherwise the default FW library configuration file must be included instead
  33:../Source Files/lpc17xx_emac.c ****  */
  34:../Source Files/lpc17xx_emac.c **** /* This is the MAC address of LPC1768 */
  35:../Source Files/lpc17xx_emac.c **** #define EMAC_ADDR12		0x0000101F
  36:../Source Files/lpc17xx_emac.c **** #define EMAC_ADDR34		0x0000E012
  37:../Source Files/lpc17xx_emac.c **** #define EMAC_ADDR56		0x00001D0C
  38:../Source Files/lpc17xx_emac.c **** /* A pseudo destination MAC address is defined for
  39:../Source Files/lpc17xx_emac.c ****  * both TX_ONLY and BOUNCE_RX test */
  40:../Source Files/lpc17xx_emac.c **** #define EMAC_DST_ADDR12		0x0000E386
  41:../Source Files/lpc17xx_emac.c **** #define EMAC_DST_ADDR34		0x00006BDA
  42:../Source Files/lpc17xx_emac.c **** #define EMAC_DST_ADDR56		0x00005000
  43:../Source Files/lpc17xx_emac.c **** 
  44:../Source Files/lpc17xx_emac.c **** 
  45:../Source Files/lpc17xx_emac.c **** 
  46:../Source Files/lpc17xx_emac.c **** /* Private Variables ---------------------------------------------------------- */
  47:../Source Files/lpc17xx_emac.c **** /** @defgroup EMAC_Private_Variables EMAC Private Variables
  48:../Source Files/lpc17xx_emac.c ****  * @{
  49:../Source Files/lpc17xx_emac.c ****  */
  50:../Source Files/lpc17xx_emac.c **** 
  51:../Source Files/lpc17xx_emac.c **** static unsigned short *rptr;
  52:../Source Files/lpc17xx_emac.c **** static unsigned short *tptr;
  53:../Source Files/lpc17xx_emac.c **** 
  54:../Source Files/lpc17xx_emac.c **** /*
  55:../Source Files/lpc17xx_emac.c ****  * NXP: Here AHBRAM1 section still not be used, so a mount of this section
  56:../Source Files/lpc17xx_emac.c ****  * will be used to store buffer data get from receive packet buffer of EMAC
  57:../Source Files/lpc17xx_emac.c ****  */
  58:../Source Files/lpc17xx_emac.c **** static unsigned short *pgBuf = (unsigned short *)LPC_AHBRAM1_BASE;
  59:../Source Files/lpc17xx_emac.c **** 
  60:../Source Files/lpc17xx_emac.c **** 
  61:../Source Files/lpc17xx_emac.c **** /* MII Mgmt Configuration register - Clock divider setting */
  62:../Source Files/lpc17xx_emac.c **** const uint8_t EMAC_clkdiv[] = { 4, 6, 8, 10, 14, 20, 28 };
  63:../Source Files/lpc17xx_emac.c **** 
  64:../Source Files/lpc17xx_emac.c **** /* EMAC local DMA Descriptors */
  65:../Source Files/lpc17xx_emac.c **** 
  66:../Source Files/lpc17xx_emac.c **** /** Rx Descriptor data array */
  67:../Source Files/lpc17xx_emac.c **** static RX_Desc Rx_Desc[EMAC_NUM_RX_FRAG];
  68:../Source Files/lpc17xx_emac.c **** 
  69:../Source Files/lpc17xx_emac.c **** /** Rx Status data array - Must be 8-Byte aligned */
  70:../Source Files/lpc17xx_emac.c **** #if defined ( __CC_ARM   )
  71:../Source Files/lpc17xx_emac.c **** static __align(8) RX_Stat Rx_Stat[EMAC_NUM_RX_FRAG];
  72:../Source Files/lpc17xx_emac.c **** #elif defined ( __ICCARM__ )
  73:../Source Files/lpc17xx_emac.c **** #pragma data_alignment=8
  74:../Source Files/lpc17xx_emac.c **** static RX_Stat Rx_Stat[EMAC_NUM_RX_FRAG];
  75:../Source Files/lpc17xx_emac.c **** #elif defined   (  __GNUC__  )
  76:../Source Files/lpc17xx_emac.c **** static __attribute__ ((aligned (8))) RX_Stat Rx_Stat[EMAC_NUM_RX_FRAG];
  77:../Source Files/lpc17xx_emac.c **** #endif
  78:../Source Files/lpc17xx_emac.c **** 
  79:../Source Files/lpc17xx_emac.c **** /** Tx Descriptor data array */
  80:../Source Files/lpc17xx_emac.c **** static TX_Desc Tx_Desc[EMAC_NUM_TX_FRAG];
  81:../Source Files/lpc17xx_emac.c **** /** Tx Status data array */
  82:../Source Files/lpc17xx_emac.c **** static TX_Stat Tx_Stat[EMAC_NUM_TX_FRAG];
  83:../Source Files/lpc17xx_emac.c **** 
  84:../Source Files/lpc17xx_emac.c **** /* EMAC local DMA buffers */
  85:../Source Files/lpc17xx_emac.c **** /** Rx buffer data */
  86:../Source Files/lpc17xx_emac.c **** static uint32_t rx_buf[EMAC_NUM_RX_FRAG][EMAC_ETH_MAX_FLEN>>2];
  87:../Source Files/lpc17xx_emac.c **** /** Tx buffer data */
  88:../Source Files/lpc17xx_emac.c **** static uint32_t tx_buf[EMAC_NUM_TX_FRAG][EMAC_ETH_MAX_FLEN>>2];
  89:../Source Files/lpc17xx_emac.c **** 
  90:../Source Files/lpc17xx_emac.c **** /**
  91:../Source Files/lpc17xx_emac.c ****  * @}
  92:../Source Files/lpc17xx_emac.c ****  */
  93:../Source Files/lpc17xx_emac.c **** 
  94:../Source Files/lpc17xx_emac.c **** /* Private Functions ---------------------------------------------------------- */
  95:../Source Files/lpc17xx_emac.c **** static void rx_descr_init (void);
  96:../Source Files/lpc17xx_emac.c **** static void tx_descr_init (void);
  97:../Source Files/lpc17xx_emac.c **** static int32_t write_PHY (uint32_t PhyReg, uint16_t Value);
  98:../Source Files/lpc17xx_emac.c **** static int32_t  read_PHY (uint32_t PhyReg);
  99:../Source Files/lpc17xx_emac.c **** 
 100:../Source Files/lpc17xx_emac.c **** static void setEmacAddr(uint8_t abStationAddr[]);
 101:../Source Files/lpc17xx_emac.c **** static int32_t emac_CRCCalc(uint8_t frame_no_fcs[], int32_t frame_len);
 102:../Source Files/lpc17xx_emac.c **** 
 103:../Source Files/lpc17xx_emac.c **** 
 104:../Source Files/lpc17xx_emac.c **** /*----------------- INTERRUPT SERVICE ROUTINES --------------------------*/
 105:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 106:../Source Files/lpc17xx_emac.c ****  * @brief		Ethernet service routine handler
 107:../Source Files/lpc17xx_emac.c ****  * @param[in]	none
 108:../Source Files/lpc17xx_emac.c ****  * @return 		none
 109:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 110:../Source Files/lpc17xx_emac.c **** void ENET_IRQHandler (void)
 111:../Source Files/lpc17xx_emac.c **** {
 112:../Source Files/lpc17xx_emac.c **** 	EMAC_PACKETBUF_Type RxDatbuf;
 113:../Source Files/lpc17xx_emac.c **** 	uint32_t RxLen;
 114:../Source Files/lpc17xx_emac.c **** 
 115:../Source Files/lpc17xx_emac.c **** 	/* EMAC Ethernet Controller Interrupt function. */
 116:../Source Files/lpc17xx_emac.c **** 	uint32_t int_stat;
 117:../Source Files/lpc17xx_emac.c **** 	// Get EMAC interrupt status
 118:../Source Files/lpc17xx_emac.c **** 	while ((int_stat = (LPC_EMAC->IntStatus & LPC_EMAC->IntEnable)) != 0) {
 119:../Source Files/lpc17xx_emac.c **** 		// Clear interrupt status
 120:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->IntClear = int_stat;
 121:../Source Files/lpc17xx_emac.c **** 		/* scan interrupt status source */
 122:../Source Files/lpc17xx_emac.c **** 
 123:../Source Files/lpc17xx_emac.c **** 		/* ---------- receive overrun ------------*/
 124:../Source Files/lpc17xx_emac.c **** 		if((int_stat & EMAC_INT_RX_OVERRUN))
 125:../Source Files/lpc17xx_emac.c **** 		{
 126:../Source Files/lpc17xx_emac.c **** 			RXOverrunCount++;
 127:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Rx overrun\n\r");
 128:../Source Files/lpc17xx_emac.c **** 		}
 129:../Source Files/lpc17xx_emac.c **** 
 130:../Source Files/lpc17xx_emac.c **** 		/*-----------  receive error -------------*/
 131:../Source Files/lpc17xx_emac.c **** 		/* Note:
 132:../Source Files/lpc17xx_emac.c **** 		 * The EMAC doesn't distinguish the frame type and frame length,
 133:../Source Files/lpc17xx_emac.c **** 		 * so, e.g. when the IP(0x8000) or ARP(0x0806) packets are received,
 134:../Source Files/lpc17xx_emac.c **** 		 * it compares the frame type with the max length and gives the
 135:../Source Files/lpc17xx_emac.c **** 		 * "Range" error. In fact, this bit is not an error indication,
 136:../Source Files/lpc17xx_emac.c **** 		 * but simply a statement by the chip regarding the status of
 137:../Source Files/lpc17xx_emac.c **** 		 * the received frame
 138:../Source Files/lpc17xx_emac.c **** 		 */
 139:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_RX_ERR))
 140:../Source Files/lpc17xx_emac.c **** 		{
 141:../Source Files/lpc17xx_emac.c **** 			if (EMAC_CheckReceiveDataStatus(EMAC_RINFO_RANGE_ERR) == RESET){
 142:../Source Files/lpc17xx_emac.c **** 				RXErrorCount++;
 143:../Source Files/lpc17xx_emac.c **** 				printf(LPC_UART0,"Rx error: \n\r");
 144:../Source Files/lpc17xx_emac.c **** 			}
 145:../Source Files/lpc17xx_emac.c **** 		}
 146:../Source Files/lpc17xx_emac.c **** 
 147:../Source Files/lpc17xx_emac.c **** 		/* ---------- RX Finished Process Descriptors ----------*/
 148:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_RX_FIN))
 149:../Source Files/lpc17xx_emac.c **** 		{
 150:../Source Files/lpc17xx_emac.c **** 			RxFinishedCount++;
 151:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Rx finish\n\r");
 152:../Source Files/lpc17xx_emac.c **** 		}
 153:../Source Files/lpc17xx_emac.c **** 
 154:../Source Files/lpc17xx_emac.c **** 		/* ---------- Receive Done -----------------------------*/
 155:../Source Files/lpc17xx_emac.c **** 		/* Note: All packets are greater than (TX_PACKET_SIZE + 4)
 156:../Source Files/lpc17xx_emac.c **** 		 * will be ignore!
 157:../Source Files/lpc17xx_emac.c **** 		 */
 158:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_RX_DONE))
 159:../Source Files/lpc17xx_emac.c **** 		{
 160:../Source Files/lpc17xx_emac.c **** 			/* Packet received, check if packet is valid. */
 161:../Source Files/lpc17xx_emac.c **** 			if (EMAC_CheckReceiveIndex()){
 162:../Source Files/lpc17xx_emac.c **** 				if (!EMAC_CheckReceiveDataStatus(EMAC_RINFO_LAST_FLAG)){
 163:../Source Files/lpc17xx_emac.c **** 					goto rel;
 164:../Source Files/lpc17xx_emac.c **** 				}
 165:../Source Files/lpc17xx_emac.c **** 				// Get data size, trip out 4-bytes CRC field, note that length in (-1) style format
 166:../Source Files/lpc17xx_emac.c **** 				RxLen = EMAC_GetReceiveDataSize() - 3;
 167:../Source Files/lpc17xx_emac.c **** 				// Note that packet added 4-bytes CRC created by yourself
 168:../Source Files/lpc17xx_emac.c **** 				if ((RxLen > (TX_PACKET_SIZE + 4)) || (EMAC_CheckReceiveDataStatus(EMAC_RINFO_ERR_MASK))) {
 169:../Source Files/lpc17xx_emac.c **** 					/* Invalid frame, ignore it and free buffer */
 170:../Source Files/lpc17xx_emac.c **** 					goto rel;
 171:../Source Files/lpc17xx_emac.c **** 				}
 172:../Source Files/lpc17xx_emac.c **** 				ReceiveLength = RxLen;
 173:../Source Files/lpc17xx_emac.c **** 				// Valid Frame, just copy it
 174:../Source Files/lpc17xx_emac.c **** 				RxDatbuf.pbDataBuf = (uint32_t *)gRxBuf;
 175:../Source Files/lpc17xx_emac.c **** 				RxDatbuf.ulDataLen = RxLen;
 176:../Source Files/lpc17xx_emac.c **** 				EMAC_ReadPacketBuffer(&RxDatbuf);
 177:../Source Files/lpc17xx_emac.c **** 				PacketReceived = TRUE;
 178:../Source Files/lpc17xx_emac.c **** 
 179:../Source Files/lpc17xx_emac.c **** 		rel:
 180:../Source Files/lpc17xx_emac.c **** 				/* Release frame from EMAC buffer */
 181:../Source Files/lpc17xx_emac.c **** 				EMAC_UpdateRxConsumeIndex();
 182:../Source Files/lpc17xx_emac.c **** 			}
 183:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Rx done\n\r");
 184:../Source Files/lpc17xx_emac.c **** 			RxDoneCount++;
 185:../Source Files/lpc17xx_emac.c **** 		}
 186:../Source Files/lpc17xx_emac.c **** 
 187:../Source Files/lpc17xx_emac.c **** 		/*------------------- Transmit Underrun -----------------------*/
 188:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_TX_UNDERRUN))
 189:../Source Files/lpc17xx_emac.c **** 		{
 190:../Source Files/lpc17xx_emac.c **** 			TXUnderrunCount++;
 191:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx under-run\n\r");
 192:../Source Files/lpc17xx_emac.c **** 		}
 193:../Source Files/lpc17xx_emac.c **** 
 194:../Source Files/lpc17xx_emac.c **** 		/*------------------- Transmit Error --------------------------*/
 195:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_TX_ERR))
 196:../Source Files/lpc17xx_emac.c **** 		{
 197:../Source Files/lpc17xx_emac.c **** 			TXErrorCount++;
 198:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx error\n\r");
 199:../Source Files/lpc17xx_emac.c **** 		}
 200:../Source Files/lpc17xx_emac.c **** 
 201:../Source Files/lpc17xx_emac.c **** 		/* ----------------- TX Finished Process Descriptors ----------*/
 202:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_TX_FIN))
 203:../Source Files/lpc17xx_emac.c **** 		{
 204:../Source Files/lpc17xx_emac.c **** 			TxFinishedCount++;
 205:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx finish\n\r");
 206:../Source Files/lpc17xx_emac.c **** 		}
 207:../Source Files/lpc17xx_emac.c **** 
 208:../Source Files/lpc17xx_emac.c **** 		/* ----------------- Transmit Done ----------------------------*/
 209:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_TX_DONE))
 210:../Source Files/lpc17xx_emac.c **** 		{
 211:../Source Files/lpc17xx_emac.c **** 			TxDoneCount++;
 212:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx done\n\r");
 213:../Source Files/lpc17xx_emac.c **** 		}
 214:../Source Files/lpc17xx_emac.c **** 	}
 215:../Source Files/lpc17xx_emac.c **** }
 216:../Source Files/lpc17xx_emac.c **** 
 217:../Source Files/lpc17xx_emac.c **** 
 218:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 219:../Source Files/lpc17xx_emac.c ****  * @brief		Create a perfect packet for TX
 220:../Source Files/lpc17xx_emac.c ****  * @param[in]	pointer to TX packet
 221:../Source Files/lpc17xx_emac.c ****  * @return 		none
 222:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 223:../Source Files/lpc17xx_emac.c **** void PacketGen(uint8_t *txptr)
 224:../Source Files/lpc17xx_emac.c **** {
 225:../Source Files/lpc17xx_emac.c **** 	int i;
 226:../Source Files/lpc17xx_emac.c **** 	uint32_t crcValue;
 227:../Source Files/lpc17xx_emac.c **** 	uint32_t BodyLength = TX_PACKET_SIZE - 14;
 228:../Source Files/lpc17xx_emac.c **** 
 229:../Source Files/lpc17xx_emac.c **** 	// Dest address
 230:../Source Files/lpc17xx_emac.c **** 	*(txptr+0) = EMAC_DST_ADDR56 & 0xFF;
 231:../Source Files/lpc17xx_emac.c **** 	*(txptr+1) = (EMAC_DST_ADDR56 >> 0x08) & 0xFF;
 232:../Source Files/lpc17xx_emac.c **** 	*(txptr+2) = EMAC_DST_ADDR34 & 0xFF;
 233:../Source Files/lpc17xx_emac.c **** 	*(txptr+3) = (EMAC_DST_ADDR34 >> 0x08) & 0xFF;
 234:../Source Files/lpc17xx_emac.c **** 	*(txptr+4) = EMAC_DST_ADDR12 & 0xFF;
 235:../Source Files/lpc17xx_emac.c **** 	*(txptr+5) = (EMAC_DST_ADDR12 >> 0x08) & 0xFF;
 236:../Source Files/lpc17xx_emac.c **** 
 237:../Source Files/lpc17xx_emac.c **** 	// Src address
 238:../Source Files/lpc17xx_emac.c **** 	*(txptr+6) = EMAC_ADDR56 & 0xFF;
 239:../Source Files/lpc17xx_emac.c **** 	*(txptr+7) = (EMAC_ADDR56 >> 0x08) & 0xFF;
 240:../Source Files/lpc17xx_emac.c **** 	*(txptr+8) = EMAC_ADDR34 & 0xFF;
 241:../Source Files/lpc17xx_emac.c **** 	*(txptr+9) = (EMAC_ADDR34 >> 0x08) & 0xFF;
 242:../Source Files/lpc17xx_emac.c **** 	*(txptr+10) = EMAC_ADDR12 & 0xFF;
 243:../Source Files/lpc17xx_emac.c **** 	*(txptr+11) = (EMAC_ADDR12 >> 0x08) & 0xFF;
 244:../Source Files/lpc17xx_emac.c **** 
 245:../Source Files/lpc17xx_emac.c **** 	// Type or length, body length is TX_PACKET_SIZE - 14 bytes
 246:../Source Files/lpc17xx_emac.c **** 	*(txptr+12) = BodyLength & 0xFF;
 247:../Source Files/lpc17xx_emac.c **** 	*(txptr+13) = (BodyLength >> 0x08) & 0xFF;
 248:../Source Files/lpc17xx_emac.c **** 
 249:../Source Files/lpc17xx_emac.c **** 	// Skip the first 14 bytes for dst, src, and type/length
 250:../Source Files/lpc17xx_emac.c **** 	for ( i=0; i < BodyLength; i++ )
 251:../Source Files/lpc17xx_emac.c **** 	{
 252:../Source Files/lpc17xx_emac.c **** 		*(txptr+i+14) = 0x57;  // Change data and check output on Wireshark
 253:../Source Files/lpc17xx_emac.c **** 	}
 254:../Source Files/lpc17xx_emac.c **** 
 255:../Source Files/lpc17xx_emac.c **** 	// Calculate CRC
 256:../Source Files/lpc17xx_emac.c **** 	crcValue = crc32_bfr( txptr, TX_PACKET_SIZE );
 257:../Source Files/lpc17xx_emac.c **** 
 258:../Source Files/lpc17xx_emac.c **** 	// Add 4-byte CRC
 259:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE) = (0xff & crcValue);
 260:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE+1) = 0xff & (crcValue >> 8 );
 261:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE+2) = 0xff & (crcValue >> 16);
 262:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE+3) = 0xff & (crcValue >> 24);
 263:../Source Files/lpc17xx_emac.c **** }
 264:../Source Files/lpc17xx_emac.c **** 
 265:../Source Files/lpc17xx_emac.c **** 
 266:../Source Files/lpc17xx_emac.c **** /*--------------------------- rx_descr_init ---------------------------------*/
 267:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 268:../Source Files/lpc17xx_emac.c ****  * @brief 		Initializes RX Descriptor
 269:../Source Files/lpc17xx_emac.c ****  * @param[in] 	None
 270:../Source Files/lpc17xx_emac.c ****  * @return 		None
 271:../Source Files/lpc17xx_emac.c ****  ***********************************************************************/
 272:../Source Files/lpc17xx_emac.c **** static void rx_descr_init (void)
 273:../Source Files/lpc17xx_emac.c **** {
 274:../Source Files/lpc17xx_emac.c **** 	/* Initialize Receive Descriptor and Status array. */
 275:../Source Files/lpc17xx_emac.c **** 	uint32_t i;
 276:../Source Files/lpc17xx_emac.c **** 
 277:../Source Files/lpc17xx_emac.c **** 	for (i = 0; i < EMAC_NUM_RX_FRAG; i++)
 278:../Source Files/lpc17xx_emac.c **** 	{
 279:../Source Files/lpc17xx_emac.c **** 		Rx_Desc[i].Packet  = (uint32_t)&rx_buf[i];
 280:../Source Files/lpc17xx_emac.c **** 		Rx_Desc[i].Ctrl    = EMAC_RCTRL_INT | (EMAC_ETH_MAX_FLEN - 1);
 281:../Source Files/lpc17xx_emac.c **** 		Rx_Stat[i].Info    = 0;
 282:../Source Files/lpc17xx_emac.c **** 		Rx_Stat[i].HashCRC = 0;
 283:../Source Files/lpc17xx_emac.c **** 	}
 284:../Source Files/lpc17xx_emac.c **** 
 285:../Source Files/lpc17xx_emac.c **** 	/* Set EMAC Receive Descriptor Registers. */
 286:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxDescriptor       = (uint32_t)&Rx_Desc[0];
 287:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxStatus           = (uint32_t)&Rx_Stat[0];
 288:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxDescriptorNumber = EMAC_NUM_RX_FRAG - 1;
 289:../Source Files/lpc17xx_emac.c **** 
 290:../Source Files/lpc17xx_emac.c **** 	/* Rx Descriptors Point to 0 */
 291:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxConsumeIndex  = 0;
 292:../Source Files/lpc17xx_emac.c **** }
 293:../Source Files/lpc17xx_emac.c **** 
 294:../Source Files/lpc17xx_emac.c **** 
 295:../Source Files/lpc17xx_emac.c **** /*--------------------------- tx_descr_init ---- ----------------------------*/
 296:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 297:../Source Files/lpc17xx_emac.c ****  * @brief 		Initializes TX Descriptor
 298:../Source Files/lpc17xx_emac.c ****  * @param[in] 	None
 299:../Source Files/lpc17xx_emac.c ****  * @return 		None
 300:../Source Files/lpc17xx_emac.c ****  ***********************************************************************/
 301:../Source Files/lpc17xx_emac.c **** static void tx_descr_init (void) {
 302:../Source Files/lpc17xx_emac.c **** 	/* Initialize Transmit Descriptor and Status array. */
 303:../Source Files/lpc17xx_emac.c **** 	uint32_t i;
 304:../Source Files/lpc17xx_emac.c **** 
 305:../Source Files/lpc17xx_emac.c **** 	for (i = 0; i < EMAC_NUM_TX_FRAG; i++)
 306:../Source Files/lpc17xx_emac.c **** 	{
 307:../Source Files/lpc17xx_emac.c **** 		Tx_Desc[i].Packet = (uint32_t)&tx_buf[i];
 308:../Source Files/lpc17xx_emac.c **** 		Tx_Desc[i].Ctrl   = 0;
 309:../Source Files/lpc17xx_emac.c **** 		Tx_Stat[i].Info   = 0;
 310:../Source Files/lpc17xx_emac.c **** 	}
 311:../Source Files/lpc17xx_emac.c **** 
 312:../Source Files/lpc17xx_emac.c **** 	/* Set EMAC Transmit Descriptor Registers. */
 313:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxDescriptor       = (uint32_t)&Tx_Desc[0];
 314:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxStatus           = (uint32_t)&Tx_Stat[0];
 315:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxDescriptorNumber = EMAC_NUM_TX_FRAG - 1;
 316:../Source Files/lpc17xx_emac.c **** 
 317:../Source Files/lpc17xx_emac.c **** 	/* Tx Descriptors Point to 0 */
 318:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxProduceIndex  = 0;
 319:../Source Files/lpc17xx_emac.c **** }
 320:../Source Files/lpc17xx_emac.c **** 
 321:../Source Files/lpc17xx_emac.c **** 
 322:../Source Files/lpc17xx_emac.c **** /*--------------------------- write_PHY -------------------------------------*/
 323:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 324:../Source Files/lpc17xx_emac.c ****  * @brief 		Write value to PHY device
 325:../Source Files/lpc17xx_emac.c ****  * @param[in] 	PhyReg: PHY Register address
 326:../Source Files/lpc17xx_emac.c ****  * @param[in] 	Value:  Value to write
 327:../Source Files/lpc17xx_emac.c ****  * @return 		0 - if success
 328:../Source Files/lpc17xx_emac.c ****  * 				1 - if fail
 329:../Source Files/lpc17xx_emac.c ****  ***********************************************************************/
 330:../Source Files/lpc17xx_emac.c **** static int32_t write_PHY (uint32_t PhyReg, uint16_t Value)
 331:../Source Files/lpc17xx_emac.c **** {
 332:../Source Files/lpc17xx_emac.c **** 	/* Write a data 'Value' to PHY register 'PhyReg'. */
 333:../Source Files/lpc17xx_emac.c **** 	uint32_t tout;
 334:../Source Files/lpc17xx_emac.c **** 
 335:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MADR = EMAC_DEF_ADR | PhyReg;
 336:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MWTD = Value;
 337:../Source Files/lpc17xx_emac.c **** 
 338:../Source Files/lpc17xx_emac.c **** 	/* Wait until operation completed */
 339:../Source Files/lpc17xx_emac.c **** 	tout = 0;
 340:../Source Files/lpc17xx_emac.c **** 	for (tout = 0; tout < EMAC_MII_WR_TOUT; tout++) {
 341:../Source Files/lpc17xx_emac.c **** 		if ((LPC_EMAC->MIND & EMAC_MIND_BUSY) == 0) {
 342:../Source Files/lpc17xx_emac.c **** 			return (0);
 343:../Source Files/lpc17xx_emac.c **** 		}
 344:../Source Files/lpc17xx_emac.c **** 	}
 345:../Source Files/lpc17xx_emac.c **** 	// Time out!
 346:../Source Files/lpc17xx_emac.c **** 	return (-1);
 347:../Source Files/lpc17xx_emac.c **** }
 348:../Source Files/lpc17xx_emac.c **** 
 349:../Source Files/lpc17xx_emac.c **** 
 350:../Source Files/lpc17xx_emac.c **** /*--------------------------- read_PHY --------------------------------------*/
 351:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 352:../Source Files/lpc17xx_emac.c ****  * @brief 		Read value from PHY device
 353:../Source Files/lpc17xx_emac.c ****  * @param[in] 	PhyReg: PHY Register address
 354:../Source Files/lpc17xx_emac.c ****  * @return 		0 - if success
 355:../Source Files/lpc17xx_emac.c ****  * 				1 - if fail
 356:../Source Files/lpc17xx_emac.c ****  ***********************************************************************/
 357:../Source Files/lpc17xx_emac.c **** static int32_t read_PHY (uint32_t PhyReg)
 358:../Source Files/lpc17xx_emac.c **** {
  25              		.loc 1 358 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 359:../Source Files/lpc17xx_emac.c **** 	/* Read a PHY register 'PhyReg'. */
 360:../Source Files/lpc17xx_emac.c **** 	uint32_t tout;
 361:../Source Files/lpc17xx_emac.c **** 
 362:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MADR = EMAC_DEF_ADR | PhyReg;
  31              		.loc 1 362 0
  32 0000 4FF0A043 		mov	r3, #1342177280
 363:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MCMD = EMAC_MCMD_READ;
  33              		.loc 1 363 0
  34 0004 0122     		movs	r2, #1
 362:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MADR = EMAC_DEF_ADR | PhyReg;
  35              		.loc 1 362 0
  36 0006 9862     		str	r0, [r3, #40]
  37              		.loc 1 363 0
  38 0008 5A62     		str	r2, [r3, #36]
  39              	.LVL1:
  40 000a 4FF4A023 		mov	r3, #327680
  41              	.LVL2:
  42              	.L4:
 364:../Source Files/lpc17xx_emac.c **** 
 365:../Source Files/lpc17xx_emac.c **** 	/* Wait until operation completed */
 366:../Source Files/lpc17xx_emac.c **** 	tout = 0;
 367:../Source Files/lpc17xx_emac.c **** 	for (tout = 0; tout < EMAC_MII_RD_TOUT; tout++) {
 368:../Source Files/lpc17xx_emac.c **** 		if ((LPC_EMAC->MIND & EMAC_MIND_BUSY) == 0) {
  43              		.loc 1 368 0
  44 000e 4FF0A040 		mov	r0, #1342177280
  45              	.LVL3:
  46 0012 416B     		ldr	r1, [r0, #52]
  47 0014 11F00102 		ands	r2, r1, #1
  48 0018 02D1     		bne	.L2
 369:../Source Files/lpc17xx_emac.c **** 			LPC_EMAC->MCMD = 0;
  49              		.loc 1 369 0
  50 001a 4262     		str	r2, [r0, #36]
 370:../Source Files/lpc17xx_emac.c **** 			return (LPC_EMAC->MRDD);
  51              		.loc 1 370 0
  52 001c 006B     		ldr	r0, [r0, #48]
  53              	.LVL4:
  54 001e 7047     		bx	lr
  55              	.LVL5:
  56              	.L2:
 367:../Source Files/lpc17xx_emac.c **** 	for (tout = 0; tout < EMAC_MII_RD_TOUT; tout++) {
  57              		.loc 1 367 0
  58 0020 013B     		subs	r3, r3, #1
  59 0022 F4D1     		bne	.L4
 371:../Source Files/lpc17xx_emac.c **** 		}
 372:../Source Files/lpc17xx_emac.c **** 	}
 373:../Source Files/lpc17xx_emac.c **** 	// Time out!
 374:../Source Files/lpc17xx_emac.c **** 	return (-1);
  60              		.loc 1 374 0
  61 0024 4FF0FF30 		mov	r0, #-1
  62              	.LVL6:
 375:../Source Files/lpc17xx_emac.c **** }
  63              		.loc 1 375 0
  64 0028 7047     		bx	lr
  65              		.cfi_endproc
  66              	.LFE60:
  68              		.align	1
  69              		.thumb
  70              		.thumb_func
  72              	write_PHY.constprop.1:
  73              	.LFB96:
 330:../Source Files/lpc17xx_emac.c **** static int32_t write_PHY (uint32_t PhyReg, uint16_t Value)
  74              		.loc 1 330 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79              	.LVL7:
 335:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MADR = EMAC_DEF_ADR | PhyReg;
  80              		.loc 1 335 0
  81 002a 4FF0A043 		mov	r3, #1342177280
  82 002e 0022     		movs	r2, #0
  83 0030 9A62     		str	r2, [r3, #40]
 336:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MWTD = Value;
  84              		.loc 1 336 0
  85 0032 D862     		str	r0, [r3, #44]
  86              	.LVL8:
  87 0034 4FF4A023 		mov	r3, #327680
  88              	.LVL9:
  89              	.L9:
 341:../Source Files/lpc17xx_emac.c **** 		if ((LPC_EMAC->MIND & EMAC_MIND_BUSY) == 0) {
  90              		.loc 1 341 0
  91 0038 4FF0A040 		mov	r0, #1342177280
  92 003c 416B     		ldr	r1, [r0, #52]
  93 003e 11F00100 		ands	r0, r1, #1
  94 0042 03D0     		beq	.L8
 340:../Source Files/lpc17xx_emac.c **** 	for (tout = 0; tout < EMAC_MII_WR_TOUT; tout++) {
  95              		.loc 1 340 0
  96 0044 013B     		subs	r3, r3, #1
  97 0046 F7D1     		bne	.L9
 346:../Source Files/lpc17xx_emac.c **** 	return (-1);
  98              		.loc 1 346 0
  99 0048 4FF0FF30 		mov	r0, #-1
 100              	.L8:
 347:../Source Files/lpc17xx_emac.c **** }
 101              		.loc 1 347 0
 102 004c 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE96:
 106              		.align	1
 107              		.global	PacketGen
 108              		.thumb
 109              		.thumb_func
 111              	PacketGen:
 112              	.LFB56:
 224:../Source Files/lpc17xx_emac.c **** {
 113              		.loc 1 224 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              	.LVL10:
 230:../Source Files/lpc17xx_emac.c **** 	*(txptr+0) = EMAC_DST_ADDR56 & 0xFF;
 118              		.loc 1 230 0
 119 004e 0023     		movs	r3, #0
 231:../Source Files/lpc17xx_emac.c **** 	*(txptr+1) = (EMAC_DST_ADDR56 >> 0x08) & 0xFF;
 120              		.loc 1 231 0
 121 0050 5022     		movs	r2, #80
 224:../Source Files/lpc17xx_emac.c **** {
 122              		.loc 1 224 0
 123 0052 10B5     		push	{r4, lr}
 124              	.LCFI0:
 125              		.cfi_def_cfa_offset 8
 126              		.cfi_offset 4, -8
 127              		.cfi_offset 14, -4
 233:../Source Files/lpc17xx_emac.c **** 	*(txptr+3) = (EMAC_DST_ADDR34 >> 0x08) & 0xFF;
 128              		.loc 1 233 0
 129 0054 6B21     		movs	r1, #107
 231:../Source Files/lpc17xx_emac.c **** 	*(txptr+1) = (EMAC_DST_ADDR56 >> 0x08) & 0xFF;
 130              		.loc 1 231 0
 131 0056 4270     		strb	r2, [r0, #1]
 224:../Source Files/lpc17xx_emac.c **** {
 132              		.loc 1 224 0
 133 0058 0446     		mov	r4, r0
 230:../Source Files/lpc17xx_emac.c **** 	*(txptr+0) = EMAC_DST_ADDR56 & 0xFF;
 134              		.loc 1 230 0
 135 005a 0370     		strb	r3, [r0, #0]
 232:../Source Files/lpc17xx_emac.c **** 	*(txptr+2) = EMAC_DST_ADDR34 & 0xFF;
 136              		.loc 1 232 0
 137 005c DA20     		movs	r0, #218
 138              	.LVL11:
 234:../Source Files/lpc17xx_emac.c **** 	*(txptr+4) = EMAC_DST_ADDR12 & 0xFF;
 139              		.loc 1 234 0
 140 005e 8622     		movs	r2, #134
 232:../Source Files/lpc17xx_emac.c **** 	*(txptr+2) = EMAC_DST_ADDR34 & 0xFF;
 141              		.loc 1 232 0
 142 0060 A070     		strb	r0, [r4, #2]
 233:../Source Files/lpc17xx_emac.c **** 	*(txptr+3) = (EMAC_DST_ADDR34 >> 0x08) & 0xFF;
 143              		.loc 1 233 0
 144 0062 E170     		strb	r1, [r4, #3]
 235:../Source Files/lpc17xx_emac.c **** 	*(txptr+5) = (EMAC_DST_ADDR12 >> 0x08) & 0xFF;
 145              		.loc 1 235 0
 146 0064 E320     		movs	r0, #227
 238:../Source Files/lpc17xx_emac.c **** 	*(txptr+6) = EMAC_ADDR56 & 0xFF;
 147              		.loc 1 238 0
 148 0066 0C21     		movs	r1, #12
 234:../Source Files/lpc17xx_emac.c **** 	*(txptr+4) = EMAC_DST_ADDR12 & 0xFF;
 149              		.loc 1 234 0
 150 0068 2271     		strb	r2, [r4, #4]
 235:../Source Files/lpc17xx_emac.c **** 	*(txptr+5) = (EMAC_DST_ADDR12 >> 0x08) & 0xFF;
 151              		.loc 1 235 0
 152 006a 6071     		strb	r0, [r4, #5]
 239:../Source Files/lpc17xx_emac.c **** 	*(txptr+7) = (EMAC_ADDR56 >> 0x08) & 0xFF;
 153              		.loc 1 239 0
 154 006c 1D22     		movs	r2, #29
 240:../Source Files/lpc17xx_emac.c **** 	*(txptr+8) = EMAC_ADDR34 & 0xFF;
 155              		.loc 1 240 0
 156 006e 1220     		movs	r0, #18
 238:../Source Files/lpc17xx_emac.c **** 	*(txptr+6) = EMAC_ADDR56 & 0xFF;
 157              		.loc 1 238 0
 158 0070 A171     		strb	r1, [r4, #6]
 241:../Source Files/lpc17xx_emac.c **** 	*(txptr+9) = (EMAC_ADDR34 >> 0x08) & 0xFF;
 159              		.loc 1 241 0
 160 0072 E021     		movs	r1, #224
 239:../Source Files/lpc17xx_emac.c **** 	*(txptr+7) = (EMAC_ADDR56 >> 0x08) & 0xFF;
 161              		.loc 1 239 0
 162 0074 E271     		strb	r2, [r4, #7]
 240:../Source Files/lpc17xx_emac.c **** 	*(txptr+8) = EMAC_ADDR34 & 0xFF;
 163              		.loc 1 240 0
 164 0076 2072     		strb	r0, [r4, #8]
 241:../Source Files/lpc17xx_emac.c **** 	*(txptr+9) = (EMAC_ADDR34 >> 0x08) & 0xFF;
 165              		.loc 1 241 0
 166 0078 6172     		strb	r1, [r4, #9]
 242:../Source Files/lpc17xx_emac.c **** 	*(txptr+10) = EMAC_ADDR12 & 0xFF;
 167              		.loc 1 242 0
 168 007a 1F22     		movs	r2, #31
 243:../Source Files/lpc17xx_emac.c **** 	*(txptr+11) = (EMAC_ADDR12 >> 0x08) & 0xFF;
 169              		.loc 1 243 0
 170 007c 1020     		movs	r0, #16
 246:../Source Files/lpc17xx_emac.c **** 	*(txptr+12) = BodyLength & 0xFF;
 171              		.loc 1 246 0
 172 007e 6421     		movs	r1, #100
 242:../Source Files/lpc17xx_emac.c **** 	*(txptr+10) = EMAC_ADDR12 & 0xFF;
 173              		.loc 1 242 0
 174 0080 A272     		strb	r2, [r4, #10]
 243:../Source Files/lpc17xx_emac.c **** 	*(txptr+11) = (EMAC_ADDR12 >> 0x08) & 0xFF;
 175              		.loc 1 243 0
 176 0082 E072     		strb	r0, [r4, #11]
 246:../Source Files/lpc17xx_emac.c **** 	*(txptr+12) = BodyLength & 0xFF;
 177              		.loc 1 246 0
 178 0084 2173     		strb	r1, [r4, #12]
 247:../Source Files/lpc17xx_emac.c **** 	*(txptr+13) = (BodyLength >> 0x08) & 0xFF;
 179              		.loc 1 247 0
 180 0086 6373     		strb	r3, [r4, #13]
 181              	.LVL12:
 182              	.L13:
 223:../Source Files/lpc17xx_emac.c **** void PacketGen(uint8_t *txptr)
 183              		.loc 1 223 0 discriminator 2
 184 0088 E218     		adds	r2, r4, r3
 250:../Source Files/lpc17xx_emac.c **** 	for ( i=0; i < BodyLength; i++ )
 185              		.loc 1 250 0 discriminator 2
 186 008a 0133     		adds	r3, r3, #1
 187              	.LVL13:
 252:../Source Files/lpc17xx_emac.c **** 		*(txptr+i+14) = 0x57;  // Change data and check output on Wireshark
 188              		.loc 1 252 0 discriminator 2
 189 008c 5720     		movs	r0, #87
 250:../Source Files/lpc17xx_emac.c **** 	for ( i=0; i < BodyLength; i++ )
 190              		.loc 1 250 0 discriminator 2
 191 008e 642B     		cmp	r3, #100
 252:../Source Files/lpc17xx_emac.c **** 		*(txptr+i+14) = 0x57;  // Change data and check output on Wireshark
 192              		.loc 1 252 0 discriminator 2
 193 0090 9073     		strb	r0, [r2, #14]
 250:../Source Files/lpc17xx_emac.c **** 	for ( i=0; i < BodyLength; i++ )
 194              		.loc 1 250 0 discriminator 2
 195 0092 F9D1     		bne	.L13
 256:../Source Files/lpc17xx_emac.c **** 	crcValue = crc32_bfr( txptr, TX_PACKET_SIZE );
 196              		.loc 1 256 0
 197 0094 7221     		movs	r1, #114
 198 0096 2046     		mov	r0, r4
 199 0098 FFF7FEFF 		bl	crc32_bfr
 200              	.LVL14:
 260:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE+1) = 0xff & (crcValue >> 8 );
 201              		.loc 1 260 0
 202 009c 010A     		lsrs	r1, r0, #8
 261:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE+2) = 0xff & (crcValue >> 16);
 203              		.loc 1 261 0
 204 009e 020C     		lsrs	r2, r0, #16
 259:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE) = (0xff & crcValue);
 205              		.loc 1 259 0
 206 00a0 84F87200 		strb	r0, [r4, #114]
 262:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE+3) = 0xff & (crcValue >> 24);
 207              		.loc 1 262 0
 208 00a4 000E     		lsrs	r0, r0, #24
 209              	.LVL15:
 260:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE+1) = 0xff & (crcValue >> 8 );
 210              		.loc 1 260 0
 211 00a6 84F87310 		strb	r1, [r4, #115]
 261:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE+2) = 0xff & (crcValue >> 16);
 212              		.loc 1 261 0
 213 00aa 84F87420 		strb	r2, [r4, #116]
 262:../Source Files/lpc17xx_emac.c **** 	*(txptr+TX_PACKET_SIZE+3) = 0xff & (crcValue >> 24);
 214              		.loc 1 262 0
 215 00ae 84F87500 		strb	r0, [r4, #117]
 216 00b2 10BD     		pop	{r4, pc}
 217              		.cfi_endproc
 218              	.LFE56:
 220              		.align	1
 221              		.global	EMAC_DeInit
 222              		.thumb
 223              		.thumb_func
 225              	EMAC_DeInit:
 226              	.LFB65:
 376:../Source Files/lpc17xx_emac.c **** 
 377:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 378:../Source Files/lpc17xx_emac.c ****  * @brief		Set Station MAC address for EMAC module
 379:../Source Files/lpc17xx_emac.c ****  * @param[in]	abStationAddr Pointer to Station address that contains 6-bytes
 380:../Source Files/lpc17xx_emac.c ****  * 				of MAC address (should be in order from MAC Address 1 to MAC Address 6)
 381:../Source Files/lpc17xx_emac.c ****  * @return		None
 382:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 383:../Source Files/lpc17xx_emac.c **** static void setEmacAddr(uint8_t abStationAddr[])
 384:../Source Files/lpc17xx_emac.c **** {
 385:../Source Files/lpc17xx_emac.c **** 	/* Set the Ethernet MAC Address registers */
 386:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SA0 = ((uint32_t)abStationAddr[5] << 8) | (uint32_t)abStationAddr[4];
 387:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SA1 = ((uint32_t)abStationAddr[3] << 8) | (uint32_t)abStationAddr[2];
 388:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SA2 = ((uint32_t)abStationAddr[1] << 8) | (uint32_t)abStationAddr[0];
 389:../Source Files/lpc17xx_emac.c **** }
 390:../Source Files/lpc17xx_emac.c **** 
 391:../Source Files/lpc17xx_emac.c **** 
 392:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 393:../Source Files/lpc17xx_emac.c ****  * @brief		Calculates CRC code for number of bytes in the frame
 394:../Source Files/lpc17xx_emac.c ****  * @param[in]	frame_no_fcs	Pointer to the first byte of the frame
 395:../Source Files/lpc17xx_emac.c ****  * @param[in]	frame_len		length of the frame without the FCS
 396:../Source Files/lpc17xx_emac.c ****  * @return		the CRC as a 32 bit integer
 397:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 398:../Source Files/lpc17xx_emac.c **** static int32_t emac_CRCCalc(uint8_t frame_no_fcs[], int32_t frame_len)
 399:../Source Files/lpc17xx_emac.c **** {
 400:../Source Files/lpc17xx_emac.c **** 	int i; 		// iterator
 401:../Source Files/lpc17xx_emac.c **** 	int j; 		// another iterator
 402:../Source Files/lpc17xx_emac.c **** 	char byte; 	// current byte
 403:../Source Files/lpc17xx_emac.c **** 	int crc; 	// CRC result
 404:../Source Files/lpc17xx_emac.c **** 	int q0, q1, q2, q3; // temporary variables
 405:../Source Files/lpc17xx_emac.c **** 	crc = 0xFFFFFFFF;
 406:../Source Files/lpc17xx_emac.c **** 	for (i = 0; i < frame_len; i++) {
 407:../Source Files/lpc17xx_emac.c **** 		byte = *frame_no_fcs++;
 408:../Source Files/lpc17xx_emac.c **** 		for (j = 0; j < 2; j++) {
 409:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 28) ^ (byte >> 3)) & 0x00000001) {
 410:../Source Files/lpc17xx_emac.c **** 				q3 = 0x04C11DB7;
 411:../Source Files/lpc17xx_emac.c **** 			} else {
 412:../Source Files/lpc17xx_emac.c **** 				q3 = 0x00000000;
 413:../Source Files/lpc17xx_emac.c **** 			}
 414:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 29) ^ (byte >> 2)) & 0x00000001) {
 415:../Source Files/lpc17xx_emac.c **** 				q2 = 0x09823B6E;
 416:../Source Files/lpc17xx_emac.c **** 			} else {
 417:../Source Files/lpc17xx_emac.c **** 				q2 = 0x00000000;
 418:../Source Files/lpc17xx_emac.c **** 			}
 419:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 30) ^ (byte >> 1)) & 0x00000001) {
 420:../Source Files/lpc17xx_emac.c **** 				q1 = 0x130476DC;
 421:../Source Files/lpc17xx_emac.c **** 			} else {
 422:../Source Files/lpc17xx_emac.c **** 				q1 = 0x00000000;
 423:../Source Files/lpc17xx_emac.c **** 			}
 424:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 31) ^ (byte >> 0)) & 0x00000001) {
 425:../Source Files/lpc17xx_emac.c **** 				q0 = 0x2608EDB8;
 426:../Source Files/lpc17xx_emac.c **** 			} else {
 427:../Source Files/lpc17xx_emac.c **** 				q0 = 0x00000000;
 428:../Source Files/lpc17xx_emac.c **** 			}
 429:../Source Files/lpc17xx_emac.c **** 			crc = (crc << 4) ^ q3 ^ q2 ^ q1 ^ q0;
 430:../Source Files/lpc17xx_emac.c **** 			byte >>= 4;
 431:../Source Files/lpc17xx_emac.c **** 		}
 432:../Source Files/lpc17xx_emac.c **** 	}
 433:../Source Files/lpc17xx_emac.c **** 	return crc;
 434:../Source Files/lpc17xx_emac.c **** }
 435:../Source Files/lpc17xx_emac.c **** /* End of Private Functions --------------------------------------------------- */
 436:../Source Files/lpc17xx_emac.c **** 
 437:../Source Files/lpc17xx_emac.c **** 
 438:../Source Files/lpc17xx_emac.c **** /* Public Functions ----------------------------------------------------------- */
 439:../Source Files/lpc17xx_emac.c **** /** @addtogroup EMAC_Public_Functions
 440:../Source Files/lpc17xx_emac.c ****  * @{
 441:../Source Files/lpc17xx_emac.c ****  */
 442:../Source Files/lpc17xx_emac.c **** 
 443:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 444:../Source Files/lpc17xx_emac.c ****  * @brief		User EMAC initialize
 445:../Source Files/lpc17xx_emac.c ****  * @param[in]	none
 446:../Source Files/lpc17xx_emac.c ****  * @return 		none
 447:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 448:../Source Files/lpc17xx_emac.c **** void EMAC_Config(void)
 449:../Source Files/lpc17xx_emac.c **** {
 450:../Source Files/lpc17xx_emac.c **** 	/* EMAC configuration type */
 451:../Source Files/lpc17xx_emac.c **** 	EMAC_CFG_Type Emac_Config;
 452:../Source Files/lpc17xx_emac.c **** 	/* pin configuration */
 453:../Source Files/lpc17xx_emac.c **** 	PINSEL_CFG_Type PinCfg;
 454:../Source Files/lpc17xx_emac.c **** 	uint32_t i;
 455:../Source Files/lpc17xx_emac.c **** 
 456:../Source Files/lpc17xx_emac.c **** 	/* EMAC address */
 457:../Source Files/lpc17xx_emac.c **** 	uint8_t EMACAddr[] = {MYMAC_6, MYMAC_5, MYMAC_4, MYMAC_3, MYMAC_2, MYMAC_1};
 458:../Source Files/lpc17xx_emac.c **** 
 459:../Source Files/lpc17xx_emac.c **** 	/*
 460:../Source Files/lpc17xx_emac.c **** 	 * Enable P1 Ethernet Pins:
 461:../Source Files/lpc17xx_emac.c **** 	 * P1.0 - ENET_TXD0
 462:../Source Files/lpc17xx_emac.c **** 	 * P1.1 - ENET_TXD1
 463:../Source Files/lpc17xx_emac.c **** 	 * P1.4 - ENET_TX_EN
 464:../Source Files/lpc17xx_emac.c **** 	 * P1.8 - ENET_CRS
 465:../Source Files/lpc17xx_emac.c **** 	 * P1.9 - ENET_RXD0
 466:../Source Files/lpc17xx_emac.c **** 	 * P1.10 - ENET_RXD1
 467:../Source Files/lpc17xx_emac.c **** 	 * P1.14 - ENET_RX_ER
 468:../Source Files/lpc17xx_emac.c **** 	 * P1.15 - ENET_REF_CLK
 469:../Source Files/lpc17xx_emac.c **** 	 * P1.16 - ENET_MDC
 470:../Source Files/lpc17xx_emac.c **** 	 * P1.17 - ENET_MDIO
 471:../Source Files/lpc17xx_emac.c **** 	 */
 472:../Source Files/lpc17xx_emac.c **** 	PinCfg.Funcnum = 1;
 473:../Source Files/lpc17xx_emac.c **** 	PinCfg.OpenDrain = 0;
 474:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinmode = 0;
 475:../Source Files/lpc17xx_emac.c **** 	PinCfg.Portnum = 1;
 476:../Source Files/lpc17xx_emac.c **** 
 477:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 0;
 478:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 479:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 1;
 480:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 481:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 4;
 482:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 483:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 8;
 484:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 485:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 9;
 486:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 487:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 10;
 488:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 489:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 14;
 490:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 491:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 15;
 492:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 493:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 16;
 494:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 495:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 17;
 496:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 497:../Source Files/lpc17xx_emac.c **** 
 498:../Source Files/lpc17xx_emac.c **** 	printf(LPC_UART0,"Init EMAC module\n\r");
 499:../Source Files/lpc17xx_emac.c **** 	printf(LPC_UART0,"MAC[1..6] addr: %x02-%x02-%x02-%x02-%x02-%x02 \n\r", \
 500:../Source Files/lpc17xx_emac.c **** 			 EMACAddr[0],  EMACAddr[1],  EMACAddr[2], \
 501:../Source Files/lpc17xx_emac.c **** 			  EMACAddr[3],  EMACAddr[4],  EMACAddr[5]);
 502:../Source Files/lpc17xx_emac.c **** 
 503:../Source Files/lpc17xx_emac.c **** 	Emac_Config.Mode = EMAC_MODE_AUTO;
 504:../Source Files/lpc17xx_emac.c **** 	Emac_Config.pbEMAC_Addr = EMACAddr;
 505:../Source Files/lpc17xx_emac.c **** 	// Initialize EMAC module with given parameter
 506:../Source Files/lpc17xx_emac.c **** 	while (EMAC_Init(&Emac_Config) == ERROR)
 507:../Source Files/lpc17xx_emac.c **** 	{
 508:../Source Files/lpc17xx_emac.c **** 		// Delay for a while then continue initializing EMAC module
 509:../Source Files/lpc17xx_emac.c **** 		printf(LPC_UART0,"Error during initializing EMAC, restart after a while\n\r");
 510:../Source Files/lpc17xx_emac.c **** 		for (i = 0x100000; i; i--);
 511:../Source Files/lpc17xx_emac.c **** 	}
 512:../Source Files/lpc17xx_emac.c **** 	// Enable all interrupt
 513:../Source Files/lpc17xx_emac.c **** 	EMAC_IntCmd((EMAC_INT_RX_OVERRUN | EMAC_INT_RX_ERR | EMAC_INT_RX_FIN \
 514:../Source Files/lpc17xx_emac.c **** 			| EMAC_INT_RX_DONE | EMAC_INT_TX_UNDERRUN | EMAC_INT_TX_ERR \
 515:../Source Files/lpc17xx_emac.c **** 			| EMAC_INT_TX_FIN | EMAC_INT_TX_DONE), ENABLE);
 516:../Source Files/lpc17xx_emac.c **** 	NVIC_SetPriority(ENET_IRQn, 0);
 517:../Source Files/lpc17xx_emac.c **** 	NVIC_EnableIRQ(ENET_IRQn);
 518:../Source Files/lpc17xx_emac.c **** 	printf(LPC_UART0,"Initialize EMAC complete\n\r");
 519:../Source Files/lpc17xx_emac.c **** }
 520:../Source Files/lpc17xx_emac.c **** 
 521:../Source Files/lpc17xx_emac.c **** 
 522:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 523:../Source Files/lpc17xx_emac.c ****  * @brief		Initializes the EMAC peripheral according to the specified
 524:../Source Files/lpc17xx_emac.c **** *               parameters in the EMAC_ConfigStruct.
 525:../Source Files/lpc17xx_emac.c ****  * @param[in]	EMAC_ConfigStruct Pointer to a EMAC_CFG_Type structure
 526:../Source Files/lpc17xx_emac.c **** *                    that contains the configuration information for the
 527:../Source Files/lpc17xx_emac.c **** *                    specified EMAC peripheral.
 528:../Source Files/lpc17xx_emac.c ****  * @return		None
 529:../Source Files/lpc17xx_emac.c ****  *
 530:../Source Files/lpc17xx_emac.c ****  * Note: This function will initialize EMAC module according to procedure below:
 531:../Source Files/lpc17xx_emac.c ****  *  - Remove the soft reset condition from the MAC
 532:../Source Files/lpc17xx_emac.c ****  *  - Configure the PHY via the MIIM interface of the MAC
 533:../Source Files/lpc17xx_emac.c ****  *  - Select RMII mode
 534:../Source Files/lpc17xx_emac.c ****  *  - Configure the transmit and receive DMA engines, including the descriptor arrays
 535:../Source Files/lpc17xx_emac.c ****  *  - Configure the host registers (MAC1,MAC2 etc.) in the MAC
 536:../Source Files/lpc17xx_emac.c ****  *  - Enable the receive and transmit data paths
 537:../Source Files/lpc17xx_emac.c ****  *  In default state after initializing, only Rx Done and Tx Done interrupt are enabled,
 538:../Source Files/lpc17xx_emac.c ****  *  all remain interrupts are disabled
 539:../Source Files/lpc17xx_emac.c ****  *  (Ref. from LPC17xx UM)
 540:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 541:../Source Files/lpc17xx_emac.c **** Status EMAC_Init(EMAC_CFG_Type *EMAC_ConfigStruct)
 542:../Source Files/lpc17xx_emac.c **** {
 543:../Source Files/lpc17xx_emac.c **** 	/* Initialize the EMAC Ethernet controller. */
 544:../Source Files/lpc17xx_emac.c **** 	int32_t regv,tout, tmp;
 545:../Source Files/lpc17xx_emac.c **** 
 546:../Source Files/lpc17xx_emac.c **** 	/* Set up clock and power for Ethernet module */
 547:../Source Files/lpc17xx_emac.c **** 	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCENET, ENABLE);
 548:../Source Files/lpc17xx_emac.c **** 
 549:../Source Files/lpc17xx_emac.c **** 	/* Reset all EMAC internal modules */
 550:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC1    = EMAC_MAC1_RES_TX | EMAC_MAC1_RES_MCS_TX | EMAC_MAC1_RES_RX |
 551:../Source Files/lpc17xx_emac.c **** 					EMAC_MAC1_RES_MCS_RX | EMAC_MAC1_SIM_RES | EMAC_MAC1_SOFT_RES;
 552:../Source Files/lpc17xx_emac.c **** 
 553:../Source Files/lpc17xx_emac.c **** 	// Set up MAC Command Register
 554:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command = EMAC_CR_REG_RES | EMAC_CR_TX_RES | EMAC_CR_RX_RES | EMAC_CR_PASS_RUNT_FRM;
 555:../Source Files/lpc17xx_emac.c **** 
 556:../Source Files/lpc17xx_emac.c **** 	/* A short delay after reset. */
 557:../Source Files/lpc17xx_emac.c **** 	for (tout = 100; tout; tout--);
 558:../Source Files/lpc17xx_emac.c **** 
 559:../Source Files/lpc17xx_emac.c **** 	/* Initialize MAC control registers. */
 560:../Source Files/lpc17xx_emac.c **** 	// Set up MAC Configuration Register 1 to pass all receive frames
 561:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC1 = EMAC_MAC1_PASS_ALL;
 562:../Source Files/lpc17xx_emac.c **** 	// Set up MAC Configuration Register 2 to append CRC and pad out frames
 563:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC2 = EMAC_MAC2_CRC_EN | EMAC_MAC2_PAD_EN;
 564:../Source Files/lpc17xx_emac.c **** 
 565:../Source Files/lpc17xx_emac.c **** 	// Set Ethernet Maximum Frame Register
 566:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAXF = EMAC_ETH_MAX_FLEN;
 567:../Source Files/lpc17xx_emac.c **** 
 568:../Source Files/lpc17xx_emac.c **** 	/*
 569:../Source Files/lpc17xx_emac.c **** 	 * Find the clock that close to desired target clock
 570:../Source Files/lpc17xx_emac.c **** 	 */
 571:../Source Files/lpc17xx_emac.c **** 	tmp = SystemCoreClock / EMAC_MCFG_MII_MAXCLK;
 572:../Source Files/lpc17xx_emac.c **** 	for (tout = 0; tout < sizeof (EMAC_clkdiv); tout++){
 573:../Source Files/lpc17xx_emac.c **** 		if (EMAC_clkdiv[tout] >= tmp) break;
 574:../Source Files/lpc17xx_emac.c **** 	}
 575:../Source Files/lpc17xx_emac.c **** 	tout++;
 576:../Source Files/lpc17xx_emac.c **** 	// Write to MAC configuration register and reset
 577:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MCFG = EMAC_MCFG_CLK_SEL(tout) | EMAC_MCFG_RES_MII;
 578:../Source Files/lpc17xx_emac.c **** 	// release reset
 579:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MCFG &= ~(EMAC_MCFG_RES_MII);
 580:../Source Files/lpc17xx_emac.c **** 
 581:../Source Files/lpc17xx_emac.c **** 	// Set Collision Window / Retry Register
 582:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->CLRT = EMAC_CLRT_DEF;
 583:../Source Files/lpc17xx_emac.c **** 	// Set Non Back-to-Back Inter-Packet-Gap Register
 584:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IPGR = EMAC_IPGR_P2_DEF;
 585:../Source Files/lpc17xx_emac.c **** 
 586:../Source Files/lpc17xx_emac.c **** 	/* Enable Reduced MII interface. */
 587:../Source Files/lpc17xx_emac.c **** 	// Set MAC Command Register to enable Reduced MII interface
 588:../Source Files/lpc17xx_emac.c **** 	// and prevent runt frames being filtered out
 589:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command = EMAC_CR_RMII | EMAC_CR_PASS_RUNT_FRM;
 590:../Source Files/lpc17xx_emac.c **** 
 591:../Source Files/lpc17xx_emac.c **** 	/* Reset Reduced MII Logic. */
 592:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SUPP = EMAC_SUPP_RES_RMII;
 593:../Source Files/lpc17xx_emac.c **** 
 594:../Source Files/lpc17xx_emac.c **** 	for (tout = 100; tout; tout--);
 595:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SUPP = 0;
 596:../Source Files/lpc17xx_emac.c **** 
 597:../Source Files/lpc17xx_emac.c **** 	/* Put the DP83848C in reset mode */
 598:../Source Files/lpc17xx_emac.c **** 	write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_BMCR_RESET);
 599:../Source Files/lpc17xx_emac.c **** 
 600:../Source Files/lpc17xx_emac.c **** 	/* Wait for hardware reset to end. */
 601:../Source Files/lpc17xx_emac.c **** 	for (tout = EMAC_PHY_RESP_TOUT; tout; tout--) {
 602:../Source Files/lpc17xx_emac.c **** 		regv = read_PHY (EMAC_PHY_REG_BMCR);
 603:../Source Files/lpc17xx_emac.c **** 		if (!(regv & (EMAC_PHY_BMCR_RESET | EMAC_PHY_BMCR_POWERDOWN))) {
 604:../Source Files/lpc17xx_emac.c **** 			/* Reset complete, device not Power Down. */
 605:../Source Files/lpc17xx_emac.c **** 			break;
 606:../Source Files/lpc17xx_emac.c **** 		}
 607:../Source Files/lpc17xx_emac.c **** 		if (tout == 0){
 608:../Source Files/lpc17xx_emac.c **** 			// Time out, return ERROR
 609:../Source Files/lpc17xx_emac.c **** 			return (ERROR);
 610:../Source Files/lpc17xx_emac.c **** 		}
 611:../Source Files/lpc17xx_emac.c **** 	}
 612:../Source Files/lpc17xx_emac.c **** 
 613:../Source Files/lpc17xx_emac.c **** 	// Set PHY mode
 614:../Source Files/lpc17xx_emac.c **** 	if (EMAC_SetPHYMode(EMAC_ConfigStruct->Mode) < 0)
 615:../Source Files/lpc17xx_emac.c **** 	{
 616:../Source Files/lpc17xx_emac.c **** 		return (ERROR);
 617:../Source Files/lpc17xx_emac.c **** 	}
 618:../Source Files/lpc17xx_emac.c **** 
 619:../Source Files/lpc17xx_emac.c **** 	// Set EMAC address
 620:../Source Files/lpc17xx_emac.c **** 	setEmacAddr(EMAC_ConfigStruct->pbEMAC_Addr);
 621:../Source Files/lpc17xx_emac.c **** 
 622:../Source Files/lpc17xx_emac.c **** 	/* Initialize Tx and Rx DMA Descriptors */
 623:../Source Files/lpc17xx_emac.c **** 	rx_descr_init ();
 624:../Source Files/lpc17xx_emac.c **** 	tx_descr_init ();
 625:../Source Files/lpc17xx_emac.c **** 
 626:../Source Files/lpc17xx_emac.c **** 	// Set Receive Filter register: enable broadcast and multicast
 627:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxFilterCtrl = EMAC_RFC_MCAST_EN | EMAC_RFC_BCAST_EN | EMAC_RFC_PERFECT_EN;
 628:../Source Files/lpc17xx_emac.c **** 
 629:../Source Files/lpc17xx_emac.c **** 	/* Enable Rx Done and Tx Done interrupt for EMAC */
 630:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntEnable = EMAC_INT_RX_DONE | EMAC_INT_TX_DONE;
 631:../Source Files/lpc17xx_emac.c **** 
 632:../Source Files/lpc17xx_emac.c **** 	/* Reset all interrupts */
 633:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntClear  = 0xFFFF;
 634:../Source Files/lpc17xx_emac.c **** 
 635:../Source Files/lpc17xx_emac.c **** 	/* Enable receive and transmit mode of MAC Ethernet core */
 636:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command  |= (EMAC_CR_RX_EN | EMAC_CR_TX_EN);
 637:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC1     |= EMAC_MAC1_REC_EN;
 638:../Source Files/lpc17xx_emac.c **** 
 639:../Source Files/lpc17xx_emac.c **** 	return SUCCESS;
 640:../Source Files/lpc17xx_emac.c **** }
 641:../Source Files/lpc17xx_emac.c **** 
 642:../Source Files/lpc17xx_emac.c **** 
 643:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 644:../Source Files/lpc17xx_emac.c ****  * @brief		De-initializes the EMAC peripheral registers to their
 645:../Source Files/lpc17xx_emac.c **** *                  default reset values.
 646:../Source Files/lpc17xx_emac.c ****  * @param[in]	None
 647:../Source Files/lpc17xx_emac.c ****  * @return 		None
 648:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 649:../Source Files/lpc17xx_emac.c **** void EMAC_DeInit(void)
 650:../Source Files/lpc17xx_emac.c **** {
 227              		.loc 1 650 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 651:../Source Files/lpc17xx_emac.c **** 	// Disable all interrupt
 652:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntEnable = 0x00;
 232              		.loc 1 652 0
 233 00b4 4FF0A043 		mov	r3, #1342177280
 234 00b8 0021     		movs	r1, #0
 653:../Source Files/lpc17xx_emac.c **** 	// Clear all pending interrupt
 654:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntClear = (0xFF) | (EMAC_INT_SOFT_INT | EMAC_INT_WAKEUP);
 235              		.loc 1 654 0
 236 00ba 43F2FF02 		movw	r2, #12543
 655:../Source Files/lpc17xx_emac.c **** 
 656:../Source Files/lpc17xx_emac.c **** 	/* TurnOff clock and power for Ethernet module */
 657:../Source Files/lpc17xx_emac.c **** 	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCENET, DISABLE);
 237              		.loc 1 657 0
 238 00be 4FF08040 		mov	r0, #1073741824
 652:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntEnable = 0x00;
 239              		.loc 1 652 0
 240 00c2 C3F8E41F 		str	r1, [r3, #4068]
 654:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntClear = (0xFF) | (EMAC_INT_SOFT_INT | EMAC_INT_WAKEUP);
 241              		.loc 1 654 0
 242 00c6 C3F8E82F 		str	r2, [r3, #4072]
 658:../Source Files/lpc17xx_emac.c **** }
 243              		.loc 1 658 0
 657:../Source Files/lpc17xx_emac.c **** 	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCENET, DISABLE);
 244              		.loc 1 657 0
 245 00ca FFF7FEBF 		b	CLKPWR_ConfigPPWR
 246              	.LVL16:
 247              		.cfi_endproc
 248              	.LFE65:
 250              		.align	1
 251              		.global	EMAC_CheckPHYStatus
 252              		.thumb
 253              		.thumb_func
 255              	EMAC_CheckPHYStatus:
 256              	.LFB66:
 659:../Source Files/lpc17xx_emac.c **** 
 660:../Source Files/lpc17xx_emac.c **** 
 661:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 662:../Source Files/lpc17xx_emac.c ****  * @brief		Check specified PHY status in EMAC peripheral
 663:../Source Files/lpc17xx_emac.c ****  * @param[in]	ulPHYState	Specified PHY Status Type, should be:
 664:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_PHY_STAT_LINK: Link Status
 665:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_PHY_STAT_SPEED: Speed Status
 666:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_PHY_STAT_DUP: Duplex Status
 667:../Source Files/lpc17xx_emac.c ****  * @return		Status of specified PHY status (0 or 1).
 668:../Source Files/lpc17xx_emac.c ****  * 				(-1) if error.
 669:../Source Files/lpc17xx_emac.c ****  *
 670:../Source Files/lpc17xx_emac.c ****  * Note:
 671:../Source Files/lpc17xx_emac.c ****  * For EMAC_PHY_STAT_LINK, return value:
 672:../Source Files/lpc17xx_emac.c ****  * - 0: Link Down
 673:../Source Files/lpc17xx_emac.c ****  * - 1: Link Up
 674:../Source Files/lpc17xx_emac.c ****  * For EMAC_PHY_STAT_SPEED, return value:
 675:../Source Files/lpc17xx_emac.c ****  * - 0: 10Mbps
 676:../Source Files/lpc17xx_emac.c ****  * - 1: 100Mbps
 677:../Source Files/lpc17xx_emac.c ****  * For EMAC_PHY_STAT_DUP, return value:
 678:../Source Files/lpc17xx_emac.c ****  * - 0: Half-Duplex
 679:../Source Files/lpc17xx_emac.c ****  * - 1: Full-Duplex
 680:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 681:../Source Files/lpc17xx_emac.c **** int32_t EMAC_CheckPHYStatus(uint32_t ulPHYState)
 682:../Source Files/lpc17xx_emac.c **** {
 257              		.loc 1 682 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              	.LVL17:
 262 00ce 10B5     		push	{r4, lr}
 263              	.LCFI1:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 4, -8
 266              		.cfi_offset 14, -4
 267              		.loc 1 682 0
 268 00d0 0446     		mov	r4, r0
 683:../Source Files/lpc17xx_emac.c **** 	int32_t regv, tmp;
 684:../Source Files/lpc17xx_emac.c **** 
 685:../Source Files/lpc17xx_emac.c **** 	regv = read_PHY (EMAC_PHY_REG_STS);
 269              		.loc 1 685 0
 270 00d2 1020     		movs	r0, #16
 271              	.LVL18:
 272 00d4 FFF794FF 		bl	read_PHY
 273              	.LVL19:
 686:../Source Files/lpc17xx_emac.c **** 	switch(ulPHYState)
 274              		.loc 1 686 0
 275 00d8 012C     		cmp	r4, #1
 276 00da 0BD0     		beq	.L19
 277 00dc 07D3     		bcc	.L18
 278 00de 022C     		cmp	r4, #2
 279 00e0 0ED1     		bne	.L22
 687:../Source Files/lpc17xx_emac.c **** 	{
 688:../Source Files/lpc17xx_emac.c **** 	case EMAC_PHY_STAT_LINK:
 689:../Source Files/lpc17xx_emac.c **** 		tmp = (regv & EMAC_PHY_SR_LINK) ? 1 : 0;
 690:../Source Files/lpc17xx_emac.c **** 		break;
 691:../Source Files/lpc17xx_emac.c **** 	case EMAC_PHY_STAT_SPEED:
 692:../Source Files/lpc17xx_emac.c **** 		tmp = (regv & EMAC_PHY_SR_SPEED) ? 0 : 1;
 693:../Source Files/lpc17xx_emac.c **** 		break;
 694:../Source Files/lpc17xx_emac.c **** 	case EMAC_PHY_STAT_DUP:
 695:../Source Files/lpc17xx_emac.c **** 		tmp = (regv & EMAC_PHY_SR_FULL_DUP) ? 1 : 0;
 280              		.loc 1 695 0
 281 00e2 10F4A04F 		tst	r0, #20480
 282 00e6 0CBF     		ite	eq
 283 00e8 0020     		moveq	r0, #0
 284 00ea 0120     		movne	r0, #1
 285              	.LVL20:
 696:../Source Files/lpc17xx_emac.c **** 		break;
 286              		.loc 1 696 0
 287 00ec 10BD     		pop	{r4, pc}
 288              	.LVL21:
 289              	.L18:
 689:../Source Files/lpc17xx_emac.c **** 		tmp = (regv & EMAC_PHY_SR_LINK) ? 1 : 0;
 290              		.loc 1 689 0
 291 00ee 00F00100 		and	r0, r0, #1
 292              	.LVL22:
 690:../Source Files/lpc17xx_emac.c **** 		break;
 293              		.loc 1 690 0
 294 00f2 10BD     		pop	{r4, pc}
 295              	.LVL23:
 296              	.L19:
 692:../Source Files/lpc17xx_emac.c **** 		tmp = (regv & EMAC_PHY_SR_SPEED) ? 0 : 1;
 297              		.loc 1 692 0
 298 00f4 10F0020F 		tst	r0, #2
 299 00f8 14BF     		ite	ne
 300 00fa 0020     		movne	r0, #0
 301 00fc 0120     		moveq	r0, #1
 302              	.LVL24:
 693:../Source Files/lpc17xx_emac.c **** 		break;
 303              		.loc 1 693 0
 304 00fe 10BD     		pop	{r4, pc}
 305              	.LVL25:
 306              	.L22:
 697:../Source Files/lpc17xx_emac.c **** 
 698:../Source Files/lpc17xx_emac.c **** 	default:
 699:../Source Files/lpc17xx_emac.c **** 		tmp = -1;
 307              		.loc 1 699 0
 308 0100 4FF0FF30 		mov	r0, #-1
 309              	.LVL26:
 700:../Source Files/lpc17xx_emac.c **** 		break;
 701:../Source Files/lpc17xx_emac.c **** 	}
 702:../Source Files/lpc17xx_emac.c **** 	return (tmp);
 703:../Source Files/lpc17xx_emac.c **** }
 310              		.loc 1 703 0
 311 0104 10BD     		pop	{r4, pc}
 312              		.cfi_endproc
 313              	.LFE66:
 315              		.align	1
 316              		.global	EMAC_UpdatePHYStatus
 317              		.thumb
 318              		.thumb_func
 320              	EMAC_UpdatePHYStatus:
 321              	.LFB68:
 704:../Source Files/lpc17xx_emac.c **** 
 705:../Source Files/lpc17xx_emac.c **** 
 706:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 707:../Source Files/lpc17xx_emac.c ****  * @brief		Set specified PHY mode in EMAC peripheral
 708:../Source Files/lpc17xx_emac.c ****  * @param[in]	ulPHYMode	Specified PHY mode, should be:
 709:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_MODE_AUTO
 710:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_MODE_10M_FULL
 711:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_MODE_10M_HALF
 712:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_MODE_100M_FULL
 713:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_MODE_100M_HALF
 714:../Source Files/lpc17xx_emac.c ****  * @return		Return (0) if no error, otherwise return (-1)
 715:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 716:../Source Files/lpc17xx_emac.c **** int32_t EMAC_SetPHYMode(uint32_t ulPHYMode)
 717:../Source Files/lpc17xx_emac.c **** {
 718:../Source Files/lpc17xx_emac.c **** 	int32_t id1, id2, tout, regv;
 719:../Source Files/lpc17xx_emac.c **** 
 720:../Source Files/lpc17xx_emac.c **** 	/* Check if this is a DP83848C PHY. */
 721:../Source Files/lpc17xx_emac.c **** 	id1 = read_PHY (EMAC_PHY_REG_IDR1);
 722:../Source Files/lpc17xx_emac.c **** 	id2 = read_PHY (EMAC_PHY_REG_IDR2);
 723:../Source Files/lpc17xx_emac.c **** 
 724:../Source Files/lpc17xx_emac.c **** /*	if (((id1 << 16) | (id2 & 0xFFF0)) == EMAC_DP83848C_ID)
 725:../Source Files/lpc17xx_emac.c **** 	{
 726:../Source Files/lpc17xx_emac.c **** 		switch(ulPHYMode)
 727:../Source Files/lpc17xx_emac.c **** 		{
 728:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_AUTO:
 729:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_AUTO_NEG);
 730:../Source Files/lpc17xx_emac.c **** 
 731:../Source Files/lpc17xx_emac.c **** 			// Wait to complete Auto_Negotiation
 732:../Source Files/lpc17xx_emac.c **** 			for (tout = EMAC_PHY_RESP_TOUT; tout; tout--)
 733:../Source Files/lpc17xx_emac.c **** 			{
 734:../Source Files/lpc17xx_emac.c **** 				regv = read_PHY (EMAC_PHY_REG_BMSR);
 735:../Source Files/lpc17xx_emac.c **** 				if (regv & EMAC_PHY_BMSR_AUTO_DONE)
 736:../Source Files/lpc17xx_emac.c **** 				{
 737:../Source Files/lpc17xx_emac.c **** 					// Auto-negotiation Complete.
 738:../Source Files/lpc17xx_emac.c **** 					printf(LPC_UART0,"Auto-negotiation has completed\n\r");
 739:../Source Files/lpc17xx_emac.c **** 					break;
 740:../Source Files/lpc17xx_emac.c **** 				}
 741:../Source Files/lpc17xx_emac.c **** 				if (tout == 0){
 742:../Source Files/lpc17xx_emac.c **** 					// Time out, return error
 743:../Source Files/lpc17xx_emac.c **** 					return (-1);
 744:../Source Files/lpc17xx_emac.c **** 				}
 745:../Source Files/lpc17xx_emac.c **** 			}
 746:../Source Files/lpc17xx_emac.c **** 			break;
 747:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_10M_FULL:
 748:../Source Files/lpc17xx_emac.c **** 			// Connect at 10MBit full-duplex
 749:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_FULLD_10M);
 750:../Source Files/lpc17xx_emac.c **** 			break;
 751:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_10M_HALF:
 752:../Source Files/lpc17xx_emac.c **** 			// Connect at 10MBit half-duplex
 753:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_HALFD_10M);
 754:../Source Files/lpc17xx_emac.c **** 			break;
 755:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_100M_FULL:
 756:../Source Files/lpc17xx_emac.c **** 			// Connect at 100MBit full-duplex
 757:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_FULLD_100M);
 758:../Source Files/lpc17xx_emac.c **** 			break;
 759:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_100M_HALF:
 760:../Source Files/lpc17xx_emac.c **** 			// Connect at 100MBit half-duplex
 761:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_HALFD_100M);
 762:../Source Files/lpc17xx_emac.c **** 			break;
 763:../Source Files/lpc17xx_emac.c **** 		default:
 764:../Source Files/lpc17xx_emac.c **** 			// un-supported
 765:../Source Files/lpc17xx_emac.c **** 			return (-1);
 766:../Source Files/lpc17xx_emac.c **** 		}
 767:../Source Files/lpc17xx_emac.c **** 	}*/
 768:../Source Files/lpc17xx_emac.c **** 	if (((id1 << 16) | (id2 & 0xFFF0)) == EMAC_KSZ8031_ID)
 769:../Source Files/lpc17xx_emac.c **** 	{
 770:../Source Files/lpc17xx_emac.c **** 		switch(ulPHYMode)
 771:../Source Files/lpc17xx_emac.c **** 		{
 772:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_AUTO:
 773:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_AUTO_NEG);
 774:../Source Files/lpc17xx_emac.c **** 
 775:../Source Files/lpc17xx_emac.c **** 			/* Wait to complete Auto_Negotiation */
 776:../Source Files/lpc17xx_emac.c **** 			for (tout = EMAC_PHY_RESP_TOUT; tout; tout--)
 777:../Source Files/lpc17xx_emac.c **** 			{
 778:../Source Files/lpc17xx_emac.c **** 				regv = read_PHY (EMAC_PHY_REG_BMSR);
 779:../Source Files/lpc17xx_emac.c **** 				if (regv & EMAC_PHY_BMSR_AUTO_DONE)
 780:../Source Files/lpc17xx_emac.c **** 				{
 781:../Source Files/lpc17xx_emac.c **** 					/* Auto-negotiation Complete. */
 782:../Source Files/lpc17xx_emac.c **** 					printf(LPC_UART0,"Auto-negotiation has completed\n\r");
 783:../Source Files/lpc17xx_emac.c **** 					break;
 784:../Source Files/lpc17xx_emac.c **** 				}
 785:../Source Files/lpc17xx_emac.c **** 				if (tout == 0)
 786:../Source Files/lpc17xx_emac.c **** 				{
 787:../Source Files/lpc17xx_emac.c **** 					// Time out, return error
 788:../Source Files/lpc17xx_emac.c **** 					return (-1);
 789:../Source Files/lpc17xx_emac.c **** 				}
 790:../Source Files/lpc17xx_emac.c **** 			}
 791:../Source Files/lpc17xx_emac.c **** 			break;
 792:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_10M_FULL:
 793:../Source Files/lpc17xx_emac.c **** 			/* Connect at 10MBit full-duplex */
 794:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_FULLD_10M);
 795:../Source Files/lpc17xx_emac.c **** 			break;
 796:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_10M_HALF:
 797:../Source Files/lpc17xx_emac.c **** 			/* Connect at 10MBit half-duplex */
 798:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_HALFD_10M);
 799:../Source Files/lpc17xx_emac.c **** 			break;
 800:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_100M_FULL:
 801:../Source Files/lpc17xx_emac.c **** 			/* Connect at 100MBit full-duplex */
 802:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_FULLD_100M);
 803:../Source Files/lpc17xx_emac.c **** 			break;
 804:../Source Files/lpc17xx_emac.c **** 		case EMAC_MODE_100M_HALF:
 805:../Source Files/lpc17xx_emac.c **** 			/* Connect at 100MBit half-duplex */
 806:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_HALFD_100M);
 807:../Source Files/lpc17xx_emac.c **** 			break;
 808:../Source Files/lpc17xx_emac.c **** 		default:
 809:../Source Files/lpc17xx_emac.c **** 			// un-supported
 810:../Source Files/lpc17xx_emac.c **** 			return (-1);
 811:../Source Files/lpc17xx_emac.c **** 		}
 812:../Source Files/lpc17xx_emac.c **** 	}
 813:../Source Files/lpc17xx_emac.c **** 	// It's not correct module ID
 814:../Source Files/lpc17xx_emac.c **** 	else
 815:../Source Files/lpc17xx_emac.c **** 	{
 816:../Source Files/lpc17xx_emac.c **** 		return (-1);
 817:../Source Files/lpc17xx_emac.c **** 	}
 818:../Source Files/lpc17xx_emac.c **** 
 819:../Source Files/lpc17xx_emac.c **** 	// Update EMAC configuration with current PHY status
 820:../Source Files/lpc17xx_emac.c **** 	if (EMAC_UpdatePHYStatus() < 0)
 821:../Source Files/lpc17xx_emac.c **** 	{
 822:../Source Files/lpc17xx_emac.c **** 		return (-1);
 823:../Source Files/lpc17xx_emac.c **** 	}
 824:../Source Files/lpc17xx_emac.c **** 
 825:../Source Files/lpc17xx_emac.c **** 	// Complete
 826:../Source Files/lpc17xx_emac.c **** 	return (0);
 827:../Source Files/lpc17xx_emac.c **** }
 828:../Source Files/lpc17xx_emac.c **** 
 829:../Source Files/lpc17xx_emac.c **** 
 830:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 831:../Source Files/lpc17xx_emac.c ****  * @brief		Auto-Configures value for the EMAC configuration register to
 832:../Source Files/lpc17xx_emac.c ****  * 				match with current PHY mode
 833:../Source Files/lpc17xx_emac.c ****  * @param[in]	None
 834:../Source Files/lpc17xx_emac.c ****  * @return		Return (0) if no error, otherwise return (-1)
 835:../Source Files/lpc17xx_emac.c ****  *
 836:../Source Files/lpc17xx_emac.c ****  * Note: The EMAC configuration will be auto-configured:
 837:../Source Files/lpc17xx_emac.c ****  * 		- Speed mode.
 838:../Source Files/lpc17xx_emac.c ****  * 		- Half/Full duplex mode
 839:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 840:../Source Files/lpc17xx_emac.c **** int32_t EMAC_UpdatePHYStatus(void)
 841:../Source Files/lpc17xx_emac.c **** {
 322              		.loc 1 841 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              	.LVL27:
 327 0106 38B5     		push	{r3, r4, r5, lr}
 328              	.LCFI2:
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 3, -16
 331              		.cfi_offset 4, -12
 332              		.cfi_offset 5, -8
 333              		.cfi_offset 14, -4
 334              		.loc 1 841 0
 335 0108 4FF48014 		mov	r4, #1048576
 336              	.LVL28:
 337              	.L26:
 842:../Source Files/lpc17xx_emac.c **** 	int32_t regv, tout;
 843:../Source Files/lpc17xx_emac.c **** 
 844:../Source Files/lpc17xx_emac.c **** 	/* Check the link status. */
 845:../Source Files/lpc17xx_emac.c **** 	for (tout = EMAC_PHY_RESP_TOUT; tout; tout--)
 846:../Source Files/lpc17xx_emac.c **** 	{
 847:../Source Files/lpc17xx_emac.c **** 		regv = read_PHY (EMAC_PHY_REG_STS);
 338              		.loc 1 847 0
 339 010c 1020     		movs	r0, #16
 340 010e FFF777FF 		bl	read_PHY
 341              	.LVL29:
 848:../Source Files/lpc17xx_emac.c **** 		if(KSZ8031_SEL)
 849:../Source Files/lpc17xx_emac.c **** 		{
 850:../Source Files/lpc17xx_emac.c **** 			regv = read_PHY (EMAC_PHY_REG_BMSR);
 342              		.loc 1 850 0
 343 0112 0120     		movs	r0, #1
 344 0114 FFF774FF 		bl	read_PHY
 345              	.LVL30:
 851:../Source Files/lpc17xx_emac.c **** 		}
 852:../Source Files/lpc17xx_emac.c **** 		if (regv & EMAC_PHY_SR_LINK)
 346              		.loc 1 852 0
 347 0118 C307     		lsls	r3, r0, #31
 850:../Source Files/lpc17xx_emac.c **** 			regv = read_PHY (EMAC_PHY_REG_BMSR);
 348              		.loc 1 850 0
 349 011a 0546     		mov	r5, r0
 350              	.LVL31:
 351              		.loc 1 852 0
 352 011c 04D5     		bpl	.L24
 853:../Source Files/lpc17xx_emac.c **** 		{
 854:../Source Files/lpc17xx_emac.c **** 			/* Link is on. */
 855:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Link is UP\n\r");
 353              		.loc 1 855 0
 354 011e 1A49     		ldr	r1, .L34
 355 0120 1A48     		ldr	r0, .L34+4
 356              	.LVL32:
 357 0122 FFF7FEFF 		bl	printf
 358              	.LVL33:
 856:../Source Files/lpc17xx_emac.c **** 			break;
 359              		.loc 1 856 0
 360 0126 01E0     		b	.L25
 361              	.LVL34:
 362              	.L24:
 845:../Source Files/lpc17xx_emac.c **** 	for (tout = EMAC_PHY_RESP_TOUT; tout; tout--)
 363              		.loc 1 845 0
 364 0128 013C     		subs	r4, r4, #1
 365 012a EFD1     		bne	.L26
 366              	.L25:
 367              	.LVL35:
 857:../Source Files/lpc17xx_emac.c **** 		}
 858:../Source Files/lpc17xx_emac.c **** 		if (tout == 0){
 859:../Source Files/lpc17xx_emac.c **** 			// time out
 860:../Source Files/lpc17xx_emac.c **** 			return (-1);
 861:../Source Files/lpc17xx_emac.c **** 		}
 862:../Source Files/lpc17xx_emac.c **** 	}
 863:../Source Files/lpc17xx_emac.c **** 	/* Configure Full/Half Duplex mode. */
 864:../Source Files/lpc17xx_emac.c **** 	if (regv & EMAC_PHY_SR_DUP)
 368              		.loc 1 864 0
 369 012c 15F0040F 		tst	r5, #4
 865:../Source Files/lpc17xx_emac.c **** 	{
 866:../Source Files/lpc17xx_emac.c **** 	    /* Full duplex is enabled. */
 867:../Source Files/lpc17xx_emac.c **** 		printf(LPC_UART0,"Link is Full Duplex\n\r");
 370              		.loc 1 867 0
 371 0130 1648     		ldr	r0, .L34+4
 372 0132 4FF0A044 		mov	r4, #1342177280
 864:../Source Files/lpc17xx_emac.c **** 	if (regv & EMAC_PHY_SR_DUP)
 373              		.loc 1 864 0
 374 0136 0ED0     		beq	.L27
 375              		.loc 1 867 0
 376 0138 1549     		ldr	r1, .L34+8
 377 013a FFF7FEFF 		bl	printf
 378              	.LVL36:
 868:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->MAC2    |= EMAC_MAC2_FULL_DUP;
 379              		.loc 1 868 0
 380 013e 6068     		ldr	r0, [r4, #4]
 381 0140 40F00101 		orr	r1, r0, #1
 382 0144 6160     		str	r1, [r4, #4]
 869:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->Command |= EMAC_CR_FULL_DUP;
 383              		.loc 1 869 0
 384 0146 D4F80021 		ldr	r2, [r4, #256]
 385 014a 42F48063 		orr	r3, r2, #1024
 386 014e C4F80031 		str	r3, [r4, #256]
 870:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->IPGT     = EMAC_IPGT_FULL_DUP;
 387              		.loc 1 870 0
 388 0152 1523     		movs	r3, #21
 389 0154 03E0     		b	.L32
 390              	.L27:
 871:../Source Files/lpc17xx_emac.c **** 	}
 872:../Source Files/lpc17xx_emac.c **** 	else
 873:../Source Files/lpc17xx_emac.c **** 	{
 874:../Source Files/lpc17xx_emac.c **** 		/* Half duplex mode. */
 875:../Source Files/lpc17xx_emac.c **** 		printf(LPC_UART0,"Link is Half Duplex\n\r");
 391              		.loc 1 875 0
 392 0156 0F49     		ldr	r1, .L34+12
 393 0158 FFF7FEFF 		bl	printf
 394              	.LVL37:
 876:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->IPGT = EMAC_IPGT_HALF_DUP;
 395              		.loc 1 876 0
 396 015c 1223     		movs	r3, #18
 397              	.L32:
 877:../Source Files/lpc17xx_emac.c **** 	}
 878:../Source Files/lpc17xx_emac.c **** 	if (regv & EMAC_PHY_SR_SPEED)
 398              		.loc 1 878 0
 399 015e 15F0020F 		tst	r5, #2
 876:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->IPGT = EMAC_IPGT_HALF_DUP;
 400              		.loc 1 876 0
 401 0162 A360     		str	r3, [r4, #8]
 879:../Source Files/lpc17xx_emac.c **** 	{
 880:../Source Files/lpc17xx_emac.c **** 	    /* 10MBit mode. */
 881:../Source Files/lpc17xx_emac.c **** 		printf(LPC_UART0,"Link is 10MBit\n\r");
 402              		.loc 1 881 0
 403 0164 0948     		ldr	r0, .L34+4
 404 0166 4FF0A044 		mov	r4, #1342177280
 878:../Source Files/lpc17xx_emac.c **** 	if (regv & EMAC_PHY_SR_SPEED)
 405              		.loc 1 878 0
 406 016a 04D0     		beq	.L29
 407              		.loc 1 881 0
 408 016c 0A49     		ldr	r1, .L34+16
 409 016e FFF7FEFF 		bl	printf
 410              	.LVL38:
 882:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->SUPP = 0;
 411              		.loc 1 882 0
 412 0172 0020     		movs	r0, #0
 413 0174 04E0     		b	.L33
 414              	.L29:
 883:../Source Files/lpc17xx_emac.c **** 	}
 884:../Source Files/lpc17xx_emac.c **** 	else
 885:../Source Files/lpc17xx_emac.c **** 	{
 886:../Source Files/lpc17xx_emac.c **** 		/* 100MBit mode. */
 887:../Source Files/lpc17xx_emac.c **** 		printf(LPC_UART0,"Link is 100MBit\n\r");
 415              		.loc 1 887 0
 416 0176 0949     		ldr	r1, .L34+20
 417 0178 FFF7FEFF 		bl	printf
 418              	.LVL39:
 888:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->SUPP = EMAC_SUPP_SPEED;
 419              		.loc 1 888 0
 420 017c 4FF48070 		mov	r0, #256
 421              	.L33:
 422 0180 A061     		str	r0, [r4, #24]
 889:../Source Files/lpc17xx_emac.c **** 	}
 890:../Source Files/lpc17xx_emac.c **** 
 891:../Source Files/lpc17xx_emac.c **** 	// Complete
 892:../Source Files/lpc17xx_emac.c **** 	return (0);
 893:../Source Files/lpc17xx_emac.c **** }
 423              		.loc 1 893 0
 424 0182 0020     		movs	r0, #0
 425 0184 38BD     		pop	{r3, r4, r5, pc}
 426              	.L35:
 427 0186 00BF     		.align	2
 428              	.L34:
 429 0188 00000000 		.word	.LC1
 430 018c 00C00040 		.word	1073790976
 431 0190 0D000000 		.word	.LC2
 432 0194 23000000 		.word	.LC3
 433 0198 39000000 		.word	.LC4
 434 019c 4A000000 		.word	.LC5
 435              		.cfi_endproc
 436              	.LFE68:
 438              		.align	1
 439              		.global	EMAC_SetPHYMode
 440              		.thumb
 441              		.thumb_func
 443              	EMAC_SetPHYMode:
 444              	.LFB67:
 717:../Source Files/lpc17xx_emac.c **** {
 445              		.loc 1 717 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              	.LVL40:
 450 01a0 38B5     		push	{r3, r4, r5, lr}
 451              	.LCFI3:
 452              		.cfi_def_cfa_offset 16
 453              		.cfi_offset 3, -16
 454              		.cfi_offset 4, -12
 455              		.cfi_offset 5, -8
 456              		.cfi_offset 14, -4
 717:../Source Files/lpc17xx_emac.c **** {
 457              		.loc 1 717 0
 458 01a2 0446     		mov	r4, r0
 721:../Source Files/lpc17xx_emac.c **** 	id1 = read_PHY (EMAC_PHY_REG_IDR1);
 459              		.loc 1 721 0
 460 01a4 0220     		movs	r0, #2
 461              	.LVL41:
 462 01a6 FFF72BFF 		bl	read_PHY
 463              	.LVL42:
 464 01aa 0546     		mov	r5, r0
 465              	.LVL43:
 722:../Source Files/lpc17xx_emac.c **** 	id2 = read_PHY (EMAC_PHY_REG_IDR2);
 466              		.loc 1 722 0
 467 01ac 0320     		movs	r0, #3
 468              	.LVL44:
 469 01ae FFF727FF 		bl	read_PHY
 470              	.LVL45:
 768:../Source Files/lpc17xx_emac.c **** 	if (((id1 << 16) | (id2 & 0xFFF0)) == EMAC_KSZ8031_ID)
 471              		.loc 1 768 0
 472 01b2 4FF6F073 		movw	r3, #65520
 473 01b6 0340     		ands	r3, r3, r0
 474 01b8 194A     		ldr	r2, .L52
 475 01ba 43EA0540 		orr	r0, r3, r5, lsl #16
 476              	.LVL46:
 477 01be 9042     		cmp	r0, r2
 478 01c0 2BD1     		bne	.L49
 479              	.L37:
 770:../Source Files/lpc17xx_emac.c **** 		switch(ulPHYMode)
 480              		.loc 1 770 0
 481 01c2 042C     		cmp	r4, #4
 482 01c4 29D8     		bhi	.L49
 483 01c6 DFE804F0 		tbb	[pc, r4]
 484              	.L44:
 485 01ca 03       		.byte	(.L39-.L44)/2
 486 01cb 16       		.byte	(.L40-.L44)/2
 487 01cc 19       		.byte	(.L41-.L44)/2
 488 01cd 1B       		.byte	(.L42-.L44)/2
 489 01ce 1E       		.byte	(.L43-.L44)/2
 490 01cf 00       		.align	1
 491              	.L39:
 773:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_AUTO_NEG);
 492              		.loc 1 773 0
 493 01d0 4FF44050 		mov	r0, #12288
 494 01d4 FFF729FF 		bl	write_PHY.constprop.1
 495              	.LVL47:
 496 01d8 4FF48014 		mov	r4, #1048576
 497              	.LVL48:
 498              	.L47:
 778:../Source Files/lpc17xx_emac.c **** 				regv = read_PHY (EMAC_PHY_REG_BMSR);
 499              		.loc 1 778 0
 500 01dc 0120     		movs	r0, #1
 501 01de FFF70FFF 		bl	read_PHY
 502              	.LVL49:
 779:../Source Files/lpc17xx_emac.c **** 				if (regv & EMAC_PHY_BMSR_AUTO_DONE)
 503              		.loc 1 779 0
 504 01e2 8206     		lsls	r2, r0, #26
 505 01e4 04D5     		bpl	.L45
 782:../Source Files/lpc17xx_emac.c **** 					printf(LPC_UART0,"Auto-negotiation has completed\n\r");
 506              		.loc 1 782 0
 507 01e6 0F49     		ldr	r1, .L52+4
 508 01e8 0F48     		ldr	r0, .L52+8
 509              	.LVL50:
 510 01ea FFF7FEFF 		bl	printf
 511              	.LVL51:
 783:../Source Files/lpc17xx_emac.c **** 					break;
 512              		.loc 1 783 0
 513 01ee 0EE0     		b	.L46
 514              	.LVL52:
 515              	.L45:
 776:../Source Files/lpc17xx_emac.c **** 			for (tout = EMAC_PHY_RESP_TOUT; tout; tout--)
 516              		.loc 1 776 0
 517 01f0 013C     		subs	r4, r4, #1
 518 01f2 F3D1     		bne	.L47
 519 01f4 0BE0     		b	.L46
 520              	.LVL53:
 521              	.L40:
 794:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_FULLD_10M);
 522              		.loc 1 794 0
 523 01f6 4FF48070 		mov	r0, #256
 524 01fa 06E0     		b	.L51
 525              	.L41:
 798:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_HALFD_10M);
 526              		.loc 1 798 0
 527 01fc 0020     		movs	r0, #0
 528 01fe 04E0     		b	.L51
 529              	.L42:
 802:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_FULLD_100M);
 530              		.loc 1 802 0
 531 0200 4FF40450 		mov	r0, #8448
 532 0204 01E0     		b	.L51
 533              	.L43:
 806:../Source Files/lpc17xx_emac.c **** 			write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_HALFD_100M);
 534              		.loc 1 806 0
 535 0206 4FF40050 		mov	r0, #8192
 536              	.L51:
 537 020a FFF70EFF 		bl	write_PHY.constprop.1
 538              	.LVL54:
 539              	.L46:
 820:../Source Files/lpc17xx_emac.c **** 	if (EMAC_UpdatePHYStatus() < 0)
 540              		.loc 1 820 0
 541 020e FFF7FEFF 		bl	EMAC_UpdatePHYStatus
 542              	.LVL55:
 543 0212 0028     		cmp	r0, #0
 544 0214 01DB     		blt	.L49
 826:../Source Files/lpc17xx_emac.c **** 	return (0);
 545              		.loc 1 826 0
 546 0216 0020     		movs	r0, #0
 547 0218 38BD     		pop	{r3, r4, r5, pc}
 548              	.L49:
 810:../Source Files/lpc17xx_emac.c **** 			return (-1);
 549              		.loc 1 810 0
 550 021a 4FF0FF30 		mov	r0, #-1
 827:../Source Files/lpc17xx_emac.c **** }
 551              		.loc 1 827 0
 552 021e 38BD     		pop	{r3, r4, r5, pc}
 553              	.L53:
 554              		.align	2
 555              	.L52:
 556 0220 50152200 		.word	2233680
 557 0224 5C000000 		.word	.LC6
 558 0228 00C00040 		.word	1073790976
 559              		.cfi_endproc
 560              	.LFE67:
 562              		.align	1
 563              		.global	EMAC_Init
 564              		.thumb
 565              		.thumb_func
 567              	EMAC_Init:
 568              	.LFB64:
 542:../Source Files/lpc17xx_emac.c **** {
 569              		.loc 1 542 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              	.LVL56:
 574 022c 70B5     		push	{r4, r5, r6, lr}
 575              	.LCFI4:
 576              		.cfi_def_cfa_offset 16
 577              		.cfi_offset 4, -16
 578              		.cfi_offset 5, -12
 579              		.cfi_offset 6, -8
 580              		.cfi_offset 14, -4
 547:../Source Files/lpc17xx_emac.c **** 	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCENET, ENABLE);
 581              		.loc 1 547 0
 582 022e 0121     		movs	r1, #1
 542:../Source Files/lpc17xx_emac.c **** {
 583              		.loc 1 542 0
 584 0230 0546     		mov	r5, r0
 547:../Source Files/lpc17xx_emac.c **** 	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCENET, ENABLE);
 585              		.loc 1 547 0
 586 0232 4FF08040 		mov	r0, #1073741824
 587              	.LVL57:
 588 0236 FFF7FEFF 		bl	CLKPWR_ConfigPPWR
 589              	.LVL58:
 550:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC1    = EMAC_MAC1_RES_TX | EMAC_MAC1_RES_MCS_TX | EMAC_MAC1_RES_RX |
 590              		.loc 1 550 0
 591 023a 4FF0A043 		mov	r3, #1342177280
 592 023e 4FF44F42 		mov	r2, #52992
 593 0242 1A60     		str	r2, [r3, #0]
 554:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command = EMAC_CR_REG_RES | EMAC_CR_TX_RES | EMAC_CR_RX_RES | EMAC_CR_PASS_RUNT_FRM;
 594              		.loc 1 554 0
 595 0244 7820     		movs	r0, #120
 561:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC1 = EMAC_MAC1_PASS_ALL;
 596              		.loc 1 561 0
 597 0246 0221     		movs	r1, #2
 563:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC2 = EMAC_MAC2_CRC_EN | EMAC_MAC2_PAD_EN;
 598              		.loc 1 563 0
 599 0248 3024     		movs	r4, #48
 566:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAXF = EMAC_ETH_MAX_FLEN;
 600              		.loc 1 566 0
 601 024a 4FF4C062 		mov	r2, #1536
 554:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command = EMAC_CR_REG_RES | EMAC_CR_TX_RES | EMAC_CR_RX_RES | EMAC_CR_PASS_RUNT_FRM;
 602              		.loc 1 554 0
 603 024e C3F80001 		str	r0, [r3, #256]
 604              	.LVL59:
 561:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC1 = EMAC_MAC1_PASS_ALL;
 605              		.loc 1 561 0
 606 0252 1960     		str	r1, [r3, #0]
 563:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC2 = EMAC_MAC2_CRC_EN | EMAC_MAC2_PAD_EN;
 607              		.loc 1 563 0
 608 0254 5C60     		str	r4, [r3, #4]
 566:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAXF = EMAC_ETH_MAX_FLEN;
 609              		.loc 1 566 0
 610 0256 5A61     		str	r2, [r3, #20]
 571:../Source Files/lpc17xx_emac.c **** 	tmp = SystemCoreClock / EMAC_MCFG_MII_MAXCLK;
 611              		.loc 1 571 0
 612 0258 554B     		ldr	r3, .L68
 613 025a 5649     		ldr	r1, .L68+4
 614 025c 1868     		ldr	r0, [r3, #0]
 572:../Source Files/lpc17xx_emac.c **** 	for (tout = 0; tout < sizeof (EMAC_clkdiv); tout++){
 615              		.loc 1 572 0
 616 025e 0023     		movs	r3, #0
 571:../Source Files/lpc17xx_emac.c **** 	tmp = SystemCoreClock / EMAC_MCFG_MII_MAXCLK;
 617              		.loc 1 571 0
 618 0260 B0FBF1F4 		udiv	r4, r0, r1
 619              	.LVL60:
 620              	.L56:
 573:../Source Files/lpc17xx_emac.c **** 		if (EMAC_clkdiv[tout] >= tmp) break;
 621              		.loc 1 573 0
 622 0264 544A     		ldr	r2, .L68+8
 623 0266 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 624 0268 A042     		cmp	r0, r4
 625 026a 02DA     		bge	.L55
 572:../Source Files/lpc17xx_emac.c **** 	for (tout = 0; tout < sizeof (EMAC_clkdiv); tout++){
 626              		.loc 1 572 0
 627 026c 0133     		adds	r3, r3, #1
 628              	.LVL61:
 629 026e 072B     		cmp	r3, #7
 630 0270 F8D1     		bne	.L56
 631              	.LVL62:
 632              	.L55:
 575:../Source Files/lpc17xx_emac.c **** 	tout++;
 633              		.loc 1 575 0
 634 0272 591C     		adds	r1, r3, #1
 635              	.LVL63:
 577:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MCFG = EMAC_MCFG_CLK_SEL(tout) | EMAC_MCFG_RES_MII;
 636              		.loc 1 577 0
 637 0274 8C00     		lsls	r4, r1, #2
 638              	.LVL64:
 639 0276 4FF0A040 		mov	r0, #1342177280
 640 027a 44F40042 		orr	r2, r4, #32768
 641 027e 0262     		str	r2, [r0, #32]
 579:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MCFG &= ~(EMAC_MCFG_RES_MII);
 642              		.loc 1 579 0
 643 0280 036A     		ldr	r3, [r0, #32]
 582:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->CLRT = EMAC_CLRT_DEF;
 644              		.loc 1 582 0
 645 0282 43F20F74 		movw	r4, #14095
 579:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MCFG &= ~(EMAC_MCFG_RES_MII);
 646              		.loc 1 579 0
 647 0286 23F40041 		bic	r1, r3, #32768
 648              	.LVL65:
 649 028a 0162     		str	r1, [r0, #32]
 584:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IPGR = EMAC_IPGR_P2_DEF;
 650              		.loc 1 584 0
 651 028c 1222     		movs	r2, #18
 582:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->CLRT = EMAC_CLRT_DEF;
 652              		.loc 1 582 0
 653 028e 0461     		str	r4, [r0, #16]
 589:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command = EMAC_CR_RMII | EMAC_CR_PASS_RUNT_FRM;
 654              		.loc 1 589 0
 655 0290 4FF41073 		mov	r3, #576
 592:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SUPP = EMAC_SUPP_RES_RMII;
 656              		.loc 1 592 0
 657 0294 4FF40061 		mov	r1, #2048
 595:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SUPP = 0;
 658              		.loc 1 595 0
 659 0298 0024     		movs	r4, #0
 584:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IPGR = EMAC_IPGR_P2_DEF;
 660              		.loc 1 584 0
 661 029a C260     		str	r2, [r0, #12]
 589:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command = EMAC_CR_RMII | EMAC_CR_PASS_RUNT_FRM;
 662              		.loc 1 589 0
 663 029c C0F80031 		str	r3, [r0, #256]
 592:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SUPP = EMAC_SUPP_RES_RMII;
 664              		.loc 1 592 0
 665 02a0 8161     		str	r1, [r0, #24]
 666              	.LVL66:
 595:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SUPP = 0;
 667              		.loc 1 595 0
 668 02a2 8461     		str	r4, [r0, #24]
 598:../Source Files/lpc17xx_emac.c **** 	write_PHY (EMAC_PHY_REG_BMCR, EMAC_PHY_BMCR_RESET);
 669              		.loc 1 598 0
 670 02a4 4FF40040 		mov	r0, #32768
 671 02a8 FFF7BFFE 		bl	write_PHY.constprop.1
 672              	.LVL67:
 673 02ac 4FF48014 		mov	r4, #1048576
 674              	.LVL68:
 675              	.L58:
 602:../Source Files/lpc17xx_emac.c **** 		regv = read_PHY (EMAC_PHY_REG_BMCR);
 676              		.loc 1 602 0
 677 02b0 0020     		movs	r0, #0
 678 02b2 FFF7A5FE 		bl	read_PHY
 679              	.LVL69:
 603:../Source Files/lpc17xx_emac.c **** 		if (!(regv & (EMAC_PHY_BMCR_RESET | EMAC_PHY_BMCR_POWERDOWN))) {
 680              		.loc 1 603 0
 681 02b6 10F4084F 		tst	r0, #34816
 682 02ba 01D0     		beq	.L57
 601:../Source Files/lpc17xx_emac.c **** 	for (tout = EMAC_PHY_RESP_TOUT; tout; tout--) {
 683              		.loc 1 601 0
 684 02bc 013C     		subs	r4, r4, #1
 685 02be F7D1     		bne	.L58
 686              	.L57:
 614:../Source Files/lpc17xx_emac.c **** 	if (EMAC_SetPHYMode(EMAC_ConfigStruct->Mode) < 0)
 687              		.loc 1 614 0
 688 02c0 2868     		ldr	r0, [r5, #0]
 689              	.LVL70:
 690 02c2 FFF7FEFF 		bl	EMAC_SetPHYMode
 691              	.LVL71:
 692 02c6 0028     		cmp	r0, #0
 693 02c8 6FDB     		blt	.L61
 620:../Source Files/lpc17xx_emac.c **** 	setEmacAddr(EMAC_ConfigStruct->pbEMAC_Addr);
 694              		.loc 1 620 0
 695 02ca 6D68     		ldr	r5, [r5, #4]
 696              	.LVL72:
 697              	.LBB10:
 698              	.LBB11:
 386:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SA0 = ((uint32_t)abStationAddr[5] << 8) | (uint32_t)abStationAddr[4];
 699              		.loc 1 386 0
 700 02cc 4FF0A042 		mov	r2, #1342177280
 701 02d0 6E79     		ldrb	r6, [r5, #5]	@ zero_extendqisi2
 702 02d2 2879     		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 703 02d4 40EA0623 		orr	r3, r0, r6, lsl #8
 704 02d8 1364     		str	r3, [r2, #64]
 387:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SA1 = ((uint32_t)abStationAddr[3] << 8) | (uint32_t)abStationAddr[2];
 705              		.loc 1 387 0
 706 02da EC78     		ldrb	r4, [r5, #3]	@ zero_extendqisi2
 707 02dc A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 708 02de 41EA0426 		orr	r6, r1, r4, lsl #8
 709 02e2 5664     		str	r6, [r2, #68]
 388:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->SA2 = ((uint32_t)abStationAddr[1] << 8) | (uint32_t)abStationAddr[0];
 710              		.loc 1 388 0
 711 02e4 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 712 02e6 2D78     		ldrb	r5, [r5, #0]	@ zero_extendqisi2
 713              	.LVL73:
 714 02e8 45EA0023 		orr	r3, r5, r0, lsl #8
 715 02ec 9364     		str	r3, [r2, #72]
 716              	.LVL74:
 717 02ee 0023     		movs	r3, #0
 277:../Source Files/lpc17xx_emac.c **** 	for (i = 0; i < EMAC_NUM_RX_FRAG; i++)
 718              		.loc 1 277 0
 719 02f0 1C46     		mov	r4, r3
 720              	.LVL75:
 721              	.L60:
 722              	.LBE11:
 723              	.LBE10:
 724              	.LBB12:
 725              	.LBB13:
 279:../Source Files/lpc17xx_emac.c **** 		Rx_Desc[i].Packet  = (uint32_t)&rx_buf[i];
 726              		.loc 1 279 0
 727 02f2 3248     		ldr	r0, .L68+12
 728 02f4 4FF4C061 		mov	r1, #1536
 729 02f8 00F12002 		add	r2, r0, #32
 730 02fc 01FB0426 		mla	r6, r1, r4, r2
 280:../Source Files/lpc17xx_emac.c **** 		Rx_Desc[i].Ctrl    = EMAC_RCTRL_INT | (EMAC_ETH_MAX_FLEN - 1);
 731              		.loc 1 280 0
 732 0300 2F4A     		ldr	r2, .L68+16
 541:../Source Files/lpc17xx_emac.c **** Status EMAC_Init(EMAC_CFG_Type *EMAC_ConfigStruct)
 733              		.loc 1 541 0
 734 0302 C518     		adds	r5, r0, r3
 279:../Source Files/lpc17xx_emac.c **** 		Rx_Desc[i].Packet  = (uint32_t)&rx_buf[i];
 735              		.loc 1 279 0
 736 0304 1E50     		str	r6, [r3, r0]
 280:../Source Files/lpc17xx_emac.c **** 		Rx_Desc[i].Ctrl    = EMAC_RCTRL_INT | (EMAC_ETH_MAX_FLEN - 1);
 737              		.loc 1 280 0
 738 0306 6A60     		str	r2, [r5, #4]
 281:../Source Files/lpc17xx_emac.c **** 		Rx_Stat[i].Info    = 0;
 739              		.loc 1 281 0
 740 0308 2E4A     		ldr	r2, .L68+20
 741 030a 0021     		movs	r1, #0
 742 030c 02F5E565 		add	r5, r2, #1832
 277:../Source Files/lpc17xx_emac.c **** 	for (i = 0; i < EMAC_NUM_RX_FRAG; i++)
 743              		.loc 1 277 0
 744 0310 0134     		adds	r4, r4, #1
 745              	.LVL76:
 281:../Source Files/lpc17xx_emac.c **** 		Rx_Stat[i].Info    = 0;
 746              		.loc 1 281 0
 747 0312 5951     		str	r1, [r3, r5]
 541:../Source Files/lpc17xx_emac.c **** Status EMAC_Init(EMAC_CFG_Type *EMAC_ConfigStruct)
 748              		.loc 1 541 0
 749 0314 EE18     		adds	r6, r5, r3
 750 0316 0833     		adds	r3, r3, #8
 277:../Source Files/lpc17xx_emac.c **** 	for (i = 0; i < EMAC_NUM_RX_FRAG; i++)
 751              		.loc 1 277 0
 752 0318 042C     		cmp	r4, #4
 282:../Source Files/lpc17xx_emac.c **** 		Rx_Stat[i].HashCRC = 0;
 753              		.loc 1 282 0
 754 031a 7160     		str	r1, [r6, #4]
 277:../Source Files/lpc17xx_emac.c **** 	for (i = 0; i < EMAC_NUM_RX_FRAG; i++)
 755              		.loc 1 277 0
 756 031c E9D1     		bne	.L60
 286:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxDescriptor       = (uint32_t)&Rx_Desc[0];
 757              		.loc 1 286 0
 758 031e 4FF0A043 		mov	r3, #1342177280
 759 0322 C3F80801 		str	r0, [r3, #264]
 760              	.LBE13:
 761              	.LBE12:
 762              	.LBB15:
 763              	.LBB16:
 307:../Source Files/lpc17xx_emac.c **** 		Tx_Desc[i].Packet = (uint32_t)&tx_buf[i];
 764              		.loc 1 307 0
 765 0326 02F5EC64 		add	r4, r2, #1888
 766              	.LVL77:
 767              	.LBE16:
 768              	.LBE15:
 769              	.LBB19:
 770              	.LBB14:
 288:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxDescriptorNumber = EMAC_NUM_RX_FRAG - 1;
 771              		.loc 1 288 0
 772 032a 0320     		movs	r0, #3
 287:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxStatus           = (uint32_t)&Rx_Stat[0];
 773              		.loc 1 287 0
 774 032c C3F80C51 		str	r5, [r3, #268]
 288:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxDescriptorNumber = EMAC_NUM_RX_FRAG - 1;
 775              		.loc 1 288 0
 776 0330 C3F81001 		str	r0, [r3, #272]
 291:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxConsumeIndex  = 0;
 777              		.loc 1 291 0
 778 0334 C3F81811 		str	r1, [r3, #280]
 779              	.LVL78:
 780              	.LBE14:
 781              	.LBE19:
 782              	.LBB20:
 783              	.LBB17:
 309:../Source Files/lpc17xx_emac.c **** 		Tx_Stat[i].Info   = 0;
 784              		.loc 1 309 0
 785 0338 2348     		ldr	r0, .L68+24
 307:../Source Files/lpc17xx_emac.c **** 		Tx_Desc[i].Packet = (uint32_t)&tx_buf[i];
 786              		.loc 1 307 0
 787 033a C2F84847 		str	r4, [r2, #1864]
 788 033e 02F55664 		add	r4, r2, #3424
 789 0342 C2F85047 		str	r4, [r2, #1872]
 790 0346 02F59B54 		add	r4, r2, #4960
 308:../Source Files/lpc17xx_emac.c **** 		Tx_Desc[i].Ctrl   = 0;
 791              		.loc 1 308 0
 792 034a C2F84C17 		str	r1, [r2, #1868]
 309:../Source Files/lpc17xx_emac.c **** 		Tx_Stat[i].Info   = 0;
 793              		.loc 1 309 0
 794 034e C0F86818 		str	r1, [r0, #2152]
 795              	.LVL79:
 308:../Source Files/lpc17xx_emac.c **** 		Tx_Desc[i].Ctrl   = 0;
 796              		.loc 1 308 0
 797 0352 C2F85417 		str	r1, [r2, #1876]
 309:../Source Files/lpc17xx_emac.c **** 		Tx_Stat[i].Info   = 0;
 798              		.loc 1 309 0
 799 0356 C0F86C18 		str	r1, [r0, #2156]
 800              	.LVL80:
 308:../Source Files/lpc17xx_emac.c **** 		Tx_Desc[i].Ctrl   = 0;
 801              		.loc 1 308 0
 802 035a C2F85C17 		str	r1, [r2, #1884]
 309:../Source Files/lpc17xx_emac.c **** 		Tx_Stat[i].Info   = 0;
 803              		.loc 1 309 0
 804 035e C0F87018 		str	r1, [r0, #2160]
 805              	.LVL81:
 307:../Source Files/lpc17xx_emac.c **** 		Tx_Desc[i].Packet = (uint32_t)&tx_buf[i];
 806              		.loc 1 307 0
 807 0362 C2F85847 		str	r4, [r2, #1880]
 314:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxStatus           = (uint32_t)&Tx_Stat[0];
 808              		.loc 1 314 0
 809 0366 1948     		ldr	r0, .L68+28
 313:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxDescriptor       = (uint32_t)&Tx_Desc[0];
 810              		.loc 1 313 0
 811 0368 02F5E962 		add	r2, r2, #1864
 812 036c C3F81C21 		str	r2, [r3, #284]
 315:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxDescriptorNumber = EMAC_NUM_TX_FRAG - 1;
 813              		.loc 1 315 0
 814 0370 0222     		movs	r2, #2
 314:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxStatus           = (uint32_t)&Tx_Stat[0];
 815              		.loc 1 314 0
 816 0372 C3F82001 		str	r0, [r3, #288]
 315:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxDescriptorNumber = EMAC_NUM_TX_FRAG - 1;
 817              		.loc 1 315 0
 818 0376 C3F82421 		str	r2, [r3, #292]
 819              	.LBE17:
 820              	.LBE20:
 630:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntEnable = EMAC_INT_RX_DONE | EMAC_INT_TX_DONE;
 821              		.loc 1 630 0
 822 037a 8820     		movs	r0, #136
 823              	.LBB21:
 824              	.LBB18:
 318:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxProduceIndex  = 0;
 825              		.loc 1 318 0
 826 037c C3F82811 		str	r1, [r3, #296]
 827              	.LBE18:
 828              	.LBE21:
 633:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntClear  = 0xFFFF;
 829              		.loc 1 633 0
 830 0380 4FF6FF72 		movw	r2, #65535
 627:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxFilterCtrl = EMAC_RFC_MCAST_EN | EMAC_RFC_BCAST_EN | EMAC_RFC_PERFECT_EN;
 831              		.loc 1 627 0
 832 0384 2621     		movs	r1, #38
 833 0386 C3F80012 		str	r1, [r3, #512]
 630:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntEnable = EMAC_INT_RX_DONE | EMAC_INT_TX_DONE;
 834              		.loc 1 630 0
 835 038a C3F8E40F 		str	r0, [r3, #4068]
 633:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->IntClear  = 0xFFFF;
 836              		.loc 1 633 0
 837 038e C3F8E82F 		str	r2, [r3, #4072]
 636:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command  |= (EMAC_CR_RX_EN | EMAC_CR_TX_EN);
 838              		.loc 1 636 0
 839 0392 D3F80011 		ldr	r1, [r3, #256]
 840 0396 41F00300 		orr	r0, r1, #3
 841 039a C3F80001 		str	r0, [r3, #256]
 637:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC1     |= EMAC_MAC1_REC_EN;
 842              		.loc 1 637 0
 843 039e 1A68     		ldr	r2, [r3, #0]
 639:../Source Files/lpc17xx_emac.c **** 	return SUCCESS;
 844              		.loc 1 639 0
 845 03a0 0120     		movs	r0, #1
 637:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->MAC1     |= EMAC_MAC1_REC_EN;
 846              		.loc 1 637 0
 847 03a2 42F00101 		orr	r1, r2, #1
 848 03a6 1960     		str	r1, [r3, #0]
 639:../Source Files/lpc17xx_emac.c **** 	return SUCCESS;
 849              		.loc 1 639 0
 850 03a8 70BD     		pop	{r4, r5, r6, pc}
 851              	.LVL82:
 852              	.L61:
 616:../Source Files/lpc17xx_emac.c **** 		return (ERROR);
 853              		.loc 1 616 0
 854 03aa 0020     		movs	r0, #0
 640:../Source Files/lpc17xx_emac.c **** }
 855              		.loc 1 640 0
 856 03ac 70BD     		pop	{r4, r5, r6, pc}
 857              	.L69:
 858 03ae 00BF     		.align	2
 859              	.L68:
 860 03b0 00000000 		.word	SystemCoreClock
 861 03b4 A0252600 		.word	2500000
 862 03b8 00000000 		.word	.LANCHOR0
 863 03bc 00000000 		.word	.LANCHOR1
 864 03c0 FF050080 		.word	-2147482113
 865 03c4 F8100000 		.word	.LANCHOR2
 866 03c8 F0210000 		.word	.LANCHOR3
 867 03cc 582A0000 		.word	.LANCHOR3+2152
 868              		.cfi_endproc
 869              	.LFE64:
 871              		.align	1
 872              		.global	EMAC_Config
 873              		.thumb
 874              		.thumb_func
 876              	EMAC_Config:
 877              	.LFB63:
 449:../Source Files/lpc17xx_emac.c **** {
 878              		.loc 1 449 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 24
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882 03d0 30B5     		push	{r4, r5, lr}
 883              	.LCFI5:
 884              		.cfi_def_cfa_offset 12
 885              		.cfi_offset 4, -12
 886              		.cfi_offset 5, -8
 887              		.cfi_offset 14, -4
 457:../Source Files/lpc17xx_emac.c **** 	uint8_t EMACAddr[] = {MYMAC_6, MYMAC_5, MYMAC_4, MYMAC_3, MYMAC_2, MYMAC_1};
 888              		.loc 1 457 0
 889 03d2 424B     		ldr	r3, .L74
 449:../Source Files/lpc17xx_emac.c **** {
 890              		.loc 1 449 0
 891 03d4 8BB0     		sub	sp, sp, #44
 892              	.LCFI6:
 893              		.cfi_def_cfa_offset 56
 457:../Source Files/lpc17xx_emac.c **** 	uint8_t EMACAddr[] = {MYMAC_6, MYMAC_5, MYMAC_4, MYMAC_3, MYMAC_2, MYMAC_1};
 894              		.loc 1 457 0
 895 03d6 1868     		ldr	r0, [r3, #0]	@ unaligned
 896 03d8 9988     		ldrh	r1, [r3, #4]	@ unaligned
 473:../Source Files/lpc17xx_emac.c **** 	PinCfg.OpenDrain = 0;
 897              		.loc 1 473 0
 898 03da 0024     		movs	r4, #0
 472:../Source Files/lpc17xx_emac.c **** 	PinCfg.Funcnum = 1;
 899              		.loc 1 472 0
 900 03dc 0125     		movs	r5, #1
 457:../Source Files/lpc17xx_emac.c **** 	uint8_t EMACAddr[] = {MYMAC_6, MYMAC_5, MYMAC_4, MYMAC_3, MYMAC_2, MYMAC_1};
 901              		.loc 1 457 0
 902 03de 0690     		str	r0, [sp, #24]	@ unaligned
 478:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 903              		.loc 1 478 0
 904 03e0 04A8     		add	r0, sp, #16
 457:../Source Files/lpc17xx_emac.c **** 	uint8_t EMACAddr[] = {MYMAC_6, MYMAC_5, MYMAC_4, MYMAC_3, MYMAC_2, MYMAC_1};
 905              		.loc 1 457 0
 906 03e2 ADF81C10 		strh	r1, [sp, #28]	@ unaligned
 472:../Source Files/lpc17xx_emac.c **** 	PinCfg.Funcnum = 1;
 907              		.loc 1 472 0
 908 03e6 8DF81250 		strb	r5, [sp, #18]
 473:../Source Files/lpc17xx_emac.c **** 	PinCfg.OpenDrain = 0;
 909              		.loc 1 473 0
 910 03ea 8DF81440 		strb	r4, [sp, #20]
 474:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinmode = 0;
 911              		.loc 1 474 0
 912 03ee 8DF81340 		strb	r4, [sp, #19]
 475:../Source Files/lpc17xx_emac.c **** 	PinCfg.Portnum = 1;
 913              		.loc 1 475 0
 914 03f2 8DF81050 		strb	r5, [sp, #16]
 477:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 0;
 915              		.loc 1 477 0
 916 03f6 8DF81140 		strb	r4, [sp, #17]
 478:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 917              		.loc 1 478 0
 918 03fa FFF7FEFF 		bl	PINSEL_ConfigPin
 919              	.LVL83:
 480:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 920              		.loc 1 480 0
 921 03fe 04A8     		add	r0, sp, #16
 479:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 1;
 922              		.loc 1 479 0
 923 0400 8DF81150 		strb	r5, [sp, #17]
 480:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 924              		.loc 1 480 0
 925 0404 FFF7FEFF 		bl	PINSEL_ConfigPin
 926              	.LVL84:
 481:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 4;
 927              		.loc 1 481 0
 928 0408 0422     		movs	r2, #4
 482:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 929              		.loc 1 482 0
 930 040a 04A8     		add	r0, sp, #16
 481:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 4;
 931              		.loc 1 481 0
 932 040c 8DF81120 		strb	r2, [sp, #17]
 482:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 933              		.loc 1 482 0
 934 0410 FFF7FEFF 		bl	PINSEL_ConfigPin
 935              	.LVL85:
 483:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 8;
 936              		.loc 1 483 0
 937 0414 0823     		movs	r3, #8
 484:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 938              		.loc 1 484 0
 939 0416 04A8     		add	r0, sp, #16
 483:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 8;
 940              		.loc 1 483 0
 941 0418 8DF81130 		strb	r3, [sp, #17]
 484:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 942              		.loc 1 484 0
 943 041c FFF7FEFF 		bl	PINSEL_ConfigPin
 944              	.LVL86:
 485:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 9;
 945              		.loc 1 485 0
 946 0420 0920     		movs	r0, #9
 947 0422 8DF81100 		strb	r0, [sp, #17]
 486:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 948              		.loc 1 486 0
 949 0426 04A8     		add	r0, sp, #16
 950 0428 FFF7FEFF 		bl	PINSEL_ConfigPin
 951              	.LVL87:
 487:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 10;
 952              		.loc 1 487 0
 953 042c 0A21     		movs	r1, #10
 488:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 954              		.loc 1 488 0
 955 042e 04A8     		add	r0, sp, #16
 487:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 10;
 956              		.loc 1 487 0
 957 0430 8DF81110 		strb	r1, [sp, #17]
 488:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 958              		.loc 1 488 0
 959 0434 FFF7FEFF 		bl	PINSEL_ConfigPin
 960              	.LVL88:
 489:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 14;
 961              		.loc 1 489 0
 962 0438 0E22     		movs	r2, #14
 490:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 963              		.loc 1 490 0
 964 043a 04A8     		add	r0, sp, #16
 489:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 14;
 965              		.loc 1 489 0
 966 043c 8DF81120 		strb	r2, [sp, #17]
 490:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 967              		.loc 1 490 0
 968 0440 FFF7FEFF 		bl	PINSEL_ConfigPin
 969              	.LVL89:
 491:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 15;
 970              		.loc 1 491 0
 971 0444 0F23     		movs	r3, #15
 492:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 972              		.loc 1 492 0
 973 0446 04A8     		add	r0, sp, #16
 491:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 15;
 974              		.loc 1 491 0
 975 0448 8DF81130 		strb	r3, [sp, #17]
 492:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 976              		.loc 1 492 0
 977 044c FFF7FEFF 		bl	PINSEL_ConfigPin
 978              	.LVL90:
 493:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 16;
 979              		.loc 1 493 0
 980 0450 1020     		movs	r0, #16
 981 0452 8DF81100 		strb	r0, [sp, #17]
 494:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 982              		.loc 1 494 0
 983 0456 6844     		add	r0, sp, r0
 984 0458 FFF7FEFF 		bl	PINSEL_ConfigPin
 985              	.LVL91:
 495:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 17;
 986              		.loc 1 495 0
 987 045c 1121     		movs	r1, #17
 496:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 988              		.loc 1 496 0
 989 045e 04A8     		add	r0, sp, #16
 495:../Source Files/lpc17xx_emac.c **** 	PinCfg.Pinnum = 17;
 990              		.loc 1 495 0
 991 0460 8DF81110 		strb	r1, [sp, #17]
 496:../Source Files/lpc17xx_emac.c **** 	PINSEL_ConfigPin(&PinCfg);
 992              		.loc 1 496 0
 993 0464 FFF7FEFF 		bl	PINSEL_ConfigPin
 994              	.LVL92:
 498:../Source Files/lpc17xx_emac.c **** 	printf(LPC_UART0,"Init EMAC module\n\r");
 995              		.loc 1 498 0
 996 0468 1D49     		ldr	r1, .L74+4
 997 046a 1E48     		ldr	r0, .L74+8
 998 046c FFF7FEFF 		bl	printf
 999              	.LVL93:
 499:../Source Files/lpc17xx_emac.c **** 	printf(LPC_UART0,"MAC[1..6] addr: %x02-%x02-%x02-%x02-%x02-%x02 \n\r", \
 1000              		.loc 1 499 0
 1001 0470 9DF81A00 		ldrb	r0, [sp, #26]	@ zero_extendqisi2
 1002 0474 9DF81B10 		ldrb	r1, [sp, #27]	@ zero_extendqisi2
 1003 0478 0090     		str	r0, [sp, #0]
 1004 047a 0191     		str	r1, [sp, #4]
 1005 047c 9DF81C00 		ldrb	r0, [sp, #28]	@ zero_extendqisi2
 1006 0480 9DF81D10 		ldrb	r1, [sp, #29]	@ zero_extendqisi2
 1007 0484 9DF81820 		ldrb	r2, [sp, #24]	@ zero_extendqisi2
 1008 0488 0290     		str	r0, [sp, #8]
 1009 048a 0391     		str	r1, [sp, #12]
 1010 048c 9DF81930 		ldrb	r3, [sp, #25]	@ zero_extendqisi2
 1011 0490 1448     		ldr	r0, .L74+8
 1012 0492 1549     		ldr	r1, .L74+12
 1013 0494 FFF7FEFF 		bl	printf
 1014              	.LVL94:
 504:../Source Files/lpc17xx_emac.c **** 	Emac_Config.pbEMAC_Addr = EMACAddr;
 1015              		.loc 1 504 0
 1016 0498 06AA     		add	r2, sp, #24
 503:../Source Files/lpc17xx_emac.c **** 	Emac_Config.Mode = EMAC_MODE_AUTO;
 1017              		.loc 1 503 0
 1018 049a 0894     		str	r4, [sp, #32]
 504:../Source Files/lpc17xx_emac.c **** 	Emac_Config.pbEMAC_Addr = EMACAddr;
 1019              		.loc 1 504 0
 1020 049c 0992     		str	r2, [sp, #36]
 1021              	.L71:
 506:../Source Files/lpc17xx_emac.c **** 	while (EMAC_Init(&Emac_Config) == ERROR)
 1022              		.loc 1 506 0 discriminator 1
 1023 049e 08A8     		add	r0, sp, #32
 1024 04a0 FFF7FEFF 		bl	EMAC_Init
 1025              	.LVL95:
 1026 04a4 20B9     		cbnz	r0, .L73
 1027              	.L72:
 509:../Source Files/lpc17xx_emac.c **** 		printf(LPC_UART0,"Error during initializing EMAC, restart after a while\n\r");
 1028              		.loc 1 509 0
 1029 04a6 1149     		ldr	r1, .L74+16
 1030 04a8 0E48     		ldr	r0, .L74+8
 1031 04aa FFF7FEFF 		bl	printf
 1032              	.LVL96:
 1033 04ae F6E7     		b	.L71
 1034              	.LVL97:
 1035              	.L73:
 1036              	.LBB28:
 1037              	.LBB29:
 894:../Source Files/lpc17xx_emac.c **** 
 895:../Source Files/lpc17xx_emac.c **** 
 896:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 897:../Source Files/lpc17xx_emac.c ****  * @brief		Enable/Disable hash filter functionality for specified destination
 898:../Source Files/lpc17xx_emac.c ****  * 				MAC address in EMAC module
 899:../Source Files/lpc17xx_emac.c ****  * @param[in]	dstMAC_addr		Pointer to the first MAC destination address, should
 900:../Source Files/lpc17xx_emac.c ****  * 								be 6-bytes length, in order LSB to the MSB
 901:../Source Files/lpc17xx_emac.c ****  * @param[in]	NewState		New State of this command, should be:
 902:../Source Files/lpc17xx_emac.c ****  *									- ENABLE.
 903:../Source Files/lpc17xx_emac.c ****  *									- DISABLE.
 904:../Source Files/lpc17xx_emac.c ****  * @return		None
 905:../Source Files/lpc17xx_emac.c ****  *
 906:../Source Files/lpc17xx_emac.c ****  * Note:
 907:../Source Files/lpc17xx_emac.c ****  * The standard Ethernet cyclic redundancy check (CRC) function is calculated from
 908:../Source Files/lpc17xx_emac.c ****  * the 6 byte destination address in the Ethernet frame (this CRC is calculated
 909:../Source Files/lpc17xx_emac.c ****  * anyway as part of calculating the CRC of the whole frame), then bits [28:23] out of
 910:../Source Files/lpc17xx_emac.c ****  * the 32 bits CRC result are taken to form the hash. The 6 bit hash is used to access
 911:../Source Files/lpc17xx_emac.c ****  * the hash table: it is used as an index in the 64 bit HashFilter register that has been
 912:../Source Files/lpc17xx_emac.c ****  * programmed with accept values. If the selected accept value is 1, the frame is
 913:../Source Files/lpc17xx_emac.c ****  * accepted.
 914:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 915:../Source Files/lpc17xx_emac.c **** void EMAC_SetHashFilter(uint8_t dstMAC_addr[], FunctionalState NewState)
 916:../Source Files/lpc17xx_emac.c **** {
 917:../Source Files/lpc17xx_emac.c **** 	uint32_t *pReg;
 918:../Source Files/lpc17xx_emac.c **** 	uint32_t tmp;
 919:../Source Files/lpc17xx_emac.c **** 	int32_t crc;
 920:../Source Files/lpc17xx_emac.c **** 
 921:../Source Files/lpc17xx_emac.c **** 	// Calculate the CRC from the destination MAC address
 922:../Source Files/lpc17xx_emac.c **** 	crc = emac_CRCCalc(dstMAC_addr, 6);
 923:../Source Files/lpc17xx_emac.c **** 	// Extract the value from CRC to get index value for hash filter table
 924:../Source Files/lpc17xx_emac.c **** 	crc = (crc >> 23) & 0x3F;
 925:../Source Files/lpc17xx_emac.c **** 
 926:../Source Files/lpc17xx_emac.c **** 	pReg = (crc > 31) ? ((uint32_t *)&LPC_EMAC->HashFilterH) \
 927:../Source Files/lpc17xx_emac.c **** 								: ((uint32_t *)&LPC_EMAC->HashFilterL);
 928:../Source Files/lpc17xx_emac.c **** 	tmp = (crc > 31) ? (crc - 32) : crc;
 929:../Source Files/lpc17xx_emac.c **** 	if (NewState == ENABLE) {
 930:../Source Files/lpc17xx_emac.c **** 		(*pReg) |= (1UL << tmp);
 931:../Source Files/lpc17xx_emac.c **** 	} else {
 932:../Source Files/lpc17xx_emac.c **** 		(*pReg) &= ~(1UL << tmp);
 933:../Source Files/lpc17xx_emac.c **** 	}
 934:../Source Files/lpc17xx_emac.c **** 	// Enable Rx Filter
 935:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command &= ~EMAC_CR_PASS_RX_FILT;
 936:../Source Files/lpc17xx_emac.c **** }
 937:../Source Files/lpc17xx_emac.c **** 
 938:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 939:../Source Files/lpc17xx_emac.c ****  * @brief		Enable/Disable Filter mode for each specified type EMAC peripheral
 940:../Source Files/lpc17xx_emac.c ****  * @param[in]	ulFilterMode	Filter mode, should be:
 941:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_RFC_UCAST_EN: all frames of unicast types
 942:../Source Files/lpc17xx_emac.c ****  * 								will be accepted
 943:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_RFC_BCAST_EN: broadcast frame will be
 944:../Source Files/lpc17xx_emac.c ****  * 								accepted
 945:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_RFC_MCAST_EN: all frames of multicast
 946:../Source Files/lpc17xx_emac.c ****  * 								types will be accepted
 947:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_RFC_UCAST_HASH_EN: The imperfect hash
 948:../Source Files/lpc17xx_emac.c ****  * 								filter will be applied to unicast addresses
 949:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_RFC_MCAST_HASH_EN: The imperfect hash
 950:../Source Files/lpc17xx_emac.c ****  * 								filter will be applied to multicast addresses
 951:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_RFC_PERFECT_EN: the destination address
 952:../Source Files/lpc17xx_emac.c ****  * 								will be compared with the 6 byte station address
 953:../Source Files/lpc17xx_emac.c ****  * 								programmed in the station address by the filter
 954:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_RFC_MAGP_WOL_EN: the result of the magic
 955:../Source Files/lpc17xx_emac.c ****  * 								packet filter will generate a WoL interrupt when
 956:../Source Files/lpc17xx_emac.c ****  * 								there is a match
 957:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_RFC_PFILT_WOL_EN: the result of the perfect address
 958:../Source Files/lpc17xx_emac.c ****  * 								matching filter and the imperfect hash filter will
 959:../Source Files/lpc17xx_emac.c ****  * 								generate a WoL interrupt when there is a match
 960:../Source Files/lpc17xx_emac.c ****  * @param[in]	NewState	New State of this command, should be:
 961:../Source Files/lpc17xx_emac.c ****  * 								- ENABLE
 962:../Source Files/lpc17xx_emac.c ****  * 								- DISABLE
 963:../Source Files/lpc17xx_emac.c ****  * @return		None
 964:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 965:../Source Files/lpc17xx_emac.c **** void EMAC_SetFilterMode(uint32_t ulFilterMode, FunctionalState NewState)
 966:../Source Files/lpc17xx_emac.c **** {
 967:../Source Files/lpc17xx_emac.c **** 	if (NewState == ENABLE){
 968:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->RxFilterCtrl |= ulFilterMode;
 969:../Source Files/lpc17xx_emac.c **** 	} else {
 970:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->RxFilterCtrl &= ~ulFilterMode;
 971:../Source Files/lpc17xx_emac.c **** 	}
 972:../Source Files/lpc17xx_emac.c **** }
 973:../Source Files/lpc17xx_emac.c **** 
 974:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
 975:../Source Files/lpc17xx_emac.c ****  * @brief		Get status of Wake On LAN Filter for each specified
 976:../Source Files/lpc17xx_emac.c ****  * 				type in EMAC peripheral, clear this status if it is set
 977:../Source Files/lpc17xx_emac.c ****  * @param[in]	ulWoLMode	WoL Filter mode, should be:
 978:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_WOL_UCAST: unicast frames caused WoL
 979:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_WOL_UCAST: broadcast frame caused WoL
 980:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_WOL_MCAST: multicast frame caused WoL
 981:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_WOL_UCAST_HASH: unicast frame that passes the
 982:../Source Files/lpc17xx_emac.c ****  * 								imperfect hash filter caused WoL
 983:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_WOL_MCAST_HASH: multicast frame that passes the
 984:../Source Files/lpc17xx_emac.c ****  * 								imperfect hash filter caused WoL
 985:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_WOL_PERFECT:perfect address matching filter
 986:../Source Files/lpc17xx_emac.c ****  * 								caused WoL
 987:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_WOL_RX_FILTER: the receive filter caused WoL
 988:../Source Files/lpc17xx_emac.c ****  * 								- EMAC_WOL_MAG_PACKET: the magic packet filter caused WoL
 989:../Source Files/lpc17xx_emac.c ****  * @return		SET/RESET
 990:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
 991:../Source Files/lpc17xx_emac.c **** FlagStatus EMAC_GetWoLStatus(uint32_t ulWoLMode)
 992:../Source Files/lpc17xx_emac.c **** {
 993:../Source Files/lpc17xx_emac.c **** 	if (LPC_EMAC->RxFilterWoLStatus & ulWoLMode) {
 994:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->RxFilterWoLClear = ulWoLMode;
 995:../Source Files/lpc17xx_emac.c **** 		return SET;
 996:../Source Files/lpc17xx_emac.c **** 	} else {
 997:../Source Files/lpc17xx_emac.c **** 		return RESET;
 998:../Source Files/lpc17xx_emac.c **** 	}
 999:../Source Files/lpc17xx_emac.c **** }
1000:../Source Files/lpc17xx_emac.c **** 
1001:../Source Files/lpc17xx_emac.c **** 
1002:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1003:../Source Files/lpc17xx_emac.c ****  * @brief		Write data to Tx packet data buffer at current index due to
1004:../Source Files/lpc17xx_emac.c ****  * 				TxProduceIndex
1005:../Source Files/lpc17xx_emac.c ****  * @param[in]	pDataStruct		Pointer to a EMAC_PACKETBUF_Type structure
1006:../Source Files/lpc17xx_emac.c ****  * 							data that contain specified information about
1007:../Source Files/lpc17xx_emac.c ****  * 							Packet data buffer.
1008:../Source Files/lpc17xx_emac.c ****  * @return		None
1009:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1010:../Source Files/lpc17xx_emac.c **** void EMAC_WritePacketBuffer(EMAC_PACKETBUF_Type *pDataStruct)
1011:../Source Files/lpc17xx_emac.c **** {
1012:../Source Files/lpc17xx_emac.c **** 	uint32_t idx,len;
1013:../Source Files/lpc17xx_emac.c **** 	uint32_t *sp,*dp;
1014:../Source Files/lpc17xx_emac.c **** 
1015:../Source Files/lpc17xx_emac.c **** 	idx = LPC_EMAC->TxProduceIndex;
1016:../Source Files/lpc17xx_emac.c **** 	sp  = (uint32_t *)pDataStruct->pbDataBuf;
1017:../Source Files/lpc17xx_emac.c **** 	dp  = (uint32_t *)Tx_Desc[idx].Packet;
1018:../Source Files/lpc17xx_emac.c **** 	/* Copy frame data to EMAC packet buffers. */
1019:../Source Files/lpc17xx_emac.c **** 	for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
1020:../Source Files/lpc17xx_emac.c **** 		*dp++ = *sp++;
1021:../Source Files/lpc17xx_emac.c **** 	}
1022:../Source Files/lpc17xx_emac.c **** 	Tx_Desc[idx].Ctrl = (pDataStruct->ulDataLen - 1) | (EMAC_TCTRL_INT | EMAC_TCTRL_LAST);
1023:../Source Files/lpc17xx_emac.c **** }
1024:../Source Files/lpc17xx_emac.c **** 
1025:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1026:../Source Files/lpc17xx_emac.c ****  * @brief		Read data from Rx packet data buffer at current index due
1027:../Source Files/lpc17xx_emac.c ****  * 				to RxConsumeIndex
1028:../Source Files/lpc17xx_emac.c ****  * @param[in]	pDataStruct		Pointer to a EMAC_PACKETBUF_Type structure
1029:../Source Files/lpc17xx_emac.c ****  * 							data that contain specified information about
1030:../Source Files/lpc17xx_emac.c ****  * 							Packet data buffer.
1031:../Source Files/lpc17xx_emac.c ****  * @return		None
1032:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1033:../Source Files/lpc17xx_emac.c **** void EMAC_ReadPacketBuffer(EMAC_PACKETBUF_Type *pDataStruct)
1034:../Source Files/lpc17xx_emac.c **** {
1035:../Source Files/lpc17xx_emac.c **** 	uint32_t idx, len;
1036:../Source Files/lpc17xx_emac.c **** 	uint32_t *dp, *sp;
1037:../Source Files/lpc17xx_emac.c **** 
1038:../Source Files/lpc17xx_emac.c **** 	idx = LPC_EMAC->RxConsumeIndex;
1039:../Source Files/lpc17xx_emac.c **** 	dp = (uint32_t *)pDataStruct->pbDataBuf;
1040:../Source Files/lpc17xx_emac.c **** 	sp = (uint32_t *)Rx_Desc[idx].Packet;
1041:../Source Files/lpc17xx_emac.c **** 
1042:../Source Files/lpc17xx_emac.c **** 	if (pDataStruct->pbDataBuf != NULL) {
1043:../Source Files/lpc17xx_emac.c **** 		for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
1044:../Source Files/lpc17xx_emac.c **** 			*dp++ = *sp++;
1045:../Source Files/lpc17xx_emac.c **** 		}
1046:../Source Files/lpc17xx_emac.c **** 	}
1047:../Source Files/lpc17xx_emac.c **** }
1048:../Source Files/lpc17xx_emac.c **** 
1049:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1050:../Source Files/lpc17xx_emac.c ****  * @brief 		Enable/Disable interrupt for each type in EMAC
1051:../Source Files/lpc17xx_emac.c ****  * @param[in]	ulIntType	Interrupt Type, should be:
1052:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_RX_OVERRUN: Receive Overrun
1053:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_RX_ERR: Receive Error
1054:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_RX_FIN: Receive Descriptor Finish
1055:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_RX_DONE: Receive Done
1056:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_TX_UNDERRUN: Transmit Under-run
1057:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_TX_ERR: Transmit Error
1058:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_TX_FIN: Transmit descriptor finish
1059:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_TX_DONE: Transmit Done
1060:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_SOFT_INT: Software interrupt
1061:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_WAKEUP: Wakeup interrupt
1062:../Source Files/lpc17xx_emac.c ****  * @param[in]	NewState	New State of this function, should be:
1063:../Source Files/lpc17xx_emac.c ****  * 							- ENABLE.
1064:../Source Files/lpc17xx_emac.c ****  * 							- DISABLE.
1065:../Source Files/lpc17xx_emac.c ****  * @return		None
1066:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1067:../Source Files/lpc17xx_emac.c **** void EMAC_IntCmd(uint32_t ulIntType, FunctionalState NewState)
1068:../Source Files/lpc17xx_emac.c **** {
1069:../Source Files/lpc17xx_emac.c **** 	if (NewState == ENABLE) {
1070:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->IntEnable |= ulIntType;
 1038              		.loc 1 1070 0
 1039 04b0 4FF0A043 		mov	r3, #1342177280
 1040 04b4 D3F8E40F 		ldr	r0, [r3, #4068]
 1041              	.LBE29:
 1042              	.LBE28:
 1043              	.LBB31:
 1044              	.LBB32:
 1045              		.file 2 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\CM3 Core/core_cm3.h"
   1:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /**************************************************************************//**
   2:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @file     core_cm3.h
   3:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @version  V2.01
   5:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @date     06. December 2010
   6:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  *
   7:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @note
   8:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  *
  10:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @par
  11:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  *
  15:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @par
  16:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  *
  22:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  ******************************************************************************/
  23:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #if defined ( __ICCARM__ )
  24:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif
  26:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  27:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #ifdef __cplusplus
  28:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  extern "C" {
  29:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif
  30:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  31:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  34:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  35:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*******************************************************************************
  36:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  *                 CMSIS definitions
  37:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  ******************************************************************************/
  38:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** @ingroup  CMSIS
  39:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  40:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  41:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****    - CMSIS version number
  42:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****    - Cortex-M core
  43:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****    - Cortex-M core Revision Number
  44:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
  45:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
  46:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  47:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*  CMSIS CM3 definitions */
  48:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  49:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  50:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  51:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  52:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  53:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  54:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  55:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #if defined ( __CC_ARM   )
  56:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  57:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  58:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  59:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #elif defined ( __ICCARM__ )
  60:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  61:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  62:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  63:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #elif defined   (  __GNUC__  )
  64:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  65:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  66:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  67:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #elif defined   (  __TASKING__  )
  68:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  69:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  70:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  71:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif
  72:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  73:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  74:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  75:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  76:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  77:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  78:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  79:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  80:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #ifndef __CMSIS_GENERIC
  81:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  82:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  83:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  84:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  85:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  86:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #ifdef __cplusplus
  87:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  88:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #else
  89:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  90:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif
  91:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
  92:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
  93:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  94:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@} end of group CMSIS_core_definitions */
  95:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  96:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  97:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
  98:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*******************************************************************************
  99:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  *                 Register Abstraction
 100:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  ******************************************************************************/
 101:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 102:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** @ingroup  CMSIS
 103:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 104:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Core Register contain:
 105:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core Register
 106:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core NVIC Register
 107:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core SCB Register
 108:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core SysTick Register
 109:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core Debug Register
 110:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core MPU Register
 111:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** */
 112:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 113:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_core_register
 114:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 115:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 116:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 117:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 118:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 119:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 120:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 121:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef union
 122:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 123:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   struct
 124:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   {
 125:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #if (__CORTEX_M != 0x04)
 126:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 127:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #else
 128:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 129:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 130:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 131:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif
 132:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 133:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 134:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 135:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 136:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 137:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 138:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 139:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } APSR_Type;
 140:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 141:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 142:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 143:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 144:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef union
 145:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 146:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   struct
 147:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   {
 148:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 149:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 150:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 151:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 152:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } IPSR_Type;
 153:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 154:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 155:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 156:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 157:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef union
 158:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 159:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   struct
 160:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   {
 161:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 162:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #if (__CORTEX_M != 0x04)
 163:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 164:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #else
 165:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 166:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 167:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 168:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif
 169:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 170:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 171:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 172:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 173:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 174:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 175:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 176:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 177:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 178:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } xPSR_Type;
 179:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 180:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 181:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 182:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 183:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef union
 184:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 185:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   struct
 186:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   {
 187:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 188:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 189:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 190:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 191:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 192:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 193:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } CONTROL_Type;
 194:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 195:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@} end of group CMSIS_CORE */
 196:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 197:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 198:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_core_register
 199:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 200:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 201:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 202:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 203:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 204:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 205:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 206:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef struct
 207:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 208:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 209:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED0[24];
 210:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 211:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RSERVED1[24];
 212:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 213:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED2[24];
 214:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 215:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED3[24];
 216:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 217:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED4[56];
 218:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 219:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED5[644];
 220:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 221:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** }  NVIC_Type;
 222:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 223:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@} end of group CMSIS_NVIC */
 224:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 225:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 226:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_core_register
 227:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 228:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 229:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 230:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 231:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 232:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 233:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 234:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef struct
 235:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 236:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 237:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 238:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 239:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 240:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 241:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 242:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 243:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 244:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 245:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 246:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 247:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 248:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 249:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 250:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 251:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 252:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 253:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 254:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 255:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } SCB_Type;
 256:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 257:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB CPUID Register Definitions */
 258:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 259:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 260:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 261:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 262:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 263:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 264:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 265:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 266:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 267:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 268:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 269:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 270:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 271:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 272:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 273:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 274:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 275:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 276:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 277:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 278:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 279:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 280:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 281:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 282:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 283:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 284:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 285:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 286:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 287:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 288:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 289:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 290:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 291:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 292:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 293:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 294:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 295:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 296:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 297:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 298:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 299:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 300:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 301:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 302:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 303:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 304:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 305:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 306:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 307:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 308:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 309:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 310:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 311:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 312:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 313:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 314:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 315:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 316:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 317:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 318:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 319:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 320:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 321:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 322:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 323:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 324:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 325:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 326:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 327:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 328:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 329:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 330:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB System Control Register Definitions */
 331:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 332:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 333:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 334:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 335:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 336:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 337:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 338:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 339:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 340:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB Configuration Control Register Definitions */
 341:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 342:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 343:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 344:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 345:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 346:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 347:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 348:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 349:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 350:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 351:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 352:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 353:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 354:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 355:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 356:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 357:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 358:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 359:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 360:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 361:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 362:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 363:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 364:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 365:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 366:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 367:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 368:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 369:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 370:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 371:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 372:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 373:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 374:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 375:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 376:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 377:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 378:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 379:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 380:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 381:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 382:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 383:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 384:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 385:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 386:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 387:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 388:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 389:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 390:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 391:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 392:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 393:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 394:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 395:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 396:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 397:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 398:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 399:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 400:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 401:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 402:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 403:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 404:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 405:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 406:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 407:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 408:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 409:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 410:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 411:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 412:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 413:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 414:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 415:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 416:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 417:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 418:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 419:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 420:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 421:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 422:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 423:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 424:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 425:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 426:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 427:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 428:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 429:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 430:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 431:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 432:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 433:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 434:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 435:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 436:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 437:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 438:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@} end of group CMSIS_SCB */
 439:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 440:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 441:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_core_register
 442:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 443:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 444:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 445:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 446:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 447:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 448:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 449:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef struct
 450:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 451:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 452:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 453:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 454:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 455:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } SysTick_Type;
 456:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 457:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SysTick Control / Status Register Definitions */
 458:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 459:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 460:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 461:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 462:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 463:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 464:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 465:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 466:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 467:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 468:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 469:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 470:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SysTick Reload Register Definitions */
 471:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 472:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 473:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 474:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SysTick Current Register Definitions */
 475:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 476:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 477:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 478:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* SysTick Calibration Register Definitions */
 479:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 480:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 481:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 482:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 483:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 484:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 485:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 486:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 487:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 488:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@} end of group CMSIS_SysTick */
 489:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 490:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 491:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_core_register
 492:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 493:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 494:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 495:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 496:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 497:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 498:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 499:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef struct
 500:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 501:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __O  union
 502:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   {
 503:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 504:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 505:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 506:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 507:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED0[864];
 508:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 509:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED1[15];
 510:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 511:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED2[15];
 512:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 513:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED3[29];
 514:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 515:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 516:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 517:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED4[43];
 518:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 519:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 520:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED5[6];
 521:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 522:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 523:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 524:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 525:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 526:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 527:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 528:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 529:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 530:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 531:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 532:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 533:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } ITM_Type;
 534:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 535:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 536:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 537:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 538:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 539:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* ITM Trace Control Register Definitions */
 540:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 541:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 542:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 543:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 544:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 545:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 546:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 547:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 548:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 549:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 550:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 551:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 552:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 553:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 554:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 555:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 556:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 557:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 558:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 559:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 560:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 561:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 562:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 563:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 564:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* ITM Integration Write Register Definitions */
 565:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 566:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 567:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 568:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* ITM Integration Read Register Definitions */
 569:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 570:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 571:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 572:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 573:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 574:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 575:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 576:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* ITM Lock Status Register Definitions */
 577:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 578:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 579:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 580:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 581:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 582:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 583:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 584:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 585:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 586:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 587:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 588:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 589:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_core_register
 590:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 591:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 592:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 593:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 594:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 595:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 596:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 597:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef struct
 598:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 599:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED0;
 600:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 601:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 602:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 603:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #else
 604:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****        uint32_t RESERVED1;
 605:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif
 606:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } InterruptType_Type;
 607:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 608:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 609:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 610:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 611:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 612:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* Auxiliary Control Register Definitions */
 613:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 614:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 615:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 616:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 617:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 618:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 619:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 620:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 621:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 622:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 623:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 624:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 625:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #if (__MPU_PRESENT == 1)
 626:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_core_register
 627:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 628:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 629:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 630:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 631:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 632:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 633:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 634:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef struct
 635:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 636:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 637:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 638:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 639:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 640:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 641:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 642:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 643:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 644:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 645:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 646:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 647:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } MPU_Type;
 648:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 649:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* MPU Type Register */
 650:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 651:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 652:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 653:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 654:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 655:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 656:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 657:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 658:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 659:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* MPU Control Register */
 660:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 661:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 662:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 663:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 664:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 665:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 666:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 667:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 668:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 669:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* MPU Region Number Register */
 670:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 671:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 672:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 673:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* MPU Region Base Address Register */
 674:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 675:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 676:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 677:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 678:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 679:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 680:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 681:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 682:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 683:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* MPU Region Attribute and Size Register */
 684:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 685:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 686:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 687:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 688:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 689:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 690:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 691:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 692:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 693:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 694:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 695:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 696:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 697:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 698:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 699:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 700:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 701:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 702:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 703:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 704:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 705:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 706:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 707:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 708:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 709:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 710:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 711:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@} end of group CMSIS_MPU */
 712:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif
 713:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 714:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 715:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_core_register
 716:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 717:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 718:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 719:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 720:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 721:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 722:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 723:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** typedef struct
 724:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 725:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 726:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 727:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 728:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 729:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** } CoreDebug_Type;
 730:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 731:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* Debug Halting Control and Status Register */
 732:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 733:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 734:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 735:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 736:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 737:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 738:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 739:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 740:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 741:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 742:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 743:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 744:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 745:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 746:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 747:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 748:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 749:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 750:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 751:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 752:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 753:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 754:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 755:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 756:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 757:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 758:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 759:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 760:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 761:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 762:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 763:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 764:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 765:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 766:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 767:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 768:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* Debug Core Register Selector Register */
 769:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 770:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 771:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 772:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 773:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 774:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 775:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* Debug Exception and Monitor Control Register */
 776:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 777:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 778:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 779:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 780:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 781:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 782:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 783:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 784:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 785:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 786:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 787:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 788:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 789:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 790:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 791:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 792:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 793:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 794:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 795:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 796:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 797:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 798:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 799:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 800:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 801:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 802:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 803:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 804:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 805:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 806:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 807:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 808:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 809:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 810:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 811:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 812:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 813:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 814:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 815:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 816:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 817:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 818:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_core_register
 819:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 820:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 821:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 822:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 823:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 824:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 825:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 826:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 827:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 828:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 829:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 830:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 831:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 832:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 833:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 834:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 835:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 836:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 837:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #if (__MPU_PRESENT == 1)
 838:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 839:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 840:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** #endif
 841:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 842:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*@} */
 843:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 844:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 845:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 846:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /*******************************************************************************
 847:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  *                Hardware Abstraction Layer
 848:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  ******************************************************************************/
 849:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS
 850:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 851:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Core Function Interface contains:
 852:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core NVIC Functions
 853:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core SysTick Functions
 854:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core Debug Functions
 855:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   - Core Register Access Functions
 856:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** */
 857:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 858:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 859:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 860:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 861:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 862:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 863:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   @{
 864:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 865:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 866:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  * @{
 867:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 868:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Set Priority Grouping
 869:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 870:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 871:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 872:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Only values from 0..7 are used.
 873:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   In case of a conflict between priority grouping and available
 874:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 875:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 876:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 877:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 878:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 879:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 880:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   uint32_t reg_value;
 881:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 882:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 883:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 884:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 885:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   reg_value  =  (reg_value                       |
 886:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 887:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 888:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   SCB->AIRCR =  reg_value;
 889:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** }
 890:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 891:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 892:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Get Priority Grouping
 893:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 894:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 895:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 896:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 897:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \return                Priority grouping field
 898:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 899:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 900:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 901:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 902:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** }
 903:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 904:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 905:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Enable External Interrupt
 906:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 907:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 908:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     The interrupt number cannot be a negative value.
 909:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 910:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 911:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 912:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 913:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 914:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 915:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** }
 916:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 917:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 918:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Disable External Interrupt
 919:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 920:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 921:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     The interrupt number cannot be a negative value.
 922:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 923:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 924:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 925:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 926:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 927:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 928:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** }
 929:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 930:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 931:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Get Pending Interrupt
 932:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 933:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     This function reads the pending register in the NVIC and returns the pending bit
 934:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     for the specified interrupt.
 935:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 936:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 937:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \return             0  Interrupt status is not pending
 938:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \return             1  Interrupt status is pending
 939:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 940:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 941:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 942:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
 943:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** }
 944:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 945:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 946:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Set Pending Interrupt
 947:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 948:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     This function sets the pending bit for the specified interrupt.
 949:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     The interrupt number cannot be a negative value.
 950:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 951:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 952:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 953:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 954:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 955:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
 956:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** }
 957:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 958:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 959:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Clear Pending Interrupt
 960:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 961:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     This function clears the pending bit for the specified interrupt.
 962:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     The interrupt number cannot be a negative value.
 963:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 964:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 965:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 966:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 967:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 968:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 969:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** }
 970:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 971:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 972:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Get Active Interrupt
 973:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 974:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     This function reads the active register in NVIC and returns the active bit.
 975:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get active
 976:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \return             0  Interrupt status is not active
 977:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \return             1  Interrupt status is active
 978:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 979:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
 980:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 981:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
 982:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** }
 983:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 984:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 985:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** /** \brief  Set Interrupt Priority
 986:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 987:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     This function sets the priority for the specified interrupt. The interrupt
 988:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     number can be positive to specify an external (device specific)
 989:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
 990:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 991:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     Note: The priority cannot be set for every core interrupt.
 992:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** 
 993:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set priority
 994:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     \param [in]  priority  Priority to set
 995:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****  */
 996:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 997:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h **** {
 998:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   if(IRQn < 0) {
 999:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1000:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   else {
1001:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 1046              		.loc 2 1001 0
 1047 04b8 0022     		movs	r2, #0
 1048              	.LBE32:
 1049              	.LBE31:
 1050              	.LBB35:
 1051              	.LBB30:
 1052              		.loc 1 1070 0
 1053 04ba 40F0FF01 		orr	r1, r0, #255
 1054 04be C3F8E41F 		str	r1, [r3, #4068]
 1055              	.LVL98:
 1056              	.LBE30:
 1057              	.LBE35:
 1058              	.LBB36:
 1059              	.LBB33:
 1060              		.loc 2 1001 0
 1061 04c2 0B4B     		ldr	r3, .L74+20
 1062              	.LBE33:
 1063              	.LBE36:
 1064              	.LBB37:
 1065              	.LBB38:
 914:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 1066              		.loc 2 914 0
 1067 04c4 4FF08050 		mov	r0, #268435456
 1068              	.LBE38:
 1069              	.LBE37:
 1070              	.LBB40:
 1071              	.LBB34:
 1072              		.loc 2 1001 0
 1073 04c8 83F81C23 		strb	r2, [r3, #796]
 1074              	.LVL99:
 1075              	.LBE34:
 1076              	.LBE40:
 518:../Source Files/lpc17xx_emac.c **** 	printf(LPC_UART0,"Initialize EMAC complete\n\r");
 1077              		.loc 1 518 0
 1078 04cc 0949     		ldr	r1, .L74+24
 1079              	.LBB41:
 1080              	.LBB39:
 914:C:\E_Workspace\LPC1768\Eg8_TFT\CM3 Core\core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 1081              		.loc 2 914 0
 1082 04ce 1860     		str	r0, [r3, #0]
 1083              	.LBE39:
 1084              	.LBE41:
 518:../Source Files/lpc17xx_emac.c **** 	printf(LPC_UART0,"Initialize EMAC complete\n\r");
 1085              		.loc 1 518 0
 1086 04d0 0448     		ldr	r0, .L74+8
 1087 04d2 FFF7FEFF 		bl	printf
 1088              	.LVL100:
 519:../Source Files/lpc17xx_emac.c **** }
 1089              		.loc 1 519 0
 1090 04d6 0BB0     		add	sp, sp, #44
 1091 04d8 30BD     		pop	{r4, r5, pc}
 1092              	.L75:
 1093 04da 00BF     		.align	2
 1094              	.L74:
 1095 04dc 07000000 		.word	.LANCHOR0+7
 1096 04e0 7D000000 		.word	.LC7
 1097 04e4 00C00040 		.word	1073790976
 1098 04e8 90000000 		.word	.LC8
 1099 04ec C1000000 		.word	.LC9
 1100 04f0 00E100E0 		.word	-536813312
 1101 04f4 F9000000 		.word	.LC10
 1102              		.cfi_endproc
 1103              	.LFE63:
 1105              		.align	1
 1106              		.global	EMAC_SetHashFilter
 1107              		.thumb
 1108              		.thumb_func
 1110              	EMAC_SetHashFilter:
 1111              	.LFB69:
 916:../Source Files/lpc17xx_emac.c **** {
 1112              		.loc 1 916 0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 0
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 1116              	.LVL101:
 1117 04f8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1118              	.LCFI7:
 1119              		.cfi_def_cfa_offset 24
 1120              		.cfi_offset 4, -24
 1121              		.cfi_offset 5, -20
 1122              		.cfi_offset 6, -16
 1123              		.cfi_offset 7, -12
 1124              		.cfi_offset 8, -8
 1125              		.cfi_offset 14, -4
 405:../Source Files/lpc17xx_emac.c **** 	crc = 0xFFFFFFFF;
 1126              		.loc 1 405 0
 1127 04fc 4FF0FF33 		mov	r3, #-1
 406:../Source Files/lpc17xx_emac.c **** 	for (i = 0; i < frame_len; i++) {
 1128              		.loc 1 406 0
 1129 0500 0024     		movs	r4, #0
 1130              	.LVL102:
 1131              	.L82:
 1132              	.LBB44:
 1133              	.LBB45:
 407:../Source Files/lpc17xx_emac.c **** 		byte = *frame_no_fcs++;
 1134              		.loc 1 407 0
 1135 0502 025D     		ldrb	r2, [r0, r4]	@ zero_extendqisi2
 1136              	.LVL103:
 1137 0504 0225     		movs	r5, #2
 1138              	.LVL104:
 1139              	.L81:
 409:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 28) ^ (byte >> 3)) & 0x00000001) {
 1140              		.loc 1 409 0
 1141 0506 1E17     		asrs	r6, r3, #28
 1142 0508 86EAD207 		eor	r7, r6, r2, lsr #3
 410:../Source Files/lpc17xx_emac.c **** 				q3 = 0x04C11DB7;
 1143              		.loc 1 410 0
 1144 050c 254E     		ldr	r6, .L98
 409:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 28) ^ (byte >> 3)) & 0x00000001) {
 1145              		.loc 1 409 0
 1146 050e 17F0010F 		tst	r7, #1
 410:../Source Files/lpc17xx_emac.c **** 				q3 = 0x04C11DB7;
 1147              		.loc 1 410 0
 1148 0512 0CBF     		ite	eq
 1149 0514 4FF00008 		moveq	r8, #0
 1150 0518 B046     		movne	r8, r6
 1151              	.LVL105:
 414:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 29) ^ (byte >> 2)) & 0x00000001) {
 1152              		.loc 1 414 0
 1153 051a 5F17     		asrs	r7, r3, #29
 1154 051c 87EA9206 		eor	r6, r7, r2, lsr #2
 415:../Source Files/lpc17xx_emac.c **** 				q2 = 0x09823B6E;
 1155              		.loc 1 415 0
 1156 0520 214F     		ldr	r7, .L98+4
 414:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 29) ^ (byte >> 2)) & 0x00000001) {
 1157              		.loc 1 414 0
 1158 0522 16F0010F 		tst	r6, #1
 415:../Source Files/lpc17xx_emac.c **** 				q2 = 0x09823B6E;
 1159              		.loc 1 415 0
 1160 0526 0CBF     		ite	eq
 1161 0528 4FF0000C 		moveq	ip, #0
 1162 052c BC46     		movne	ip, r7
 1163              	.LVL106:
 419:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 30) ^ (byte >> 1)) & 0x00000001) {
 1164              		.loc 1 419 0
 1165 052e 9E17     		asrs	r6, r3, #30
 1166 0530 86EA5207 		eor	r7, r6, r2, lsr #1
 1167 0534 17F0010F 		tst	r7, #1
 420:../Source Files/lpc17xx_emac.c **** 				q1 = 0x130476DC;
 1168              		.loc 1 420 0
 1169 0538 1C4F     		ldr	r7, .L98+8
 424:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 31) ^ (byte >> 0)) & 0x00000001) {
 1170              		.loc 1 424 0
 1171 053a 82EAE376 		eor	r6, r2, r3, asr #31
 420:../Source Files/lpc17xx_emac.c **** 				q1 = 0x130476DC;
 1172              		.loc 1 420 0
 1173 053e 08BF     		it	eq
 1174 0540 0027     		moveq	r7, #0
 1175              	.LVL107:
 429:../Source Files/lpc17xx_emac.c **** 			crc = (crc << 4) ^ q3 ^ q2 ^ q1 ^ q0;
 1176              		.loc 1 429 0
 1177 0542 88EA0313 		eor	r3, r8, r3, lsl #4
 1178              	.LVL108:
 424:../Source Files/lpc17xx_emac.c **** 			if (((crc >> 31) ^ (byte >> 0)) & 0x00000001) {
 1179              		.loc 1 424 0
 1180 0546 16F0010F 		tst	r6, #1
 425:../Source Files/lpc17xx_emac.c **** 				q0 = 0x2608EDB8;
 1181              		.loc 1 425 0
 1182 054a 194E     		ldr	r6, .L98+12
 429:../Source Files/lpc17xx_emac.c **** 			crc = (crc << 4) ^ q3 ^ q2 ^ q1 ^ q0;
 1183              		.loc 1 429 0
 1184 054c 83EA0C03 		eor	r3, r3, ip
 425:../Source Files/lpc17xx_emac.c **** 				q0 = 0x2608EDB8;
 1185              		.loc 1 425 0
 1186 0550 08BF     		it	eq
 1187 0552 0026     		moveq	r6, #0
 1188              	.LVL109:
 429:../Source Files/lpc17xx_emac.c **** 			crc = (crc << 4) ^ q3 ^ q2 ^ q1 ^ q0;
 1189              		.loc 1 429 0
 1190 0554 7B40     		eors	r3, r3, r7
 430:../Source Files/lpc17xx_emac.c **** 			byte >>= 4;
 1191              		.loc 1 430 0
 1192 0556 1209     		lsrs	r2, r2, #4
 408:../Source Files/lpc17xx_emac.c **** 		for (j = 0; j < 2; j++) {
 1193              		.loc 1 408 0
 1194 0558 013D     		subs	r5, r5, #1
 429:../Source Files/lpc17xx_emac.c **** 			crc = (crc << 4) ^ q3 ^ q2 ^ q1 ^ q0;
 1195              		.loc 1 429 0
 1196 055a 83EA0603 		eor	r3, r3, r6
 1197              	.LVL110:
 408:../Source Files/lpc17xx_emac.c **** 		for (j = 0; j < 2; j++) {
 1198              		.loc 1 408 0
 1199 055e D2D1     		bne	.L81
 406:../Source Files/lpc17xx_emac.c **** 	for (i = 0; i < frame_len; i++) {
 1200              		.loc 1 406 0
 1201 0560 0134     		adds	r4, r4, #1
 1202              	.LVL111:
 1203 0562 062C     		cmp	r4, #6
 1204 0564 CDD1     		bne	.L82
 1205              	.LBE45:
 1206              	.LBE44:
 924:../Source Files/lpc17xx_emac.c **** 	crc = (crc >> 23) & 0x3F;
 1207              		.loc 1 924 0
 1208 0566 C3F3C553 		ubfx	r3, r3, #23, #6
 1209              	.LVL112:
 927:../Source Files/lpc17xx_emac.c **** 								: ((uint32_t *)&LPC_EMAC->HashFilterL);
 1210              		.loc 1 927 0
 1211 056a 1F2B     		cmp	r3, #31
 1212 056c 18DD     		ble	.L97
 1213              	.L83:
 1214              	.LVL113:
 1215 056e 114A     		ldr	r2, .L98+16
 1216              	.LVL114:
 928:../Source Files/lpc17xx_emac.c **** 	tmp = (crc > 31) ? (crc - 32) : crc;
 1217              		.loc 1 928 0
 1218 0570 203B     		subs	r3, r3, #32
 1219              	.LVL115:
 1220              	.L87:
 929:../Source Files/lpc17xx_emac.c **** 	if (NewState == ENABLE) {
 1221              		.loc 1 929 0 discriminator 3
 1222 0572 0129     		cmp	r1, #1
 1223 0574 1068     		ldr	r0, [r2, #0]
 1224              	.LVL116:
 1225 0576 03D1     		bne	.L85
 930:../Source Files/lpc17xx_emac.c **** 		(*pReg) |= (1UL << tmp);
 1226              		.loc 1 930 0
 1227 0578 01FA03F1 		lsl	r1, r1, r3
 1228              	.LVL117:
 1229 057c 0843     		orrs	r0, r0, r1
 1230 057e 04E0     		b	.L96
 1231              	.LVL118:
 1232              	.L85:
 932:../Source Files/lpc17xx_emac.c **** 		(*pReg) &= ~(1UL << tmp);
 1233              		.loc 1 932 0
 1234 0580 0121     		movs	r1, #1
 1235              	.LVL119:
 1236 0582 01FA03F3 		lsl	r3, r1, r3
 1237              	.LVL120:
 1238 0586 20EA0300 		bic	r0, r0, r3
 1239              	.L96:
 1240 058a 1060     		str	r0, [r2, #0]
 935:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->Command &= ~EMAC_CR_PASS_RX_FILT;
 1241              		.loc 1 935 0
 1242 058c 4FF0A040 		mov	r0, #1342177280
 1243 0590 D0F80021 		ldr	r2, [r0, #256]
 1244 0594 22F08003 		bic	r3, r2, #128
 1245 0598 C0F80031 		str	r3, [r0, #256]
 1246 059c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1247              	.LVL121:
 1248              	.L97:
 927:../Source Files/lpc17xx_emac.c **** 								: ((uint32_t *)&LPC_EMAC->HashFilterL);
 1249              		.loc 1 927 0
 1250 05a0 054A     		ldr	r2, .L98+20
 1251              	.LVL122:
 1252 05a2 E6E7     		b	.L87
 1253              	.L99:
 1254              		.align	2
 1255              	.L98:
 1256 05a4 B71DC104 		.word	79764919
 1257 05a8 6E3B8209 		.word	159529838
 1258 05ac DC760413 		.word	319059676
 1259 05b0 B8ED0826 		.word	638119352
 1260 05b4 14020050 		.word	1342177812
 1261 05b8 10020050 		.word	1342177808
 1262              		.cfi_endproc
 1263              	.LFE69:
 1265              		.align	1
 1266              		.global	EMAC_SetFilterMode
 1267              		.thumb
 1268              		.thumb_func
 1270              	EMAC_SetFilterMode:
 1271              	.LFB70:
 966:../Source Files/lpc17xx_emac.c **** {
 1272              		.loc 1 966 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 0
 1275              		@ frame_needed = 0, uses_anonymous_args = 0
 1276              		@ link register save eliminated.
 1277              	.LVL123:
 1278 05bc 4FF0A043 		mov	r3, #1342177280
 968:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->RxFilterCtrl |= ulFilterMode;
 1279              		.loc 1 968 0
 1280 05c0 D3F80022 		ldr	r2, [r3, #512]
 967:../Source Files/lpc17xx_emac.c **** 	if (NewState == ENABLE){
 1281              		.loc 1 967 0
 1282 05c4 0129     		cmp	r1, #1
 968:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->RxFilterCtrl |= ulFilterMode;
 1283              		.loc 1 968 0
 1284 05c6 0CBF     		ite	eq
 1285 05c8 1043     		orreq	r0, r0, r2
 1286              	.LVL124:
 970:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->RxFilterCtrl &= ~ulFilterMode;
 1287              		.loc 1 970 0
 1288 05ca 22EA0000 		bicne	r0, r2, r0
 1289 05ce C3F80002 		str	r0, [r3, #512]
 1290 05d2 7047     		bx	lr
 1291              		.cfi_endproc
 1292              	.LFE70:
 1294              		.align	1
 1295              		.global	EMAC_GetWoLStatus
 1296              		.thumb
 1297              		.thumb_func
 1299              	EMAC_GetWoLStatus:
 1300              	.LFB71:
 992:../Source Files/lpc17xx_emac.c **** {
 1301              		.loc 1 992 0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 0
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 1305              		@ link register save eliminated.
 1306              	.LVL125:
 993:../Source Files/lpc17xx_emac.c **** 	if (LPC_EMAC->RxFilterWoLStatus & ulWoLMode) {
 1307              		.loc 1 993 0
 1308 05d4 4FF0A043 		mov	r3, #1342177280
 1309 05d8 D3F80422 		ldr	r2, [r3, #516]
 1310 05dc 10EA0201 		ands	r1, r0, r2
 1311 05e0 03D0     		beq	.L106
 994:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->RxFilterWoLClear = ulWoLMode;
 1312              		.loc 1 994 0
 1313 05e2 C3F80802 		str	r0, [r3, #520]
 995:../Source Files/lpc17xx_emac.c **** 		return SET;
 1314              		.loc 1 995 0
 1315 05e6 0120     		movs	r0, #1
 1316              	.LVL126:
 1317 05e8 7047     		bx	lr
 1318              	.LVL127:
 1319              	.L106:
 997:../Source Files/lpc17xx_emac.c **** 		return RESET;
 1320              		.loc 1 997 0
 1321 05ea 0846     		mov	r0, r1
 1322              	.LVL128:
 999:../Source Files/lpc17xx_emac.c **** }
 1323              		.loc 1 999 0
 1324 05ec 7047     		bx	lr
 1325              		.cfi_endproc
 1326              	.LFE71:
 1328              		.align	1
 1329              		.global	EMAC_WritePacketBuffer
 1330              		.thumb
 1331              		.thumb_func
 1333              	EMAC_WritePacketBuffer:
 1334              	.LFB72:
1011:../Source Files/lpc17xx_emac.c **** {
 1335              		.loc 1 1011 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              	.LVL129:
1015:../Source Files/lpc17xx_emac.c **** 	idx = LPC_EMAC->TxProduceIndex;
 1340              		.loc 1 1015 0
 1341 05ee 4FF0A043 		mov	r3, #1342177280
1011:../Source Files/lpc17xx_emac.c **** {
 1342              		.loc 1 1011 0
 1343 05f2 F0B5     		push	{r4, r5, r6, r7, lr}
 1344              	.LCFI8:
 1345              		.cfi_def_cfa_offset 20
 1346              		.cfi_offset 4, -20
 1347              		.cfi_offset 5, -16
 1348              		.cfi_offset 6, -12
 1349              		.cfi_offset 7, -8
 1350              		.cfi_offset 14, -4
1015:../Source Files/lpc17xx_emac.c **** 	idx = LPC_EMAC->TxProduceIndex;
 1351              		.loc 1 1015 0
 1352 05f4 D3F82811 		ldr	r1, [r3, #296]
 1353              	.LVL130:
1017:../Source Files/lpc17xx_emac.c **** 	dp  = (uint32_t *)Tx_Desc[idx].Packet;
 1354              		.loc 1 1017 0
 1355 05f8 0C4D     		ldr	r5, .L111
1019:../Source Files/lpc17xx_emac.c **** 	for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
 1356              		.loc 1 1019 0
 1357 05fa 0368     		ldr	r3, [r0, #0]
1017:../Source Files/lpc17xx_emac.c **** 	dp  = (uint32_t *)Tx_Desc[idx].Packet;
 1358              		.loc 1 1017 0
 1359 05fc 05EBC102 		add	r2, r5, r1, lsl #3
 1360 0600 D2F84847 		ldr	r4, [r2, #1864]
1019:../Source Files/lpc17xx_emac.c **** 	for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
 1361              		.loc 1 1019 0
 1362 0604 0333     		adds	r3, r3, #3
1016:../Source Files/lpc17xx_emac.c **** 	sp  = (uint32_t *)pDataStruct->pbDataBuf;
 1363              		.loc 1 1016 0
 1364 0606 4668     		ldr	r6, [r0, #4]
 1365              	.LVL131:
1017:../Source Files/lpc17xx_emac.c **** 	dp  = (uint32_t *)Tx_Desc[idx].Packet;
 1366              		.loc 1 1017 0
 1367 0608 2246     		mov	r2, r4
 1368              	.LVL132:
1019:../Source Files/lpc17xx_emac.c **** 	for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
 1369              		.loc 1 1019 0
 1370 060a 9B08     		lsrs	r3, r3, #2
 1371              	.LVL133:
 1372              	.L108:
1019:../Source Files/lpc17xx_emac.c **** 	for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
 1373              		.loc 1 1019 0 is_stmt 0 discriminator 1
 1374 060c 2BB1     		cbz	r3, .L110
 1375              	.L109:
1010:../Source Files/lpc17xx_emac.c **** void EMAC_WritePacketBuffer(EMAC_PACKETBUF_Type *pDataStruct)
 1376              		.loc 1 1010 0 is_stmt 1 discriminator 2
 1377 060e 371B     		subs	r7, r6, r4
1020:../Source Files/lpc17xx_emac.c **** 		*dp++ = *sp++;
 1378              		.loc 1 1020 0 discriminator 2
 1379 0610 D759     		ldr	r7, [r2, r7]
1019:../Source Files/lpc17xx_emac.c **** 	for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
 1380              		.loc 1 1019 0 discriminator 2
 1381 0612 013B     		subs	r3, r3, #1
 1382              	.LVL134:
1020:../Source Files/lpc17xx_emac.c **** 		*dp++ = *sp++;
 1383              		.loc 1 1020 0 discriminator 2
 1384 0614 42F8047B 		str	r7, [r2], #4
 1385              	.LVL135:
 1386 0618 F8E7     		b	.L108
 1387              	.L110:
1022:../Source Files/lpc17xx_emac.c **** 	Tx_Desc[idx].Ctrl = (pDataStruct->ulDataLen - 1) | (EMAC_TCTRL_INT | EMAC_TCTRL_LAST);
 1388              		.loc 1 1022 0
 1389 061a 0068     		ldr	r0, [r0, #0]
 1390              	.LVL136:
 1391 061c 05EBC101 		add	r1, r5, r1, lsl #3
 1392              	.LVL137:
 1393 0620 421E     		subs	r2, r0, #1
 1394              	.LVL138:
 1395 0622 42F04043 		orr	r3, r2, #-1073741824
 1396              	.LVL139:
 1397 0626 C1F84C37 		str	r3, [r1, #1868]
 1398 062a F0BD     		pop	{r4, r5, r6, r7, pc}
 1399              	.L112:
 1400              		.align	2
 1401              	.L111:
 1402 062c F8100000 		.word	.LANCHOR2
 1403              		.cfi_endproc
 1404              	.LFE72:
 1406              		.align	1
 1407              		.global	EMAC_ReadPacketBuffer
 1408              		.thumb
 1409              		.thumb_func
 1411              	EMAC_ReadPacketBuffer:
 1412              	.LFB73:
1034:../Source Files/lpc17xx_emac.c **** {
 1413              		.loc 1 1034 0
 1414              		.cfi_startproc
 1415              		@ args = 0, pretend = 0, frame = 0
 1416              		@ frame_needed = 0, uses_anonymous_args = 0
 1417              	.LVL140:
1038:../Source Files/lpc17xx_emac.c **** 	idx = LPC_EMAC->RxConsumeIndex;
 1418              		.loc 1 1038 0
 1419 0630 4FF0A043 		mov	r3, #1342177280
1034:../Source Files/lpc17xx_emac.c **** {
 1420              		.loc 1 1034 0
 1421 0634 10B5     		push	{r4, lr}
 1422              	.LCFI9:
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 4, -8
 1425              		.cfi_offset 14, -4
1038:../Source Files/lpc17xx_emac.c **** 	idx = LPC_EMAC->RxConsumeIndex;
 1426              		.loc 1 1038 0
 1427 0636 D3F81821 		ldr	r2, [r3, #280]
 1428              	.LVL141:
1040:../Source Files/lpc17xx_emac.c **** 	sp = (uint32_t *)Rx_Desc[idx].Packet;
 1429              		.loc 1 1040 0
 1430 063a 084C     		ldr	r4, .L118
1039:../Source Files/lpc17xx_emac.c **** 	dp = (uint32_t *)pDataStruct->pbDataBuf;
 1431              		.loc 1 1039 0
 1432 063c 4168     		ldr	r1, [r0, #4]
 1433              	.LVL142:
1040:../Source Files/lpc17xx_emac.c **** 	sp = (uint32_t *)Rx_Desc[idx].Packet;
 1434              		.loc 1 1040 0
 1435 063e 54F83240 		ldr	r4, [r4, r2, lsl #3]
 1436              	.LVL143:
1042:../Source Files/lpc17xx_emac.c **** 	if (pDataStruct->pbDataBuf != NULL) {
 1437              		.loc 1 1042 0
 1438 0642 51B1     		cbz	r1, .L113
1043:../Source Files/lpc17xx_emac.c **** 		for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
 1439              		.loc 1 1043 0
 1440 0644 0068     		ldr	r0, [r0, #0]
 1441              	.LVL144:
 1442 0646 0A46     		mov	r2, r1
 1443              	.LVL145:
 1444 0648 C31C     		adds	r3, r0, #3
 1445 064a 9B08     		lsrs	r3, r3, #2
 1446              	.LVL146:
 1447              	.L115:
1043:../Source Files/lpc17xx_emac.c **** 		for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
 1448              		.loc 1 1043 0 is_stmt 0 discriminator 1
 1449 064c 2BB1     		cbz	r3, .L113
 1450              	.L116:
1033:../Source Files/lpc17xx_emac.c **** void EMAC_ReadPacketBuffer(EMAC_PACKETBUF_Type *pDataStruct)
 1451              		.loc 1 1033 0 is_stmt 1 discriminator 2
 1452 064e 501A     		subs	r0, r2, r1
1044:../Source Files/lpc17xx_emac.c **** 			*dp++ = *sp++;
 1453              		.loc 1 1044 0 discriminator 2
 1454 0650 0059     		ldr	r0, [r0, r4]
1043:../Source Files/lpc17xx_emac.c **** 		for (len = (pDataStruct->ulDataLen + 3) >> 2; len; len--) {
 1455              		.loc 1 1043 0 discriminator 2
 1456 0652 013B     		subs	r3, r3, #1
 1457              	.LVL147:
1044:../Source Files/lpc17xx_emac.c **** 			*dp++ = *sp++;
 1458              		.loc 1 1044 0 discriminator 2
 1459 0654 42F8040B 		str	r0, [r2], #4
 1460              	.LVL148:
 1461 0658 F8E7     		b	.L115
 1462              	.LVL149:
 1463              	.L113:
 1464 065a 10BD     		pop	{r4, pc}
 1465              	.L119:
 1466              		.align	2
 1467              	.L118:
 1468 065c 00000000 		.word	.LANCHOR1
 1469              		.cfi_endproc
 1470              	.LFE73:
 1472              		.align	1
 1473              		.global	EMAC_IntCmd
 1474              		.thumb
 1475              		.thumb_func
 1477              	EMAC_IntCmd:
 1478              	.LFB74:
1068:../Source Files/lpc17xx_emac.c **** {
 1479              		.loc 1 1068 0
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 0
 1482              		@ frame_needed = 0, uses_anonymous_args = 0
 1483              		@ link register save eliminated.
 1484              	.LVL150:
 1485 0660 4FF0A043 		mov	r3, #1342177280
 1486              		.loc 1 1070 0
 1487 0664 D3F8E42F 		ldr	r2, [r3, #4068]
1069:../Source Files/lpc17xx_emac.c **** 	if (NewState == ENABLE) {
 1488              		.loc 1 1069 0
 1489 0668 0129     		cmp	r1, #1
 1490              		.loc 1 1070 0
 1491 066a 0CBF     		ite	eq
 1492 066c 1043     		orreq	r0, r0, r2
 1493              	.LVL151:
1071:../Source Files/lpc17xx_emac.c **** 	} else {
1072:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->IntEnable &= ~(ulIntType);
 1494              		.loc 1 1072 0
 1495 066e 22EA0000 		bicne	r0, r2, r0
 1496 0672 C3F8E40F 		str	r0, [r3, #4068]
 1497 0676 7047     		bx	lr
 1498              		.cfi_endproc
 1499              	.LFE74:
 1501              		.align	1
 1502              		.global	EMAC_IntGetStatus
 1503              		.thumb
 1504              		.thumb_func
 1506              	EMAC_IntGetStatus:
 1507              	.LFB75:
1073:../Source Files/lpc17xx_emac.c **** 	}
1074:../Source Files/lpc17xx_emac.c **** }
1075:../Source Files/lpc17xx_emac.c **** 
1076:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1077:../Source Files/lpc17xx_emac.c ****  * @brief 		Check whether if specified interrupt flag is set or not
1078:../Source Files/lpc17xx_emac.c ****  * 				for each interrupt type in EMAC and clear interrupt pending
1079:../Source Files/lpc17xx_emac.c ****  * 				if it is set.
1080:../Source Files/lpc17xx_emac.c ****  * @param[in]	ulIntType	Interrupt Type, should be:
1081:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_RX_OVERRUN: Receive Overrun
1082:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_RX_ERR: Receive Error
1083:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_RX_FIN: Receive Descriptor Finish
1084:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_RX_DONE: Receive Done
1085:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_TX_UNDERRUN: Transmit Under-run
1086:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_TX_ERR: Transmit Error
1087:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_TX_FIN: Transmit descriptor finish
1088:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_TX_DONE: Transmit Done
1089:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_SOFT_INT: Software interrupt
1090:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_INT_WAKEUP: Wakeup interrupt
1091:../Source Files/lpc17xx_emac.c ****  * @return		New state of specified interrupt (SET or RESET)
1092:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1093:../Source Files/lpc17xx_emac.c **** IntStatus EMAC_IntGetStatus(uint32_t ulIntType)
1094:../Source Files/lpc17xx_emac.c **** {
 1508              		.loc 1 1094 0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 0
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512              		@ link register save eliminated.
 1513              	.LVL152:
1095:../Source Files/lpc17xx_emac.c **** 	if (LPC_EMAC->IntStatus & ulIntType) {
 1514              		.loc 1 1095 0
 1515 0678 4FF0A043 		mov	r3, #1342177280
 1516 067c D3F8E02F 		ldr	r2, [r3, #4064]
 1517 0680 10EA0201 		ands	r1, r0, r2
 1518 0684 03D0     		beq	.L126
1096:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->IntClear = ulIntType;
 1519              		.loc 1 1096 0
 1520 0686 C3F8E80F 		str	r0, [r3, #4072]
1097:../Source Files/lpc17xx_emac.c **** 		return SET;
 1521              		.loc 1 1097 0
 1522 068a 0120     		movs	r0, #1
 1523              	.LVL153:
 1524 068c 7047     		bx	lr
 1525              	.LVL154:
 1526              	.L126:
1098:../Source Files/lpc17xx_emac.c **** 	} else {
1099:../Source Files/lpc17xx_emac.c **** 		return RESET;
 1527              		.loc 1 1099 0
 1528 068e 0846     		mov	r0, r1
 1529              	.LVL155:
1100:../Source Files/lpc17xx_emac.c **** 	}
1101:../Source Files/lpc17xx_emac.c **** }
 1530              		.loc 1 1101 0
 1531 0690 7047     		bx	lr
 1532              		.cfi_endproc
 1533              	.LFE75:
 1535              		.align	1
 1536              		.global	EMAC_CheckReceiveIndex
 1537              		.thumb
 1538              		.thumb_func
 1540              	EMAC_CheckReceiveIndex:
 1541              	.LFB76:
1102:../Source Files/lpc17xx_emac.c **** 
1103:../Source Files/lpc17xx_emac.c **** 
1104:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1105:../Source Files/lpc17xx_emac.c ****  * @brief		Check whether if the current RxConsumeIndex is not equal to the
1106:../Source Files/lpc17xx_emac.c ****  * 				current RxProduceIndex.
1107:../Source Files/lpc17xx_emac.c ****  * @param[in]	None
1108:../Source Files/lpc17xx_emac.c ****  * @return		TRUE if they're not equal, otherwise return FALSE
1109:../Source Files/lpc17xx_emac.c ****  *
1110:../Source Files/lpc17xx_emac.c ****  * Note: In case the RxConsumeIndex is not equal to the RxProduceIndex,
1111:../Source Files/lpc17xx_emac.c ****  * it means there're available data has been received. They should be read
1112:../Source Files/lpc17xx_emac.c ****  * out and released the Receive Data Buffer by updating the RxConsumeIndex value.
1113:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1114:../Source Files/lpc17xx_emac.c **** Bool EMAC_CheckReceiveIndex(void)
1115:../Source Files/lpc17xx_emac.c **** {
 1542              		.loc 1 1115 0
 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 0
 1545              		@ frame_needed = 0, uses_anonymous_args = 0
 1546              		@ link register save eliminated.
1116:../Source Files/lpc17xx_emac.c **** 	if (LPC_EMAC->RxConsumeIndex != LPC_EMAC->RxProduceIndex) {
 1547              		.loc 1 1116 0
 1548 0692 4FF0A043 		mov	r3, #1342177280
 1549 0696 D3F81801 		ldr	r0, [r3, #280]
 1550 069a D3F81411 		ldr	r1, [r3, #276]
1117:../Source Files/lpc17xx_emac.c **** 		return TRUE;
1118:../Source Files/lpc17xx_emac.c **** 	} else {
1119:../Source Files/lpc17xx_emac.c **** 		return FALSE;
1120:../Source Files/lpc17xx_emac.c **** 	}
1121:../Source Files/lpc17xx_emac.c **** }
 1551              		.loc 1 1121 0
 1552 069e 401A     		subs	r0, r0, r1
 1553 06a0 18BF     		it	ne
 1554 06a2 0120     		movne	r0, #1
 1555 06a4 7047     		bx	lr
 1556              		.cfi_endproc
 1557              	.LFE76:
 1559              		.align	1
 1560              		.global	EMAC_CheckTransmitIndex
 1561              		.thumb
 1562              		.thumb_func
 1564              	EMAC_CheckTransmitIndex:
 1565              	.LFB77:
1122:../Source Files/lpc17xx_emac.c **** 
1123:../Source Files/lpc17xx_emac.c **** 
1124:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1125:../Source Files/lpc17xx_emac.c ****  * @brief		Check whether if the current TxProduceIndex is not equal to the
1126:../Source Files/lpc17xx_emac.c ****  * 				current RxProduceIndex - 1.
1127:../Source Files/lpc17xx_emac.c ****  * @param[in]	None
1128:../Source Files/lpc17xx_emac.c ****  * @return		TRUE if they're not equal, otherwise return FALSE
1129:../Source Files/lpc17xx_emac.c ****  *
1130:../Source Files/lpc17xx_emac.c ****  * Note: In case the RxConsumeIndex is equal to the RxProduceIndex - 1,
1131:../Source Files/lpc17xx_emac.c ****  * it means the transmit buffer is available and data can be written to transmit
1132:../Source Files/lpc17xx_emac.c ****  * buffer to be sent.
1133:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1134:../Source Files/lpc17xx_emac.c **** Bool EMAC_CheckTransmitIndex(void)
1135:../Source Files/lpc17xx_emac.c **** {
 1566              		.loc 1 1135 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              		@ link register save eliminated.
1136:../Source Files/lpc17xx_emac.c **** 	uint32_t tmp = LPC_EMAC->TxConsumeIndex -1;
 1571              		.loc 1 1136 0
 1572 06a6 4FF0A043 		mov	r3, #1342177280
 1573 06aa D3F82C21 		ldr	r2, [r3, #300]
 1574              	.LVL156:
1137:../Source Files/lpc17xx_emac.c **** 	if (LPC_EMAC->TxProduceIndex == tmp) {
 1575              		.loc 1 1137 0
 1576 06ae D3F82801 		ldr	r0, [r3, #296]
1136:../Source Files/lpc17xx_emac.c **** 	uint32_t tmp = LPC_EMAC->TxConsumeIndex -1;
 1577              		.loc 1 1136 0
 1578 06b2 511E     		subs	r1, r2, #1
 1579              	.LVL157:
1138:../Source Files/lpc17xx_emac.c **** 		return FALSE;
1139:../Source Files/lpc17xx_emac.c **** 	} else {
1140:../Source Files/lpc17xx_emac.c **** 		return TRUE;
1141:../Source Files/lpc17xx_emac.c **** 	}
1142:../Source Files/lpc17xx_emac.c **** }
 1580              		.loc 1 1142 0
 1581 06b4 401A     		subs	r0, r0, r1
 1582 06b6 18BF     		it	ne
 1583 06b8 0120     		movne	r0, #1
 1584 06ba 7047     		bx	lr
 1585              		.cfi_endproc
 1586              	.LFE77:
 1588              		.align	1
 1589              		.global	EMAC_CheckReceiveDataStatus
 1590              		.thumb
 1591              		.thumb_func
 1593              	EMAC_CheckReceiveDataStatus:
 1594              	.LFB78:
1143:../Source Files/lpc17xx_emac.c **** 
1144:../Source Files/lpc17xx_emac.c **** 
1145:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1146:../Source Files/lpc17xx_emac.c ****  * @brief		Get current status value of receive data (due to RxConsumeIndex)
1147:../Source Files/lpc17xx_emac.c ****  * @param[in]	ulRxStatType	Received Status type, should be one of following:
1148:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_CTRL_FRAME: Control Frame
1149:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_VLAN: VLAN Frame
1150:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_FAIL_FILT: RX Filter Failed
1151:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_MCAST: Multicast Frame
1152:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_BCAST: Broadcast Frame
1153:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_CRC_ERR: CRC Error in Frame
1154:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_SYM_ERR: Symbol Error from PHY
1155:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_LEN_ERR: Length Error
1156:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_RANGE_ERR: Range error(exceeded max size)
1157:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_ALIGN_ERR: Alignment error
1158:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_OVERRUN: Receive overrun
1159:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_NO_DESCR: No new Descriptor available
1160:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_LAST_FLAG: last Fragment in Frame
1161:../Source Files/lpc17xx_emac.c ****  * 							- EMAC_RINFO_ERR: Error Occurred (OR of all error)
1162:../Source Files/lpc17xx_emac.c ****  * @return		Current value of receive data (due to RxConsumeIndex)
1163:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1164:../Source Files/lpc17xx_emac.c **** FlagStatus EMAC_CheckReceiveDataStatus(uint32_t ulRxStatType)
1165:../Source Files/lpc17xx_emac.c **** {
 1595              		.loc 1 1165 0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 0
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 1599              		@ link register save eliminated.
 1600              	.LVL158:
1166:../Source Files/lpc17xx_emac.c **** 	uint32_t idx;
1167:../Source Files/lpc17xx_emac.c **** 	idx = LPC_EMAC->RxConsumeIndex;
 1601              		.loc 1 1167 0
 1602 06bc 4FF0A043 		mov	r3, #1342177280
 1603 06c0 D3F81821 		ldr	r2, [r3, #280]
 1604              	.LVL159:
1168:../Source Files/lpc17xx_emac.c **** 	return (((Rx_Stat[idx].Info) & ulRxStatType) ? SET : RESET);
 1605              		.loc 1 1168 0
 1606 06c4 0449     		ldr	r1, .L130
 1607 06c6 01EBC203 		add	r3, r1, r2, lsl #3
 1608 06ca D3F82827 		ldr	r2, [r3, #1832]
 1609              	.LVL160:
 1610 06ce 1042     		tst	r0, r2
1169:../Source Files/lpc17xx_emac.c **** }
 1611              		.loc 1 1169 0
 1612 06d0 0CBF     		ite	eq
 1613 06d2 0020     		moveq	r0, #0
 1614 06d4 0120     		movne	r0, #1
 1615              	.LVL161:
 1616 06d6 7047     		bx	lr
 1617              	.L131:
 1618              		.align	2
 1619              	.L130:
 1620 06d8 F8100000 		.word	.LANCHOR2
 1621              		.cfi_endproc
 1622              	.LFE78:
 1624              		.align	1
 1625              		.global	EMAC_GetReceiveDataSize
 1626              		.thumb
 1627              		.thumb_func
 1629              	EMAC_GetReceiveDataSize:
 1630              	.LFB79:
1170:../Source Files/lpc17xx_emac.c **** 
1171:../Source Files/lpc17xx_emac.c **** 
1172:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1173:../Source Files/lpc17xx_emac.c ****  * @brief		Get size of current Received data in received buffer (due to
1174:../Source Files/lpc17xx_emac.c ****  * 				RxConsumeIndex)
1175:../Source Files/lpc17xx_emac.c ****  * @param[in]	None
1176:../Source Files/lpc17xx_emac.c ****  * @return		Size of received data
1177:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1178:../Source Files/lpc17xx_emac.c **** uint32_t EMAC_GetReceiveDataSize(void)
1179:../Source Files/lpc17xx_emac.c **** {
 1631              		.loc 1 1179 0
 1632              		.cfi_startproc
 1633              		@ args = 0, pretend = 0, frame = 0
 1634              		@ frame_needed = 0, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
1180:../Source Files/lpc17xx_emac.c **** 	uint32_t idx;
1181:../Source Files/lpc17xx_emac.c **** 	idx =LPC_EMAC->RxConsumeIndex;
 1636              		.loc 1 1181 0
 1637 06dc 4FF0A043 		mov	r3, #1342177280
 1638 06e0 D3F81821 		ldr	r2, [r3, #280]
 1639              	.LVL162:
1182:../Source Files/lpc17xx_emac.c **** 	return ((Rx_Stat[idx].Info) & EMAC_RINFO_SIZE);
 1640              		.loc 1 1182 0
 1641 06e4 0348     		ldr	r0, .L133
 1642 06e6 00EBC201 		add	r1, r0, r2, lsl #3
 1643 06ea D1F82837 		ldr	r3, [r1, #1832]
 1644 06ee 5A05     		lsls	r2, r3, #21
 1645              	.LVL163:
1183:../Source Files/lpc17xx_emac.c **** }
 1646              		.loc 1 1183 0
 1647 06f0 500D     		lsrs	r0, r2, #21
 1648 06f2 7047     		bx	lr
 1649              	.L134:
 1650              		.align	2
 1651              	.L133:
 1652 06f4 F8100000 		.word	.LANCHOR2
 1653              		.cfi_endproc
 1654              	.LFE79:
 1656              		.align	1
 1657              		.global	EMAC_UpdateRxConsumeIndex
 1658              		.thumb
 1659              		.thumb_func
 1661              	EMAC_UpdateRxConsumeIndex:
 1662              	.LFB80:
1184:../Source Files/lpc17xx_emac.c **** 
1185:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1186:../Source Files/lpc17xx_emac.c ****  * @brief		Increase the RxConsumeIndex (after reading the Receive buffer
1187:../Source Files/lpc17xx_emac.c ****  * 				to release the Receive buffer) and wrap-around the index if
1188:../Source Files/lpc17xx_emac.c ****  * 				it reaches the maximum Receive Number
1189:../Source Files/lpc17xx_emac.c ****  * @param[in]	None
1190:../Source Files/lpc17xx_emac.c ****  * @return		None
1191:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1192:../Source Files/lpc17xx_emac.c **** void EMAC_UpdateRxConsumeIndex(void)
1193:../Source Files/lpc17xx_emac.c **** {
 1663              		.loc 1 1193 0
 1664              		.cfi_startproc
 1665              		@ args = 0, pretend = 0, frame = 0
 1666              		@ frame_needed = 0, uses_anonymous_args = 0
 1667              		@ link register save eliminated.
1194:../Source Files/lpc17xx_emac.c **** 	// Get current Rx consume index
1195:../Source Files/lpc17xx_emac.c **** 	uint32_t idx = LPC_EMAC->RxConsumeIndex;
 1668              		.loc 1 1195 0
 1669 06f8 4FF0A043 		mov	r3, #1342177280
 1670 06fc D3F81821 		ldr	r2, [r3, #280]
 1671              	.LVL164:
1196:../Source Files/lpc17xx_emac.c **** 
1197:../Source Files/lpc17xx_emac.c **** 	/* Release frame from EMAC buffer */
1198:../Source Files/lpc17xx_emac.c **** 	if (++idx == EMAC_NUM_RX_FRAG) idx = 0;
 1672              		.loc 1 1198 0
 1673 0700 501C     		adds	r0, r2, #1
 1674              	.LVL165:
 1675 0702 0428     		cmp	r0, #4
 1676 0704 08BF     		it	eq
 1677 0706 0020     		moveq	r0, #0
 1678              	.LVL166:
1199:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->RxConsumeIndex = idx;
 1679              		.loc 1 1199 0
 1680 0708 C3F81801 		str	r0, [r3, #280]
 1681 070c 7047     		bx	lr
 1682              		.cfi_endproc
 1683              	.LFE80:
 1685              		.align	1
 1686              		.global	ENET_IRQHandler
 1687              		.thumb
 1688              		.thumb_func
 1690              	ENET_IRQHandler:
 1691              	.LFB55:
 111:../Source Files/lpc17xx_emac.c **** {
 1692              		.loc 1 111 0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 8
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 1696 070e 37B5     		push	{r0, r1, r2, r4, r5, lr}
 1697              	.LCFI10:
 1698              		.cfi_def_cfa_offset 24
 1699              		.cfi_offset 0, -24
 1700              		.cfi_offset 1, -20
 1701              		.cfi_offset 2, -16
 1702              		.cfi_offset 4, -12
 1703              		.cfi_offset 5, -8
 1704              		.cfi_offset 14, -4
 1705              	.L181:
 118:../Source Files/lpc17xx_emac.c **** 	while ((int_stat = (LPC_EMAC->IntStatus & LPC_EMAC->IntEnable)) != 0) {
 1706              		.loc 1 118 0 discriminator 1
 1707 0710 4FF0A043 		mov	r3, #1342177280
 1708 0714 D3F8E02F 		ldr	r2, [r3, #4064]
 1709 0718 D3F8E44F 		ldr	r4, [r3, #4068]
 1710              	.LVL167:
 1711 071c 1440     		ands	r4, r4, r2
 1712              	.LVL168:
 1713 071e 77D0     		beq	.L182
 1714              	.L154:
 124:../Source Files/lpc17xx_emac.c **** 		if((int_stat & EMAC_INT_RX_OVERRUN))
 1715              		.loc 1 124 0
 1716 0720 E207     		lsls	r2, r4, #31
 120:../Source Files/lpc17xx_emac.c **** 		LPC_EMAC->IntClear = int_stat;
 1717              		.loc 1 120 0
 1718 0722 C3F8E84F 		str	r4, [r3, #4072]
 124:../Source Files/lpc17xx_emac.c **** 		if((int_stat & EMAC_INT_RX_OVERRUN))
 1719              		.loc 1 124 0
 1720 0726 07D5     		bpl	.L140
 126:../Source Files/lpc17xx_emac.c **** 			RXOverrunCount++;
 1721              		.loc 1 126 0
 1722 0728 3A48     		ldr	r0, .L183
 1723 072a 0168     		ldr	r1, [r0, #0]
 1724 072c 4B1C     		adds	r3, r1, #1
 1725              	.LVL169:
 1726 072e 0360     		str	r3, [r0, #0]
 1727              	.LVL170:
 127:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Rx overrun\n\r");
 1728              		.loc 1 127 0
 1729 0730 3949     		ldr	r1, .L183+4
 1730 0732 3A48     		ldr	r0, .L183+8
 1731 0734 FFF7FEFF 		bl	printf
 1732              	.LVL171:
 1733              	.L140:
 139:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_RX_ERR))
 1734              		.loc 1 139 0
 1735 0738 A307     		lsls	r3, r4, #30
 1736 073a 0CD5     		bpl	.L142
 141:../Source Files/lpc17xx_emac.c **** 			if (EMAC_CheckReceiveDataStatus(EMAC_RINFO_RANGE_ERR) == RESET){
 1737              		.loc 1 141 0
 1738 073c 4FF08060 		mov	r0, #67108864
 1739 0740 FFF7FEFF 		bl	EMAC_CheckReceiveDataStatus
 1740              	.LVL172:
 1741 0744 38B9     		cbnz	r0, .L142
 142:../Source Files/lpc17xx_emac.c **** 				RXErrorCount++;
 1742              		.loc 1 142 0
 1743 0746 3648     		ldr	r0, .L183+12
 1744 0748 0268     		ldr	r2, [r0, #0]
 1745 074a 511C     		adds	r1, r2, #1
 1746              	.LVL173:
 1747 074c 0160     		str	r1, [r0, #0]
 1748              	.LVL174:
 143:../Source Files/lpc17xx_emac.c **** 				printf(LPC_UART0,"Rx error: \n\r");
 1749              		.loc 1 143 0
 1750 074e 3348     		ldr	r0, .L183+8
 1751 0750 3449     		ldr	r1, .L183+16
 1752              	.LVL175:
 1753 0752 FFF7FEFF 		bl	printf
 1754              	.LVL176:
 1755              	.L142:
 148:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_RX_FIN))
 1756              		.loc 1 148 0
 1757 0756 6007     		lsls	r0, r4, #29
 1758 0758 07D5     		bpl	.L144
 150:../Source Files/lpc17xx_emac.c **** 			RxFinishedCount++;
 1759              		.loc 1 150 0
 1760 075a 334B     		ldr	r3, .L183+20
 151:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Rx finish\n\r");
 1761              		.loc 1 151 0
 1762 075c 3349     		ldr	r1, .L183+24
 150:../Source Files/lpc17xx_emac.c **** 			RxFinishedCount++;
 1763              		.loc 1 150 0
 1764 075e 1868     		ldr	r0, [r3, #0]
 1765 0760 421C     		adds	r2, r0, #1
 1766              	.LVL177:
 151:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Rx finish\n\r");
 1767              		.loc 1 151 0
 1768 0762 2E48     		ldr	r0, .L183+8
 150:../Source Files/lpc17xx_emac.c **** 			RxFinishedCount++;
 1769              		.loc 1 150 0
 1770 0764 1A60     		str	r2, [r3, #0]
 1771              	.LVL178:
 151:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Rx finish\n\r");
 1772              		.loc 1 151 0
 1773 0766 FFF7FEFF 		bl	printf
 1774              	.LVL179:
 1775              	.L144:
 158:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_RX_DONE))
 1776              		.loc 1 158 0
 1777 076a 2107     		lsls	r1, r4, #28
 1778 076c 27D5     		bpl	.L145
 161:../Source Files/lpc17xx_emac.c **** 			if (EMAC_CheckReceiveIndex()){
 1779              		.loc 1 161 0
 1780 076e FFF7FEFF 		bl	EMAC_CheckReceiveIndex
 1781              	.LVL180:
 1782 0772 E0B1     		cbz	r0, .L146
 162:../Source Files/lpc17xx_emac.c **** 				if (!EMAC_CheckReceiveDataStatus(EMAC_RINFO_LAST_FLAG)){
 1783              		.loc 1 162 0
 1784 0774 4FF08040 		mov	r0, #1073741824
 1785 0778 FFF7FEFF 		bl	EMAC_CheckReceiveDataStatus
 1786              	.LVL181:
 1787 077c A8B1     		cbz	r0, .L148
 166:../Source Files/lpc17xx_emac.c **** 				RxLen = EMAC_GetReceiveDataSize() - 3;
 1788              		.loc 1 166 0
 1789 077e FFF7FEFF 		bl	EMAC_GetReceiveDataSize
 1790              	.LVL182:
 1791 0782 C51E     		subs	r5, r0, #3
 1792              	.LVL183:
 168:../Source Files/lpc17xx_emac.c **** 				if ((RxLen > (TX_PACKET_SIZE + 4)) || (EMAC_CheckReceiveDataStatus(EMAC_RINFO_ERR_MASK))) {
 1793              		.loc 1 168 0
 1794 0784 762D     		cmp	r5, #118
 1795 0786 10D8     		bhi	.L148
 168:../Source Files/lpc17xx_emac.c **** 				if ((RxLen > (TX_PACKET_SIZE + 4)) || (EMAC_CheckReceiveDataStatus(EMAC_RINFO_ERR_MASK))) {
 1796              		.loc 1 168 0 is_stmt 0 discriminator 1
 1797 0788 2948     		ldr	r0, .L183+28
 1798 078a FFF7FEFF 		bl	EMAC_CheckReceiveDataStatus
 1799              	.LVL184:
 1800 078e 60B9     		cbnz	r0, .L148
 172:../Source Files/lpc17xx_emac.c **** 				ReceiveLength = RxLen;
 1801              		.loc 1 172 0 is_stmt 1
 1802 0790 2849     		ldr	r1, .L183+32
 174:../Source Files/lpc17xx_emac.c **** 				RxDatbuf.pbDataBuf = (uint32_t *)gRxBuf;
 1803              		.loc 1 174 0
 1804 0792 294B     		ldr	r3, .L183+36
 175:../Source Files/lpc17xx_emac.c **** 				RxDatbuf.ulDataLen = RxLen;
 1805              		.loc 1 175 0
 1806 0794 02A8     		add	r0, sp, #8
 1807 0796 40F8085D 		str	r5, [r0, #-8]!
 176:../Source Files/lpc17xx_emac.c **** 				EMAC_ReadPacketBuffer(&RxDatbuf);
 1808              		.loc 1 176 0
 1809 079a 6846     		mov	r0, sp
 172:../Source Files/lpc17xx_emac.c **** 				ReceiveLength = RxLen;
 1810              		.loc 1 172 0
 1811 079c 0D60     		str	r5, [r1, #0]
 174:../Source Files/lpc17xx_emac.c **** 				RxDatbuf.pbDataBuf = (uint32_t *)gRxBuf;
 1812              		.loc 1 174 0
 1813 079e 0193     		str	r3, [sp, #4]
 176:../Source Files/lpc17xx_emac.c **** 				EMAC_ReadPacketBuffer(&RxDatbuf);
 1814              		.loc 1 176 0
 1815 07a0 FFF7FEFF 		bl	EMAC_ReadPacketBuffer
 1816              	.LVL185:
 177:../Source Files/lpc17xx_emac.c **** 				PacketReceived = TRUE;
 1817              		.loc 1 177 0
 1818 07a4 2549     		ldr	r1, .L183+40
 1819 07a6 0122     		movs	r2, #1
 1820 07a8 0A70     		strb	r2, [r1, #0]
 1821              	.LVL186:
 1822              	.L148:
 181:../Source Files/lpc17xx_emac.c **** 				EMAC_UpdateRxConsumeIndex();
 1823              		.loc 1 181 0
 1824 07aa FFF7FEFF 		bl	EMAC_UpdateRxConsumeIndex
 1825              	.LVL187:
 1826              	.L146:
 183:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Rx done\n\r");
 1827              		.loc 1 183 0
 1828 07ae 1B48     		ldr	r0, .L183+8
 1829 07b0 2349     		ldr	r1, .L183+44
 1830 07b2 FFF7FEFF 		bl	printf
 1831              	.LVL188:
 184:../Source Files/lpc17xx_emac.c **** 			RxDoneCount++;
 1832              		.loc 1 184 0
 1833 07b6 234B     		ldr	r3, .L183+48
 1834 07b8 1868     		ldr	r0, [r3, #0]
 1835 07ba 421C     		adds	r2, r0, #1
 1836              	.LVL189:
 1837 07bc 1A60     		str	r2, [r3, #0]
 1838              	.LVL190:
 1839              	.L145:
 188:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_TX_UNDERRUN))
 1840              		.loc 1 188 0
 1841 07be E206     		lsls	r2, r4, #27
 1842              	.LVL191:
 1843 07c0 07D5     		bpl	.L150
 190:../Source Files/lpc17xx_emac.c **** 			TXUnderrunCount++;
 1844              		.loc 1 190 0
 1845 07c2 2149     		ldr	r1, .L183+52
 1846 07c4 0B68     		ldr	r3, [r1, #0]
 1847 07c6 581C     		adds	r0, r3, #1
 1848              	.LVL192:
 1849 07c8 0860     		str	r0, [r1, #0]
 1850              	.LVL193:
 191:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx under-run\n\r");
 1851              		.loc 1 191 0
 1852 07ca 1448     		ldr	r0, .L183+8
 1853              	.LVL194:
 1854 07cc 1F49     		ldr	r1, .L183+56
 1855 07ce FFF7FEFF 		bl	printf
 1856              	.LVL195:
 1857              	.L150:
 195:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_TX_ERR))
 1858              		.loc 1 195 0
 1859 07d2 A306     		lsls	r3, r4, #26
 1860 07d4 07D5     		bpl	.L151
 197:../Source Files/lpc17xx_emac.c **** 			TXErrorCount++;
 1861              		.loc 1 197 0
 1862 07d6 1E49     		ldr	r1, .L183+60
 198:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx error\n\r");
 1863              		.loc 1 198 0
 1864 07d8 1048     		ldr	r0, .L183+8
 197:../Source Files/lpc17xx_emac.c **** 			TXErrorCount++;
 1865              		.loc 1 197 0
 1866 07da 0A68     		ldr	r2, [r1, #0]
 1867 07dc 531C     		adds	r3, r2, #1
 1868              	.LVL196:
 1869 07de 0B60     		str	r3, [r1, #0]
 1870              	.LVL197:
 198:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx error\n\r");
 1871              		.loc 1 198 0
 1872 07e0 1C49     		ldr	r1, .L183+64
 1873 07e2 FFF7FEFF 		bl	printf
 1874              	.LVL198:
 1875              	.L151:
 202:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_TX_FIN))
 1876              		.loc 1 202 0
 1877 07e6 6006     		lsls	r0, r4, #25
 1878 07e8 07D5     		bpl	.L152
 204:../Source Files/lpc17xx_emac.c **** 			TxFinishedCount++;
 1879              		.loc 1 204 0
 1880 07ea 1B48     		ldr	r0, .L183+68
 1881 07ec 0168     		ldr	r1, [r0, #0]
 1882 07ee 4A1C     		adds	r2, r1, #1
 1883              	.LVL199:
 1884 07f0 0260     		str	r2, [r0, #0]
 1885              	.LVL200:
 205:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx finish\n\r");
 1886              		.loc 1 205 0
 1887 07f2 1A49     		ldr	r1, .L183+72
 1888 07f4 0948     		ldr	r0, .L183+8
 1889 07f6 FFF7FEFF 		bl	printf
 1890              	.LVL201:
 1891              	.L152:
 209:../Source Files/lpc17xx_emac.c **** 		if ((int_stat & EMAC_INT_TX_DONE))
 1892              		.loc 1 209 0
 1893 07fa 2106     		lsls	r1, r4, #24
 1894 07fc 88D5     		bpl	.L181
 211:../Source Files/lpc17xx_emac.c **** 			TxDoneCount++;
 1895              		.loc 1 211 0
 1896 07fe 184C     		ldr	r4, .L183+76
 1897              	.LVL202:
 212:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx done\n\r");
 1898              		.loc 1 212 0
 1899 0800 1849     		ldr	r1, .L183+80
 211:../Source Files/lpc17xx_emac.c **** 			TxDoneCount++;
 1900              		.loc 1 211 0
 1901 0802 2368     		ldr	r3, [r4, #0]
 1902 0804 581C     		adds	r0, r3, #1
 1903              	.LVL203:
 1904 0806 2060     		str	r0, [r4, #0]
 1905              	.LVL204:
 212:../Source Files/lpc17xx_emac.c **** 			printf(LPC_UART0,"Tx done\n\r");
 1906              		.loc 1 212 0
 1907 0808 0448     		ldr	r0, .L183+8
 1908              	.LVL205:
 1909 080a FFF7FEFF 		bl	printf
 1910              	.LVL206:
 1911 080e 7FE7     		b	.L181
 1912              	.LVL207:
 1913              	.L182:
 215:../Source Files/lpc17xx_emac.c **** }
 1914              		.loc 1 215 0
 1915 0810 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
 1916              	.L184:
 1917 0812 00BF     		.align	2
 1918              	.L183:
 1919 0814 00000000 		.word	RXOverrunCount
 1920 0818 14010000 		.word	.LC11
 1921 081c 00C00040 		.word	1073790976
 1922 0820 00000000 		.word	RXErrorCount
 1923 0824 21010000 		.word	.LC12
 1924 0828 00000000 		.word	RxFinishedCount
 1925 082c 2E010000 		.word	.LC13
 1926 0830 0000901B 		.word	462422016
 1927 0834 00000000 		.word	ReceiveLength
 1928 0838 00000000 		.word	gRxBuf
 1929 083c 00000000 		.word	PacketReceived
 1930 0840 3A010000 		.word	.LC14
 1931 0844 00000000 		.word	RxDoneCount
 1932 0848 00000000 		.word	TXUnderrunCount
 1933 084c 44010000 		.word	.LC15
 1934 0850 00000000 		.word	TXErrorCount
 1935 0854 53010000 		.word	.LC16
 1936 0858 00000000 		.word	TxFinishedCount
 1937 085c 5E010000 		.word	.LC17
 1938 0860 00000000 		.word	TxDoneCount
 1939 0864 6A010000 		.word	.LC18
 1940              		.cfi_endproc
 1941              	.LFE55:
 1943              		.align	1
 1944              		.global	EMAC_UpdateTxProduceIndex
 1945              		.thumb
 1946              		.thumb_func
 1948              	EMAC_UpdateTxProduceIndex:
 1949              	.LFB81:
1200:../Source Files/lpc17xx_emac.c **** }
1201:../Source Files/lpc17xx_emac.c **** 
1202:../Source Files/lpc17xx_emac.c **** /*********************************************************************//**
1203:../Source Files/lpc17xx_emac.c ****  * @brief		Increase the TxProduceIndex (after writting to the Transmit buffer
1204:../Source Files/lpc17xx_emac.c ****  * 				to enable the Transmit buffer) and wrap-around the index if
1205:../Source Files/lpc17xx_emac.c ****  * 				it reaches the maximum Transmit Number
1206:../Source Files/lpc17xx_emac.c ****  * @param[in]	None
1207:../Source Files/lpc17xx_emac.c ****  * @return		None
1208:../Source Files/lpc17xx_emac.c ****  **********************************************************************/
1209:../Source Files/lpc17xx_emac.c **** void EMAC_UpdateTxProduceIndex(void)
1210:../Source Files/lpc17xx_emac.c **** {
 1950              		.loc 1 1210 0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 0
 1953              		@ frame_needed = 0, uses_anonymous_args = 0
 1954              		@ link register save eliminated.
1211:../Source Files/lpc17xx_emac.c **** 	// Get current Tx produce index
1212:../Source Files/lpc17xx_emac.c **** 	uint32_t idx = LPC_EMAC->TxProduceIndex;
 1955              		.loc 1 1212 0
 1956 0868 4FF0A043 		mov	r3, #1342177280
 1957 086c D3F82821 		ldr	r2, [r3, #296]
 1958              	.LVL208:
1213:../Source Files/lpc17xx_emac.c **** 
1214:../Source Files/lpc17xx_emac.c **** 	/* Start frame transmission */
1215:../Source Files/lpc17xx_emac.c **** 	if (++idx == EMAC_NUM_TX_FRAG) idx = 0;
 1959              		.loc 1 1215 0
 1960 0870 501C     		adds	r0, r2, #1
 1961              	.LVL209:
 1962 0872 0328     		cmp	r0, #3
 1963 0874 08BF     		it	eq
 1964 0876 0020     		moveq	r0, #0
 1965              	.LVL210:
1216:../Source Files/lpc17xx_emac.c **** 	LPC_EMAC->TxProduceIndex = idx;
 1966              		.loc 1 1216 0
 1967 0878 C3F82801 		str	r0, [r3, #296]
 1968 087c 7047     		bx	lr
 1969              		.cfi_endproc
 1970              	.LFE81:
 1972              		.align	1
 1973              		.global	ReadFrame_EMAC
 1974              		.thumb
 1975              		.thumb_func
 1977              	ReadFrame_EMAC:
 1978              	.LFB82:
1217:../Source Files/lpc17xx_emac.c **** }
1218:../Source Files/lpc17xx_emac.c **** 
1219:../Source Files/lpc17xx_emac.c **** 
1220:../Source Files/lpc17xx_emac.c **** /**
1221:../Source Files/lpc17xx_emac.c ****  ******************* Functions for Webserver **************************
1222:../Source Files/lpc17xx_emac.c ****  */
1223:../Source Files/lpc17xx_emac.c **** // reads a word in little-endian byte order from RX_BUFFER
1224:../Source Files/lpc17xx_emac.c **** 
1225:../Source Files/lpc17xx_emac.c **** unsigned short ReadFrame_EMAC(void)
1226:../Source Files/lpc17xx_emac.c **** {
 1979              		.loc 1 1226 0
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 0
 1982              		@ frame_needed = 0, uses_anonymous_args = 0
 1983              		@ link register save eliminated.
1227:../Source Files/lpc17xx_emac.c ****   return (*rptr++);
 1984              		.loc 1 1227 0
 1985 087e 044A     		ldr	r2, .L189
 1986 0880 D2F87438 		ldr	r3, [r2, #2164]
 1987 0884 33F8020B 		ldrh	r0, [r3], #2
 1988 0888 C2F87438 		str	r3, [r2, #2164]
1228:../Source Files/lpc17xx_emac.c **** }
 1989              		.loc 1 1228 0
 1990 088c 7047     		bx	lr
 1991              	.L190:
 1992 088e 00BF     		.align	2
 1993              	.L189:
 1994 0890 F0210000 		.word	.LANCHOR3
 1995              		.cfi_endproc
 1996              	.LFE82:
 1998              		.align	1
 1999              		.global	ReadFrameBE_EMAC
 2000              		.thumb
 2001              		.thumb_func
 2003              	ReadFrameBE_EMAC:
 2004              	.LFB83:
1229:../Source Files/lpc17xx_emac.c **** 
1230:../Source Files/lpc17xx_emac.c **** // reads a word in big-endian byte order from RX_FRAME_PORT
1231:../Source Files/lpc17xx_emac.c **** // (useful to avoid permanent byte-swapping while reading
1232:../Source Files/lpc17xx_emac.c **** // TCP/IP-data)
1233:../Source Files/lpc17xx_emac.c **** 
1234:../Source Files/lpc17xx_emac.c **** unsigned short ReadFrameBE_EMAC(void)
1235:../Source Files/lpc17xx_emac.c **** {
 2005              		.loc 1 1235 0
 2006              		.cfi_startproc
 2007              		@ args = 0, pretend = 0, frame = 0
 2008              		@ frame_needed = 0, uses_anonymous_args = 0
 2009              		@ link register save eliminated.
1236:../Source Files/lpc17xx_emac.c ****   unsigned short ReturnValue;
1237:../Source Files/lpc17xx_emac.c **** 
1238:../Source Files/lpc17xx_emac.c ****   ReturnValue = SwapBytes (*rptr++);
 2010              		.loc 1 1238 0
 2011 0894 0549     		ldr	r1, .L192
 2012 0896 D1F87438 		ldr	r3, [r1, #2164]
 2013 089a 33F8022B 		ldrh	r2, [r3], #2
 2014              	.LBB46:
 2015              	.LBB47:
1239:../Source Files/lpc17xx_emac.c ****   return (ReturnValue);
1240:../Source Files/lpc17xx_emac.c **** }
1241:../Source Files/lpc17xx_emac.c **** 
1242:../Source Files/lpc17xx_emac.c **** 
1243:../Source Files/lpc17xx_emac.c **** // copies bytes from frame port to MCU-memory
1244:../Source Files/lpc17xx_emac.c **** // NOTES: * an odd number of byte may only be transfered
1245:../Source Files/lpc17xx_emac.c **** //          if the frame is read to the end!
1246:../Source Files/lpc17xx_emac.c **** //        * MCU-memory MUST start at word-boundary
1247:../Source Files/lpc17xx_emac.c **** 
1248:../Source Files/lpc17xx_emac.c **** void CopyFromFrame_EMAC(void *Dest, unsigned short Size)
1249:../Source Files/lpc17xx_emac.c **** {
1250:../Source Files/lpc17xx_emac.c ****   unsigned short * piDest;                       // Keil: Pointer added to correct expression
1251:../Source Files/lpc17xx_emac.c **** 
1252:../Source Files/lpc17xx_emac.c ****   piDest = Dest;                                 // Keil: Line added
1253:../Source Files/lpc17xx_emac.c ****   while (Size > 1) {
1254:../Source Files/lpc17xx_emac.c ****     *piDest++ = ReadFrame_EMAC();
1255:../Source Files/lpc17xx_emac.c ****     Size -= 2;
1256:../Source Files/lpc17xx_emac.c ****   }
1257:../Source Files/lpc17xx_emac.c **** 
1258:../Source Files/lpc17xx_emac.c ****   if (Size) {                                         // check for leftover byte...
1259:../Source Files/lpc17xx_emac.c ****     *(unsigned char *)piDest = (char)ReadFrame_EMAC();// the LAN-Controller will return 0
1260:../Source Files/lpc17xx_emac.c ****   }                                                   // for the highbyte
1261:../Source Files/lpc17xx_emac.c **** }
1262:../Source Files/lpc17xx_emac.c **** 
1263:../Source Files/lpc17xx_emac.c **** // does a dummy read on frame-I/O-port
1264:../Source Files/lpc17xx_emac.c **** // NOTE: only an even number of bytes is read!
1265:../Source Files/lpc17xx_emac.c **** 
1266:../Source Files/lpc17xx_emac.c **** void DummyReadFrame_EMAC(unsigned short Size)    // discards an EVEN number of bytes
1267:../Source Files/lpc17xx_emac.c **** {                                                // from RX-fifo
1268:../Source Files/lpc17xx_emac.c ****   while (Size > 1) {
1269:../Source Files/lpc17xx_emac.c ****     ReadFrame_EMAC();
1270:../Source Files/lpc17xx_emac.c ****     Size -= 2;
1271:../Source Files/lpc17xx_emac.c ****   }
1272:../Source Files/lpc17xx_emac.c **** }
1273:../Source Files/lpc17xx_emac.c **** 
1274:../Source Files/lpc17xx_emac.c **** // Reads the length of the received ethernet frame and checks if the
1275:../Source Files/lpc17xx_emac.c **** // destination address is a broadcast message or not
1276:../Source Files/lpc17xx_emac.c **** // returns the frame length
1277:../Source Files/lpc17xx_emac.c **** unsigned short StartReadFrame(void) {
1278:../Source Files/lpc17xx_emac.c **** 	unsigned short RxLen;
1279:../Source Files/lpc17xx_emac.c **** 	EMAC_PACKETBUF_Type RxPack;
1280:../Source Files/lpc17xx_emac.c **** 
1281:../Source Files/lpc17xx_emac.c **** 	RxLen = EMAC_GetReceiveDataSize() - 3;
1282:../Source Files/lpc17xx_emac.c **** 	// Copy packet to data buffer
1283:../Source Files/lpc17xx_emac.c **** 	RxPack.pbDataBuf = (uint32_t *)pgBuf;
1284:../Source Files/lpc17xx_emac.c **** 	RxPack.ulDataLen = RxLen;
1285:../Source Files/lpc17xx_emac.c **** 	EMAC_ReadPacketBuffer(&RxPack);
1286:../Source Files/lpc17xx_emac.c **** 	// Point to the data buffer
1287:../Source Files/lpc17xx_emac.c **** 	rptr = (unsigned short *)pgBuf;
1288:../Source Files/lpc17xx_emac.c **** 	return(RxLen);
1289:../Source Files/lpc17xx_emac.c **** }
1290:../Source Files/lpc17xx_emac.c **** 
1291:../Source Files/lpc17xx_emac.c **** // Release the buffer after reading all the content inside
1292:../Source Files/lpc17xx_emac.c **** void EndReadFrame(void) {
1293:../Source Files/lpc17xx_emac.c **** 	// just call EMAC_UpdateConsumeIndex() in EMAC driver
1294:../Source Files/lpc17xx_emac.c **** 	EMAC_UpdateRxConsumeIndex();
1295:../Source Files/lpc17xx_emac.c **** }
1296:../Source Files/lpc17xx_emac.c **** 
1297:../Source Files/lpc17xx_emac.c **** // Check whether if there is a receive packet coming
1298:../Source Files/lpc17xx_emac.c **** unsigned int CheckFrameReceived(void) {             // Packet received ?
1299:../Source Files/lpc17xx_emac.c **** 	// Just call EMAC_CheckReceiveIndex() in EMAC driver
1300:../Source Files/lpc17xx_emac.c **** 	if (EMAC_CheckReceiveIndex() == TRUE){
1301:../Source Files/lpc17xx_emac.c **** 		return (1);
1302:../Source Files/lpc17xx_emac.c **** 	} else {
1303:../Source Files/lpc17xx_emac.c **** 		return (0);
1304:../Source Files/lpc17xx_emac.c **** 	}
1305:../Source Files/lpc17xx_emac.c **** }
1306:../Source Files/lpc17xx_emac.c **** 
1307:../Source Files/lpc17xx_emac.c **** // requests space in EMAC memory for storing an outgoing frame
1308:../Source Files/lpc17xx_emac.c **** void RequestSend(unsigned short FrameSize)
1309:../Source Files/lpc17xx_emac.c **** {
1310:../Source Files/lpc17xx_emac.c **** 	// Nothing to do here, just implemented in CopyToFrame_EMAC()
1311:../Source Files/lpc17xx_emac.c **** }
1312:../Source Files/lpc17xx_emac.c **** 
1313:../Source Files/lpc17xx_emac.c **** // check if ethernet controller is ready to accept the
1314:../Source Files/lpc17xx_emac.c **** // frame we want to send
1315:../Source Files/lpc17xx_emac.c **** 
1316:../Source Files/lpc17xx_emac.c **** unsigned int Rdy4Tx(void)
1317:../Source Files/lpc17xx_emac.c **** {
1318:../Source Files/lpc17xx_emac.c ****   return (1);   // the ethernet controller transmits much faster
1319:../Source Files/lpc17xx_emac.c **** }               // than the CPU can load its buffers
1320:../Source Files/lpc17xx_emac.c **** 
1321:../Source Files/lpc17xx_emac.c **** 
1322:../Source Files/lpc17xx_emac.c **** // writes a word in little-endian byte order to TX_BUFFER
1323:../Source Files/lpc17xx_emac.c **** void WriteFrame_EMAC(unsigned short Data)
1324:../Source Files/lpc17xx_emac.c **** {
1325:../Source Files/lpc17xx_emac.c ****   *tptr++ = Data;
1326:../Source Files/lpc17xx_emac.c **** }
1327:../Source Files/lpc17xx_emac.c **** 
1328:../Source Files/lpc17xx_emac.c **** // copies bytes from MCU-memory to frame port
1329:../Source Files/lpc17xx_emac.c **** // NOTES: * an odd number of byte may only be transfered
1330:../Source Files/lpc17xx_emac.c **** //          if the frame is written to the end!
1331:../Source Files/lpc17xx_emac.c **** //        * MCU-memory MUST start at word-boundary
1332:../Source Files/lpc17xx_emac.c **** 
1333:../Source Files/lpc17xx_emac.c **** void CopyToFrame_EMAC(void *Source, unsigned int Size)
1334:../Source Files/lpc17xx_emac.c **** {
1335:../Source Files/lpc17xx_emac.c **** 	EMAC_PACKETBUF_Type TxPack;
1336:../Source Files/lpc17xx_emac.c **** 
1337:../Source Files/lpc17xx_emac.c **** 	// Setup Tx Packet buffer
1338:../Source Files/lpc17xx_emac.c **** 	// NXP: Added for compatibility with old style
1339:../Source Files/lpc17xx_emac.c **** 	TxPack.ulDataLen = Size;
1340:../Source Files/lpc17xx_emac.c **** 	TxPack.pbDataBuf = (uint32_t *)Source;
1341:../Source Files/lpc17xx_emac.c **** 	EMAC_WritePacketBuffer(&TxPack);
1342:../Source Files/lpc17xx_emac.c **** 	EMAC_UpdateTxProduceIndex();
1343:../Source Files/lpc17xx_emac.c **** }
1344:../Source Files/lpc17xx_emac.c **** 
1345:../Source Files/lpc17xx_emac.c **** 
1346:../Source Files/lpc17xx_emac.c **** unsigned short SwapBytes(unsigned short Data)
1347:../Source Files/lpc17xx_emac.c **** {
1348:../Source Files/lpc17xx_emac.c ****   return (Data >> 8) | (Data << 8);
 2016              		.loc 1 1348 0
 2017 089e 100A     		lsrs	r0, r2, #8
 2018              	.LBE47:
 2019              	.LBE46:
1238:../Source Files/lpc17xx_emac.c ****   ReturnValue = SwapBytes (*rptr++);
 2020              		.loc 1 1238 0
 2021 08a0 C1F87438 		str	r3, [r1, #2164]
 2022              	.LVL211:
 2023              	.LBB49:
 2024              	.LBB48:
 2025              		.loc 1 1348 0
 2026 08a4 40EA0221 		orr	r1, r0, r2, lsl #8
 2027              	.LBE48:
 2028              	.LBE49:
1240:../Source Files/lpc17xx_emac.c **** }
 2029              		.loc 1 1240 0
 2030 08a8 88B2     		uxth	r0, r1
 2031 08aa 7047     		bx	lr
 2032              	.L193:
 2033              		.align	2
 2034              	.L192:
 2035 08ac F0210000 		.word	.LANCHOR3
 2036              		.cfi_endproc
 2037              	.LFE83:
 2039              		.align	1
 2040              		.global	CopyFromFrame_EMAC
 2041              		.thumb
 2042              		.thumb_func
 2044              	CopyFromFrame_EMAC:
 2045              	.LFB84:
1249:../Source Files/lpc17xx_emac.c **** {
 2046              		.loc 1 1249 0
 2047              		.cfi_startproc
 2048              		@ args = 0, pretend = 0, frame = 0
 2049              		@ frame_needed = 0, uses_anonymous_args = 0
 2050              	.LVL212:
 2051 08b0 70B5     		push	{r4, r5, r6, lr}
 2052              	.LCFI11:
 2053              		.cfi_def_cfa_offset 16
 2054              		.cfi_offset 4, -16
 2055              		.cfi_offset 5, -12
 2056              		.cfi_offset 6, -8
 2057              		.cfi_offset 14, -4
1249:../Source Files/lpc17xx_emac.c **** {
 2058              		.loc 1 1249 0
 2059 08b2 0446     		mov	r4, r0
 2060 08b4 0D46     		mov	r5, r1
1252:../Source Files/lpc17xx_emac.c ****   piDest = Dest;                                 // Keil: Line added
 2061              		.loc 1 1252 0
 2062 08b6 0646     		mov	r6, r0
 2063              	.LVL213:
 2064              	.L195:
1248:../Source Files/lpc17xx_emac.c **** void CopyFromFrame_EMAC(void *Dest, unsigned short Size)
 2065              		.loc 1 1248 0 discriminator 1
 2066 08b8 2B19     		adds	r3, r5, r4
1253:../Source Files/lpc17xx_emac.c ****   while (Size > 1) {
 2067              		.loc 1 1253 0 discriminator 1
 2068 08ba 981B     		subs	r0, r3, r6
 2069 08bc 81B2     		uxth	r1, r0
 2070 08be 0129     		cmp	r1, #1
 2071 08c0 04D9     		bls	.L201
 2072              	.L196:
1254:../Source Files/lpc17xx_emac.c ****     *piDest++ = ReadFrame_EMAC();
 2073              		.loc 1 1254 0
 2074 08c2 FFF7FEFF 		bl	ReadFrame_EMAC
 2075              	.LVL214:
 2076 08c6 26F8020B 		strh	r0, [r6], #2	@ movhi
 2077              	.LVL215:
 2078 08ca F5E7     		b	.L195
 2079              	.L201:
1248:../Source Files/lpc17xx_emac.c **** void CopyFromFrame_EMAC(void *Dest, unsigned short Size)
 2080              		.loc 1 1248 0
 2081 08cc 6E08     		lsrs	r6, r5, #1
 2082              	.LVL216:
1258:../Source Files/lpc17xx_emac.c ****   if (Size) {                                         // check for leftover byte...
 2083              		.loc 1 1258 0
 2084 08ce E907     		lsls	r1, r5, #31
 2085 08d0 03D5     		bpl	.L194
1259:../Source Files/lpc17xx_emac.c ****     *(unsigned char *)piDest = (char)ReadFrame_EMAC();// the LAN-Controller will return 0
 2086              		.loc 1 1259 0
 2087 08d2 FFF7FEFF 		bl	ReadFrame_EMAC
 2088              	.LVL217:
 2089 08d6 04F81600 		strb	r0, [r4, r6, lsl #1]
 2090              	.L194:
 2091 08da 70BD     		pop	{r4, r5, r6, pc}
 2092              		.cfi_endproc
 2093              	.LFE84:
 2095              		.align	1
 2096              		.global	DummyReadFrame_EMAC
 2097              		.thumb
 2098              		.thumb_func
 2100              	DummyReadFrame_EMAC:
 2101              	.LFB85:
1267:../Source Files/lpc17xx_emac.c **** {                                                // from RX-fifo
 2102              		.loc 1 1267 0
 2103              		.cfi_startproc
 2104              		@ args = 0, pretend = 0, frame = 0
 2105              		@ frame_needed = 0, uses_anonymous_args = 0
 2106              	.LVL218:
 2107 08dc 10B5     		push	{r4, lr}
 2108              	.LCFI12:
 2109              		.cfi_def_cfa_offset 8
 2110              		.cfi_offset 4, -8
 2111              		.cfi_offset 14, -4
 2112 08de 0446     		mov	r4, r0
 2113              	.LVL219:
 2114              	.L203:
1268:../Source Files/lpc17xx_emac.c ****   while (Size > 1) {
 2115              		.loc 1 1268 0 discriminator 1
 2116 08e0 012C     		cmp	r4, #1
 2117 08e2 04D9     		bls	.L205
 2118              	.L204:
1270:../Source Files/lpc17xx_emac.c ****     Size -= 2;
 2119              		.loc 1 1270 0
 2120 08e4 023C     		subs	r4, r4, #2
 2121              	.LVL220:
1269:../Source Files/lpc17xx_emac.c ****     ReadFrame_EMAC();
 2122              		.loc 1 1269 0
 2123 08e6 FFF7FEFF 		bl	ReadFrame_EMAC
 2124              	.LVL221:
1270:../Source Files/lpc17xx_emac.c ****     Size -= 2;
 2125              		.loc 1 1270 0
 2126 08ea A4B2     		uxth	r4, r4
 2127              	.LVL222:
 2128 08ec F8E7     		b	.L203
 2129              	.L205:
1272:../Source Files/lpc17xx_emac.c **** }
 2130              		.loc 1 1272 0
 2131 08ee 10BD     		pop	{r4, pc}
 2132              		.cfi_endproc
 2133              	.LFE85:
 2135              		.align	1
 2136              		.global	StartReadFrame
 2137              		.thumb
 2138              		.thumb_func
 2140              	StartReadFrame:
 2141              	.LFB86:
1277:../Source Files/lpc17xx_emac.c **** unsigned short StartReadFrame(void) {
 2142              		.loc 1 1277 0
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 8
 2145              		@ frame_needed = 0, uses_anonymous_args = 0
 2146 08f0 37B5     		push	{r0, r1, r2, r4, r5, lr}
 2147              	.LCFI13:
 2148              		.cfi_def_cfa_offset 24
 2149              		.cfi_offset 0, -24
 2150              		.cfi_offset 1, -20
 2151              		.cfi_offset 2, -16
 2152              		.cfi_offset 4, -12
 2153              		.cfi_offset 5, -8
 2154              		.cfi_offset 14, -4
1281:../Source Files/lpc17xx_emac.c **** 	RxLen = EMAC_GetReceiveDataSize() - 3;
 2155              		.loc 1 1281 0
 2156 08f2 FFF7FEFF 		bl	EMAC_GetReceiveDataSize
 2157              	.LVL223:
1283:../Source Files/lpc17xx_emac.c **** 	RxPack.pbDataBuf = (uint32_t *)pgBuf;
 2158              		.loc 1 1283 0
 2159 08f6 074D     		ldr	r5, .L207
1281:../Source Files/lpc17xx_emac.c **** 	RxLen = EMAC_GetReceiveDataSize() - 3;
 2160              		.loc 1 1281 0
 2161 08f8 0338     		subs	r0, r0, #3
 2162 08fa 84B2     		uxth	r4, r0
 2163              	.LVL224:
1284:../Source Files/lpc17xx_emac.c **** 	RxPack.ulDataLen = RxLen;
 2164              		.loc 1 1284 0
 2165 08fc 02A9     		add	r1, sp, #8
1285:../Source Files/lpc17xx_emac.c **** 	EMAC_ReadPacketBuffer(&RxPack);
 2166              		.loc 1 1285 0
 2167 08fe 6846     		mov	r0, sp
 2168              	.LVL225:
1283:../Source Files/lpc17xx_emac.c **** 	RxPack.pbDataBuf = (uint32_t *)pgBuf;
 2169              		.loc 1 1283 0
 2170 0900 0195     		str	r5, [sp, #4]
1284:../Source Files/lpc17xx_emac.c **** 	RxPack.ulDataLen = RxLen;
 2171              		.loc 1 1284 0
 2172 0902 41F8084D 		str	r4, [r1, #-8]!
1285:../Source Files/lpc17xx_emac.c **** 	EMAC_ReadPacketBuffer(&RxPack);
 2173              		.loc 1 1285 0
 2174 0906 FFF7FEFF 		bl	EMAC_ReadPacketBuffer
 2175              	.LVL226:
1287:../Source Files/lpc17xx_emac.c **** 	rptr = (unsigned short *)pgBuf;
 2176              		.loc 1 1287 0
 2177 090a 034B     		ldr	r3, .L207+4
1289:../Source Files/lpc17xx_emac.c **** }
 2178              		.loc 1 1289 0
 2179 090c 2046     		mov	r0, r4
1287:../Source Files/lpc17xx_emac.c **** 	rptr = (unsigned short *)pgBuf;
 2180              		.loc 1 1287 0
 2181 090e C3F87458 		str	r5, [r3, #2164]
1289:../Source Files/lpc17xx_emac.c **** }
 2182              		.loc 1 1289 0
 2183 0912 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
 2184              	.L208:
 2185              		.align	2
 2186              	.L207:
 2187 0914 00000820 		.word	537395200
 2188 0918 F0210000 		.word	.LANCHOR3
 2189              		.cfi_endproc
 2190              	.LFE86:
 2192              		.align	1
 2193              		.global	EndReadFrame
 2194              		.thumb
 2195              		.thumb_func
 2197              	EndReadFrame:
 2198              	.LFB87:
1292:../Source Files/lpc17xx_emac.c **** void EndReadFrame(void) {
 2199              		.loc 1 1292 0
 2200              		.cfi_startproc
 2201              		@ args = 0, pretend = 0, frame = 0
 2202              		@ frame_needed = 0, uses_anonymous_args = 0
 2203              		@ link register save eliminated.
1295:../Source Files/lpc17xx_emac.c **** }
 2204              		.loc 1 1295 0
1294:../Source Files/lpc17xx_emac.c **** 	EMAC_UpdateRxConsumeIndex();
 2205              		.loc 1 1294 0
 2206 091c FFF7FEBF 		b	EMAC_UpdateRxConsumeIndex
 2207              	.LVL227:
 2208              		.cfi_endproc
 2209              	.LFE87:
 2211              		.align	1
 2212              		.global	CheckFrameReceived
 2213              		.thumb
 2214              		.thumb_func
 2216              	CheckFrameReceived:
 2217              	.LFB88:
1298:../Source Files/lpc17xx_emac.c **** unsigned int CheckFrameReceived(void) {             // Packet received ?
 2218              		.loc 1 1298 0
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 0
 2221              		@ frame_needed = 0, uses_anonymous_args = 0
 2222 0920 08B5     		push	{r3, lr}
 2223              	.LCFI14:
 2224              		.cfi_def_cfa_offset 8
 2225              		.cfi_offset 3, -8
 2226              		.cfi_offset 14, -4
1300:../Source Files/lpc17xx_emac.c **** 	if (EMAC_CheckReceiveIndex() == TRUE){
 2227              		.loc 1 1300 0
 2228 0922 FFF7FEFF 		bl	EMAC_CheckReceiveIndex
 2229              	.LVL228:
1305:../Source Files/lpc17xx_emac.c **** }
 2230              		.loc 1 1305 0
 2231 0926 B0F1010E 		subs	lr, r0, #1
 2232 092a DEF10000 		rsbs	r0, lr, #0
 2233 092e 50EB0E00 		adcs	r0, r0, lr
 2234 0932 08BD     		pop	{r3, pc}
 2235              		.cfi_endproc
 2236              	.LFE88:
 2238              		.align	1
 2239              		.global	RequestSend
 2240              		.thumb
 2241              		.thumb_func
 2243              	RequestSend:
 2244              	.LFB89:
1309:../Source Files/lpc17xx_emac.c **** {
 2245              		.loc 1 1309 0
 2246              		.cfi_startproc
 2247              		@ args = 0, pretend = 0, frame = 0
 2248              		@ frame_needed = 0, uses_anonymous_args = 0
 2249              		@ link register save eliminated.
 2250              	.LVL229:
 2251 0934 7047     		bx	lr
 2252              		.cfi_endproc
 2253              	.LFE89:
 2255              		.align	1
 2256              		.global	Rdy4Tx
 2257              		.thumb
 2258              		.thumb_func
 2260              	Rdy4Tx:
 2261              	.LFB90:
1317:../Source Files/lpc17xx_emac.c **** {
 2262              		.loc 1 1317 0
 2263              		.cfi_startproc
 2264              		@ args = 0, pretend = 0, frame = 0
 2265              		@ frame_needed = 0, uses_anonymous_args = 0
 2266              		@ link register save eliminated.
1319:../Source Files/lpc17xx_emac.c **** }               // than the CPU can load its buffers
 2267              		.loc 1 1319 0
 2268 0936 0120     		movs	r0, #1
 2269 0938 7047     		bx	lr
 2270              		.cfi_endproc
 2271              	.LFE90:
 2273              		.align	1
 2274              		.global	WriteFrame_EMAC
 2275              		.thumb
 2276              		.thumb_func
 2278              	WriteFrame_EMAC:
 2279              	.LFB91:
1324:../Source Files/lpc17xx_emac.c **** {
 2280              		.loc 1 1324 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284              		@ link register save eliminated.
 2285              	.LVL230:
1325:../Source Files/lpc17xx_emac.c ****   *tptr++ = Data;
 2286              		.loc 1 1325 0
 2287 093a 044A     		ldr	r2, .L214
 2288 093c D2F87838 		ldr	r3, [r2, #2168]
 2289 0940 23F8020B 		strh	r0, [r3], #2	@ movhi
 2290 0944 C2F87838 		str	r3, [r2, #2168]
 2291 0948 7047     		bx	lr
 2292              	.L215:
 2293 094a 00BF     		.align	2
 2294              	.L214:
 2295 094c F0210000 		.word	.LANCHOR3
 2296              		.cfi_endproc
 2297              	.LFE91:
 2299              		.align	1
 2300              		.global	CopyToFrame_EMAC
 2301              		.thumb
 2302              		.thumb_func
 2304              	CopyToFrame_EMAC:
 2305              	.LFB92:
1334:../Source Files/lpc17xx_emac.c **** {
 2306              		.loc 1 1334 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 8
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
 2310              	.LVL231:
 2311 0950 07B5     		push	{r0, r1, r2, lr}
 2312              	.LCFI15:
 2313              		.cfi_def_cfa_offset 16
 2314              		.cfi_offset 0, -16
 2315              		.cfi_offset 1, -12
 2316              		.cfi_offset 2, -8
 2317              		.cfi_offset 14, -4
1340:../Source Files/lpc17xx_emac.c **** 	TxPack.pbDataBuf = (uint32_t *)Source;
 2318              		.loc 1 1340 0
 2319 0952 0190     		str	r0, [sp, #4]
1341:../Source Files/lpc17xx_emac.c **** 	EMAC_WritePacketBuffer(&TxPack);
 2320              		.loc 1 1341 0
 2321 0954 6846     		mov	r0, sp
 2322              	.LVL232:
1339:../Source Files/lpc17xx_emac.c **** 	TxPack.ulDataLen = Size;
 2323              		.loc 1 1339 0
 2324 0956 0091     		str	r1, [sp, #0]
1341:../Source Files/lpc17xx_emac.c **** 	EMAC_WritePacketBuffer(&TxPack);
 2325              		.loc 1 1341 0
 2326 0958 FFF7FEFF 		bl	EMAC_WritePacketBuffer
 2327              	.LVL233:
1342:../Source Files/lpc17xx_emac.c **** 	EMAC_UpdateTxProduceIndex();
 2328              		.loc 1 1342 0
 2329 095c FFF7FEFF 		bl	EMAC_UpdateTxProduceIndex
 2330              	.LVL234:
1343:../Source Files/lpc17xx_emac.c **** }
 2331              		.loc 1 1343 0
 2332 0960 0EBD     		pop	{r1, r2, r3, pc}
 2333              		.cfi_endproc
 2334              	.LFE92:
 2336              		.align	1
 2337              		.global	SwapBytes
 2338              		.thumb
 2339              		.thumb_func
 2341              	SwapBytes:
 2342              	.LFB93:
1347:../Source Files/lpc17xx_emac.c **** {
 2343              		.loc 1 1347 0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 0
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
 2347              		@ link register save eliminated.
 2348              	.LVL235:
 2349              		.loc 1 1348 0
 2350 0962 030A     		lsrs	r3, r0, #8
 2351 0964 43EA0020 		orr	r0, r3, r0, lsl #8
 2352              	.LVL236:
1349:../Source Files/lpc17xx_emac.c **** }
 2353              		.loc 1 1349 0
 2354 0968 80B2     		uxth	r0, r0
 2355 096a 7047     		bx	lr
 2356              		.cfi_endproc
 2357              	.LFE93:
 2359              		.global	EMAC_clkdiv
 2360              		.comm	gRxBuf,130,4
 2361              		.comm	gTxBuf,130,4
 2362              		.comm	Rx_Buf1,64,1
 2363              		.comm	Tx_Buf1,64,1
 2364              		.comm	TxIntStat,1,1
 2365              		.comm	rb,528,4
 2366              		.comm	EscFlag,2,2
 2367              		.section	.rodata
 2368              		.set	.LANCHOR0,. + 0
 2371              	EMAC_clkdiv:
 2372 0000 04       		.byte	4
 2373 0001 06       		.byte	6
 2374 0002 08       		.byte	8
 2375 0003 0A       		.byte	10
 2376 0004 0E       		.byte	14
 2377 0005 14       		.byte	20
 2378 0006 1C       		.byte	28
 2379              	.LC0:
 2380 0007 0C       		.byte	12
 2381 0008 1D       		.byte	29
 2382 0009 12       		.byte	18
 2383 000a E0       		.byte	-32
 2384 000b 1F       		.byte	31
 2385 000c 10       		.byte	16
 2386              		.section	.rodata.str1.1,"aMS",%progbits,1
 2387              	.LC1:
 2388 0000 4C696E6B 		.ascii	"Link is UP\012\015\000"
 2388      20697320 
 2388      55500A0D 
 2388      00
 2389              	.LC2:
 2390 000d 4C696E6B 		.ascii	"Link is Full Duplex\012\015\000"
 2390      20697320 
 2390      46756C6C 
 2390      20447570 
 2390      6C65780A 
 2391              	.LC3:
 2392 0023 4C696E6B 		.ascii	"Link is Half Duplex\012\015\000"
 2392      20697320 
 2392      48616C66 
 2392      20447570 
 2392      6C65780A 
 2393              	.LC4:
 2394 0039 4C696E6B 		.ascii	"Link is 10MBit\012\015\000"
 2394      20697320 
 2394      31304D42 
 2394      69740A0D 
 2394      00
 2395              	.LC5:
 2396 004a 4C696E6B 		.ascii	"Link is 100MBit\012\015\000"
 2396      20697320 
 2396      3130304D 
 2396      4269740A 
 2396      0D00
 2397              	.LC6:
 2398 005c 4175746F 		.ascii	"Auto-negotiation has completed\012\015\000"
 2398      2D6E6567 
 2398      6F746961 
 2398      74696F6E 
 2398      20686173 
 2399              	.LC7:
 2400 007d 496E6974 		.ascii	"Init EMAC module\012\015\000"
 2400      20454D41 
 2400      43206D6F 
 2400      64756C65 
 2400      0A0D00
 2401              	.LC8:
 2402 0090 4D41435B 		.ascii	"MAC[1..6] addr: %x02-%x02-%x02-%x02-%x02-%x02 \012\015"
 2402      312E2E36 
 2402      5D206164 
 2402      64723A20 
 2402      25783032 
 2403 00c0 00       		.ascii	"\000"
 2404              	.LC9:
 2405 00c1 4572726F 		.ascii	"Error during initializing EMAC, restart after a whi"
 2405      72206475 
 2405      72696E67 
 2405      20696E69 
 2405      7469616C 
 2406 00f4 6C650A0D 		.ascii	"le\012\015\000"
 2406      00
 2407              	.LC10:
 2408 00f9 496E6974 		.ascii	"Initialize EMAC complete\012\015\000"
 2408      69616C69 
 2408      7A652045 
 2408      4D414320 
 2408      636F6D70 
 2409              	.LC11:
 2410 0114 5278206F 		.ascii	"Rx overrun\012\015\000"
 2410      76657272 
 2410      756E0A0D 
 2410      00
 2411              	.LC12:
 2412 0121 52782065 		.ascii	"Rx error: \012\015\000"
 2412      72726F72 
 2412      3A200A0D 
 2412      00
 2413              	.LC13:
 2414 012e 52782066 		.ascii	"Rx finish\012\015\000"
 2414      696E6973 
 2414      680A0D00 
 2415              	.LC14:
 2416 013a 52782064 		.ascii	"Rx done\012\015\000"
 2416      6F6E650A 
 2416      0D00
 2417              	.LC15:
 2418 0144 54782075 		.ascii	"Tx under-run\012\015\000"
 2418      6E646572 
 2418      2D72756E 
 2418      0A0D00
 2419              	.LC16:
 2420 0153 54782065 		.ascii	"Tx error\012\015\000"
 2420      72726F72 
 2420      0A0D00
 2421              	.LC17:
 2422 015e 54782066 		.ascii	"Tx finish\012\015\000"
 2422      696E6973 
 2422      680A0D00 
 2423              	.LC18:
 2424 016a 54782064 		.ascii	"Tx done\012\015\000"
 2424      6F6E650A 
 2424      0D00
 2425              		.bss
 2426              		.align	3
 2427              		.set	.LANCHOR1,. + 0
 2428              		.set	.LANCHOR2,. + 4344
 2429              		.set	.LANCHOR3,. + 8688
 2432              	Rx_Desc:
 2433 0000 00000000 		.space	32
 2433      00000000 
 2433      00000000 
 2433      00000000 
 2433      00000000 
 2436              	rx_buf:
 2437 0020 00000000 		.space	6144
 2437      00000000 
 2437      00000000 
 2437      00000000 
 2437      00000000 
 2440              	Rx_Stat:
 2441 1820 00000000 		.space	32
 2441      00000000 
 2441      00000000 
 2441      00000000 
 2441      00000000 
 2444              	Tx_Desc:
 2445 1840 00000000 		.space	24
 2445      00000000 
 2445      00000000 
 2445      00000000 
 2445      00000000 
 2448              	tx_buf:
 2449 1858 00000000 		.space	4608
 2449      00000000 
 2449      00000000 
 2449      00000000 
 2449      00000000 
 2452              	Tx_Stat:
 2453 2a58 00000000 		.space	12
 2453      00000000 
 2453      00000000 
 2456              	rptr:
 2457 2a64 00000000 		.space	4
 2460              	tptr:
 2461 2a68 00000000 		.space	4
 2462 2a6c 00000000 		.text
 2463              	.Letext0:
 2464              		.file 3 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\CM3 Core/LPC17xx.h"
 2465              		.file 4 "c:\\program files\\gnu tools arm embedded\\4.7 2013q2\\bin\\../lib/gcc/arm-none-eabi/4.7.
 2466              		.file 5 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\Header Files/lpc_types.h"
 2467              		.file 6 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\Header Files/lpc17xx_pinsel.h"
 2468              		.file 7 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\Header Files/lpc17xx_uart.h"
 2469              		.file 8 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\Header Files/lpc17xx_emac.h"
 2470              		.file 9 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\CM3 Core/system_LPC17xx.h"
 2471              		.file 10 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\Header Files/lpc17xx_ssp.h"
 2472              		.file 11 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\Header Files/lpc_system_init.h"
 2473              		.file 12 "C:\\E_Workspace\\LPC1768\\Eg8_TFT\\Header Files/lpc17xx_clkpwr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lpc17xx_emac.c
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:18     .text:00000000 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:22     .text:00000000 read_PHY
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:72     .text:0000002a write_PHY.constprop.1
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:111    .text:0000004e PacketGen
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:225    .text:000000b4 EMAC_DeInit
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:255    .text:000000ce EMAC_CheckPHYStatus
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:320    .text:00000106 EMAC_UpdatePHYStatus
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:429    .text:00000188 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:438    .text:000001a0 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:443    .text:000001a0 EMAC_SetPHYMode
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:485    .text:000001ca $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:556    .text:00000220 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:562    .text:0000022c $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:567    .text:0000022c EMAC_Init
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:860    .text:000003b0 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:871    .text:000003d0 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:876    .text:000003d0 EMAC_Config
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1095   .text:000004dc $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1105   .text:000004f8 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1110   .text:000004f8 EMAC_SetHashFilter
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1256   .text:000005a4 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1265   .text:000005bc $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1270   .text:000005bc EMAC_SetFilterMode
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1299   .text:000005d4 EMAC_GetWoLStatus
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1333   .text:000005ee EMAC_WritePacketBuffer
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1402   .text:0000062c $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1406   .text:00000630 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1411   .text:00000630 EMAC_ReadPacketBuffer
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1468   .text:0000065c $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1472   .text:00000660 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1477   .text:00000660 EMAC_IntCmd
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1506   .text:00000678 EMAC_IntGetStatus
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1540   .text:00000692 EMAC_CheckReceiveIndex
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1564   .text:000006a6 EMAC_CheckTransmitIndex
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1593   .text:000006bc EMAC_CheckReceiveDataStatus
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1620   .text:000006d8 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1624   .text:000006dc $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1629   .text:000006dc EMAC_GetReceiveDataSize
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1652   .text:000006f4 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1656   .text:000006f8 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1661   .text:000006f8 EMAC_UpdateRxConsumeIndex
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1690   .text:0000070e ENET_IRQHandler
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1919   .text:00000814 $d
                            *COM*:00000082 gRxBuf
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1943   .text:00000868 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1948   .text:00000868 EMAC_UpdateTxProduceIndex
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1977   .text:0000087e ReadFrame_EMAC
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1994   .text:00000890 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:1998   .text:00000894 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2003   .text:00000894 ReadFrameBE_EMAC
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2035   .text:000008ac $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2039   .text:000008b0 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2044   .text:000008b0 CopyFromFrame_EMAC
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2100   .text:000008dc DummyReadFrame_EMAC
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2140   .text:000008f0 StartReadFrame
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2187   .text:00000914 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2192   .text:0000091c $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2197   .text:0000091c EndReadFrame
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2216   .text:00000920 CheckFrameReceived
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2243   .text:00000934 RequestSend
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2260   .text:00000936 Rdy4Tx
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2278   .text:0000093a WriteFrame_EMAC
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2295   .text:0000094c $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2299   .text:00000950 $t
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2304   .text:00000950 CopyToFrame_EMAC
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2341   .text:00000962 SwapBytes
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2371   .rodata:00000000 EMAC_clkdiv
                            *COM*:00000082 gTxBuf
                            *COM*:00000040 Rx_Buf1
                            *COM*:00000040 Tx_Buf1
                            *COM*:00000001 TxIntStat
                            *COM*:00000210 rb
                            *COM*:00000002 EscFlag
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2426   .bss:00000000 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2432   .bss:00000000 Rx_Desc
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2436   .bss:00000020 rx_buf
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2440   .bss:00001820 Rx_Stat
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2444   .bss:00001840 Tx_Desc
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2448   .bss:00001858 tx_buf
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2452   .bss:00002a58 Tx_Stat
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2456   .bss:00002a64 rptr
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:2460   .bss:00002a68 tptr
                     .debug_frame:00000010 $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:490    .text:000001cf $d
C:\Users\Edu_win7\AppData\Local\Temp\cct1zftI.s:490    .text:000001d0 $t
                           .group:00000000 wm4.1.549b84bf9d8399e395ff8216fcbb3d69
                           .group:00000000 wm4.LPC17xx.h.27.964facdaadd4aa3f18ac78c8a78f0013
                           .group:00000000 wm4.core_cm3.h.32.3cac756d6e704b813781f82afd94fa5f
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.6beb15babd14c076008ec0890c26e21c
                           .group:00000000 wm4.core_cm3.h.83.1a3cb9afc687cf157efeddb3d5f3109e
                           .group:00000000 wm4.LPC17xx.h.953.82b7a9ed60bb594048bc8738cf1d3489
                           .group:00000000 wm4.lpc_types.h.32.72d58ce80fabd1a5430c6ec0500a090b
                           .group:00000000 wm4.lpc17xx_pinsel.h.30.767cda9b27a5c688cd97e5947d664047
                           .group:00000000 wm4.lpc17xx_clkpwr.h.30.8537d92ff6965961e80fda89ac5019f2
                           .group:00000000 wm4.lpc17xx_systick.h.30.9f34c15ae315a203fed1d933040ad7b9
                           .group:00000000 wm4.lpc17xx_gpio.h.30.0b884ee110dd20865784f12e1569ecf1
                           .group:00000000 wm4.lpc17xx_wdt.h.34.a2dcafab9849854019efb51f717a8129
                           .group:00000000 wm4.stdarg.h.31.b70f21342353634f7b44d85f85f13832
                           .group:00000000 wm4.lpc17xx_uart.h.58.dbba6e724b29a6214e9cafbaf3ee8a9e
                           .group:00000000 wm4.lpc17xx_ssp.h.48.cd045d667ab7b89d5d550d38997df61b
                           .group:00000000 wm4.lpc_ssp_glcd.h.29.0f086fd3ba564c80425f085247dfad00
                           .group:00000000 wm4.lpc17xx_emac.h.57.2394dea344c9d030c5f12a0a9298a954

UNDEFINED SYMBOLS
crc32_bfr
CLKPWR_ConfigPPWR
printf
SystemCoreClock
PINSEL_ConfigPin
RXOverrunCount
RXErrorCount
RxFinishedCount
ReceiveLength
PacketReceived
RxDoneCount
TXUnderrunCount
TXErrorCount
TxFinishedCount
TxDoneCount
