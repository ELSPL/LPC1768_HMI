   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"lpc17xx_mcpwm.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	1
  19              		.global	MCPWM_Init
  20              		.thumb
  21              		.thumb_func
  23              	MCPWM_Init:
  24              	.LFB57:
  25              		.file 1 "../Source_Files/lpc17xx_mcpwm.c"
   1:../Source_Files/lpc17xx_mcpwm.c **** /**********************************************************************
   2:../Source_Files/lpc17xx_mcpwm.c **** * $Id$		lpc17xx_mcpwm.c
   3:../Source_Files/lpc17xx_mcpwm.c **** *//**
   4:../Source_Files/lpc17xx_mcpwm.c **** * @file		lpc17xx_mcpwm.c
   5:../Source_Files/lpc17xx_mcpwm.c **** * @brief	Contains all functions support for MCPWM firmware library on LPC17xx
   6:../Source_Files/lpc17xx_mcpwm.c **** * @version	1.0
   7:../Source_Files/lpc17xx_mcpwm.c **** * @date		02. Dec. 2013
   8:../Source_Files/lpc17xx_mcpwm.c **** * @author	Dwijay.Edutech Learning Solutions
   9:../Source_Files/lpc17xx_mcpwm.c **** ***********************************************************************
  10:../Source_Files/lpc17xx_mcpwm.c **** * Software that is described herein is for illustrative purposes only
  11:../Source_Files/lpc17xx_mcpwm.c **** * which provides customers with programming information regarding the
  12:../Source_Files/lpc17xx_mcpwm.c **** * products. This software is supplied "AS IS" without any warranties.
  13:../Source_Files/lpc17xx_mcpwm.c **** * NXP Semiconductors assumes no responsibility or liability for the
  14:../Source_Files/lpc17xx_mcpwm.c **** * use of the software, conveys no license or title under any patent,
  15:../Source_Files/lpc17xx_mcpwm.c **** * copyright, or mask work right to the product. NXP Semiconductors
  16:../Source_Files/lpc17xx_mcpwm.c **** * reserves the right to make changes in the software without
  17:../Source_Files/lpc17xx_mcpwm.c **** * notification. NXP Semiconductors also make no representation or
  18:../Source_Files/lpc17xx_mcpwm.c **** * warranty that such application will be suitable for the specified
  19:../Source_Files/lpc17xx_mcpwm.c **** * use without further testing or modification.
  20:../Source_Files/lpc17xx_mcpwm.c **** **********************************************************************/
  21:../Source_Files/lpc17xx_mcpwm.c **** 
  22:../Source_Files/lpc17xx_mcpwm.c **** /* Peripheral group ----------------------------------------------------------- */
  23:../Source_Files/lpc17xx_mcpwm.c **** /** @addtogroup MCPWM
  24:../Source_Files/lpc17xx_mcpwm.c ****  * @{
  25:../Source_Files/lpc17xx_mcpwm.c ****  */
  26:../Source_Files/lpc17xx_mcpwm.c **** 
  27:../Source_Files/lpc17xx_mcpwm.c **** /* Includes ------------------------------------------------------------------- */
  28:../Source_Files/lpc17xx_mcpwm.c **** #include "lpc_system_init.h"
  29:../Source_Files/lpc17xx_mcpwm.c **** #include "lpc17xx_mcpwm.h"
  30:../Source_Files/lpc17xx_mcpwm.c **** 
  31:../Source_Files/lpc17xx_mcpwm.c **** /* If this source file built with example, the LPC17xx FW library configuration
  32:../Source_Files/lpc17xx_mcpwm.c ****  * file in each example directory ("lpc17xx_libcfg.h") must be included,
  33:../Source_Files/lpc17xx_mcpwm.c ****  * otherwise the default FW library configuration file must be included instead
  34:../Source_Files/lpc17xx_mcpwm.c ****  */
  35:../Source_Files/lpc17xx_mcpwm.c **** /* Private Function Prototypes*/
  36:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_Channel_Config(LPC_MCPWM_TypeDef *MCPWMx, MCPWM_PCFG_TYPE PCfg, MCPWM_MODE_TYPE ModeCfg,
  37:../Source_Files/lpc17xx_mcpwm.c **** 
  38:../Source_Files/lpc17xx_mcpwm.c **** 
  39:../Source_Files/lpc17xx_mcpwm.c **** /* Public Functions ----------------------------------------------------------- */
  40:../Source_Files/lpc17xx_mcpwm.c **** /** @addtogroup MCPWM_Public_Functions
  41:../Source_Files/lpc17xx_mcpwm.c ****  * @{
  42:../Source_Files/lpc17xx_mcpwm.c ****  */
  43:../Source_Files/lpc17xx_mcpwm.c **** 
  44:../Source_Files/lpc17xx_mcpwm.c **** /********************************************************************//**
  45:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Initializes the MCPWMx Peripheral according to the specified
  46:../Source_Files/lpc17xx_mcpwm.c ****  *               parameters.
  47:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx	MCPWM peripheral selected, should be:
  48:../Source_Files/lpc17xx_mcpwm.c ****  *   			Should be: LPC_MCPWM
  49:../Source_Files/lpc17xx_mcpwm.c ****  * @return 		None
  50:../Source_Files/lpc17xx_mcpwm.c ****  *********************************************************************/
  51:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_Config (void)
  52:../Source_Files/lpc17xx_mcpwm.c **** {
  53:../Source_Files/lpc17xx_mcpwm.c **** 	/* Init MCPWM peripheral */
  54:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWM_Init(LPC_MCPWM);
  55:../Source_Files/lpc17xx_mcpwm.c **** 	/* MCPWM Channel Config */
  56:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWM_Channel_Config(LPC_MCPWM, MCPWM_MR0, None, MCPWM_INT_DISABLE);
  57:../Source_Files/lpc17xx_mcpwm.c **** 	//MCPWM_Channel_Config(LPC_MCPWM, MCPWM_CR0, None, MCPWM_INT_ENABLE);
  58:../Source_Files/lpc17xx_mcpwm.c **** 	/*Start PWM Channels */
  59:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWM_Start(LPC_MCPWM, ENABLE, DISABLE, DISABLE);
  60:../Source_Files/lpc17xx_mcpwm.c **** }
  61:../Source_Files/lpc17xx_mcpwm.c **** 
  62:../Source_Files/lpc17xx_mcpwm.c **** 
  63:../Source_Files/lpc17xx_mcpwm.c **** /********************************************************************//**
  64:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Initializes the MCPWMx channels according to the specified
  65:../Source_Files/lpc17xx_mcpwm.c ****  *               parameters.
  66:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx	MCPWM peripheral selected, should be:
  67:../Source_Files/lpc17xx_mcpwm.c ****  *   			Should be: LPC_MCPWM
  68:../Source_Files/lpc17xx_mcpwm.c ****  * @return 		None
  69:../Source_Files/lpc17xx_mcpwm.c ****  *********************************************************************/
  70:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_Channel_Config(LPC_MCPWM_TypeDef *MCPWMx, MCPWM_PCFG_TYPE PCfg, MCPWM_MODE_TYPE ModeCfg,
  71:../Source_Files/lpc17xx_mcpwm.c **** {
  72:../Source_Files/lpc17xx_mcpwm.c **** 	// MCPWM Channel configuration data
  73:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWM_CHANNEL_CFG_Type channelsetup;
  74:../Source_Files/lpc17xx_mcpwm.c **** 	/** Capture configuration data */
  75:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWM_CAPTURE_CFG_Type captureCfg;
  76:../Source_Files/lpc17xx_mcpwm.c **** 	// Pin configuration for MCPWM
  77:../Source_Files/lpc17xx_mcpwm.c **** 	PINSEL_CFG_Type PinCfg;
  78:../Source_Files/lpc17xx_mcpwm.c **** 
  79:../Source_Files/lpc17xx_mcpwm.c **** 	if(MCPWMx == LPC_MCPWM)
  80:../Source_Files/lpc17xx_mcpwm.c **** 	{
  81:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.Funcnum = 1;
  82:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.OpenDrain = 0;
  83:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.Pinmode = 0;
  84:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.Portnum = 1;
  85:../Source_Files/lpc17xx_mcpwm.c **** 
  86:../Source_Files/lpc17xx_mcpwm.c **** 		switch (PCfg)
  87:../Source_Files/lpc17xx_mcpwm.c **** 		{
  88:../Source_Files/lpc17xx_mcpwm.c **** 		 case MCPWM_MR0:
  89:../Source_Files/lpc17xx_mcpwm.c **** 			 // Configure P1.19 as MCOA0
  90:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 19;
  91:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
  92:../Source_Files/lpc17xx_mcpwm.c **** 			 // Configure P1.22 as MCOB0
  93:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 22;
  94:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
  95:../Source_Files/lpc17xx_mcpwm.c **** 
  96:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelType = MCPWM_CHANNEL_EDGE_MODE;
  97:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelPolarity = MCPWM_CHANNEL_PASSIVE_LO;
  98:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelDeadtimeEnable = DISABLE;
  99:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelDeadtimeValue = 0;
 100:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelUpdateEnable = ENABLE;
 101:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelTimercounterValue = 0;
 102:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelPeriodValue = 500;
 103:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelPulsewidthValue = 200;
 104:../Source_Files/lpc17xx_mcpwm.c **** 
 105:../Source_Files/lpc17xx_mcpwm.c **** 			 MCPWM_ConfigChannel(MCPWMx, 0, &channelsetup);
 106:../Source_Files/lpc17xx_mcpwm.c **** 			 break;
 107:../Source_Files/lpc17xx_mcpwm.c **** 
 108:../Source_Files/lpc17xx_mcpwm.c **** 		 case MCPWM_MR1:
 109:../Source_Files/lpc17xx_mcpwm.c **** 			 // Pins not available
 110:../Source_Files/lpc17xx_mcpwm.c **** 			 break;
 111:../Source_Files/lpc17xx_mcpwm.c **** 
 112:../Source_Files/lpc17xx_mcpwm.c **** 		 case MCPWM_MR2:
 113:../Source_Files/lpc17xx_mcpwm.c **** 			 // Pins not available
 114:../Source_Files/lpc17xx_mcpwm.c **** 			 break;
 115:../Source_Files/lpc17xx_mcpwm.c **** 
 116:../Source_Files/lpc17xx_mcpwm.c **** 		 case MCPWM_CR0:
 117:../Source_Files/lpc17xx_mcpwm.c **** 			 // Configure P1.20 as MCI0
 118:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 20;
 119:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
 120:../Source_Files/lpc17xx_mcpwm.c **** 
 121:../Source_Files/lpc17xx_mcpwm.c **** 			/*
 122:../Source_Files/lpc17xx_mcpwm.c **** 			 * Capture mode in this case is used to detect the falling edge on MCO0B output pin.
 123:../Source_Files/lpc17xx_mcpwm.c **** 			 * The MCFB0 input pin therefore must be connected to MCO0B. (P1.20 - P1.22)
 124:../Source_Files/lpc17xx_mcpwm.c **** 			 * - Capture Channel 0.
 125:../Source_Files/lpc17xx_mcpwm.c **** 			 * - Capture falling edge on MCFB0 input pin.
 126:../Source_Files/lpc17xx_mcpwm.c **** 			 * - Interrupt enabled on capture event.
 127:../Source_Files/lpc17xx_mcpwm.c **** 			 */
 128:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.captureChannel = 0;
 129:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.captureFalling = ENABLE;
 130:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.captureRising = DISABLE;
 131:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.hnfEnable = DISABLE;
 132:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.timerReset = DISABLE;
 133:../Source_Files/lpc17xx_mcpwm.c **** 			 MCPWM_ConfigCapture(MCPWMx, 0, &captureCfg);
 134:../Source_Files/lpc17xx_mcpwm.c **** 
 135:../Source_Files/lpc17xx_mcpwm.c **** 			// Reset flag for the first time
 136:../Source_Files/lpc17xx_mcpwm.c **** 			 CapFlag = RESET;
 137:../Source_Files/lpc17xx_mcpwm.c **** 
 138:../Source_Files/lpc17xx_mcpwm.c ****             // Enable interrupt for capture event on MCI0 (MCFB0)
 139:../Source_Files/lpc17xx_mcpwm.c **** 			 MCPWM_IntConfig(MCPWMx, MCPWM_INTFLAG_CAP0, ENABLE);
 140:../Source_Files/lpc17xx_mcpwm.c **** 			 break;
 141:../Source_Files/lpc17xx_mcpwm.c **** 
 142:../Source_Files/lpc17xx_mcpwm.c **** 		 case MCPWM_CR1:
 143:../Source_Files/lpc17xx_mcpwm.c **** 			 // Configure P1.23 as MCI1
 144:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 23;
 145:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
 146:../Source_Files/lpc17xx_mcpwm.c **** 			 break;
 147:../Source_Files/lpc17xx_mcpwm.c **** 
 148:../Source_Files/lpc17xx_mcpwm.c **** 		 case MCPWM_CR2:
 149:../Source_Files/lpc17xx_mcpwm.c **** 			 // Configure P1.24 as MCI2
 150:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 24;
 151:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
 152:../Source_Files/lpc17xx_mcpwm.c **** 			 break;
 153:../Source_Files/lpc17xx_mcpwm.c **** 
 154:../Source_Files/lpc17xx_mcpwm.c **** 		 default:
 155:../Source_Files/lpc17xx_mcpwm.c **** 		 	 //Error match value
 156:../Source_Files/lpc17xx_mcpwm.c **** 		 	 //Error loop
 157:../Source_Files/lpc17xx_mcpwm.c **** 		 	 while(1);
 158:../Source_Files/lpc17xx_mcpwm.c **** 		}
 159:../Source_Files/lpc17xx_mcpwm.c **** 
 160:../Source_Files/lpc17xx_mcpwm.c **** 		if (IntCfg == MCPWM_INT_ENABLE)
 161:../Source_Files/lpc17xx_mcpwm.c **** 		{
 162:../Source_Files/lpc17xx_mcpwm.c **** 			/* Disable interrupt for MCPWM  */
 163:../Source_Files/lpc17xx_mcpwm.c **** 			NVIC_DisableIRQ(MCPWM_IRQn);
 164:../Source_Files/lpc17xx_mcpwm.c **** 			/* preemption = 1, sub-priority = 1 */
 165:../Source_Files/lpc17xx_mcpwm.c **** 			NVIC_SetPriority(MCPWM_IRQn, 4);
 166:../Source_Files/lpc17xx_mcpwm.c **** 		}
 167:../Source_Files/lpc17xx_mcpwm.c **** 	}
 168:../Source_Files/lpc17xx_mcpwm.c **** 
 169:../Source_Files/lpc17xx_mcpwm.c ****     if (ModeCfg == MCPWM_DC)
 170:../Source_Files/lpc17xx_mcpwm.c ****     {
 171:../Source_Files/lpc17xx_mcpwm.c ****     	/*
 172:../Source_Files/lpc17xx_mcpwm.c ****     	 * - DC mode enabled.
 173:../Source_Files/lpc17xx_mcpwm.c ****     	 * - Invert Output enabled
 174:../Source_Files/lpc17xx_mcpwm.c ****     	 * - A0 and A1 output pin is internally routed to A0 signal
 175:../Source_Files/lpc17xx_mcpwm.c ****     	 */
 176:../Source_Files/lpc17xx_mcpwm.c ****     	MCPWM_DCMode(MCPWMx, ENABLE, ENABLE, (MCPWM_PATENT_A0|MCPWM_PATENT_A1));
 177:../Source_Files/lpc17xx_mcpwm.c ****     }
 178:../Source_Files/lpc17xx_mcpwm.c ****     else if(ModeCfg == MCPWM_AC)
 179:../Source_Files/lpc17xx_mcpwm.c ****     {
 180:../Source_Files/lpc17xx_mcpwm.c ****     	/*
 181:../Source_Files/lpc17xx_mcpwm.c ****     	 * - AC mode is enabled.
 182:../Source_Files/lpc17xx_mcpwm.c ****     	 */
 183:../Source_Files/lpc17xx_mcpwm.c ****     	MCPWM_ACMode(MCPWMx, ENABLE);
 184:../Source_Files/lpc17xx_mcpwm.c ****     }
 185:../Source_Files/lpc17xx_mcpwm.c **** 
 186:../Source_Files/lpc17xx_mcpwm.c ****     if (IntCfg == MCPWM_INT_ENABLE)
 187:../Source_Files/lpc17xx_mcpwm.c ****     {
 188:../Source_Files/lpc17xx_mcpwm.c ****     	/* Enable interrupt for MCPWM  */
 189:../Source_Files/lpc17xx_mcpwm.c ****     	NVIC_EnableIRQ(MCPWM_IRQn);
 190:../Source_Files/lpc17xx_mcpwm.c ****     }
 191:../Source_Files/lpc17xx_mcpwm.c **** }
 192:../Source_Files/lpc17xx_mcpwm.c **** 
 193:../Source_Files/lpc17xx_mcpwm.c **** 
 194:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 195:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Initializes the MCPWM peripheral
 196:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected,
 197:../Source_Files/lpc17xx_mcpwm.c ****  * 				Should be: LPC_MCPWM
 198:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 199:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 200:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_Init(LPC_MCPWM_TypeDef *MCPWMx)
 201:../Source_Files/lpc17xx_mcpwm.c **** {
  26              		.loc 1 201 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
 202:../Source_Files/lpc17xx_mcpwm.c **** 
 203:../Source_Files/lpc17xx_mcpwm.c **** 	/* Turn On MCPWM PCLK */
 204:../Source_Files/lpc17xx_mcpwm.c **** 	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCMC, ENABLE);
  36              		.loc 1 204 0
  37 0002 0121     		movs	r1, #1
 201:../Source_Files/lpc17xx_mcpwm.c **** {
  38              		.loc 1 201 0
  39 0004 0446     		mov	r4, r0
  40              		.loc 1 204 0
  41 0006 4FF40030 		mov	r0, #131072
  42              	.LVL1:
  43 000a FFF7FEFF 		bl	CLKPWR_ConfigPPWR
  44              	.LVL2:
 205:../Source_Files/lpc17xx_mcpwm.c **** 	/* As default, peripheral clock for MCPWM module
 206:../Source_Files/lpc17xx_mcpwm.c **** 	 * is set to FCCLK / 2 */
 207:../Source_Files/lpc17xx_mcpwm.c **** 	// CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_MC, CLKPWR_PCLKSEL_CCLK_DIV_2);
 208:../Source_Files/lpc17xx_mcpwm.c **** 
 209:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(0) | MCPWM_CAPCLR_CAP(1) | MCPWM_CAPCLR_CAP(2);
  45              		.loc 1 209 0
  46 000e 0723     		movs	r3, #7
 210:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCINTFLAG_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) \
  47              		.loc 1 210 0
  48 0010 03F5EE60 		add	r0, r3, #1904
 209:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(0) | MCPWM_CAPCLR_CAP(1) | MCPWM_CAPCLR_CAP(2);
  49              		.loc 1 209 0
  50 0014 6367     		str	r3, [r4, #116]
  51              		.loc 1 210 0
  52 0016 2067     		str	r0, [r4, #112]
 211:../Source_Files/lpc17xx_mcpwm.c **** 							| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) \
 212:../Source_Files/lpc17xx_mcpwm.c **** 							| MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
 213:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCINTEN_CLR = MCPWM_INT_ILIM(0) | MCPWM_INT_ILIM(1) | MCPWM_INT_ILIM(2) \
  53              		.loc 1 213 0
  54 0018 A065     		str	r0, [r4, #88]
  55 001a 10BD     		pop	{r4, pc}
  56              		.cfi_endproc
  57              	.LFE57:
  59              		.align	1
  60              		.global	MCPWM_ConfigChannel
  61              		.thumb
  62              		.thumb_func
  64              	MCPWM_ConfigChannel:
  65              	.LFB58:
 214:../Source_Files/lpc17xx_mcpwm.c **** 							| MCPWM_INT_IMAT(0) | MCPWM_INT_IMAT(1) | MCPWM_INT_IMAT(2) \
 215:../Source_Files/lpc17xx_mcpwm.c **** 							| MCPWM_INT_ICAP(0) | MCPWM_INT_ICAP(1) | MCPWM_INT_ICAP(2);
 216:../Source_Files/lpc17xx_mcpwm.c **** }
 217:../Source_Files/lpc17xx_mcpwm.c **** 
 218:../Source_Files/lpc17xx_mcpwm.c **** 
 219:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 220:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Configures each channel in MCPWM peripheral according to the
 221:../Source_Files/lpc17xx_mcpwm.c ****  * 				specified parameters in the MCPWM_CHANNEL_CFG_Type.
 222:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 			Motor Control PWM peripheral selected
 223:../Source_Files/lpc17xx_mcpwm.c ****  * 								should be: LPC_MCPWM
 224:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channelNum		Channel number, should be: 0..2.
 225:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channelSetup	Pointer to a MCPWM_CHANNEL_CFG_Type structure
 226:../Source_Files/lpc17xx_mcpwm.c **** *                    			that contains the configuration information for the
 227:../Source_Files/lpc17xx_mcpwm.c **** *                    			specified MCPWM channel.
 228:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 229:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 230:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_ConfigChannel(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
 231:../Source_Files/lpc17xx_mcpwm.c **** 						MCPWM_CHANNEL_CFG_Type * channelSetup)
 232:../Source_Files/lpc17xx_mcpwm.c **** {
  66              		.loc 1 232 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              	.LVL3:
 233:../Source_Files/lpc17xx_mcpwm.c **** 	if ((channelNum >= 0) && (channelNum <= 2)) {
  71              		.loc 1 233 0
  72 001c 0229     		cmp	r1, #2
 232:../Source_Files/lpc17xx_mcpwm.c **** {
  73              		.loc 1 232 0
  74 001e 30B5     		push	{r4, r5, lr}
  75              	.LCFI1:
  76              		.cfi_def_cfa_offset 12
  77              		.cfi_offset 4, -12
  78              		.cfi_offset 5, -8
  79              		.cfi_offset 14, -4
  80              		.loc 1 233 0
  81 0020 50D8     		bhi	.L2
  82 0022 5369     		ldr	r3, [r2, #20]
 234:../Source_Files/lpc17xx_mcpwm.c **** 		if (channelNum == 0) {
  83              		.loc 1 234 0
  84 0024 29B9     		cbnz	r1, .L4
 235:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCTIM0 = channelSetup->channelTimercounterValue;
 236:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
  85              		.loc 1 236 0
  86 0026 9469     		ldr	r4, [r2, #24]
 237:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCPW0 = channelSetup->channelPulsewidthValue;
  87              		.loc 1 237 0
  88 0028 D569     		ldr	r5, [r2, #28]
 235:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCTIM0 = channelSetup->channelTimercounterValue;
  89              		.loc 1 235 0
  90 002a 8361     		str	r3, [r0, #24]
 236:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
  91              		.loc 1 236 0
  92 002c 4462     		str	r4, [r0, #36]
  93              		.loc 1 237 0
  94 002e 0563     		str	r5, [r0, #48]
  95 0030 0BE0     		b	.L5
  96              	.L4:
 238:../Source_Files/lpc17xx_mcpwm.c **** 		} else if (channelNum == 1) {
  97              		.loc 1 238 0
  98 0032 0129     		cmp	r1, #1
  99 0034 9469     		ldr	r4, [r2, #24]
 100 0036 04D1     		bne	.L6
 239:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCTIM1 = channelSetup->channelTimercounterValue;
 101              		.loc 1 239 0
 102 0038 C361     		str	r3, [r0, #28]
 240:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
 241:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCPW1 = channelSetup->channelPulsewidthValue;
 103              		.loc 1 241 0
 104 003a D369     		ldr	r3, [r2, #28]
 240:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
 105              		.loc 1 240 0
 106 003c 8462     		str	r4, [r0, #40]
 107              		.loc 1 241 0
 108 003e 4363     		str	r3, [r0, #52]
 109 0040 03E0     		b	.L5
 110              	.L6:
 242:../Source_Files/lpc17xx_mcpwm.c **** 		} else if (channelNum == 2) {
 243:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCTIM2 = channelSetup->channelTimercounterValue;
 244:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
 245:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
 111              		.loc 1 245 0
 112 0042 D569     		ldr	r5, [r2, #28]
 243:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCTIM2 = channelSetup->channelTimercounterValue;
 113              		.loc 1 243 0
 114 0044 0362     		str	r3, [r0, #32]
 244:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
 115              		.loc 1 244 0
 116 0046 C462     		str	r4, [r0, #44]
 117              		.loc 1 245 0
 118 0048 8563     		str	r5, [r0, #56]
 119              	.L5:
 246:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 247:../Source_Files/lpc17xx_mcpwm.c **** 			return;
 248:../Source_Files/lpc17xx_mcpwm.c **** 		}
 249:../Source_Files/lpc17xx_mcpwm.c **** 
 250:../Source_Files/lpc17xx_mcpwm.c **** 		if (channelSetup->channelType /* == MCPWM_CHANNEL_CENTER_MODE */){
 120              		.loc 1 250 0
 121 004a 1568     		ldr	r5, [r2, #0]
 122 004c CC00     		lsls	r4, r1, #3
 123 004e 0123     		movs	r3, #1
 124 0050 25B1     		cbz	r5, .L7
 251:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCON_SET = MCPWM_CON_CENTER(channelNum);
 125              		.loc 1 251 0 discriminator 1
 126 0052 E418     		adds	r4, r4, r3
 127 0054 03FA04F3 		lsl	r3, r3, r4
 128 0058 4360     		str	r3, [r0, #4]
 129 005a 03E0     		b	.L8
 130              	.L7:
 252:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 253:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCON_CLR = MCPWM_CON_CENTER(channelNum);
 131              		.loc 1 253 0 discriminator 1
 132 005c 651C     		adds	r5, r4, #1
 133 005e 03FA05F3 		lsl	r3, r3, r5
 134 0062 8360     		str	r3, [r0, #8]
 135              	.L8:
 136 0064 CC00     		lsls	r4, r1, #3
 254:../Source_Files/lpc17xx_mcpwm.c **** 		}
 255:../Source_Files/lpc17xx_mcpwm.c **** 
 256:../Source_Files/lpc17xx_mcpwm.c **** 		if (channelSetup->channelPolarity /* == MCPWM_CHANNEL_PASSIVE_HI */){
 137              		.loc 1 256 0
 138 0066 5568     		ldr	r5, [r2, #4]
 139 0068 0123     		movs	r3, #1
 257:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCON_SET = MCPWM_CON_POLAR(channelNum);
 140              		.loc 1 257 0
 141 006a 0234     		adds	r4, r4, #2
 142 006c 03FA04F3 		lsl	r3, r3, r4
 256:../Source_Files/lpc17xx_mcpwm.c **** 		if (channelSetup->channelPolarity /* == MCPWM_CHANNEL_PASSIVE_HI */){
 143              		.loc 1 256 0
 144 0070 0DB1     		cbz	r5, .L9
 145              		.loc 1 257 0 discriminator 1
 146 0072 4360     		str	r3, [r0, #4]
 147 0074 00E0     		b	.L10
 148              	.L9:
 258:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 259:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCON_CLR = MCPWM_CON_POLAR(channelNum);
 149              		.loc 1 259 0 discriminator 1
 150 0076 8360     		str	r3, [r0, #8]
 151              	.L10:
 152 0078 CC00     		lsls	r4, r1, #3
 260:../Source_Files/lpc17xx_mcpwm.c **** 		}
 261:../Source_Files/lpc17xx_mcpwm.c **** 
 262:../Source_Files/lpc17xx_mcpwm.c **** 		if (channelSetup->channelDeadtimeEnable /* == ENABLE */){
 153              		.loc 1 262 0
 154 007a 9568     		ldr	r5, [r2, #8]
 155 007c 0123     		movs	r3, #1
 263:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCON_SET = MCPWM_CON_DTE(channelNum);
 156              		.loc 1 263 0
 157 007e 0334     		adds	r4, r4, #3
 158 0080 03FA04F3 		lsl	r3, r3, r4
 262:../Source_Files/lpc17xx_mcpwm.c **** 		if (channelSetup->channelDeadtimeEnable /* == ENABLE */){
 159              		.loc 1 262 0
 160 0084 9DB1     		cbz	r5, .L11
 161              		.loc 1 263 0 discriminator 1
 162 0086 4360     		str	r3, [r0, #4]
 264:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCDEADTIME &= ~(MCPWM_DT(channelNum, 0x3FF));
 163              		.loc 1 264 0 discriminator 1
 164 0088 0A23     		movs	r3, #10
 165 008a 4B43     		muls	r3, r1, r3
 166 008c 40F2FF34 		movw	r4, #1023
 167 0090 04FA03F4 		lsl	r4, r4, r3
 168 0094 C56B     		ldr	r5, [r0, #60]
 169 0096 25EA0405 		bic	r5, r5, r4
 265:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCDEADTIME |= MCPWM_DT(channelNum, channelSetup->channelDeadtimeValue);
 170              		.loc 1 265 0 discriminator 1
 171 009a D468     		ldr	r4, [r2, #12]
 264:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCDEADTIME &= ~(MCPWM_DT(channelNum, 0x3FF));
 172              		.loc 1 264 0 discriminator 1
 173 009c C563     		str	r5, [r0, #60]
 174              		.loc 1 265 0 discriminator 1
 175 009e A405     		lsls	r4, r4, #22
 176 00a0 A40D     		lsrs	r4, r4, #22
 177 00a2 04FA03F3 		lsl	r3, r4, r3
 178 00a6 C56B     		ldr	r5, [r0, #60]
 179 00a8 2B43     		orrs	r3, r3, r5
 180 00aa C363     		str	r3, [r0, #60]
 181 00ac 00E0     		b	.L12
 182              	.L11:
 266:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 267:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCON_CLR = MCPWM_CON_DTE(channelNum);
 183              		.loc 1 267 0 discriminator 1
 184 00ae 8360     		str	r3, [r0, #8]
 185              	.L12:
 186 00b0 C900     		lsls	r1, r1, #3
 187              	.LVL4:
 268:../Source_Files/lpc17xx_mcpwm.c **** 		}
 269:../Source_Files/lpc17xx_mcpwm.c **** 
 270:../Source_Files/lpc17xx_mcpwm.c **** 		if (channelSetup->channelUpdateEnable /* == ENABLE */){
 188              		.loc 1 270 0
 189 00b2 1269     		ldr	r2, [r2, #16]
 190              	.LVL5:
 191 00b4 0123     		movs	r3, #1
 271:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCON_CLR = MCPWM_CON_DISUP(channelNum);
 192              		.loc 1 271 0
 193 00b6 0431     		adds	r1, r1, #4
 194 00b8 03FA01F3 		lsl	r3, r3, r1
 270:../Source_Files/lpc17xx_mcpwm.c **** 		if (channelSetup->channelUpdateEnable /* == ENABLE */){
 195              		.loc 1 270 0
 196 00bc 0AB1     		cbz	r2, .L13
 197              		.loc 1 271 0 discriminator 1
 198 00be 8360     		str	r3, [r0, #8]
 199 00c0 30BD     		pop	{r4, r5, pc}
 200              	.L13:
 272:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 273:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCON_SET = MCPWM_CON_DISUP(channelNum);
 201              		.loc 1 273 0 discriminator 1
 202 00c2 4360     		str	r3, [r0, #4]
 203              	.L2:
 204 00c4 30BD     		pop	{r4, r5, pc}
 205              		.cfi_endproc
 206              	.LFE58:
 208              		.align	1
 209              		.global	MCPWM_WriteToShadow
 210              		.thumb
 211              		.thumb_func
 213              	MCPWM_WriteToShadow:
 214              	.LFB59:
 274:../Source_Files/lpc17xx_mcpwm.c **** 		}
 275:../Source_Files/lpc17xx_mcpwm.c **** 	}
 276:../Source_Files/lpc17xx_mcpwm.c **** }
 277:../Source_Files/lpc17xx_mcpwm.c **** 
 278:../Source_Files/lpc17xx_mcpwm.c **** 
 279:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 280:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Write to MCPWM shadow registers - Update the value for period
 281:../Source_Files/lpc17xx_mcpwm.c ****  * 				and pulse width in MCPWM peripheral.
 282:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 			Motor Control PWM peripheral selected
 283:../Source_Files/lpc17xx_mcpwm.c ****  * 								Should be: LPC_MCPWM
 284:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channelNum		Channel Number, should be: 0..2.
 285:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channelSetup	Pointer to a MCPWM_CHANNEL_CFG_Type structure
 286:../Source_Files/lpc17xx_mcpwm.c **** *                    			that contains the configuration information for the
 287:../Source_Files/lpc17xx_mcpwm.c **** *                    			specified MCPWM channel.
 288:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 289:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 290:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_WriteToShadow(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
 291:../Source_Files/lpc17xx_mcpwm.c **** 								MCPWM_CHANNEL_CFG_Type *channelSetup)
 292:../Source_Files/lpc17xx_mcpwm.c **** {
 215              		.loc 1 292 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220              	.LVL6:
 293:../Source_Files/lpc17xx_mcpwm.c **** 	if (channelNum == 0){
 221              		.loc 1 293 0
 222 00c6 21B9     		cbnz	r1, .L16
 294:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
 223              		.loc 1 294 0
 224 00c8 9169     		ldr	r1, [r2, #24]
 225              	.LVL7:
 295:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCPW0 = channelSetup->channelPulsewidthValue;
 226              		.loc 1 295 0
 227 00ca D369     		ldr	r3, [r2, #28]
 294:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCPER0 = channelSetup->channelPeriodValue;
 228              		.loc 1 294 0
 229 00cc 4162     		str	r1, [r0, #36]
 230              		.loc 1 295 0
 231 00ce 0363     		str	r3, [r0, #48]
 232 00d0 7047     		bx	lr
 233              	.LVL8:
 234              	.L16:
 296:../Source_Files/lpc17xx_mcpwm.c **** 	} else if (channelNum == 1) {
 235              		.loc 1 296 0
 236 00d2 0129     		cmp	r1, #1
 237 00d4 04D1     		bne	.L18
 297:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
 238              		.loc 1 297 0
 239 00d6 9369     		ldr	r3, [r2, #24]
 298:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCPW1 = channelSetup->channelPulsewidthValue;
 240              		.loc 1 298 0
 241 00d8 D269     		ldr	r2, [r2, #28]
 242              	.LVL9:
 297:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCPER1 = channelSetup->channelPeriodValue;
 243              		.loc 1 297 0
 244 00da 8362     		str	r3, [r0, #40]
 245              		.loc 1 298 0
 246 00dc 4263     		str	r2, [r0, #52]
 247 00de 7047     		bx	lr
 248              	.LVL10:
 249              	.L18:
 299:../Source_Files/lpc17xx_mcpwm.c **** 	} else if (channelNum == 2) {
 250              		.loc 1 299 0
 251 00e0 0229     		cmp	r1, #2
 252 00e2 03D1     		bne	.L15
 300:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
 253              		.loc 1 300 0
 254 00e4 9369     		ldr	r3, [r2, #24]
 301:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCPW2 = channelSetup->channelPulsewidthValue;
 255              		.loc 1 301 0
 256 00e6 D169     		ldr	r1, [r2, #28]
 257              	.LVL11:
 300:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCPER2 = channelSetup->channelPeriodValue;
 258              		.loc 1 300 0
 259 00e8 C362     		str	r3, [r0, #44]
 260              		.loc 1 301 0
 261 00ea 8163     		str	r1, [r0, #56]
 262              	.L15:
 263 00ec 7047     		bx	lr
 264              		.cfi_endproc
 265              	.LFE59:
 267              		.align	1
 268              		.global	MCPWM_ConfigCapture
 269              		.thumb
 270              		.thumb_func
 272              	MCPWM_ConfigCapture:
 273              	.LFB60:
 302:../Source_Files/lpc17xx_mcpwm.c **** 	}
 303:../Source_Files/lpc17xx_mcpwm.c **** }
 304:../Source_Files/lpc17xx_mcpwm.c **** 
 305:../Source_Files/lpc17xx_mcpwm.c **** 
 306:../Source_Files/lpc17xx_mcpwm.c **** 
 307:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 308:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Configures capture function in MCPWM peripheral
 309:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 			Motor Control PWM peripheral selected
 310:../Source_Files/lpc17xx_mcpwm.c ****  * 								Should be: LPC_MCPWM
 311:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channelNum		MCI (Motor Control Input pin) number
 312:../Source_Files/lpc17xx_mcpwm.c ****  * 								Should be: 0..2
 313:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	captureConfig	Pointer to a MCPWM_CAPTURE_CFG_Type structure
 314:../Source_Files/lpc17xx_mcpwm.c **** *                    			that contains the configuration information for the
 315:../Source_Files/lpc17xx_mcpwm.c **** *                    			specified MCPWM capture.
 316:../Source_Files/lpc17xx_mcpwm.c ****  * @return
 317:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 318:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_ConfigCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
 319:../Source_Files/lpc17xx_mcpwm.c **** 						MCPWM_CAPTURE_CFG_Type *captureConfig)
 320:../Source_Files/lpc17xx_mcpwm.c **** {
 274              		.loc 1 320 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              	.LVL12:
 321:../Source_Files/lpc17xx_mcpwm.c **** 	if ((channelNum >= 0) && (channelNum <= 2)) {
 279              		.loc 1 321 0
 280 00ee 0229     		cmp	r1, #2
 320:../Source_Files/lpc17xx_mcpwm.c **** {
 281              		.loc 1 320 0
 282 00f0 10B5     		push	{r4, lr}
 283              	.LCFI2:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 4, -8
 286              		.cfi_offset 14, -4
 287              		.loc 1 321 0
 288 00f2 57D8     		bhi	.L19
 322:../Source_Files/lpc17xx_mcpwm.c **** 
 323:../Source_Files/lpc17xx_mcpwm.c **** 		if (captureConfig->captureFalling /* == ENABLE */) {
 289              		.loc 1 323 0
 290 00f4 9468     		ldr	r4, [r2, #8]
 291 00f6 1368     		ldr	r3, [r2, #0]
 292 00f8 6CB1     		cbz	r4, .L21
 324:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_CAPMCI_FE(captureConfig->captureChannel, channelNum);
 293              		.loc 1 324 0
 294 00fa 022B     		cmp	r3, #2
 295 00fc 08D8     		bhi	.L34
 296              		.loc 1 324 0 is_stmt 0 discriminator 3
 297 00fe 0324     		movs	r4, #3
 298 0100 04FB0313 		mla	r3, r4, r3, r1
 299 0104 5C00     		lsls	r4, r3, #1
 300 0106 631C     		adds	r3, r4, #1
 301 0108 0124     		movs	r4, #1
 302 010a 04FA03F3 		lsl	r3, r4, r3
 303 010e 00E0     		b	.L22
 304              	.L34:
 305              		.loc 1 324 0
 306 0110 0023     		movs	r3, #0
 307              	.L22:
 308              		.loc 1 324 0 discriminator 4
 309 0112 0361     		str	r3, [r0, #16]
 310 0114 0BE0     		b	.L23
 311              	.L21:
 325:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 326:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_CAPMCI_FE(captureConfig->captureChannel, channelNum);
 312              		.loc 1 326 0 is_stmt 1
 313 0116 022B     		cmp	r3, #2
 314 0118 08D8     		bhi	.L35
 315              		.loc 1 326 0 is_stmt 0 discriminator 3
 316 011a 0324     		movs	r4, #3
 317 011c 04FB0313 		mla	r3, r4, r3, r1
 318 0120 5C00     		lsls	r4, r3, #1
 319 0122 631C     		adds	r3, r4, #1
 320 0124 0124     		movs	r4, #1
 321 0126 04FA03F4 		lsl	r4, r4, r3
 322 012a FFE7     		b	.L24
 323              	.L35:
 324              	.L24:
 325              		.loc 1 326 0 discriminator 4
 326 012c 4461     		str	r4, [r0, #20]
 327              	.L23:
 328 012e 92E81800 		ldmia	r2, {r3, r4}
 327:../Source_Files/lpc17xx_mcpwm.c **** 		}
 328:../Source_Files/lpc17xx_mcpwm.c **** 
 329:../Source_Files/lpc17xx_mcpwm.c **** 		if (captureConfig->captureRising /* == ENABLE */) {
 329              		.loc 1 329 0 is_stmt 1
 330 0132 64B1     		cbz	r4, .L25
 330:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_CAPMCI_RE(captureConfig->captureChannel, channelNum);
 331              		.loc 1 330 0
 332 0134 022B     		cmp	r3, #2
 333 0136 07D8     		bhi	.L36
 334              		.loc 1 330 0 is_stmt 0 discriminator 3
 335 0138 0324     		movs	r4, #3
 336 013a 04FB0313 		mla	r3, r4, r3, r1
 337 013e 0124     		movs	r4, #1
 338 0140 5B00     		lsls	r3, r3, #1
 339 0142 04FA03F3 		lsl	r3, r4, r3
 340 0146 00E0     		b	.L26
 341              	.L36:
 342              		.loc 1 330 0
 343 0148 0023     		movs	r3, #0
 344              	.L26:
 345              		.loc 1 330 0 discriminator 4
 346 014a 0361     		str	r3, [r0, #16]
 347 014c 0BE0     		b	.L27
 348              	.L25:
 331:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 332:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_CAPMCI_RE(captureConfig->captureChannel, channelNum);
 349              		.loc 1 332 0 is_stmt 1
 350 014e 022B     		cmp	r3, #2
 351 0150 07D8     		bhi	.L37
 352              		.loc 1 332 0 is_stmt 0 discriminator 3
 353 0152 0324     		movs	r4, #3
 354 0154 04FB0313 		mla	r3, r4, r3, r1
 355 0158 0124     		movs	r4, #1
 356 015a 5B00     		lsls	r3, r3, #1
 357 015c 04FA03F3 		lsl	r3, r4, r3
 358 0160 00E0     		b	.L28
 359              	.L37:
 360              		.loc 1 332 0
 361 0162 2346     		mov	r3, r4
 362              	.L28:
 363              		.loc 1 332 0 discriminator 4
 364 0164 4361     		str	r3, [r0, #20]
 365              	.L27:
 333:../Source_Files/lpc17xx_mcpwm.c **** 		}
 334:../Source_Files/lpc17xx_mcpwm.c **** 
 335:../Source_Files/lpc17xx_mcpwm.c **** 		if (captureConfig->timerReset /* == ENABLE */){
 366              		.loc 1 335 0 is_stmt 1
 367 0166 D468     		ldr	r4, [r2, #12]
 368 0168 1368     		ldr	r3, [r2, #0]
 369 016a 4CB1     		cbz	r4, .L29
 336:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_RT(captureConfig->captureChannel);
 370              		.loc 1 336 0
 371 016c 022B     		cmp	r3, #2
 372 016e 04D8     		bhi	.L38
 373              		.loc 1 336 0 is_stmt 0 discriminator 1
 374 0170 1233     		adds	r3, r3, #18
 375 0172 0124     		movs	r4, #1
 376 0174 04FA03F3 		lsl	r3, r4, r3
 377 0178 00E0     		b	.L30
 378              	.L38:
 379              		.loc 1 336 0
 380 017a 0023     		movs	r3, #0
 381              	.L30:
 382              		.loc 1 336 0 discriminator 3
 383 017c 0361     		str	r3, [r0, #16]
 384 017e 08E0     		b	.L31
 385              	.L29:
 337:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 338:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_RT(captureConfig->captureChannel);
 386              		.loc 1 338 0 is_stmt 1
 387 0180 022B     		cmp	r3, #2
 388 0182 04D8     		bhi	.L39
 389              		.loc 1 338 0 is_stmt 0 discriminator 1
 390 0184 1233     		adds	r3, r3, #18
 391 0186 0124     		movs	r4, #1
 392 0188 04FA03F3 		lsl	r3, r4, r3
 393 018c 00E0     		b	.L32
 394              	.L39:
 395              		.loc 1 338 0
 396 018e 2346     		mov	r3, r4
 397              	.L32:
 398              		.loc 1 338 0 discriminator 3
 399 0190 4361     		str	r3, [r0, #20]
 400              	.L31:
 339:../Source_Files/lpc17xx_mcpwm.c **** 		}
 340:../Source_Files/lpc17xx_mcpwm.c **** 
 341:../Source_Files/lpc17xx_mcpwm.c **** 		if (captureConfig->hnfEnable /* == ENABLE */){
 401              		.loc 1 341 0 is_stmt 1
 402 0192 1269     		ldr	r2, [r2, #16]
 403              	.LVL13:
 404 0194 0123     		movs	r3, #1
 405 0196 1531     		adds	r1, r1, #21
 406              	.LVL14:
 342:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCAPCON_SET = MCPWM_CAPCON_HNFCAP(channelNum);
 407              		.loc 1 342 0
 408 0198 03FA01F1 		lsl	r1, r3, r1
 409              	.LVL15:
 341:../Source_Files/lpc17xx_mcpwm.c **** 		if (captureConfig->hnfEnable /* == ENABLE */){
 410              		.loc 1 341 0
 411 019c 0AB1     		cbz	r2, .L33
 412              		.loc 1 342 0 discriminator 1
 413 019e 0161     		str	r1, [r0, #16]
 414 01a0 10BD     		pop	{r4, pc}
 415              	.L33:
 343:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 344:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCAPCON_CLR = MCPWM_CAPCON_HNFCAP(channelNum);
 416              		.loc 1 344 0 discriminator 1
 417 01a2 4161     		str	r1, [r0, #20]
 418              	.L19:
 419 01a4 10BD     		pop	{r4, pc}
 420              		.cfi_endproc
 421              	.LFE60:
 423              		.align	1
 424              		.global	MCPWM_Channel_Config
 425              		.thumb
 426              		.thumb_func
 428              	MCPWM_Channel_Config:
 429              	.LFB56:
  71:../Source_Files/lpc17xx_mcpwm.c **** {
 430              		.loc 1 71 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 64
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 434              	.LVL16:
 435 01a6 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 436              	.LCFI3:
 437              		.cfi_def_cfa_offset 24
 438              		.cfi_offset 4, -24
 439              		.cfi_offset 5, -20
 440              		.cfi_offset 6, -16
 441              		.cfi_offset 7, -12
 442              		.cfi_offset 8, -8
 443              		.cfi_offset 14, -4
 444 01aa 1E46     		mov	r6, r3
  79:../Source_Files/lpc17xx_mcpwm.c **** 	if(MCPWMx == LPC_MCPWM)
 445              		.loc 1 79 0
 446 01ac 3E4B     		ldr	r3, .L56
 447              	.LVL17:
  71:../Source_Files/lpc17xx_mcpwm.c **** {
 448              		.loc 1 71 0
 449 01ae 90B0     		sub	sp, sp, #64
 450              	.LCFI4:
 451              		.cfi_def_cfa_offset 88
  79:../Source_Files/lpc17xx_mcpwm.c **** 	if(MCPWMx == LPC_MCPWM)
 452              		.loc 1 79 0
 453 01b0 9842     		cmp	r0, r3
  71:../Source_Files/lpc17xx_mcpwm.c **** {
 454              		.loc 1 71 0
 455 01b2 0546     		mov	r5, r0
 456 01b4 1746     		mov	r7, r2
  79:../Source_Files/lpc17xx_mcpwm.c **** 	if(MCPWMx == LPC_MCPWM)
 457              		.loc 1 79 0
 458 01b6 5DD1     		bne	.L42
  81:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.Funcnum = 1;
 459              		.loc 1 81 0
 460 01b8 0123     		movs	r3, #1
  82:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.OpenDrain = 0;
 461              		.loc 1 82 0
 462 01ba 0022     		movs	r2, #0
 463              	.LVL18:
  86:../Source_Files/lpc17xx_mcpwm.c **** 		switch (PCfg)
 464              		.loc 1 86 0
 465 01bc 0139     		subs	r1, r1, #1
 466              	.LVL19:
  81:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.Funcnum = 1;
 467              		.loc 1 81 0
 468 01be 8DF80630 		strb	r3, [sp, #6]
  82:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.OpenDrain = 0;
 469              		.loc 1 82 0
 470 01c2 8DF80820 		strb	r2, [sp, #8]
  83:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.Pinmode = 0;
 471              		.loc 1 83 0
 472 01c6 8DF80720 		strb	r2, [sp, #7]
  84:../Source_Files/lpc17xx_mcpwm.c **** 		PinCfg.Portnum = 1;
 473              		.loc 1 84 0
 474 01ca 8DF80430 		strb	r3, [sp, #4]
  86:../Source_Files/lpc17xx_mcpwm.c **** 		switch (PCfg)
 475              		.loc 1 86 0
 476 01ce 0529     		cmp	r1, #5
 477 01d0 45D8     		bhi	.L43
 478 01d2 DFE801F0 		tbb	[pc, r1]
 479              	.L49:
 480 01d6 03       		.byte	(.L44-.L49)/2
 481 01d7 45       		.byte	(.L45-.L49)/2
 482 01d8 45       		.byte	(.L45-.L49)/2
 483 01d9 21       		.byte	(.L46-.L49)/2
 484 01da 3B       		.byte	(.L47-.L49)/2
 485 01db 3D       		.byte	(.L48-.L49)/2
 486              		.align	1
 487              	.L44:
  90:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 19;
 488              		.loc 1 90 0
 489 01dc 1320     		movs	r0, #19
 490              	.LVL20:
 491 01de 8DF80500 		strb	r0, [sp, #5]
  91:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
 492              		.loc 1 91 0
 493 01e2 01A8     		add	r0, sp, #4
 494 01e4 FFF7FEFF 		bl	PINSEL_ConfigPin
 495              	.LVL21:
  93:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 22;
 496              		.loc 1 93 0
 497 01e8 1623     		movs	r3, #22
  94:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
 498              		.loc 1 94 0
 499 01ea 01A8     		add	r0, sp, #4
  93:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 22;
 500              		.loc 1 93 0
 501 01ec 8DF80530 		strb	r3, [sp, #5]
  94:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
 502              		.loc 1 94 0
 503 01f0 FFF7FEFF 		bl	PINSEL_ConfigPin
 504              	.LVL22:
 100:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelUpdateEnable = ENABLE;
 505              		.loc 1 100 0
 506 01f4 0122     		movs	r2, #1
 102:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelPeriodValue = 500;
 507              		.loc 1 102 0
 508 01f6 4FF4FA70 		mov	r0, #500
  96:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelType = MCPWM_CHANNEL_EDGE_MODE;
 509              		.loc 1 96 0
 510 01fa 0021     		movs	r1, #0
 100:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelUpdateEnable = ENABLE;
 511              		.loc 1 100 0
 512 01fc 0C92     		str	r2, [sp, #48]
 102:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelPeriodValue = 500;
 513              		.loc 1 102 0
 514 01fe 0E90     		str	r0, [sp, #56]
 103:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelPulsewidthValue = 200;
 515              		.loc 1 103 0
 516 0200 C823     		movs	r3, #200
 105:../Source_Files/lpc17xx_mcpwm.c **** 			 MCPWM_ConfigChannel(MCPWMx, 0, &channelsetup);
 517              		.loc 1 105 0
 518 0202 2948     		ldr	r0, .L56
 519 0204 08AA     		add	r2, sp, #32
  96:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelType = MCPWM_CHANNEL_EDGE_MODE;
 520              		.loc 1 96 0
 521 0206 0891     		str	r1, [sp, #32]
  97:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelPolarity = MCPWM_CHANNEL_PASSIVE_LO;
 522              		.loc 1 97 0
 523 0208 0991     		str	r1, [sp, #36]
  98:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelDeadtimeEnable = DISABLE;
 524              		.loc 1 98 0
 525 020a 0A91     		str	r1, [sp, #40]
  99:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelDeadtimeValue = 0;
 526              		.loc 1 99 0
 527 020c 0B91     		str	r1, [sp, #44]
 101:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelTimercounterValue = 0;
 528              		.loc 1 101 0
 529 020e 0D91     		str	r1, [sp, #52]
 103:../Source_Files/lpc17xx_mcpwm.c **** 			 channelsetup.channelPulsewidthValue = 200;
 530              		.loc 1 103 0
 531 0210 0F93     		str	r3, [sp, #60]
 105:../Source_Files/lpc17xx_mcpwm.c **** 			 MCPWM_ConfigChannel(MCPWMx, 0, &channelsetup);
 532              		.loc 1 105 0
 533 0212 FFF7FEFF 		bl	MCPWM_ConfigChannel
 534              	.LVL23:
 106:../Source_Files/lpc17xx_mcpwm.c **** 			 break;
 535              		.loc 1 106 0
 536 0216 23E0     		b	.L45
 537              	.LVL24:
 538              	.L46:
 118:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 20;
 539              		.loc 1 118 0
 540 0218 1420     		movs	r0, #20
 541              	.LVL25:
 133:../Source_Files/lpc17xx_mcpwm.c **** 			 MCPWM_ConfigCapture(MCPWMx, 0, &captureCfg);
 542              		.loc 1 133 0
 543 021a DFF88C80 		ldr	r8, .L56
 128:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.captureChannel = 0;
 544              		.loc 1 128 0
 545 021e 0024     		movs	r4, #0
 118:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 20;
 546              		.loc 1 118 0
 547 0220 8DF80500 		strb	r0, [sp, #5]
 119:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
 548              		.loc 1 119 0
 549 0224 01A8     		add	r0, sp, #4
 550 0226 FFF7FEFF 		bl	PINSEL_ConfigPin
 551              	.LVL26:
 129:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.captureFalling = ENABLE;
 552              		.loc 1 129 0
 553 022a 0123     		movs	r3, #1
 133:../Source_Files/lpc17xx_mcpwm.c **** 			 MCPWM_ConfigCapture(MCPWMx, 0, &captureCfg);
 554              		.loc 1 133 0
 555 022c 03AA     		add	r2, sp, #12
 556 022e 4046     		mov	r0, r8
 557 0230 2146     		mov	r1, r4
 129:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.captureFalling = ENABLE;
 558              		.loc 1 129 0
 559 0232 0593     		str	r3, [sp, #20]
 128:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.captureChannel = 0;
 560              		.loc 1 128 0
 561 0234 0394     		str	r4, [sp, #12]
 130:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.captureRising = DISABLE;
 562              		.loc 1 130 0
 563 0236 0494     		str	r4, [sp, #16]
 131:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.hnfEnable = DISABLE;
 564              		.loc 1 131 0
 565 0238 0794     		str	r4, [sp, #28]
 132:../Source_Files/lpc17xx_mcpwm.c **** 			 captureCfg.timerReset = DISABLE;
 566              		.loc 1 132 0
 567 023a 0694     		str	r4, [sp, #24]
 133:../Source_Files/lpc17xx_mcpwm.c **** 			 MCPWM_ConfigCapture(MCPWMx, 0, &captureCfg);
 568              		.loc 1 133 0
 569 023c FFF7FEFF 		bl	MCPWM_ConfigCapture
 570              	.LVL27:
 136:../Source_Files/lpc17xx_mcpwm.c **** 			 CapFlag = RESET;
 571              		.loc 1 136 0
 572 0240 1A4A     		ldr	r2, .L56+4
 573              	.LBB18:
 574              	.LBB19:
 345:../Source_Files/lpc17xx_mcpwm.c **** 		}
 346:../Source_Files/lpc17xx_mcpwm.c **** 	}
 347:../Source_Files/lpc17xx_mcpwm.c **** }
 348:../Source_Files/lpc17xx_mcpwm.c **** 
 349:../Source_Files/lpc17xx_mcpwm.c **** 
 350:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 351:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Clears current captured value in specified capture channel
 352:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected
 353:../Source_Files/lpc17xx_mcpwm.c ****  * 							Should be: LPC_MCPWM
 354:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	captureChannel	Capture channel number, should be: 0..2
 355:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 356:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 357:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_ClearCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t captureChannel)
 358:../Source_Files/lpc17xx_mcpwm.c **** {
 359:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(captureChannel);
 360:../Source_Files/lpc17xx_mcpwm.c **** }
 361:../Source_Files/lpc17xx_mcpwm.c **** 
 362:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 363:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Get current captured value in specified capture channel
 364:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected,
 365:../Source_Files/lpc17xx_mcpwm.c ****  * 							Should be: LPC_MCPWM
 366:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	captureChannel	Capture channel number, should be: 0..2
 367:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 368:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 369:../Source_Files/lpc17xx_mcpwm.c **** uint32_t MCPWM_GetCapture(LPC_MCPWM_TypeDef *MCPWMx, uint32_t captureChannel)
 370:../Source_Files/lpc17xx_mcpwm.c **** {
 371:../Source_Files/lpc17xx_mcpwm.c **** 	if (captureChannel == 0){
 372:../Source_Files/lpc17xx_mcpwm.c **** 		return (MCPWMx->MCCR0);
 373:../Source_Files/lpc17xx_mcpwm.c **** 	} else if (captureChannel == 1) {
 374:../Source_Files/lpc17xx_mcpwm.c **** 		return (MCPWMx->MCCR1);
 375:../Source_Files/lpc17xx_mcpwm.c **** 	} else if (captureChannel == 2) {
 376:../Source_Files/lpc17xx_mcpwm.c **** 		return (MCPWMx->MCCR2);
 377:../Source_Files/lpc17xx_mcpwm.c **** 	}
 378:../Source_Files/lpc17xx_mcpwm.c **** 	return (0);
 379:../Source_Files/lpc17xx_mcpwm.c **** }
 380:../Source_Files/lpc17xx_mcpwm.c **** 
 381:../Source_Files/lpc17xx_mcpwm.c **** 
 382:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 383:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Configures Count control in MCPWM peripheral
 384:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected
 385:../Source_Files/lpc17xx_mcpwm.c ****  * 							Should be: LPC_MCPWM
 386:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channelNum	Channel number, should be: 0..2
 387:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	countMode	Count mode, should be:
 388:../Source_Files/lpc17xx_mcpwm.c ****  * 							- ENABLE: Enables count mode.
 389:../Source_Files/lpc17xx_mcpwm.c ****  * 							- DISABLE: Disable count mode, the channel is in timer mode.
 390:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	countConfig	Pointer to a MCPWM_COUNT_CFG_Type structure
 391:../Source_Files/lpc17xx_mcpwm.c **** *                    		that contains the configuration information for the
 392:../Source_Files/lpc17xx_mcpwm.c **** *                    		specified MCPWM count control.
 393:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 394:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 395:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_CountConfig(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channelNum,
 396:../Source_Files/lpc17xx_mcpwm.c **** 					uint32_t countMode, MCPWM_COUNT_CFG_Type *countConfig)
 397:../Source_Files/lpc17xx_mcpwm.c **** {
 398:../Source_Files/lpc17xx_mcpwm.c **** 	if ((channelNum >= 0) && (channelNum <= 2)) {
 399:../Source_Files/lpc17xx_mcpwm.c **** 		if (countMode /* == ENABLE */){
 400:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_CNTR(channelNum);
 401:../Source_Files/lpc17xx_mcpwm.c **** 			if (countConfig->countFalling /* == ENABLE */) {
 402:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 403:../Source_Files/lpc17xx_mcpwm.c **** 			} else {
 404:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 405:../Source_Files/lpc17xx_mcpwm.c **** 			}
 406:../Source_Files/lpc17xx_mcpwm.c **** 			if (countConfig->countRising /* == ENABLE */) {
 407:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 408:../Source_Files/lpc17xx_mcpwm.c **** 			} else {
 409:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 410:../Source_Files/lpc17xx_mcpwm.c **** 			}
 411:../Source_Files/lpc17xx_mcpwm.c **** 		} else {
 412:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_CNTR(channelNum);
 413:../Source_Files/lpc17xx_mcpwm.c **** 		}
 414:../Source_Files/lpc17xx_mcpwm.c **** 	}
 415:../Source_Files/lpc17xx_mcpwm.c **** }
 416:../Source_Files/lpc17xx_mcpwm.c **** 
 417:../Source_Files/lpc17xx_mcpwm.c **** 
 418:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 419:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Start MCPWM activity for each MCPWM channel
 420:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected
 421:../Source_Files/lpc17xx_mcpwm.c ****  * 							Should be: LPC_MCPWM
 422:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channel0	State of this command on channel 0:
 423:../Source_Files/lpc17xx_mcpwm.c ****  * 							- ENABLE: 'Start' command will effect on channel 0
 424:../Source_Files/lpc17xx_mcpwm.c ****  * 							- DISABLE: 'Start' command will not effect on channel 0
 425:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channel1	State of this command on channel 1:
 426:../Source_Files/lpc17xx_mcpwm.c ****  * 							- ENABLE: 'Start' command will effect on channel 1
 427:../Source_Files/lpc17xx_mcpwm.c ****  * 							- DISABLE: 'Start' command will not effect on channel 1
 428:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channel2	State of this command on channel 2:
 429:../Source_Files/lpc17xx_mcpwm.c ****  * 							- ENABLE: 'Start' command will effect on channel 2
 430:../Source_Files/lpc17xx_mcpwm.c ****  * 							- DISABLE: 'Start' command will not effect on channel 2
 431:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 432:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 433:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_Start(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
 434:../Source_Files/lpc17xx_mcpwm.c **** 					uint32_t channel1, uint32_t channel2)
 435:../Source_Files/lpc17xx_mcpwm.c **** {
 436:../Source_Files/lpc17xx_mcpwm.c **** 	uint32_t regVal = 0;
 437:../Source_Files/lpc17xx_mcpwm.c **** 	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
 438:../Source_Files/lpc17xx_mcpwm.c **** 				| (channel2 ? MCPWM_CON_RUN(2) : 0);
 439:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCON_SET = regVal;
 440:../Source_Files/lpc17xx_mcpwm.c **** }
 441:../Source_Files/lpc17xx_mcpwm.c **** 
 442:../Source_Files/lpc17xx_mcpwm.c **** 
 443:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 444:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Stop MCPWM activity for each MCPWM channel
 445:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected
 446:../Source_Files/lpc17xx_mcpwm.c ****  * 							Should be: LPC_MCPWM
 447:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channel0	State of this command on channel 0:
 448:../Source_Files/lpc17xx_mcpwm.c ****  * 							- ENABLE: 'Stop' command will effect on channel 0
 449:../Source_Files/lpc17xx_mcpwm.c ****  * 							- DISABLE: 'Stop' command will not effect on channel 0
 450:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channel1	State of this command on channel 1:
 451:../Source_Files/lpc17xx_mcpwm.c ****  * 							- ENABLE: 'Stop' command will effect on channel 1
 452:../Source_Files/lpc17xx_mcpwm.c ****  * 							- DISABLE: 'Stop' command will not effect on channel 1
 453:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	channel2	State of this command on channel 2:
 454:../Source_Files/lpc17xx_mcpwm.c ****  * 							- ENABLE: 'Stop' command will effect on channel 2
 455:../Source_Files/lpc17xx_mcpwm.c ****  * 							- DISABLE: 'Stop' command will not effect on channel 2
 456:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 457:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 458:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_Stop(LPC_MCPWM_TypeDef *MCPWMx, uint32_t channel0,
 459:../Source_Files/lpc17xx_mcpwm.c **** 		uint32_t channel1, uint32_t channel2)
 460:../Source_Files/lpc17xx_mcpwm.c **** {
 461:../Source_Files/lpc17xx_mcpwm.c **** 	uint32_t regVal = 0;
 462:../Source_Files/lpc17xx_mcpwm.c **** 	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
 463:../Source_Files/lpc17xx_mcpwm.c **** 				| (channel2 ? MCPWM_CON_RUN(2) : 0);
 464:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCON_CLR = regVal;
 465:../Source_Files/lpc17xx_mcpwm.c **** }
 466:../Source_Files/lpc17xx_mcpwm.c **** 
 467:../Source_Files/lpc17xx_mcpwm.c **** 
 468:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 469:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Enables/Disables 3-phase AC motor mode on MCPWM peripheral
 470:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected
 471:../Source_Files/lpc17xx_mcpwm.c ****  * 							Should be: LPC_MCPWM
 472:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	acMode		State of this command, should be:
 473:../Source_Files/lpc17xx_mcpwm.c ****  * 							- ENABLE.
 474:../Source_Files/lpc17xx_mcpwm.c ****  * 							- DISABLE.
 475:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 476:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 477:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_ACMode(LPC_MCPWM_TypeDef *MCPWMx, uint32_t acMode)
 478:../Source_Files/lpc17xx_mcpwm.c **** {
 479:../Source_Files/lpc17xx_mcpwm.c **** 	if (acMode){
 480:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_ACMODE;
 481:../Source_Files/lpc17xx_mcpwm.c **** 	} else {
 482:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_CLR = MCPWM_CON_ACMODE;
 483:../Source_Files/lpc17xx_mcpwm.c **** 	}
 484:../Source_Files/lpc17xx_mcpwm.c **** }
 485:../Source_Files/lpc17xx_mcpwm.c **** 
 486:../Source_Files/lpc17xx_mcpwm.c **** 
 487:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 488:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Enables/Disables 3-phase DC motor mode on MCPWM peripheral
 489:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 			Motor Control PWM peripheral selected
 490:../Source_Files/lpc17xx_mcpwm.c ****  * 								Should be: LPC_MCPWM
 491:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	dcMode			State of this command, should be:
 492:../Source_Files/lpc17xx_mcpwm.c ****  * 								- ENABLE.
 493:../Source_Files/lpc17xx_mcpwm.c ****  * 								- DISABLE.
 494:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	outputInvered	Polarity of the MCOB outputs for all 3 channels,
 495:../Source_Files/lpc17xx_mcpwm.c ****  * 								should be:
 496:../Source_Files/lpc17xx_mcpwm.c ****  * 								- ENABLE: The MCOB outputs have opposite polarity
 497:../Source_Files/lpc17xx_mcpwm.c ****  * 									from the MCOA outputs.
 498:../Source_Files/lpc17xx_mcpwm.c ****  * 								- DISABLE: The MCOB outputs have the same basic
 499:../Source_Files/lpc17xx_mcpwm.c ****  * 									polarity as the MCOA outputs.
 500:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	outputPattern	A value contains bits that enables/disables the specified
 501:../Source_Files/lpc17xx_mcpwm.c ****  * 								output pins route to the internal MCOA0 signal, should be:
 502:../Source_Files/lpc17xx_mcpwm.c **** 								- MCPWM_PATENT_A0: 	 MCOA0 tracks internal MCOA0
 503:../Source_Files/lpc17xx_mcpwm.c **** 								- MCPWM_PATENT_B0: 	 MCOB0 tracks internal MCOA0
 504:../Source_Files/lpc17xx_mcpwm.c **** 								- MCPWM_PATENT_A1: 	 MCOA1 tracks internal MCOA0
 505:../Source_Files/lpc17xx_mcpwm.c **** 								- MCPWM_PATENT_B1: 	 MCOB1 tracks internal MCOA0
 506:../Source_Files/lpc17xx_mcpwm.c **** 								- MCPWM_PATENT_A2: 	 MCOA2 tracks internal MCOA0
 507:../Source_Files/lpc17xx_mcpwm.c **** 								- MCPWM_PATENT_B2: 	 MCOB2 tracks internal MCOA0
 508:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 509:../Source_Files/lpc17xx_mcpwm.c ****  *
 510:../Source_Files/lpc17xx_mcpwm.c ****  * Note: all these outputPatent values above can be ORed together for using as input parameter.
 511:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 512:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_DCMode(LPC_MCPWM_TypeDef *MCPWMx, uint32_t dcMode,
 513:../Source_Files/lpc17xx_mcpwm.c **** 					uint32_t outputInvered, uint32_t outputPattern)
 514:../Source_Files/lpc17xx_mcpwm.c **** {
 515:../Source_Files/lpc17xx_mcpwm.c **** 	if (dcMode){
 516:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_DCMODE;
 517:../Source_Files/lpc17xx_mcpwm.c **** 	} else {
 518:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_CLR = MCPWM_CON_DCMODE;
 519:../Source_Files/lpc17xx_mcpwm.c **** 	}
 520:../Source_Files/lpc17xx_mcpwm.c **** 
 521:../Source_Files/lpc17xx_mcpwm.c **** 	if (outputInvered) {
 522:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_INVBDC;
 523:../Source_Files/lpc17xx_mcpwm.c **** 	} else {
 524:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_CLR = MCPWM_CON_INVBDC;
 525:../Source_Files/lpc17xx_mcpwm.c **** 	}
 526:../Source_Files/lpc17xx_mcpwm.c **** 
 527:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCCP = outputPattern;
 528:../Source_Files/lpc17xx_mcpwm.c **** }
 529:../Source_Files/lpc17xx_mcpwm.c **** 
 530:../Source_Files/lpc17xx_mcpwm.c **** 
 531:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 532:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Configures the specified interrupt in MCPWM peripheral
 533:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected
 534:../Source_Files/lpc17xx_mcpwm.c ****  * 							Should be: LPC_MCPWM
 535:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	ulIntType	Interrupt type, should be:
 536:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM0: Limit interrupt for channel (0)
 537:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT0: Match interrupt for channel (0)
 538:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP0: Capture interrupt for channel (0)
 539:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM1: Limit interrupt for channel (1)
 540:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT1: Match interrupt for channel (1)
 541:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP1: Capture interrupt for channel (1)
 542:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM2: Limit interrupt for channel (2)
 543:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT2: Match interrupt for channel (2)
 544:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP2: Capture interrupt for channel (2)
 545:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 546:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	NewState	New State of this command, should be:
 547:../Source_Files/lpc17xx_mcpwm.c ****  * 							- ENABLE.
 548:../Source_Files/lpc17xx_mcpwm.c ****  * 							- DISABLE.
 549:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 550:../Source_Files/lpc17xx_mcpwm.c ****  *
 551:../Source_Files/lpc17xx_mcpwm.c ****  * Note: all these ulIntType values above can be ORed together for using as input parameter.
 552:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 553:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_IntConfig(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType, FunctionalState NewState)
 554:../Source_Files/lpc17xx_mcpwm.c **** {
 555:../Source_Files/lpc17xx_mcpwm.c **** 	if (NewState) {
 556:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCINTEN_SET = ulIntType;
 575              		.loc 1 556 0
 576 0242 0423     		movs	r3, #4
 577              	.LBE19:
 578              	.LBE18:
 136:../Source_Files/lpc17xx_mcpwm.c **** 			 CapFlag = RESET;
 579              		.loc 1 136 0
 580 0244 1470     		strb	r4, [r2, #0]
 581              	.LVL28:
 582              	.LBB21:
 583              	.LBB20:
 584              		.loc 1 556 0
 585 0246 C8F85430 		str	r3, [r8, #84]
 586 024a 09E0     		b	.L45
 587              	.LVL29:
 588              	.L47:
 589              	.LBE20:
 590              	.LBE21:
 144:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 23;
 591              		.loc 1 144 0
 592 024c 1721     		movs	r1, #23
 593 024e 00E0     		b	.L55
 594              	.L48:
 150:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 24;
 595              		.loc 1 150 0
 596 0250 1821     		movs	r1, #24
 597              	.L55:
 151:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
 598              		.loc 1 151 0
 599 0252 01A8     		add	r0, sp, #4
 600              	.LVL30:
 150:../Source_Files/lpc17xx_mcpwm.c **** 			 PinCfg.Pinnum = 24;
 601              		.loc 1 150 0
 602 0254 8DF80510 		strb	r1, [sp, #5]
 151:../Source_Files/lpc17xx_mcpwm.c **** 			 PINSEL_ConfigPin(&PinCfg);
 603              		.loc 1 151 0
 604 0258 FFF7FEFF 		bl	PINSEL_ConfigPin
 605              	.LVL31:
 152:../Source_Files/lpc17xx_mcpwm.c **** 			 break;
 606              		.loc 1 152 0
 607 025c 00E0     		b	.L45
 608              	.LVL32:
 609              	.L43:
 610              	.L54:
 611 025e FEE7     		b	.L54
 612              	.LVL33:
 613              	.L45:
 160:../Source_Files/lpc17xx_mcpwm.c **** 		if (IntCfg == MCPWM_INT_ENABLE)
 614              		.loc 1 160 0
 615 0260 012E     		cmp	r6, #1
 616 0262 07D1     		bne	.L42
 617              	.LVL34:
 618              	.LBB22:
 619              	.LBB23:
 620              		.file 2 "../CM3_Core/core_cm3.h"
   1:../CM3_Core/core_cm3.h **** /**************************************************************************//**
   2:../CM3_Core/core_cm3.h ****  * @file     core_cm3.h
   3:../CM3_Core/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CM3_Core/core_cm3.h ****  * @version  V2.01
   5:../CM3_Core/core_cm3.h ****  * @date     06. December 2010
   6:../CM3_Core/core_cm3.h ****  *
   7:../CM3_Core/core_cm3.h ****  * @note
   8:../CM3_Core/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:../CM3_Core/core_cm3.h ****  *
  10:../CM3_Core/core_cm3.h ****  * @par
  11:../CM3_Core/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../CM3_Core/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../CM3_Core/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:../CM3_Core/core_cm3.h ****  *
  15:../CM3_Core/core_cm3.h ****  * @par
  16:../CM3_Core/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../CM3_Core/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../CM3_Core/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../CM3_Core/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../CM3_Core/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../CM3_Core/core_cm3.h ****  *
  22:../CM3_Core/core_cm3.h ****  ******************************************************************************/
  23:../CM3_Core/core_cm3.h **** #if defined ( __ICCARM__ )
  24:../CM3_Core/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:../CM3_Core/core_cm3.h **** #endif
  26:../CM3_Core/core_cm3.h **** 
  27:../CM3_Core/core_cm3.h **** #ifdef __cplusplus
  28:../CM3_Core/core_cm3.h ****  extern "C" {
  29:../CM3_Core/core_cm3.h **** #endif
  30:../CM3_Core/core_cm3.h **** 
  31:../CM3_Core/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:../CM3_Core/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:../CM3_Core/core_cm3.h **** 
  34:../CM3_Core/core_cm3.h **** 
  35:../CM3_Core/core_cm3.h **** /*******************************************************************************
  36:../CM3_Core/core_cm3.h ****  *                 CMSIS definitions
  37:../CM3_Core/core_cm3.h ****  ******************************************************************************/
  38:../CM3_Core/core_cm3.h **** /** @ingroup  CMSIS
  39:../CM3_Core/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  40:../CM3_Core/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  41:../CM3_Core/core_cm3.h ****    - CMSIS version number
  42:../CM3_Core/core_cm3.h ****    - Cortex-M core
  43:../CM3_Core/core_cm3.h ****    - Cortex-M core Revision Number
  44:../CM3_Core/core_cm3.h ****   @{
  45:../CM3_Core/core_cm3.h ****  */
  46:../CM3_Core/core_cm3.h **** 
  47:../CM3_Core/core_cm3.h **** /*  CMSIS CM3 definitions */
  48:../CM3_Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  49:../CM3_Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  50:../CM3_Core/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  51:../CM3_Core/core_cm3.h **** 
  52:../CM3_Core/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  53:../CM3_Core/core_cm3.h **** 
  54:../CM3_Core/core_cm3.h **** 
  55:../CM3_Core/core_cm3.h **** #if defined ( __CC_ARM   )
  56:../CM3_Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  57:../CM3_Core/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  58:../CM3_Core/core_cm3.h **** 
  59:../CM3_Core/core_cm3.h **** #elif defined ( __ICCARM__ )
  60:../CM3_Core/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  61:../CM3_Core/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  62:../CM3_Core/core_cm3.h **** 
  63:../CM3_Core/core_cm3.h **** #elif defined   (  __GNUC__  )
  64:../CM3_Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  65:../CM3_Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  66:../CM3_Core/core_cm3.h **** 
  67:../CM3_Core/core_cm3.h **** #elif defined   (  __TASKING__  )
  68:../CM3_Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  69:../CM3_Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  70:../CM3_Core/core_cm3.h **** 
  71:../CM3_Core/core_cm3.h **** #endif
  72:../CM3_Core/core_cm3.h **** 
  73:../CM3_Core/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  74:../CM3_Core/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  75:../CM3_Core/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  76:../CM3_Core/core_cm3.h **** 
  77:../CM3_Core/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  78:../CM3_Core/core_cm3.h **** 
  79:../CM3_Core/core_cm3.h **** 
  80:../CM3_Core/core_cm3.h **** #ifndef __CMSIS_GENERIC
  81:../CM3_Core/core_cm3.h **** 
  82:../CM3_Core/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  83:../CM3_Core/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  84:../CM3_Core/core_cm3.h **** 
  85:../CM3_Core/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  86:../CM3_Core/core_cm3.h **** #ifdef __cplusplus
  87:../CM3_Core/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  88:../CM3_Core/core_cm3.h **** #else
  89:../CM3_Core/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  90:../CM3_Core/core_cm3.h **** #endif
  91:../CM3_Core/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
  92:../CM3_Core/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
  93:../CM3_Core/core_cm3.h **** 
  94:../CM3_Core/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
  95:../CM3_Core/core_cm3.h **** 
  96:../CM3_Core/core_cm3.h **** 
  97:../CM3_Core/core_cm3.h **** 
  98:../CM3_Core/core_cm3.h **** /*******************************************************************************
  99:../CM3_Core/core_cm3.h ****  *                 Register Abstraction
 100:../CM3_Core/core_cm3.h ****  ******************************************************************************/
 101:../CM3_Core/core_cm3.h **** 
 102:../CM3_Core/core_cm3.h **** /** @ingroup  CMSIS
 103:../CM3_Core/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 104:../CM3_Core/core_cm3.h ****   Core Register contain:
 105:../CM3_Core/core_cm3.h ****   - Core Register
 106:../CM3_Core/core_cm3.h ****   - Core NVIC Register
 107:../CM3_Core/core_cm3.h ****   - Core SCB Register
 108:../CM3_Core/core_cm3.h ****   - Core SysTick Register
 109:../CM3_Core/core_cm3.h ****   - Core Debug Register
 110:../CM3_Core/core_cm3.h ****   - Core MPU Register
 111:../CM3_Core/core_cm3.h **** */
 112:../CM3_Core/core_cm3.h **** 
 113:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 114:../CM3_Core/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 115:../CM3_Core/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 116:../CM3_Core/core_cm3.h ****   @{
 117:../CM3_Core/core_cm3.h ****  */
 118:../CM3_Core/core_cm3.h **** 
 119:../CM3_Core/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 120:../CM3_Core/core_cm3.h ****  */
 121:../CM3_Core/core_cm3.h **** typedef union
 122:../CM3_Core/core_cm3.h **** {
 123:../CM3_Core/core_cm3.h ****   struct
 124:../CM3_Core/core_cm3.h ****   {
 125:../CM3_Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 126:../CM3_Core/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 127:../CM3_Core/core_cm3.h **** #else
 128:../CM3_Core/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 129:../CM3_Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 130:../CM3_Core/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 131:../CM3_Core/core_cm3.h **** #endif
 132:../CM3_Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 133:../CM3_Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 134:../CM3_Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 135:../CM3_Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 136:../CM3_Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 137:../CM3_Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 138:../CM3_Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 139:../CM3_Core/core_cm3.h **** } APSR_Type;
 140:../CM3_Core/core_cm3.h **** 
 141:../CM3_Core/core_cm3.h **** 
 142:../CM3_Core/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 143:../CM3_Core/core_cm3.h ****  */
 144:../CM3_Core/core_cm3.h **** typedef union
 145:../CM3_Core/core_cm3.h **** {
 146:../CM3_Core/core_cm3.h ****   struct
 147:../CM3_Core/core_cm3.h ****   {
 148:../CM3_Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 149:../CM3_Core/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 150:../CM3_Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 151:../CM3_Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 152:../CM3_Core/core_cm3.h **** } IPSR_Type;
 153:../CM3_Core/core_cm3.h **** 
 154:../CM3_Core/core_cm3.h **** 
 155:../CM3_Core/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 156:../CM3_Core/core_cm3.h ****  */
 157:../CM3_Core/core_cm3.h **** typedef union
 158:../CM3_Core/core_cm3.h **** {
 159:../CM3_Core/core_cm3.h ****   struct
 160:../CM3_Core/core_cm3.h ****   {
 161:../CM3_Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 162:../CM3_Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 163:../CM3_Core/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 164:../CM3_Core/core_cm3.h **** #else
 165:../CM3_Core/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 166:../CM3_Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 167:../CM3_Core/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 168:../CM3_Core/core_cm3.h **** #endif
 169:../CM3_Core/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 170:../CM3_Core/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 171:../CM3_Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 172:../CM3_Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 173:../CM3_Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 174:../CM3_Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 175:../CM3_Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 176:../CM3_Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 177:../CM3_Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 178:../CM3_Core/core_cm3.h **** } xPSR_Type;
 179:../CM3_Core/core_cm3.h **** 
 180:../CM3_Core/core_cm3.h **** 
 181:../CM3_Core/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 182:../CM3_Core/core_cm3.h ****  */
 183:../CM3_Core/core_cm3.h **** typedef union
 184:../CM3_Core/core_cm3.h **** {
 185:../CM3_Core/core_cm3.h ****   struct
 186:../CM3_Core/core_cm3.h ****   {
 187:../CM3_Core/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 188:../CM3_Core/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 189:../CM3_Core/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 190:../CM3_Core/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 191:../CM3_Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 192:../CM3_Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 193:../CM3_Core/core_cm3.h **** } CONTROL_Type;
 194:../CM3_Core/core_cm3.h **** 
 195:../CM3_Core/core_cm3.h **** /*@} end of group CMSIS_CORE */
 196:../CM3_Core/core_cm3.h **** 
 197:../CM3_Core/core_cm3.h **** 
 198:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 199:../CM3_Core/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 200:../CM3_Core/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 201:../CM3_Core/core_cm3.h ****   @{
 202:../CM3_Core/core_cm3.h ****  */
 203:../CM3_Core/core_cm3.h **** 
 204:../CM3_Core/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 205:../CM3_Core/core_cm3.h ****  */
 206:../CM3_Core/core_cm3.h **** typedef struct
 207:../CM3_Core/core_cm3.h **** {
 208:../CM3_Core/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 209:../CM3_Core/core_cm3.h ****        uint32_t RESERVED0[24];
 210:../CM3_Core/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 211:../CM3_Core/core_cm3.h ****        uint32_t RSERVED1[24];
 212:../CM3_Core/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 213:../CM3_Core/core_cm3.h ****        uint32_t RESERVED2[24];
 214:../CM3_Core/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 215:../CM3_Core/core_cm3.h ****        uint32_t RESERVED3[24];
 216:../CM3_Core/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 217:../CM3_Core/core_cm3.h ****        uint32_t RESERVED4[56];
 218:../CM3_Core/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 219:../CM3_Core/core_cm3.h ****        uint32_t RESERVED5[644];
 220:../CM3_Core/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 221:../CM3_Core/core_cm3.h **** }  NVIC_Type;
 222:../CM3_Core/core_cm3.h **** 
 223:../CM3_Core/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 224:../CM3_Core/core_cm3.h **** 
 225:../CM3_Core/core_cm3.h **** 
 226:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 227:../CM3_Core/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 228:../CM3_Core/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 229:../CM3_Core/core_cm3.h ****   @{
 230:../CM3_Core/core_cm3.h ****  */
 231:../CM3_Core/core_cm3.h **** 
 232:../CM3_Core/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 233:../CM3_Core/core_cm3.h ****  */
 234:../CM3_Core/core_cm3.h **** typedef struct
 235:../CM3_Core/core_cm3.h **** {
 236:../CM3_Core/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 237:../CM3_Core/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 238:../CM3_Core/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 239:../CM3_Core/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 240:../CM3_Core/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 241:../CM3_Core/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 242:../CM3_Core/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 243:../CM3_Core/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 244:../CM3_Core/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 245:../CM3_Core/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 246:../CM3_Core/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 247:../CM3_Core/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 248:../CM3_Core/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 249:../CM3_Core/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 250:../CM3_Core/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 251:../CM3_Core/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 252:../CM3_Core/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 253:../CM3_Core/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 254:../CM3_Core/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 255:../CM3_Core/core_cm3.h **** } SCB_Type;
 256:../CM3_Core/core_cm3.h **** 
 257:../CM3_Core/core_cm3.h **** /* SCB CPUID Register Definitions */
 258:../CM3_Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 259:../CM3_Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 260:../CM3_Core/core_cm3.h **** 
 261:../CM3_Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 262:../CM3_Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 263:../CM3_Core/core_cm3.h **** 
 264:../CM3_Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 265:../CM3_Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 266:../CM3_Core/core_cm3.h **** 
 267:../CM3_Core/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 268:../CM3_Core/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 269:../CM3_Core/core_cm3.h **** 
 270:../CM3_Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 271:../CM3_Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 272:../CM3_Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 273:../CM3_Core/core_cm3.h **** 
 274:../CM3_Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 275:../CM3_Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 276:../CM3_Core/core_cm3.h **** 
 277:../CM3_Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 278:../CM3_Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 279:../CM3_Core/core_cm3.h **** 
 280:../CM3_Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 281:../CM3_Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 282:../CM3_Core/core_cm3.h **** 
 283:../CM3_Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 284:../CM3_Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 285:../CM3_Core/core_cm3.h **** 
 286:../CM3_Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 287:../CM3_Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 288:../CM3_Core/core_cm3.h **** 
 289:../CM3_Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 290:../CM3_Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 291:../CM3_Core/core_cm3.h **** 
 292:../CM3_Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 293:../CM3_Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 294:../CM3_Core/core_cm3.h **** 
 295:../CM3_Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 296:../CM3_Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 297:../CM3_Core/core_cm3.h **** 
 298:../CM3_Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 299:../CM3_Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 300:../CM3_Core/core_cm3.h **** 
 301:../CM3_Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 302:../CM3_Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 303:../CM3_Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 304:../CM3_Core/core_cm3.h **** 
 305:../CM3_Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 306:../CM3_Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 307:../CM3_Core/core_cm3.h **** 
 308:../CM3_Core/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 309:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 310:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 311:../CM3_Core/core_cm3.h **** 
 312:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 313:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 314:../CM3_Core/core_cm3.h **** 
 315:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 316:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 317:../CM3_Core/core_cm3.h **** 
 318:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 319:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 320:../CM3_Core/core_cm3.h **** 
 321:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 322:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 323:../CM3_Core/core_cm3.h **** 
 324:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 325:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 326:../CM3_Core/core_cm3.h **** 
 327:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 328:../CM3_Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 329:../CM3_Core/core_cm3.h **** 
 330:../CM3_Core/core_cm3.h **** /* SCB System Control Register Definitions */
 331:../CM3_Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 332:../CM3_Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 333:../CM3_Core/core_cm3.h **** 
 334:../CM3_Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 335:../CM3_Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 336:../CM3_Core/core_cm3.h **** 
 337:../CM3_Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 338:../CM3_Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 339:../CM3_Core/core_cm3.h **** 
 340:../CM3_Core/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 341:../CM3_Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 342:../CM3_Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 343:../CM3_Core/core_cm3.h **** 
 344:../CM3_Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 345:../CM3_Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 346:../CM3_Core/core_cm3.h **** 
 347:../CM3_Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 348:../CM3_Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 349:../CM3_Core/core_cm3.h **** 
 350:../CM3_Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 351:../CM3_Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 352:../CM3_Core/core_cm3.h **** 
 353:../CM3_Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 354:../CM3_Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 355:../CM3_Core/core_cm3.h **** 
 356:../CM3_Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 357:../CM3_Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 358:../CM3_Core/core_cm3.h **** 
 359:../CM3_Core/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 360:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 361:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 362:../CM3_Core/core_cm3.h **** 
 363:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 364:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 365:../CM3_Core/core_cm3.h **** 
 366:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 367:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 368:../CM3_Core/core_cm3.h **** 
 369:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 370:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 371:../CM3_Core/core_cm3.h **** 
 372:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 373:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 374:../CM3_Core/core_cm3.h **** 
 375:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 376:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 377:../CM3_Core/core_cm3.h **** 
 378:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 379:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 380:../CM3_Core/core_cm3.h **** 
 381:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 382:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 383:../CM3_Core/core_cm3.h **** 
 384:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 385:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 386:../CM3_Core/core_cm3.h **** 
 387:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 388:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 389:../CM3_Core/core_cm3.h **** 
 390:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 391:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 392:../CM3_Core/core_cm3.h **** 
 393:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 394:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 395:../CM3_Core/core_cm3.h **** 
 396:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 397:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 398:../CM3_Core/core_cm3.h **** 
 399:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 400:../CM3_Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 401:../CM3_Core/core_cm3.h **** 
 402:../CM3_Core/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 403:../CM3_Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 404:../CM3_Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 405:../CM3_Core/core_cm3.h **** 
 406:../CM3_Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 407:../CM3_Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 408:../CM3_Core/core_cm3.h **** 
 409:../CM3_Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 410:../CM3_Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 411:../CM3_Core/core_cm3.h **** 
 412:../CM3_Core/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 413:../CM3_Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 414:../CM3_Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 415:../CM3_Core/core_cm3.h **** 
 416:../CM3_Core/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 417:../CM3_Core/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 418:../CM3_Core/core_cm3.h **** 
 419:../CM3_Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 420:../CM3_Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 421:../CM3_Core/core_cm3.h **** 
 422:../CM3_Core/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 423:../CM3_Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 424:../CM3_Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 425:../CM3_Core/core_cm3.h **** 
 426:../CM3_Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 427:../CM3_Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 428:../CM3_Core/core_cm3.h **** 
 429:../CM3_Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 430:../CM3_Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 431:../CM3_Core/core_cm3.h **** 
 432:../CM3_Core/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 433:../CM3_Core/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 434:../CM3_Core/core_cm3.h **** 
 435:../CM3_Core/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 436:../CM3_Core/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 437:../CM3_Core/core_cm3.h **** 
 438:../CM3_Core/core_cm3.h **** /*@} end of group CMSIS_SCB */
 439:../CM3_Core/core_cm3.h **** 
 440:../CM3_Core/core_cm3.h **** 
 441:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 442:../CM3_Core/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 443:../CM3_Core/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 444:../CM3_Core/core_cm3.h ****   @{
 445:../CM3_Core/core_cm3.h ****  */
 446:../CM3_Core/core_cm3.h **** 
 447:../CM3_Core/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 448:../CM3_Core/core_cm3.h ****  */
 449:../CM3_Core/core_cm3.h **** typedef struct
 450:../CM3_Core/core_cm3.h **** {
 451:../CM3_Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 452:../CM3_Core/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 453:../CM3_Core/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 454:../CM3_Core/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 455:../CM3_Core/core_cm3.h **** } SysTick_Type;
 456:../CM3_Core/core_cm3.h **** 
 457:../CM3_Core/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 458:../CM3_Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 459:../CM3_Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 460:../CM3_Core/core_cm3.h **** 
 461:../CM3_Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 462:../CM3_Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 463:../CM3_Core/core_cm3.h **** 
 464:../CM3_Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 465:../CM3_Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 466:../CM3_Core/core_cm3.h **** 
 467:../CM3_Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 468:../CM3_Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 469:../CM3_Core/core_cm3.h **** 
 470:../CM3_Core/core_cm3.h **** /* SysTick Reload Register Definitions */
 471:../CM3_Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 472:../CM3_Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 473:../CM3_Core/core_cm3.h **** 
 474:../CM3_Core/core_cm3.h **** /* SysTick Current Register Definitions */
 475:../CM3_Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 476:../CM3_Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 477:../CM3_Core/core_cm3.h **** 
 478:../CM3_Core/core_cm3.h **** /* SysTick Calibration Register Definitions */
 479:../CM3_Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 480:../CM3_Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 481:../CM3_Core/core_cm3.h **** 
 482:../CM3_Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 483:../CM3_Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 484:../CM3_Core/core_cm3.h **** 
 485:../CM3_Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 486:../CM3_Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 487:../CM3_Core/core_cm3.h **** 
 488:../CM3_Core/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 489:../CM3_Core/core_cm3.h **** 
 490:../CM3_Core/core_cm3.h **** 
 491:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 492:../CM3_Core/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 493:../CM3_Core/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 494:../CM3_Core/core_cm3.h ****   @{
 495:../CM3_Core/core_cm3.h ****  */
 496:../CM3_Core/core_cm3.h **** 
 497:../CM3_Core/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 498:../CM3_Core/core_cm3.h ****  */
 499:../CM3_Core/core_cm3.h **** typedef struct
 500:../CM3_Core/core_cm3.h **** {
 501:../CM3_Core/core_cm3.h ****   __O  union
 502:../CM3_Core/core_cm3.h ****   {
 503:../CM3_Core/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 504:../CM3_Core/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 505:../CM3_Core/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 506:../CM3_Core/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 507:../CM3_Core/core_cm3.h ****        uint32_t RESERVED0[864];
 508:../CM3_Core/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 509:../CM3_Core/core_cm3.h ****        uint32_t RESERVED1[15];
 510:../CM3_Core/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 511:../CM3_Core/core_cm3.h ****        uint32_t RESERVED2[15];
 512:../CM3_Core/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 513:../CM3_Core/core_cm3.h ****        uint32_t RESERVED3[29];
 514:../CM3_Core/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 515:../CM3_Core/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 516:../CM3_Core/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 517:../CM3_Core/core_cm3.h ****        uint32_t RESERVED4[43];
 518:../CM3_Core/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 519:../CM3_Core/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 520:../CM3_Core/core_cm3.h ****        uint32_t RESERVED5[6];
 521:../CM3_Core/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 522:../CM3_Core/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 523:../CM3_Core/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 524:../CM3_Core/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 525:../CM3_Core/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 526:../CM3_Core/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 527:../CM3_Core/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 528:../CM3_Core/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 529:../CM3_Core/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 530:../CM3_Core/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 531:../CM3_Core/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 532:../CM3_Core/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 533:../CM3_Core/core_cm3.h **** } ITM_Type;
 534:../CM3_Core/core_cm3.h **** 
 535:../CM3_Core/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 536:../CM3_Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 537:../CM3_Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 538:../CM3_Core/core_cm3.h **** 
 539:../CM3_Core/core_cm3.h **** /* ITM Trace Control Register Definitions */
 540:../CM3_Core/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 541:../CM3_Core/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 542:../CM3_Core/core_cm3.h **** 
 543:../CM3_Core/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 544:../CM3_Core/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 545:../CM3_Core/core_cm3.h **** 
 546:../CM3_Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 547:../CM3_Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 548:../CM3_Core/core_cm3.h **** 
 549:../CM3_Core/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 550:../CM3_Core/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 551:../CM3_Core/core_cm3.h **** 
 552:../CM3_Core/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 553:../CM3_Core/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 554:../CM3_Core/core_cm3.h **** 
 555:../CM3_Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 556:../CM3_Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 557:../CM3_Core/core_cm3.h **** 
 558:../CM3_Core/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 559:../CM3_Core/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 560:../CM3_Core/core_cm3.h **** 
 561:../CM3_Core/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 562:../CM3_Core/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 563:../CM3_Core/core_cm3.h **** 
 564:../CM3_Core/core_cm3.h **** /* ITM Integration Write Register Definitions */
 565:../CM3_Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 566:../CM3_Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 567:../CM3_Core/core_cm3.h **** 
 568:../CM3_Core/core_cm3.h **** /* ITM Integration Read Register Definitions */
 569:../CM3_Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 570:../CM3_Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 571:../CM3_Core/core_cm3.h **** 
 572:../CM3_Core/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 573:../CM3_Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 574:../CM3_Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 575:../CM3_Core/core_cm3.h **** 
 576:../CM3_Core/core_cm3.h **** /* ITM Lock Status Register Definitions */
 577:../CM3_Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 578:../CM3_Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 579:../CM3_Core/core_cm3.h **** 
 580:../CM3_Core/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 581:../CM3_Core/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 582:../CM3_Core/core_cm3.h **** 
 583:../CM3_Core/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 584:../CM3_Core/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 585:../CM3_Core/core_cm3.h **** 
 586:../CM3_Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 587:../CM3_Core/core_cm3.h **** 
 588:../CM3_Core/core_cm3.h **** 
 589:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 590:../CM3_Core/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 591:../CM3_Core/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 592:../CM3_Core/core_cm3.h ****   @{
 593:../CM3_Core/core_cm3.h ****  */
 594:../CM3_Core/core_cm3.h **** 
 595:../CM3_Core/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 596:../CM3_Core/core_cm3.h ****  */
 597:../CM3_Core/core_cm3.h **** typedef struct
 598:../CM3_Core/core_cm3.h **** {
 599:../CM3_Core/core_cm3.h ****        uint32_t RESERVED0;
 600:../CM3_Core/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 601:../CM3_Core/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 602:../CM3_Core/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 603:../CM3_Core/core_cm3.h **** #else
 604:../CM3_Core/core_cm3.h ****        uint32_t RESERVED1;
 605:../CM3_Core/core_cm3.h **** #endif
 606:../CM3_Core/core_cm3.h **** } InterruptType_Type;
 607:../CM3_Core/core_cm3.h **** 
 608:../CM3_Core/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 609:../CM3_Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 610:../CM3_Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 611:../CM3_Core/core_cm3.h **** 
 612:../CM3_Core/core_cm3.h **** /* Auxiliary Control Register Definitions */
 613:../CM3_Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 614:../CM3_Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 615:../CM3_Core/core_cm3.h **** 
 616:../CM3_Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 617:../CM3_Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 618:../CM3_Core/core_cm3.h **** 
 619:../CM3_Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 620:../CM3_Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 621:../CM3_Core/core_cm3.h **** 
 622:../CM3_Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 623:../CM3_Core/core_cm3.h **** 
 624:../CM3_Core/core_cm3.h **** 
 625:../CM3_Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 626:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 627:../CM3_Core/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 628:../CM3_Core/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 629:../CM3_Core/core_cm3.h ****   @{
 630:../CM3_Core/core_cm3.h ****  */
 631:../CM3_Core/core_cm3.h **** 
 632:../CM3_Core/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 633:../CM3_Core/core_cm3.h ****  */
 634:../CM3_Core/core_cm3.h **** typedef struct
 635:../CM3_Core/core_cm3.h **** {
 636:../CM3_Core/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 637:../CM3_Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 638:../CM3_Core/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 639:../CM3_Core/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 640:../CM3_Core/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 641:../CM3_Core/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 642:../CM3_Core/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 643:../CM3_Core/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 644:../CM3_Core/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 645:../CM3_Core/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 646:../CM3_Core/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 647:../CM3_Core/core_cm3.h **** } MPU_Type;
 648:../CM3_Core/core_cm3.h **** 
 649:../CM3_Core/core_cm3.h **** /* MPU Type Register */
 650:../CM3_Core/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 651:../CM3_Core/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 652:../CM3_Core/core_cm3.h **** 
 653:../CM3_Core/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 654:../CM3_Core/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 655:../CM3_Core/core_cm3.h **** 
 656:../CM3_Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 657:../CM3_Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 658:../CM3_Core/core_cm3.h **** 
 659:../CM3_Core/core_cm3.h **** /* MPU Control Register */
 660:../CM3_Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 661:../CM3_Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 662:../CM3_Core/core_cm3.h **** 
 663:../CM3_Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 664:../CM3_Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 665:../CM3_Core/core_cm3.h **** 
 666:../CM3_Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 667:../CM3_Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 668:../CM3_Core/core_cm3.h **** 
 669:../CM3_Core/core_cm3.h **** /* MPU Region Number Register */
 670:../CM3_Core/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 671:../CM3_Core/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 672:../CM3_Core/core_cm3.h **** 
 673:../CM3_Core/core_cm3.h **** /* MPU Region Base Address Register */
 674:../CM3_Core/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 675:../CM3_Core/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 676:../CM3_Core/core_cm3.h **** 
 677:../CM3_Core/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 678:../CM3_Core/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 679:../CM3_Core/core_cm3.h **** 
 680:../CM3_Core/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 681:../CM3_Core/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 682:../CM3_Core/core_cm3.h **** 
 683:../CM3_Core/core_cm3.h **** /* MPU Region Attribute and Size Register */
 684:../CM3_Core/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 685:../CM3_Core/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 686:../CM3_Core/core_cm3.h **** 
 687:../CM3_Core/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 688:../CM3_Core/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 689:../CM3_Core/core_cm3.h **** 
 690:../CM3_Core/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 691:../CM3_Core/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 692:../CM3_Core/core_cm3.h **** 
 693:../CM3_Core/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 694:../CM3_Core/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 695:../CM3_Core/core_cm3.h **** 
 696:../CM3_Core/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 697:../CM3_Core/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 698:../CM3_Core/core_cm3.h **** 
 699:../CM3_Core/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 700:../CM3_Core/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 701:../CM3_Core/core_cm3.h **** 
 702:../CM3_Core/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 703:../CM3_Core/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 704:../CM3_Core/core_cm3.h **** 
 705:../CM3_Core/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 706:../CM3_Core/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 707:../CM3_Core/core_cm3.h **** 
 708:../CM3_Core/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 709:../CM3_Core/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 710:../CM3_Core/core_cm3.h **** 
 711:../CM3_Core/core_cm3.h **** /*@} end of group CMSIS_MPU */
 712:../CM3_Core/core_cm3.h **** #endif
 713:../CM3_Core/core_cm3.h **** 
 714:../CM3_Core/core_cm3.h **** 
 715:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 716:../CM3_Core/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 717:../CM3_Core/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 718:../CM3_Core/core_cm3.h ****   @{
 719:../CM3_Core/core_cm3.h ****  */
 720:../CM3_Core/core_cm3.h **** 
 721:../CM3_Core/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 722:../CM3_Core/core_cm3.h ****  */
 723:../CM3_Core/core_cm3.h **** typedef struct
 724:../CM3_Core/core_cm3.h **** {
 725:../CM3_Core/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 726:../CM3_Core/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 727:../CM3_Core/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 728:../CM3_Core/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 729:../CM3_Core/core_cm3.h **** } CoreDebug_Type;
 730:../CM3_Core/core_cm3.h **** 
 731:../CM3_Core/core_cm3.h **** /* Debug Halting Control and Status Register */
 732:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 733:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 734:../CM3_Core/core_cm3.h **** 
 735:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 736:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 737:../CM3_Core/core_cm3.h **** 
 738:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 739:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 740:../CM3_Core/core_cm3.h **** 
 741:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 742:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 743:../CM3_Core/core_cm3.h **** 
 744:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 745:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 746:../CM3_Core/core_cm3.h **** 
 747:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 748:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 749:../CM3_Core/core_cm3.h **** 
 750:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 751:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 752:../CM3_Core/core_cm3.h **** 
 753:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 754:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 755:../CM3_Core/core_cm3.h **** 
 756:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 757:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 758:../CM3_Core/core_cm3.h **** 
 759:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 760:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 761:../CM3_Core/core_cm3.h **** 
 762:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 763:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 764:../CM3_Core/core_cm3.h **** 
 765:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 766:../CM3_Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 767:../CM3_Core/core_cm3.h **** 
 768:../CM3_Core/core_cm3.h **** /* Debug Core Register Selector Register */
 769:../CM3_Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 770:../CM3_Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 771:../CM3_Core/core_cm3.h **** 
 772:../CM3_Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 773:../CM3_Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 774:../CM3_Core/core_cm3.h **** 
 775:../CM3_Core/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 776:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 777:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 778:../CM3_Core/core_cm3.h **** 
 779:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 780:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 781:../CM3_Core/core_cm3.h **** 
 782:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 783:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 784:../CM3_Core/core_cm3.h **** 
 785:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 786:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 787:../CM3_Core/core_cm3.h **** 
 788:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 789:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 790:../CM3_Core/core_cm3.h **** 
 791:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 792:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 793:../CM3_Core/core_cm3.h **** 
 794:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 795:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 796:../CM3_Core/core_cm3.h **** 
 797:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 798:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 799:../CM3_Core/core_cm3.h **** 
 800:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 801:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 802:../CM3_Core/core_cm3.h **** 
 803:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 804:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 805:../CM3_Core/core_cm3.h **** 
 806:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 807:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 808:../CM3_Core/core_cm3.h **** 
 809:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 810:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 811:../CM3_Core/core_cm3.h **** 
 812:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 813:../CM3_Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 814:../CM3_Core/core_cm3.h **** 
 815:../CM3_Core/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 816:../CM3_Core/core_cm3.h **** 
 817:../CM3_Core/core_cm3.h **** 
 818:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 819:../CM3_Core/core_cm3.h ****   @{
 820:../CM3_Core/core_cm3.h ****  */
 821:../CM3_Core/core_cm3.h **** 
 822:../CM3_Core/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 823:../CM3_Core/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 824:../CM3_Core/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 825:../CM3_Core/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 826:../CM3_Core/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 827:../CM3_Core/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 828:../CM3_Core/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 829:../CM3_Core/core_cm3.h **** 
 830:../CM3_Core/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 831:../CM3_Core/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 832:../CM3_Core/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 833:../CM3_Core/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 834:../CM3_Core/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 835:../CM3_Core/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 836:../CM3_Core/core_cm3.h **** 
 837:../CM3_Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 838:../CM3_Core/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 839:../CM3_Core/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 840:../CM3_Core/core_cm3.h **** #endif
 841:../CM3_Core/core_cm3.h **** 
 842:../CM3_Core/core_cm3.h **** /*@} */
 843:../CM3_Core/core_cm3.h **** 
 844:../CM3_Core/core_cm3.h **** 
 845:../CM3_Core/core_cm3.h **** 
 846:../CM3_Core/core_cm3.h **** /*******************************************************************************
 847:../CM3_Core/core_cm3.h ****  *                Hardware Abstraction Layer
 848:../CM3_Core/core_cm3.h ****  ******************************************************************************/
 849:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS
 850:../CM3_Core/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 851:../CM3_Core/core_cm3.h ****   Core Function Interface contains:
 852:../CM3_Core/core_cm3.h ****   - Core NVIC Functions
 853:../CM3_Core/core_cm3.h ****   - Core SysTick Functions
 854:../CM3_Core/core_cm3.h ****   - Core Debug Functions
 855:../CM3_Core/core_cm3.h ****   - Core Register Access Functions
 856:../CM3_Core/core_cm3.h **** */
 857:../CM3_Core/core_cm3.h **** 
 858:../CM3_Core/core_cm3.h **** 
 859:../CM3_Core/core_cm3.h **** 
 860:../CM3_Core/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 861:../CM3_Core/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 862:../CM3_Core/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 863:../CM3_Core/core_cm3.h ****   @{
 864:../CM3_Core/core_cm3.h ****  */
 865:../CM3_Core/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 866:../CM3_Core/core_cm3.h ****  * @{
 867:../CM3_Core/core_cm3.h ****  */
 868:../CM3_Core/core_cm3.h **** /** \brief  Set Priority Grouping
 869:../CM3_Core/core_cm3.h **** 
 870:../CM3_Core/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 871:../CM3_Core/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 872:../CM3_Core/core_cm3.h ****   Only values from 0..7 are used.
 873:../CM3_Core/core_cm3.h ****   In case of a conflict between priority grouping and available
 874:../CM3_Core/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 875:../CM3_Core/core_cm3.h **** 
 876:../CM3_Core/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 877:../CM3_Core/core_cm3.h ****  */
 878:../CM3_Core/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 879:../CM3_Core/core_cm3.h **** {
 880:../CM3_Core/core_cm3.h ****   uint32_t reg_value;
 881:../CM3_Core/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 882:../CM3_Core/core_cm3.h **** 
 883:../CM3_Core/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 884:../CM3_Core/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 885:../CM3_Core/core_cm3.h ****   reg_value  =  (reg_value                       |
 886:../CM3_Core/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 887:../CM3_Core/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 888:../CM3_Core/core_cm3.h ****   SCB->AIRCR =  reg_value;
 889:../CM3_Core/core_cm3.h **** }
 890:../CM3_Core/core_cm3.h **** 
 891:../CM3_Core/core_cm3.h **** 
 892:../CM3_Core/core_cm3.h **** /** \brief  Get Priority Grouping
 893:../CM3_Core/core_cm3.h **** 
 894:../CM3_Core/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 895:../CM3_Core/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 896:../CM3_Core/core_cm3.h **** 
 897:../CM3_Core/core_cm3.h ****     \return                Priority grouping field
 898:../CM3_Core/core_cm3.h ****  */
 899:../CM3_Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 900:../CM3_Core/core_cm3.h **** {
 901:../CM3_Core/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 902:../CM3_Core/core_cm3.h **** }
 903:../CM3_Core/core_cm3.h **** 
 904:../CM3_Core/core_cm3.h **** 
 905:../CM3_Core/core_cm3.h **** /** \brief  Enable External Interrupt
 906:../CM3_Core/core_cm3.h **** 
 907:../CM3_Core/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 908:../CM3_Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 909:../CM3_Core/core_cm3.h **** 
 910:../CM3_Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 911:../CM3_Core/core_cm3.h ****  */
 912:../CM3_Core/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 913:../CM3_Core/core_cm3.h **** {
 914:../CM3_Core/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 915:../CM3_Core/core_cm3.h **** }
 916:../CM3_Core/core_cm3.h **** 
 917:../CM3_Core/core_cm3.h **** 
 918:../CM3_Core/core_cm3.h **** /** \brief  Disable External Interrupt
 919:../CM3_Core/core_cm3.h **** 
 920:../CM3_Core/core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 921:../CM3_Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 922:../CM3_Core/core_cm3.h **** 
 923:../CM3_Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 924:../CM3_Core/core_cm3.h ****  */
 925:../CM3_Core/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 926:../CM3_Core/core_cm3.h **** {
 927:../CM3_Core/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 621              		.loc 2 927 0
 622 0264 124B     		ldr	r3, .L56+8
 623 0266 4FF08041 		mov	r1, #1073741824
 624              	.LBE23:
 625              	.LBE22:
 626              	.LBB25:
 627              	.LBB26:
 928:../CM3_Core/core_cm3.h **** }
 929:../CM3_Core/core_cm3.h **** 
 930:../CM3_Core/core_cm3.h **** 
 931:../CM3_Core/core_cm3.h **** /** \brief  Get Pending Interrupt
 932:../CM3_Core/core_cm3.h **** 
 933:../CM3_Core/core_cm3.h ****     This function reads the pending register in the NVIC and returns the pending bit
 934:../CM3_Core/core_cm3.h ****     for the specified interrupt.
 935:../CM3_Core/core_cm3.h **** 
 936:../CM3_Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 937:../CM3_Core/core_cm3.h ****     \return             0  Interrupt status is not pending
 938:../CM3_Core/core_cm3.h ****     \return             1  Interrupt status is pending
 939:../CM3_Core/core_cm3.h ****  */
 940:../CM3_Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 941:../CM3_Core/core_cm3.h **** {
 942:../CM3_Core/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
 943:../CM3_Core/core_cm3.h **** }
 944:../CM3_Core/core_cm3.h **** 
 945:../CM3_Core/core_cm3.h **** 
 946:../CM3_Core/core_cm3.h **** /** \brief  Set Pending Interrupt
 947:../CM3_Core/core_cm3.h **** 
 948:../CM3_Core/core_cm3.h ****     This function sets the pending bit for the specified interrupt.
 949:../CM3_Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 950:../CM3_Core/core_cm3.h **** 
 951:../CM3_Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 952:../CM3_Core/core_cm3.h ****  */
 953:../CM3_Core/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 954:../CM3_Core/core_cm3.h **** {
 955:../CM3_Core/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
 956:../CM3_Core/core_cm3.h **** }
 957:../CM3_Core/core_cm3.h **** 
 958:../CM3_Core/core_cm3.h **** 
 959:../CM3_Core/core_cm3.h **** /** \brief  Clear Pending Interrupt
 960:../CM3_Core/core_cm3.h **** 
 961:../CM3_Core/core_cm3.h ****     This function clears the pending bit for the specified interrupt.
 962:../CM3_Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 963:../CM3_Core/core_cm3.h **** 
 964:../CM3_Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 965:../CM3_Core/core_cm3.h ****  */
 966:../CM3_Core/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 967:../CM3_Core/core_cm3.h **** {
 968:../CM3_Core/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 969:../CM3_Core/core_cm3.h **** }
 970:../CM3_Core/core_cm3.h **** 
 971:../CM3_Core/core_cm3.h **** 
 972:../CM3_Core/core_cm3.h **** /** \brief  Get Active Interrupt
 973:../CM3_Core/core_cm3.h **** 
 974:../CM3_Core/core_cm3.h ****     This function reads the active register in NVIC and returns the active bit.
 975:../CM3_Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get active
 976:../CM3_Core/core_cm3.h ****     \return             0  Interrupt status is not active
 977:../CM3_Core/core_cm3.h ****     \return             1  Interrupt status is active
 978:../CM3_Core/core_cm3.h ****  */
 979:../CM3_Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
 980:../CM3_Core/core_cm3.h **** {
 981:../CM3_Core/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
 982:../CM3_Core/core_cm3.h **** }
 983:../CM3_Core/core_cm3.h **** 
 984:../CM3_Core/core_cm3.h **** 
 985:../CM3_Core/core_cm3.h **** /** \brief  Set Interrupt Priority
 986:../CM3_Core/core_cm3.h **** 
 987:../CM3_Core/core_cm3.h ****     This function sets the priority for the specified interrupt. The interrupt
 988:../CM3_Core/core_cm3.h ****     number can be positive to specify an external (device specific)
 989:../CM3_Core/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
 990:../CM3_Core/core_cm3.h **** 
 991:../CM3_Core/core_cm3.h ****     Note: The priority cannot be set for every core interrupt.
 992:../CM3_Core/core_cm3.h **** 
 993:../CM3_Core/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set priority
 994:../CM3_Core/core_cm3.h ****     \param [in]  priority  Priority to set
 995:../CM3_Core/core_cm3.h ****  */
 996:../CM3_Core/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 997:../CM3_Core/core_cm3.h **** {
 998:../CM3_Core/core_cm3.h ****   if(IRQn < 0) {
 999:../CM3_Core/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1000:../CM3_Core/core_cm3.h ****   else {
1001:../CM3_Core/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 628              		.loc 2 1001 0
 629 026a 2022     		movs	r2, #32
 630              	.LBE26:
 631              	.LBE25:
 632              	.LBB28:
 633              	.LBB24:
 927:../CM3_Core/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 634              		.loc 2 927 0
 635 026c C3F88010 		str	r1, [r3, #128]
 636              	.LVL35:
 637              	.LBE24:
 638              	.LBE28:
 639              	.LBB29:
 640              	.LBB27:
 641              		.loc 2 1001 0
 642 0270 83F81E23 		strb	r2, [r3, #798]
 643              	.LVL36:
 644              	.L42:
 645              	.LBE27:
 646              	.LBE29:
 169:../Source_Files/lpc17xx_mcpwm.c ****     if (ModeCfg == MCPWM_DC)
 647              		.loc 1 169 0
 648 0274 012F     		cmp	r7, #1
 649 0276 08D1     		bne	.L51
 650              	.LVL37:
 651              	.LBB30:
 652              	.LBB31:
 516:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_DCMODE;
 653              		.loc 1 516 0
 654 0278 4FF00040 		mov	r0, #-2147483648
 522:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_INVBDC;
 655              		.loc 1 522 0
 656 027c 4FF00053 		mov	r3, #536870912
 527:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCCP = outputPattern;
 657              		.loc 1 527 0
 658 0280 0521     		movs	r1, #5
 516:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_DCMODE;
 659              		.loc 1 516 0
 660 0282 6860     		str	r0, [r5, #4]
 522:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_INVBDC;
 661              		.loc 1 522 0
 662 0284 6B60     		str	r3, [r5, #4]
 527:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCCP = outputPattern;
 663              		.loc 1 527 0
 664 0286 2964     		str	r1, [r5, #64]
 665 0288 04E0     		b	.L52
 666              	.LVL38:
 667              	.L51:
 668              	.LBE31:
 669              	.LBE30:
 178:../Source_Files/lpc17xx_mcpwm.c ****     else if(ModeCfg == MCPWM_AC)
 670              		.loc 1 178 0
 671 028a 022F     		cmp	r7, #2
 672              	.LVL39:
 673              	.LBB32:
 674              	.LBB33:
 480:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_ACMODE;
 675              		.loc 1 480 0
 676 028c 04BF     		itt	eq
 677 028e 4FF08043 		moveq	r3, #1073741824
 678 0292 6B60     		streq	r3, [r5, #4]
 679              	.LVL40:
 680              	.L52:
 681              	.LBE33:
 682              	.LBE32:
 186:../Source_Files/lpc17xx_mcpwm.c ****     if (IntCfg == MCPWM_INT_ENABLE)
 683              		.loc 1 186 0
 684 0294 012E     		cmp	r6, #1
 685 0296 03D1     		bne	.L40
 686              	.LVL41:
 687              	.LBB34:
 688              	.LBB35:
 914:../CM3_Core/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 689              		.loc 2 914 0
 690 0298 0548     		ldr	r0, .L56+8
 691 029a 4FF08042 		mov	r2, #1073741824
 692 029e 0260     		str	r2, [r0, #0]
 693              	.LVL42:
 694              	.L40:
 695              	.LBE35:
 696              	.LBE34:
 191:../Source_Files/lpc17xx_mcpwm.c **** }
 697              		.loc 1 191 0
 698 02a0 10B0     		add	sp, sp, #64
 699 02a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 700              	.L57:
 701 02a6 00BF     		.align	2
 702              	.L56:
 703 02a8 00800B40 		.word	1074495488
 704 02ac 00000000 		.word	CapFlag
 705 02b0 00E100E0 		.word	-536813312
 706              		.cfi_endproc
 707              	.LFE56:
 709              		.align	1
 710              		.global	MCPWM_Config
 711              		.thumb
 712              		.thumb_func
 714              	MCPWM_Config:
 715              	.LFB55:
  52:../Source_Files/lpc17xx_mcpwm.c **** {
 716              		.loc 1 52 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720 02b4 10B5     		push	{r4, lr}
 721              	.LCFI5:
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 4, -8
 724              		.cfi_offset 14, -4
  54:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWM_Init(LPC_MCPWM);
 725              		.loc 1 54 0
 726 02b6 064C     		ldr	r4, .L59
 727 02b8 2046     		mov	r0, r4
 728 02ba FFF7FEFF 		bl	MCPWM_Init
 729              	.LVL43:
  56:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWM_Channel_Config(LPC_MCPWM, MCPWM_MR0, None, MCPWM_INT_DISABLE);
 730              		.loc 1 56 0
 731 02be 0223     		movs	r3, #2
 732 02c0 2046     		mov	r0, r4
 733 02c2 0121     		movs	r1, #1
 734 02c4 0322     		movs	r2, #3
 735 02c6 FFF7FEFF 		bl	MCPWM_Channel_Config
 736              	.LVL44:
 737              	.LBB38:
 738              	.LBB39:
 439:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCON_SET = regVal;
 739              		.loc 1 439 0
 740 02ca 0123     		movs	r3, #1
 741 02cc 6360     		str	r3, [r4, #4]
 742 02ce 10BD     		pop	{r4, pc}
 743              	.L60:
 744              		.align	2
 745              	.L59:
 746 02d0 00800B40 		.word	1074495488
 747              	.LBE39:
 748              	.LBE38:
 749              		.cfi_endproc
 750              	.LFE55:
 752              		.align	1
 753              		.global	MCPWM_ClearCapture
 754              		.thumb
 755              		.thumb_func
 757              	MCPWM_ClearCapture:
 758              	.LFB61:
 358:../Source_Files/lpc17xx_mcpwm.c **** {
 759              		.loc 1 358 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 0, uses_anonymous_args = 0
 763              		@ link register save eliminated.
 764              	.LVL45:
 359:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(captureChannel);
 765              		.loc 1 359 0
 766 02d4 0229     		cmp	r1, #2
 767 02d6 03D8     		bhi	.L63
 359:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(captureChannel);
 768              		.loc 1 359 0 is_stmt 0 discriminator 1
 769 02d8 0123     		movs	r3, #1
 770 02da 03FA01F1 		lsl	r1, r3, r1
 771              	.LVL46:
 772 02de 00E0     		b	.L62
 773              	.LVL47:
 774              	.L63:
 359:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(captureChannel);
 775              		.loc 1 359 0
 776 02e0 0021     		movs	r1, #0
 777              	.LVL48:
 778              	.L62:
 359:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCAP_CLR = MCPWM_CAPCLR_CAP(captureChannel);
 779              		.loc 1 359 0 discriminator 3
 780 02e2 4167     		str	r1, [r0, #116]
 781 02e4 7047     		bx	lr
 782              		.cfi_endproc
 783              	.LFE61:
 785              		.align	1
 786              		.global	MCPWM_GetCapture
 787              		.thumb
 788              		.thumb_func
 790              	MCPWM_GetCapture:
 791              	.LFB62:
 370:../Source_Files/lpc17xx_mcpwm.c **** {
 792              		.loc 1 370 0 is_stmt 1
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 0
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 796              		@ link register save eliminated.
 797              	.LVL49:
 371:../Source_Files/lpc17xx_mcpwm.c **** 	if (captureChannel == 0){
 798              		.loc 1 371 0
 799 02e6 09B9     		cbnz	r1, .L65
 372:../Source_Files/lpc17xx_mcpwm.c **** 		return (MCPWMx->MCCR0);
 800              		.loc 1 372 0
 801 02e8 406C     		ldr	r0, [r0, #68]
 802              	.LVL50:
 803 02ea 7047     		bx	lr
 804              	.LVL51:
 805              	.L65:
 373:../Source_Files/lpc17xx_mcpwm.c **** 	} else if (captureChannel == 1) {
 806              		.loc 1 373 0
 807 02ec 0129     		cmp	r1, #1
 808 02ee 01D1     		bne	.L67
 374:../Source_Files/lpc17xx_mcpwm.c **** 		return (MCPWMx->MCCR1);
 809              		.loc 1 374 0
 810 02f0 806C     		ldr	r0, [r0, #72]
 811              	.LVL52:
 812 02f2 7047     		bx	lr
 813              	.LVL53:
 814              	.L67:
 375:../Source_Files/lpc17xx_mcpwm.c **** 	} else if (captureChannel == 2) {
 815              		.loc 1 375 0
 816 02f4 0229     		cmp	r1, #2
 376:../Source_Files/lpc17xx_mcpwm.c **** 		return (MCPWMx->MCCR2);
 817              		.loc 1 376 0
 818 02f6 0CBF     		ite	eq
 819 02f8 C06C     		ldreq	r0, [r0, #76]
 820              	.LVL54:
 378:../Source_Files/lpc17xx_mcpwm.c **** 	return (0);
 821              		.loc 1 378 0
 822 02fa 0020     		movne	r0, #0
 379:../Source_Files/lpc17xx_mcpwm.c **** }
 823              		.loc 1 379 0
 824 02fc 7047     		bx	lr
 825              		.cfi_endproc
 826              	.LFE62:
 828              		.align	1
 829              		.global	MCPWM_CountConfig
 830              		.thumb
 831              		.thumb_func
 833              	MCPWM_CountConfig:
 834              	.LFB63:
 397:../Source_Files/lpc17xx_mcpwm.c **** {
 835              		.loc 1 397 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              	.LVL55:
 398:../Source_Files/lpc17xx_mcpwm.c **** 	if ((channelNum >= 0) && (channelNum <= 2)) {
 840              		.loc 1 398 0
 841 02fe 0229     		cmp	r1, #2
 397:../Source_Files/lpc17xx_mcpwm.c **** {
 842              		.loc 1 397 0
 843 0300 30B5     		push	{r4, r5, lr}
 844              	.LCFI6:
 845              		.cfi_def_cfa_offset 12
 846              		.cfi_offset 4, -12
 847              		.cfi_offset 5, -8
 848              		.cfi_offset 14, -4
 398:../Source_Files/lpc17xx_mcpwm.c **** 	if ((channelNum >= 0) && (channelNum <= 2)) {
 849              		.loc 1 398 0
 850 0302 44D8     		bhi	.L69
 851 0304 01F11D05 		add	r5, r1, #29
 852 0308 0124     		movs	r4, #1
 399:../Source_Files/lpc17xx_mcpwm.c **** 		if (countMode /* == ENABLE */){
 853              		.loc 1 399 0
 854 030a 002A     		cmp	r2, #0
 855 030c 3CD0     		beq	.L71
 400:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_CNTR(channelNum);
 856              		.loc 1 400 0 discriminator 1
 857 030e 04FA05F5 		lsl	r5, r4, r5
 858 0312 0566     		str	r5, [r0, #96]
 401:../Source_Files/lpc17xx_mcpwm.c **** 			if (countConfig->countFalling /* == ENABLE */) {
 859              		.loc 1 401 0 discriminator 1
 860 0314 9D68     		ldr	r5, [r3, #8]
 861 0316 1A68     		ldr	r2, [r3, #0]
 862              	.LVL56:
 863 0318 6DB1     		cbz	r5, .L72
 402:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 864              		.loc 1 402 0
 865 031a 022A     		cmp	r2, #2
 866 031c 08D8     		bhi	.L79
 402:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 867              		.loc 1 402 0 is_stmt 0 discriminator 3
 868 031e 0325     		movs	r5, #3
 869 0320 05FB0212 		mla	r2, r5, r2, r1
 870 0324 02FA04F2 		lsl	r2, r2, r4
 871 0328 1219     		adds	r2, r2, r4
 872 032a 04FA02F4 		lsl	r4, r4, r2
 873 032e 00E0     		b	.L73
 874              	.L79:
 402:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 875              		.loc 1 402 0
 876 0330 0024     		movs	r4, #0
 877              	.L73:
 402:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 878              		.loc 1 402 0 discriminator 4
 879 0332 0466     		str	r4, [r0, #96]
 880 0334 0BE0     		b	.L74
 881              	.L72:
 404:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 882              		.loc 1 404 0 is_stmt 1
 883 0336 022A     		cmp	r2, #2
 884 0338 07D8     		bhi	.L80
 404:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 885              		.loc 1 404 0 is_stmt 0 discriminator 3
 886 033a 0325     		movs	r5, #3
 887 033c 05FB0212 		mla	r2, r5, r2, r1
 888 0340 5200     		lsls	r2, r2, #1
 889 0342 0132     		adds	r2, r2, #1
 890 0344 04FA02F4 		lsl	r4, r4, r2
 891 0348 00E0     		b	.L75
 892              	.L80:
 404:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 893              		.loc 1 404 0
 894 034a 2C46     		mov	r4, r5
 895              	.L75:
 404:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_FE(countConfig->counterChannel,channelNum);
 896              		.loc 1 404 0 discriminator 4
 897 034c 4466     		str	r4, [r0, #100]
 898              	.L74:
 406:../Source_Files/lpc17xx_mcpwm.c **** 			if (countConfig->countRising /* == ENABLE */) {
 899              		.loc 1 406 0 is_stmt 1
 900 034e 5A68     		ldr	r2, [r3, #4]
 901 0350 1B68     		ldr	r3, [r3, #0]
 902              	.LVL57:
 903 0352 62B1     		cbz	r2, .L76
 407:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 904              		.loc 1 407 0
 905 0354 022B     		cmp	r3, #2
 906 0356 07D8     		bhi	.L81
 407:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 907              		.loc 1 407 0 is_stmt 0 discriminator 3
 908 0358 0322     		movs	r2, #3
 909 035a 02FB0311 		mla	r1, r2, r3, r1
 910              	.LVL58:
 911 035e 0122     		movs	r2, #1
 912 0360 4B00     		lsls	r3, r1, #1
 913 0362 02FA03F3 		lsl	r3, r2, r3
 914 0366 00E0     		b	.L77
 915              	.LVL59:
 916              	.L81:
 407:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 917              		.loc 1 407 0
 918 0368 0023     		movs	r3, #0
 919              	.LVL60:
 920              	.L77:
 407:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_SET = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 921              		.loc 1 407 0 discriminator 4
 922 036a 0366     		str	r3, [r0, #96]
 923 036c 30BD     		pop	{r4, r5, pc}
 924              	.LVL61:
 925              	.L76:
 409:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 926              		.loc 1 409 0 is_stmt 1
 927 036e 022B     		cmp	r3, #2
 928 0370 07D8     		bhi	.L82
 409:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 929              		.loc 1 409 0 is_stmt 0 discriminator 3
 930 0372 0322     		movs	r2, #3
 931 0374 02FB0313 		mla	r3, r2, r3, r1
 932 0378 0121     		movs	r1, #1
 933              	.LVL62:
 934 037a 5A00     		lsls	r2, r3, #1
 935 037c 01FA02F1 		lsl	r1, r1, r2
 936 0380 00E0     		b	.L78
 937              	.LVL63:
 938              	.L82:
 409:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 939              		.loc 1 409 0
 940 0382 1146     		mov	r1, r2
 941              	.LVL64:
 942              	.L78:
 409:../Source_Files/lpc17xx_mcpwm.c **** 				MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_TCMCI_RE(countConfig->counterChannel,channelNum);
 943              		.loc 1 409 0 discriminator 4
 944 0384 4166     		str	r1, [r0, #100]
 945 0386 30BD     		pop	{r4, r5, pc}
 946              	.LVL65:
 947              	.L71:
 412:../Source_Files/lpc17xx_mcpwm.c **** 			MCPWMx->MCCNTCON_CLR = MCPWM_CNTCON_CNTR(channelNum);
 948              		.loc 1 412 0 is_stmt 1 discriminator 1
 949 0388 04FA05F4 		lsl	r4, r4, r5
 950 038c 4466     		str	r4, [r0, #100]
 951              	.L69:
 952 038e 30BD     		pop	{r4, r5, pc}
 953              		.cfi_endproc
 954              	.LFE63:
 956              		.align	1
 957              		.global	MCPWM_Start
 958              		.thumb
 959              		.thumb_func
 961              	MCPWM_Start:
 962              	.LFB64:
 435:../Source_Files/lpc17xx_mcpwm.c **** {
 963              		.loc 1 435 0
 964              		.cfi_startproc
 965              		@ args = 0, pretend = 0, frame = 0
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              		@ link register save eliminated.
 968              	.LVL66:
 437:../Source_Files/lpc17xx_mcpwm.c **** 	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
 969              		.loc 1 437 0
 970 0390 002A     		cmp	r2, #0
 971 0392 14BF     		ite	ne
 972 0394 4FF48072 		movne	r2, #256
 973 0398 0022     		moveq	r2, #0
 974              	.LVL67:
 975 039a 0029     		cmp	r1, #0
 976 039c 0CBF     		ite	eq
 977 039e 1146     		moveq	r1, r2
 978 03a0 42F00101 		orrne	r1, r2, #1
 979              	.LVL68:
 438:../Source_Files/lpc17xx_mcpwm.c **** 				| (channel2 ? MCPWM_CON_RUN(2) : 0);
 980              		.loc 1 438 0
 981 03a4 002B     		cmp	r3, #0
 982 03a6 14BF     		ite	ne
 983 03a8 4FF48033 		movne	r3, #65536
 984 03ac 0023     		moveq	r3, #0
 985              	.LVL69:
 437:../Source_Files/lpc17xx_mcpwm.c **** 	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
 986              		.loc 1 437 0
 987 03ae 41EA0302 		orr	r2, r1, r3
 988              	.LVL70:
 439:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCON_SET = regVal;
 989              		.loc 1 439 0
 990 03b2 4260     		str	r2, [r0, #4]
 991 03b4 7047     		bx	lr
 992              		.cfi_endproc
 993              	.LFE64:
 995              		.align	1
 996              		.global	MCPWM_Stop
 997              		.thumb
 998              		.thumb_func
 1000              	MCPWM_Stop:
 1001              	.LFB65:
 460:../Source_Files/lpc17xx_mcpwm.c **** {
 1002              		.loc 1 460 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006              		@ link register save eliminated.
 1007              	.LVL71:
 462:../Source_Files/lpc17xx_mcpwm.c **** 	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
 1008              		.loc 1 462 0
 1009 03b6 002A     		cmp	r2, #0
 1010 03b8 14BF     		ite	ne
 1011 03ba 4FF48072 		movne	r2, #256
 1012 03be 0022     		moveq	r2, #0
 1013              	.LVL72:
 1014 03c0 0029     		cmp	r1, #0
 1015 03c2 0CBF     		ite	eq
 1016 03c4 1146     		moveq	r1, r2
 1017 03c6 42F00101 		orrne	r1, r2, #1
 1018              	.LVL73:
 463:../Source_Files/lpc17xx_mcpwm.c **** 				| (channel2 ? MCPWM_CON_RUN(2) : 0);
 1019              		.loc 1 463 0
 1020 03ca 002B     		cmp	r3, #0
 1021 03cc 14BF     		ite	ne
 1022 03ce 4FF48033 		movne	r3, #65536
 1023 03d2 0023     		moveq	r3, #0
 1024              	.LVL74:
 462:../Source_Files/lpc17xx_mcpwm.c **** 	regVal = (channel0 ? MCPWM_CON_RUN(0) : 0) | (channel1 ? MCPWM_CON_RUN(1) : 0) \
 1025              		.loc 1 462 0
 1026 03d4 41EA0302 		orr	r2, r1, r3
 1027              	.LVL75:
 464:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCON_CLR = regVal;
 1028              		.loc 1 464 0
 1029 03d8 8260     		str	r2, [r0, #8]
 1030 03da 7047     		bx	lr
 1031              		.cfi_endproc
 1032              	.LFE65:
 1034              		.align	1
 1035              		.global	MCPWM_ACMode
 1036              		.thumb
 1037              		.thumb_func
 1039              	MCPWM_ACMode:
 1040              	.LFB66:
 478:../Source_Files/lpc17xx_mcpwm.c **** {
 1041              		.loc 1 478 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 0
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045              		@ link register save eliminated.
 1046              	.LVL76:
 1047 03dc 4FF08043 		mov	r3, #1073741824
 479:../Source_Files/lpc17xx_mcpwm.c **** 	if (acMode){
 1048              		.loc 1 479 0
 1049 03e0 09B1     		cbz	r1, .L94
 480:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_ACMODE;
 1050              		.loc 1 480 0
 1051 03e2 4360     		str	r3, [r0, #4]
 1052 03e4 7047     		bx	lr
 1053              	.L94:
 482:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_CLR = MCPWM_CON_ACMODE;
 1054              		.loc 1 482 0
 1055 03e6 8360     		str	r3, [r0, #8]
 1056 03e8 7047     		bx	lr
 1057              		.cfi_endproc
 1058              	.LFE66:
 1060              		.align	1
 1061              		.global	MCPWM_DCMode
 1062              		.thumb
 1063              		.thumb_func
 1065              	MCPWM_DCMode:
 1066              	.LFB67:
 514:../Source_Files/lpc17xx_mcpwm.c **** {
 1067              		.loc 1 514 0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 0
 1070              		@ frame_needed = 0, uses_anonymous_args = 0
 1071              	.LVL77:
 1072 03ea 10B5     		push	{r4, lr}
 1073              	.LCFI7:
 1074              		.cfi_def_cfa_offset 8
 1075              		.cfi_offset 4, -8
 1076              		.cfi_offset 14, -4
 1077 03ec 4FF00044 		mov	r4, #-2147483648
 515:../Source_Files/lpc17xx_mcpwm.c **** 	if (dcMode){
 1078              		.loc 1 515 0
 1079 03f0 09B1     		cbz	r1, .L97
 516:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_DCMODE;
 1080              		.loc 1 516 0
 1081 03f2 4460     		str	r4, [r0, #4]
 1082 03f4 00E0     		b	.L98
 1083              	.L97:
 518:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_CLR = MCPWM_CON_DCMODE;
 1084              		.loc 1 518 0
 1085 03f6 8460     		str	r4, [r0, #8]
 1086              	.L98:
 1087 03f8 4FF00051 		mov	r1, #536870912
 1088              	.LVL78:
 521:../Source_Files/lpc17xx_mcpwm.c **** 	if (outputInvered) {
 1089              		.loc 1 521 0
 1090 03fc 0AB1     		cbz	r2, .L99
 522:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_SET = MCPWM_CON_INVBDC;
 1091              		.loc 1 522 0
 1092 03fe 4160     		str	r1, [r0, #4]
 1093 0400 00E0     		b	.L100
 1094              	.L99:
 524:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCCON_CLR = MCPWM_CON_INVBDC;
 1095              		.loc 1 524 0
 1096 0402 8160     		str	r1, [r0, #8]
 1097              	.L100:
 527:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCCCP = outputPattern;
 1098              		.loc 1 527 0
 1099 0404 0364     		str	r3, [r0, #64]
 1100 0406 10BD     		pop	{r4, pc}
 1101              		.cfi_endproc
 1102              	.LFE67:
 1104              		.align	1
 1105              		.global	MCPWM_IntConfig
 1106              		.thumb
 1107              		.thumb_func
 1109              	MCPWM_IntConfig:
 1110              	.LFB68:
 554:../Source_Files/lpc17xx_mcpwm.c **** {
 1111              		.loc 1 554 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 0
 1114              		@ frame_needed = 0, uses_anonymous_args = 0
 1115              		@ link register save eliminated.
 1116              	.LVL79:
 555:../Source_Files/lpc17xx_mcpwm.c **** 	if (NewState) {
 1117              		.loc 1 555 0
 1118 0408 0AB1     		cbz	r2, .L102
 1119              		.loc 1 556 0
 1120 040a 4165     		str	r1, [r0, #84]
 1121 040c 7047     		bx	lr
 1122              	.L102:
 557:../Source_Files/lpc17xx_mcpwm.c **** 	} else {
 558:../Source_Files/lpc17xx_mcpwm.c **** 		MCPWMx->MCINTEN_CLR = ulIntType;
 1123              		.loc 1 558 0
 1124 040e 8165     		str	r1, [r0, #88]
 1125 0410 7047     		bx	lr
 1126              		.cfi_endproc
 1127              	.LFE68:
 1129              		.align	1
 1130              		.global	MCPWM_IntSet
 1131              		.thumb
 1132              		.thumb_func
 1134              	MCPWM_IntSet:
 1135              	.LFB69:
 559:../Source_Files/lpc17xx_mcpwm.c **** 	}
 560:../Source_Files/lpc17xx_mcpwm.c **** }
 561:../Source_Files/lpc17xx_mcpwm.c **** 
 562:../Source_Files/lpc17xx_mcpwm.c **** 
 563:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 564:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Sets/Forces the specified interrupt for MCPWM peripheral
 565:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected
 566:../Source_Files/lpc17xx_mcpwm.c ****  * 							Should be LPC_MCPWM
 567:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	ulIntType	Interrupt type, should be:
 568:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM0: Limit interrupt for channel (0)
 569:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT0: Match interrupt for channel (0)
 570:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP0: Capture interrupt for channel (0)
 571:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM1: Limit interrupt for channel (1)
 572:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT1: Match interrupt for channel (1)
 573:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP1: Capture interrupt for channel (1)
 574:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM2: Limit interrupt for channel (2)
 575:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT2: Match interrupt for channel (2)
 576:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP2: Capture interrupt for channel (2)
 577:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 578:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 579:../Source_Files/lpc17xx_mcpwm.c ****  * Note: all these ulIntType values above can be ORed together for using as input parameter.
 580:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 581:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_IntSet(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
 582:../Source_Files/lpc17xx_mcpwm.c **** {
 1136              		.loc 1 582 0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 0
 1139              		@ frame_needed = 0, uses_anonymous_args = 0
 1140              		@ link register save eliminated.
 1141              	.LVL80:
 583:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCINTFLAG_SET = ulIntType;
 1142              		.loc 1 583 0
 1143 0412 C166     		str	r1, [r0, #108]
 1144 0414 7047     		bx	lr
 1145              		.cfi_endproc
 1146              	.LFE69:
 1148              		.align	1
 1149              		.global	MCPWM_IntClear
 1150              		.thumb
 1151              		.thumb_func
 1153              	MCPWM_IntClear:
 1154              	.LFB70:
 584:../Source_Files/lpc17xx_mcpwm.c **** }
 585:../Source_Files/lpc17xx_mcpwm.c **** 
 586:../Source_Files/lpc17xx_mcpwm.c **** 
 587:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 588:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Clear the specified interrupt pending for MCPWM peripheral
 589:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected,
 590:../Source_Files/lpc17xx_mcpwm.c ****  * 							should be: LPC_MCPWM
 591:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	ulIntType	Interrupt type, should be:
 592:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM0: Limit interrupt for channel (0)
 593:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT0: Match interrupt for channel (0)
 594:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP0: Capture interrupt for channel (0)
 595:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM1: Limit interrupt for channel (1)
 596:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT1: Match interrupt for channel (1)
 597:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP1: Capture interrupt for channel (1)
 598:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM2: Limit interrupt for channel (2)
 599:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT2: Match interrupt for channel (2)
 600:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP2: Capture interrupt for channel (2)
 601:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 602:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 603:../Source_Files/lpc17xx_mcpwm.c ****  * Note: all these ulIntType values above can be ORed together for using as input parameter.
 604:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 605:../Source_Files/lpc17xx_mcpwm.c **** void MCPWM_IntClear(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
 606:../Source_Files/lpc17xx_mcpwm.c **** {
 1155              		.loc 1 606 0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
 1159              		@ link register save eliminated.
 1160              	.LVL81:
 607:../Source_Files/lpc17xx_mcpwm.c **** 	MCPWMx->MCINTFLAG_CLR = ulIntType;
 1161              		.loc 1 607 0
 1162 0416 0167     		str	r1, [r0, #112]
 1163 0418 7047     		bx	lr
 1164              		.cfi_endproc
 1165              	.LFE70:
 1167              		.align	1
 1168              		.global	MCPWM_GetIntStatus
 1169              		.thumb
 1170              		.thumb_func
 1172              	MCPWM_GetIntStatus:
 1173              	.LFB71:
 608:../Source_Files/lpc17xx_mcpwm.c **** }
 609:../Source_Files/lpc17xx_mcpwm.c **** 
 610:../Source_Files/lpc17xx_mcpwm.c **** 
 611:../Source_Files/lpc17xx_mcpwm.c **** /*********************************************************************//**
 612:../Source_Files/lpc17xx_mcpwm.c ****  * @brief		Check whether if the specified interrupt in MCPWM is set or not
 613:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	MCPWMx 		Motor Control PWM peripheral selected,
 614:../Source_Files/lpc17xx_mcpwm.c ****  * 							should be: LPC_MCPWM
 615:../Source_Files/lpc17xx_mcpwm.c ****  * @param[in]	ulIntType	Interrupt type, should be:
 616:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM0: Limit interrupt for channel (0)
 617:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT0: Match interrupt for channel (0)
 618:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP0: Capture interrupt for channel (0)
 619:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM1: Limit interrupt for channel (1)
 620:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT1: Match interrupt for channel (1)
 621:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP1: Capture interrupt for channel (1)
 622:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_LIM2: Limit interrupt for channel (2)
 623:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_MAT2: Match interrupt for channel (2)
 624:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_CAP2: Capture interrupt for channel (2)
 625:../Source_Files/lpc17xx_mcpwm.c ****  * 							- MCPWM_INTFLAG_ABORT: Fast abort interrupt
 626:../Source_Files/lpc17xx_mcpwm.c ****  * @return		None
 627:../Source_Files/lpc17xx_mcpwm.c ****  **********************************************************************/
 628:../Source_Files/lpc17xx_mcpwm.c **** FlagStatus MCPWM_GetIntStatus(LPC_MCPWM_TypeDef *MCPWMx, uint32_t ulIntType)
 629:../Source_Files/lpc17xx_mcpwm.c **** {
 1174              		.loc 1 629 0
 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 0
 1177              		@ frame_needed = 0, uses_anonymous_args = 0
 1178              		@ link register save eliminated.
 1179              	.LVL82:
 630:../Source_Files/lpc17xx_mcpwm.c **** 	return ((MCPWMx->MCINTFLAG & ulIntType) ? SET : RESET);
 1180              		.loc 1 630 0
 1181 041a 836E     		ldr	r3, [r0, #104]
 1182 041c 1942     		tst	r1, r3
 631:../Source_Files/lpc17xx_mcpwm.c **** }
 1183              		.loc 1 631 0
 1184 041e 0CBF     		ite	eq
 1185 0420 0020     		moveq	r0, #0
 1186 0422 0120     		movne	r0, #1
 1187              	.LVL83:
 1188 0424 7047     		bx	lr
 1189              		.cfi_endproc
 1190              	.LFE71:
 1192              		.comm	Rx_Buf1,64,1
 1193              		.comm	Tx_Buf1,64,1
 1194              		.comm	TxIntStat,1,1
 1195              		.comm	rb,528,4
 1196              		.comm	EscFlag,2,2
 1197              	.Letext0:
 1198              		.file 3 "../CM3_Core/LPC17xx.h"
 1199              		.file 4 "c:\\program files\\gnu tools arm embedded\\4.7 2013q2\\bin\\../lib/gcc/arm-none-eabi/4.7.
 1200              		.file 5 "../Header_Files/lpc_types.h"
 1201              		.file 6 "../Header_Files/lpc17xx_pinsel.h"
 1202              		.file 7 "../Header_Files/lpc17xx_uart.h"
 1203              		.file 8 "../Header_Files/lpc17xx_mcpwm.h"
 1204              		.file 9 "../Header_Files/lpc17xx_ssp.h"
 1205              		.file 10 "../Header_Files/lpc_system_init.h"
 1206              		.file 11 "../Header_Files/lpc17xx_clkpwr.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lpc17xx_mcpwm.c
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:18     .text:00000000 $t
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:23     .text:00000000 MCPWM_Init
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:64     .text:0000001c MCPWM_ConfigChannel
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:213    .text:000000c6 MCPWM_WriteToShadow
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:272    .text:000000ee MCPWM_ConfigCapture
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:428    .text:000001a6 MCPWM_Channel_Config
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:480    .text:000001d6 $d
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:486    .text:000001dc $t
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:703    .text:000002a8 $d
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:709    .text:000002b4 $t
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:714    .text:000002b4 MCPWM_Config
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:746    .text:000002d0 $d
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:752    .text:000002d4 $t
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:757    .text:000002d4 MCPWM_ClearCapture
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:790    .text:000002e6 MCPWM_GetCapture
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:833    .text:000002fe MCPWM_CountConfig
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:961    .text:00000390 MCPWM_Start
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:1000   .text:000003b6 MCPWM_Stop
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:1039   .text:000003dc MCPWM_ACMode
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:1065   .text:000003ea MCPWM_DCMode
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:1109   .text:00000408 MCPWM_IntConfig
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:1134   .text:00000412 MCPWM_IntSet
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:1153   .text:00000416 MCPWM_IntClear
C:\Users\Edu_win7\AppData\Local\Temp\ccgTErGh.s:1172   .text:0000041a MCPWM_GetIntStatus
                            *COM*:00000040 Rx_Buf1
                            *COM*:00000040 Tx_Buf1
                            *COM*:00000001 TxIntStat
                            *COM*:00000210 rb
                            *COM*:00000002 EscFlag
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.549b84bf9d8399e395ff8216fcbb3d69
                           .group:00000000 wm4.LPC17xx.h.27.964facdaadd4aa3f18ac78c8a78f0013
                           .group:00000000 wm4.core_cm3.h.32.3cac756d6e704b813781f82afd94fa5f
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.6beb15babd14c076008ec0890c26e21c
                           .group:00000000 wm4.core_cm3.h.83.1a3cb9afc687cf157efeddb3d5f3109e
                           .group:00000000 wm4.LPC17xx.h.953.82b7a9ed60bb594048bc8738cf1d3489
                           .group:00000000 wm4.lpc_types.h.32.72d58ce80fabd1a5430c6ec0500a090b
                           .group:00000000 wm4.lpc17xx_pinsel.h.30.767cda9b27a5c688cd97e5947d664047
                           .group:00000000 wm4.lpc17xx_clkpwr.h.30.8537d92ff6965961e80fda89ac5019f2
                           .group:00000000 wm4.lpc17xx_systick.h.30.9f34c15ae315a203fed1d933040ad7b9
                           .group:00000000 wm4.lpc17xx_gpio.h.30.0b884ee110dd20865784f12e1569ecf1
                           .group:00000000 wm4.lpc17xx_wdt.h.34.a2dcafab9849854019efb51f717a8129
                           .group:00000000 wm4.stdarg.h.31.b70f21342353634f7b44d85f85f13832
                           .group:00000000 wm4.lpc17xx_uart.h.58.dbba6e724b29a6214e9cafbaf3ee8a9e
                           .group:00000000 wm4.lpc17xx_ssp.h.48.cd045d667ab7b89d5d550d38997df61b
                           .group:00000000 wm4.lpc_ssp_glcd.h.29.0f086fd3ba564c80425f085247dfad00
                           .group:00000000 wm4.lpc17xx_mcpwm.h.30.8d071f1d2755b2451c426e2e14e1448a

UNDEFINED SYMBOLS
CLKPWR_ConfigPPWR
PINSEL_ConfigPin
CapFlag
