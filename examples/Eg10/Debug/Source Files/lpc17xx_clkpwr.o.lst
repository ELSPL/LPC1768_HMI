   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"lpc17xx_clkpwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	1
  19              		.global	CLKPWR_SetPCLKDiv
  20              		.thumb
  21              		.thumb_func
  23              	CLKPWR_SetPCLKDiv:
  24              	.LFB55:
  25              		.file 1 "../Source Files/lpc17xx_clkpwr.c"
   1:../Source Files/lpc17xx_clkpwr.c **** /**********************************************************************
   2:../Source Files/lpc17xx_clkpwr.c **** * $Id$		lpc17xx_clkpwr.c
   3:../Source Files/lpc17xx_clkpwr.c **** *//**
   4:../Source Files/lpc17xx_clkpwr.c **** * @file		lpc17xx_clkpwr.c
   5:../Source Files/lpc17xx_clkpwr.c **** * @brief	Contains all functions support for Clock and Power Control
   6:../Source Files/lpc17xx_clkpwr.c **** * 			firmware library on LPC17xx
   7:../Source Files/lpc17xx_clkpwr.c **** * @version	1.0
   8:../Source Files/lpc17xx_clkpwr.c **** * @date		24. July. 2013
   9:../Source Files/lpc17xx_clkpwr.c **** * @author	Dwijay.Edutech Learning Solutions
  10:../Source Files/lpc17xx_clkpwr.c **** ***********************************************************************
  11:../Source Files/lpc17xx_clkpwr.c **** * Software that is described herein is for illustrative purposes only
  12:../Source Files/lpc17xx_clkpwr.c **** * which provides customers with programming information regarding the
  13:../Source Files/lpc17xx_clkpwr.c **** * products. This software is supplied "AS IS" without any warranties.
  14:../Source Files/lpc17xx_clkpwr.c **** * NXP Semiconductors assumes no responsibility or liability for the
  15:../Source Files/lpc17xx_clkpwr.c **** * use of the software, conveys no license or title under any patent,
  16:../Source Files/lpc17xx_clkpwr.c **** * copyright, or mask work right to the product. NXP Semiconductors
  17:../Source Files/lpc17xx_clkpwr.c **** * reserves the right to make changes in the software without
  18:../Source Files/lpc17xx_clkpwr.c **** * notification. NXP Semiconductors also make no representation or
  19:../Source Files/lpc17xx_clkpwr.c **** * warranty that such application will be suitable for the specified
  20:../Source Files/lpc17xx_clkpwr.c **** * use without further testing or modification.
  21:../Source Files/lpc17xx_clkpwr.c **** **********************************************************************/
  22:../Source Files/lpc17xx_clkpwr.c **** 
  23:../Source Files/lpc17xx_clkpwr.c **** /* Peripheral group ----------------------------------------------------------- */
  24:../Source Files/lpc17xx_clkpwr.c **** /** @addtogroup CLKPWR
  25:../Source Files/lpc17xx_clkpwr.c ****  * @{
  26:../Source Files/lpc17xx_clkpwr.c ****  */
  27:../Source Files/lpc17xx_clkpwr.c **** 
  28:../Source Files/lpc17xx_clkpwr.c **** /* Includes ------------------------------------------------------------------- */
  29:../Source Files/lpc17xx_clkpwr.c **** #include "lpc17xx_clkpwr.h"
  30:../Source Files/lpc17xx_clkpwr.c **** 
  31:../Source Files/lpc17xx_clkpwr.c **** 
  32:../Source Files/lpc17xx_clkpwr.c **** /* Public Functions ----------------------------------------------------------- */
  33:../Source Files/lpc17xx_clkpwr.c **** /** @addtogroup CLKPWR_Public_Functions
  34:../Source Files/lpc17xx_clkpwr.c ****  * @{
  35:../Source Files/lpc17xx_clkpwr.c ****  */
  36:../Source Files/lpc17xx_clkpwr.c **** 
  37:../Source Files/lpc17xx_clkpwr.c **** /*********************************************************************//**
  38:../Source Files/lpc17xx_clkpwr.c ****  * @brief 		Set value of each Peripheral Clock Selection
  39:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	ClkType	Peripheral Clock Selection of each type,
  40:../Source Files/lpc17xx_clkpwr.c ****  * 				should be one of the following:
  41:../Source Files/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_WDT   		: WDT
  42:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER0   	: Timer 0
  43:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER1   	: Timer 1
  44:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART0   	: UART 0
  45:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART1  	: UART 1
  46:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PWM1   	: PWM 1
  47:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C0   	: I2C 0
  48:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SPI   		: SPI
  49:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP1   	: SSP 1
  50:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_DAC   		: DAC
  51:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ADC   		: ADC
  52:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN1  		: CAN 1
  53:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN2  		: CAN 2
  54:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ACF   		: ACF
  55:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_QEI 		: QEI
  56:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PCB   		: PCB
  57:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C1   	: I2C 1
  58:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP0   	: SSP 0
  59:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER2   	: Timer 2
  60:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER3   	: Timer 3
  61:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART2   	: UART 2
  62:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART3   	: UART 3
  63:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C2   	: I2C 2
  64:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2S   		: I2S
  65:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_RIT   		: RIT
  66:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SYSCON   	: SYSCON
  67:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_MC 		: MC
  68:../Source Files/lpc17xx_clkpwr.c **** 
  69:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	DivVal	Value of divider, should be:
  70:../Source Files/lpc17xx_clkpwr.c ****  * 				- CLKPWR_PCLKSEL_CCLK_DIV_4 : PCLK_peripheral = CCLK/4
  71:../Source Files/lpc17xx_clkpwr.c ****  * 				- CLKPWR_PCLKSEL_CCLK_DIV_1 : PCLK_peripheral = CCLK/1
  72:../Source Files/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
  73:../Source Files/lpc17xx_clkpwr.c ****  *
  74:../Source Files/lpc17xx_clkpwr.c ****  * @return none
  75:../Source Files/lpc17xx_clkpwr.c ****  **********************************************************************/
  76:../Source Files/lpc17xx_clkpwr.c **** void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
  77:../Source Files/lpc17xx_clkpwr.c **** {
  26              		.loc 1 77 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  78:../Source Files/lpc17xx_clkpwr.c **** 	uint32_t bitpos;
  79:../Source Files/lpc17xx_clkpwr.c **** 
  80:../Source Files/lpc17xx_clkpwr.c **** 	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
  31              		.loc 1 80 0
  32 0000 1F28     		cmp	r0, #31
  77:../Source Files/lpc17xx_clkpwr.c **** {
  33              		.loc 1 77 0
  34 0002 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0004 124B     		ldr	r3, .L5
  40 0006 4FF00302 		mov	r2, #3
  41              		.loc 1 80 0
  42 000a 10D9     		bls	.L2
  43              	.LVL1:
  44              		.loc 1 80 0 is_stmt 0 discriminator 2
  45 000c 2038     		subs	r0, r0, #32
  46              	.LVL2:
  81:../Source Files/lpc17xx_clkpwr.c **** 
  82:../Source Files/lpc17xx_clkpwr.c **** 	/* PCLKSEL0 selected */
  83:../Source Files/lpc17xx_clkpwr.c **** 	if (ClkType < 32)
  84:../Source Files/lpc17xx_clkpwr.c **** 	{
  85:../Source Files/lpc17xx_clkpwr.c **** 		/* Clear two bit at bit position */
  86:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
  87:../Source Files/lpc17xx_clkpwr.c **** 
  88:../Source Files/lpc17xx_clkpwr.c **** 		/* Set two selected bit */
  89:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  90:../Source Files/lpc17xx_clkpwr.c **** 	}
  91:../Source Files/lpc17xx_clkpwr.c **** 	/* PCLKSEL1 selected */
  92:../Source Files/lpc17xx_clkpwr.c **** 	else
  93:../Source Files/lpc17xx_clkpwr.c **** 	{
  94:../Source Files/lpc17xx_clkpwr.c **** 		/* Clear two bit at bit position */
  95:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
  47              		.loc 1 95 0 is_stmt 1 discriminator 2
  48 000e 02FA00F2 		lsl	r2, r2, r0
  96:../Source Files/lpc17xx_clkpwr.c **** 
  97:../Source Files/lpc17xx_clkpwr.c **** 		/* Set two selected bit */
  98:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  49              		.loc 1 98 0 discriminator 2
  50 0012 01FA00F0 		lsl	r0, r1, r0
  51              	.LVL3:
  95:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
  52              		.loc 1 95 0 discriminator 2
  53 0016 D3F8AC41 		ldr	r4, [r3, #428]
  54 001a 24EA0202 		bic	r2, r4, r2
  55 001e C3F8AC21 		str	r2, [r3, #428]
  56              		.loc 1 98 0 discriminator 2
  57 0022 D3F8AC21 		ldr	r2, [r3, #428]
  58 0026 1043     		orrs	r0, r0, r2
  59 0028 C3F8AC01 		str	r0, [r3, #428]
  60 002c 10BD     		pop	{r4, pc}
  61              	.LVL4:
  62              	.L2:
  86:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
  63              		.loc 1 86 0
  64 002e 02FA00F2 		lsl	r2, r2, r0
  89:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  65              		.loc 1 89 0
  66 0032 01FA00F1 		lsl	r1, r1, r0
  67              	.LVL5:
  86:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
  68              		.loc 1 86 0
  69 0036 D3F8A841 		ldr	r4, [r3, #424]
  70 003a 24EA0202 		bic	r2, r4, r2
  71 003e C3F8A821 		str	r2, [r3, #424]
  89:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
  72              		.loc 1 89 0
  73 0042 D3F8A821 		ldr	r2, [r3, #424]
  74 0046 1143     		orrs	r1, r1, r2
  75 0048 C3F8A811 		str	r1, [r3, #424]
  76 004c 10BD     		pop	{r4, pc}
  77              	.L6:
  78 004e 00BF     		.align	2
  79              	.L5:
  80 0050 00C00F40 		.word	1074774016
  81              		.cfi_endproc
  82              	.LFE55:
  84              		.align	1
  85              		.global	CLKPWR_GetPCLKSEL
  86              		.thumb
  87              		.thumb_func
  89              	CLKPWR_GetPCLKSEL:
  90              	.LFB56:
  99:../Source Files/lpc17xx_clkpwr.c **** 	}
 100:../Source Files/lpc17xx_clkpwr.c **** }
 101:../Source Files/lpc17xx_clkpwr.c **** 
 102:../Source Files/lpc17xx_clkpwr.c **** 
 103:../Source Files/lpc17xx_clkpwr.c **** /*********************************************************************//**
 104:../Source Files/lpc17xx_clkpwr.c ****  * @brief		Get current value of each Peripheral Clock Selection
 105:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	ClkType	Peripheral Clock Selection of each type,
 106:../Source Files/lpc17xx_clkpwr.c ****  * 				should be one of the following:
 107:../Source Files/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_WDT   		: WDT
 108:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER0   	: Timer 0
 109:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER1   	: Timer 1
 110:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART0   	: UART 0
 111:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART1  	: UART 1
 112:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PWM1   	: PWM 1
 113:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C0   	: I2C 0
 114:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SPI   		: SPI
 115:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP1   	: SSP 1
 116:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_DAC   		: DAC
 117:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ADC   		: ADC
 118:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN1  		: CAN 1
 119:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN2  		: CAN 2
 120:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ACF   		: ACF
 121:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_QEI 		: QEI
 122:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PCB   		: PCB
 123:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C1   	: I2C 1
 124:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP0   	: SSP 0
 125:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER2   	: Timer 2
 126:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER3   	: Timer 3
 127:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART2   	: UART 2
 128:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART3   	: UART 3
 129:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C2   	: I2C 2
 130:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2S   		: I2S
 131:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_RIT   		: RIT
 132:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SYSCON   	: SYSCON
 133:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_MC 		: MC
 134:../Source Files/lpc17xx_clkpwr.c **** 
 135:../Source Files/lpc17xx_clkpwr.c ****  * @return		Value of Selected Peripheral Clock Selection
 136:../Source Files/lpc17xx_clkpwr.c ****  **********************************************************************/
 137:../Source Files/lpc17xx_clkpwr.c **** uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
 138:../Source Files/lpc17xx_clkpwr.c **** {
  91              		.loc 1 138 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96              	.LVL6:
 139:../Source Files/lpc17xx_clkpwr.c **** 	uint32_t bitpos, retval;
 140:../Source Files/lpc17xx_clkpwr.c **** 
 141:../Source Files/lpc17xx_clkpwr.c **** 	if (ClkType < 32)
  97              		.loc 1 141 0
  98 0054 1F28     		cmp	r0, #31
  99 0056 064B     		ldr	r3, .L10
 100 0058 02D8     		bhi	.L8
 101              	.LVL7:
 142:../Source Files/lpc17xx_clkpwr.c **** 	{
 143:../Source Files/lpc17xx_clkpwr.c **** 		bitpos = ClkType;
 144:../Source Files/lpc17xx_clkpwr.c **** 		retval = LPC_SC->PCLKSEL0;
 102              		.loc 1 144 0
 103 005a D3F8A811 		ldr	r1, [r3, #424]
 104              	.LVL8:
 105 005e 02E0     		b	.L9
 106              	.LVL9:
 107              	.L8:
 145:../Source Files/lpc17xx_clkpwr.c **** 	}
 146:../Source Files/lpc17xx_clkpwr.c **** 	else
 147:../Source Files/lpc17xx_clkpwr.c **** 	{
 148:../Source Files/lpc17xx_clkpwr.c **** 		bitpos = ClkType - 32;
 149:../Source Files/lpc17xx_clkpwr.c **** 		retval = LPC_SC->PCLKSEL1;
 108              		.loc 1 149 0
 109 0060 D3F8AC11 		ldr	r1, [r3, #428]
 148:../Source Files/lpc17xx_clkpwr.c **** 		bitpos = ClkType - 32;
 110              		.loc 1 148 0
 111 0064 2038     		subs	r0, r0, #32
 112              	.LVL10:
 113              	.L9:
 150:../Source Files/lpc17xx_clkpwr.c **** 	}
 151:../Source Files/lpc17xx_clkpwr.c **** 
 152:../Source Files/lpc17xx_clkpwr.c **** 	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
 114              		.loc 1 152 0
 115 0066 21FA00F0 		lsr	r0, r1, r0
 116              	.LVL11:
 153:../Source Files/lpc17xx_clkpwr.c **** 	return retval;
 154:../Source Files/lpc17xx_clkpwr.c **** }
 117              		.loc 1 154 0
 118 006a 00F00300 		and	r0, r0, #3
 119              	.LVL12:
 120 006e 7047     		bx	lr
 121              	.L11:
 122              		.align	2
 123              	.L10:
 124 0070 00C00F40 		.word	1074774016
 125              		.cfi_endproc
 126              	.LFE56:
 128              		.align	1
 129              		.global	CLKPWR_GetPCLK
 130              		.thumb
 131              		.thumb_func
 133              	CLKPWR_GetPCLK:
 134              	.LFB57:
 155:../Source Files/lpc17xx_clkpwr.c **** 
 156:../Source Files/lpc17xx_clkpwr.c **** 
 157:../Source Files/lpc17xx_clkpwr.c **** 
 158:../Source Files/lpc17xx_clkpwr.c **** /*********************************************************************//**
 159:../Source Files/lpc17xx_clkpwr.c ****  * @brief 		Get current value of each Peripheral Clock
 160:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	ClkType	Peripheral Clock Selection of each type,
 161:../Source Files/lpc17xx_clkpwr.c ****  * 				should be one of the following:
 162:../Source Files/lpc17xx_clkpwr.c ****  *				- CLKPWR_PCLKSEL_WDT   		: WDT
 163:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER0   	: Timer 0
 164:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER1   	: Timer 1
 165:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART0   	: UART 0
 166:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART1  	: UART 1
 167:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PWM1   	: PWM 1
 168:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C0   	: I2C 0
 169:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SPI   		: SPI
 170:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP1   	: SSP 1
 171:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_DAC   		: DAC
 172:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ADC   		: ADC
 173:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN1  		: CAN 1
 174:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_CAN2  		: CAN 2
 175:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_ACF   		: ACF
 176:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_QEI 		: QEI
 177:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_PCB   		: PCB
 178:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C1   	: I2C 1
 179:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SSP0   	: SSP 0
 180:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER2   	: Timer 2
 181:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_TIMER3   	: Timer 3
 182:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART2   	: UART 2
 183:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_UART3   	: UART 3
 184:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2C2   	: I2C 2
 185:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_I2S   		: I2S
 186:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_RIT   		: RIT
 187:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_SYSCON   	: SYSCON
 188:../Source Files/lpc17xx_clkpwr.c **** 				- CLKPWR_PCLKSEL_MC 		: MC
 189:../Source Files/lpc17xx_clkpwr.c **** 
 190:../Source Files/lpc17xx_clkpwr.c ****  * @return		Value of Selected Peripheral Clock
 191:../Source Files/lpc17xx_clkpwr.c ****  **********************************************************************/
 192:../Source Files/lpc17xx_clkpwr.c **** uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
 193:../Source Files/lpc17xx_clkpwr.c **** {
 135              		.loc 1 193 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              	.LVL13:
 194:../Source Files/lpc17xx_clkpwr.c **** 	uint32_t retval, div;
 195:../Source Files/lpc17xx_clkpwr.c **** 
 196:../Source Files/lpc17xx_clkpwr.c **** 	retval = SystemCoreClock;
 140              		.loc 1 196 0
 141 0074 064B     		ldr	r3, .L16
 193:../Source Files/lpc17xx_clkpwr.c **** {
 142              		.loc 1 193 0
 143 0076 10B5     		push	{r4, lr}
 144              	.LCFI1:
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 4, -8
 147              		.cfi_offset 14, -4
 148              		.loc 1 196 0
 149 0078 1C68     		ldr	r4, [r3, #0]
 150              	.LVL14:
 197:../Source Files/lpc17xx_clkpwr.c **** 	div = CLKPWR_GetPCLKSEL(ClkType);
 151              		.loc 1 197 0
 152 007a FFF7FEFF 		bl	CLKPWR_GetPCLKSEL
 153              	.LVL15:
 198:../Source Files/lpc17xx_clkpwr.c **** 
 199:../Source Files/lpc17xx_clkpwr.c **** 	switch (div)
 154              		.loc 1 199 0
 155 007e 18B1     		cbz	r0, .L14
 200:../Source Files/lpc17xx_clkpwr.c **** 	{
 201:../Source Files/lpc17xx_clkpwr.c **** 	case 0:
 202:../Source Files/lpc17xx_clkpwr.c **** 		div = 4;
 203:../Source Files/lpc17xx_clkpwr.c **** 		break;
 204:../Source Files/lpc17xx_clkpwr.c **** 
 205:../Source Files/lpc17xx_clkpwr.c **** 	case 1:
 206:../Source Files/lpc17xx_clkpwr.c **** 		div = 1;
 207:../Source Files/lpc17xx_clkpwr.c **** 		break;
 208:../Source Files/lpc17xx_clkpwr.c **** 
 209:../Source Files/lpc17xx_clkpwr.c **** 	case 2:
 210:../Source Files/lpc17xx_clkpwr.c **** 		div = 2;
 211:../Source Files/lpc17xx_clkpwr.c **** 		break;
 212:../Source Files/lpc17xx_clkpwr.c **** 
 213:../Source Files/lpc17xx_clkpwr.c **** 	case 3:
 214:../Source Files/lpc17xx_clkpwr.c **** 		div = 8;
 156              		.loc 1 214 0
 157 0080 0328     		cmp	r0, #3
 158 0082 08BF     		it	eq
 159 0084 0820     		moveq	r0, #8
 160              	.LVL16:
 161 0086 00E0     		b	.L13
 162              	.LVL17:
 163              	.L14:
 202:../Source Files/lpc17xx_clkpwr.c **** 		div = 4;
 164              		.loc 1 202 0
 165 0088 0420     		movs	r0, #4
 166              	.LVL18:
 167              	.L13:
 215:../Source Files/lpc17xx_clkpwr.c **** 		break;
 216:../Source Files/lpc17xx_clkpwr.c **** 	}
 217:../Source Files/lpc17xx_clkpwr.c **** 	retval /= div;
 218:../Source Files/lpc17xx_clkpwr.c **** 
 219:../Source Files/lpc17xx_clkpwr.c **** 	return retval;
 220:../Source Files/lpc17xx_clkpwr.c **** }
 168              		.loc 1 220 0
 169 008a B4FBF0F0 		udiv	r0, r4, r0
 170 008e 10BD     		pop	{r4, pc}
 171              	.L17:
 172              		.align	2
 173              	.L16:
 174 0090 00000000 		.word	SystemCoreClock
 175              		.cfi_endproc
 176              	.LFE57:
 178              		.align	1
 179              		.global	CLKPWR_ConfigPPWR
 180              		.thumb
 181              		.thumb_func
 183              	CLKPWR_ConfigPPWR:
 184              	.LFB58:
 221:../Source Files/lpc17xx_clkpwr.c **** 
 222:../Source Files/lpc17xx_clkpwr.c **** 
 223:../Source Files/lpc17xx_clkpwr.c **** 
 224:../Source Files/lpc17xx_clkpwr.c **** /*********************************************************************//**
 225:../Source Files/lpc17xx_clkpwr.c ****  * @brief 		Configure power supply for each peripheral according to NewState
 226:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	PPType	Type of peripheral used to enable power,
 227:../Source Files/lpc17xx_clkpwr.c ****  *     					should be one of the following:
 228:../Source Files/lpc17xx_clkpwr.c ****  *     			-  CLKPWR_PCONP_PCTIM0 		: Timer 0
 229:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCTIM1 		: Timer 1
 230:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART0  	: UART 0
 231:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART1   	: UART 1
 232:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCPWM1 		: PWM 1
 233:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2C0 		: I2C 0
 234:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCSPI   	: SPI
 235:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCRTC   	: RTC
 236:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCSSP1 		: SSP 1
 237:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCAD   		: ADC
 238:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCAN1   	: CAN 1
 239:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCAN2   	: CAN 2
 240:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCGPIO 		: GPIO
 241:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCRIT 		: RIT
 242:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCMC 		: MC
 243:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCQEI 		: QEI
 244:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2C1   	: I2C 1
 245:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCSSP0 		: SSP 0
 246:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCTIM2 		: Timer 2
 247:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCTIM3 		: Timer 3
 248:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART2  	: UART 2
 249:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUART3   	: UART 3
 250:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2C2 		: I2C 2
 251:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCI2S   	: I2S
 252:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCGPDMA   	: GPDMA
 253:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCENET 		: Ethernet
 254:../Source Files/lpc17xx_clkpwr.c **** 				-  CLKPWR_PCONP_PCUSB   	: USB
 255:../Source Files/lpc17xx_clkpwr.c ****  *
 256:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	NewState	New state of Peripheral Power, should be:
 257:../Source Files/lpc17xx_clkpwr.c ****  * 				- ENABLE	: Enable power for this peripheral
 258:../Source Files/lpc17xx_clkpwr.c ****  * 				- DISABLE	: Disable power for this peripheral
 259:../Source Files/lpc17xx_clkpwr.c ****  *
 260:../Source Files/lpc17xx_clkpwr.c ****  * @return none
 261:../Source Files/lpc17xx_clkpwr.c ****  **********************************************************************/
 262:../Source Files/lpc17xx_clkpwr.c **** void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
 263:../Source Files/lpc17xx_clkpwr.c **** {
 185              		.loc 1 263 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 0, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 190              	.LVL19:
 264:../Source Files/lpc17xx_clkpwr.c **** 	if (NewState == ENABLE)
 191              		.loc 1 264 0
 192 0094 0129     		cmp	r1, #1
 193 0096 08D1     		bne	.L19
 265:../Source Files/lpc17xx_clkpwr.c **** 	{
 266:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
 194              		.loc 1 266 0
 195 0098 094B     		ldr	r3, .L21
 196 009a 0A4A     		ldr	r2, .L21+4
 197 009c D3F8C410 		ldr	r1, [r3, #196]
 198              	.LVL20:
 199 00a0 0240     		ands	r2, r2, r0
 200 00a2 0A43     		orrs	r2, r2, r1
 201 00a4 C3F8C420 		str	r2, [r3, #196]
 202 00a8 7047     		bx	lr
 203              	.LVL21:
 204              	.L19:
 267:../Source Files/lpc17xx_clkpwr.c **** 	}
 268:../Source Files/lpc17xx_clkpwr.c **** 	else if (NewState == DISABLE)
 205              		.loc 1 268 0
 206 00aa 41B9     		cbnz	r1, .L18
 269:../Source Files/lpc17xx_clkpwr.c **** 	{
 270:../Source Files/lpc17xx_clkpwr.c **** 		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
 207              		.loc 1 270 0
 208 00ac 044A     		ldr	r2, .L21
 209 00ae 054B     		ldr	r3, .L21+4
 210 00b0 D2F8C410 		ldr	r1, [r2, #196]
 211              	.LVL22:
 212 00b4 0B40     		ands	r3, r3, r1
 213 00b6 23EA0003 		bic	r3, r3, r0
 214 00ba C2F8C430 		str	r3, [r2, #196]
 215              	.L18:
 216 00be 7047     		bx	lr
 217              	.L22:
 218              		.align	2
 219              	.L21:
 220 00c0 00C00F40 		.word	1074774016
 221 00c4 DEF7EFEF 		.word	-269486114
 222              		.cfi_endproc
 223              	.LFE58:
 225              		.align	1
 226              		.global	CLKPWR_Sleep
 227              		.thumb
 228              		.thumb_func
 230              	CLKPWR_Sleep:
 231              	.LFB59:
 271:../Source Files/lpc17xx_clkpwr.c **** 	}
 272:../Source Files/lpc17xx_clkpwr.c **** }
 273:../Source Files/lpc17xx_clkpwr.c **** 
 274:../Source Files/lpc17xx_clkpwr.c **** 
 275:../Source Files/lpc17xx_clkpwr.c **** /*********************************************************************//**
 276:../Source Files/lpc17xx_clkpwr.c ****  * @brief 		Enter Sleep mode with co-operated instruction by the Cortex-M3.
 277:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	None
 278:../Source Files/lpc17xx_clkpwr.c ****  * @return		None
 279:../Source Files/lpc17xx_clkpwr.c ****  **********************************************************************/
 280:../Source Files/lpc17xx_clkpwr.c **** void CLKPWR_Sleep(void)
 281:../Source Files/lpc17xx_clkpwr.c **** {
 232              		.loc 1 281 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              		@ link register save eliminated.
 282:../Source Files/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x00;
 237              		.loc 1 282 0
 238 00c8 024B     		ldr	r3, .L24
 239 00ca 0022     		movs	r2, #0
 240 00cc C3F8C020 		str	r2, [r3, #192]
 241              	.LBB10:
 242              	.LBB11:
 243              		.file 2 "../CM3 Core/core_cmInstr.h"
   1:../CM3 Core/core_cmInstr.h **** /**************************************************************************//**
   2:../CM3 Core/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../CM3 Core/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../CM3 Core/core_cmInstr.h ****  * @version  V2.01
   5:../CM3 Core/core_cmInstr.h ****  * @date     06. December 2010
   6:../CM3 Core/core_cmInstr.h ****  *
   7:../CM3 Core/core_cmInstr.h ****  * @note
   8:../CM3 Core/core_cmInstr.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:../CM3 Core/core_cmInstr.h ****  *
  10:../CM3 Core/core_cmInstr.h ****  * @par
  11:../CM3 Core/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../CM3 Core/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../CM3 Core/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../CM3 Core/core_cmInstr.h ****  *
  15:../CM3 Core/core_cmInstr.h ****  * @par
  16:../CM3 Core/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../CM3 Core/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../CM3 Core/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../CM3 Core/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../CM3 Core/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../CM3 Core/core_cmInstr.h ****  *
  22:../CM3 Core/core_cmInstr.h ****  ******************************************************************************/
  23:../CM3 Core/core_cmInstr.h **** 
  24:../CM3 Core/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H__
  25:../CM3 Core/core_cmInstr.h **** #define __CORE_CMINSTR_H__
  26:../CM3 Core/core_cmInstr.h **** 
  27:../CM3 Core/core_cmInstr.h **** 
  28:../CM3 Core/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../CM3 Core/core_cmInstr.h **** /** \ingroup  CMSIS
  30:../CM3 Core/core_cmInstr.h **** 	\addtogroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  31:../CM3 Core/core_cmInstr.h ****   Access to dedicated instructions
  32:../CM3 Core/core_cmInstr.h ****   @{
  33:../CM3 Core/core_cmInstr.h **** */
  34:../CM3 Core/core_cmInstr.h **** 
  35:../CM3 Core/core_cmInstr.h **** #if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
  36:../CM3 Core/core_cmInstr.h **** /* ARM armcc specific functions */
  37:../CM3 Core/core_cmInstr.h **** 
  38:../CM3 Core/core_cmInstr.h **** /** \brief  No Operation
  39:../CM3 Core/core_cmInstr.h **** 
  40:../CM3 Core/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  41:../CM3 Core/core_cmInstr.h ****  */
  42:../CM3 Core/core_cmInstr.h **** #define __NOP                             __nop
  43:../CM3 Core/core_cmInstr.h **** 
  44:../CM3 Core/core_cmInstr.h **** 
  45:../CM3 Core/core_cmInstr.h **** /** \brief  Wait For Interrupt
  46:../CM3 Core/core_cmInstr.h **** 
  47:../CM3 Core/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  48:../CM3 Core/core_cmInstr.h ****     until one of a number of events occurs.
  49:../CM3 Core/core_cmInstr.h ****  */
  50:../CM3 Core/core_cmInstr.h **** #define __WFI                             __wfi
  51:../CM3 Core/core_cmInstr.h **** 
  52:../CM3 Core/core_cmInstr.h **** 
  53:../CM3 Core/core_cmInstr.h **** /** \brief  Wait For Event
  54:../CM3 Core/core_cmInstr.h **** 
  55:../CM3 Core/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  56:../CM3 Core/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  57:../CM3 Core/core_cmInstr.h ****  */
  58:../CM3 Core/core_cmInstr.h **** #define __WFE                             __wfe
  59:../CM3 Core/core_cmInstr.h **** 
  60:../CM3 Core/core_cmInstr.h **** 
  61:../CM3 Core/core_cmInstr.h **** /** \brief  Send Event
  62:../CM3 Core/core_cmInstr.h **** 
  63:../CM3 Core/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  64:../CM3 Core/core_cmInstr.h ****  */
  65:../CM3 Core/core_cmInstr.h **** #define __SEV                             __sev
  66:../CM3 Core/core_cmInstr.h **** 
  67:../CM3 Core/core_cmInstr.h **** 
  68:../CM3 Core/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  69:../CM3 Core/core_cmInstr.h **** 
  70:../CM3 Core/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  71:../CM3 Core/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  72:../CM3 Core/core_cmInstr.h ****     memory, after the instruction has been completed.
  73:../CM3 Core/core_cmInstr.h ****  */
  74:../CM3 Core/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  75:../CM3 Core/core_cmInstr.h **** 
  76:../CM3 Core/core_cmInstr.h **** 
  77:../CM3 Core/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  78:../CM3 Core/core_cmInstr.h **** 
  79:../CM3 Core/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  80:../CM3 Core/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  81:../CM3 Core/core_cmInstr.h ****  */
  82:../CM3 Core/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  83:../CM3 Core/core_cmInstr.h **** 
  84:../CM3 Core/core_cmInstr.h **** 
  85:../CM3 Core/core_cmInstr.h **** /** \brief  Data Memory Barrier
  86:../CM3 Core/core_cmInstr.h **** 
  87:../CM3 Core/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  88:../CM3 Core/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  89:../CM3 Core/core_cmInstr.h ****  */
  90:../CM3 Core/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  91:../CM3 Core/core_cmInstr.h **** 
  92:../CM3 Core/core_cmInstr.h **** 
  93:../CM3 Core/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  94:../CM3 Core/core_cmInstr.h **** 
  95:../CM3 Core/core_cmInstr.h ****     This function reverses the byte order in integer value.
  96:../CM3 Core/core_cmInstr.h **** 
  97:../CM3 Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
  98:../CM3 Core/core_cmInstr.h ****     \return               Reversed value
  99:../CM3 Core/core_cmInstr.h ****  */
 100:../CM3 Core/core_cmInstr.h **** #define __REV                             __rev
 101:../CM3 Core/core_cmInstr.h **** 
 102:../CM3 Core/core_cmInstr.h **** 
 103:../CM3 Core/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 104:../CM3 Core/core_cmInstr.h **** 
 105:../CM3 Core/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 106:../CM3 Core/core_cmInstr.h **** 
 107:../CM3 Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 108:../CM3 Core/core_cmInstr.h ****     \return               Reversed value
 109:../CM3 Core/core_cmInstr.h ****  */
 110:../CM3 Core/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
 111:../CM3 Core/core_cmInstr.h **** extern uint32_t __REV16(uint32_t value);
 112:../CM3 Core/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400677)  */
 113:../CM3 Core/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 114:../CM3 Core/core_cmInstr.h **** {
 115:../CM3 Core/core_cmInstr.h ****   rev16 r0, r0
 116:../CM3 Core/core_cmInstr.h ****   bx lr
 117:../CM3 Core/core_cmInstr.h **** }
 118:../CM3 Core/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 119:../CM3 Core/core_cmInstr.h **** 
 120:../CM3 Core/core_cmInstr.h **** 
 121:../CM3 Core/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../CM3 Core/core_cmInstr.h **** 
 123:../CM3 Core/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../CM3 Core/core_cmInstr.h **** 
 125:../CM3 Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../CM3 Core/core_cmInstr.h ****     \return               Reversed value
 127:../CM3 Core/core_cmInstr.h ****  */
 128:../CM3 Core/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
 129:../CM3 Core/core_cmInstr.h **** extern int32_t __REVSH(int32_t value);
 130:../CM3 Core/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400677)  */
 131:../CM3 Core/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 132:../CM3 Core/core_cmInstr.h **** {
 133:../CM3 Core/core_cmInstr.h ****   revsh r0, r0
 134:../CM3 Core/core_cmInstr.h ****   bx lr
 135:../CM3 Core/core_cmInstr.h **** }
 136:../CM3 Core/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 137:../CM3 Core/core_cmInstr.h **** 
 138:../CM3 Core/core_cmInstr.h **** 
 139:../CM3 Core/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 140:../CM3 Core/core_cmInstr.h **** 
 141:../CM3 Core/core_cmInstr.h **** /** \brief  Reverse bit order of value
 142:../CM3 Core/core_cmInstr.h **** 
 143:../CM3 Core/core_cmInstr.h ****     This function reverses the bit order of the given value.
 144:../CM3 Core/core_cmInstr.h **** 
 145:../CM3 Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 146:../CM3 Core/core_cmInstr.h ****     \return               Reversed value
 147:../CM3 Core/core_cmInstr.h ****  */
 148:../CM3 Core/core_cmInstr.h **** #define __RBIT                            __rbit
 149:../CM3 Core/core_cmInstr.h **** 
 150:../CM3 Core/core_cmInstr.h **** 
 151:../CM3 Core/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 152:../CM3 Core/core_cmInstr.h **** 
 153:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 154:../CM3 Core/core_cmInstr.h **** 
 155:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 156:../CM3 Core/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 157:../CM3 Core/core_cmInstr.h ****  */
 158:../CM3 Core/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 159:../CM3 Core/core_cmInstr.h **** 
 160:../CM3 Core/core_cmInstr.h **** 
 161:../CM3 Core/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 162:../CM3 Core/core_cmInstr.h **** 
 163:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 164:../CM3 Core/core_cmInstr.h **** 
 165:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 166:../CM3 Core/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 167:../CM3 Core/core_cmInstr.h ****  */
 168:../CM3 Core/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 169:../CM3 Core/core_cmInstr.h **** 
 170:../CM3 Core/core_cmInstr.h **** 
 171:../CM3 Core/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 172:../CM3 Core/core_cmInstr.h **** 
 173:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 174:../CM3 Core/core_cmInstr.h **** 
 175:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 176:../CM3 Core/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 177:../CM3 Core/core_cmInstr.h ****  */
 178:../CM3 Core/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 179:../CM3 Core/core_cmInstr.h **** 
 180:../CM3 Core/core_cmInstr.h **** 
 181:../CM3 Core/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 182:../CM3 Core/core_cmInstr.h **** 
 183:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 184:../CM3 Core/core_cmInstr.h **** 
 185:../CM3 Core/core_cmInstr.h ****     \param [in]  value  Value to store
 186:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 187:../CM3 Core/core_cmInstr.h ****     \return          0  Function succeeded
 188:../CM3 Core/core_cmInstr.h ****     \return          1  Function failed
 189:../CM3 Core/core_cmInstr.h ****  */
 190:../CM3 Core/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 191:../CM3 Core/core_cmInstr.h **** 
 192:../CM3 Core/core_cmInstr.h **** 
 193:../CM3 Core/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 194:../CM3 Core/core_cmInstr.h **** 
 195:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 196:../CM3 Core/core_cmInstr.h **** 
 197:../CM3 Core/core_cmInstr.h ****     \param [in]  value  Value to store
 198:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 199:../CM3 Core/core_cmInstr.h ****     \return          0  Function succeeded
 200:../CM3 Core/core_cmInstr.h ****     \return          1  Function failed
 201:../CM3 Core/core_cmInstr.h ****  */
 202:../CM3 Core/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 203:../CM3 Core/core_cmInstr.h **** 
 204:../CM3 Core/core_cmInstr.h **** 
 205:../CM3 Core/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 206:../CM3 Core/core_cmInstr.h **** 
 207:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 208:../CM3 Core/core_cmInstr.h **** 
 209:../CM3 Core/core_cmInstr.h ****     \param [in]  value  Value to store
 210:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 211:../CM3 Core/core_cmInstr.h ****     \return          0  Function succeeded
 212:../CM3 Core/core_cmInstr.h ****     \return          1  Function failed
 213:../CM3 Core/core_cmInstr.h ****  */
 214:../CM3 Core/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 215:../CM3 Core/core_cmInstr.h **** 
 216:../CM3 Core/core_cmInstr.h **** 
 217:../CM3 Core/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 218:../CM3 Core/core_cmInstr.h **** 
 219:../CM3 Core/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 220:../CM3 Core/core_cmInstr.h **** 
 221:../CM3 Core/core_cmInstr.h ****  */
 222:../CM3 Core/core_cmInstr.h **** #if (__ARMCC_VERSION < 400000)
 223:../CM3 Core/core_cmInstr.h **** extern void __CLREX(void);
 224:../CM3 Core/core_cmInstr.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 225:../CM3 Core/core_cmInstr.h **** #define __CLREX                           __clrex
 226:../CM3 Core/core_cmInstr.h **** #endif /* __ARMCC_VERSION  */
 227:../CM3 Core/core_cmInstr.h **** 
 228:../CM3 Core/core_cmInstr.h **** 
 229:../CM3 Core/core_cmInstr.h **** /** \brief  Signed Saturate
 230:../CM3 Core/core_cmInstr.h **** 
 231:../CM3 Core/core_cmInstr.h ****     This function saturates a signed value.
 232:../CM3 Core/core_cmInstr.h **** 
 233:../CM3 Core/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 234:../CM3 Core/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 235:../CM3 Core/core_cmInstr.h ****     \return             Saturated value
 236:../CM3 Core/core_cmInstr.h ****  */
 237:../CM3 Core/core_cmInstr.h **** #define __SSAT                            __ssat
 238:../CM3 Core/core_cmInstr.h **** 
 239:../CM3 Core/core_cmInstr.h **** 
 240:../CM3 Core/core_cmInstr.h **** /** \brief  Unsigned Saturate
 241:../CM3 Core/core_cmInstr.h **** 
 242:../CM3 Core/core_cmInstr.h ****     This function saturates an unsigned value.
 243:../CM3 Core/core_cmInstr.h **** 
 244:../CM3 Core/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 245:../CM3 Core/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 246:../CM3 Core/core_cmInstr.h ****     \return             Saturated value
 247:../CM3 Core/core_cmInstr.h ****  */
 248:../CM3 Core/core_cmInstr.h **** #define __USAT                            __usat
 249:../CM3 Core/core_cmInstr.h **** 
 250:../CM3 Core/core_cmInstr.h **** 
 251:../CM3 Core/core_cmInstr.h **** /** \brief  Count leading zeros
 252:../CM3 Core/core_cmInstr.h **** 
 253:../CM3 Core/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 254:../CM3 Core/core_cmInstr.h **** 
 255:../CM3 Core/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 256:../CM3 Core/core_cmInstr.h ****     \return             number of leading zeros in value
 257:../CM3 Core/core_cmInstr.h ****  */
 258:../CM3 Core/core_cmInstr.h **** #define __CLZ                             __clz
 259:../CM3 Core/core_cmInstr.h **** 
 260:../CM3 Core/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 261:../CM3 Core/core_cmInstr.h **** 
 262:../CM3 Core/core_cmInstr.h **** 
 263:../CM3 Core/core_cmInstr.h **** 
 264:../CM3 Core/core_cmInstr.h **** #elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
 265:../CM3 Core/core_cmInstr.h **** /* IAR iccarm specific functions */
 266:../CM3 Core/core_cmInstr.h **** 
 267:../CM3 Core/core_cmInstr.h **** #include <intrinsics.h>                     /* IAR Intrinsics   */
 268:../CM3 Core/core_cmInstr.h **** 
 269:../CM3 Core/core_cmInstr.h **** #pragma diag_suppress=Pe940
 270:../CM3 Core/core_cmInstr.h **** 
 271:../CM3 Core/core_cmInstr.h **** /** \brief  No Operation
 272:../CM3 Core/core_cmInstr.h **** 
 273:../CM3 Core/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 274:../CM3 Core/core_cmInstr.h ****  */
 275:../CM3 Core/core_cmInstr.h **** #define __NOP                           __no_operation
 276:../CM3 Core/core_cmInstr.h **** 
 277:../CM3 Core/core_cmInstr.h **** 
 278:../CM3 Core/core_cmInstr.h **** /** \brief  Wait For Interrupt
 279:../CM3 Core/core_cmInstr.h **** 
 280:../CM3 Core/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 281:../CM3 Core/core_cmInstr.h ****     until one of a number of events occurs.
 282:../CM3 Core/core_cmInstr.h ****  */
 283:../CM3 Core/core_cmInstr.h **** static __INLINE  void __WFI(void)
 284:../CM3 Core/core_cmInstr.h **** {
 285:../CM3 Core/core_cmInstr.h ****   __ASM ("wfi");
 286:../CM3 Core/core_cmInstr.h **** }
 287:../CM3 Core/core_cmInstr.h **** 
 288:../CM3 Core/core_cmInstr.h **** 
 289:../CM3 Core/core_cmInstr.h **** /** \brief  Wait For Event
 290:../CM3 Core/core_cmInstr.h **** 
 291:../CM3 Core/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 292:../CM3 Core/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 293:../CM3 Core/core_cmInstr.h ****  */
 294:../CM3 Core/core_cmInstr.h **** static __INLINE  void __WFE(void)
 295:../CM3 Core/core_cmInstr.h **** {
 296:../CM3 Core/core_cmInstr.h ****   __ASM ("wfe");
 297:../CM3 Core/core_cmInstr.h **** }
 298:../CM3 Core/core_cmInstr.h **** 
 299:../CM3 Core/core_cmInstr.h **** 
 300:../CM3 Core/core_cmInstr.h **** /** \brief  Send Event
 301:../CM3 Core/core_cmInstr.h **** 
 302:../CM3 Core/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 303:../CM3 Core/core_cmInstr.h ****  */
 304:../CM3 Core/core_cmInstr.h **** static __INLINE  void __SEV(void)
 305:../CM3 Core/core_cmInstr.h **** {
 306:../CM3 Core/core_cmInstr.h ****   __ASM ("sev");
 307:../CM3 Core/core_cmInstr.h **** }
 308:../CM3 Core/core_cmInstr.h **** 
 309:../CM3 Core/core_cmInstr.h **** 
 310:../CM3 Core/core_cmInstr.h **** /* intrinsic     void __ISB(void)            (see intrinsics.h) */
 311:../CM3 Core/core_cmInstr.h **** /* intrinsic     void __DSB(void)            (see intrinsics.h) */
 312:../CM3 Core/core_cmInstr.h **** /* intrinsic     void __DMB(void)            (see intrinsics.h) */
 313:../CM3 Core/core_cmInstr.h **** /* intrinsic uint32_t __REV(uint32_t value)  (see intrinsics.h) */
 314:../CM3 Core/core_cmInstr.h **** /* intrinsic          __SSAT                 (see intrinsics.h) */
 315:../CM3 Core/core_cmInstr.h **** /* intrinsic          __USAT                 (see intrinsics.h) */
 316:../CM3 Core/core_cmInstr.h **** 
 317:../CM3 Core/core_cmInstr.h **** 
 318:../CM3 Core/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 319:../CM3 Core/core_cmInstr.h **** 
 320:../CM3 Core/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 321:../CM3 Core/core_cmInstr.h **** 
 322:../CM3 Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 323:../CM3 Core/core_cmInstr.h ****     \return               Reversed value
 324:../CM3 Core/core_cmInstr.h ****  */
 325:../CM3 Core/core_cmInstr.h **** static uint32_t __REV16(uint32_t value)
 326:../CM3 Core/core_cmInstr.h **** {
 327:../CM3 Core/core_cmInstr.h ****   __ASM("rev16 r0, r0");
 328:../CM3 Core/core_cmInstr.h **** }
 329:../CM3 Core/core_cmInstr.h **** 
 330:../CM3 Core/core_cmInstr.h **** 
 331:../CM3 Core/core_cmInstr.h **** /* intrinsic uint32_t __REVSH(uint32_t value)  (see intrinsics.h */
 332:../CM3 Core/core_cmInstr.h **** 
 333:../CM3 Core/core_cmInstr.h **** 
 334:../CM3 Core/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 335:../CM3 Core/core_cmInstr.h **** 
 336:../CM3 Core/core_cmInstr.h **** /** \brief  Reverse bit order of value
 337:../CM3 Core/core_cmInstr.h **** 
 338:../CM3 Core/core_cmInstr.h ****     This function reverses the bit order of the given value.
 339:../CM3 Core/core_cmInstr.h **** 
 340:../CM3 Core/core_cmInstr.h ****     \param [in]    value  Value to reverse
 341:../CM3 Core/core_cmInstr.h ****     \return               Reversed value
 342:../CM3 Core/core_cmInstr.h ****  */
 343:../CM3 Core/core_cmInstr.h **** static uint32_t __RBIT(uint32_t value)
 344:../CM3 Core/core_cmInstr.h **** {
 345:../CM3 Core/core_cmInstr.h ****   __ASM("rbit r0, r0");
 346:../CM3 Core/core_cmInstr.h **** }
 347:../CM3 Core/core_cmInstr.h **** 
 348:../CM3 Core/core_cmInstr.h **** 
 349:../CM3 Core/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 350:../CM3 Core/core_cmInstr.h **** 
 351:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 352:../CM3 Core/core_cmInstr.h **** 
 353:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 354:../CM3 Core/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 355:../CM3 Core/core_cmInstr.h ****  */
 356:../CM3 Core/core_cmInstr.h **** static uint8_t __LDREXB(volatile uint8_t *addr)
 357:../CM3 Core/core_cmInstr.h **** {
 358:../CM3 Core/core_cmInstr.h ****   __ASM("ldrexb r0, [r0]");
 359:../CM3 Core/core_cmInstr.h **** }
 360:../CM3 Core/core_cmInstr.h **** 
 361:../CM3 Core/core_cmInstr.h **** 
 362:../CM3 Core/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 363:../CM3 Core/core_cmInstr.h **** 
 364:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 365:../CM3 Core/core_cmInstr.h **** 
 366:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 367:../CM3 Core/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 368:../CM3 Core/core_cmInstr.h ****  */
 369:../CM3 Core/core_cmInstr.h **** static uint16_t __LDREXH(volatile uint16_t *addr)
 370:../CM3 Core/core_cmInstr.h **** {
 371:../CM3 Core/core_cmInstr.h ****   __ASM("ldrexh r0, [r0]");
 372:../CM3 Core/core_cmInstr.h **** }
 373:../CM3 Core/core_cmInstr.h **** 
 374:../CM3 Core/core_cmInstr.h **** 
 375:../CM3 Core/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 376:../CM3 Core/core_cmInstr.h **** 
 377:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 378:../CM3 Core/core_cmInstr.h **** 
 379:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 380:../CM3 Core/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 381:../CM3 Core/core_cmInstr.h ****  */
 382:../CM3 Core/core_cmInstr.h **** /* intrinsic unsigned long __LDREX(unsigned long *)  (see intrinsics.h) */
 383:../CM3 Core/core_cmInstr.h **** static uint32_t __LDREXW(volatile uint32_t *addr)
 384:../CM3 Core/core_cmInstr.h **** {
 385:../CM3 Core/core_cmInstr.h ****   __ASM("ldrex r0, [r0]");
 386:../CM3 Core/core_cmInstr.h **** }
 387:../CM3 Core/core_cmInstr.h **** 
 388:../CM3 Core/core_cmInstr.h **** 
 389:../CM3 Core/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 390:../CM3 Core/core_cmInstr.h **** 
 391:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 392:../CM3 Core/core_cmInstr.h **** 
 393:../CM3 Core/core_cmInstr.h ****     \param [in]  value  Value to store
 394:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 395:../CM3 Core/core_cmInstr.h ****     \return          0  Function succeeded
 396:../CM3 Core/core_cmInstr.h ****     \return          1  Function failed
 397:../CM3 Core/core_cmInstr.h ****  */
 398:../CM3 Core/core_cmInstr.h **** static uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 399:../CM3 Core/core_cmInstr.h **** {
 400:../CM3 Core/core_cmInstr.h ****   __ASM("strexb r0, r0, [r1]");
 401:../CM3 Core/core_cmInstr.h **** }
 402:../CM3 Core/core_cmInstr.h **** 
 403:../CM3 Core/core_cmInstr.h **** 
 404:../CM3 Core/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 405:../CM3 Core/core_cmInstr.h **** 
 406:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 407:../CM3 Core/core_cmInstr.h **** 
 408:../CM3 Core/core_cmInstr.h ****     \param [in]  value  Value to store
 409:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 410:../CM3 Core/core_cmInstr.h ****     \return          0  Function succeeded
 411:../CM3 Core/core_cmInstr.h ****     \return          1  Function failed
 412:../CM3 Core/core_cmInstr.h ****  */
 413:../CM3 Core/core_cmInstr.h **** static uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 414:../CM3 Core/core_cmInstr.h **** {
 415:../CM3 Core/core_cmInstr.h ****   __ASM("strexh r0, r0, [r1]");
 416:../CM3 Core/core_cmInstr.h **** }
 417:../CM3 Core/core_cmInstr.h **** 
 418:../CM3 Core/core_cmInstr.h **** 
 419:../CM3 Core/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 420:../CM3 Core/core_cmInstr.h **** 
 421:../CM3 Core/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 422:../CM3 Core/core_cmInstr.h **** 
 423:../CM3 Core/core_cmInstr.h ****     \param [in]  value  Value to store
 424:../CM3 Core/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 425:../CM3 Core/core_cmInstr.h ****     \return          0  Function succeeded
 426:../CM3 Core/core_cmInstr.h ****     \return          1  Function failed
 427:../CM3 Core/core_cmInstr.h ****  */
 428:../CM3 Core/core_cmInstr.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long)  (see intrinsics.h )*/
 429:../CM3 Core/core_cmInstr.h **** static uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 430:../CM3 Core/core_cmInstr.h **** {
 431:../CM3 Core/core_cmInstr.h ****   __ASM("strex r0, r0, [r1]");
 432:../CM3 Core/core_cmInstr.h **** }
 433:../CM3 Core/core_cmInstr.h **** 
 434:../CM3 Core/core_cmInstr.h **** 
 435:../CM3 Core/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 436:../CM3 Core/core_cmInstr.h **** 
 437:../CM3 Core/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 438:../CM3 Core/core_cmInstr.h **** 
 439:../CM3 Core/core_cmInstr.h ****  */
 440:../CM3 Core/core_cmInstr.h **** static __INLINE void __CLREX(void)
 441:../CM3 Core/core_cmInstr.h **** {
 442:../CM3 Core/core_cmInstr.h ****   __ASM ("clrex");
 443:../CM3 Core/core_cmInstr.h **** }
 444:../CM3 Core/core_cmInstr.h **** 
 445:../CM3 Core/core_cmInstr.h **** /* intrinsic   unsigned char __CLZ( unsigned long )      (see intrinsics.h) */
 446:../CM3 Core/core_cmInstr.h **** 
 447:../CM3 Core/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 448:../CM3 Core/core_cmInstr.h **** 
 449:../CM3 Core/core_cmInstr.h **** #pragma diag_default=Pe940
 450:../CM3 Core/core_cmInstr.h **** 
 451:../CM3 Core/core_cmInstr.h **** 
 452:../CM3 Core/core_cmInstr.h **** 
 453:../CM3 Core/core_cmInstr.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 454:../CM3 Core/core_cmInstr.h **** /* GNU gcc specific functions */
 455:../CM3 Core/core_cmInstr.h **** 
 456:../CM3 Core/core_cmInstr.h **** /** \brief  No Operation
 457:../CM3 Core/core_cmInstr.h **** 
 458:../CM3 Core/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 459:../CM3 Core/core_cmInstr.h ****  */
 460:../CM3 Core/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 461:../CM3 Core/core_cmInstr.h **** {
 462:../CM3 Core/core_cmInstr.h ****   __ASM volatile ("nop");
 463:../CM3 Core/core_cmInstr.h **** }
 464:../CM3 Core/core_cmInstr.h **** 
 465:../CM3 Core/core_cmInstr.h **** 
 466:../CM3 Core/core_cmInstr.h **** /** \brief  Wait For Interrupt
 467:../CM3 Core/core_cmInstr.h **** 
 468:../CM3 Core/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 469:../CM3 Core/core_cmInstr.h ****     until one of a number of events occurs.
 470:../CM3 Core/core_cmInstr.h ****  */
 471:../CM3 Core/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 472:../CM3 Core/core_cmInstr.h **** {
 473:../CM3 Core/core_cmInstr.h ****   __ASM volatile ("wfi");
 244              		.loc 2 473 0
 245              	@ 473 "../CM3 Core/core_cmInstr.h" 1
 246 00d0 30BF     		wfi
 247              	@ 0 "" 2
 248              		.thumb
 249 00d2 7047     		bx	lr
 250              	.L25:
 251              		.align	2
 252              	.L24:
 253 00d4 00C00F40 		.word	1074774016
 254              	.LBE11:
 255              	.LBE10:
 256              		.cfi_endproc
 257              	.LFE59:
 259              		.align	1
 260              		.global	CLKPWR_DeepSleep
 261              		.thumb
 262              		.thumb_func
 264              	CLKPWR_DeepSleep:
 265              	.LFB60:
 283:../Source Files/lpc17xx_clkpwr.c **** 	/* Sleep Mode*/
 284:../Source Files/lpc17xx_clkpwr.c **** 	__WFI();
 285:../Source Files/lpc17xx_clkpwr.c **** }
 286:../Source Files/lpc17xx_clkpwr.c **** 
 287:../Source Files/lpc17xx_clkpwr.c **** 
 288:../Source Files/lpc17xx_clkpwr.c **** /*********************************************************************//**
 289:../Source Files/lpc17xx_clkpwr.c ****  * @brief 		Enter Deep Sleep mode with co-operated instruction by the Cortex-M3.
 290:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	None
 291:../Source Files/lpc17xx_clkpwr.c ****  * @return		None
 292:../Source Files/lpc17xx_clkpwr.c ****  **********************************************************************/
 293:../Source Files/lpc17xx_clkpwr.c **** void CLKPWR_DeepSleep(void)
 294:../Source Files/lpc17xx_clkpwr.c **** {
 266              		.loc 1 294 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 295:../Source Files/lpc17xx_clkpwr.c ****     /* Deep-Sleep Mode, set SLEEPDEEP bit */
 296:../Source Files/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 271              		.loc 1 296 0
 272 00d8 044B     		ldr	r3, .L27
 297:../Source Files/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x8;
 273              		.loc 1 297 0
 274 00da 0549     		ldr	r1, .L27+4
 296:../Source Files/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 275              		.loc 1 296 0
 276 00dc 0422     		movs	r2, #4
 277              		.loc 1 297 0
 278 00de 0820     		movs	r0, #8
 296:../Source Files/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 279              		.loc 1 296 0
 280 00e0 1A61     		str	r2, [r3, #16]
 281              		.loc 1 297 0
 282 00e2 C1F8C000 		str	r0, [r1, #192]
 283              	.LBB12:
 284              	.LBB13:
 285              		.loc 2 473 0
 286              	@ 473 "../CM3 Core/core_cmInstr.h" 1
 287 00e6 30BF     		wfi
 288              	@ 0 "" 2
 289              		.thumb
 290 00e8 7047     		bx	lr
 291              	.L28:
 292 00ea 00BF     		.align	2
 293              	.L27:
 294 00ec 00ED00E0 		.word	-536810240
 295 00f0 00C00F40 		.word	1074774016
 296              	.LBE13:
 297              	.LBE12:
 298              		.cfi_endproc
 299              	.LFE60:
 301              		.align	1
 302              		.global	CLKPWR_PowerDown
 303              		.thumb
 304              		.thumb_func
 306              	CLKPWR_PowerDown:
 307              	.LFB61:
 298:../Source Files/lpc17xx_clkpwr.c **** 	/* Deep Sleep Mode*/
 299:../Source Files/lpc17xx_clkpwr.c **** 	__WFI();
 300:../Source Files/lpc17xx_clkpwr.c **** }
 301:../Source Files/lpc17xx_clkpwr.c **** 
 302:../Source Files/lpc17xx_clkpwr.c **** 
 303:../Source Files/lpc17xx_clkpwr.c **** /*********************************************************************//**
 304:../Source Files/lpc17xx_clkpwr.c ****  * @brief 		Enter Power Down mode with co-operated instruction by the Cortex-M3.
 305:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	None
 306:../Source Files/lpc17xx_clkpwr.c ****  * @return		None
 307:../Source Files/lpc17xx_clkpwr.c ****  **********************************************************************/
 308:../Source Files/lpc17xx_clkpwr.c **** void CLKPWR_PowerDown(void)
 309:../Source Files/lpc17xx_clkpwr.c **** {
 308              		.loc 1 309 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 310:../Source Files/lpc17xx_clkpwr.c ****     /* Deep-Sleep Mode, set SLEEPDEEP bit */
 311:../Source Files/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 313              		.loc 1 311 0
 314 00f4 044B     		ldr	r3, .L30
 312:../Source Files/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x09;
 315              		.loc 1 312 0
 316 00f6 0549     		ldr	r1, .L30+4
 311:../Source Files/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 317              		.loc 1 311 0
 318 00f8 0422     		movs	r2, #4
 319              		.loc 1 312 0
 320 00fa 0920     		movs	r0, #9
 311:../Source Files/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 321              		.loc 1 311 0
 322 00fc 1A61     		str	r2, [r3, #16]
 323              		.loc 1 312 0
 324 00fe C1F8C000 		str	r0, [r1, #192]
 325              	.LBB14:
 326              	.LBB15:
 327              		.loc 2 473 0
 328              	@ 473 "../CM3 Core/core_cmInstr.h" 1
 329 0102 30BF     		wfi
 330              	@ 0 "" 2
 331              		.thumb
 332 0104 7047     		bx	lr
 333              	.L31:
 334 0106 00BF     		.align	2
 335              	.L30:
 336 0108 00ED00E0 		.word	-536810240
 337 010c 00C00F40 		.word	1074774016
 338              	.LBE15:
 339              	.LBE14:
 340              		.cfi_endproc
 341              	.LFE61:
 343              		.align	1
 344              		.global	CLKPWR_DeepPowerDown
 345              		.thumb
 346              		.thumb_func
 348              	CLKPWR_DeepPowerDown:
 349              	.LFB62:
 313:../Source Files/lpc17xx_clkpwr.c **** 	/* Power Down Mode*/
 314:../Source Files/lpc17xx_clkpwr.c **** 	__WFI();
 315:../Source Files/lpc17xx_clkpwr.c **** }
 316:../Source Files/lpc17xx_clkpwr.c **** 
 317:../Source Files/lpc17xx_clkpwr.c **** 
 318:../Source Files/lpc17xx_clkpwr.c **** /*********************************************************************//**
 319:../Source Files/lpc17xx_clkpwr.c ****  * @brief 		Enter Deep Power Down mode with co-operated instruction by the Cortex-M3.
 320:../Source Files/lpc17xx_clkpwr.c ****  * @param[in]	None
 321:../Source Files/lpc17xx_clkpwr.c ****  * @return		None
 322:../Source Files/lpc17xx_clkpwr.c ****  **********************************************************************/
 323:../Source Files/lpc17xx_clkpwr.c **** void CLKPWR_DeepPowerDown(void)
 324:../Source Files/lpc17xx_clkpwr.c **** {
 350              		.loc 1 324 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 0
 353              		@ frame_needed = 0, uses_anonymous_args = 0
 354              		@ link register save eliminated.
 325:../Source Files/lpc17xx_clkpwr.c ****     /* Deep-Sleep Mode, set SLEEPDEEP bit */
 326:../Source Files/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 355              		.loc 1 326 0
 356 0110 044B     		ldr	r3, .L33
 327:../Source Files/lpc17xx_clkpwr.c **** 	LPC_SC->PCON = 0x03;
 357              		.loc 1 327 0
 358 0112 0549     		ldr	r1, .L33+4
 326:../Source Files/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 359              		.loc 1 326 0
 360 0114 0422     		movs	r2, #4
 361              		.loc 1 327 0
 362 0116 0320     		movs	r0, #3
 326:../Source Files/lpc17xx_clkpwr.c **** 	SCB->SCR = 0x4;
 363              		.loc 1 326 0
 364 0118 1A61     		str	r2, [r3, #16]
 365              		.loc 1 327 0
 366 011a C1F8C000 		str	r0, [r1, #192]
 367              	.LBB16:
 368              	.LBB17:
 369              		.loc 2 473 0
 370              	@ 473 "../CM3 Core/core_cmInstr.h" 1
 371 011e 30BF     		wfi
 372              	@ 0 "" 2
 373              		.thumb
 374 0120 7047     		bx	lr
 375              	.L34:
 376 0122 00BF     		.align	2
 377              	.L33:
 378 0124 00ED00E0 		.word	-536810240
 379 0128 00C00F40 		.word	1074774016
 380              	.LBE17:
 381              	.LBE16:
 382              		.cfi_endproc
 383              	.LFE62:
 385              	.Letext0:
 386              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q2\\bin\\../lib/gcc/arm-none-eab
 387              		.file 4 "../CM3 Core/core_cm3.h"
 388              		.file 5 "../CM3 Core/LPC17xx.h"
 389              		.file 6 "../Header Files/lpc_types.h"
 390              		.file 7 "../CM3 Core/system_LPC17xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lpc17xx_clkpwr.c
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:18     .text:00000000 $t
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:23     .text:00000000 CLKPWR_SetPCLKDiv
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:80     .text:00000050 $d
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:84     .text:00000054 $t
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:89     .text:00000054 CLKPWR_GetPCLKSEL
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:124    .text:00000070 $d
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:128    .text:00000074 $t
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:133    .text:00000074 CLKPWR_GetPCLK
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:174    .text:00000090 $d
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:178    .text:00000094 $t
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:183    .text:00000094 CLKPWR_ConfigPPWR
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:220    .text:000000c0 $d
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:225    .text:000000c8 $t
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:230    .text:000000c8 CLKPWR_Sleep
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:253    .text:000000d4 $d
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:259    .text:000000d8 $t
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:264    .text:000000d8 CLKPWR_DeepSleep
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:294    .text:000000ec $d
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:301    .text:000000f4 $t
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:306    .text:000000f4 CLKPWR_PowerDown
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:336    .text:00000108 $d
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:343    .text:00000110 $t
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:348    .text:00000110 CLKPWR_DeepPowerDown
C:\Users\raghav\AppData\Local\Temp\ccdryf23.s:378    .text:00000124 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.549b84bf9d8399e395ff8216fcbb3d69
                           .group:00000000 wm4.LPC17xx.h.27.964facdaadd4aa3f18ac78c8a78f0013
                           .group:00000000 wm4.core_cm3.h.32.3cac756d6e704b813781f82afd94fa5f
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.6beb15babd14c076008ec0890c26e21c
                           .group:00000000 wm4.core_cm3.h.83.1a3cb9afc687cf157efeddb3d5f3109e
                           .group:00000000 wm4.LPC17xx.h.953.82b7a9ed60bb594048bc8738cf1d3489
                           .group:00000000 wm4.lpc_types.h.32.72d58ce80fabd1a5430c6ec0500a090b
                           .group:00000000 wm4.lpc17xx_clkpwr.h.50.adf94acb043d05ea653bbd6bda75d068

UNDEFINED SYMBOLS
SystemCoreClock
