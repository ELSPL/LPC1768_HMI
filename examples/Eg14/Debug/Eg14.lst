
Eg14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000cc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000512c  000000d0  000000d0  000080d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000051fc  000051fc  0000d1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       000720a4  00005204  00005204  0000d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .bss          00000368  10000000  000772a8  00080000  2**2
                  ALLOC
  5 ._usrstack    00000100  10000368  000772a8  00080368  2**0
                  ALLOC
  6 .data         00000010  2007c000  000772a8  00084000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .comment      00000070  00000000  00000000  00084010  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 00000033  00000000  00000000  00084080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000230  00000000  00000000  000840b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000cc65  00000000  00000000  000842e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002899  00000000  00000000  00090f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000531e  00000000  00000000  000937e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001598  00000000  00000000  00098b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0001252f  00000000  00000000  0009a098  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000064bd  00000000  00000000  000ac5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000476a  00000000  00000000  000b2a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000380  00000000  00000000  000b71ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000000d0 <ADC_Init>:
 * @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
 * @param[in]	rate ADC conversion rate, should be <=200KHz
 * @return 		None
 **********************************************************************/
void ADC_Init(LPC_ADC_TypeDef *ADCx, uint32_t rate)
{
      d0:	b538      	push	{r3, r4, r5, lr}
      d2:	4604      	mov	r4, r0
      d4:	460d      	mov	r5, r1

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_RATE(rate));

	// Turn on power and clock
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCAD, ENABLE);
      d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
      da:	2101      	movs	r1, #1
      dc:	f000 f970 	bl	3c0 <CLKPWR_ConfigPPWR>

	ADCx->ADCR = 0;
      e0:	2300      	movs	r3, #0
      e2:	6023      	str	r3, [r4, #0]

	//Enable PDN bit
	tmp = ADC_CR_PDN;
	// Set clock frequency
	temp = CLKPWR_GetPCLK(CLKPWR_PCLKSEL_ADC);
      e4:	2018      	movs	r0, #24
      e6:	f000 f95b 	bl	3a0 <CLKPWR_GetPCLK>
	 * A/D converter, which should be less than or equal to 13MHz.
	 * A fully conversion requires 65 of these clocks.
	 * ADC clock = PCLK_ADC0 / (CLKDIV + 1);
	 * ADC rate = ADC clock / 65;
	 */
	temp = (temp /(rate * 65)) - 1;
      ea:	2141      	movs	r1, #65	; 0x41
      ec:	434d      	muls	r5, r1
      ee:	fbb0 f0f5 	udiv	r0, r0, r5
      f2:	1e42      	subs	r2, r0, #1
	tmp |=  ADC_CR_CLKDIV(temp);
      f4:	0215      	lsls	r5, r2, #8
      f6:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000

	ADCx->ADCR = tmp;
      fa:	6025      	str	r5, [r4, #0]
      fc:	bd38      	pop	{r3, r4, r5, pc}

000000fe <ADC_DeInit>:
void ADC_DeInit(LPC_ADC_TypeDef *ADCx)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	// Clear PDN bit
	ADCx->ADCR &= ~ADC_CR_PDN;
      fe:	6803      	ldr	r3, [r0, #0]
     100:	f423 1100 	bic.w	r1, r3, #2097152	; 0x200000
     104:	6001      	str	r1, [r0, #0]
	// Turn on power and clock
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCAD, DISABLE);
     106:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     10a:	2100      	movs	r1, #0
     10c:	f000 b958 	b.w	3c0 <CLKPWR_ConfigPPWR>

00000110 <ADC_GetData>:
{
	uint32_t adc_value;

	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));

	adc_value = *(uint32_t *)((&LPC_ADC->ADDR0) + channel);
     110:	4b02      	ldr	r3, [pc, #8]	; (11c <ADC_GetData+0xc>)
	return ADC_GDR_RESULT(adc_value);
     112:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
     116:	f3c0 100b 	ubfx	r0, r0, #4, #12
     11a:	4770      	bx	lr
     11c:	40034010 	.word	0x40034010

00000120 <ADC_StartCmd>:
void ADC_StartCmd(LPC_ADC_TypeDef *ADCx, uint8_t start_mode)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_START_OPT(start_mode));

	ADCx->ADCR &= ~ADC_CR_START_MASK;
     120:	6803      	ldr	r3, [r0, #0]
     122:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
     126:	6002      	str	r2, [r0, #0]
	ADCx->ADCR |=ADC_CR_START_MODE_SEL((uint32_t)start_mode);
     128:	6803      	ldr	r3, [r0, #0]
     12a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
     12e:	6001      	str	r1, [r0, #0]
     130:	4770      	bx	lr

00000132 <ADC_BurstCmd>:
**********************************************************************/
void ADC_BurstCmd(LPC_ADC_TypeDef *ADCx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	ADCx->ADCR &= ~ADC_CR_BURST;
     132:	6803      	ldr	r3, [r0, #0]
     134:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
     138:	6002      	str	r2, [r0, #0]
	if (NewState){
     13a:	b119      	cbz	r1, 144 <ADC_BurstCmd+0x12>
		ADCx->ADCR |= ADC_CR_BURST;
     13c:	6801      	ldr	r1, [r0, #0]
     13e:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
     142:	6003      	str	r3, [r0, #0]
     144:	4770      	bx	lr

00000146 <ADC_PowerdownCmd>:
**********************************************************************/
void ADC_PowerdownCmd(LPC_ADC_TypeDef *ADCx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	ADCx->ADCR &= ~ADC_CR_PDN;
     146:	6803      	ldr	r3, [r0, #0]
     148:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
     14c:	6002      	str	r2, [r0, #0]
	if (NewState){
     14e:	b119      	cbz	r1, 158 <ADC_PowerdownCmd+0x12>
		ADCx->ADCR |= ADC_CR_PDN;
     150:	6801      	ldr	r1, [r0, #0]
     152:	f441 1300 	orr.w	r3, r1, #2097152	; 0x200000
     156:	6003      	str	r3, [r0, #0]
     158:	4770      	bx	lr

0000015a <ADC_EdgeStartConfig>:
void ADC_EdgeStartConfig(LPC_ADC_TypeDef *ADCx, uint8_t EdgeOption)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_START_ON_EDGE_OPT(EdgeOption));

	ADCx->ADCR &= ~ADC_CR_EDGE;
     15a:	6803      	ldr	r3, [r0, #0]
     15c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
     160:	6002      	str	r2, [r0, #0]
	if (EdgeOption){
     162:	b119      	cbz	r1, 16c <ADC_EdgeStartConfig+0x12>
		ADCx->ADCR |= ADC_CR_EDGE;
     164:	6801      	ldr	r1, [r0, #0]
     166:	f041 6300 	orr.w	r3, r1, #134217728	; 0x8000000
     16a:	6003      	str	r3, [r0, #0]
     16c:	4770      	bx	lr

0000016e <ADC_IntConfig>:
* 					- SET : enable ADC interrupt
* 					- RESET: disable ADC interrupt
* @return 		None
**********************************************************************/
void ADC_IntConfig (LPC_ADC_TypeDef *ADCx, ADC_TYPE_INT_OPT IntType, FunctionalState NewState)
{
     16e:	b510      	push	{r4, lr}
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_TYPE_INT_OPT(IntType));

	ADCx->ADINTEN &= ~ADC_INTEN_CH(IntType);
     170:	2401      	movs	r4, #1
     172:	fa04 f101 	lsl.w	r1, r4, r1
     176:	68c3      	ldr	r3, [r0, #12]
     178:	ea23 0301 	bic.w	r3, r3, r1
     17c:	60c3      	str	r3, [r0, #12]
	if (NewState){
     17e:	b112      	cbz	r2, 186 <ADC_IntConfig+0x18>
		ADCx->ADINTEN |= ADC_INTEN_CH(IntType);
     180:	68c2      	ldr	r2, [r0, #12]
     182:	4311      	orrs	r1, r2
     184:	60c1      	str	r1, [r0, #12]
     186:	bd10      	pop	{r4, pc}

00000188 <ADC_Channel_Config>:
void ADC_Channel_Config(LPC_ADC_TypeDef *ADCx, ADC_CHANNEL_SELECTION PCfg, FunctionalState IntState)
{
	// Pin configuration for ADC
	PINSEL_CFG_Type PinCfg;

	if(ADCx == LPC_ADC)
     188:	4b46      	ldr	r3, [pc, #280]	; (2a4 <ADC_Channel_Config+0x11c>)
 *               parameters.
 * @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
 * @return 		None
 *********************************************************************/
void ADC_Channel_Config(LPC_ADC_TypeDef *ADCx, ADC_CHANNEL_SELECTION PCfg, FunctionalState IntState)
{
     18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Pin configuration for ADC
	PINSEL_CFG_Type PinCfg;

	if(ADCx == LPC_ADC)
     18c:	4298      	cmp	r0, r3
 *               parameters.
 * @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
 * @return 		None
 *********************************************************************/
void ADC_Channel_Config(LPC_ADC_TypeDef *ADCx, ADC_CHANNEL_SELECTION PCfg, FunctionalState IntState)
{
     18e:	460e      	mov	r6, r1
     190:	4614      	mov	r4, r2
	// Pin configuration for ADC
	PINSEL_CFG_Type PinCfg;

	if(ADCx == LPC_ADC)
     192:	d17f      	bne.n	294 <ADC_Channel_Config+0x10c>
     194:	2001      	movs	r0, #1
	{
		switch (PCfg)
     196:	2905      	cmp	r1, #5
     198:	d87c      	bhi.n	294 <ADC_Channel_Config+0x10c>
     19a:	e8df f001 	tbb	[pc, r1]
     19e:	1603      	.short	0x1603
     1a0:	644f3c29 	.word	0x644f3c29
		{
		 case ADC_CHANNEL_0:
			 // Configure P0.23 as CH0
			 PinCfg.Funcnum = 1;
     1a4:	f88d 0002 	strb.w	r0, [sp, #2]
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 23;
     1a8:	2017      	movs	r0, #23
		switch (PCfg)
		{
		 case ADC_CHANNEL_0:
			 // Configure P0.23 as CH0
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
     1aa:	2500      	movs	r5, #0
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 23;
			 PinCfg.Portnum = 0;
     1ac:	a902      	add	r1, sp, #8
		 case ADC_CHANNEL_0:
			 // Configure P0.23 as CH0
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 23;
     1ae:	f88d 0001 	strb.w	r0, [sp, #1]
			 PinCfg.Portnum = 0;
			 PINSEL_ConfigPin(&PinCfg);
     1b2:	4668      	mov	r0, sp
			 // Configure P0.23 as CH0
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 23;
			 PinCfg.Portnum = 0;
     1b4:	f801 5d08 	strb.w	r5, [r1, #-8]!
		switch (PCfg)
		{
		 case ADC_CHANNEL_0:
			 // Configure P0.23 as CH0
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
     1b8:	f88d 5004 	strb.w	r5, [sp, #4]
			 PinCfg.Pinmode = 0;
     1bc:	f88d 5003 	strb.w	r5, [sp, #3]
			 PinCfg.Pinnum = 23;
			 PinCfg.Portnum = 0;
			 PINSEL_ConfigPin(&PinCfg);
     1c0:	f000 fefc 	bl	fbc <PINSEL_ConfigPin>

			 ADC_IntConfig(LPC_ADC, ADC_ADINTEN0, IntState);
     1c4:	4837      	ldr	r0, [pc, #220]	; (2a4 <ADC_Channel_Config+0x11c>)
     1c6:	4629      	mov	r1, r5
     1c8:	e061      	b.n	28e <ADC_Channel_Config+0x106>
			 break;

		 case ADC_CHANNEL_1:
			 // Configure P0.24 as CH1
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
     1ca:	2100      	movs	r1, #0

			 break;

		 case ADC_CHANNEL_1:
			 // Configure P0.24 as CH1
			 PinCfg.Funcnum = 1;
     1cc:	f88d 0002 	strb.w	r0, [sp, #2]
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 24;
     1d0:	2318      	movs	r3, #24
			 PinCfg.Portnum = 0;
     1d2:	aa02      	add	r2, sp, #8
			 PINSEL_ConfigPin(&PinCfg);
     1d4:	4668      	mov	r0, sp
			 break;

		 case ADC_CHANNEL_1:
			 // Configure P0.24 as CH1
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
     1d6:	f88d 1004 	strb.w	r1, [sp, #4]
			 PinCfg.Pinmode = 0;
     1da:	f88d 1003 	strb.w	r1, [sp, #3]
			 PinCfg.Pinnum = 24;
			 PinCfg.Portnum = 0;
     1de:	f802 1d08 	strb.w	r1, [r2, #-8]!
		 case ADC_CHANNEL_1:
			 // Configure P0.24 as CH1
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 24;
     1e2:	f88d 3001 	strb.w	r3, [sp, #1]
			 PinCfg.Portnum = 0;
			 PINSEL_ConfigPin(&PinCfg);
     1e6:	f000 fee9 	bl	fbc <PINSEL_ConfigPin>

			 ADC_IntConfig(LPC_ADC, ADC_ADINTEN1, IntState);
     1ea:	482e      	ldr	r0, [pc, #184]	; (2a4 <ADC_Channel_Config+0x11c>)
     1ec:	2101      	movs	r1, #1
     1ee:	e04e      	b.n	28e <ADC_Channel_Config+0x106>
			 break;

		 case ADC_CHANNEL_2:
			 // Configure P0.25 as CH2
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
     1f0:	2300      	movs	r3, #0

			 break;

		 case ADC_CHANNEL_2:
			 // Configure P0.25 as CH2
			 PinCfg.Funcnum = 1;
     1f2:	f88d 0002 	strb.w	r0, [sp, #2]
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 25;
			 PinCfg.Portnum = 0;
     1f6:	a802      	add	r0, sp, #8
		 case ADC_CHANNEL_2:
			 // Configure P0.25 as CH2
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 25;
     1f8:	2219      	movs	r2, #25
			 PinCfg.Portnum = 0;
     1fa:	f800 3d08 	strb.w	r3, [r0, #-8]!
			 PINSEL_ConfigPin(&PinCfg);
     1fe:	4668      	mov	r0, sp
			 break;

		 case ADC_CHANNEL_2:
			 // Configure P0.25 as CH2
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
     200:	f88d 3004 	strb.w	r3, [sp, #4]
			 PinCfg.Pinmode = 0;
     204:	f88d 3003 	strb.w	r3, [sp, #3]
			 PinCfg.Pinnum = 25;
     208:	f88d 2001 	strb.w	r2, [sp, #1]
			 PinCfg.Portnum = 0;
			 PINSEL_ConfigPin(&PinCfg);
     20c:	f000 fed6 	bl	fbc <PINSEL_ConfigPin>

			 ADC_IntConfig(LPC_ADC, ADC_ADINTEN2, IntState);
     210:	4824      	ldr	r0, [pc, #144]	; (2a4 <ADC_Channel_Config+0x11c>)
     212:	2102      	movs	r1, #2
     214:	e03b      	b.n	28e <ADC_Channel_Config+0x106>

			 break;

		 case ADC_CHANNEL_3:
			 // Configure P0.26 as CH3
			 PinCfg.Funcnum = 1;
     216:	f88d 0002 	strb.w	r0, [sp, #2]
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 23;
     21a:	2017      	movs	r0, #23
			 break;

		 case ADC_CHANNEL_3:
			 // Configure P0.26 as CH3
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
     21c:	2300      	movs	r3, #0
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 23;
			 PinCfg.Portnum = 0;
     21e:	a902      	add	r1, sp, #8
		 case ADC_CHANNEL_3:
			 // Configure P0.26 as CH3
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 23;
     220:	f88d 0001 	strb.w	r0, [sp, #1]
			 PinCfg.Portnum = 0;
			 PINSEL_ConfigPin(&PinCfg);
     224:	4668      	mov	r0, sp
			 // Configure P0.26 as CH3
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 23;
			 PinCfg.Portnum = 0;
     226:	f801 3d08 	strb.w	r3, [r1, #-8]!
			 break;

		 case ADC_CHANNEL_3:
			 // Configure P0.26 as CH3
			 PinCfg.Funcnum = 1;
			 PinCfg.OpenDrain = 0;
     22a:	f88d 3004 	strb.w	r3, [sp, #4]
			 PinCfg.Pinmode = 0;
     22e:	f88d 3003 	strb.w	r3, [sp, #3]
			 PinCfg.Pinnum = 23;
			 PinCfg.Portnum = 0;
			 PINSEL_ConfigPin(&PinCfg);
     232:	f000 fec3 	bl	fbc <PINSEL_ConfigPin>

			 ADC_IntConfig(LPC_ADC, ADC_ADINTEN3, IntState);
     236:	481b      	ldr	r0, [pc, #108]	; (2a4 <ADC_Channel_Config+0x11c>)
     238:	2103      	movs	r1, #3
     23a:	e028      	b.n	28e <ADC_Channel_Config+0x106>

			 break;

		 case ADC_CHANNEL_4:
			 // Configure P1.30 as CH4
			 PinCfg.Funcnum = 3;
     23c:	2203      	movs	r2, #3
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 30;
     23e:	201e      	movs	r0, #30
			 break;

		 case ADC_CHANNEL_4:
			 // Configure P1.30 as CH4
			 PinCfg.Funcnum = 3;
			 PinCfg.OpenDrain = 0;
     240:	2300      	movs	r3, #0
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 30;
			 PinCfg.Portnum = 1;
     242:	a902      	add	r1, sp, #8

			 break;

		 case ADC_CHANNEL_4:
			 // Configure P1.30 as CH4
			 PinCfg.Funcnum = 3;
     244:	f88d 2002 	strb.w	r2, [sp, #2]
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 30;
     248:	f88d 0001 	strb.w	r0, [sp, #1]
			 PinCfg.Portnum = 1;
     24c:	2201      	movs	r2, #1
			 PINSEL_ConfigPin(&PinCfg);
     24e:	4668      	mov	r0, sp
			 // Configure P1.30 as CH4
			 PinCfg.Funcnum = 3;
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 30;
			 PinCfg.Portnum = 1;
     250:	f801 2d08 	strb.w	r2, [r1, #-8]!
			 break;

		 case ADC_CHANNEL_4:
			 // Configure P1.30 as CH4
			 PinCfg.Funcnum = 3;
			 PinCfg.OpenDrain = 0;
     254:	f88d 3004 	strb.w	r3, [sp, #4]
			 PinCfg.Pinmode = 0;
     258:	f88d 3003 	strb.w	r3, [sp, #3]
			 PinCfg.Pinnum = 30;
			 PinCfg.Portnum = 1;
			 PINSEL_ConfigPin(&PinCfg);
     25c:	f000 feae 	bl	fbc <PINSEL_ConfigPin>

			 ADC_IntConfig(LPC_ADC, ADC_ADINTEN4, IntState);
     260:	4810      	ldr	r0, [pc, #64]	; (2a4 <ADC_Channel_Config+0x11c>)
     262:	2104      	movs	r1, #4
     264:	e013      	b.n	28e <ADC_Channel_Config+0x106>

			 break;

		 case ADC_CHANNEL_5:
			 // Configure P1.31 as CH5
			 PinCfg.Funcnum = 3;
     266:	2103      	movs	r1, #3
     268:	f88d 1002 	strb.w	r1, [sp, #2]
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 31;
			 PinCfg.Portnum = 1;
     26c:	a802      	add	r0, sp, #8
     26e:	2101      	movs	r1, #1
			 break;

		 case ADC_CHANNEL_5:
			 // Configure P1.31 as CH5
			 PinCfg.Funcnum = 3;
			 PinCfg.OpenDrain = 0;
     270:	2200      	movs	r2, #0
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 31;
			 PinCfg.Portnum = 1;
     272:	f800 1d08 	strb.w	r1, [r0, #-8]!
		 case ADC_CHANNEL_5:
			 // Configure P1.31 as CH5
			 PinCfg.Funcnum = 3;
			 PinCfg.OpenDrain = 0;
			 PinCfg.Pinmode = 0;
			 PinCfg.Pinnum = 31;
     276:	231f      	movs	r3, #31
			 PinCfg.Portnum = 1;
			 PINSEL_ConfigPin(&PinCfg);
     278:	4668      	mov	r0, sp
			 break;

		 case ADC_CHANNEL_5:
			 // Configure P1.31 as CH5
			 PinCfg.Funcnum = 3;
			 PinCfg.OpenDrain = 0;
     27a:	f88d 2004 	strb.w	r2, [sp, #4]
			 PinCfg.Pinmode = 0;
     27e:	f88d 2003 	strb.w	r2, [sp, #3]
			 PinCfg.Pinnum = 31;
     282:	f88d 3001 	strb.w	r3, [sp, #1]
			 PinCfg.Portnum = 1;
			 PINSEL_ConfigPin(&PinCfg);
     286:	f000 fe99 	bl	fbc <PINSEL_ConfigPin>

			 ADC_IntConfig(LPC_ADC, ADC_ADINTEN5, IntState);
     28a:	4806      	ldr	r0, [pc, #24]	; (2a4 <ADC_Channel_Config+0x11c>)
     28c:	2105      	movs	r1, #5
     28e:	4622      	mov	r2, r4
     290:	f7ff ff6d 	bl	16e <ADC_IntConfig>
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(Channel));

	if (NewState == ENABLE) {
		ADCx->ADCR |= ADC_CR_CH_SEL(Channel);
     294:	2001      	movs	r0, #1
     296:	fa00 f606 	lsl.w	r6, r0, r6
     29a:	4b02      	ldr	r3, [pc, #8]	; (2a4 <ADC_Channel_Config+0x11c>)
     29c:	681a      	ldr	r2, [r3, #0]
     29e:	4316      	orrs	r6, r2
     2a0:	601e      	str	r6, [r3, #0]
			 break;
		}
	}

	ADC_ChannelCmd(LPC_ADC, PCfg, ENABLE);
}
     2a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
     2a4:	40034000 	.word	0x40034000

000002a8 <ADC_Config>:
 *               parameters.
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void ADC_Config (void)
{
     2a8:	b510      	push	{r4, lr}
	/** Configuration for ADC :
	 *  ADC conversion rate = 200Khz
	 */
	ADC_Init(LPC_ADC, 200000);
     2aa:	4c06      	ldr	r4, [pc, #24]	; (2c4 <ADC_Config+0x1c>)
     2ac:	4906      	ldr	r1, [pc, #24]	; (2c8 <ADC_Config+0x20>)
     2ae:	4620      	mov	r0, r4
     2b0:	f7ff ff0e 	bl	d0 <ADC_Init>

	/* ADC Channel Config */
	ADC_Channel_Config (LPC_ADC, ADC_CHANNEL_4, DISABLE);
     2b4:	4620      	mov	r0, r4
     2b6:	2104      	movs	r1, #4
     2b8:	2200      	movs	r2, #0
}
     2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	 *  ADC conversion rate = 200Khz
	 */
	ADC_Init(LPC_ADC, 200000);

	/* ADC Channel Config */
	ADC_Channel_Config (LPC_ADC, ADC_CHANNEL_4, DISABLE);
     2be:	f7ff bf63 	b.w	188 <ADC_Channel_Config>
     2c2:	bf00      	nop
     2c4:	40034000 	.word	0x40034000
     2c8:	00030d40 	.word	0x00030d40

000002cc <ADC_ChannelCmd>:
void ADC_ChannelCmd (LPC_ADC_TypeDef *ADCx, uint8_t Channel, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(Channel));

	if (NewState == ENABLE) {
     2cc:	2a01      	cmp	r2, #1
		ADCx->ADCR |= ADC_CR_CH_SEL(Channel);
     2ce:	6803      	ldr	r3, [r0, #0]
void ADC_ChannelCmd (LPC_ADC_TypeDef *ADCx, uint8_t Channel, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(Channel));

	if (NewState == ENABLE) {
     2d0:	d104      	bne.n	2dc <ADC_ChannelCmd+0x10>
		ADCx->ADCR |= ADC_CR_CH_SEL(Channel);
     2d2:	fa02 f201 	lsl.w	r2, r2, r1
     2d6:	431a      	orrs	r2, r3
     2d8:	6002      	str	r2, [r0, #0]
     2da:	4770      	bx	lr
	} else {
		ADCx->ADCR &= ~ADC_CR_CH_SEL(Channel);
     2dc:	2201      	movs	r2, #1
     2de:	fa02 f101 	lsl.w	r1, r2, r1
     2e2:	ea23 0301 	bic.w	r3, r3, r1
     2e6:	6003      	str	r3, [r0, #0]
     2e8:	4770      	bx	lr

000002ea <ADC_ChannelGetData>:
	uint32_t adc_value;

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));

	adc_value = *(uint32_t *) ((&ADCx->ADDR0) + channel);
     2ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	return ADC_DR_RESULT(adc_value);
     2ee:	6908      	ldr	r0, [r1, #16]
}
     2f0:	f3c0 100b 	ubfx	r0, r0, #4, #12
     2f4:	4770      	bx	lr

000002f6 <ADC_ChannelGetStatus>:

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));
	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));

	temp =  *(uint32_t *) ((&ADCx->ADDR0) + channel);
     2f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     2fa:	6908      	ldr	r0, [r1, #16]
	if (StatusType) {
     2fc:	b112      	cbz	r2, 304 <ADC_ChannelGetStatus+0xe>
		temp &= ADC_DR_DONE_FLAG;
     2fe:	f000 4200 	and.w	r2, r0, #2147483648	; 0x80000000
     302:	e001      	b.n	308 <ADC_ChannelGetStatus+0x12>
	}else{
		temp &= ADC_DR_OVERRUN_FLAG;
     304:	f000 4280 	and.w	r2, r0, #1073741824	; 0x40000000
		return SET;
	} else {
		return RESET;
	}

}
     308:	1c10      	adds	r0, r2, #0
     30a:	bf18      	it	ne
     30c:	2001      	movne	r0, #1
     30e:	4770      	bx	lr

00000310 <ADC_GlobalGetData>:
**********************************************************************/
uint32_t ADC_GlobalGetData(LPC_ADC_TypeDef *ADCx)
{
	CHECK_PARAM(PARAM_ADCx(ADCx));

	return ((uint32_t)(ADCx->ADGDR));
     310:	6840      	ldr	r0, [r0, #4]
}
     312:	4770      	bx	lr

00000314 <ADC_GlobalGetStatus>:
	uint32_t temp;

	CHECK_PARAM(PARAM_ADCx(ADCx));
	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));

	temp =  ADCx->ADGDR;
     314:	6840      	ldr	r0, [r0, #4]
	if (StatusType){
     316:	b111      	cbz	r1, 31e <ADC_GlobalGetStatus+0xa>
		temp &= ADC_DR_DONE_FLAG;
     318:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
     31c:	e001      	b.n	322 <ADC_GlobalGetStatus+0xe>
	}else{
		temp &= ADC_DR_OVERRUN_FLAG;
     31e:	f000 4180 	and.w	r1, r0, #1073741824	; 0x40000000
	if (temp){
		return SET;
	}else{
		return RESET;
	}
}
     322:	1c08      	adds	r0, r1, #0
     324:	bf18      	it	ne
     326:	2001      	movne	r0, #1
     328:	4770      	bx	lr
     32a:	bf00      	nop

0000032c <CLKPWR_SetPCLKDiv>:
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
     32c:	281f      	cmp	r0, #31
 *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
 *
 * @return none
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
     32e:	b510      	push	{r4, lr}
     330:	4b12      	ldr	r3, [pc, #72]	; (37c <CLKPWR_SetPCLKDiv+0x50>)
     332:	f04f 0203 	mov.w	r2, #3
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
     336:	d910      	bls.n	35a <CLKPWR_SetPCLKDiv+0x2e>
     338:	3820      	subs	r0, #32
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
     33a:	fa02 f200 	lsl.w	r2, r2, r0

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
     33e:	fa01 f000 	lsl.w	r0, r1, r0
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
     342:	f8d3 41ac 	ldr.w	r4, [r3, #428]	; 0x1ac
     346:	ea24 0202 	bic.w	r2, r4, r2
     34a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
     34e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
     352:	4310      	orrs	r0, r2
     354:	f8c3 01ac 	str.w	r0, [r3, #428]	; 0x1ac
     358:	bd10      	pop	{r4, pc}

	/* PCLKSEL0 selected */
	if (ClkType < 32)
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
     35a:	fa02 f200 	lsl.w	r2, r2, r0

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
     35e:	fa01 f100 	lsl.w	r1, r1, r0

	/* PCLKSEL0 selected */
	if (ClkType < 32)
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
     362:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
     366:	ea24 0202 	bic.w	r2, r4, r2
     36a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
     36e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
     372:	4311      	orrs	r1, r2
     374:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     378:	bd10      	pop	{r4, pc}
     37a:	bf00      	nop
     37c:	400fc000 	.word	0x400fc000

00000380 <CLKPWR_GetPCLKSEL>:
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
	uint32_t bitpos, retval;

	if (ClkType < 32)
     380:	281f      	cmp	r0, #31
     382:	4b06      	ldr	r3, [pc, #24]	; (39c <CLKPWR_GetPCLKSEL+0x1c>)
     384:	d802      	bhi.n	38c <CLKPWR_GetPCLKSEL+0xc>
	{
		bitpos = ClkType;
		retval = LPC_SC->PCLKSEL0;
     386:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
     38a:	e002      	b.n	392 <CLKPWR_GetPCLKSEL+0x12>
	}
	else
	{
		bitpos = ClkType - 32;
		retval = LPC_SC->PCLKSEL1;
     38c:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		bitpos = ClkType;
		retval = LPC_SC->PCLKSEL0;
	}
	else
	{
		bitpos = ClkType - 32;
     390:	3820      	subs	r0, #32
		retval = LPC_SC->PCLKSEL1;
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
     392:	fa21 f000 	lsr.w	r0, r1, r0
	return retval;
}
     396:	f000 0003 	and.w	r0, r0, #3
     39a:	4770      	bx	lr
     39c:	400fc000 	.word	0x400fc000

000003a0 <CLKPWR_GetPCLK>:
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
	uint32_t retval, div;

	retval = SystemCoreClock;
     3a0:	4b06      	ldr	r3, [pc, #24]	; (3bc <CLKPWR_GetPCLK+0x1c>)
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
     3a2:	b510      	push	{r4, lr}
	uint32_t retval, div;

	retval = SystemCoreClock;
     3a4:	681c      	ldr	r4, [r3, #0]
	div = CLKPWR_GetPCLKSEL(ClkType);
     3a6:	f7ff ffeb 	bl	380 <CLKPWR_GetPCLKSEL>

	switch (div)
     3aa:	b118      	cbz	r0, 3b4 <CLKPWR_GetPCLK+0x14>
	case 2:
		div = 2;
		break;

	case 3:
		div = 8;
     3ac:	2803      	cmp	r0, #3
     3ae:	bf08      	it	eq
     3b0:	2008      	moveq	r0, #8
     3b2:	e000      	b.n	3b6 <CLKPWR_GetPCLK+0x16>
	div = CLKPWR_GetPCLKSEL(ClkType);

	switch (div)
	{
	case 0:
		div = 4;
     3b4:	2004      	movs	r0, #4
		break;
	}
	retval /= div;

	return retval;
}
     3b6:	fbb4 f0f0 	udiv	r0, r4, r0
     3ba:	bd10      	pop	{r4, pc}
     3bc:	2007c008 	.word	0x2007c008

000003c0 <CLKPWR_ConfigPPWR>:
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
	if (NewState == ENABLE)
     3c0:	2901      	cmp	r1, #1
     3c2:	d108      	bne.n	3d6 <CLKPWR_ConfigPPWR+0x16>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
     3c4:	4b09      	ldr	r3, [pc, #36]	; (3ec <CLKPWR_ConfigPPWR+0x2c>)
     3c6:	4a0a      	ldr	r2, [pc, #40]	; (3f0 <CLKPWR_ConfigPPWR+0x30>)
     3c8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
     3cc:	4002      	ands	r2, r0
     3ce:	430a      	orrs	r2, r1
     3d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
     3d4:	4770      	bx	lr
	}
	else if (NewState == DISABLE)
     3d6:	b941      	cbnz	r1, 3ea <CLKPWR_ConfigPPWR+0x2a>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
     3d8:	4a04      	ldr	r2, [pc, #16]	; (3ec <CLKPWR_ConfigPPWR+0x2c>)
     3da:	4b05      	ldr	r3, [pc, #20]	; (3f0 <CLKPWR_ConfigPPWR+0x30>)
     3dc:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
     3e0:	400b      	ands	r3, r1
     3e2:	ea23 0300 	bic.w	r3, r3, r0
     3e6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
     3ea:	4770      	bx	lr
     3ec:	400fc000 	.word	0x400fc000
     3f0:	efeff7de 	.word	0xefeff7de

000003f4 <CLKPWR_Sleep>:
 * @param[in]	None
 * @return		None
 **********************************************************************/
void CLKPWR_Sleep(void)
{
	LPC_SC->PCON = 0x00;
     3f4:	4b02      	ldr	r3, [pc, #8]	; (400 <CLKPWR_Sleep+0xc>)
     3f6:	2200      	movs	r2, #0
     3f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
     3fc:	bf30      	wfi
     3fe:	4770      	bx	lr
     400:	400fc000 	.word	0x400fc000

00000404 <CLKPWR_DeepSleep>:
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     404:	4b04      	ldr	r3, [pc, #16]	; (418 <CLKPWR_DeepSleep+0x14>)
	LPC_SC->PCON = 0x8;
     406:	4905      	ldr	r1, [pc, #20]	; (41c <CLKPWR_DeepSleep+0x18>)
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     408:	2204      	movs	r2, #4
	LPC_SC->PCON = 0x8;
     40a:	2008      	movs	r0, #8
 * @return		None
 **********************************************************************/
void CLKPWR_DeepSleep(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     40c:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x8;
     40e:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
     412:	bf30      	wfi
     414:	4770      	bx	lr
     416:	bf00      	nop
     418:	e000ed00 	.word	0xe000ed00
     41c:	400fc000 	.word	0x400fc000

00000420 <CLKPWR_PowerDown>:
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     420:	4b04      	ldr	r3, [pc, #16]	; (434 <CLKPWR_PowerDown+0x14>)
	LPC_SC->PCON = 0x09;
     422:	4905      	ldr	r1, [pc, #20]	; (438 <CLKPWR_PowerDown+0x18>)
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     424:	2204      	movs	r2, #4
	LPC_SC->PCON = 0x09;
     426:	2009      	movs	r0, #9
 * @return		None
 **********************************************************************/
void CLKPWR_PowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     428:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x09;
     42a:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
     42e:	bf30      	wfi
     430:	4770      	bx	lr
     432:	bf00      	nop
     434:	e000ed00 	.word	0xe000ed00
     438:	400fc000 	.word	0x400fc000

0000043c <CLKPWR_DeepPowerDown>:
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     43c:	4b04      	ldr	r3, [pc, #16]	; (450 <CLKPWR_DeepPowerDown+0x14>)
	LPC_SC->PCON = 0x03;
     43e:	4905      	ldr	r1, [pc, #20]	; (454 <CLKPWR_DeepPowerDown+0x18>)
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     440:	2204      	movs	r2, #4
	LPC_SC->PCON = 0x03;
     442:	2003      	movs	r0, #3
 * @return		None
 **********************************************************************/
void CLKPWR_DeepPowerDown(void)
{
    /* Deep-Sleep Mode, set SLEEPDEEP bit */
	SCB->SCR = 0x4;
     444:	611a      	str	r2, [r3, #16]
	LPC_SC->PCON = 0x03;
     446:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
     44a:	bf30      	wfi
     44c:	4770      	bx	lr
     44e:	bf00      	nop
     450:	e000ed00 	.word	0xe000ed00
     454:	400fc000 	.word	0x400fc000

00000458 <EINT3_IRQHandler>:
 * @brief		External interrupt 3 handler sub-routine
 * @param[in]	None
 * @return		None
 **********************************************************************/
void EINT3_IRQHandler(void)
{
     458:	4770      	bx	lr

0000045a <GPIO_SetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
     45a:	2804      	cmp	r0, #4
     45c:	d80b      	bhi.n	476 <GPIO_SetDir+0x1c>
     45e:	4b06      	ldr	r3, [pc, #24]	; (478 <GPIO_SetDir+0x1e>)
     460:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     464:	b138      	cbz	r0, 476 <GPIO_SetDir+0x1c>
		// Enable Output
		if (dir) {
     466:	b112      	cbz	r2, 46e <GPIO_SetDir+0x14>
			pGPIO->FIODIR |= bitValue;
     468:	6803      	ldr	r3, [r0, #0]
     46a:	4319      	orrs	r1, r3
     46c:	e002      	b.n	474 <GPIO_SetDir+0x1a>
		}
		// Enable Input
		else {
			pGPIO->FIODIR &= ~bitValue;
     46e:	6802      	ldr	r2, [r0, #0]
     470:	ea22 0101 	bic.w	r1, r2, r1
     474:	6001      	str	r1, [r0, #0]
     476:	4770      	bx	lr
     478:	00005204 	.word	0x00005204

0000047c <GPIO_SetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
     47c:	2804      	cmp	r0, #4
     47e:	d804      	bhi.n	48a <GPIO_SetValue+0xe>
     480:	4b02      	ldr	r3, [pc, #8]	; (48c <GPIO_SetValue+0x10>)
     482:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     486:	b100      	cbz	r0, 48a <GPIO_SetValue+0xe>
		pGPIO->FIOSET = bitValue;
     488:	6181      	str	r1, [r0, #24]
     48a:	4770      	bx	lr
     48c:	00005204 	.word	0x00005204

00000490 <GPIO_ClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
     490:	2804      	cmp	r0, #4
     492:	d804      	bhi.n	49e <GPIO_ClearValue+0xe>
     494:	4b02      	ldr	r3, [pc, #8]	; (4a0 <GPIO_ClearValue+0x10>)
     496:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     49a:	b100      	cbz	r0, 49e <GPIO_ClearValue+0xe>
		pGPIO->FIOCLR = bitValue;
     49c:	61c1      	str	r1, [r0, #28]
     49e:	4770      	bx	lr
     4a0:	00005204 	.word	0x00005204

000004a4 <GPIO_ReadValue>:
 *
 * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 * its direction is input or output.
 **********************************************************************/
uint32_t GPIO_ReadValue(uint8_t portNum)
{
     4a4:	2804      	cmp	r0, #4
     4a6:	d805      	bhi.n	4b4 <GPIO_ReadValue+0x10>
     4a8:	4b03      	ldr	r3, [pc, #12]	; (4b8 <GPIO_ReadValue+0x14>)
     4aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);

	if (pGPIO != NULL) {
     4ae:	b110      	cbz	r0, 4b6 <GPIO_ReadValue+0x12>
		return pGPIO->FIOPIN;
     4b0:	6940      	ldr	r0, [r0, #20]
     4b2:	4770      	bx	lr
	}

	return (0);
     4b4:	2000      	movs	r0, #0
}
     4b6:	4770      	bx	lr
     4b8:	00005204 	.word	0x00005204

000004bc <GPIO_IntCmd>:
 * 							- 1: Falling edge
 * @return		None
 **********************************************************************/
void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	if((portNum == 0)&&(edgeState == 0))
     4bc:	b918      	cbnz	r0, 4c6 <GPIO_IntCmd+0xa>
     4be:	b942      	cbnz	r2, 4d2 <GPIO_IntCmd+0x16>
		LPC_GPIOINT->IO0IntEnR = bitValue;
     4c0:	4b09      	ldr	r3, [pc, #36]	; (4e8 <GPIO_IntCmd+0x2c>)
     4c2:	6119      	str	r1, [r3, #16]
     4c4:	4770      	bx	lr
	else if ((portNum == 2)&&(edgeState == 0))
     4c6:	2802      	cmp	r0, #2
     4c8:	d10d      	bne.n	4e6 <GPIO_IntCmd+0x2a>
     4ca:	b93a      	cbnz	r2, 4dc <GPIO_IntCmd+0x20>
		LPC_GPIOINT->IO2IntEnR = bitValue;
     4cc:	4806      	ldr	r0, [pc, #24]	; (4e8 <GPIO_IntCmd+0x2c>)
     4ce:	6301      	str	r1, [r0, #48]	; 0x30
     4d0:	4770      	bx	lr
	else if ((portNum == 0)&&(edgeState == 1))
     4d2:	2a01      	cmp	r2, #1
     4d4:	d107      	bne.n	4e6 <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO0IntEnF = bitValue;
     4d6:	4a04      	ldr	r2, [pc, #16]	; (4e8 <GPIO_IntCmd+0x2c>)
     4d8:	6151      	str	r1, [r2, #20]
     4da:	4770      	bx	lr
	else if ((portNum == 2)&&(edgeState == 1))
     4dc:	2a01      	cmp	r2, #1
     4de:	d102      	bne.n	4e6 <GPIO_IntCmd+0x2a>
		LPC_GPIOINT->IO2IntEnF = bitValue;
     4e0:	4b01      	ldr	r3, [pc, #4]	; (4e8 <GPIO_IntCmd+0x2c>)
     4e2:	6359      	str	r1, [r3, #52]	; 0x34
     4e4:	4770      	bx	lr
     4e6:	e7fe      	b.n	4e6 <GPIO_IntCmd+0x2a>
     4e8:	40028080 	.word	0x40028080

000004ec <GPIO_GetIntStatus>:
 * 								edge on P0.0
 * 						- DISABLE: A rising edge has not been detected on P0.0
 **********************************************************************/
FunctionalState GPIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
	if((portNum == 0) && (edgeState == 0))//Rising Edge
     4ec:	b918      	cbnz	r0, 4f6 <GPIO_GetIntStatus+0xa>
     4ee:	b942      	cbnz	r2, 502 <GPIO_GetIntStatus+0x16>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatR)>>pinNum)& 0x1));
     4f0:	480b      	ldr	r0, [pc, #44]	; (520 <GPIO_GetIntStatus+0x34>)
     4f2:	6840      	ldr	r0, [r0, #4]
     4f4:	e00e      	b.n	514 <GPIO_GetIntStatus+0x28>
	else if ((portNum == 2) && (edgeState == 0))
     4f6:	2802      	cmp	r0, #2
     4f8:	d111      	bne.n	51e <GPIO_GetIntStatus+0x32>
     4fa:	b93a      	cbnz	r2, 50c <GPIO_GetIntStatus+0x20>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
     4fc:	4a08      	ldr	r2, [pc, #32]	; (520 <GPIO_GetIntStatus+0x34>)
     4fe:	6a50      	ldr	r0, [r2, #36]	; 0x24
     500:	e008      	b.n	514 <GPIO_GetIntStatus+0x28>
	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
     502:	2a01      	cmp	r2, #1
     504:	d10b      	bne.n	51e <GPIO_GetIntStatus+0x32>
		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
     506:	4b06      	ldr	r3, [pc, #24]	; (520 <GPIO_GetIntStatus+0x34>)
     508:	6898      	ldr	r0, [r3, #8]
     50a:	e003      	b.n	514 <GPIO_GetIntStatus+0x28>
	else if ((portNum == 2) && (edgeState == 1))
     50c:	2a01      	cmp	r2, #1
     50e:	d106      	bne.n	51e <GPIO_GetIntStatus+0x32>
		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
     510:	4b03      	ldr	r3, [pc, #12]	; (520 <GPIO_GetIntStatus+0x34>)
     512:	6a98      	ldr	r0, [r3, #40]	; 0x28
     514:	fa20 f101 	lsr.w	r1, r0, r1
     518:	f001 0001 	and.w	r0, r1, #1
     51c:	4770      	bx	lr
     51e:	e7fe      	b.n	51e <GPIO_GetIntStatus+0x32>
     520:	40028080 	.word	0x40028080

00000524 <GPIO_ClearInt>:
 * 							in range from 0 to 0xFFFFFFFF.
 * @return		None
 **********************************************************************/
void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	if(portNum == 0)
     524:	b910      	cbnz	r0, 52c <GPIO_ClearInt+0x8>
		LPC_GPIOINT->IO0IntClr = bitValue;
     526:	4804      	ldr	r0, [pc, #16]	; (538 <GPIO_ClearInt+0x14>)
     528:	60c1      	str	r1, [r0, #12]
     52a:	4770      	bx	lr
	else if (portNum == 2)
     52c:	2802      	cmp	r0, #2
     52e:	d102      	bne.n	536 <GPIO_ClearInt+0x12>
		LPC_GPIOINT->IO2IntClr = bitValue;
     530:	4b01      	ldr	r3, [pc, #4]	; (538 <GPIO_ClearInt+0x14>)
     532:	62d9      	str	r1, [r3, #44]	; 0x2c
     534:	4770      	bx	lr
     536:	e7fe      	b.n	536 <GPIO_ClearInt+0x12>
     538:	40028080 	.word	0x40028080

0000053c <FIO_SetDir>:
/**
 * @brief The same with GPIO_SetDir()
 */
void FIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
	GPIO_SetDir(portNum, bitValue, dir);
     53c:	f7ff bf8d 	b.w	45a <GPIO_SetDir>

00000540 <FIO_SetValue>:
/**
 * @brief The same with GPIO_SetValue()
 */
void FIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
	GPIO_SetValue(portNum, bitValue);
     540:	f7ff bf9c 	b.w	47c <GPIO_SetValue>

00000544 <FIO_ClearValue>:
/**
 * @brief The same with GPIO_ClearValue()
 */
void FIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
	GPIO_ClearValue(portNum, bitValue);
     544:	f7ff bfa4 	b.w	490 <GPIO_ClearValue>

00000548 <FIO_ReadValue>:
/**
 * @brief The same with GPIO_ReadValue()
 */
uint32_t FIO_ReadValue(uint8_t portNum)
{
	return (GPIO_ReadValue(portNum));
     548:	f7ff bfac 	b.w	4a4 <GPIO_ReadValue>

0000054c <FIO_IntCmd>:
/**
 * @brief The same with GPIO_IntCmd()
 */
void FIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
{
	GPIO_IntCmd(portNum, bitValue, edgeState);
     54c:	f7ff bfb6 	b.w	4bc <GPIO_IntCmd>

00000550 <FIO_GetIntStatus>:
/**
 * @brief The same with GPIO_GetIntStatus()
 */
FunctionalState FIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
{
	return (GPIO_GetIntStatus(portNum, pinNum, edgeState));
     550:	f7ff bfcc 	b.w	4ec <GPIO_GetIntStatus>

00000554 <FIO_ClearInt>:
/**
 * @brief The same with GPIO_ClearInt()
 */
void FIO_ClearInt(uint8_t portNum, uint32_t bitValue)
{
	GPIO_ClearInt(portNum, bitValue);
     554:	f7ff bfe6 	b.w	524 <GPIO_ClearInt>

00000558 <FIO_SetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_SetMask(uint8_t portNum, uint32_t bitValue, uint8_t maskValue)
{
     558:	2804      	cmp	r0, #4
     55a:	d80b      	bhi.n	574 <FIO_SetMask+0x1c>
     55c:	4b06      	ldr	r3, [pc, #24]	; (578 <FIO_SetMask+0x20>)
     55e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	LPC_GPIO_TypeDef *pFIO = GPIO_GetPointer(portNum);
	if(pFIO != NULL) {
     562:	b138      	cbz	r0, 574 <FIO_SetMask+0x1c>
		// Mask
		if (maskValue){
     564:	b112      	cbz	r2, 56c <FIO_SetMask+0x14>
			pFIO->FIOMASK |= bitValue;
     566:	6903      	ldr	r3, [r0, #16]
     568:	4319      	orrs	r1, r3
     56a:	e002      	b.n	572 <FIO_SetMask+0x1a>
		}
		// Un-mask
		else {
			pFIO->FIOMASK &= ~bitValue;
     56c:	6902      	ldr	r2, [r0, #16]
     56e:	ea22 0101 	bic.w	r1, r2, r1
     572:	6101      	str	r1, [r0, #16]
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	00005204 	.word	0x00005204

0000057c <FIO_HalfWordSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetDir(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t dir)
{
     57c:	2804      	cmp	r0, #4
     57e:	b510      	push	{r4, lr}
     580:	d819      	bhi.n	5b6 <FIO_HalfWordSetDir+0x3a>
     582:	4c0d      	ldr	r4, [pc, #52]	; (5b8 <FIO_HalfWordSetDir+0x3c>)
     584:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     588:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     58a:	b1a0      	cbz	r0, 5b6 <FIO_HalfWordSetDir+0x3a>
		// Output direction
		if (dir) {
     58c:	b143      	cbz	r3, 5a0 <FIO_HalfWordSetDir+0x24>
			// Upper
			if(halfwordNum) {
     58e:	b119      	cbz	r1, 598 <FIO_HalfWordSetDir+0x1c>
				pFIO->FIODIRU |= bitValue;
     590:	8843      	ldrh	r3, [r0, #2]
     592:	b299      	uxth	r1, r3
     594:	430a      	orrs	r2, r1
     596:	e008      	b.n	5aa <FIO_HalfWordSetDir+0x2e>
			}
			// lower
			else {
				pFIO->FIODIRL |= bitValue;
     598:	8803      	ldrh	r3, [r0, #0]
     59a:	b299      	uxth	r1, r3
     59c:	430a      	orrs	r2, r1
     59e:	e009      	b.n	5b4 <FIO_HalfWordSetDir+0x38>
     5a0:	43d2      	mvns	r2, r2
			}
		}
		// Input direction
		else {
			// Upper
			if(halfwordNum) {
     5a2:	b121      	cbz	r1, 5ae <FIO_HalfWordSetDir+0x32>
				pFIO->FIODIRU &= ~bitValue;
     5a4:	8843      	ldrh	r3, [r0, #2]
     5a6:	b299      	uxth	r1, r3
     5a8:	400a      	ands	r2, r1
     5aa:	8042      	strh	r2, [r0, #2]
     5ac:	bd10      	pop	{r4, pc}
			}
			// lower
			else {
				pFIO->FIODIRL &= ~bitValue;
     5ae:	8803      	ldrh	r3, [r0, #0]
     5b0:	b299      	uxth	r1, r3
     5b2:	400a      	ands	r2, r1
     5b4:	8002      	strh	r2, [r0, #0]
     5b6:	bd10      	pop	{r4, pc}
     5b8:	00005204 	.word	0x00005204

000005bc <FIO_HalfWordSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_HalfWordSetMask(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t maskValue)
{
     5bc:	2804      	cmp	r0, #4
     5be:	b510      	push	{r4, lr}
     5c0:	d819      	bhi.n	5f6 <FIO_HalfWordSetMask+0x3a>
     5c2:	4c0d      	ldr	r4, [pc, #52]	; (5f8 <FIO_HalfWordSetMask+0x3c>)
     5c4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     5c8:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     5ca:	b1a0      	cbz	r0, 5f6 <FIO_HalfWordSetMask+0x3a>
		// Mask
		if (maskValue){
     5cc:	b143      	cbz	r3, 5e0 <FIO_HalfWordSetMask+0x24>
			// Upper
			if(halfwordNum) {
     5ce:	b119      	cbz	r1, 5d8 <FIO_HalfWordSetMask+0x1c>
				pFIO->FIOMASKU |= bitValue;
     5d0:	8a43      	ldrh	r3, [r0, #18]
     5d2:	b299      	uxth	r1, r3
     5d4:	430a      	orrs	r2, r1
     5d6:	e008      	b.n	5ea <FIO_HalfWordSetMask+0x2e>
			}
			// lower
			else {
				pFIO->FIOMASKL |= bitValue;
     5d8:	8a03      	ldrh	r3, [r0, #16]
     5da:	b299      	uxth	r1, r3
     5dc:	430a      	orrs	r2, r1
     5de:	e009      	b.n	5f4 <FIO_HalfWordSetMask+0x38>
     5e0:	43d2      	mvns	r2, r2
			}
		}
		// Un-mask
		else {
			// Upper
			if(halfwordNum) {
     5e2:	b121      	cbz	r1, 5ee <FIO_HalfWordSetMask+0x32>
				pFIO->FIOMASKU &= ~bitValue;
     5e4:	8a43      	ldrh	r3, [r0, #18]
     5e6:	b299      	uxth	r1, r3
     5e8:	400a      	ands	r2, r1
     5ea:	8242      	strh	r2, [r0, #18]
     5ec:	bd10      	pop	{r4, pc}
			}
			// lower
			else {
				pFIO->FIOMASKL &= ~bitValue;
     5ee:	8a03      	ldrh	r3, [r0, #16]
     5f0:	b299      	uxth	r1, r3
     5f2:	400a      	ands	r2, r1
     5f4:	8202      	strh	r2, [r0, #16]
     5f6:	bd10      	pop	{r4, pc}
     5f8:	00005204 	.word	0x00005204

000005fc <FIO_HalfWordSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordSetValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
     5fc:	2804      	cmp	r0, #4
     5fe:	d808      	bhi.n	612 <FIO_HalfWordSetValue+0x16>
     600:	4b04      	ldr	r3, [pc, #16]	; (614 <FIO_HalfWordSetValue+0x18>)
     602:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     606:	6943      	ldr	r3, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     608:	b11b      	cbz	r3, 612 <FIO_HalfWordSetValue+0x16>
		// Upper
		if(halfwordNum) {
     60a:	b109      	cbz	r1, 610 <FIO_HalfWordSetValue+0x14>
			pFIO->FIOSETU = bitValue;
     60c:	835a      	strh	r2, [r3, #26]
     60e:	4770      	bx	lr
		}
		// lower
		else {
			pFIO->FIOSETL = bitValue;
     610:	831a      	strh	r2, [r3, #24]
     612:	4770      	bx	lr
     614:	00005204 	.word	0x00005204

00000618 <FIO_HalfWordClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_HalfWordClearValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
{
     618:	2804      	cmp	r0, #4
     61a:	d808      	bhi.n	62e <FIO_HalfWordClearValue+0x16>
     61c:	4b04      	ldr	r3, [pc, #16]	; (630 <FIO_HalfWordClearValue+0x18>)
     61e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     622:	6943      	ldr	r3, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     624:	b11b      	cbz	r3, 62e <FIO_HalfWordClearValue+0x16>
		// Upper
		if(halfwordNum) {
     626:	b109      	cbz	r1, 62c <FIO_HalfWordClearValue+0x14>
			pFIO->FIOCLRU = bitValue;
     628:	83da      	strh	r2, [r3, #30]
     62a:	4770      	bx	lr
		}
		// lower
		else {
			pFIO->FIOCLRL = bitValue;
     62c:	839a      	strh	r2, [r3, #28]
     62e:	4770      	bx	lr
     630:	00005204 	.word	0x00005204

00000634 <FIO_HalfWordReadValue>:
 * @return		Current value of FIO port pin of specified halfword.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint16_t FIO_HalfWordReadValue(uint8_t portNum, uint8_t halfwordNum)
{
     634:	2804      	cmp	r0, #4
     636:	d80a      	bhi.n	64e <FIO_HalfWordReadValue+0x1a>
     638:	4b06      	ldr	r3, [pc, #24]	; (654 <FIO_HalfWordReadValue+0x20>)
     63a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     63e:	6940      	ldr	r0, [r0, #20]
	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
	if(pFIO != NULL) {
     640:	b130      	cbz	r0, 650 <FIO_HalfWordReadValue+0x1c>
		// Upper
		if(halfwordNum) {
     642:	b109      	cbz	r1, 648 <FIO_HalfWordReadValue+0x14>
			return (pFIO->FIOPINU);
     644:	8ac1      	ldrh	r1, [r0, #22]
     646:	e000      	b.n	64a <FIO_HalfWordReadValue+0x16>
		}
		// lower
		else {
			return (pFIO->FIOPINL);
     648:	8a81      	ldrh	r1, [r0, #20]
     64a:	b288      	uxth	r0, r1
     64c:	4770      	bx	lr
		}
	}
	return (0);
     64e:	2000      	movs	r0, #0
}
     650:	4770      	bx	lr
     652:	bf00      	nop
     654:	00005204 	.word	0x00005204

00000658 <FIO_ByteSetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetDir(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t dir)
{
     658:	2804      	cmp	r0, #4
     65a:	b510      	push	{r4, lr}
     65c:	d810      	bhi.n	680 <FIO_ByteSetDir+0x28>
     65e:	4c09      	ldr	r4, [pc, #36]	; (684 <FIO_ByteSetDir+0x2c>)
     660:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     664:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
     666:	b158      	cbz	r0, 680 <FIO_ByteSetDir+0x28>
		// Output direction
		if (dir) {
     668:	b123      	cbz	r3, 674 <FIO_ByteSetDir+0x1c>
			if (byteNum <= 3) {
     66a:	2903      	cmp	r1, #3
     66c:	d808      	bhi.n	680 <FIO_ByteSetDir+0x28>
				pFIO->FIODIR[byteNum] |= bitValue;
     66e:	5c43      	ldrb	r3, [r0, r1]
     670:	431a      	orrs	r2, r3
     672:	e004      	b.n	67e <FIO_ByteSetDir+0x26>
			}
		}
		// Input direction
		else {
			if (byteNum <= 3) {
     674:	2903      	cmp	r1, #3
     676:	d803      	bhi.n	680 <FIO_ByteSetDir+0x28>
				pFIO->FIODIR[byteNum] &= ~bitValue;
     678:	5c43      	ldrb	r3, [r0, r1]
     67a:	ea23 0202 	bic.w	r2, r3, r2
     67e:	5442      	strb	r2, [r0, r1]
     680:	bd10      	pop	{r4, pc}
     682:	bf00      	nop
     684:	00005204 	.word	0x00005204

00000688 <FIO_ByteSetMask>:
 * enables an access to the corresponding physical pin via a read or write access,
 * while value '1' on bit (masked) that corresponding pin will not be changed
 * with write access and if read, will not be reflected in the updated pin.
 **********************************************************************/
void FIO_ByteSetMask(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t maskValue)
{
     688:	2804      	cmp	r0, #4
     68a:	b510      	push	{r4, lr}
     68c:	d812      	bhi.n	6b4 <FIO_ByteSetMask+0x2c>
     68e:	4c0a      	ldr	r4, [pc, #40]	; (6b8 <FIO_ByteSetMask+0x30>)
     690:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     694:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if(pFIO != NULL) {
     696:	b168      	cbz	r0, 6b4 <FIO_ByteSetMask+0x2c>
		// Mask
		if (maskValue) {
     698:	b12b      	cbz	r3, 6a6 <FIO_ByteSetMask+0x1e>
			if (byteNum <= 3) {
     69a:	2903      	cmp	r1, #3
     69c:	d80a      	bhi.n	6b4 <FIO_ByteSetMask+0x2c>
				pFIO->FIOMASK[byteNum] |= bitValue;
     69e:	1841      	adds	r1, r0, r1
     6a0:	7c08      	ldrb	r0, [r1, #16]
     6a2:	4302      	orrs	r2, r0
     6a4:	e005      	b.n	6b2 <FIO_ByteSetMask+0x2a>
			}
		}
		// Un-mask
		else {
			if (byteNum <= 3) {
     6a6:	2903      	cmp	r1, #3
     6a8:	d804      	bhi.n	6b4 <FIO_ByteSetMask+0x2c>
				pFIO->FIOMASK[byteNum] &= ~bitValue;
     6aa:	1841      	adds	r1, r0, r1
     6ac:	7c0b      	ldrb	r3, [r1, #16]
     6ae:	ea23 0202 	bic.w	r2, r3, r2
     6b2:	740a      	strb	r2, [r1, #16]
     6b4:	bd10      	pop	{r4, pc}
     6b6:	bf00      	nop
     6b8:	00005204 	.word	0x00005204

000006bc <FIO_ByteSetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteSetValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
     6bc:	2804      	cmp	r0, #4
     6be:	d808      	bhi.n	6d2 <FIO_ByteSetValue+0x16>
     6c0:	4b04      	ldr	r3, [pc, #16]	; (6d4 <FIO_ByteSetValue+0x18>)
     6c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     6c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
     6c8:	b11b      	cbz	r3, 6d2 <FIO_ByteSetValue+0x16>
		if (byteNum <= 3){
     6ca:	2903      	cmp	r1, #3
			pFIO->FIOSET[byteNum] = bitValue;
     6cc:	bf9c      	itt	ls
     6ce:	1859      	addls	r1, r3, r1
     6d0:	760a      	strbls	r2, [r1, #24]
     6d2:	4770      	bx	lr
     6d4:	00005204 	.word	0x00005204

000006d8 <FIO_ByteClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void FIO_ByteClearValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
{
     6d8:	2804      	cmp	r0, #4
     6da:	d808      	bhi.n	6ee <FIO_ByteClearValue+0x16>
     6dc:	4b04      	ldr	r3, [pc, #16]	; (6f0 <FIO_ByteClearValue+0x18>)
     6de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     6e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
     6e4:	b11b      	cbz	r3, 6ee <FIO_ByteClearValue+0x16>
		if (byteNum <= 3){
     6e6:	2903      	cmp	r1, #3
			pFIO->FIOCLR[byteNum] = bitValue;
     6e8:	bf9c      	itt	ls
     6ea:	1859      	addls	r1, r3, r1
     6ec:	770a      	strbls	r2, [r1, #28]
     6ee:	4770      	bx	lr
     6f0:	00005204 	.word	0x00005204

000006f4 <FIO_ByteReadValue>:
 * @return		Current value of FIO port pin of specified byte part.
 * Note: Return value contain state of each port pin (bit) on that FIO regardless
 * its direction is input or output.
 **********************************************************************/
uint8_t FIO_ByteReadValue(uint8_t portNum, uint8_t byteNum)
{
     6f4:	2804      	cmp	r0, #4
     6f6:	d809      	bhi.n	70c <FIO_ByteReadValue+0x18>
     6f8:	4b05      	ldr	r3, [pc, #20]	; (710 <FIO_ByteReadValue+0x1c>)
     6fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     6fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
	if (pFIO != NULL) {
     700:	b128      	cbz	r0, 70e <FIO_ByteReadValue+0x1a>
		if (byteNum <= 3){
     702:	2903      	cmp	r1, #3
     704:	d802      	bhi.n	70c <FIO_ByteReadValue+0x18>
			return (pFIO->FIOPIN[byteNum]);
     706:	1841      	adds	r1, r0, r1
     708:	7d08      	ldrb	r0, [r1, #20]
     70a:	4770      	bx	lr
		}
	}
	return (0);
     70c:	2000      	movs	r0, #0
}
     70e:	4770      	bx	lr
     710:	00005204 	.word	0x00005204

00000714 <I2C_getNum>:
 * 				- LPC_I2C2
 * @return 		I2C number, could be: 0..2
 *********************************************************************/
static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx)
{
	if (I2Cx == LPC_I2C0)
     714:	4b09      	ldr	r3, [pc, #36]	; (73c <I2C_getNum+0x28>)
     716:	4298      	cmp	r0, r3
     718:	d00b      	beq.n	732 <I2C_getNum+0x1e>
	{
		return (0);
	}
	else if (I2Cx == LPC_I2C1)
     71a:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
     71e:	4288      	cmp	r0, r1
     720:	d009      	beq.n	736 <I2C_getNum+0x22>
	{
		return (1);
	}
	else if (I2Cx == LPC_I2C2)
	{
		return (2);
     722:	f501 2288 	add.w	r2, r1, #278528	; 0x44000
     726:	4290      	cmp	r0, r2
     728:	bf14      	ite	ne
     72a:	f04f 30ff 	movne.w	r0, #4294967295
     72e:	2002      	moveq	r0, #2
     730:	4770      	bx	lr
 *********************************************************************/
static int32_t I2C_getNum(LPC_I2C_TypeDef *I2Cx)
{
	if (I2Cx == LPC_I2C0)
	{
		return (0);
     732:	2000      	movs	r0, #0
     734:	4770      	bx	lr
	}
	else if (I2Cx == LPC_I2C1)
	{
		return (1);
     736:	2001      	movs	r0, #1
	else if (I2Cx == LPC_I2C2)
	{
		return (2);
	}
	return (-1);
}
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	4001c000 	.word	0x4001c000

00000740 <I2C_SendByte>:
 * @return 		value of I2C status register after sending
 *********************************************************************/
static uint32_t I2C_SendByte (LPC_I2C_TypeDef *I2Cx, uint8_t databyte)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     740:	6803      	ldr	r3, [r0, #0]
     742:	069a      	lsls	r2, r3, #26
     744:	d501      	bpl.n	74a <I2C_SendByte+0xa>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     746:	2220      	movs	r2, #32
     748:	6182      	str	r2, [r0, #24]
	}
	I2Cx->I2DAT = databyte & I2C_I2DAT_BITMASK;
     74a:	6081      	str	r1, [r0, #8]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     74c:	2108      	movs	r1, #8
     74e:	6181      	str	r1, [r0, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     750:	6803      	ldr	r3, [r0, #0]
     752:	071b      	lsls	r3, r3, #28
     754:	d5fc      	bpl.n	750 <I2C_SendByte+0x10>
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     756:	6840      	ldr	r0, [r0, #4]
}
     758:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
     75c:	4770      	bx	lr

0000075e <Buffer_Init>:
 * @brief		Initialize buffer
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Buffer_Init (void)
{
     75e:	2300      	movs	r3, #0
	uint8_t i;
#if (I2C_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE; i++)
	{
		I2C_Tx_Buf[i] = 0;
     760:	4904      	ldr	r1, [pc, #16]	; (774 <Buffer_Init+0x16>)
		I2C_Rx_Buf[i] = 0;
     762:	4805      	ldr	r0, [pc, #20]	; (778 <Buffer_Init+0x1a>)
{
	uint8_t i;
#if (I2C_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE; i++)
	{
		I2C_Tx_Buf[i] = 0;
     764:	2200      	movs	r2, #0
     766:	545a      	strb	r2, [r3, r1]
		I2C_Rx_Buf[i] = 0;
     768:	541a      	strb	r2, [r3, r0]
     76a:	3301      	adds	r3, #1
 **********************************************************************/
void Buffer_Init (void)
{
	uint8_t i;
#if (I2C_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE; i++)
     76c:	2b40      	cmp	r3, #64	; 0x40
     76e:	d1f7      	bne.n	760 <Buffer_Init+0x2>
	{
		I2C_Tx_Buf[i] = 0;
		I2C_Rx_Buf[i] = 0;
	}
#endif
}
     770:	4770      	bx	lr
     772:	bf00      	nop
     774:	1000028c 	.word	0x1000028c
     778:	10000038 	.word	0x10000038

0000077c <I2C_Init>:
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
     77c:	b538      	push	{r3, r4, r5, lr}
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
     77e:	4b1b      	ldr	r3, [pc, #108]	; (7ec <__Stack_Size+0x1c>)
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
     780:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
     782:	4298      	cmp	r0, r3
 * @param[in]	clockrate Target clock rate value to initialized I2C
 * 				peripheral (Hz)
 * @return 		None
 *********************************************************************/
void I2C_Init(LPC_I2C_TypeDef *I2Cx, uint32_t clockrate)
{
     784:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (I2Cx==LPC_I2C0)
     786:	d109      	bne.n	79c <I2C_Init+0x20>
	{
		/* Set up clock and power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
     788:	2080      	movs	r0, #128	; 0x80
     78a:	2101      	movs	r1, #1
     78c:	f7ff fe18 	bl	3c0 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C0 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
     790:	200e      	movs	r0, #14
     792:	2102      	movs	r1, #2
     794:	f7ff fdca 	bl	32c <CLKPWR_SetPCLKDiv>
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	// Get PCLK of I2C controller
	if (I2Cx == LPC_I2C0)
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
     798:	200e      	movs	r0, #14
     79a:	e01a      	b.n	7d2 <__Stack_Size+0x2>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, ENABLE);
		/* As default, peripheral clock for I2C0 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C0, CLKPWR_PCLKSEL_CCLK_DIV_2);
	}
	else if (I2Cx==LPC_I2C1)
     79c:	4814      	ldr	r0, [pc, #80]	; (7f0 <__Stack_Size+0x20>)
     79e:	4284      	cmp	r4, r0
     7a0:	d10a      	bne.n	7b8 <I2C_Init+0x3c>
	{
		/* Set up clock and power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
     7a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     7a6:	2101      	movs	r1, #1
     7a8:	f7ff fe0a 	bl	3c0 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C1 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
     7ac:	2026      	movs	r0, #38	; 0x26
     7ae:	2102      	movs	r1, #2
     7b0:	f7ff fdbc 	bl	32c <CLKPWR_SetPCLKDiv>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C0) / target_clock;
	}
	else if (I2Cx == LPC_I2C1)
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
     7b4:	2026      	movs	r0, #38	; 0x26
     7b6:	e00c      	b.n	7d2 <__Stack_Size+0x2>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, ENABLE);
		/* As default, peripheral clock for I2C1 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C1, CLKPWR_PCLKSEL_CCLK_DIV_2);
	}
	else if (I2Cx==LPC_I2C2)
     7b8:	490e      	ldr	r1, [pc, #56]	; (7f4 <__Stack_Size+0x24>)
     7ba:	428c      	cmp	r4, r1
     7bc:	d114      	bne.n	7e8 <__Stack_Size+0x18>
	{
		/* Set up clock and power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, ENABLE);
     7be:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
     7c2:	2101      	movs	r1, #1
     7c4:	f7ff fdfc 	bl	3c0 <CLKPWR_ConfigPPWR>
		/* As default, peripheral clock for I2C2 module
		 * is set to FCCLK / 2 */
		CLKPWR_SetPCLKDiv(CLKPWR_PCLKSEL_I2C2, CLKPWR_PCLKSEL_CCLK_DIV_2);
     7c8:	2034      	movs	r0, #52	; 0x34
     7ca:	2102      	movs	r1, #2
     7cc:	f7ff fdae 	bl	32c <CLKPWR_SetPCLKDiv>
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C1) / target_clock;
	}
	else if (I2Cx == LPC_I2C2)
	{
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
     7d0:	2034      	movs	r0, #52	; 0x34
     7d2:	f7ff fde5 	bl	3a0 <CLKPWR_GetPCLK>
     7d6:	fbb0 f2f5 	udiv	r2, r0, r5
	}

	/* Set the I2C clock value to register */
	I2Cx->I2SCLH = (uint32_t)(temp / 2);
     7da:	0853      	lsrs	r3, r2, #1
     7dc:	6123      	str	r3, [r4, #16]
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
     7de:	6920      	ldr	r0, [r4, #16]
     7e0:	1a11      	subs	r1, r2, r0
	}

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
     7e2:	2264      	movs	r2, #100	; 0x64
		temp = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_I2C2) / target_clock;
	}

	/* Set the I2C clock value to register */
	I2Cx->I2SCLH = (uint32_t)(temp / 2);
	I2Cx->I2SCLL = (uint32_t)(temp - I2Cx->I2SCLH);
     7e4:	6161      	str	r1, [r4, #20]
	}

    /* Set clock rate */
    I2C_SetClock(I2Cx, clockrate);
    /* Set I2C operation to default */
    I2Cx->I2CONCLR = (I2C_I2CONCLR_AAC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_I2ENC);
     7e6:	61a2      	str	r2, [r4, #24]
     7e8:	bd38      	pop	{r3, r4, r5, pc}
     7ea:	bf00      	nop
     7ec:	4001c000 	.word	0x4001c000
     7f0:	4005c000 	.word	0x4005c000
     7f4:	400a0000 	.word	0x400a0000

000007f8 <I2C_Config>:
void I2C_Config (LPC_I2C_TypeDef *I2Cx)
{
	// Pin configuration for I2C
	PINSEL_CFG_Type PinCfg;

	if(I2Cx == LPC_I2C0)
     7f8:	4b12      	ldr	r3, [pc, #72]	; (844 <I2C_Config+0x4c>)
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 ***********************************************************************/
void I2C_Config (LPC_I2C_TypeDef *I2Cx)
{
     7fa:	b513      	push	{r0, r1, r4, lr}
	// Pin configuration for I2C
	PINSEL_CFG_Type PinCfg;

	if(I2Cx == LPC_I2C0)
     7fc:	4298      	cmp	r0, r3
     7fe:	d116      	bne.n	82e <I2C_Config+0x36>
	{
		/*
		 * Init I2C pin connect
		 */
		PinCfg.OpenDrain = 0;
     800:	2000      	movs	r0, #0
		PinCfg.Pinmode = 0;
		PinCfg.Funcnum = 1;
		PinCfg.Pinnum = 27;
		PinCfg.Portnum = 0;
     802:	ac02      	add	r4, sp, #8
	if(I2Cx == LPC_I2C0)
	{
		/*
		 * Init I2C pin connect
		 */
		PinCfg.OpenDrain = 0;
     804:	f88d 0004 	strb.w	r0, [sp, #4]
		PinCfg.Pinmode = 0;
     808:	f88d 0003 	strb.w	r0, [sp, #3]
		PinCfg.Funcnum = 1;
     80c:	2201      	movs	r2, #1
		PinCfg.Pinnum = 27;
     80e:	211b      	movs	r1, #27
		PinCfg.Portnum = 0;
     810:	f804 0d08 	strb.w	r0, [r4, #-8]!
		PINSEL_ConfigPin(&PinCfg);
     814:	4668      	mov	r0, sp
		/*
		 * Init I2C pin connect
		 */
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Funcnum = 1;
     816:	f88d 2002 	strb.w	r2, [sp, #2]
		PinCfg.Pinnum = 27;
     81a:	f88d 1001 	strb.w	r1, [sp, #1]
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
     81e:	f000 fbcd 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 28;
     822:	231c      	movs	r3, #28
		PINSEL_ConfigPin(&PinCfg);
     824:	4668      	mov	r0, sp
		PinCfg.Pinmode = 0;
		PinCfg.Funcnum = 1;
		PinCfg.Pinnum = 27;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 28;
     826:	f88d 3001 	strb.w	r3, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
     82a:	f000 fbc7 	bl	fbc <PINSEL_ConfigPin>
	}

	/* I2C block ------------------------------------------------------------------- */
	// Initialize I2C peripheral
	I2C_Init(LPC_I2C0, 200000);
     82e:	4c05      	ldr	r4, [pc, #20]	; (844 <I2C_Config+0x4c>)
     830:	4905      	ldr	r1, [pc, #20]	; (848 <I2C_Config+0x50>)
     832:	4620      	mov	r0, r4
     834:	f7ff ffa2 	bl	77c <I2C_Init>

	Buffer_Init ();
     838:	f7ff ff91 	bl	75e <Buffer_Init>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (NewState == ENABLE)
	{
		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
     83c:	2040      	movs	r0, #64	; 0x40
     83e:	6020      	str	r0, [r4, #0]

	Buffer_Init ();

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C0, ENABLE);
}
     840:	bd1c      	pop	{r2, r3, r4, pc}
     842:	bf00      	nop
     844:	4001c000 	.word	0x4001c000
     848:	00030d40 	.word	0x00030d40

0000084c <I2C_DeInit>:
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;

	if (I2Cx==LPC_I2C0)
     84c:	490a      	ldr	r1, [pc, #40]	; (878 <I2C_DeInit+0x2c>)
void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
     84e:	2340      	movs	r3, #64	; 0x40

	if (I2Cx==LPC_I2C0)
     850:	4288      	cmp	r0, r1
void I2C_DeInit(LPC_I2C_TypeDef* I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	/* Disable I2C control */
	I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
     852:	6183      	str	r3, [r0, #24]

	if (I2Cx==LPC_I2C0)
     854:	d101      	bne.n	85a <I2C_DeInit+0xe>
	{
		/* Disable power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
     856:	2080      	movs	r0, #128	; 0x80
     858:	e00a      	b.n	870 <I2C_DeInit+0x24>
	}
	else if (I2Cx==LPC_I2C1)
     85a:	4a08      	ldr	r2, [pc, #32]	; (87c <I2C_DeInit+0x30>)
     85c:	4290      	cmp	r0, r2
	{
		/* Disable power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
     85e:	bf08      	it	eq
     860:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
	if (I2Cx==LPC_I2C0)
	{
		/* Disable power for I2C0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C0, DISABLE);
	}
	else if (I2Cx==LPC_I2C1)
     864:	d004      	beq.n	870 <I2C_DeInit+0x24>
	{
		/* Disable power for I2C1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C1, DISABLE);
	}
	else if (I2Cx==LPC_I2C2)
     866:	4b06      	ldr	r3, [pc, #24]	; (880 <I2C_DeInit+0x34>)
     868:	4298      	cmp	r0, r3
     86a:	d104      	bne.n	876 <I2C_DeInit+0x2a>
	{
		/* Disable power for I2C2 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCI2C2, DISABLE);
     86c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
     870:	2100      	movs	r1, #0
     872:	f7ff bda5 	b.w	3c0 <CLKPWR_ConfigPPWR>
     876:	4770      	bx	lr
     878:	4001c000 	.word	0x4001c000
     87c:	4005c000 	.word	0x4005c000
     880:	400a0000 	.word	0x400a0000

00000884 <I2C_Cmd>:
void I2C_Cmd(LPC_I2C_TypeDef* I2Cx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
	CHECK_PARAM(PARAM_I2Cx(I2Cx));

	if (NewState == ENABLE)
     884:	2901      	cmp	r1, #1
     886:	f04f 0340 	mov.w	r3, #64	; 0x40
	{
		I2Cx->I2CONSET = I2C_I2CONSET_I2EN;
     88a:	bf0c      	ite	eq
     88c:	6003      	streq	r3, [r0, #0]
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_I2ENC;
     88e:	6183      	strne	r3, [r0, #24]
     890:	4770      	bx	lr

00000892 <I2C_IntCmd>:
 * 				- ENABLE: enable interrupt for this I2C peripheral
 * 				- DISABLE: disable interrupt for this I2C peripheral
 * @return 		None
 **********************************************************************/
void I2C_IntCmd (LPC_I2C_TypeDef *I2Cx, Bool NewState)
{
     892:	4b15      	ldr	r3, [pc, #84]	; (8e8 <I2C_IntCmd+0x56>)
	if (NewState)
     894:	b199      	cbz	r1, 8be <I2C_IntCmd+0x2c>
	{
		if(I2Cx == LPC_I2C0)
     896:	4298      	cmp	r0, r3

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     898:	bf08      	it	eq
     89a:	f44f 6280 	moveq.w	r2, #1024	; 0x400
     89e:	d004      	beq.n	8aa <I2C_IntCmd+0x18>
		{
			NVIC_EnableIRQ(I2C0_IRQn);
		}
		else if (I2Cx == LPC_I2C1)
     8a0:	4b12      	ldr	r3, [pc, #72]	; (8ec <I2C_IntCmd+0x5a>)
     8a2:	4298      	cmp	r0, r3
     8a4:	d104      	bne.n	8b0 <I2C_IntCmd+0x1e>
     8a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
     8aa:	4811      	ldr	r0, [pc, #68]	; (8f0 <I2C_IntCmd+0x5e>)
     8ac:	6002      	str	r2, [r0, #0]
     8ae:	4770      	bx	lr
		{
			NVIC_EnableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
     8b0:	4910      	ldr	r1, [pc, #64]	; (8f4 <I2C_IntCmd+0x62>)
     8b2:	4288      	cmp	r0, r1
     8b4:	bf08      	it	eq
     8b6:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
     8ba:	d113      	bne.n	8e4 <I2C_IntCmd+0x52>
     8bc:	e7f5      	b.n	8aa <I2C_IntCmd+0x18>
			NVIC_EnableIRQ(I2C2_IRQn);
		}
	}
	else
	{
		if(I2Cx == LPC_I2C0)
     8be:	4298      	cmp	r0, r3

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     8c0:	bf08      	it	eq
     8c2:	f44f 6280 	moveq.w	r2, #1024	; 0x400
     8c6:	d00a      	beq.n	8de <I2C_IntCmd+0x4c>
		{
			NVIC_DisableIRQ(I2C0_IRQn);
		}
		else if (I2Cx == LPC_I2C1)
     8c8:	4908      	ldr	r1, [pc, #32]	; (8ec <I2C_IntCmd+0x5a>)
     8ca:	4288      	cmp	r0, r1
     8cc:	bf08      	it	eq
     8ce:	f44f 6200 	moveq.w	r2, #2048	; 0x800
     8d2:	d004      	beq.n	8de <I2C_IntCmd+0x4c>
		{
			NVIC_DisableIRQ(I2C1_IRQn);
		}
		else if (I2Cx == LPC_I2C2)
     8d4:	4a07      	ldr	r2, [pc, #28]	; (8f4 <I2C_IntCmd+0x62>)
     8d6:	4290      	cmp	r0, r2
     8d8:	d104      	bne.n	8e4 <I2C_IntCmd+0x52>
     8da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     8de:	4804      	ldr	r0, [pc, #16]	; (8f0 <I2C_IntCmd+0x5e>)
     8e0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
     8e4:	4770      	bx	lr
     8e6:	bf00      	nop
     8e8:	4001c000 	.word	0x4001c000
     8ec:	4005c000 	.word	0x4005c000
     8f0:	e000e100 	.word	0xe000e100
     8f4:	400a0000 	.word	0x400a0000

000008f8 <I2C_MasterHandler>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_MasterHandler (LPC_I2C_TypeDef  *I2Cx)
{
     8f8:	b538      	push	{r3, r4, r5, lr}
     8fa:	4604      	mov	r4, r0
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
     8fc:	f7ff ff0a 	bl	714 <I2C_getNum>
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     900:	6862      	ldr	r2, [r4, #4]
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
     902:	495b      	ldr	r1, [pc, #364]	; (a70 <I2C_MasterHandler+0x178>)

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     904:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;
     908:	f851 3030 	ldr.w	r3, [r1, r0, lsl #3]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
	// Save current status
	txrx_setup->status = returnCode;
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     90c:	2af8      	cmp	r2, #248	; 0xf8
{
	int32_t tmp;
	uint8_t returnCode;
	I2C_M_SETUP_Type *txrx_setup;

	tmp = I2C_getNum(I2Cx);
     90e:	4605      	mov	r5, r0
	txrx_setup = (I2C_M_SETUP_Type *) i2cdat[tmp].txrx_setup;

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
	// Save current status
	txrx_setup->status = returnCode;
     910:	625a      	str	r2, [r3, #36]	; 0x24
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     912:	d076      	beq.n	a02 <I2C_MasterHandler+0x10a>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		return;
	}

	/* ----------------------------- TRANSMIT PHASE --------------------------*/
	if (i2cdat[tmp].dir == 0)
     914:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
     918:	6841      	ldr	r1, [r0, #4]
     91a:	2900      	cmp	r1, #0
     91c:	d141      	bne.n	9a2 <I2C_MasterHandler+0xaa>
	{
		switch (returnCode)
     91e:	2a20      	cmp	r2, #32
     920:	d03c      	beq.n	99c <I2C_MasterHandler+0xa4>
     922:	dc06      	bgt.n	932 <I2C_MasterHandler+0x3a>
     924:	2a10      	cmp	r2, #16
     926:	d00b      	beq.n	940 <I2C_MasterHandler+0x48>
     928:	2a18      	cmp	r2, #24
     92a:	d012      	beq.n	952 <I2C_MasterHandler+0x5a>
     92c:	2a08      	cmp	r2, #8
     92e:	d17e      	bne.n	a2e <I2C_MasterHandler+0x136>
     930:	e006      	b.n	940 <I2C_MasterHandler+0x48>
     932:	2a30      	cmp	r2, #48	; 0x30
     934:	d032      	beq.n	99c <I2C_MasterHandler+0xa4>
     936:	2a38      	cmp	r2, #56	; 0x38
     938:	d076      	beq.n	a28 <I2C_MasterHandler+0x130>
     93a:	2a28      	cmp	r2, #40	; 0x28
     93c:	d177      	bne.n	a2e <I2C_MasterHandler+0x136>
     93e:	e008      	b.n	952 <I2C_MasterHandler+0x5a>
			/*
			 * If there's any transmit data, then start to
			 * send SLA+W right now, otherwise check whether if there's
			 * any receive data for next state.
			 */
			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0))
     940:	6859      	ldr	r1, [r3, #4]
		switch (returnCode)
		{
		/* A start/repeat start condition has been transmitted -------------------*/
		case I2C_I2STAT_M_TX_START:
		case I2C_I2STAT_M_TX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     942:	2020      	movs	r0, #32
     944:	61a0      	str	r0, [r4, #24]
			/*
			 * If there's any transmit data, then start to
			 * send SLA+W right now, otherwise check whether if there's
			 * any receive data for next state.
			 */
			if ((txrx_setup->tx_data != NULL) && (txrx_setup->tx_length != 0))
     946:	b179      	cbz	r1, 968 <I2C_MasterHandler+0x70>
     948:	6898      	ldr	r0, [r3, #8]
     94a:	b168      	cbz	r0, 968 <I2C_MasterHandler+0x70>
			{
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1);
     94c:	681b      	ldr	r3, [r3, #0]
     94e:	0059      	lsls	r1, r3, #1
     950:	e01b      	b.n	98a <I2C_MasterHandler+0x92>
		/* SLA+W has been transmitted, ACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_ACK:
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
     952:	68d9      	ldr	r1, [r3, #12]
     954:	6898      	ldr	r0, [r3, #8]
     956:	4281      	cmp	r1, r0
     958:	d206      	bcs.n	968 <I2C_MasterHandler+0x70>
     95a:	6858      	ldr	r0, [r3, #4]
     95c:	b120      	cbz	r0, 968 <I2C_MasterHandler+0x70>
			{
				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
     95e:	5c42      	ldrb	r2, [r0, r1]
				txrx_setup->tx_count++;
     960:	3101      	adds	r1, #1
		/* Data has been transmitted, ACK has been received */
		case I2C_I2STAT_M_TX_DAT_ACK:
			/* Send more data */
			if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
			{
				I2Cx->I2DAT =  *(uint8_t *)(txrx_setup->tx_data + txrx_setup->tx_count);
     962:	60a2      	str	r2, [r4, #8]
				txrx_setup->tx_count++;
     964:	60d9      	str	r1, [r3, #12]
     966:	e04c      	b.n	a02 <I2C_MasterHandler+0x10a>
			// no more data, switch to next stage
			else
			{
next_stage:
				// change direction
				i2cdat[tmp].dir = 1;
     968:	4941      	ldr	r1, [pc, #260]	; (a70 <I2C_MasterHandler+0x178>)
     96a:	2001      	movs	r0, #1
     96c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
     970:	6048      	str	r0, [r1, #4]
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL))
     972:	6959      	ldr	r1, [r3, #20]
     974:	2900      	cmp	r1, #0
     976:	d053      	beq.n	a20 <I2C_MasterHandler+0x128>
     978:	6918      	ldr	r0, [r3, #16]
     97a:	2800      	cmp	r0, #0
     97c:	d050      	beq.n	a20 <I2C_MasterHandler+0x128>
				{
					// check whether if we need to issue an repeat start
					if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL))
     97e:	6899      	ldr	r1, [r3, #8]
     980:	b929      	cbnz	r1, 98e <I2C_MasterHandler+0x96>
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
			{
send_slar:
				I2Cx->I2DAT = (txrx_setup->sl_addr7bit << 1) | 0x01;
     982:	681b      	ldr	r3, [r3, #0]
     984:	005a      	lsls	r2, r3, #1
     986:	f042 0101 	orr.w	r1, r2, #1
     98a:	60a1      	str	r1, [r4, #8]
     98c:	e039      	b.n	a02 <I2C_MasterHandler+0x10a>
				i2cdat[tmp].dir = 1;
				// Check if any data to receive
				if ((txrx_setup->rx_length != 0) && (txrx_setup->rx_data != NULL))
				{
					// check whether if we need to issue an repeat start
					if ((txrx_setup->tx_length != 0) && (txrx_setup->tx_data != NULL))
     98e:	6858      	ldr	r0, [r3, #4]
     990:	2800      	cmp	r0, #0
     992:	d0f6      	beq.n	982 <I2C_MasterHandler+0x8a>
					{
						// Send out an repeat start command
						I2Cx->I2CONSET = I2C_I2CONSET_STA;
     994:	2020      	movs	r0, #32
     996:	6020      	str	r0, [r4, #0]
						I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
     998:	230c      	movs	r3, #12
     99a:	e033      	b.n	a04 <I2C_MasterHandler+0x10c>
		/* SLA+W has been transmitted, NACK has been received ----------------------*/
		case I2C_I2STAT_M_TX_SLAW_NACK:
		/* Data has been transmitted, NACK has been received -----------------------*/
		case I2C_I2STAT_M_TX_DAT_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
     99c:	f442 7000 	orr.w	r0, r2, #512	; 0x200
     9a0:	e044      	b.n	a2c <I2C_MasterHandler+0x134>
			goto retry;
		}
	}

	/* ----------------------------- RECEIVE PHASE --------------------------*/
	else if (i2cdat[tmp].dir == 1)
     9a2:	2901      	cmp	r1, #1
     9a4:	d162      	bne.n	a6c <I2C_MasterHandler+0x174>
	{
		switch (returnCode)
     9a6:	2a40      	cmp	r2, #64	; 0x40
     9a8:	d022      	beq.n	9f0 <I2C_MasterHandler+0xf8>
     9aa:	dc06      	bgt.n	9ba <I2C_MasterHandler+0xc2>
     9ac:	2a10      	cmp	r2, #16
     9ae:	d00d      	beq.n	9cc <I2C_MasterHandler+0xd4>
     9b0:	2a38      	cmp	r2, #56	; 0x38
     9b2:	d039      	beq.n	a28 <I2C_MasterHandler+0x130>
     9b4:	2a08      	cmp	r2, #8
     9b6:	d13a      	bne.n	a2e <I2C_MasterHandler+0x136>
     9b8:	e008      	b.n	9cc <I2C_MasterHandler+0xd4>
     9ba:	2a50      	cmp	r2, #80	; 0x50
     9bc:	d00d      	beq.n	9da <I2C_MasterHandler+0xe2>
     9be:	2a58      	cmp	r2, #88	; 0x58
     9c0:	d022      	beq.n	a08 <I2C_MasterHandler+0x110>
     9c2:	2a48      	cmp	r2, #72	; 0x48
     9c4:	d133      	bne.n	a2e <I2C_MasterHandler+0x136>
			goto end_stage;

		/* SLA+R has been transmitted, NACK has been received ------------------*/
		case I2C_I2STAT_M_RX_SLAR_NACK:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_NOACKF;
     9c6:	f44f 7012 	mov.w	r0, #584	; 0x248
     9ca:	e02f      	b.n	a2c <I2C_MasterHandler+0x134>
			/*
			 * If there's any receive data, then start to
			 * send SLA+R right now, otherwise check whether if there's
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
     9cc:	6919      	ldr	r1, [r3, #16]
		switch (returnCode)
		{
			/* A start/repeat start condition has been transmitted ---------------------*/
		case I2C_I2STAT_M_RX_START:
		case I2C_I2STAT_M_RX_RESTART:
			I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     9ce:	2020      	movs	r0, #32
     9d0:	61a0      	str	r0, [r4, #24]
			/*
			 * If there's any receive data, then start to
			 * send SLA+R right now, otherwise check whether if there's
			 * any receive data for end of state.
			 */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_length != 0))
     9d2:	b329      	cbz	r1, a20 <I2C_MasterHandler+0x128>
     9d4:	6958      	ldr	r0, [r3, #20]
     9d6:	b318      	cbz	r0, a20 <I2C_MasterHandler+0x128>
     9d8:	e7d3      	b.n	982 <I2C_MasterHandler+0x8a>

		/* Data has been received, ACK has been returned ----------------------*/
		case I2C_I2STAT_M_RX_DAT_ACK:
			// Note save data and increase counter first, then check later
			/* Save data  */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
     9da:	6919      	ldr	r1, [r3, #16]
     9dc:	b141      	cbz	r1, 9f0 <I2C_MasterHandler+0xf8>
     9de:	699a      	ldr	r2, [r3, #24]
     9e0:	6958      	ldr	r0, [r3, #20]
     9e2:	4282      	cmp	r2, r0
     9e4:	d204      	bcs.n	9f0 <I2C_MasterHandler+0xf8>
			{
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     9e6:	68a0      	ldr	r0, [r4, #8]
     9e8:	5488      	strb	r0, [r1, r2]
				txrx_setup->rx_count++;
     9ea:	6999      	ldr	r1, [r3, #24]
     9ec:	1c4a      	adds	r2, r1, #1
     9ee:	619a      	str	r2, [r3, #24]
			}
			if (txrx_setup->rx_count < (txrx_setup->rx_length - 1))
     9f0:	6958      	ldr	r0, [r3, #20]
     9f2:	699b      	ldr	r3, [r3, #24]
     9f4:	1e41      	subs	r1, r0, #1
     9f6:	428b      	cmp	r3, r1
     9f8:	f04f 0204 	mov.w	r2, #4
			{
				/*Data will be received,  ACK will be return*/
				I2Cx->I2CONSET = I2C_I2CONSET_AA;
     9fc:	bf34      	ite	cc
     9fe:	6022      	strcc	r2, [r4, #0]
			}
			else
			{
				/*Last data will be received,  NACK will be return*/
				I2Cx->I2CONCLR = I2C_I2CONSET_AA;
     a00:	61a2      	strcs	r2, [r4, #24]
			}

			I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a02:	2308      	movs	r3, #8
     a04:	61a3      	str	r3, [r4, #24]
			break;
     a06:	bd38      	pop	{r3, r4, r5, pc}

		/* Data has been received, NACK has been return -------------------------*/
		case I2C_I2STAT_M_RX_DAT_NACK:
			/* Save the last data */
			if ((txrx_setup->rx_data != NULL) && (txrx_setup->rx_count < txrx_setup->rx_length))
     a08:	6919      	ldr	r1, [r3, #16]
     a0a:	b141      	cbz	r1, a1e <I2C_MasterHandler+0x126>
     a0c:	699a      	ldr	r2, [r3, #24]
     a0e:	6958      	ldr	r0, [r3, #20]
     a10:	4282      	cmp	r2, r0
     a12:	d204      	bcs.n	a1e <I2C_MasterHandler+0x126>
			{
				*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     a14:	68a0      	ldr	r0, [r4, #8]
     a16:	5488      	strb	r0, [r1, r2]
				txrx_setup->rx_count++;
     a18:	6999      	ldr	r1, [r3, #24]
     a1a:	1c4a      	adds	r2, r1, #1
     a1c:	619a      	str	r2, [r3, #24]
			}
			// success, go to end stage
			txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     a24:	625a      	str	r2, [r3, #36]	; 0x24
			goto end_stage;
     a26:	e00f      	b.n	a48 <I2C_MasterHandler+0x150>
			goto retry;

		/* Arbitration lost ----------------------------------------------------*/
		case I2C_I2STAT_M_RX_ARB_LOST:
			// update status
			txrx_setup->status |= I2C_SETUP_STATUS_ARBF;
     a28:	f44f 709c 	mov.w	r0, #312	; 0x138
     a2c:	6258      	str	r0, [r3, #36]	; 0x24
		default:
retry:
			// check if retransmission is available
			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max)
     a2e:	6a1a      	ldr	r2, [r3, #32]
     a30:	69d9      	ldr	r1, [r3, #28]
     a32:	428a      	cmp	r2, r1
     a34:	d208      	bcs.n	a48 <I2C_MasterHandler+0x150>
			{
				// Clear tx count
				txrx_setup->tx_count = 0;
     a36:	2100      	movs	r1, #0
     a38:	60d9      	str	r1, [r3, #12]
				I2Cx->I2CONSET = I2C_I2CONSET_STA;
     a3a:	2020      	movs	r0, #32
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
     a3c:	210c      	movs	r1, #12
				txrx_setup->retransmissions_count++;
     a3e:	3201      	adds	r2, #1
			// check if retransmission is available
			if (txrx_setup->retransmissions_count < txrx_setup->retransmissions_max)
			{
				// Clear tx count
				txrx_setup->tx_count = 0;
				I2Cx->I2CONSET = I2C_I2CONSET_STA;
     a40:	6020      	str	r0, [r4, #0]
				I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC;
     a42:	61a1      	str	r1, [r4, #24]
				txrx_setup->retransmissions_count++;
     a44:	621a      	str	r2, [r3, #32]
     a46:	bd38      	pop	{r3, r4, r5, pc}
			// End of stage
			else
			{
end_stage:
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
     a48:	2100      	movs	r1, #0
     a4a:	4620      	mov	r0, r4
     a4c:	f7ff ff21 	bl	892 <I2C_IntCmd>
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     a50:	6823      	ldr	r3, [r4, #0]
     a52:	0699      	lsls	r1, r3, #26
     a54:	d501      	bpl.n	a5a <I2C_MasterHandler+0x162>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     a56:	2020      	movs	r0, #32
     a58:	61a0      	str	r0, [r4, #24]
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
     a5a:	4b05      	ldr	r3, [pc, #20]	; (a70 <I2C_MasterHandler+0x178>)
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     a5c:	2210      	movs	r2, #16
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a5e:	2108      	movs	r1, #8
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
     a60:	eb03 0585 	add.w	r5, r3, r5, lsl #2
     a64:	2001      	movs	r0, #1
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     a66:	6022      	str	r2, [r4, #0]
				// Disable interrupt
				I2C_IntCmd(I2Cx, 0);
				// Send stop
				I2C_Stop(I2Cx);

				I2C_MasterComplete[tmp] = TRUE;
     a68:	61a8      	str	r0, [r5, #24]
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     a6a:	61a1      	str	r1, [r4, #24]
     a6c:	bd38      	pop	{r3, r4, r5, pc}
     a6e:	bf00      	nop
     a70:	10000000 	.word	0x10000000

00000a74 <I2C_SlaveHandler>:
 *  			- LPC_I2C1
 *  			- LPC_I2C2
 * @return 		None
 **********************************************************************/
void I2C_SlaveHandler (LPC_I2C_TypeDef  *I2Cx)
{
     a74:	b570      	push	{r4, r5, r6, lr}
     a76:	4604      	mov	r4, r0
	int32_t tmp;
	uint8_t returnCode;
	I2C_S_SETUP_Type *txrx_setup;
	uint32_t timeout;

	tmp = I2C_getNum(I2Cx);
     a78:	f7ff fe4c 	bl	714 <I2C_getNum>
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
     a7c:	4b35      	ldr	r3, [pc, #212]	; (b54 <I2C_SlaveHandler+0xe0>)
	int32_t tmp;
	uint8_t returnCode;
	I2C_S_SETUP_Type *txrx_setup;
	uint32_t timeout;

	tmp = I2C_getNum(I2Cx);
     a7e:	4606      	mov	r6, r0
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;
     a80:	f853 5030 	ldr.w	r5, [r3, r0, lsl #3]

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     a84:	6860      	ldr	r0, [r4, #4]
     a86:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	// Save current status
	txrx_setup->status = returnCode;
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     a8a:	29f8      	cmp	r1, #248	; 0xf8
	tmp = I2C_getNum(I2Cx);
	txrx_setup = (I2C_S_SETUP_Type *) i2cdat[tmp].txrx_setup;

	returnCode = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
	// Save current status
	txrx_setup->status = returnCode;
     a8c:	61a9      	str	r1, [r5, #24]
	// there's no relevant information
	if (returnCode == I2C_I2STAT_NO_INF)
     a8e:	d04b      	beq.n	b28 <I2C_SlaveHandler+0xb4>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		return;
	}


	switch (returnCode)
     a90:	2998      	cmp	r1, #152	; 0x98
     a92:	d049      	beq.n	b28 <I2C_SlaveHandler+0xb4>
     a94:	dc0b      	bgt.n	aae <I2C_SlaveHandler+0x3a>
     a96:	2980      	cmp	r1, #128	; 0x80
     a98:	d016      	beq.n	ac8 <I2C_SlaveHandler+0x54>
     a9a:	dc03      	bgt.n	aa4 <I2C_SlaveHandler+0x30>
     a9c:	2960      	cmp	r1, #96	; 0x60
     a9e:	d041      	beq.n	b24 <I2C_SlaveHandler+0xb0>
     aa0:	2970      	cmp	r1, #112	; 0x70
     aa2:	e00f      	b.n	ac4 <I2C_SlaveHandler+0x50>
     aa4:	2988      	cmp	r1, #136	; 0x88
     aa6:	d03f      	beq.n	b28 <I2C_SlaveHandler+0xb4>
     aa8:	2990      	cmp	r1, #144	; 0x90
     aaa:	d147      	bne.n	b3c <I2C_SlaveHandler+0xc8>
     aac:	e00c      	b.n	ac8 <I2C_SlaveHandler+0x54>
     aae:	29b8      	cmp	r1, #184	; 0xb8
     ab0:	d02e      	beq.n	b10 <I2C_SlaveHandler+0x9c>
     ab2:	dc04      	bgt.n	abe <I2C_SlaveHandler+0x4a>
     ab4:	29a0      	cmp	r1, #160	; 0xa0
     ab6:	d014      	beq.n	ae2 <I2C_SlaveHandler+0x6e>
     ab8:	29a8      	cmp	r1, #168	; 0xa8
     aba:	d13f      	bne.n	b3c <I2C_SlaveHandler+0xc8>
     abc:	e028      	b.n	b10 <I2C_SlaveHandler+0x9c>
     abe:	29c0      	cmp	r1, #192	; 0xc0
     ac0:	d035      	beq.n	b2e <I2C_SlaveHandler+0xba>
     ac2:	29f8      	cmp	r1, #248	; 0xf8
     ac4:	d13a      	bne.n	b3c <I2C_SlaveHandler+0xc8>
     ac6:	e02d      	b.n	b24 <I2C_SlaveHandler+0xb0>
	case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->rx_count < txrx_setup->rx_length) && (txrx_setup->rx_data != NULL))
     ac8:	696b      	ldr	r3, [r5, #20]
     aca:	692a      	ldr	r2, [r5, #16]
     acc:	4293      	cmp	r3, r2
     ace:	d229      	bcs.n	b24 <I2C_SlaveHandler+0xb0>
     ad0:	68e8      	ldr	r0, [r5, #12]
     ad2:	2800      	cmp	r0, #0
     ad4:	d026      	beq.n	b24 <I2C_SlaveHandler+0xb0>
		{
			*(uint8_t *)(txrx_setup->rx_data + txrx_setup->rx_count) = (uint8_t)I2Cx->I2DAT;
     ad6:	68a1      	ldr	r1, [r4, #8]
     ad8:	54c1      	strb	r1, [r0, r3]
			txrx_setup->rx_count++;
     ada:	696b      	ldr	r3, [r5, #20]
     adc:	1c5a      	adds	r2, r3, #1
     ade:	616a      	str	r2, [r5, #20]
     ae0:	e020      	b.n	b24 <I2C_SlaveHandler+0xb0>
	 */

	/* A Stop or a repeat start condition */
	case I2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX:
		// Temporally lock the interrupt for timeout condition
		I2C_IntCmd(I2Cx, 0);
     ae2:	4620      	mov	r0, r4
     ae4:	2100      	movs	r1, #0
     ae6:	f7ff fed4 	bl	892 <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     aea:	2008      	movs	r0, #8
     aec:	61a0      	str	r0, [r4, #24]
     aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		// enable time out
		timeout = I2C_SLAVE_TIME_OUT;
		while(1)
		{
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
     af2:	6821      	ldr	r1, [r4, #0]
     af4:	0708      	lsls	r0, r1, #28
     af6:	d505      	bpl.n	b04 <I2C_SlaveHandler+0x90>
			{
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
     af8:	4620      	mov	r0, r4
     afa:	2101      	movs	r1, #1
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
		I2C_SlaveComplete[tmp] = TRUE;
		break;
	}
}
     afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		while(1)
		{
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
			{
				// re-Enable interrupt
				I2C_IntCmd(I2Cx, 1);
     b00:	f7ff bec7 	b.w	892 <I2C_IntCmd>
				break;
			}
			else
			{
				timeout--;
				if (timeout == 0)
     b04:	3b01      	subs	r3, #1
     b06:	d1f4      	bne.n	af2 <I2C_SlaveHandler+0x7e>
				{
					// timeout occur, it's really a stop condition
					txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     b08:	69aa      	ldr	r2, [r5, #24]
     b0a:	f442 6380 	orr.w	r3, r2, #1024	; 0x400
     b0e:	e014      	b.n	b3a <I2C_SlaveHandler+0xc6>
	case I2C_I2STAT_S_TX_DAT_ACK:
		/*
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
     b10:	68ab      	ldr	r3, [r5, #8]
     b12:	686a      	ldr	r2, [r5, #4]
     b14:	4293      	cmp	r3, r2
     b16:	d205      	bcs.n	b24 <I2C_SlaveHandler+0xb0>
     b18:	6828      	ldr	r0, [r5, #0]
     b1a:	b118      	cbz	r0, b24 <I2C_SlaveHandler+0xb0>
		{
			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
     b1c:	5cc1      	ldrb	r1, [r0, r3]
			txrx_setup->tx_count++;
     b1e:	3301      	adds	r3, #1
		 * All data bytes that over-flow the specified receive
		 * data length, just ignore them.
		 */
		if ((txrx_setup->tx_count < txrx_setup->tx_length) && (txrx_setup->tx_data != NULL))
		{
			I2Cx->I2DAT = *(uint8_t *) (txrx_setup->tx_data + txrx_setup->tx_count);
     b20:	60a1      	str	r1, [r4, #8]
			txrx_setup->tx_count++;
     b22:	60ab      	str	r3, [r5, #8]
		}
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     b24:	2204      	movs	r2, #4
     b26:	6022      	str	r2, [r4, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b28:	2008      	movs	r0, #8
     b2a:	61a0      	str	r0, [r4, #24]
		break;
     b2c:	bd70      	pop	{r4, r5, r6, pc}
	 * Note: Don't wait for stop event since in slave transmit mode,
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     b2e:	2004      	movs	r0, #4
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b30:	2108      	movs	r1, #8
	 * Note: Don't wait for stop event since in slave transmit mode,
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     b32:	6020      	str	r0, [r4, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     b34:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
	 * since there no proof lets us know when a stop signal has been received
	 * on slave side.
	 */
	case I2C_I2STAT_S_TX_DAT_NACK:
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b38:	61a1      	str	r1, [r4, #24]
		txrx_setup->status |= I2C_SETUP_STATUS_DONE;
     b3a:	61ab      	str	r3, [r5, #24]

	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
     b3c:	4620      	mov	r0, r4
     b3e:	2100      	movs	r1, #0
     b40:	f7ff fea7 	bl	892 <I2C_IntCmd>
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
		I2C_SlaveComplete[tmp] = TRUE;
     b44:	4803      	ldr	r0, [pc, #12]	; (b54 <I2C_SlaveHandler+0xe0>)
	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     b46:	222c      	movs	r2, #44	; 0x2c
		I2C_SlaveComplete[tmp] = TRUE;
     b48:	eb00 0686 	add.w	r6, r0, r6, lsl #2
     b4c:	2101      	movs	r1, #1
	// Other status must be captured
	default:
s_int_end:
		// Disable interrupt
		I2C_IntCmd(I2Cx, 0);
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC | I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     b4e:	61a2      	str	r2, [r4, #24]
		I2C_SlaveComplete[tmp] = TRUE;
     b50:	6271      	str	r1, [r6, #36]	; 0x24
     b52:	bd70      	pop	{r4, r5, r6, pc}
     b54:	10000000 	.word	0x10000000

00000b58 <I2C_MasterTransferData>:
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     b5a:	2600      	movs	r6, #0
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     b5c:	4605      	mov	r5, r0
     b5e:	460c      	mov	r4, r1

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     b60:	60ce      	str	r6, [r1, #12]
	TransferCfg->rx_count = 0;
     b62:	618e      	str	r6, [r1, #24]
	TransferCfg->status = 0;
     b64:	624e      	str	r6, [r1, #36]	; 0x24

	if (Opt == I2C_TRANSFER_POLLING)
     b66:	4617      	mov	r7, r2
     b68:	2a00      	cmp	r2, #0
     b6a:	f040 80b6 	bne.w	cda <I2C_MasterTransferData+0x182>
	{
		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
     b6e:	6222      	str	r2, [r4, #32]
retry:
		// reset all default state
		txdat = (uint8_t *) TransferCfg->tx_data;
		rxdat = (uint8_t *) TransferCfg->rx_data;
		// Reset I2C setup value to default state
		TransferCfg->tx_count = 0;
     b70:	2300      	movs	r3, #0
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     b72:	2120      	movs	r1, #32
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b74:	2208      	movs	r2, #8
	{
		/* First Start condition -------------------------------------------------------------- */
		TransferCfg->retransmissions_count = 0;
retry:
		// reset all default state
		txdat = (uint8_t *) TransferCfg->tx_data;
     b76:	6867      	ldr	r7, [r4, #4]
		rxdat = (uint8_t *) TransferCfg->rx_data;
     b78:	6926      	ldr	r6, [r4, #16]
		// Reset I2C setup value to default state
		TransferCfg->tx_count = 0;
     b7a:	60e3      	str	r3, [r4, #12]
		TransferCfg->rx_count = 0;
     b7c:	61a3      	str	r3, [r4, #24]
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     b7e:	6029      	str	r1, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     b80:	61aa      	str	r2, [r5, #24]

	// Wait for complete
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     b82:	6828      	ldr	r0, [r5, #0]
     b84:	0702      	lsls	r2, r0, #28
     b86:	d5fc      	bpl.n	b82 <I2C_MasterTransferData+0x2a>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     b88:	2320      	movs	r3, #32
     b8a:	61ab      	str	r3, [r5, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     b8c:	6869      	ldr	r1, [r5, #4]
     b8e:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
		TransferCfg->rx_count = 0;
		CodeStatus = 0;

		// Start command
		CodeStatus = I2C_Start(I2Cx);
		if ((CodeStatus != I2C_I2STAT_M_TX_START) && (CodeStatus != I2C_I2STAT_M_TX_RESTART))
     b92:	2b08      	cmp	r3, #8
     b94:	d001      	beq.n	b9a <I2C_MasterTransferData+0x42>
     b96:	2b10      	cmp	r3, #16
     b98:	d135      	bne.n	c06 <I2C_MasterTransferData+0xae>
				goto retry;
			}
		}

		/* In case of sending data first --------------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL))
     b9a:	68a2      	ldr	r2, [r4, #8]
     b9c:	b912      	cbnz	r2, ba4 <I2C_MasterTransferData+0x4c>
				TransferCfg->tx_count++;
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
     b9e:	68a0      	ldr	r0, [r4, #8]
     ba0:	b9d8      	cbnz	r0, bda <I2C_MasterTransferData+0x82>
     ba2:	e038      	b.n	c16 <I2C_MasterTransferData+0xbe>
				goto retry;
			}
		}

		/* In case of sending data first --------------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL))
     ba4:	2f00      	cmp	r7, #0
     ba6:	d0fa      	beq.n	b9e <I2C_MasterTransferData+0x46>
		{
			/* Send slave address + WR direction bit = 0 ----------------------------------- */
			CodeStatus = I2C_SendByte(I2Cx, (TransferCfg->sl_addr7bit << 1));
     ba8:	6820      	ldr	r0, [r4, #0]
     baa:	0043      	lsls	r3, r0, #1
     bac:	f003 01fe 	and.w	r1, r3, #254	; 0xfe
     bb0:	4628      	mov	r0, r5
     bb2:	f7ff fdc5 	bl	740 <I2C_SendByte>
			if (CodeStatus != I2C_I2STAT_M_TX_SLAW_ACK)
     bb6:	2818      	cmp	r0, #24
     bb8:	d142      	bne.n	c40 <I2C_MasterTransferData+0xe8>
 * or receive data pointer set to NULL.
 * - In case of using I2C to transmit followed by receive data, transmit length,
 * transmit data pointer, receive length and receive data pointer should be set
 * corresponding.
 **********************************************************************/
Status I2C_MasterTransferData(LPC_I2C_TypeDef *I2Cx, I2C_M_SETUP_Type *TransferCfg, \
     bba:	3f01      	subs	r7, #1
					goto retry;
				}
			}

			/* Send a number of data bytes ---------------------------------------- */
			while (TransferCfg->tx_count < TransferCfg->tx_length)
     bbc:	68e1      	ldr	r1, [r4, #12]
     bbe:	68a2      	ldr	r2, [r4, #8]
     bc0:	4291      	cmp	r1, r2
     bc2:	d2ec      	bcs.n	b9e <I2C_MasterTransferData+0x46>
			{
				CodeStatus = I2C_SendByte(I2Cx, *txdat);
     bc4:	4628      	mov	r0, r5
     bc6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     bca:	f7ff fdb9 	bl	740 <I2C_SendByte>
				if (CodeStatus != I2C_I2STAT_M_TX_DAT_ACK)
     bce:	2828      	cmp	r0, #40	; 0x28
     bd0:	d136      	bne.n	c40 <I2C_MasterTransferData+0xe8>
						goto retry;
					}
				}

				txdat++;
				TransferCfg->tx_count++;
     bd2:	68e0      	ldr	r0, [r4, #12]
     bd4:	1c41      	adds	r1, r0, #1
     bd6:	60e1      	str	r1, [r4, #12]
     bd8:	e7f0      	b.n	bbc <I2C_MasterTransferData+0x64>
			}
		}

		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
     bda:	6863      	ldr	r3, [r4, #4]
     bdc:	b1db      	cbz	r3, c16 <I2C_MasterTransferData+0xbe>
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
     bde:	6961      	ldr	r1, [r4, #20]
     be0:	b1c9      	cbz	r1, c16 <I2C_MasterTransferData+0xbe>
     be2:	6922      	ldr	r2, [r4, #16]
     be4:	b1ba      	cbz	r2, c16 <I2C_MasterTransferData+0xbe>
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     be6:	2020      	movs	r0, #32
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     be8:	2308      	movs	r3, #8
 * 				- LPC_I2C2
 * @return 		value of I2C status register after generate a start condition
 *********************************************************************/
static uint32_t I2C_Start (LPC_I2C_TypeDef *I2Cx)
{
	I2Cx->I2CONSET = I2C_I2CONSET_STA;
     bea:	6028      	str	r0, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     bec:	61ab      	str	r3, [r5, #24]

	// Wait for complete
	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     bee:	6829      	ldr	r1, [r5, #0]
     bf0:	070b      	lsls	r3, r1, #28
     bf2:	d5fc      	bpl.n	bee <I2C_MasterTransferData+0x96>
	I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     bf4:	2220      	movs	r2, #32
     bf6:	61aa      	str	r2, [r5, #24]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     bf8:	6868      	ldr	r0, [r5, #4]
     bfa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
		/* Second Start condition (Repeat Start) ------------------------------------------- */
		if ((TransferCfg->tx_length != 0) && (TransferCfg->tx_data != NULL) \
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
		{
			CodeStatus = I2C_Start(I2Cx);
			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
     bfe:	2b08      	cmp	r3, #8
     c00:	d009      	beq.n	c16 <I2C_MasterTransferData+0xbe>
     c02:	2b10      	cmp	r3, #16
     c04:	d007      	beq.n	c16 <I2C_MasterTransferData+0xbe>
			{
				TransferCfg->retransmissions_count++;
     c06:	6a22      	ldr	r2, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     c08:	69e1      	ldr	r1, [r4, #28]
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
		{
			CodeStatus = I2C_Start(I2Cx);
			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
			{
				TransferCfg->retransmissions_count++;
     c0a:	1c50      	adds	r0, r2, #1
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     c0c:	4288      	cmp	r0, r1
				&& (TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
		{
			CodeStatus = I2C_Start(I2Cx);
			if ((CodeStatus != I2C_I2STAT_M_RX_START) && (CodeStatus != I2C_I2STAT_M_RX_RESTART))
			{
				TransferCfg->retransmissions_count++;
     c0e:	6220      	str	r0, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     c10:	d9ae      	bls.n	b70 <I2C_MasterTransferData+0x18>
				{
					// Update status
					TransferCfg->status = CodeStatus;
     c12:	6263      	str	r3, [r4, #36]	; 0x24
					goto error;
     c14:	e056      	b.n	cc4 <I2C_MasterTransferData+0x16c>
				}
			}
		}

		/* Then, start reading after sending data -------------------------------------- */
		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
     c16:	6961      	ldr	r1, [r4, #20]
     c18:	b929      	cbnz	r1, c26 <I2C_MasterTransferData+0xce>
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     c1a:	682b      	ldr	r3, [r5, #0]
     c1c:	0698      	lsls	r0, r3, #26
     c1e:	d54b      	bpl.n	cb8 <I2C_MasterTransferData+0x160>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     c20:	2120      	movs	r1, #32
     c22:	61a9      	str	r1, [r5, #24]
     c24:	e048      	b.n	cb8 <I2C_MasterTransferData+0x160>
				}
			}
		}

		/* Then, start reading after sending data -------------------------------------- */
		if ((TransferCfg->rx_length != 0) && (TransferCfg->rx_data != NULL))
     c26:	6922      	ldr	r2, [r4, #16]
     c28:	2a00      	cmp	r2, #0
     c2a:	d0f6      	beq.n	c1a <I2C_MasterTransferData+0xc2>
		{
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
     c2c:	6820      	ldr	r0, [r4, #0]
     c2e:	0043      	lsls	r3, r0, #1
     c30:	f043 0101 	orr.w	r1, r3, #1
     c34:	4628      	mov	r0, r5
     c36:	b2c9      	uxtb	r1, r1
     c38:	f7ff fd82 	bl	740 <I2C_SendByte>
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
     c3c:	2840      	cmp	r0, #64	; 0x40
     c3e:	d021      	beq.n	c84 <I2C_MasterTransferData+0x12c>
			{
				TransferCfg->retransmissions_count++;
     c40:	6a22      	ldr	r2, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     c42:	69e1      	ldr	r1, [r4, #28]
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
			{
				TransferCfg->retransmissions_count++;
     c44:	1c53      	adds	r3, r2, #1
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     c46:	428b      	cmp	r3, r1
			/* Send slave address + RD direction bit = 1 ----------------------------------- */

			CodeStatus = I2C_SendByte(I2Cx, ((TransferCfg->sl_addr7bit << 1) | 0x01));
			if (CodeStatus != I2C_I2STAT_M_RX_SLAR_ACK)
			{
				TransferCfg->retransmissions_count++;
     c48:	6223      	str	r3, [r4, #32]
				if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     c4a:	d991      	bls.n	b70 <I2C_MasterTransferData+0x18>
				{
					// update status
					TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_NOACKF;
     c4c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
     c50:	6260      	str	r0, [r4, #36]	; 0x24
					goto error;
     c52:	e037      	b.n	cc4 <I2C_MasterTransferData+0x16c>
				/*
				 * Note that: if data length is only one, the master should not
				 * issue an ACK signal on bus after reading to avoid of next data frame
				 * on slave side
				 */
				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1))
     c54:	1e43      	subs	r3, r0, #1
     c56:	429a      	cmp	r2, r3
     c58:	f04f 0108 	mov.w	r1, #8
     c5c:	f04f 0204 	mov.w	r2, #4
     c60:	d215      	bcs.n	c8e <I2C_MasterTransferData+0x136>
 *********************************************************************/
static uint32_t I2C_GetByte (LPC_I2C_TypeDef *I2Cx, uint8_t *retdat, Bool ack)
{
	if (ack == TRUE)
	{
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     c62:	602a      	str	r2, [r5, #0]
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     c64:	61a9      	str	r1, [r5, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     c66:	682b      	ldr	r3, [r5, #0]
     c68:	0719      	lsls	r1, r3, #28
     c6a:	d5fc      	bpl.n	c66 <I2C_MasterTransferData+0x10e>
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     c6c:	68a9      	ldr	r1, [r5, #8]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     c6e:	686a      	ldr	r2, [r5, #4]
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     c70:	b2c9      	uxtb	r1, r1
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     c72:	f002 00f8 	and.w	r0, r2, #248	; 0xf8
				 */
				if (TransferCfg->rx_count < (TransferCfg->rx_length - 1))
				{
					// Issue an ACK signal for next data frame
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 1);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_ACK)
     c76:	2850      	cmp	r0, #80	; 0x50
				}
				else
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
     c78:	d115      	bne.n	ca6 <I2C_MasterTransferData+0x14e>
						{
							goto retry;
						}
					}
				}
				*rxdat++ = tmp;
     c7a:	f806 1b01 	strb.w	r1, [r6], #1
				TransferCfg->rx_count++;
     c7e:	69a0      	ldr	r0, [r4, #24]
     c80:	1c43      	adds	r3, r0, #1
     c82:	61a3      	str	r3, [r4, #24]
					goto retry;
				}
			}

			/* Receive a number of data bytes ------------------------------------------------- */
			while (TransferCfg->rx_count < TransferCfg->rx_length)
     c84:	69a2      	ldr	r2, [r4, #24]
     c86:	6960      	ldr	r0, [r4, #20]
     c88:	4282      	cmp	r2, r0
     c8a:	d3e3      	bcc.n	c54 <I2C_MasterTransferData+0xfc>
     c8c:	e7c5      	b.n	c1a <I2C_MasterTransferData+0xc2>
	{
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
	}
	else
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     c8e:	61aa      	str	r2, [r5, #24]
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     c90:	61a9      	str	r1, [r5, #24]

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
     c92:	6828      	ldr	r0, [r5, #0]
     c94:	0702      	lsls	r2, r0, #28
     c96:	d5fc      	bpl.n	c92 <I2C_MasterTransferData+0x13a>
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     c98:	68ab      	ldr	r3, [r5, #8]
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     c9a:	686a      	ldr	r2, [r5, #4]
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
	}
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;

	while (!(I2Cx->I2CONSET & I2C_I2CONSET_SI));
	*retdat = (uint8_t) (I2Cx->I2DAT & I2C_I2DAT_BITMASK);
     c9c:	b2d9      	uxtb	r1, r3
	return (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK);
     c9e:	f002 00f8 	and.w	r0, r2, #248	; 0xf8
				}
				else
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
     ca2:	2858      	cmp	r0, #88	; 0x58
     ca4:	e7e8      	b.n	c78 <I2C_MasterTransferData+0x120>
					{
						TransferCfg->retransmissions_count++;
     ca6:	6a21      	ldr	r1, [r4, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     ca8:	69e3      	ldr	r3, [r4, #28]
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
					{
						TransferCfg->retransmissions_count++;
     caa:	1c4a      	adds	r2, r1, #1
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     cac:	429a      	cmp	r2, r3
				{
					// Do not issue an ACK signal
					CodeStatus = I2C_GetByte(I2Cx, &tmp, 0);
					if (CodeStatus != I2C_I2STAT_M_RX_DAT_NACK)
					{
						TransferCfg->retransmissions_count++;
     cae:	6222      	str	r2, [r4, #32]
						if (TransferCfg->retransmissions_count > TransferCfg->retransmissions_max)
     cb0:	f67f af5e 	bls.w	b70 <I2C_MasterTransferData+0x18>
						{
							// update status
							TransferCfg->status = CodeStatus;
     cb4:	6260      	str	r0, [r4, #36]	; 0x24
							goto error;
     cb6:	e005      	b.n	cc4 <I2C_MasterTransferData+0x16c>
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     cb8:	2210      	movs	r2, #16
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     cba:	2008      	movs	r0, #8
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     cbc:	602a      	str	r2, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     cbe:	61a8      	str	r0, [r5, #24]
			}
		}

		/* Send STOP condition ------------------------------------------------- */
		I2C_Stop(I2Cx);
		return SUCCESS;
     cc0:	2001      	movs	r0, #1
     cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return 		None
 *********************************************************************/
static void I2C_Stop (LPC_I2C_TypeDef *I2Cx)
{
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
     cc4:	682b      	ldr	r3, [r5, #0]
     cc6:	069b      	lsls	r3, r3, #26
     cc8:	d501      	bpl.n	cce <I2C_MasterTransferData+0x176>
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
     cca:	2220      	movs	r2, #32
     ccc:	61aa      	str	r2, [r5, #24]
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     cce:	2010      	movs	r0, #16
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     cd0:	2108      	movs	r1, #8
	/* Make sure start bit is not active */
	if (I2Cx->I2CONSET & I2C_I2CONSET_STA)
	{
		I2Cx->I2CONCLR = I2C_I2CONCLR_STAC;
	}
	I2Cx->I2CONSET = I2C_I2CONSET_STO;
     cd2:	6028      	str	r0, [r5, #0]
	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     cd4:	61a9      	str	r1, [r5, #24]
		return SUCCESS;

error:
		// Send stop condition
		I2C_Stop(I2Cx);
		return ERROR;
     cd6:	2000      	movs	r0, #0
     cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT)
     cda:	2a01      	cmp	r2, #1
     cdc:	d1fb      	bne.n	cd6 <I2C_MasterTransferData+0x17e>
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
     cde:	f7ff fd19 	bl	714 <I2C_getNum>
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     ce2:	4b08      	ldr	r3, [pc, #32]	; (d04 <I2C_MasterTransferData+0x1ac>)
     ce4:	b2c0      	uxtb	r0, r0
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;
     ce6:	eb03 01c0 	add.w	r1, r3, r0, lsl #3

	else if (Opt == I2C_TRANSFER_INTERRUPT)
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     cea:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     cee:	2208      	movs	r2, #8
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
     cf0:	2020      	movs	r0, #32
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;
     cf2:	604e      	str	r6, [r1, #4]

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     cf4:	61aa      	str	r2, [r5, #24]
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
		I2C_IntCmd(I2Cx, 1);
     cf6:	4639      	mov	r1, r7
		// Set direction phase, write first
		i2cdat[tmp].dir = 0;

		/* First Start condition -------------------------------------------------------------- */
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
		I2Cx->I2CONSET = I2C_I2CONSET_STA;
     cf8:	6028      	str	r0, [r5, #0]
		I2C_IntCmd(I2Cx, 1);
     cfa:	4628      	mov	r0, r5
     cfc:	f7ff fdc9 	bl	892 <I2C_IntCmd>
     d00:	e7de      	b.n	cc0 <I2C_MasterTransferData+0x168>
     d02:	bf00      	nop
     d04:	10000000 	.word	0x10000000

00000d08 <I2C_SlaveTransferData>:
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t time_en;
	int32_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
     d0a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     d0e:	460d      	mov	r5, r1
	uint32_t timeout;
	int32_t time_en;
	int32_t tmp;

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
     d10:	680f      	ldr	r7, [r1, #0]
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     d12:	2100      	movs	r1, #0
 * value.
 * - In case of writing operation (from master): slave will ignore remain data from master.
 **********************************************************************/
Status I2C_SlaveTransferData(LPC_I2C_TypeDef *I2Cx, I2C_S_SETUP_Type *TransferCfg, \
								I2C_TRANSFER_OPT_Type Opt)
{
     d14:	4604      	mov	r4, r0

	// reset all default state
	txdat = (uint8_t *) TransferCfg->tx_data;
	rxdat = (uint8_t *) TransferCfg->rx_data;
	// Reset I2C setup value to default state
	TransferCfg->tx_count = 0;
     d16:	60a9      	str	r1, [r5, #8]
	TransferCfg->rx_count = 0;
     d18:	6169      	str	r1, [r5, #20]
	TransferCfg->status = 0;
     d1a:	61a9      	str	r1, [r5, #24]


	// Polling option
	if (Opt == I2C_TRANSFER_POLLING)
     d1c:	4616      	mov	r6, r2
     d1e:	2a00      	cmp	r2, #0
     d20:	d165      	bne.n	dee <I2C_SlaveTransferData+0xe6>
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
     d22:	2228      	movs	r2, #40	; 0x28

	// Polling option
	if (Opt == I2C_TRANSFER_POLLING)
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     d24:	2004      	movs	r0, #4
     d26:	6020      	str	r0, [r4, #0]
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);

		time_en = 0;
		timeout = 0;
     d28:	4631      	mov	r1, r6
	if (Opt == I2C_TRANSFER_POLLING)
	{
		/* Set AA bit to ACK command on I2C bus */
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		/* Clear SI bit to be ready ... */
		I2Cx->I2CONCLR = (I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC);
     d2a:	61a2      	str	r2, [r4, #24]

		time_en = 0;
     d2c:	4632      	mov	r2, r6
		timeout = 0;

		while (1)
		{
			/* Check SI flag ready */
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
     d2e:	6820      	ldr	r0, [r4, #0]
     d30:	0700      	lsls	r0, r0, #28
     d32:	d54c      	bpl.n	dce <I2C_SlaveTransferData+0xc6>
			{
				time_en = 0;

				switch (CodeStatus = (I2Cx->I2STAT & I2C_STAT_CODE_BITMASK))
     d34:	6860      	ldr	r0, [r4, #4]
     d36:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
     d3a:	2b98      	cmp	r3, #152	; 0x98
     d3c:	d036      	beq.n	dac <I2C_SlaveTransferData+0xa4>
     d3e:	d80c      	bhi.n	d5a <I2C_SlaveTransferData+0x52>
     d40:	2b80      	cmp	r3, #128	; 0x80
     d42:	d019      	beq.n	d78 <I2C_SlaveTransferData+0x70>
     d44:	d804      	bhi.n	d50 <I2C_SlaveTransferData+0x48>
     d46:	2b60      	cmp	r3, #96	; 0x60
     d48:	d02e      	beq.n	da8 <I2C_SlaveTransferData+0xa0>
     d4a:	2b70      	cmp	r3, #112	; 0x70
     d4c:	d138      	bne.n	dc0 <I2C_SlaveTransferData+0xb8>
     d4e:	e02b      	b.n	da8 <I2C_SlaveTransferData+0xa0>
     d50:	2b88      	cmp	r3, #136	; 0x88
     d52:	d02b      	beq.n	dac <I2C_SlaveTransferData+0xa4>
     d54:	2b90      	cmp	r3, #144	; 0x90
     d56:	d133      	bne.n	dc0 <I2C_SlaveTransferData+0xb8>
     d58:	e00e      	b.n	d78 <I2C_SlaveTransferData+0x70>
     d5a:	2bb8      	cmp	r3, #184	; 0xb8
     d5c:	d019      	beq.n	d92 <I2C_SlaveTransferData+0x8a>
     d5e:	d804      	bhi.n	d6a <I2C_SlaveTransferData+0x62>
     d60:	2ba0      	cmp	r3, #160	; 0xa0
     d62:	d028      	beq.n	db6 <I2C_SlaveTransferData+0xae>
     d64:	2ba8      	cmp	r3, #168	; 0xa8
     d66:	d12b      	bne.n	dc0 <I2C_SlaveTransferData+0xb8>
     d68:	e013      	b.n	d92 <I2C_SlaveTransferData+0x8a>
     d6a:	2bc0      	cmp	r3, #192	; 0xc0
     d6c:	f04f 0004 	mov.w	r0, #4
     d70:	d020      	beq.n	db4 <I2C_SlaveTransferData+0xac>
     d72:	2bf8      	cmp	r3, #248	; 0xf8
     d74:	d124      	bne.n	dc0 <I2C_SlaveTransferData+0xb8>
     d76:	e018      	b.n	daa <I2C_SlaveTransferData+0xa2>
				case I2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->rx_count < TransferCfg->rx_length) \
     d78:	6968      	ldr	r0, [r5, #20]
     d7a:	692a      	ldr	r2, [r5, #16]
     d7c:	4290      	cmp	r0, r2
     d7e:	d213      	bcs.n	da8 <I2C_SlaveTransferData+0xa0>
							&& (TransferCfg->rx_data != NULL))
     d80:	68e8      	ldr	r0, [r5, #12]
     d82:	b188      	cbz	r0, da8 <I2C_SlaveTransferData+0xa0>
					{
						*rxdat++ = (uint8_t)I2Cx->I2DAT;
     d84:	68a2      	ldr	r2, [r4, #8]
     d86:	f80c 2b01 	strb.w	r2, [ip], #1
						TransferCfg->rx_count++;
     d8a:	6968      	ldr	r0, [r5, #20]
     d8c:	1c42      	adds	r2, r0, #1
     d8e:	616a      	str	r2, [r5, #20]
     d90:	e00a      	b.n	da8 <I2C_SlaveTransferData+0xa0>
				case I2C_I2STAT_S_TX_DAT_ACK:
					/*
					 * All data bytes that over-flow the specified receive
					 * data length, just ignore them.
					 */
					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
     d92:	68aa      	ldr	r2, [r5, #8]
     d94:	6868      	ldr	r0, [r5, #4]
     d96:	4282      	cmp	r2, r0
     d98:	d206      	bcs.n	da8 <I2C_SlaveTransferData+0xa0>
							&& (TransferCfg->tx_data != NULL))
     d9a:	6828      	ldr	r0, [r5, #0]
     d9c:	b120      	cbz	r0, da8 <I2C_SlaveTransferData+0xa0>
					{
						I2Cx->I2DAT = *txdat++;
     d9e:	f817 0b01 	ldrb.w	r0, [r7], #1
						TransferCfg->tx_count++;
     da2:	3201      	adds	r2, #1
					 * data length, just ignore them.
					 */
					if ((TransferCfg->tx_count < TransferCfg->tx_length) \
							&& (TransferCfg->tx_data != NULL))
					{
						I2Cx->I2DAT = *txdat++;
     da4:	60a0      	str	r0, [r4, #8]
						TransferCfg->tx_count++;
     da6:	60aa      	str	r2, [r5, #8]
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
     da8:	2004      	movs	r0, #4
     daa:	6020      	str	r0, [r4, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     dac:	2208      	movs	r2, #8
     dae:	61a2      	str	r2, [r4, #24]
		while (1)
		{
			/* Check SI flag ready */
			if (I2Cx->I2CONSET & I2C_I2CONSET_SI)
			{
				time_en = 0;
     db0:	2200      	movs	r2, #0
						I2Cx->I2DAT = *txdat++;
						TransferCfg->tx_count++;
					}
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					break;
     db2:	e7bc      	b.n	d2e <I2C_SlaveTransferData+0x26>
				 * Note: Don't wait for stop event since in slave transmit mode,
				 * since there no proof lets us know when a stop signal has been received
				 * on slave side.
				 */
				case I2C_I2STAT_S_TX_DAT_NACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
     db4:	6020      	str	r0, [r4, #0]
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     db6:	2208      	movs	r2, #8
     db8:	61a2      	str	r2, [r4, #24]
					// enable time out
					time_en = 1;
					timeout = 0;
     dba:	2100      	movs	r1, #0
				 */
				case I2C_I2STAT_S_TX_DAT_NACK:
					I2Cx->I2CONSET = I2C_I2CONSET_AA;
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					// enable time out
					time_en = 1;
     dbc:	2201      	movs	r2, #1
					timeout = 0;
					break;
     dbe:	e7b6      	b.n	d2e <I2C_SlaveTransferData+0x26>

				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     dc0:	2108      	movs	r1, #8
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
		return SUCCESS;

s_error:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     dc2:	2004      	movs	r0, #4
					timeout = 0;
					break;

				// Other status must be captured
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     dc4:	61a1      	str	r1, [r4, #24]
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
		return SUCCESS;

s_error:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     dc6:	61a0      	str	r0, [r4, #24]
		// Update status
		TransferCfg->status = CodeStatus;
     dc8:	61ab      	str	r3, [r5, #24]
		return ERROR;
     dca:	2000      	movs	r0, #0
     dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				default:
					I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
					goto s_error;
				}
			}
			else if (time_en)
     dce:	2a00      	cmp	r2, #0
     dd0:	d0ad      	beq.n	d2e <I2C_SlaveTransferData+0x26>
			{
				if (timeout++ > I2C_SLAVE_TIME_OUT)
     dd2:	1c4a      	adds	r2, r1, #1
     dd4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
     dd8:	d802      	bhi.n	de0 <I2C_SlaveTransferData+0xd8>
     dda:	4611      	mov	r1, r2
     ddc:	2201      	movs	r2, #1
     dde:	e7a6      	b.n	d2e <I2C_SlaveTransferData+0x26>
			}
		}

s_end_stage:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     de0:	2104      	movs	r1, #4
		// Check if there's no error during operation
		// Update status
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
     de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
			}
		}

s_end_stage:
		/* Clear AA bit to disable ACK on I2C bus */
		I2Cx->I2CONCLR = I2C_I2CONCLR_AAC;
     de6:	61a1      	str	r1, [r4, #24]
		// Check if there's no error during operation
		// Update status
		TransferCfg->status = CodeStatus | I2C_SETUP_STATUS_DONE;
     de8:	61ab      	str	r3, [r5, #24]
		return SUCCESS;
     dea:	2001      	movs	r0, #1
     dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Update status
		TransferCfg->status = CodeStatus;
		return ERROR;
	}

	else if (Opt == I2C_TRANSFER_INTERRUPT)
     dee:	2a01      	cmp	r2, #1
     df0:	d1eb      	bne.n	dca <I2C_SlaveTransferData+0xc2>
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
     df2:	f7ff fc8f 	bl	714 <I2C_getNum>
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     df6:	4b07      	ldr	r3, [pc, #28]	; (e14 <I2C_SlaveTransferData+0x10c>)
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     df8:	2128      	movs	r1, #40	; 0x28

	else if (Opt == I2C_TRANSFER_INTERRUPT)
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
     dfa:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     dfe:	2204      	movs	r2, #4
	{
		// Setup tx_rx data, callback and interrupt handler
		tmp = I2C_getNum(I2Cx);
		i2cdat[tmp].txrx_setup = (uint32_t) TransferCfg;
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;
     e00:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
     e04:	6046      	str	r6, [r0, #4]

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     e06:	6022      	str	r2, [r4, #0]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
		I2C_IntCmd(I2Cx, 1);
     e08:	4620      	mov	r0, r4
		// Set direction phase, read first
		i2cdat[tmp].dir = 1;

		// Enable AA
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     e0a:	61a1      	str	r1, [r4, #24]
		I2C_IntCmd(I2Cx, 1);
     e0c:	4631      	mov	r1, r6
     e0e:	f7ff fd40 	bl	892 <I2C_IntCmd>
     e12:	e7ea      	b.n	dea <I2C_SlaveTransferData+0xe2>
     e14:	10000000 	.word	0x10000000

00000e18 <I2C_SetOwnSlaveAddr>:
 * 				structure that contains the configuration information for the
*               specified I2C slave address.
 * @return 		None
 **********************************************************************/
void I2C_SetOwnSlaveAddr(LPC_I2C_TypeDef *I2Cx, I2C_OWNSLAVEADDR_CFG_Type *OwnSlaveAddrConfigStruct)
{
     e18:	b510      	push	{r4, lr}
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
     e1a:	788b      	ldrb	r3, [r1, #2]
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
     e1c:	784a      	ldrb	r2, [r1, #1]
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
     e1e:	1e5c      	subs	r4, r3, #1
     e20:	4263      	negs	r3, r4
     e22:	415c      	adcs	r4, r3
     e24:	ea44 0242 	orr.w	r2, r4, r2, lsl #1
	uint32_t tmp;
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_SLAVEADDR_CH(OwnSlaveAddrConfigStruct->SlaveAddrChannel));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(OwnSlaveAddrConfigStruct->GeneralCallState));

	tmp = (((uint32_t)(OwnSlaveAddrConfigStruct->SlaveAddr_7bit << 1)) \
     e28:	b2d3      	uxtb	r3, r2
			| ((OwnSlaveAddrConfigStruct->GeneralCallState == ENABLE) ? 0x01 : 0x00))& I2C_I2ADR_BITMASK;
	switch (OwnSlaveAddrConfigStruct->SlaveAddrChannel)
     e2a:	780a      	ldrb	r2, [r1, #0]
     e2c:	2a03      	cmp	r2, #3
     e2e:	d81a      	bhi.n	e66 <I2C_SetOwnSlaveAddr+0x4e>
     e30:	e8df f002 	tbb	[pc, r2]
     e34:	140e0802 	.word	0x140e0802
	{
	case 0:
		I2Cx->I2ADR0 = tmp;
     e38:	60c3      	str	r3, [r0, #12]
		I2Cx->I2MASK0 = I2C_I2MASK_MASK((uint32_t) \
     e3a:	78c9      	ldrb	r1, [r1, #3]
     e3c:	f001 03fe 	and.w	r3, r1, #254	; 0xfe
     e40:	6303      	str	r3, [r0, #48]	; 0x30
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
     e42:	bd10      	pop	{r4, pc}
	case 1:
		I2Cx->I2ADR1 = tmp;
     e44:	6203      	str	r3, [r0, #32]
		I2Cx->I2MASK1 = I2C_I2MASK_MASK((uint32_t) \
     e46:	78cb      	ldrb	r3, [r1, #3]
     e48:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
     e4c:	6342      	str	r2, [r0, #52]	; 0x34
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
     e4e:	bd10      	pop	{r4, pc}
	case 2:
		I2Cx->I2ADR2 = tmp;
     e50:	6243      	str	r3, [r0, #36]	; 0x24
		I2Cx->I2MASK2 = I2C_I2MASK_MASK((uint32_t) \
     e52:	78ca      	ldrb	r2, [r1, #3]
     e54:	f002 01fe 	and.w	r1, r2, #254	; 0xfe
     e58:	6381      	str	r1, [r0, #56]	; 0x38
				(OwnSlaveAddrConfigStruct->SlaveAddrMaskValue));
		break;
     e5a:	bd10      	pop	{r4, pc}
	case 3:
		I2Cx->I2ADR3 = tmp;
     e5c:	6283      	str	r3, [r0, #40]	; 0x28
		I2Cx->I2MASK3 = I2C_I2MASK_MASK((uint32_t) \
     e5e:	78c9      	ldrb	r1, [r1, #3]
     e60:	f001 03fe 	and.w	r3, r1, #254	; 0xfe
     e64:	63c3      	str	r3, [r0, #60]	; 0x3c
     e66:	bd10      	pop	{r4, pc}

00000e68 <I2C_MonitorModeConfig>:
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= MonitorCfgType;
     e68:	69c3      	ldr	r3, [r0, #28]
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
     e6a:	2a01      	cmp	r2, #1
	{
		I2Cx->MMCTRL |= MonitorCfgType;
	}
	else
	{
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
     e6c:	bf16      	itet	ne
     e6e:	f003 0307 	andne.w	r3, r3, #7
	CHECK_PARAM(PARAM_I2C_MONITOR_CFG(MonitorCfgType));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= MonitorCfgType;
     e72:	4319      	orreq	r1, r3
	}
	else
	{
		I2Cx->MMCTRL &= (~MonitorCfgType) & I2C_I2MMCTRL_BITMASK;
     e74:	ea23 0101 	bicne.w	r1, r3, r1
     e78:	61c1      	str	r1, [r0, #28]
     e7a:	4770      	bx	lr

00000e7c <I2C_MonitorModeCmd>:
void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
     e7c:	2901      	cmp	r1, #1
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
     e7e:	69c3      	ldr	r3, [r0, #28]
void I2C_MonitorModeCmd(LPC_I2C_TypeDef *I2Cx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
     e80:	d106      	bne.n	e90 <I2C_MonitorModeCmd+0x14>
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
     e82:	f043 0301 	orr.w	r3, r3, #1
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     e86:	2104      	movs	r1, #4
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
     e88:	61c3      	str	r3, [r0, #28]
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
     e8a:	2228      	movs	r2, #40	; 0x28
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		I2Cx->MMCTRL |= I2C_I2MMCTRL_MM_ENA;
		I2Cx->I2CONSET = I2C_I2CONSET_AA;
     e8c:	6001      	str	r1, [r0, #0]
     e8e:	e003      	b.n	e98 <I2C_MonitorModeCmd+0x1c>
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC;
	}
	else
	{
		I2Cx->MMCTRL &= (~I2C_I2MMCTRL_MM_ENA) & I2C_I2MMCTRL_BITMASK;
     e90:	f003 0106 	and.w	r1, r3, #6
     e94:	61c1      	str	r1, [r0, #28]
		I2Cx->I2CONCLR = I2C_I2CONCLR_SIC | I2C_I2CONCLR_STAC | I2C_I2CONCLR_AAC;
     e96:	222c      	movs	r2, #44	; 0x2c
     e98:	6182      	str	r2, [r0, #24]
	}
	I2C_MonitorBufferIndex = 0;
     e9a:	4a02      	ldr	r2, [pc, #8]	; (ea4 <I2C_MonitorModeCmd+0x28>)
     e9c:	2000      	movs	r0, #0
     e9e:	6310      	str	r0, [r2, #48]	; 0x30
     ea0:	4770      	bx	lr
     ea2:	bf00      	nop
     ea4:	10000000 	.word	0x10000000

00000ea8 <I2C_MonitorGetDatabuffer>:
 * new data.
 **********************************************************************/
uint8_t I2C_MonitorGetDatabuffer(LPC_I2C_TypeDef *I2Cx)
{
	CHECK_PARAM(PARAM_I2Cx(I2Cx));
	return ((uint8_t)(I2Cx->I2DATA_BUFFER));
     ea8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
     eaa:	b2c0      	uxtb	r0, r0
     eac:	4770      	bx	lr

00000eae <I2C_MonitorHandler>:
 **********************************************************************/
BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
{
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     eae:	2308      	movs	r3, #8
 * register, as it ordinarily would, it could have only one bit-time to
 * respond to the interrupt before the received data is overwritten by
 * new data.
 **********************************************************************/
BOOL_8 I2C_MonitorHandler(LPC_I2C_TypeDef *I2Cx, uint8_t *buffer, uint32_t size)
{
     eb0:	b510      	push	{r4, lr}
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;
     eb2:	6183      	str	r3, [r0, #24]

	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
     eb4:	4b05      	ldr	r3, [pc, #20]	; (ecc <I2C_MonitorHandler+0x1e>)
     eb6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     eb8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
     eba:	5508      	strb	r0, [r1, r4]
	I2C_MonitorBufferIndex++;
     ebc:	1c60      	adds	r0, r4, #1
	if(I2C_MonitorBufferIndex >= size)
	{
		ret = TRUE;
	}
	return ret;
}
     ebe:	4290      	cmp	r0, r2
	BOOL_8 ret=FALSE;

	I2Cx->I2CONCLR = I2C_I2CONCLR_SIC;

	buffer[I2C_MonitorBufferIndex] = (uint8_t)(I2Cx->I2DATA_BUFFER);
	I2C_MonitorBufferIndex++;
     ec0:	6318      	str	r0, [r3, #48]	; 0x30
	if(I2C_MonitorBufferIndex >= size)
	{
		ret = TRUE;
	}
	return ret;
}
     ec2:	bf34      	ite	cc
     ec4:	2000      	movcc	r0, #0
     ec6:	2001      	movcs	r0, #1
     ec8:	bd10      	pop	{r4, pc}
     eca:	bf00      	nop
     ecc:	10000000 	.word	0x10000000

00000ed0 <I2C_MasterTransferComplete>:
 * @return 		Master transfer status, could be:
 * 				- TRUE	master transfer completed
 * 				- FALSE master transfer have not completed yet
 **********************************************************************/
uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
     ed0:	b508      	push	{r3, lr}
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
     ed2:	f7ff fc1f 	bl	714 <I2C_getNum>
	retval = I2C_MasterComplete[tmp];
     ed6:	4b03      	ldr	r3, [pc, #12]	; (ee4 <I2C_MasterTransferComplete+0x14>)
	I2C_MasterComplete[tmp] = FALSE;
     ed8:	2200      	movs	r2, #0
 **********************************************************************/
uint32_t I2C_MasterTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
	retval = I2C_MasterComplete[tmp];
     eda:	eb03 0180 	add.w	r1, r3, r0, lsl #2
     ede:	6988      	ldr	r0, [r1, #24]
	I2C_MasterComplete[tmp] = FALSE;
     ee0:	618a      	str	r2, [r1, #24]
	return retval;
}
     ee2:	bd08      	pop	{r3, pc}
     ee4:	10000000 	.word	0x10000000

00000ee8 <I2C_SlaveTransferComplete>:
 * 				- LPC_I2C1
 * 				- LPC_I2C2
 * @return 		Complete status, could be: TRUE/FALSE
 **********************************************************************/
uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
     ee8:	b508      	push	{r3, lr}
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
     eea:	f7ff fc13 	bl	714 <I2C_getNum>
	retval = I2C_SlaveComplete[tmp];
     eee:	4b03      	ldr	r3, [pc, #12]	; (efc <I2C_SlaveTransferComplete+0x14>)
	I2C_SlaveComplete[tmp] = FALSE;
     ef0:	2200      	movs	r2, #0
 **********************************************************************/
uint32_t I2C_SlaveTransferComplete(LPC_I2C_TypeDef *I2Cx)
{
	uint32_t retval, tmp;
	tmp = I2C_getNum(I2Cx);
	retval = I2C_SlaveComplete[tmp];
     ef2:	eb03 0180 	add.w	r1, r3, r0, lsl #2
     ef6:	6a48      	ldr	r0, [r1, #36]	; 0x24
	I2C_SlaveComplete[tmp] = FALSE;
     ef8:	624a      	str	r2, [r1, #36]	; 0x24
	return retval;
}
     efa:	bd08      	pop	{r3, pc}
     efc:	10000000 	.word	0x10000000

00000f00 <NVIC_DeInit>:
void NVIC_DeInit(void)
{
	uint8_t tmp;

	/* Disable all interrupts */
	NVIC->ICER[0] = 0xFFFFFFFF;
     f00:	4b0b      	ldr	r3, [pc, #44]	; (f30 <NVIC_DeInit+0x30>)
     f02:	f04f 31ff 	mov.w	r1, #4294967295
	NVIC->ICER[1] = 0x00000001;
     f06:	2201      	movs	r2, #1
void NVIC_DeInit(void)
{
	uint8_t tmp;

	/* Disable all interrupts */
	NVIC->ICER[0] = 0xFFFFFFFF;
     f08:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	NVIC->ICER[1] = 0x00000001;
     f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
     f10:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
	NVIC->ICPR[1] = 0x00000001;
     f14:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
     f18:	2300      	movs	r3, #0

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
		NVIC->IP[tmp] = 0x00;
     f1a:	f103 4060 	add.w	r0, r3, #3758096384	; 0xe0000000
     f1e:	3301      	adds	r3, #1
     f20:	2100      	movs	r1, #0
     f22:	f500 4261 	add.w	r2, r0, #57600	; 0xe100
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
	NVIC->ICPR[1] = 0x00000001;

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
     f26:	2b20      	cmp	r3, #32
		NVIC->IP[tmp] = 0x00;
     f28:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
	/* Clear all pending interrupts */
	NVIC->ICPR[0] = 0xFFFFFFFF;
	NVIC->ICPR[1] = 0x00000001;

	/* Clear all interrupt priority */
	for (tmp = 0; tmp < 32; tmp++) {
     f2c:	d1f5      	bne.n	f1a <NVIC_DeInit+0x1a>
		NVIC->IP[tmp] = 0x00;
	}
}
     f2e:	4770      	bx	lr
     f30:	e000e100 	.word	0xe000e100

00000f34 <NVIC_SCBDeInit>:
 *******************************************************************************/
void NVIC_SCBDeInit(void)
{
	uint8_t tmp;

	SCB->ICSR = 0x0A000000;
     f34:	4b0d      	ldr	r3, [pc, #52]	; (f6c <NVIC_SCBDeInit+0x38>)
     f36:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
     f3a:	490d      	ldr	r1, [pc, #52]	; (f70 <NVIC_SCBDeInit+0x3c>)
 *******************************************************************************/
void NVIC_SCBDeInit(void)
{
	uint8_t tmp;

	SCB->ICSR = 0x0A000000;
     f3c:	605a      	str	r2, [r3, #4]
	SCB->VTOR = 0x00000000;
     f3e:	2200      	movs	r2, #0
     f40:	609a      	str	r2, [r3, #8]
	SCB->AIRCR = 0x05FA0000;
     f42:	60d9      	str	r1, [r3, #12]
	SCB->SCR = 0x00000000;
     f44:	611a      	str	r2, [r3, #16]
	SCB->CCR = 0x00000000;
     f46:	615a      	str	r2, [r3, #20]

	for (tmp = 0; tmp < 32; tmp++) {
		SCB->SHP[tmp] = 0x00;
     f48:	f102 4060 	add.w	r0, r2, #3758096384	; 0xe0000000
     f4c:	3201      	adds	r2, #1
     f4e:	f500 416d 	add.w	r1, r0, #60672	; 0xed00
     f52:	2000      	movs	r0, #0
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
	SCB->SCR = 0x00000000;
	SCB->CCR = 0x00000000;

	for (tmp = 0; tmp < 32; tmp++) {
     f54:	2a20      	cmp	r2, #32
		SCB->SHP[tmp] = 0x00;
     f56:	4b05      	ldr	r3, [pc, #20]	; (f6c <NVIC_SCBDeInit+0x38>)
     f58:	7608      	strb	r0, [r1, #24]
	SCB->VTOR = 0x00000000;
	SCB->AIRCR = 0x05FA0000;
	SCB->SCR = 0x00000000;
	SCB->CCR = 0x00000000;

	for (tmp = 0; tmp < 32; tmp++) {
     f5a:	d1f5      	bne.n	f48 <NVIC_SCBDeInit+0x14>
		SCB->SHP[tmp] = 0x00;
	}

	SCB->SHCSR = 0x00000000;
	SCB->CFSR = 0xFFFFFFFF;
     f5c:	f04f 31ff 	mov.w	r1, #4294967295

	for (tmp = 0; tmp < 32; tmp++) {
		SCB->SHP[tmp] = 0x00;
	}

	SCB->SHCSR = 0x00000000;
     f60:	6258      	str	r0, [r3, #36]	; 0x24
	SCB->CFSR = 0xFFFFFFFF;
     f62:	6299      	str	r1, [r3, #40]	; 0x28
	SCB->HFSR = 0xFFFFFFFF;
     f64:	62d9      	str	r1, [r3, #44]	; 0x2c
	SCB->DFSR = 0xFFFFFFFF;
     f66:	6319      	str	r1, [r3, #48]	; 0x30
     f68:	4770      	bx	lr
     f6a:	bf00      	nop
     f6c:	e000ed00 	.word	0xe000ed00
     f70:	05fa0000 	.word	0x05fa0000

00000f74 <NVIC_SetVTOR>:
 * @param		offset Offset value
 * @return      None
 *******************************************************************************/
void NVIC_SetVTOR(uint32_t offset)
{
	SCB->VTOR  = (offset & NVIC_VTOR_MASK);
     f74:	f020 4040 	bic.w	r0, r0, #3221225472	; 0xc0000000
     f78:	4b02      	ldr	r3, [pc, #8]	; (f84 <NVIC_SetVTOR+0x10>)
     f7a:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
     f7e:	6099      	str	r1, [r3, #8]
     f80:	4770      	bx	lr
     f82:	bf00      	nop
     f84:	e000ed00 	.word	0xe000ed00

00000f88 <PINSEL_ConfigTraceFunc>:
 *
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigTraceFunc(FunctionalState NewState)
{
	if (NewState == ENABLE) {
     f88:	2801      	cmp	r0, #1
     f8a:	d104      	bne.n	f96 <PINSEL_ConfigTraceFunc+0xe>
		LPC_PINCON->PINSEL10 |= (0x01UL << 3);
     f8c:	4b05      	ldr	r3, [pc, #20]	; (fa4 <PINSEL_ConfigTraceFunc+0x1c>)
     f8e:	6a99      	ldr	r1, [r3, #40]	; 0x28
     f90:	f041 0008 	orr.w	r0, r1, #8
     f94:	e004      	b.n	fa0 <PINSEL_ConfigTraceFunc+0x18>
	} else if (NewState == DISABLE) {
     f96:	b920      	cbnz	r0, fa2 <PINSEL_ConfigTraceFunc+0x1a>
		LPC_PINCON->PINSEL10 &= ~(0x01UL << 3);
     f98:	4b02      	ldr	r3, [pc, #8]	; (fa4 <PINSEL_ConfigTraceFunc+0x1c>)
     f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f9c:	f022 0008 	bic.w	r0, r2, #8
     fa0:	6298      	str	r0, [r3, #40]	; 0x28
     fa2:	4770      	bx	lr
     fa4:	4002c000 	.word	0x4002c000

00000fa8 <PINSEL_SetI2C0Pins>:
	}

	if (filterSlewRateEnable == DISABLE){
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
	}
	LPC_PINCON->I2CPADCFG = regVal;
     fa8:	4b03      	ldr	r3, [pc, #12]	; (fb8 <PINSEL_SetI2C0Pins+0x10>)

	if (i2cPinMode == PINSEL_I2C_Fast_Mode){
		regVal = PINSEL_I2CPADCFG_SCLDRV0 | PINSEL_I2CPADCFG_SDADRV0;
	}

	if (filterSlewRateEnable == DISABLE){
     faa:	2900      	cmp	r1, #0
     fac:	bf0c      	ite	eq
     fae:	210a      	moveq	r1, #10
     fb0:	2105      	movne	r1, #5
		regVal = PINSEL_I2CPADCFG_SCLI2C0 | PINSEL_I2CPADCFG_SDAI2C0;
	}
	LPC_PINCON->I2CPADCFG = regVal;
     fb2:	67d9      	str	r1, [r3, #124]	; 0x7c
     fb4:	4770      	bx	lr
     fb6:	bf00      	nop
     fb8:	4002c000 	.word	0x4002c000

00000fbc <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
     fbc:	b570      	push	{r4, r5, r6, lr}
 *
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
	uint32_t pinnum_t = pinnum;
     fbe:	7843      	ldrb	r3, [r0, #1]
	uint32_t pinselreg_idx = 2 * portnum;
     fc0:	7802      	ldrb	r2, [r0, #0]
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
     fc2:	7884      	ldrb	r4, [r0, #2]
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
	uint32_t pinnum_t = pinnum;
	uint32_t pinselreg_idx = 2 * portnum;
     fc4:	0051      	lsls	r1, r2, #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINSEL0;

	if (pinnum_t >= 16) {
     fc6:	2b0f      	cmp	r3, #15
     fc8:	d901      	bls.n	fce <PINSEL_ConfigPin+0x12>
		pinnum_t -= 16;
     fca:	3b10      	subs	r3, #16
		pinselreg_idx++;
     fcc:	3101      	adds	r1, #1
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
     fce:	008d      	lsls	r5, r1, #2
     fd0:	005b      	lsls	r3, r3, #1
     fd2:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
     fd6:	2503      	movs	r5, #3
     fd8:	fa05 f503 	lsl.w	r5, r5, r3
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
     fdc:	fa04 f403 	lsl.w	r4, r4, r3

	if (pinnum_t >= 16) {
		pinnum_t -= 16;
		pinselreg_idx++;
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
     fe0:	f506 3230 	add.w	r2, r6, #180224	; 0x2c000
     fe4:	6811      	ldr	r1, [r2, #0]
     fe6:	ea21 0105 	bic.w	r1, r1, r5
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
     fea:	ea41 0604 	orr.w	r6, r1, r4
     fee:	6016      	str	r6, [r2, #0]

 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t pinnum_t = pinnum;
     ff0:	7842      	ldrb	r2, [r0, #1]
	uint32_t pinmodereg_idx = 2 * portnum;
     ff2:	7803      	ldrb	r3, [r0, #0]
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
     ff4:	78c5      	ldrb	r5, [r0, #3]
 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t pinnum_t = pinnum;
	uint32_t pinmodereg_idx = 2 * portnum;
     ff6:	005b      	lsls	r3, r3, #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE0;

	if (pinnum_t >= 16) {
     ff8:	2a0f      	cmp	r2, #15
     ffa:	d901      	bls.n	1000 <PINSEL_ConfigPin+0x44>
		pinnum_t -= 16;
     ffc:	3a10      	subs	r2, #16
		pinmodereg_idx++ ;
     ffe:	3301      	adds	r3, #1
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
    1000:	0052      	lsls	r2, r2, #1
    1002:	2603      	movs	r6, #3
    1004:	fa06 f602 	lsl.w	r6, r6, r2
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
    1008:	fa05 f202 	lsl.w	r2, r5, r2
	if (pinnum_t >= 16) {
		pinnum_t -= 16;
		pinmodereg_idx++ ;
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
    100c:	490f      	ldr	r1, [pc, #60]	; (104c <PINSEL_ConfigPin+0x90>)
    100e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    1012:	ea24 0406 	bic.w	r4, r4, r6
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
    1016:	4322      	orrs	r2, r4
    1018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
    101c:	7802      	ldrb	r2, [r0, #0]
    101e:	7841      	ldrb	r1, [r0, #1]
 **********************************************************************/
void set_OpenDrainMode( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE_OD0;

	if (modenum == PINSEL_PINMODE_OPENDRAIN){
    1020:	7900      	ldrb	r0, [r0, #4]
    1022:	4b0b      	ldr	r3, [pc, #44]	; (1050 <PINSEL_ConfigPin+0x94>)
    1024:	2801      	cmp	r0, #1
    1026:	d107      	bne.n	1038 <PINSEL_ConfigPin+0x7c>
		*(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
    1028:	fa00 f101 	lsl.w	r1, r0, r1
    102c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    1030:	430c      	orrs	r4, r1
    1032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    1036:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		*(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
    1038:	2001      	movs	r0, #1
    103a:	fa00 f101 	lsl.w	r1, r0, r1
    103e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    1042:	ea20 0001 	bic.w	r0, r0, r1
    1046:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    104a:	bd70      	pop	{r4, r5, r6, pc}
    104c:	4002c040 	.word	0x4002c040
    1050:	4002c068 	.word	0x4002c068

00001054 <CS_Init1>:
 * 				due to definition of CS_PORT_NUM and CS_PORT_NUM
 * @param		None
 * @return		None
 ***********************************************************************/
void CS_Init1 (LPC_SSP_TypeDef *SSPx)
{
    1054:	b508      	push	{r3, lr}
	if(SSPx == LPC_SSP0)
    1056:	4b0e      	ldr	r3, [pc, #56]	; (1090 <CS_Init1+0x3c>)
    1058:	4298      	cmp	r0, r3
    105a:	d109      	bne.n	1070 <CS_Init1+0x1c>
	{
		GPIO_SetDir(0, _BIT(16), 1);
    105c:	2000      	movs	r0, #0
    105e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1062:	2201      	movs	r2, #1
    1064:	f7ff f9f9 	bl	45a <GPIO_SetDir>
		GPIO_SetValue(0, _BIT(16));
    1068:	2000      	movs	r0, #0
    106a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    106e:	e009      	b.n	1084 <CS_Init1+0x30>
	}
	else if (SSPx == LPC_SSP1)
    1070:	4908      	ldr	r1, [pc, #32]	; (1094 <CS_Init1+0x40>)
    1072:	4288      	cmp	r0, r1
    1074:	d10a      	bne.n	108c <CS_Init1+0x38>
	{
		GPIO_SetDir(0, _BIT(6), 1);
    1076:	2000      	movs	r0, #0
    1078:	2140      	movs	r1, #64	; 0x40
    107a:	2201      	movs	r2, #1
    107c:	f7ff f9ed 	bl	45a <GPIO_SetDir>
		GPIO_SetValue(0, _BIT(6));
    1080:	2000      	movs	r0, #0
    1082:	2140      	movs	r1, #64	; 0x40
	}
}
    1084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GPIO_SetValue(0, _BIT(16));
	}
	else if (SSPx == LPC_SSP1)
	{
		GPIO_SetDir(0, _BIT(6), 1);
		GPIO_SetValue(0, _BIT(6));
    1088:	f7ff b9f8 	b.w	47c <GPIO_SetValue>
    108c:	bd08      	pop	{r3, pc}
    108e:	bf00      	nop
    1090:	40088000 	.word	0x40088000
    1094:	40030000 	.word	0x40030000

00001098 <CS_Force1>:
 * 				- 1: Drive CS pin to high level
 * @return		None
 ***********************************************************************/
void CS_Force1 (LPC_SSP_TypeDef *SSPx, FunctionalState state)
{
	if (SSPx == LPC_SSP0)
    1098:	4b0c      	ldr	r3, [pc, #48]	; (10cc <CS_Force1+0x34>)
    109a:	4298      	cmp	r0, r3
    109c:	d108      	bne.n	10b0 <CS_Force1+0x18>
	{
		if (state)
    109e:	b119      	cbz	r1, 10a8 <CS_Force1+0x10>
		{
			GPIO_SetValue(0, _BIT(16));
    10a0:	2000      	movs	r0, #0
    10a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    10a6:	e009      	b.n	10bc <CS_Force1+0x24>
		}
		else
		{
			GPIO_ClearValue(0, _BIT(16));
    10a8:	4608      	mov	r0, r1
    10aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    10ae:	e009      	b.n	10c4 <CS_Force1+0x2c>
		}
	}
	else if (SSPx == LPC_SSP1)
    10b0:	4a07      	ldr	r2, [pc, #28]	; (10d0 <CS_Force1+0x38>)
    10b2:	4290      	cmp	r0, r2
    10b4:	d108      	bne.n	10c8 <CS_Force1+0x30>
	{
		if (state)
    10b6:	b119      	cbz	r1, 10c0 <CS_Force1+0x28>
		{
			GPIO_SetValue(0, _BIT(6));
    10b8:	2000      	movs	r0, #0
    10ba:	2140      	movs	r1, #64	; 0x40
    10bc:	f7ff b9de 	b.w	47c <GPIO_SetValue>
		}
		else
		{
			GPIO_ClearValue(0, _BIT(6));
    10c0:	4608      	mov	r0, r1
    10c2:	2140      	movs	r1, #64	; 0x40
    10c4:	f7ff b9e4 	b.w	490 <GPIO_ClearValue>
    10c8:	4770      	bx	lr
    10ca:	bf00      	nop
    10cc:	40088000 	.word	0x40088000
    10d0:	40030000 	.word	0x40030000

000010d4 <Buffer_Init1>:
 * @brief		Initialize buffer
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Buffer_Init1 (void)
{
    10d4:	2300      	movs	r3, #0
	uint8_t i;
#if (SSP_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE1; i++)
	{
		Tx_Buf1[i] = 0;
    10d6:	4904      	ldr	r1, [pc, #16]	; (10e8 <Buffer_Init1+0x14>)
		Rx_Buf1[i] = 0;
    10d8:	4804      	ldr	r0, [pc, #16]	; (10ec <Buffer_Init1+0x18>)
{
	uint8_t i;
#if (SSP_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE1; i++)
	{
		Tx_Buf1[i] = 0;
    10da:	2200      	movs	r2, #0
    10dc:	545a      	strb	r2, [r3, r1]
		Rx_Buf1[i] = 0;
    10de:	541a      	strb	r2, [r3, r0]
    10e0:	3301      	adds	r3, #1
 **********************************************************************/
void Buffer_Init1 (void)
{
	uint8_t i;
#if (SSP_DATABIT_SIZE == 8)
	for (i = 0; i < BUFFER_SIZE1; i++)
    10e2:	2b40      	cmp	r3, #64	; 0x40
    10e4:	d1f7      	bne.n	10d6 <Buffer_Init1+0x2>
	{
		Tx_Buf1[i] = 0;
		Rx_Buf1[i] = 0;
	}
#endif
}
    10e6:	4770      	bx	lr
    10e8:	100002cc 	.word	0x100002cc
    10ec:	1000030c 	.word	0x1000030c

000010f0 <SSP_Init>:
{
	uint32_t tmp;

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
    10f0:	4b24      	ldr	r3, [pc, #144]	; (1184 <SSP_Init+0x94>)
*                    that contains the configuration information for the
*                    specified SSP peripheral.
* @return 		None
 *********************************************************************/
void SSP_Init(LPC_SSP_TypeDef *SSPx, SSP_CFG_Type *SSP_ConfigStruct)
{
    10f2:	b570      	push	{r4, r5, r6, lr}
	uint32_t tmp;

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
    10f4:	4298      	cmp	r0, r3
*                    that contains the configuration information for the
*                    specified SSP peripheral.
* @return 		None
 *********************************************************************/
void SSP_Init(LPC_SSP_TypeDef *SSPx, SSP_CFG_Type *SSP_ConfigStruct)
{
    10f6:	4604      	mov	r4, r0
    10f8:	460d      	mov	r5, r1

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, ENABLE);
    10fa:	bf08      	it	eq
    10fc:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
{
	uint32_t tmp;

	CHECK_PARAM(PARAM_SSPx(SSPx));

	if(SSPx == LPC_SSP0) {
    1100:	d004      	beq.n	110c <SSP_Init+0x1c>
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, ENABLE);
	} else if(SSPx == LPC_SSP1) {
    1102:	4821      	ldr	r0, [pc, #132]	; (1188 <SSP_Init+0x98>)
    1104:	4284      	cmp	r4, r0
    1106:	d13b      	bne.n	1180 <SSP_Init+0x90>
		/* Set up clock and power for SSP1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP1, ENABLE);
    1108:	f44f 6080 	mov.w	r0, #1024	; 0x400
    110c:	2101      	movs	r1, #1
    110e:	f7ff f957 	bl	3c0 <CLKPWR_ConfigPPWR>
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
    1112:	6869      	ldr	r1, [r5, #4]
    1114:	68aa      	ldr	r2, [r5, #8]
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
    1116:	692e      	ldr	r6, [r5, #16]
    1118:	682b      	ldr	r3, [r5, #0]
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
    111a:	430a      	orrs	r2, r1
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
    111c:	4332      	orrs	r2, r6
    111e:	ea42 0003 	orr.w	r0, r2, r3
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
    1122:	68e9      	ldr	r1, [r5, #12]

    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
    1124:	4b17      	ldr	r3, [pc, #92]	; (1184 <SSP_Init+0x94>)
	}

	/* Configure SSP, interrupt is disable, LoopBack mode is disable,
	 * SSP is disable, Slave output is disable as default
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
    1126:	b282      	uxth	r2, r0
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
    1128:	f001 060f 	and.w	r6, r1, #15
    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP0);
    112c:	202a      	movs	r0, #42	; 0x2a

    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
    112e:	429c      	cmp	r4, r3
	 */
	tmp = ((SSP_ConfigStruct->CPHA) | (SSP_ConfigStruct->CPOL) \
		| (SSP_ConfigStruct->FrameFormat) | (SSP_ConfigStruct->Databit))
		& SSP_CR0_BITMASK;
	// write back to SSP control register
	SSPx->CR0 = tmp;
    1130:	6022      	str	r2, [r4, #0]

	tmp = SSP_ConfigStruct->Mode & SSP_CR1_BITMASK;
	// Write back to CR1
	SSPx->CR1 = tmp;
    1132:	6066      	str	r6, [r4, #4]

	// Set clock rate for SSP peripheral
	setSSPclock(SSPx, SSP_ConfigStruct->ClockRate);
    1134:	696e      	ldr	r6, [r5, #20]

    CHECK_PARAM(PARAM_SSPx(SSPx));

    /* The SSP clock is derived from the (main system oscillator / 2),
       so compute the best divider from that clock */
    if (SSPx == LPC_SSP0){
    1136:	d003      	beq.n	1140 <SSP_Init+0x50>
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP0);
    } else if (SSPx == LPC_SSP1) {
    1138:	4813      	ldr	r0, [pc, #76]	; (1188 <SSP_Init+0x98>)
    113a:	4284      	cmp	r4, r0
    113c:	d120      	bne.n	1180 <SSP_Init+0x90>
    	ssp_clk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SSP1);
    113e:	2014      	movs	r0, #20
    1140:	f7ff f92e 	bl	3a0 <CLKPWR_GetPCLK>

	/* Find closest divider to get at or under the target frequency.
	   Use smallest prescale possible and rely on the divider to get
	   the closest target frequency */
	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
    1144:	f04f 31ff 	mov.w	r1, #4294967295
    }

	/* Find closest divider to get at or under the target frequency.
	   Use smallest prescale possible and rely on the divider to get
	   the closest target frequency */
	cr0_div = 0;
    1148:	2200      	movs	r2, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
    114a:	2302      	movs	r3, #2
	while (cmp_clk > target_clock)
    114c:	42b1      	cmp	r1, r6
    114e:	d90d      	bls.n	116c <SSP_Init+0x7c>
	{
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
    1150:	1c55      	adds	r5, r2, #1
    1152:	fb03 f105 	mul.w	r1, r3, r5
    1156:	fbb0 f1f1 	udiv	r1, r0, r1
		if (cmp_clk > target_clock)
    115a:	42b1      	cmp	r1, r6
    115c:	d906      	bls.n	116c <SSP_Init+0x7c>
		{
			cr0_div++;
			if (cr0_div > 0xFF)
    115e:	2dff      	cmp	r5, #255	; 0xff
    1160:	d902      	bls.n	1168 <SSP_Init+0x78>
			{
				cr0_div = 0;
				prescale += 2;
    1162:	3302      	adds	r3, #2
		if (cmp_clk > target_clock)
		{
			cr0_div++;
			if (cr0_div > 0xFF)
			{
				cr0_div = 0;
    1164:	2200      	movs	r2, #0
    1166:	e7f1      	b.n	114c <SSP_Init+0x5c>
	{
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > target_clock)
		{
			cr0_div++;
			if (cr0_div > 0xFF)
    1168:	462a      	mov	r2, r5
    116a:	e7ef      	b.n	114c <SSP_Init+0x5c>
			}
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
    116c:	6820      	ldr	r0, [r4, #0]
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
    116e:	0612      	lsls	r2, r2, #24
			}
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
    1170:	b2c1      	uxtb	r1, r0
    1172:	6021      	str	r1, [r4, #0]
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
    1174:	6820      	ldr	r0, [r4, #0]
    SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
    1176:	b2db      	uxtb	r3, r3
		}
	}

    /* Write computed prescaler and divider back to register */
    SSPx->CR0 &= (~SSP_CR0_SCR(0xFF)) & SSP_CR0_BITMASK;
    SSPx->CR0 |= (SSP_CR0_SCR(cr0_div)) & SSP_CR0_BITMASK;
    1178:	ea40 4112 	orr.w	r1, r0, r2, lsr #16
    117c:	6021      	str	r1, [r4, #0]
    SSPx->CPSR = prescale & SSP_CPSR_BITMASK;
    117e:	6123      	str	r3, [r4, #16]
    1180:	bd70      	pop	{r4, r5, r6, pc}
    1182:	bf00      	nop
    1184:	40088000 	.word	0x40088000
    1188:	40030000 	.word	0x40030000

0000118c <SSP_DeInit>:
 **********************************************************************/
void SSP_DeInit(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (SSPx == LPC_SSP0){
    118c:	4b07      	ldr	r3, [pc, #28]	; (11ac <SSP_DeInit+0x20>)
    118e:	4298      	cmp	r0, r3
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, DISABLE);
    1190:	bf08      	it	eq
    1192:	f44f 1000 	moveq.w	r0, #2097152	; 0x200000
 **********************************************************************/
void SSP_DeInit(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (SSPx == LPC_SSP0){
    1196:	d004      	beq.n	11a2 <SSP_DeInit+0x16>
		/* Set up clock and power for SSP0 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP0, DISABLE);
	} else if (SSPx == LPC_SSP1) {
    1198:	4905      	ldr	r1, [pc, #20]	; (11b0 <SSP_DeInit+0x24>)
    119a:	4288      	cmp	r0, r1
    119c:	d104      	bne.n	11a8 <SSP_DeInit+0x1c>
		/* Set up clock and power for SSP1 module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSSP1, DISABLE);
    119e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    11a2:	2100      	movs	r1, #0
    11a4:	f7ff b90c 	b.w	3c0 <CLKPWR_ConfigPPWR>
    11a8:	4770      	bx	lr
    11aa:	bf00      	nop
    11ac:	40088000 	.word	0x40088000
    11b0:	40030000 	.word	0x40030000

000011b4 <SSP_GetDataSize>:
*				- SSP_DATABIT_16: 16 bit transfer
*******************************************************************************/
uint8_t SSP_GetDataSize(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->CR0 & (0xF));
    11b4:	6800      	ldr	r0, [r0, #0]
}
    11b6:	f000 000f 	and.w	r0, r0, #15
    11ba:	4770      	bx	lr

000011bc <SSP_ConfigStructInit>:
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
	SSP_InitStruct->ClockRate = 3000000;
    11bc:	4a04      	ldr	r2, [pc, #16]	; (11d0 <SSP_ConfigStructInit+0x14>)
*                    which will be initialized.
* @return		None
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
    11be:	2300      	movs	r3, #0
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
	SSP_InitStruct->ClockRate = 3000000;
	SSP_InitStruct->Databit = SSP_DATABIT_8;
    11c0:	2107      	movs	r1, #7
*                    which will be initialized.
* @return		None
*******************************************************************************/
void SSP_ConfigStructInit(SSP_CFG_Type *SSP_InitStruct)
{
	SSP_InitStruct->CPHA = SSP_CPHA_FIRST;
    11c2:	6043      	str	r3, [r0, #4]
	SSP_InitStruct->CPOL = SSP_CPOL_HI;
    11c4:	6083      	str	r3, [r0, #8]
	SSP_InitStruct->ClockRate = 3000000;
    11c6:	6142      	str	r2, [r0, #20]
	SSP_InitStruct->Databit = SSP_DATABIT_8;
    11c8:	6001      	str	r1, [r0, #0]
	SSP_InitStruct->Mode = SSP_MASTER_MODE;
    11ca:	60c3      	str	r3, [r0, #12]
	SSP_InitStruct->FrameFormat = SSP_FRAME_SPI;
    11cc:	6103      	str	r3, [r0, #16]
    11ce:	4770      	bx	lr
    11d0:	002dc6c0 	.word	0x002dc6c0

000011d4 <SSP_Config>:
* 				 		- LPC_SSP0: SSP0 peripheral
* 						- LPC_SSP1: SSP1 peripheral
* @return 		None
***********************************************************************/
void SSP_Config (LPC_SSP_TypeDef *SSPx)
{
    11d4:	b570      	push	{r4, r5, r6, lr}
	PINSEL_CFG_Type PinCfg;

	// SSP Configuration structure variable
	SSP_CFG_Type SSP_ConfigStruct;

	if(SSPx == LPC_SSP0)
    11d6:	4b39      	ldr	r3, [pc, #228]	; (12bc <SSP_Config+0xe8>)
* 				 		- LPC_SSP0: SSP0 peripheral
* 						- LPC_SSP1: SSP1 peripheral
* @return 		None
***********************************************************************/
void SSP_Config (LPC_SSP_TypeDef *SSPx)
{
    11d8:	b088      	sub	sp, #32
	PINSEL_CFG_Type PinCfg;

	// SSP Configuration structure variable
	SSP_CFG_Type SSP_ConfigStruct;

	if(SSPx == LPC_SSP0)
    11da:	4298      	cmp	r0, r3
* 				 		- LPC_SSP0: SSP0 peripheral
* 						- LPC_SSP1: SSP1 peripheral
* @return 		None
***********************************************************************/
void SSP_Config (LPC_SSP_TypeDef *SSPx)
{
    11dc:	4604      	mov	r4, r0
	PINSEL_CFG_Type PinCfg;

	// SSP Configuration structure variable
	SSP_CFG_Type SSP_ConfigStruct;

	if(SSPx == LPC_SSP0)
    11de:	d12b      	bne.n	1238 <SSP_Config+0x64>
		 * P0.15 - SCK0;
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
    11e0:	2502      	movs	r5, #2
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
    11e2:	200f      	movs	r0, #15
		 * P0.15 - SCK0;
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
    11e4:	f88d 5002 	strb.w	r5, [sp, #2]
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
    11e8:	f88d 0001 	strb.w	r0, [sp, #1]
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
		PinCfg.OpenDrain = 0;
    11ec:	2500      	movs	r5, #0
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
    11ee:	4668      	mov	r0, sp
		 * P0.16 - SSEL0 - used as GPIO
		 * P0.17 - MISO0
		 * P0.18 - MOSI0
		 */
		PinCfg.Funcnum = 2;
		PinCfg.OpenDrain = 0;
    11f0:	f88d 5004 	strb.w	r5, [sp, #4]
		PinCfg.Pinmode = 0;
    11f4:	f88d 5003 	strb.w	r5, [sp, #3]
		PinCfg.Portnum = 0;
    11f8:	f88d 5000 	strb.w	r5, [sp]
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
    11fc:	f7ff fede 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 17;
    1200:	2111      	movs	r1, #17
		PINSEL_ConfigPin(&PinCfg);
    1202:	4668      	mov	r0, sp
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 17;
    1204:	f88d 1001 	strb.w	r1, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    1208:	f7ff fed8 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 18;
    120c:	2212      	movs	r2, #18
		PINSEL_ConfigPin(&PinCfg);
    120e:	4668      	mov	r0, sp
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 15;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 17;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 18;
    1210:	f88d 2001 	strb.w	r2, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    1214:	f7ff fed2 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 16;
    1218:	2310      	movs	r3, #16
		PinCfg.Funcnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    121a:	4668      	mov	r0, sp
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 17;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 18;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 16;
    121c:	f88d 3001 	strb.w	r3, [sp, #1]
		PinCfg.Funcnum = 0;
    1220:	f88d 5002 	strb.w	r5, [sp, #2]
		PINSEL_ConfigPin(&PinCfg);
    1224:	f7ff feca 	bl	fbc <PINSEL_ConfigPin>

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);
    1228:	a802      	add	r0, sp, #8
    122a:	f7ff ffc7 	bl	11bc <SSP_ConfigStructInit>

		SSP_ConfigStruct.ClockRate = 3000000;
    122e:	4824      	ldr	r0, [pc, #144]	; (12c0 <SSP_Config+0xec>)
		SSP_ConfigStruct.Databit = SSP_DATABIT_8;
    1230:	2107      	movs	r1, #7
		PINSEL_ConfigPin(&PinCfg);

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);

		SSP_ConfigStruct.ClockRate = 3000000;
    1232:	9007      	str	r0, [sp, #28]
		SSP_ConfigStruct.Databit = SSP_DATABIT_8;
    1234:	9102      	str	r1, [sp, #8]
    1236:	e032      	b.n	129e <SSP_Config+0xca>
	}
	else if(SSPx == LPC_SSP1)
    1238:	4822      	ldr	r0, [pc, #136]	; (12c4 <SSP_Config+0xf0>)
    123a:	4284      	cmp	r4, r0
    123c:	d12f      	bne.n	129e <SSP_Config+0xca>
		 * P0.6 - SSEL1 - used as GPIO
		 * P0.7 - SCK1
		 * P0.8 - MISO1
		 * P0.9 - MOSI1
		 */
		PinCfg.Funcnum = 2;
    123e:	2102      	movs	r1, #2
		PinCfg.OpenDrain = 0;
    1240:	2500      	movs	r5, #0
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 7;
    1242:	2607      	movs	r6, #7
		PINSEL_ConfigPin(&PinCfg);
    1244:	4668      	mov	r0, sp
		 * P0.6 - SSEL1 - used as GPIO
		 * P0.7 - SCK1
		 * P0.8 - MISO1
		 * P0.9 - MOSI1
		 */
		PinCfg.Funcnum = 2;
    1246:	f88d 1002 	strb.w	r1, [sp, #2]
		PinCfg.OpenDrain = 0;
    124a:	f88d 5004 	strb.w	r5, [sp, #4]
		PinCfg.Pinmode = 0;
    124e:	f88d 5003 	strb.w	r5, [sp, #3]
		PinCfg.Portnum = 0;
    1252:	f88d 5000 	strb.w	r5, [sp]
		PinCfg.Pinnum = 7;
    1256:	f88d 6001 	strb.w	r6, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    125a:	f7ff feaf 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 8;
    125e:	2208      	movs	r2, #8
		PINSEL_ConfigPin(&PinCfg);
    1260:	4668      	mov	r0, sp
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 7;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 8;
    1262:	f88d 2001 	strb.w	r2, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    1266:	f7ff fea9 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 9;
    126a:	2309      	movs	r3, #9
		PINSEL_ConfigPin(&PinCfg);
    126c:	4668      	mov	r0, sp
		PinCfg.Portnum = 0;
		PinCfg.Pinnum = 7;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 8;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 9;
    126e:	f88d 3001 	strb.w	r3, [sp, #1]
		PINSEL_ConfigPin(&PinCfg);
    1272:	f7ff fea3 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 6;
    1276:	2006      	movs	r0, #6
    1278:	f88d 0001 	strb.w	r0, [sp, #1]
		PinCfg.Funcnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    127c:	4668      	mov	r0, sp
		PinCfg.Pinnum = 8;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 9;
		PINSEL_ConfigPin(&PinCfg);
		PinCfg.Pinnum = 6;
		PinCfg.Funcnum = 0;
    127e:	f88d 5002 	strb.w	r5, [sp, #2]
		PINSEL_ConfigPin(&PinCfg);
    1282:	f7ff fe9b 	bl	fbc <PINSEL_ConfigPin>

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);
    1286:	a802      	add	r0, sp, #8
    1288:	f7ff ff98 	bl	11bc <SSP_ConfigStructInit>

		SSP_ConfigStruct.CPHA = SSP_CPHA_SECOND;
		SSP_ConfigStruct.CPOL = SSP_CPOL_LO;
		SSP_ConfigStruct.ClockRate = 15000000;
    128c:	4b0e      	ldr	r3, [pc, #56]	; (12c8 <SSP_Config+0xf4>)
		PINSEL_ConfigPin(&PinCfg);

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);

		SSP_ConfigStruct.CPHA = SSP_CPHA_SECOND;
    128e:	2180      	movs	r1, #128	; 0x80
		SSP_ConfigStruct.CPOL = SSP_CPOL_LO;
    1290:	2240      	movs	r2, #64	; 0x40
		PINSEL_ConfigPin(&PinCfg);

		// initialize SSP configuration structure to default
		SSP_ConfigStructInit(&SSP_ConfigStruct);

		SSP_ConfigStruct.CPHA = SSP_CPHA_SECOND;
    1292:	9103      	str	r1, [sp, #12]
		SSP_ConfigStruct.CPOL = SSP_CPOL_LO;
    1294:	9204      	str	r2, [sp, #16]
		SSP_ConfigStruct.ClockRate = 15000000;
    1296:	9307      	str	r3, [sp, #28]
		SSP_ConfigStruct.Databit = SSP_DATABIT_8;
    1298:	9602      	str	r6, [sp, #8]
		SSP_ConfigStruct.Mode = SSP_MASTER_MODE;
    129a:	9505      	str	r5, [sp, #20]
		SSP_ConfigStruct.FrameFormat = SSP_FRAME_SPI;
    129c:	9506      	str	r5, [sp, #24]
	}

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(SSPx, &SSP_ConfigStruct);
    129e:	4620      	mov	r0, r4
    12a0:	a902      	add	r1, sp, #8
    12a2:	f7ff ff25 	bl	10f0 <SSP_Init>

	CS_Init1(SSPx);     // Chip Select Init
    12a6:	4620      	mov	r0, r4
    12a8:	f7ff fed4 	bl	1054 <CS_Init1>
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
    12ac:	6862      	ldr	r2, [r4, #4]
    12ae:	f042 0302 	orr.w	r3, r2, #2
    12b2:	6063      	str	r3, [r4, #4]
	CS_Init1(SSPx);     // Chip Select Init

	// Enable SSP peripheral
	SSP_Cmd(SSPx, ENABLE);

	Buffer_Init1(); // Empty Buffer
    12b4:	f7ff ff0e 	bl	10d4 <Buffer_Init1>
}
    12b8:	b008      	add	sp, #32
    12ba:	bd70      	pop	{r4, r5, r6, pc}
    12bc:	40088000 	.word	0x40088000
    12c0:	002dc6c0 	.word	0x002dc6c0
    12c4:	40030000 	.word	0x40030000
    12c8:	00e4e1c0 	.word	0x00e4e1c0

000012cc <SSP_Cmd>:
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
    12cc:	6843      	ldr	r3, [r0, #4]
void SSP_Cmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    12ce:	2901      	cmp	r1, #1
	{
		SSPx->CR1 |= SSP_CR1_SSP_EN;
    12d0:	bf0c      	ite	eq
    12d2:	f043 0302 	orreq.w	r3, r3, #2
	}
	else
	{
		SSPx->CR1 &= (~SSP_CR1_SSP_EN) & SSP_CR1_BITMASK;
    12d6:	f003 030d 	andne.w	r3, r3, #13
    12da:	6043      	str	r3, [r0, #4]
    12dc:	4770      	bx	lr

000012de <SSP_LoopBackCmd>:
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 |= SSP_CR1_LBM_EN;
    12de:	6843      	ldr	r3, [r0, #4]
void SSP_LoopBackCmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    12e0:	2901      	cmp	r1, #1
	{
		SSPx->CR1 |= SSP_CR1_LBM_EN;
    12e2:	bf0c      	ite	eq
    12e4:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		SSPx->CR1 &= (~SSP_CR1_LBM_EN) & SSP_CR1_BITMASK;
    12e8:	f003 030e 	andne.w	r3, r3, #14
    12ec:	6043      	str	r3, [r0, #4]
    12ee:	4770      	bx	lr

000012f0 <SSP_SlaveOutputCmd>:
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->CR1 &= (~SSP_CR1_SO_DISABLE) & SSP_CR1_BITMASK;
    12f0:	6843      	ldr	r3, [r0, #4]
void SSP_SlaveOutputCmd(LPC_SSP_TypeDef* SSPx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    12f2:	2901      	cmp	r1, #1
	{
		SSPx->CR1 &= (~SSP_CR1_SO_DISABLE) & SSP_CR1_BITMASK;
    12f4:	bf0c      	ite	eq
    12f6:	f003 0307 	andeq.w	r3, r3, #7
	}
	else
	{
		SSPx->CR1 |= SSP_CR1_SO_DISABLE;
    12fa:	f043 0308 	orrne.w	r3, r3, #8
    12fe:	6043      	str	r3, [r0, #4]
    1300:	4770      	bx	lr

00001302 <SSP_SendData>:
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1302:	6081      	str	r1, [r0, #8]
    1304:	4770      	bx	lr

00001306 <SSP_ReceiveData>:
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    1306:	6880      	ldr	r0, [r0, #8]
}
    1308:	b280      	uxth	r0, r0
    130a:	4770      	bx	lr

0000130c <SSP_ReadWrite>:
    uint16_t *wdata16;
    uint32_t stat;
    uint32_t tmp;
    int32_t dataword;

    dataCfg->rx_cnt = 0;
    130c:	2300      	movs	r3, #0
 * 				Return (-1) if error.
 * Note: This function can be used in both master and slave mode.
 ***********************************************************************/
int32_t SSP_ReadWrite (LPC_SSP_TypeDef *SSPx, SSP_DATA_SETUP_Type *dataCfg, \
						SSP_TRANSFER_Type xfType)
{
    130e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t *wdata16;
    uint32_t stat;
    uint32_t tmp;
    int32_t dataword;

    dataCfg->rx_cnt = 0;
    1312:	60cb      	str	r3, [r1, #12]
    dataCfg->tx_cnt = 0;
    1314:	604b      	str	r3, [r1, #4]
    dataCfg->status = 0;
    1316:	614b      	str	r3, [r1, #20]


	/* Clear all remaining data in RX FIFO */
	while (SSPx->SR & SSP_SR_RNE){
    1318:	68c4      	ldr	r4, [r0, #12]
    131a:	f014 0404 	ands.w	r4, r4, #4
    131e:	d001      	beq.n	1324 <SSP_ReadWrite+0x18>
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    1320:	6883      	ldr	r3, [r0, #8]
    1322:	e7f9      	b.n	1318 <SSP_ReadWrite+0xc>
	while (SSPx->SR & SSP_SR_RNE){
		tmp = (uint32_t) SSP_ReceiveData(SSPx);
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
    1324:	2303      	movs	r3, #3
    1326:	6203      	str	r3, [r0, #32]
*				- SSP_DATABIT_16: 16 bit transfer
*******************************************************************************/
uint8_t SSP_GetDataSize(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->CR0 & (0xF));
    1328:	6803      	ldr	r3, [r0, #0]
		tmp = (uint32_t) SSP_ReceiveData(SSPx);
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
	if(SSP_GetDataSize(SSPx)>8)
    132a:	f003 030f 	and.w	r3, r3, #15
    132e:	2b08      	cmp	r3, #8
    1330:	d804      	bhi.n	133c <SSP_ReadWrite+0x30>
		dataword = 1;
	else dataword = 0;

	// Polling mode ----------------------------------------------------------------------
	if (xfType == SSP_TRANSFER_POLLING){
    1332:	2a00      	cmp	r2, #0
    1334:	d157      	bne.n	13e6 <SSP_ReadWrite+0xda>
		if (dataword == 0){
			rdata8 = (uint8_t *)dataCfg->rx_data;
    1336:	688d      	ldr	r5, [r1, #8]
			wdata8 = (uint8_t *)dataCfg->tx_data;
    1338:	680e      	ldr	r6, [r1, #0]
    133a:	e005      	b.n	1348 <SSP_ReadWrite+0x3c>
	if(SSP_GetDataSize(SSPx)>8)
		dataword = 1;
	else dataword = 0;

	// Polling mode ----------------------------------------------------------------------
	if (xfType == SSP_TRANSFER_POLLING){
    133c:	2a00      	cmp	r2, #0
    133e:	d151      	bne.n	13e4 <SSP_ReadWrite+0xd8>
		if (dataword == 0){
			rdata8 = (uint8_t *)dataCfg->rx_data;
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
    1340:	688f      	ldr	r7, [r1, #8]
			wdata16 = (uint16_t *)dataCfg->tx_data;
    1342:	f8d1 c000 	ldr.w	ip, [r1]
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
	if(SSP_GetDataSize(SSPx)>8)
		dataword = 1;
    1346:	2201      	movs	r2, #1
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}
		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
    1348:	684b      	ldr	r3, [r1, #4]
    134a:	f8d1 8010 	ldr.w	r8, [r1, #16]
    134e:	4543      	cmp	r3, r8
    1350:	d036      	beq.n	13c0 <SSP_ReadWrite+0xb4>
			if ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
    1352:	68c4      	ldr	r4, [r0, #12]
    1354:	f014 0f02 	tst.w	r4, #2
    1358:	d014      	beq.n	1384 <SSP_ReadWrite+0x78>
    135a:	4543      	cmp	r3, r8
    135c:	d012      	beq.n	1384 <SSP_ReadWrite+0x78>
				// Write data to buffer
				if(dataCfg->tx_data == NULL){
    135e:	680c      	ldr	r4, [r1, #0]
    1360:	b92c      	cbnz	r4, 136e <SSP_ReadWrite+0x62>
					if (dataword == 0){
    1362:	b90a      	cbnz	r2, 1368 <SSP_ReadWrite+0x5c>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1364:	24ff      	movs	r4, #255	; 0xff
    1366:	e005      	b.n	1374 <SSP_ReadWrite+0x68>
    1368:	f64f 74ff 	movw	r4, #65535	; 0xffff
    136c:	e007      	b.n	137e <SSP_ReadWrite+0x72>
					} else {
						SSP_SendData(SSPx, 0xFFFF);
						dataCfg->tx_cnt += 2;
					}
				} else {
					if (dataword == 0){
    136e:	b922      	cbnz	r2, 137a <SSP_ReadWrite+0x6e>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1370:	f816 4b01 	ldrb.w	r4, [r6], #1
    1374:	6084      	str	r4, [r0, #8]
					}
				} else {
					if (dataword == 0){
						SSP_SendData(SSPx, *wdata8);
						wdata8++;
						dataCfg->tx_cnt++;
    1376:	3301      	adds	r3, #1
    1378:	e003      	b.n	1382 <SSP_ReadWrite+0x76>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    137a:	f83c 4b02 	ldrh.w	r4, [ip], #2
    137e:	6084      	str	r4, [r0, #8]
						wdata8++;
						dataCfg->tx_cnt++;
					} else {
						SSP_SendData(SSPx, *wdata16);
						wdata16++;
						dataCfg->tx_cnt += 2;
    1380:	3302      	adds	r3, #2
    1382:	604b      	str	r3, [r1, #4]
					}
				}
			}

			// Check overrun error
			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
    1384:	6983      	ldr	r3, [r0, #24]
    1386:	f013 0f01 	tst.w	r3, #1
    138a:	d150      	bne.n	142e <SSP_ReadWrite+0x122>
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
    138c:	68c4      	ldr	r4, [r0, #12]
    138e:	0764      	lsls	r4, r4, #29
    1390:	d5da      	bpl.n	1348 <SSP_ReadWrite+0x3c>
    1392:	68cc      	ldr	r4, [r1, #12]
    1394:	690b      	ldr	r3, [r1, #16]
    1396:	429c      	cmp	r4, r3
    1398:	d0d6      	beq.n	1348 <SSP_ReadWrite+0x3c>
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    139a:	688b      	ldr	r3, [r1, #8]
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    139c:	f8d0 8008 	ldr.w	r8, [r0, #8]
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    13a0:	b133      	cbz	r3, 13b0 <SSP_ReadWrite+0xa4>
				{
					if (dataword == 0){
    13a2:	b912      	cbnz	r2, 13aa <SSP_ReadWrite+0x9e>
						*(rdata8) = (uint8_t) tmp;
    13a4:	f805 8b01 	strb.w	r8, [r5], #1
    13a8:	e003      	b.n	13b2 <SSP_ReadWrite+0xa6>
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    13aa:	f827 8b02 	strh.w	r8, [r7], #2
    13ae:	e004      	b.n	13ba <SSP_ReadWrite+0xae>
						*(rdata16) = (uint16_t) tmp;
						rdata16++;
					}
				}
				// Increase counter
				if (dataword == 0){
    13b0:	b91a      	cbnz	r2, 13ba <SSP_ReadWrite+0xae>
					dataCfg->rx_cnt++;
    13b2:	68cb      	ldr	r3, [r1, #12]
    13b4:	1c5c      	adds	r4, r3, #1
    13b6:	60cc      	str	r4, [r1, #12]
    13b8:	e7e8      	b.n	138c <SSP_ReadWrite+0x80>
				} else {
					dataCfg->rx_cnt += 2;
    13ba:	3402      	adds	r4, #2
    13bc:	60cc      	str	r4, [r1, #12]
    13be:	e7e5      	b.n	138c <SSP_ReadWrite+0x80>
			wdata8 = (uint8_t *)dataCfg->tx_data;
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}
		while ((dataCfg->tx_cnt != dataCfg->length) || (dataCfg->rx_cnt != dataCfg->length)){
    13c0:	68cc      	ldr	r4, [r1, #12]
    13c2:	429c      	cmp	r4, r3
    13c4:	d1c5      	bne.n	1352 <SSP_ReadWrite+0x46>
		}

		// save status
		dataCfg->status = SSP_STAT_DONE;

		if (dataCfg->tx_data != NULL){
    13c6:	680a      	ldr	r2, [r1, #0]
				}
			}
		}

		// save status
		dataCfg->status = SSP_STAT_DONE;
    13c8:	f44f 7080 	mov.w	r0, #256	; 0x100
    13cc:	6148      	str	r0, [r1, #20]

		if (dataCfg->tx_data != NULL){
    13ce:	b112      	cbz	r2, 13d6 <SSP_ReadWrite+0xca>
			return dataCfg->tx_cnt;
    13d0:	4620      	mov	r0, r4
    13d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (dataCfg->rx_data != NULL){
    13d6:	6889      	ldr	r1, [r1, #8]
			return dataCfg->rx_cnt;
    13d8:	2900      	cmp	r1, #0
    13da:	bf14      	ite	ne
    13dc:	4620      	movne	r0, r4
    13de:	2000      	moveq	r0, #0
    13e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	// Clear status
	SSPx->ICR = SSP_ICR_BITMASK;
	if(SSP_GetDataSize(SSPx)>8)
		dataword = 1;
    13e4:	2401      	movs	r4, #1
			return (0);
		}
	}

	// Interrupt mode ----------------------------------------------------------------------
	else if (xfType == SSP_TRANSFER_INTERRUPT){
    13e6:	2a01      	cmp	r2, #1
    13e8:	d010      	beq.n	140c <SSP_ReadWrite+0x100>
    13ea:	e023      	b.n	1434 <SSP_ReadWrite+0x128>
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
    13ec:	68cb      	ldr	r3, [r1, #12]
    13ee:	690a      	ldr	r2, [r1, #16]
    13f0:	4293      	cmp	r3, r2
    13f2:	d00b      	beq.n	140c <SSP_ReadWrite+0x100>
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    13f4:	688a      	ldr	r2, [r1, #8]
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    13f6:	6885      	ldr	r5, [r0, #8]
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
				// Read data from SSP data
				tmp = SSP_ReceiveData(SSPx);

				// Store data to destination
				if (dataCfg->rx_data != NULL)
    13f8:	2a00      	cmp	r2, #0
    13fa:	d02b      	beq.n	1454 <SSP_ReadWrite+0x148>
				{
					if (dataword == 0){
    13fc:	bb44      	cbnz	r4, 1450 <SSP_ReadWrite+0x144>
						*(uint8_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint8_t) tmp;
    13fe:	54d5      	strb	r5, [r2, r3]
						*(uint16_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint16_t) tmp;
					}
				}
				// Increase counter
				if (dataword == 0){
					dataCfg->rx_cnt++;
    1400:	68ca      	ldr	r2, [r1, #12]
    1402:	1c53      	adds	r3, r2, #1
				} else {
					dataCfg->rx_cnt += 2;
    1404:	60cb      	str	r3, [r1, #12]
				dataCfg->status = stat | SSP_STAT_ERROR;
				return (-1);
			}

			// Check for any data available in RX FIFO
			while ((SSPx->SR & SSP_SR_RNE) && (dataCfg->rx_cnt != dataCfg->length)){
    1406:	68c2      	ldr	r2, [r0, #12]
    1408:	0752      	lsls	r2, r2, #29
    140a:	d4ef      	bmi.n	13ec <SSP_ReadWrite+0xe0>
	}

	// Interrupt mode ----------------------------------------------------------------------
	else if (xfType == SSP_TRANSFER_INTERRUPT){

		while ((SSPx->SR & SSP_SR_TNF) && (dataCfg->tx_cnt != dataCfg->length)){
    140c:	68c2      	ldr	r2, [r0, #12]
    140e:	0793      	lsls	r3, r2, #30
    1410:	d524      	bpl.n	145c <SSP_ReadWrite+0x150>
    1412:	684b      	ldr	r3, [r1, #4]
    1414:	690a      	ldr	r2, [r1, #16]
    1416:	4293      	cmp	r3, r2
    1418:	d020      	beq.n	145c <SSP_ReadWrite+0x150>
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    141a:	680a      	ldr	r2, [r1, #0]
    141c:	b98a      	cbnz	r2, 1442 <SSP_ReadWrite+0x136>
				if (dataword == 0){
    141e:	b96c      	cbnz	r4, 143c <SSP_ReadWrite+0x130>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1420:	22ff      	movs	r2, #255	; 0xff
    1422:	6082      	str	r2, [r0, #8]
					dataCfg->tx_cnt += 2;
				}
			} else {
				if (dataword == 0){
					SSP_SendData(SSPx, (*(uint8_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt++;
    1424:	3301      	adds	r3, #1
				} else {
					SSP_SendData(SSPx, (*(uint16_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt += 2;
    1426:	604b      	str	r3, [r1, #4]
				}
			}

			// Check error
			if ((stat = SSPx->RIS) & SSP_RIS_ROR){
    1428:	6983      	ldr	r3, [r0, #24]
    142a:	07da      	lsls	r2, r3, #31
    142c:	d5eb      	bpl.n	1406 <SSP_ReadWrite+0xfa>
				// save status and return
				dataCfg->status = stat | SSP_STAT_ERROR;
    142e:	f443 7000 	orr.w	r0, r3, #512	; 0x200
    1432:	6148      	str	r0, [r1, #20]
				return (-1);
    1434:	f04f 30ff 	mov.w	r0, #4294967295
    1438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1440:	e003      	b.n	144a <SSP_ReadWrite+0x13e>
				} else {
					SSP_SendData(SSPx, 0xFFFF);
					dataCfg->tx_cnt += 2;
				}
			} else {
				if (dataword == 0){
    1442:	b90c      	cbnz	r4, 1448 <SSP_ReadWrite+0x13c>
 **********************************************************************/
void SSP_SendData(LPC_SSP_TypeDef* SSPx, uint16_t Data)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	SSPx->DR = SSP_DR_BITMASK(Data);
    1444:	5cd2      	ldrb	r2, [r2, r3]
    1446:	e7ec      	b.n	1422 <SSP_ReadWrite+0x116>
    1448:	5ad2      	ldrh	r2, [r2, r3]
    144a:	6082      	str	r2, [r0, #8]
				if (dataword == 0){
					SSP_SendData(SSPx, (*(uint8_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt++;
				} else {
					SSP_SendData(SSPx, (*(uint16_t *)((uint32_t)dataCfg->tx_data + dataCfg->tx_cnt)));
					dataCfg->tx_cnt += 2;
    144c:	3302      	adds	r3, #2
    144e:	e7ea      	b.n	1426 <SSP_ReadWrite+0x11a>
 **********************************************************************/
uint16_t SSP_ReceiveData(LPC_SSP_TypeDef* SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	return ((uint16_t) (SSP_DR_BITMASK(SSPx->DR)));
    1450:	52d5      	strh	r5, [r2, r3]
    1452:	e001      	b.n	1458 <SSP_ReadWrite+0x14c>
					} else {
						*(uint16_t *)((uint32_t)dataCfg->rx_data + dataCfg->rx_cnt) = (uint16_t) tmp;
					}
				}
				// Increase counter
				if (dataword == 0){
    1454:	2c00      	cmp	r4, #0
    1456:	d0d3      	beq.n	1400 <SSP_ReadWrite+0xf4>
					dataCfg->rx_cnt++;
				} else {
					dataCfg->rx_cnt += 2;
    1458:	3302      	adds	r3, #2
    145a:	e7d3      	b.n	1404 <SSP_ReadWrite+0xf8>
				}
			}
		}

		// If there more data to sent or receive
		if ((dataCfg->rx_cnt != dataCfg->length) || (dataCfg->tx_cnt != dataCfg->length)){
    145c:	68cb      	ldr	r3, [r1, #12]
    145e:	690a      	ldr	r2, [r1, #16]
    1460:	4293      	cmp	r3, r2
    1462:	d102      	bne.n	146a <SSP_ReadWrite+0x15e>
    1464:	684a      	ldr	r2, [r1, #4]
    1466:	429a      	cmp	r2, r3
    1468:	d002      	beq.n	1470 <SSP_ReadWrite+0x164>
			// Enable all interrupt
			SSPx->IMSC = SSP_IMSC_BITMASK;
    146a:	210f      	movs	r1, #15
    146c:	6141      	str	r1, [r0, #20]
    146e:	e002      	b.n	1476 <SSP_ReadWrite+0x16a>
		} else {
			// Save status
			dataCfg->status = SSP_STAT_DONE;
    1470:	f44f 7080 	mov.w	r0, #256	; 0x100
    1474:	6148      	str	r0, [r1, #20]
		}
		return (0);
    1476:	2000      	movs	r0, #0
    1478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000147c <SSP_GetStatus>:
FlagStatus SSP_GetStatus(LPC_SSP_TypeDef* SSPx, uint32_t FlagType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_STAT(FlagType));

	return ((SSPx->SR & FlagType) ? SET : RESET);
    147c:	68c3      	ldr	r3, [r0, #12]
    147e:	4219      	tst	r1, r3
}
    1480:	bf0c      	ite	eq
    1482:	2000      	moveq	r0, #0
    1484:	2001      	movne	r0, #1
    1486:	4770      	bx	lr

00001488 <SSP_IntConfig>:
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
	{
		SSPx->IMSC |= IntType;
    1488:	6943      	ldr	r3, [r0, #20]
 **********************************************************************/
void SSP_IntConfig(LPC_SSP_TypeDef *SSPx, uint32_t IntType, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
    148a:	2a01      	cmp	r2, #1
	{
		SSPx->IMSC |= IntType;
	}
	else
	{
		SSPx->IMSC &= (~IntType) & SSP_IMSC_BITMASK;
    148c:	bf16      	itet	ne
    148e:	f003 030f 	andne.w	r3, r3, #15
{
	CHECK_PARAM(PARAM_SSPx(SSPx));

	if (NewState == ENABLE)
	{
		SSPx->IMSC |= IntType;
    1492:	4319      	orreq	r1, r3
	}
	else
	{
		SSPx->IMSC &= (~IntType) & SSP_IMSC_BITMASK;
    1494:	ea23 0101 	bicne.w	r1, r3, r1
    1498:	6141      	str	r1, [r0, #20]
    149a:	4770      	bx	lr

0000149c <SSP_GetRawIntStatus>:
IntStatus SSP_GetRawIntStatus(LPC_SSP_TypeDef *SSPx, uint32_t RawIntType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_INTSTAT_RAW(RawIntType));

	return ((SSPx->RIS & RawIntType) ? SET : RESET);
    149c:	6983      	ldr	r3, [r0, #24]
    149e:	4219      	tst	r1, r3
}
    14a0:	bf0c      	ite	eq
    14a2:	2000      	moveq	r0, #0
    14a4:	2001      	movne	r0, #1
    14a6:	4770      	bx	lr

000014a8 <SSP_GetRawIntStatusReg>:
 * @return		Raw Interrupt Status (RIS) register value
 **********************************************************************/
uint32_t SSP_GetRawIntStatusReg(LPC_SSP_TypeDef *SSPx)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	return (SSPx->RIS);
    14a8:	6980      	ldr	r0, [r0, #24]
}
    14aa:	4770      	bx	lr

000014ac <SSP_GetIntStatus>:
IntStatus SSP_GetIntStatus (LPC_SSP_TypeDef *SSPx, uint32_t IntType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_INTSTAT(IntType));

	return ((SSPx->MIS & IntType) ? SET :RESET);
    14ac:	69c3      	ldr	r3, [r0, #28]
    14ae:	4219      	tst	r1, r3
}
    14b0:	bf0c      	ite	eq
    14b2:	2000      	moveq	r0, #0
    14b4:	2001      	movne	r0, #1
    14b6:	4770      	bx	lr

000014b8 <SSP_ClearIntPending>:
void SSP_ClearIntPending(LPC_SSP_TypeDef *SSPx, uint32_t IntType)
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_INTCLR(IntType));

	SSPx->ICR = IntType;
    14b8:	6201      	str	r1, [r0, #32]
    14ba:	4770      	bx	lr

000014bc <SSP_DMACmd>:
	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->DMACR |= DMAMode;
    14bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
	CHECK_PARAM(PARAM_SSPx(SSPx));
	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    14be:	2a01      	cmp	r2, #1
	{
		SSPx->DMACR |= DMAMode;
	}
	else
	{
		SSPx->DMACR &= (~DMAMode) & SSP_DMA_BITMASK;
    14c0:	bf16      	itet	ne
    14c2:	f003 0303 	andne.w	r3, r3, #3
	CHECK_PARAM(PARAM_SSP_DMA(DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		SSPx->DMACR |= DMAMode;
    14c6:	4319      	orreq	r1, r3
	}
	else
	{
		SSPx->DMACR &= (~DMAMode) & SSP_DMA_BITMASK;
    14c8:	ea23 0101 	bicne.w	r1, r3, r1
    14cc:	6241      	str	r1, [r0, #36]	; 0x24
    14ce:	4770      	bx	lr

000014d0 <delay_ms>:
 * @param		value in ms
 * @return 		None
 ***********************************************************************/
void delay_ms (uint32_t dly_ticks) 
{
  delay_timer = dly_ticks;
    14d0:	4b02      	ldr	r3, [pc, #8]	; (14dc <delay_ms+0xc>)
    14d2:	6018      	str	r0, [r3, #0]
  while(delay_timer)
    14d4:	681a      	ldr	r2, [r3, #0]
    14d6:	2a00      	cmp	r2, #0
    14d8:	d1fc      	bne.n	14d4 <delay_ms+0x4>
  {
    /* do nothing */
  } 
}
    14da:	4770      	bx	lr
    14dc:	1000035c 	.word	0x1000035c

000014e0 <SYSTICK_InternalInit>:
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
    14e0:	4b0f      	ldr	r3, [pc, #60]	; (1520 <SYSTICK_InternalInit+0x40>)
 * @brief 		Initial System Tick with using internal CPU clock source
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_InternalInit(uint32_t time)
{
    14e2:	b570      	push	{r4, r5, r6, lr}
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
    14e4:	681c      	ldr	r4, [r3, #0]
    14e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    14ea:	fbb4 f4f1 	udiv	r4, r4, r1
 * @brief 		Initial System Tick with using internal CPU clock source
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_InternalInit(uint32_t time)
{
    14ee:	4605      	mov	r5, r0
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
	if(time > maxtime)
    14f0:	f003 f986 	bl	4800 <__aeabi_ui2f>
    14f4:	4606      	mov	r6, r0
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/SystemCoreClock * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(SystemCoreClock / 1000) ;
    14f6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    14fa:	fbb0 f0f4 	udiv	r0, r0, r4
    14fe:	f003 f97f 	bl	4800 <__aeabi_ui2f>
    1502:	4601      	mov	r1, r0
	if(time > maxtime)
    1504:	4630      	mov	r0, r6
    1506:	f003 fa3f 	bl	4988 <__aeabi_fcmpgt>
    150a:	b100      	cbz	r0, 150e <SYSTICK_InternalInit+0x2e>
    150c:	e7fe      	b.n	150c <SYSTICK_InternalInit+0x2c>
		//Error loop
		while(1);
	else
	{
		//Select CPU clock is System Tick clock source
		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
    150e:	4b05      	ldr	r3, [pc, #20]	; (1524 <SYSTICK_InternalInit+0x44>)
		/* Set RELOAD value
		 * RELOAD = (SystemCoreClock/1000) * time - 1
		 * with time base is millisecond
		 */
		SysTick->LOAD = (cclk/1000)*time - 1;
    1510:	436c      	muls	r4, r5
		//Error loop
		while(1);
	else
	{
		//Select CPU clock is System Tick clock source
		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
    1512:	681a      	ldr	r2, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (SystemCoreClock/1000) * time - 1
		 * with time base is millisecond
		 */
		SysTick->LOAD = (cclk/1000)*time - 1;
    1514:	3c01      	subs	r4, #1
		//Error loop
		while(1);
	else
	{
		//Select CPU clock is System Tick clock source
		SysTick->CTRL |= ST_CTRL_CLKSOURCE;
    1516:	f042 0104 	orr.w	r1, r2, #4
    151a:	6019      	str	r1, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (SystemCoreClock/1000) * time - 1
		 * with time base is millisecond
		 */
		SysTick->LOAD = (cclk/1000)*time - 1;
    151c:	605c      	str	r4, [r3, #4]
    151e:	bd70      	pop	{r4, r5, r6, pc}
    1520:	2007c008 	.word	0x2007c008
    1524:	e000e010 	.word	0xe000e010

00001528 <SYSTICK_ExternalInit>:
 * @param[in]	freq	external clock frequency(Hz)
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_ExternalInit(uint32_t freq, uint32_t time)
{
    1528:	b570      	push	{r4, r5, r6, lr}
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/freq * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(freq / 1000) ;
    152a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    152e:	fbb0 f4f4 	udiv	r4, r0, r4
	if (time>maxtime)
    1532:	4608      	mov	r0, r1
 * @param[in]	freq	external clock frequency(Hz)
 * @param[in]	time	time interval(ms)
 * @return 		None
 **********************************************************************/
void SYSTICK_ExternalInit(uint32_t freq, uint32_t time)
{
    1534:	460d      	mov	r5, r1
	 * So the maximum time can be set:
	 * 1/freq * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(freq / 1000) ;
	if (time>maxtime)
    1536:	f003 f963 	bl	4800 <__aeabi_ui2f>
    153a:	4606      	mov	r6, r0
	 * And limit 24 bit for RELOAD value
	 * So the maximum time can be set:
	 * 1/freq * (2^24) * 1000 (ms)
	 */
	//check time value is available or not
	maxtime = (1<<24)/(freq / 1000) ;
    153c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    1540:	fbb0 f0f4 	udiv	r0, r0, r4
    1544:	f003 f95c 	bl	4800 <__aeabi_ui2f>
    1548:	4601      	mov	r1, r0
	if (time>maxtime)
    154a:	4630      	mov	r0, r6
    154c:	f003 fa1c 	bl	4988 <__aeabi_fcmpgt>
    1550:	b100      	cbz	r0, 1554 <SYSTICK_ExternalInit+0x2c>
    1552:	e7fe      	b.n	1552 <SYSTICK_ExternalInit+0x2a>
		//Error Loop
		while(1);
	else
	{
		//Select external clock is System Tick clock source
		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
    1554:	4b04      	ldr	r3, [pc, #16]	; (1568 <SYSTICK_ExternalInit+0x40>)
		/* Set RELOAD value
		 * RELOAD = (freq/1000) * time - 1
		 * with time base is millisecond
		 */
		maxtime = (freq/1000)*time - 1;
		SysTick->LOAD = (freq/1000)*time - 1;
    1556:	436c      	muls	r4, r5
		//Error Loop
		while(1);
	else
	{
		//Select external clock is System Tick clock source
		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
    1558:	681a      	ldr	r2, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (freq/1000) * time - 1
		 * with time base is millisecond
		 */
		maxtime = (freq/1000)*time - 1;
		SysTick->LOAD = (freq/1000)*time - 1;
    155a:	3c01      	subs	r4, #1
		//Error Loop
		while(1);
	else
	{
		//Select external clock is System Tick clock source
		SysTick->CTRL &= ~ ST_CTRL_CLKSOURCE;
    155c:	f022 0104 	bic.w	r1, r2, #4
    1560:	6019      	str	r1, [r3, #0]
		/* Set RELOAD value
		 * RELOAD = (freq/1000) * time - 1
		 * with time base is millisecond
		 */
		maxtime = (freq/1000)*time - 1;
		SysTick->LOAD = (freq/1000)*time - 1;
    1562:	605c      	str	r4, [r3, #4]
    1564:	bd70      	pop	{r4, r5, r6, pc}
    1566:	bf00      	nop
    1568:	e000e010 	.word	0xe000e010

0000156c <SYSTICK_Cmd>:
 * 					- ENABLE
 * 					- DISABLE
 * @return 		None
 **********************************************************************/
void SYSTICK_Cmd(FunctionalState NewState)
{
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <SYSTICK_Cmd+0x14>)
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if(NewState == ENABLE)
    156e:	2801      	cmp	r0, #1
		//Enable System Tick counter
		SysTick->CTRL |= ST_CTRL_ENABLE;
    1570:	681a      	ldr	r2, [r3, #0]
    1572:	bf0c      	ite	eq
    1574:	f042 0201 	orreq.w	r2, r2, #1
	else
		//Disable System Tick counter
		SysTick->CTRL &= ~ST_CTRL_ENABLE;
    1578:	f022 0201 	bicne.w	r2, r2, #1
    157c:	601a      	str	r2, [r3, #0]
    157e:	4770      	bx	lr
    1580:	e000e010 	.word	0xe000e010

00001584 <SYSTICK_IntCmd>:
 * 					- ENABLE
 * 					- DISABLE
 * @return 		None
 **********************************************************************/
void SYSTICK_IntCmd(FunctionalState NewState)
{
    1584:	4b04      	ldr	r3, [pc, #16]	; (1598 <SYSTICK_IntCmd+0x14>)
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if(NewState == ENABLE)
    1586:	2801      	cmp	r0, #1
		//Enable System Tick counter
		SysTick->CTRL |= ST_CTRL_TICKINT;
    1588:	681a      	ldr	r2, [r3, #0]
    158a:	bf0c      	ite	eq
    158c:	f042 0202 	orreq.w	r2, r2, #2
	else
		//Disable System Tick counter
		SysTick->CTRL &= ~ST_CTRL_TICKINT;
    1590:	f022 0202 	bicne.w	r2, r2, #2
    1594:	601a      	str	r2, [r3, #0]
    1596:	4770      	bx	lr
    1598:	e000e010 	.word	0xe000e010

0000159c <SYSTICK_Config>:
 * @brief 		Initial System Tick with Config
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void SYSTICK_Config(void)
{
    159c:	b508      	push	{r3, lr}
  //Initialize System Tick with 10ms time interval
  SYSTICK_InternalInit(1);
    159e:	2001      	movs	r0, #1
    15a0:	f7ff ff9e 	bl	14e0 <SYSTICK_InternalInit>
  //Enable System Tick interrupt
  SYSTICK_IntCmd(ENABLE);
    15a4:	2001      	movs	r0, #1
    15a6:	f7ff ffed 	bl	1584 <SYSTICK_IntCmd>
  //Enable System Tick Counter
  SYSTICK_Cmd(ENABLE);
    15aa:	2001      	movs	r0, #1
}
    15ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  //Initialize System Tick with 10ms time interval
  SYSTICK_InternalInit(1);
  //Enable System Tick interrupt
  SYSTICK_IntCmd(ENABLE);
  //Enable System Tick Counter
  SYSTICK_Cmd(ENABLE);
    15b0:	f7ff bfdc 	b.w	156c <SYSTICK_Cmd>

000015b4 <SYSTICK_GetCurrentValue>:
 * @param[in]	None
 * @return 		current value of System Tick counter
 **********************************************************************/
uint32_t SYSTICK_GetCurrentValue(void)
{
	return (SysTick->VAL);
    15b4:	4b01      	ldr	r3, [pc, #4]	; (15bc <SYSTICK_GetCurrentValue+0x8>)
    15b6:	6898      	ldr	r0, [r3, #8]
}
    15b8:	4770      	bx	lr
    15ba:	bf00      	nop
    15bc:	e000e010 	.word	0xe000e010

000015c0 <SYSTICK_ClearCounterFlag>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void SYSTICK_ClearCounterFlag(void)
{
	SysTick->CTRL &= ~ST_CTRL_COUNTFLAG;
    15c0:	4b02      	ldr	r3, [pc, #8]	; (15cc <SYSTICK_ClearCounterFlag+0xc>)
    15c2:	681a      	ldr	r2, [r3, #0]
    15c4:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    15c8:	6018      	str	r0, [r3, #0]
    15ca:	4770      	bx	lr
    15cc:	e000e010 	.word	0xe000e010

000015d0 <SysTick_Handler>:
 * @param		None
 * @return 		None
 ***********************************************************************/
void SysTick_Handler(void)
{
    if(led_timer)
    15d0:	4b0a      	ldr	r3, [pc, #40]	; (15fc <SysTick_Handler+0x2c>)
    15d2:	681a      	ldr	r2, [r3, #0]
    15d4:	b10a      	cbz	r2, 15da <SysTick_Handler+0xa>
    {
    	--led_timer;
    15d6:	1e51      	subs	r1, r2, #1
    15d8:	e006      	b.n	15e8 <SysTick_Handler+0x18>
    }
    else
    {
    	LPC_GPIO3->FIOPIN ^= _BIT(25); //Toggle P3.25 Hearbeat led
    15da:	4809      	ldr	r0, [pc, #36]	; (1600 <SysTick_Handler+0x30>)
    15dc:	6941      	ldr	r1, [r0, #20]
    15de:	f081 7200 	eor.w	r2, r1, #33554432	; 0x2000000
    15e2:	6142      	str	r2, [r0, #20]
    	led_timer=led_delay;
    15e4:	4807      	ldr	r0, [pc, #28]	; (1604 <SysTick_Handler+0x34>)
    15e6:	6801      	ldr	r1, [r0, #0]
    15e8:	6019      	str	r1, [r3, #0]
    }

	if(delay_timer)
    15ea:	4b07      	ldr	r3, [pc, #28]	; (1608 <SysTick_Handler+0x38>)
    15ec:	681a      	ldr	r2, [r3, #0]
    15ee:	b112      	cbz	r2, 15f6 <SysTick_Handler+0x26>
    {
      --delay_timer;           /*decrement Delay Timer */
    15f0:	6818      	ldr	r0, [r3, #0]
    15f2:	1e41      	subs	r1, r0, #1
    15f4:	6019      	str	r1, [r3, #0]
    }
	
	//Clear System Tick counter flag
	SYSTICK_ClearCounterFlag();
    15f6:	f7ff bfe3 	b.w	15c0 <SYSTICK_ClearCounterFlag>
    15fa:	bf00      	nop
    15fc:	10000358 	.word	0x10000358
    1600:	2009c060 	.word	0x2009c060
    1604:	10000360 	.word	0x10000360
    1608:	1000035c 	.word	0x1000035c

0000160c <UART_Init>:
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    1610:	4ba3      	ldr	r3, [pc, #652]	; (18a0 <UART_Init+0x294>)
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    1612:	4604      	mov	r4, r0


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
    1614:	2008      	movs	r0, #8
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    1616:	429c      	cmp	r4, r3
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    1618:	b08b      	sub	sp, #44	; 0x2c
    161a:	468b      	mov	fp, r1
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));


	if(UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    161c:	d016      	beq.n	164c <UART_Init+0x40>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
	}



	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    161e:	49a1      	ldr	r1, [pc, #644]	; (18a4 <UART_Init+0x298>)
    1620:	428c      	cmp	r4, r1
    1622:	d108      	bne.n	1636 <UART_Init+0x2a>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
    1624:	2101      	movs	r1, #1
    1626:	2010      	movs	r0, #16
    1628:	f7fe feca 	bl	3c0 <CLKPWR_ConfigPPWR>


	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    162c:	2107      	movs	r1, #7
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    162e:	2200      	movs	r2, #0


	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    1630:	7221      	strb	r1, [r4, #8]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    1632:	7222      	strb	r2, [r4, #8]

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    1634:	e00e      	b.n	1654 <UART_Init+0x48>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
	}



	if(UARTx == LPC_UART2)
    1636:	4a9c      	ldr	r2, [pc, #624]	; (18a8 <UART_Init+0x29c>)
    1638:	4294      	cmp	r4, r2
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
    163a:	bf08      	it	eq
    163c:	f04f 7080 	moveq.w	r0, #16777216	; 0x1000000
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
	}



	if(UARTx == LPC_UART2)
    1640:	d004      	beq.n	164c <UART_Init+0x40>
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
	}



	if(UARTx == LPC_UART3)
    1642:	489a      	ldr	r0, [pc, #616]	; (18ac <UART_Init+0x2a0>)
    1644:	4284      	cmp	r4, r0
    1646:	d125      	bne.n	1694 <UART_Init+0x88>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    1648:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    164c:	2101      	movs	r1, #1
    164e:	f7fe feb7 	bl	3c0 <CLKPWR_ConfigPPWR>
    1652:	e01f      	b.n	1694 <UART_Init+0x88>
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    1654:	4893      	ldr	r0, [pc, #588]	; (18a4 <UART_Init+0x298>)
    1656:	7d05      	ldrb	r5, [r0, #20]
    1658:	07ea      	lsls	r2, r5, #31
    165a:	d501      	bpl.n	1660 <UART_Init+0x54>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
    165c:	7803      	ldrb	r3, [r0, #0]
    165e:	e7f9      	b.n	1654 <UART_Init+0x48>
		}

		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
    1660:	2680      	movs	r6, #128	; 0x80
    1662:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
		// Wait for current transmit complete
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
    1666:	4b8f      	ldr	r3, [pc, #572]	; (18a4 <UART_Init+0x298>)
    1668:	7d19      	ldrb	r1, [r3, #20]
    166a:	f001 0220 	and.w	r2, r1, #32
    166e:	b2d0      	uxtb	r0, r2
    1670:	2800      	cmp	r0, #0
    1672:	d0f8      	beq.n	1666 <UART_Init+0x5a>
		// Disable Tx
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
    1674:	2500      	movs	r5, #0
    1676:	f883 5030 	strb.w	r5, [r3, #48]	; 0x30

		// Disable interrupt
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
    167a:	605d      	str	r5, [r3, #4]
		// Set LCR to default state
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
    167c:	731d      	strb	r5, [r3, #12]
		// Set ACR to default state
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    167e:	621d      	str	r5, [r3, #32]
		// Set Modem Control to default state
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
    1680:	741d      	strb	r5, [r3, #16]
		// Set RS485 control to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
    1682:	f883 504c 	strb.w	r5, [r3, #76]	; 0x4c
		// Set RS485 delay timer to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
    1686:	f883 5054 	strb.w	r5, [r3, #84]	; 0x54
		// Set RS485 addr match to default state
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
    168a:	f883 5050 	strb.w	r5, [r3, #80]	; 0x50
		//Dummy Reading to Clear Status
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
    168e:	7e1a      	ldrb	r2, [r3, #24]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
    1690:	7d1b      	ldrb	r3, [r3, #20]
    1692:	e01d      	b.n	16d0 <UART_Init+0xc4>
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    1694:	2507      	movs	r5, #7
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    1696:	2600      	movs	r6, #0
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    1698:	7225      	strb	r5, [r4, #8]
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    169a:	7226      	strb	r6, [r4, #8]

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    169c:	7d23      	ldrb	r3, [r4, #20]
    169e:	07db      	lsls	r3, r3, #31
    16a0:	d501      	bpl.n	16a6 <UART_Init+0x9a>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
    16a2:	7823      	ldrb	r3, [r4, #0]
    16a4:	e7fa      	b.n	169c <UART_Init+0x90>
		}

		UARTx->TER = UART_TER_TXEN;
    16a6:	2180      	movs	r1, #128	; 0x80
    16a8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
    16ac:	7d22      	ldrb	r2, [r4, #20]
    16ae:	f002 0020 	and.w	r0, r2, #32
    16b2:	b2c5      	uxtb	r5, r0
    16b4:	2d00      	cmp	r5, #0
    16b6:	d0f9      	beq.n	16ac <UART_Init+0xa0>
		UARTx->ACR = 0;
		// Dummy reading
		tmp = UARTx->LSR;
	}

	if (UARTx == LPC_UART3)
    16b8:	4b7c      	ldr	r3, [pc, #496]	; (18ac <UART_Init+0x2a0>)

		UARTx->TER = UART_TER_TXEN;
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
		// Disable Tx
		UARTx->TER = 0;
    16ba:	2600      	movs	r6, #0
    16bc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
		UARTx->ACR = 0;
		// Dummy reading
		tmp = UARTx->LSR;
	}

	if (UARTx == LPC_UART3)
    16c0:	429c      	cmp	r4, r3
		while (!(UARTx->LSR & UART_LSR_THRE));
		// Disable Tx
		UARTx->TER = 0;

		// Disable interrupt
		UARTx->/*DLIER.*/IER = 0;
    16c2:	6066      	str	r6, [r4, #4]
		// Set LCR to default state
		UARTx->LCR = 0;
    16c4:	7326      	strb	r6, [r4, #12]
		// Set ACR to default state
		UARTx->ACR = 0;
    16c6:	6226      	str	r6, [r4, #32]
		// Dummy reading
		tmp = UARTx->LSR;
    16c8:	7d22      	ldrb	r2, [r4, #20]
	}

	if (UARTx == LPC_UART3)
	{
		// Set IrDA to default state
		UARTx->ICR = 0;
    16ca:	bf08      	it	eq
    16cc:	f884 6024 	strbeq.w	r6, [r4, #36]	; 0x24
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    16d0:	4e73      	ldr	r6, [pc, #460]	; (18a0 <UART_Init+0x294>)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
    16d2:	2006      	movs	r0, #6
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    16d4:	42b4      	cmp	r4, r6
		UARTx->ICR = 0;
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    16d6:	f8db 5000 	ldr.w	r5, [fp]
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
    16da:	d00b      	beq.n	16f4 <UART_Init+0xe8>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    16dc:	4b71      	ldr	r3, [pc, #452]	; (18a4 <UART_Init+0x298>)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
    16de:	2008      	movs	r0, #8
	/* get UART block clock */
	if (UARTx == (LPC_UART_TypeDef *)LPC_UART0)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    16e0:	429c      	cmp	r4, r3
    16e2:	d007      	beq.n	16f4 <UART_Init+0xe8>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
	}
	else if (UARTx == LPC_UART2)
    16e4:	4970      	ldr	r1, [pc, #448]	; (18a8 <UART_Init+0x29c>)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
    16e6:	2030      	movs	r0, #48	; 0x30
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
	}
	else if (UARTx == LPC_UART2)
    16e8:	428c      	cmp	r4, r1
    16ea:	d003      	beq.n	16f4 <UART_Init+0xe8>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
	}
	else if (UARTx == LPC_UART3)
    16ec:	4a6f      	ldr	r2, [pc, #444]	; (18ac <UART_Init+0x2a0>)
    16ee:	4294      	cmp	r4, r2
    16f0:	d103      	bne.n	16fa <UART_Init+0xee>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
    16f2:	2032      	movs	r0, #50	; 0x32
    16f4:	f7fe fe54 	bl	3a0 <CLKPWR_GetPCLK>
    16f8:	4607      	mov	r7, r0
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    16fa:	073e      	lsls	r6, r7, #28
    16fc:	0938      	lsrs	r0, r7, #4
    16fe:	9604      	str	r6, [sp, #16]
    1700:	9005      	str	r0, [sp, #20]
    1702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1706:	e9cd 2308 	strd	r2, r3, [sp, #32]
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
    170a:	f04f 33ff 	mov.w	r3, #4294967295
    170e:	9307      	str	r3, [sp, #28]
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
    1710:	2200      	movs	r2, #0
    1712:	2300      	movs	r3, #0
    1714:	e9cd 2302 	strd	r2, r3, [sp, #8]
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
    1718:	2600      	movs	r6, #0
		UARTx->ICR = 0;
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    171a:	9506      	str	r5, [sp, #24]
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    171c:	f04f 0801 	mov.w	r8, #1
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
    1720:	46b1      	mov	r9, r6
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    1722:	f04f 0c00 	mov.w	ip, #0
    1726:	46e2      	mov	sl, ip
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    1728:	9a06      	ldr	r2, [sp, #24]
    172a:	2300      	movs	r3, #0
    172c:	4462      	add	r2, ip
    172e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1732:	f8cd c004 	str.w	ip, [sp, #4]
    1736:	f003 f931 	bl	499c <__aeabi_uldivmod>
		  current_error = divisor & 0xFFFFFFFF;

		  tmp = divisor>>32;

		  /* Adjust error */
		  if(current_error > ((uint32_t)1<<31)){
    173a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    173e:	f8dd c004 	ldr.w	ip, [sp, #4]
    1742:	d901      	bls.n	1748 <UART_Init+0x13c>
			current_error = -current_error;
    1744:	4240      	negs	r0, r0
			tmp++;
    1746:	3101      	adds	r1, #1
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
    1748:	1e4b      	subs	r3, r1, #1
    174a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    174e:	d209      	bcs.n	1764 <UART_Init+0x158>
		  continue;

		  if( current_error < best_error){
    1750:	9a07      	ldr	r2, [sp, #28]
    1752:	4290      	cmp	r0, r2
    1754:	d206      	bcs.n	1764 <UART_Init+0x158>
			best_error = current_error;
			best_divisor = tmp;
    1756:	9102      	str	r1, [sp, #8]
    1758:	2100      	movs	r1, #0
    175a:	9103      	str	r1, [sp, #12]
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    175c:	b300      	cbz	r0, 17a0 <UART_Init+0x194>
    175e:	9007      	str	r0, [sp, #28]
    1760:	4646      	mov	r6, r8
    1762:	46d1      	mov	r9, sl
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
    1764:	f10a 0a01 	add.w	sl, sl, #1
    1768:	45c2      	cmp	sl, r8
    176a:	44ac      	add	ip, r5
    176c:	d3dc      	bcc.n	1728 <UART_Init+0x11c>
			bestm = m;
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
    176e:	9807      	ldr	r0, [sp, #28]
    1770:	b180      	cbz	r0, 1794 <UART_Init+0x188>
    1772:	9b06      	ldr	r3, [sp, #24]
    1774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1778:	195a      	adds	r2, r3, r5
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    177a:	f108 0801 	add.w	r8, r8, #1
    177e:	9206      	str	r2, [sp, #24]
    1780:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1784:	1812      	adds	r2, r2, r0
    1786:	eb43 0301 	adc.w	r3, r3, r1
    178a:	f1b8 0f10 	cmp.w	r8, #16
    178e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    1792:	d1c6      	bne.n	1722 <UART_Init+0x116>

		if (best_error == 0)
		  break;
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */
    1794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1798:	ea50 0301 	orrs.w	r3, r0, r1
    179c:	d04a      	beq.n	1834 <UART_Init+0x228>
    179e:	e001      	b.n	17a4 <UART_Init+0x198>
		  if( current_error < best_error){
			best_error = current_error;
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    17a0:	46d1      	mov	r9, sl
    17a2:	4646      	mov	r6, r8
		  break;
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */

	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
    17a4:	0938      	lsrs	r0, r7, #4
    17a6:	9f02      	ldr	r7, [sp, #8]
    17a8:	eb09 0106 	add.w	r1, r9, r6
    17ac:	fba1 2307 	umull	r2, r3, r1, r7
    17b0:	9f03      	ldr	r7, [sp, #12]
    17b2:	4370      	muls	r0, r6
    17b4:	fb01 3307 	mla	r3, r1, r7, r3
    17b8:	2100      	movs	r1, #0
    17ba:	f003 f8ef 	bl	499c <__aeabi_uldivmod>

	/* reuse best_error to evaluate baud error*/
	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
    17be:	4285      	cmp	r5, r0
    17c0:	bf8c      	ite	hi
    17c2:	ebc0 0005 	rsbhi	r0, r0, r5
	else best_error = recalcbaud -baudrate;
    17c6:	ebc5 0000 	rsbls	r0, r5, r0

	best_error = best_error * 100 / baudrate;
    17ca:	2364      	movs	r3, #100	; 0x64
    17cc:	4358      	muls	r0, r3
    17ce:	fbb0 f5f5 	udiv	r5, r0, r5

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
    17d2:	2d02      	cmp	r5, #2
    17d4:	d82e      	bhi.n	1834 <UART_Init+0x228>
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    17d6:	7b20      	ldrb	r0, [r4, #12]

	best_error = best_error * 100 / baudrate;

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    17d8:	4a32      	ldr	r2, [pc, #200]	; (18a4 <UART_Init+0x298>)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    17da:	f040 0180 	orr.w	r1, r0, #128	; 0x80

	best_error = best_error * 100 / baudrate;

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    17de:	4294      	cmp	r4, r2
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    17e0:	7321      	strb	r1, [r4, #12]

	best_error = best_error * 100 / baudrate;

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    17e2:	d113      	bne.n	180c <UART_Init+0x200>
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    17e4:	9b02      	ldr	r3, [sp, #8]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    17e6:	f89d 0008 	ldrb.w	r0, [sp, #8]
	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    17ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    17ee:	b2c1      	uxtb	r1, r0
	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    17f0:	7122      	strb	r2, [r4, #4]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    17f2:	7021      	strb	r1, [r4, #0]
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    17f4:	7b23      	ldrb	r3, [r4, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    17f6:	0136      	lsls	r6, r6, #4
    17f8:	b2f0      	uxtb	r0, r6
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    17fa:	f009 090f 	and.w	r9, r9, #15
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    17fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    1802:	ea40 0609 	orr.w	r6, r0, r9
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    1806:	7322      	strb	r2, [r4, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    1808:	62a6      	str	r6, [r4, #40]	; 0x28
    180a:	e016      	b.n	183a <UART_Init+0x22e>
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    180c:	9f02      	ldr	r7, [sp, #8]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    180e:	f009 090f 	and.w	r9, r9, #15
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    1812:	f3c7 2307 	ubfx	r3, r7, #8, #8
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    1816:	f89d 7008 	ldrb.w	r7, [sp, #8]
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    181a:	7123      	strb	r3, [r4, #4]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    181c:	b2fa      	uxtb	r2, r7
    181e:	7022      	strb	r2, [r4, #0]
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    1820:	7b20      	ldrb	r0, [r4, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    1822:	ea49 1606 	orr.w	r6, r9, r6, lsl #4
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    1826:	f000 017f 	and.w	r1, r0, #127	; 0x7f
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    182a:	b2f6      	uxtb	r6, r6
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    182c:	7321      	strb	r1, [r4, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    182e:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1832:	e005      	b.n	1840 <UART_Init+0x234>

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1834:	491b      	ldr	r1, [pc, #108]	; (18a4 <UART_Init+0x298>)
    1836:	428c      	cmp	r4, r1
    1838:	d102      	bne.n	1840 <UART_Init+0x234>
	{
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
    183a:	4a1a      	ldr	r2, [pc, #104]	; (18a4 <UART_Init+0x298>)
    183c:	7b13      	ldrb	r3, [r2, #12]
    183e:	e000      	b.n	1842 <UART_Init+0x236>
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    1840:	7b23      	ldrb	r3, [r4, #12]
	}

	switch (UART_ConfigStruct->Databits){
    1842:	f89b 0005 	ldrb.w	r0, [fp, #5]
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    1846:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	}

	switch (UART_ConfigStruct->Databits){
    184a:	2801      	cmp	r0, #1
    184c:	d005      	beq.n	185a <UART_Init+0x24e>
    184e:	d309      	bcc.n	1864 <UART_Init+0x258>
    1850:	2802      	cmp	r0, #2
    1852:	d105      	bne.n	1860 <UART_Init+0x254>
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
		break;
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
    1854:	f043 0302 	orr.w	r3, r3, #2
		break;
    1858:	e004      	b.n	1864 <UART_Init+0x258>
	switch (UART_ConfigStruct->Databits){
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
    185a:	f043 0301 	orr.w	r3, r3, #1
		break;
    185e:	e001      	b.n	1864 <UART_Init+0x258>
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
		break;
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
    1860:	f043 0303 	orr.w	r3, r3, #3
		break;
	}

	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
    1864:	f89b 1004 	ldrb.w	r1, [fp, #4]
    1868:	b179      	cbz	r1, 188a <UART_Init+0x27e>
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
		switch (UART_ConfigStruct->Parity)
    186a:	2903      	cmp	r1, #3
    186c:	d008      	beq.n	1880 <UART_Init+0x274>
    186e:	2904      	cmp	r1, #4
    1870:	d009      	beq.n	1886 <UART_Init+0x27a>
    1872:	2902      	cmp	r1, #2
	{
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
    1874:	bf14      	ite	ne
    1876:	f043 0308 	orrne.w	r3, r3, #8
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
    187a:	f043 0318 	orreq.w	r3, r3, #24
			break;
    187e:	e004      	b.n	188a <UART_Init+0x27e>

		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
    1880:	f043 0328 	orr.w	r3, r3, #40	; 0x28
			break;
    1884:	e001      	b.n	188a <UART_Init+0x27e>

		case UART_PARITY_SP_0:
			tmp |= UART_LCR_PARITY_F_0;
    1886:	f043 0338 	orr.w	r3, r3, #56	; 0x38
		default:
			break;
		}
	}

	switch (UART_ConfigStruct->Stopbits){
    188a:	f89b 2006 	ldrb.w	r2, [fp, #6]
    188e:	2a01      	cmp	r2, #1
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
    1890:	bf08      	it	eq
    1892:	f043 0304 	orreq.w	r3, r3, #4
    1896:	b2d8      	uxtb	r0, r3


	// Write back to LCR, configure FIFO and Disable Tx
	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    1898:	7320      	strb	r0, [r4, #12]
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
	}
}
    189a:	b00b      	add	sp, #44	; 0x2c
    189c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18a0:	4000c000 	.word	0x4000c000
    18a4:	40010000 	.word	0x40010000
    18a8:	40098000 	.word	0x40098000
    18ac:	4009c000 	.word	0x4009c000

000018b0 <UART_ConfigStructInit>:
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
	UART_InitStruct->Parity = UART_PARITY_NONE;
    18b0:	2200      	movs	r2, #0
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
    18b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	UART_InitStruct->Databits = UART_DATABIT_8;
    18b6:	2103      	movs	r1, #3
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
    18b8:	6003      	str	r3, [r0, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
    18ba:	7141      	strb	r1, [r0, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
    18bc:	7102      	strb	r2, [r0, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    18be:	7182      	strb	r2, [r0, #6]
    18c0:	4770      	bx	lr

000018c2 <UART_SendByte>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    18c2:	7001      	strb	r1, [r0, #0]
    18c4:	4770      	bx	lr

000018c6 <UART_ReceiveByte>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		Data received
 **********************************************************************/
uint8_t UART_ReceiveByte(LPC_UART_TypeDef* UARTx)
{
    18c6:	4903      	ldr	r1, [pc, #12]	; (18d4 <UART_ReceiveByte+0xe>)
    18c8:	f04f 0200 	mov.w	r2, #0
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		EscFlag = 0;                    /* clear EscapeFlag */
    18cc:	800a      	strh	r2, [r1, #0]
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    18ce:	7800      	ldrb	r0, [r0, #0]
	else
	{
		EscFlag = 0;                    /* clear EscapeFlag */
		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
	}
}
    18d0:	4770      	bx	lr
    18d2:	bf00      	nop
    18d4:	10000078 	.word	0x10000078

000018d8 <UART_ForceBreak>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_BREAK_EN;
    18d8:	7b01      	ldrb	r1, [r0, #12]
    18da:	f041 0240 	orr.w	r2, r1, #64	; 0x40
    18de:	7302      	strb	r2, [r0, #12]
    18e0:	4770      	bx	lr

000018e2 <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
    18e2:	b510      	push	{r4, lr}
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
    18e4:	2906      	cmp	r1, #6
    18e6:	d814      	bhi.n	1912 <UART_IntConfig+0x30>
    18e8:	e8df f001 	tbb	[pc, r1]
    18ec:	08060412 	.word	0x08060412
    18f0:	0c0a      	.short	0x0c0a
    18f2:	0f          	.byte	0x0f
    18f3:	00          	.byte	0x00
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
			break;
		case UART_INTCFG_THRE:
			tmp = UART_IER_THREINT_EN;
    18f4:	2302      	movs	r3, #2
			break;
    18f6:	e00c      	b.n	1912 <UART_IntConfig+0x30>
		case UART_INTCFG_RLS:
			tmp = UART_IER_RLSINT_EN;
    18f8:	2304      	movs	r3, #4
			break;
    18fa:	e00a      	b.n	1912 <UART_IntConfig+0x30>
		case UART1_INTCFG_MS:
			tmp = UART1_IER_MSINT_EN;
    18fc:	2308      	movs	r3, #8
			break;
    18fe:	e008      	b.n	1912 <UART_IntConfig+0x30>
		case UART1_INTCFG_CTS:
			tmp = UART1_IER_CTSINT_EN;
    1900:	2380      	movs	r3, #128	; 0x80
			break;
    1902:	e006      	b.n	1912 <UART_IntConfig+0x30>
		case UART_INTCFG_ABEO:
			tmp = UART_IER_ABEOINT_EN;
    1904:	f44f 7380 	mov.w	r3, #256	; 0x100
			break;
    1908:	e003      	b.n	1912 <UART_IntConfig+0x30>
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
    190a:	f44f 7300 	mov.w	r3, #512	; 0x200
			break;
    190e:	e000      	b.n	1912 <UART_IntConfig+0x30>
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
    1910:	2301      	movs	r3, #1
	else
	{
		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
	}

	if (NewState == ENABLE)
    1912:	2a01      	cmp	r2, #1
    1914:	4a0b      	ldr	r2, [pc, #44]	; (1944 <UART_IntConfig+0x62>)
    1916:	d103      	bne.n	1920 <UART_IntConfig+0x3e>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
    1918:	6844      	ldr	r4, [r0, #4]
    191a:	4323      	orrs	r3, r4
    191c:	6043      	str	r3, [r0, #4]
    191e:	bd10      	pop	{r4, pc}
			UARTx->/*DLIER.*/IER |= tmp;
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    1920:	4290      	cmp	r0, r2
    1922:	ea6f 0303 	mvn.w	r3, r3
    1926:	d105      	bne.n	1934 <UART_IntConfig+0x52>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
    1928:	6842      	ldr	r2, [r0, #4]
    192a:	f240 318f 	movw	r1, #911	; 0x38f
    192e:	4011      	ands	r1, r2
    1930:	400b      	ands	r3, r1
    1932:	e004      	b.n	193e <UART_IntConfig+0x5c>
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
    1934:	6841      	ldr	r1, [r0, #4]
    1936:	f240 3407 	movw	r4, #775	; 0x307
    193a:	400c      	ands	r4, r1
    193c:	4023      	ands	r3, r4
    193e:	6043      	str	r3, [r0, #4]
    1940:	bd10      	pop	{r4, pc}
    1942:	bf00      	nop
    1944:	40010000 	.word	0x40010000

00001948 <UART_GetLineStatus>:
{
	CHECK_PARAM(PARAM_UARTx(UARTx));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
    1948:	7d00      	ldrb	r0, [r0, #20]
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
	}
}
    194a:	4770      	bx	lr

0000194c <UART_GetIntId>:
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    194c:	6883      	ldr	r3, [r0, #8]
}
    194e:	f240 30cf 	movw	r0, #975	; 0x3cf
    1952:	4018      	ands	r0, r3
    1954:	4770      	bx	lr

00001956 <UART_CheckBusy>:
 * 				- LPC_UART3: UART3 peripheral
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
	if (UARTx->LSR & UART_LSR_TEMT){
    1956:	7d00      	ldrb	r0, [r0, #20]
    1958:	f080 0140 	eor.w	r1, r0, #64	; 0x40
		return RESET;
	} else {
		return SET;
	}
}
    195c:	f3c1 1080 	ubfx	r0, r1, #6, #1
    1960:	4770      	bx	lr

00001962 <UART_FIFOConfig>:
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
    1962:	78cb      	ldrb	r3, [r1, #3]
    1964:	2b02      	cmp	r3, #2
    1966:	bf9c      	itt	ls
    1968:	4a0b      	ldrls	r2, [pc, #44]	; (1998 <UART_FIFOConfig+0x36>)
    196a:	5cd3      	ldrbls	r3, [r2, r3]
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    196c:	784a      	ldrb	r2, [r1, #1]
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_DMAMode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetRxBuf));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(FIFOCfg->FIFO_ResetTxBuf));

	tmp |= UART_FCR_FIFO_EN;
	switch (FIFOCfg->FIFO_Level){
    196e:	bf88      	it	hi
    1970:	23c1      	movhi	r3, #193	; 0xc1
	default:
		tmp |= UART_FCR_TRG_LEV3;
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
    1972:	2a01      	cmp	r2, #1
	{
		tmp |= UART_FCR_TX_RS;
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    1974:	780a      	ldrb	r2, [r1, #0]
	{
		tmp |= UART_FCR_RX_RS;
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    1976:	7889      	ldrb	r1, [r1, #2]
		break;
	}

	if (FIFOCfg->FIFO_ResetTxBuf == ENABLE)
	{
		tmp |= UART_FCR_TX_RS;
    1978:	bf08      	it	eq
    197a:	f043 0304 	orreq.w	r3, r3, #4
	}
	if (FIFOCfg->FIFO_ResetRxBuf == ENABLE)
    197e:	2a01      	cmp	r2, #1
	{
		tmp |= UART_FCR_RX_RS;
    1980:	bf08      	it	eq
    1982:	f043 0302 	orreq.w	r3, r3, #2
	}
	if (FIFOCfg->FIFO_DMAMode == ENABLE)
    1986:	2901      	cmp	r1, #1
	{
		tmp |= UART_FCR_DMAMODE_SEL;
    1988:	bf08      	it	eq
    198a:	f043 0308 	orreq.w	r3, r3, #8
    198e:	f023 0330 	bic.w	r3, r3, #48	; 0x30


	//write to FIFO control register
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = tmp & UART_FCR_BITMASK;
    1992:	b2d9      	uxtb	r1, r3
    1994:	7201      	strb	r1, [r0, #8]
    1996:	4770      	bx	lr
    1998:	00005240 	.word	0x00005240

0000199c <UART_Config>:
 * 				- LPC_UART2: UART2 peripheral
 * @param[in]	baud define the baudrate for UARTx
 * @return 		None
 *********************************************************************/
void UART_Config(LPC_UART_TypeDef *UARTx, long int baud)
{
    199c:	b570      	push	{r4, r5, r6, lr}
//	NVIC_SetVTOR(0x10000000);
//#else
//	NVIC_SetVTOR(0x00000000);
//#endif

	if(UARTx == LPC_UART0)
    199e:	4b47      	ldr	r3, [pc, #284]	; (1abc <UART_Config+0x120>)
 * 				- LPC_UART2: UART2 peripheral
 * @param[in]	baud define the baudrate for UARTx
 * @return 		None
 *********************************************************************/
void UART_Config(LPC_UART_TypeDef *UARTx, long int baud)
{
    19a0:	b086      	sub	sp, #24
//	NVIC_SetVTOR(0x10000000);
//#else
//	NVIC_SetVTOR(0x00000000);
//#endif

	if(UARTx == LPC_UART0)
    19a2:	4298      	cmp	r0, r3
 * 				- LPC_UART2: UART2 peripheral
 * @param[in]	baud define the baudrate for UARTx
 * @return 		None
 *********************************************************************/
void UART_Config(LPC_UART_TypeDef *UARTx, long int baud)
{
    19a4:	4604      	mov	r4, r0
    19a6:	460e      	mov	r6, r1
//	NVIC_SetVTOR(0x10000000);
//#else
//	NVIC_SetVTOR(0x00000000);
//#endif

	if(UARTx == LPC_UART0)
    19a8:	d112      	bne.n	19d0 <UART_Config+0x34>
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 2;
    19aa:	2502      	movs	r5, #2
	{
		/*
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
    19ac:	2000      	movs	r0, #0
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 2;
    19ae:	f88d 5009 	strb.w	r5, [sp, #9]
		PinCfg.Portnum = 0;
    19b2:	ad06      	add	r5, sp, #24
    19b4:	f805 0d10 	strb.w	r0, [r5, #-16]!
	if(UARTx == LPC_UART0)
	{
		/*
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
    19b8:	2301      	movs	r3, #1
		PinCfg.OpenDrain = 0;
    19ba:	f88d 000c 	strb.w	r0, [sp, #12]
		PinCfg.Pinmode = 0;
    19be:	f88d 000b 	strb.w	r0, [sp, #11]
		PinCfg.Pinnum = 2;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    19c2:	4628      	mov	r0, r5
	if(UARTx == LPC_UART0)
	{
		/*
		 * Initialize UART0 pin connect
		 */
		PinCfg.Funcnum = 1;
    19c4:	f88d 300a 	strb.w	r3, [sp, #10]
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 2;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    19c8:	f7ff faf8 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 3;
    19cc:	2003      	movs	r0, #3
    19ce:	e029      	b.n	1a24 <UART_Config+0x88>
		PINSEL_ConfigPin(&PinCfg);
	}

	else if((LPC_UART1_TypeDef *)UARTx == LPC_UART1)
    19d0:	483b      	ldr	r0, [pc, #236]	; (1ac0 <UART_Config+0x124>)
    19d2:	4284      	cmp	r4, r0
    19d4:	d111      	bne.n	19fa <UART_Config+0x5e>
	{
		/*
		 * Initialize UART1 pin connect
		 */
		PinCfg.Funcnum = 2;
    19d6:	2102      	movs	r1, #2
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 0;
		PinCfg.Portnum = 2;
    19d8:	ad06      	add	r5, sp, #24
    19da:	f805 1d10 	strb.w	r1, [r5, #-16]!
	{
		/*
		 * Initialize UART1 pin connect
		 */
		PinCfg.Funcnum = 2;
		PinCfg.OpenDrain = 0;
    19de:	2200      	movs	r2, #0
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 0;
		PinCfg.Portnum = 2;
		PINSEL_ConfigPin(&PinCfg);
    19e0:	4628      	mov	r0, r5
	else if((LPC_UART1_TypeDef *)UARTx == LPC_UART1)
	{
		/*
		 * Initialize UART1 pin connect
		 */
		PinCfg.Funcnum = 2;
    19e2:	f88d 100a 	strb.w	r1, [sp, #10]
		PinCfg.OpenDrain = 0;
    19e6:	f88d 200c 	strb.w	r2, [sp, #12]
		PinCfg.Pinmode = 0;
    19ea:	f88d 200b 	strb.w	r2, [sp, #11]
		PinCfg.Pinnum = 0;
    19ee:	f88d 2009 	strb.w	r2, [sp, #9]
		PinCfg.Portnum = 2;
		PINSEL_ConfigPin(&PinCfg);
    19f2:	f7ff fae3 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 1;
    19f6:	2001      	movs	r0, #1
    19f8:	e014      	b.n	1a24 <UART_Config+0x88>
		PINSEL_ConfigPin(&PinCfg);
	}

	else if(UARTx == LPC_UART2)
    19fa:	4932      	ldr	r1, [pc, #200]	; (1ac4 <UART_Config+0x128>)
    19fc:	428c      	cmp	r4, r1
    19fe:	d116      	bne.n	1a2e <UART_Config+0x92>
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 10;
    1a00:	250a      	movs	r5, #10
	{
		/*
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
		PinCfg.OpenDrain = 0;
    1a02:	2300      	movs	r3, #0
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 10;
    1a04:	f88d 5009 	strb.w	r5, [sp, #9]
		PinCfg.Portnum = 0;
    1a08:	ad06      	add	r5, sp, #24
    1a0a:	f805 3d10 	strb.w	r3, [r5, #-16]!
	else if(UARTx == LPC_UART2)
	{
		/*
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
    1a0e:	2201      	movs	r2, #1
		PinCfg.OpenDrain = 0;
		PinCfg.Pinmode = 0;
		PinCfg.Pinnum = 10;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    1a10:	4628      	mov	r0, r5
	else if(UARTx == LPC_UART2)
	{
		/*
		 * Initialize UART2 pin connect
		 */
		PinCfg.Funcnum = 1;
    1a12:	f88d 200a 	strb.w	r2, [sp, #10]
		PinCfg.OpenDrain = 0;
    1a16:	f88d 300c 	strb.w	r3, [sp, #12]
		PinCfg.Pinmode = 0;
    1a1a:	f88d 300b 	strb.w	r3, [sp, #11]
		PinCfg.Pinnum = 10;
		PinCfg.Portnum = 0;
		PINSEL_ConfigPin(&PinCfg);
    1a1e:	f7ff facd 	bl	fbc <PINSEL_ConfigPin>
		PinCfg.Pinnum = 11;
    1a22:	200b      	movs	r0, #11
    1a24:	f88d 0009 	strb.w	r0, [sp, #9]
		PINSEL_ConfigPin(&PinCfg);
    1a28:	4628      	mov	r0, r5
    1a2a:	f7ff fac7 	bl	fbc <PINSEL_ConfigPin>
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
    1a2e:	2103      	movs	r1, #3
    1a30:	f88d 1015 	strb.w	r1, [sp, #21]
	 * 1 Stop bit
	 * None parity
	 */

	UART_ConfigStructInit(&UARTConfigStruct);
	UARTConfigStruct.Baud_rate = baud;
    1a34:	a906      	add	r1, sp, #24
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
	UART_InitStruct->Parity = UART_PARITY_NONE;
    1a36:	2500      	movs	r5, #0
	 * 1 Stop bit
	 * None parity
	 */

	UART_ConfigStructInit(&UARTConfigStruct);
	UARTConfigStruct.Baud_rate = baud;
    1a38:	f841 6d08 	str.w	r6, [r1, #-8]!

	// Initialize UARTx peripheral with given to corresponding parameter
	UART_Init(UARTx, &UARTConfigStruct);
    1a3c:	4620      	mov	r0, r4
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
	UART_InitStruct->Databits = UART_DATABIT_8;
	UART_InitStruct->Parity = UART_PARITY_NONE;
    1a3e:	f88d 5014 	strb.w	r5, [sp, #20]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    1a42:	f88d 5016 	strb.w	r5, [sp, #22]

	UART_ConfigStructInit(&UARTConfigStruct);
	UARTConfigStruct.Baud_rate = baud;

	// Initialize UARTx peripheral with given to corresponding parameter
	UART_Init(UARTx, &UARTConfigStruct);
    1a46:	f7ff fde1 	bl	160c <UART_Init>
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    1a4a:	2201      	movs	r2, #1
	 * 				- FIFO_State = ENABLE
	 */
	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);

	// Initialize FIFO for UARTx peripheral
	UART_FIFOConfig(UARTx, &UARTFIFOConfigStruct);
    1a4c:	4620      	mov	r0, r4
    1a4e:	a901      	add	r1, sp, #4
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    1a50:	f88d 2004 	strb.w	r2, [sp, #4]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    1a54:	f88d 2005 	strb.w	r2, [sp, #5]
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    1a58:	f88d 5006 	strb.w	r5, [sp, #6]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    1a5c:	f88d 5007 	strb.w	r5, [sp, #7]
	 * 				- FIFO_State = ENABLE
	 */
	UART_FIFOConfigStructInit(&UARTFIFOConfigStruct);

	// Initialize FIFO for UARTx peripheral
	UART_FIFOConfig(UARTx, &UARTFIFOConfigStruct);
    1a60:	f7ff ff7f 	bl	1962 <UART_FIFOConfig>

	if (NewState == ENABLE)
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    1a64:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30

	// Enable UARTx Transmit
	UART_TxCmd(UARTx, ENABLE);

#ifdef INTERRUPT_MODE
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    1a68:	2100      	movs	r1, #0

	if (NewState == ENABLE)
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    1a6a:	f043 0080 	orr.w	r0, r3, #128	; 0x80

	// Enable UARTx Transmit
	UART_TxCmd(UARTx, ENABLE);

#ifdef INTERRUPT_MODE
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    1a6e:	2201      	movs	r2, #1

	if (NewState == ENABLE)
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    1a70:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30

	// Enable UARTx Transmit
	UART_TxCmd(UARTx, ENABLE);

#ifdef INTERRUPT_MODE
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    1a74:	4620      	mov	r0, r4
    1a76:	f7ff ff34 	bl	18e2 <UART_IntConfig>
	/* Enable UART line status interrupt */
	UART_IntConfig(UARTx, UART_INTCFG_RLS, ENABLE);
    1a7a:	2102      	movs	r1, #2
    1a7c:	2201      	movs	r2, #1
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff ff2f 	bl	18e2 <UART_IntConfig>
	__BUF_RESET(rb.rx_head);
	__BUF_RESET(rb.rx_tail);
	__BUF_RESET(rb.tx_head);
	__BUF_RESET(rb.tx_tail);

	if(UARTx == LPC_UART0)
    1a84:	480d      	ldr	r0, [pc, #52]	; (1abc <UART_Config+0x120>)
	 * first time
	 */
	TxIntStat = RESET;

	// Reset ring buf head and tail idx
	__BUF_RESET(rb.rx_head);
    1a86:	4b10      	ldr	r3, [pc, #64]	; (1ac8 <UART_Config+0x12c>)
	/**
	 * Do not enable transmit interrupt here, since it is handled by
	 * UART_Send() function, just to reset Tx Interrupt state for the
	 * first time
	 */
	TxIntStat = RESET;
    1a88:	4a10      	ldr	r2, [pc, #64]	; (1acc <UART_Config+0x130>)
    1a8a:	2100      	movs	r1, #0
	__BUF_RESET(rb.rx_head);
	__BUF_RESET(rb.rx_tail);
	__BUF_RESET(rb.tx_head);
	__BUF_RESET(rb.tx_tail);

	if(UARTx == LPC_UART0)
    1a8c:	4284      	cmp	r4, r0
	/**
	 * Do not enable transmit interrupt here, since it is handled by
	 * UART_Send() function, just to reset Tx Interrupt state for the
	 * first time
	 */
	TxIntStat = RESET;
    1a8e:	7011      	strb	r1, [r2, #0]

	// Reset ring buf head and tail idx
	__BUF_RESET(rb.rx_head);
    1a90:	6099      	str	r1, [r3, #8]
	__BUF_RESET(rb.rx_tail);
    1a92:	60d9      	str	r1, [r3, #12]
	__BUF_RESET(rb.tx_head);
    1a94:	6019      	str	r1, [r3, #0]
	__BUF_RESET(rb.tx_tail);
    1a96:	6059      	str	r1, [r3, #4]

	if(UARTx == LPC_UART0)
    1a98:	d105      	bne.n	1aa6 <UART_Config+0x10a>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1a9a:	4b0d      	ldr	r3, [pc, #52]	; (1ad0 <UART_Config+0x134>)
    1a9c:	2148      	movs	r1, #72	; 0x48
    1a9e:	f883 1305 	strb.w	r1, [r3, #773]	; 0x305

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1aa2:	2020      	movs	r0, #32
    1aa4:	e007      	b.n	1ab6 <UART_Config+0x11a>
		/* preemption = 1, sub-priority = 1 */
		NVIC_SetPriority(UART0_IRQn, ((0x01<<3)|0x01));
		/* Enable Interrupt for UART0 channel */
		NVIC_EnableIRQ(UART0_IRQn);
	}
	else if(UARTx == LPC_UART2)
    1aa6:	4907      	ldr	r1, [pc, #28]	; (1ac4 <UART_Config+0x128>)
    1aa8:	428c      	cmp	r4, r1
    1aaa:	d105      	bne.n	1ab8 <UART_Config+0x11c>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    1aac:	4b08      	ldr	r3, [pc, #32]	; (1ad0 <UART_Config+0x134>)
    1aae:	2210      	movs	r2, #16
    1ab0:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1ab4:	2080      	movs	r0, #128	; 0x80
    1ab6:	6018      	str	r0, [r3, #0]
		/* Enable Interrupt for UART2 channel */
		NVIC_EnableIRQ(UART2_IRQn);
	}

#endif
}
    1ab8:	b006      	add	sp, #24
    1aba:	bd70      	pop	{r4, r5, r6, pc}
    1abc:	4000c000 	.word	0x4000c000
    1ac0:	40010000 	.word	0x40010000
    1ac4:	40098000 	.word	0x40098000
    1ac8:	1000007c 	.word	0x1000007c
    1acc:	1000034c 	.word	0x1000034c
    1ad0:	e000e100 	.word	0xe000e100

00001ad4 <UART_FIFOConfigStructInit>:
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    1ad4:	2300      	movs	r3, #0
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    1ad6:	2101      	movs	r1, #1
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_FIFOConfigStructInit(UART_FIFO_CFG_Type *UART_FIFOInitStruct)
{
	UART_FIFOInitStruct->FIFO_DMAMode = DISABLE;
    1ad8:	7083      	strb	r3, [r0, #2]
	UART_FIFOInitStruct->FIFO_Level = UART_FIFO_TRGLEV0;
    1ada:	70c3      	strb	r3, [r0, #3]
	UART_FIFOInitStruct->FIFO_ResetRxBuf = ENABLE;
    1adc:	7001      	strb	r1, [r0, #0]
	UART_FIFOInitStruct->FIFO_ResetTxBuf = ENABLE;
    1ade:	7041      	strb	r1, [r0, #1]
    1ae0:	4770      	bx	lr

00001ae2 <UART_ABCmd>:

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	tmp = 0;
	if (NewState == ENABLE) {
    1ae2:	2a01      	cmp	r2, #1
    1ae4:	f04f 0300 	mov.w	r3, #0
    1ae8:	d120      	bne.n	1b2c <UART_ABCmd+0x4a>
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
    1aea:	780b      	ldrb	r3, [r1, #0]
			tmp |= UART_ACR_MODE;
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
    1aec:	784a      	ldrb	r2, [r1, #1]
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	tmp = 0;
    1aee:	2b01      	cmp	r3, #1
    1af0:	bf0c      	ite	eq
    1af2:	2302      	moveq	r3, #2
    1af4:	2300      	movne	r3, #0
	if (NewState == ENABLE) {
		if (ABConfigStruct->ABMode == UART_AUTOBAUD_MODE1){
			tmp |= UART_ACR_MODE;
		}
		if (ABConfigStruct->AutoRestart == ENABLE){
    1af6:	2a01      	cmp	r2, #1
    1af8:	d101      	bne.n	1afe <UART_ABCmd+0x1c>
			tmp |= UART_ACR_AUTO_RESTART;
    1afa:	f043 0304 	orr.w	r3, r3, #4
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    1afe:	7b02      	ldrb	r2, [r0, #12]
		if (ABConfigStruct->AutoRestart == ENABLE){
			tmp |= UART_ACR_AUTO_RESTART;
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1b00:	490b      	ldr	r1, [pc, #44]	; (1b30 <UART_ABCmd+0x4e>)
    1b02:	4288      	cmp	r0, r1
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    1b04:	f042 0180 	orr.w	r1, r2, #128	; 0x80
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
    1b08:	f04f 0200 	mov.w	r2, #0
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		if (NewState == ENABLE)
		{
			// Clear DLL and DLM value
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    1b0c:	7301      	strb	r1, [r0, #12]
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
    1b0e:	7002      	strb	r2, [r0, #0]
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
    1b10:	7102      	strb	r2, [r0, #4]
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
    1b12:	7b01      	ldrb	r1, [r0, #12]
    1b14:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    1b18:	7302      	strb	r2, [r0, #12]
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
    1b1a:	f04f 0110 	mov.w	r1, #16
		if (ABConfigStruct->AutoRestart == ENABLE){
			tmp |= UART_ACR_AUTO_RESTART;
		}
	}

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    1b1e:	d002      	beq.n	1b26 <UART_ABCmd+0x44>
			UARTx->LCR |= UART_LCR_DLAB_EN;
			UARTx->DLL = 0;
			UARTx->DLM = 0;
			UARTx->LCR &= ~UART_LCR_DLAB_EN;
			// FDR value must be reset to default value
			UARTx->FDR = 0x10;
    1b20:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    1b24:	e000      	b.n	1b28 <UART_ABCmd+0x46>
			((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
			((LPC_UART1_TypeDef *)UARTx)->DLL = 0;
			((LPC_UART1_TypeDef *)UARTx)->DLM = 0;
			((LPC_UART1_TypeDef *)UARTx)->LCR &= ~UART_LCR_DLAB_EN;
			// FDR value must be reset to default value
			((LPC_UART1_TypeDef *)UARTx)->FDR = 0x10;
    1b26:	6281      	str	r1, [r0, #40]	; 0x28
			((LPC_UART1_TypeDef *)UARTx)->ACR = UART_ACR_START | tmp;
    1b28:	f043 0301 	orr.w	r3, r3, #1
		}
		else
		{
			((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    1b2c:	6203      	str	r3, [r0, #32]
    1b2e:	4770      	bx	lr
    1b30:	40010000 	.word	0x40010000

00001b34 <UART_ABClearIntPending>:
void UART_ABClearIntPending(LPC_UART_TypeDef *UARTx, UART_ABEO_Type ABIntType)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
	{
		UARTx->ACR |= ABIntType;
    1b34:	6a02      	ldr	r2, [r0, #32]
    1b36:	4311      	orrs	r1, r2
    1b38:	6201      	str	r1, [r0, #32]
    1b3a:	4770      	bx	lr

00001b3c <UART_TxCmd>:
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    1b3c:	2901      	cmp	r1, #1
    1b3e:	d106      	bne.n	1b4e <UART_TxCmd+0x12>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    1b40:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    1b44:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    1b48:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    1b4c:	4770      	bx	lr
    1b4e:	f04f 0100 	mov.w	r1, #0
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    1b52:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    1b56:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
    1b5a:	4770      	bx	lr

00001b5c <UART_DeInit>:
void UART_DeInit(LPC_UART_TypeDef* UARTx)
{
	// For debug mode
	CHECK_PARAM(PARAM_UARTx(UARTx));

	UART_TxCmd(UARTx, DISABLE);
    1b5c:	2100      	movs	r1, #0
    1b5e:	f7ff bfed 	b.w	1b3c <UART_TxCmd>

00001b62 <UART_IrDAInvtInputCmd>:
void UART_IrDAInvtInputCmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    1b62:	2901      	cmp	r1, #1
    1b64:	d104      	bne.n	1b70 <UART_IrDAInvtInputCmd+0xe>
	{
		UARTx->ICR |= UART_ICR_IRDAINV;
    1b66:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
    1b6a:	f042 0102 	orr.w	r1, r2, #2
    1b6e:	e004      	b.n	1b7a <UART_IrDAInvtInputCmd+0x18>
	}
	else if (NewState == DISABLE)
    1b70:	b929      	cbnz	r1, 1b7e <UART_IrDAInvtInputCmd+0x1c>
	{
		UARTx->ICR &= (~UART_ICR_IRDAINV) & UART_ICR_BITMASK;
    1b72:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    1b76:	f003 013d 	and.w	r1, r3, #61	; 0x3d
    1b7a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    1b7e:	4770      	bx	lr

00001b80 <UART_IrDACmd>:
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
	{
		UARTx->ICR |= UART_ICR_IRDAEN;
    1b80:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
void UART_IrDACmd(LPC_UART_TypeDef* UARTx, FunctionalState NewState)
{
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	if (NewState == ENABLE)
    1b84:	2901      	cmp	r1, #1
	{
		UARTx->ICR |= UART_ICR_IRDAEN;
    1b86:	bf0c      	ite	eq
    1b88:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		UARTx->ICR &= (~UART_ICR_IRDAEN) & UART_ICR_BITMASK;
    1b8c:	f003 033e 	andne.w	r3, r3, #62	; 0x3e
    1b90:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    1b94:	4770      	bx	lr

00001b96 <UART_IrDAPulseDivConfig>:
	uint32_t tmp, tmp1;
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));

	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    1b96:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
	uint32_t tmp, tmp1;
	CHECK_PARAM(PARAM_UART_IrDA(UARTx));
	CHECK_PARAM(PARAM_UART_IrDA_PULSEDIV(PulseDiv));

	tmp1 = UART_ICR_PULSEDIV(PulseDiv);
    1b9a:	f001 0107 	and.w	r1, r1, #7
	tmp = UARTx->ICR & (~UART_ICR_PULSEDIV(7));
    1b9e:	f003 02c7 	and.w	r2, r3, #199	; 0xc7
	tmp |= tmp1 | UART_ICR_FIXPULSE_EN;
    1ba2:	ea42 03c1 	orr.w	r3, r2, r1, lsl #3
	UARTx->ICR = tmp & UART_ICR_BITMASK;
    1ba6:	f003 013f 	and.w	r1, r3, #63	; 0x3f
    1baa:	f041 0204 	orr.w	r2, r1, #4
    1bae:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    1bb2:	4770      	bx	lr

00001bb4 <UART_FullModemForcePinState>:
				- ACTIVE: Force the pin to active signal.
 * @return none
 **********************************************************************/
void UART_FullModemForcePinState(LPC_UART1_TypeDef *UARTx, UART_MODEM_PIN_Type Pin, \
							UART1_SignalState NewState)
{
    1bb4:	2901      	cmp	r1, #1
    1bb6:	bf9d      	ittte	ls
    1bb8:	4b06      	ldrls	r3, [pc, #24]	; (1bd4 <UART_FullModemForcePinState+0x20>)
    1bba:	1859      	addls	r1, r3, r1
    1bbc:	78cb      	ldrbls	r3, [r1, #3]
    1bbe:	2300      	movhi	r3, #0
		break;
	default:
		break;
	}

	if (NewState == ACTIVE){
    1bc0:	2a01      	cmp	r2, #1
		UARTx->MCR |= tmp;
    1bc2:	7c02      	ldrb	r2, [r0, #16]
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1bc4:	bf16      	itet	ne
    1bc6:	f022 020c 	bicne.w	r2, r2, #12
	default:
		break;
	}

	if (NewState == ACTIVE){
		UARTx->MCR |= tmp;
    1bca:	4313      	orreq	r3, r2
	} else {
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1bcc:	ea22 0303 	bicne.w	r3, r2, r3
    1bd0:	7403      	strb	r3, [r0, #16]
    1bd2:	4770      	bx	lr
    1bd4:	00005240 	.word	0x00005240

00001bd8 <UART_FullModemConfigMode>:

	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(Mode){
    1bd8:	2901      	cmp	r1, #1
    1bda:	d005      	beq.n	1be8 <UART_FullModemConfigMode+0x10>
    1bdc:	d306      	bcc.n	1bec <UART_FullModemConfigMode+0x14>
		break;
	case UART1_MODEM_MODE_AUTO_RTS:
		tmp = UART1_MCR_AUTO_RTS_EN;
		break;
	case UART1_MODEM_MODE_AUTO_CTS:
		tmp = UART1_MCR_AUTO_CTS_EN;
    1bde:	2902      	cmp	r1, #2
    1be0:	bf14      	ite	ne
    1be2:	2100      	movne	r1, #0
    1be4:	2180      	moveq	r1, #128	; 0x80
    1be6:	e002      	b.n	1bee <UART_FullModemConfigMode+0x16>
	switch(Mode){
	case UART1_MODEM_MODE_LOOPBACK:
		tmp = UART1_MCR_LOOPB_EN;
		break;
	case UART1_MODEM_MODE_AUTO_RTS:
		tmp = UART1_MCR_AUTO_RTS_EN;
    1be8:	2140      	movs	r1, #64	; 0x40
		break;
    1bea:	e000      	b.n	1bee <UART_FullModemConfigMode+0x16>
	CHECK_PARAM(PARAM_UART1_MODEM_MODE(Mode));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(Mode){
	case UART1_MODEM_MODE_LOOPBACK:
		tmp = UART1_MCR_LOOPB_EN;
    1bec:	2110      	movs	r1, #16
		break;
	}

	if (NewState == ENABLE)
	{
		UARTx->MCR |= tmp;
    1bee:	7c03      	ldrb	r3, [r0, #16]
		break;
	default:
		break;
	}

	if (NewState == ENABLE)
    1bf0:	2a01      	cmp	r2, #1
	{
		UARTx->MCR |= tmp;
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1bf2:	bf16      	itet	ne
    1bf4:	f023 030c 	bicne.w	r3, r3, #12
		break;
	}

	if (NewState == ENABLE)
	{
		UARTx->MCR |= tmp;
    1bf8:	4319      	orreq	r1, r3
	}
	else
	{
		UARTx->MCR &= (~tmp) & UART1_MCR_BITMASK;
    1bfa:	ea23 0101 	bicne.w	r1, r3, r1
    1bfe:	7401      	strb	r1, [r0, #16]
    1c00:	4770      	bx	lr

00001c02 <UART_FullModemGetStatus>:
 * 			used to check all flags.
 **********************************************************************/
uint8_t UART_FullModemGetStatus(LPC_UART1_TypeDef *UARTx)
{
	CHECK_PARAM(PARAM_UART1_MODEM(UARTx));
	return ((UARTx->MSR) & UART1_MSR_BITMASK);
    1c02:	7e00      	ldrb	r0, [r0, #24]
}
    1c04:	4770      	bx	lr

00001c06 <UART_RS485Config>:
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));

	tmp = 0;
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
    1c06:	78cb      	ldrb	r3, [r1, #3]
    1c08:	2b01      	cmp	r3, #1
    1c0a:	d10d      	bne.n	1c28 <UART_RS485Config+0x22>
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;

		// Set polar
		if (RS485ConfigStruct->DirCtrlPol_Level == SET)
    1c0c:	794a      	ldrb	r2, [r1, #5]

	tmp = 0;
	// If Auto Direction Control is enabled -  This function is used in Master mode
	if (RS485ConfigStruct->AutoDirCtrl_State == ENABLE)
	{
		tmp |= UART1_RS485CTRL_DCTRL_EN;
    1c0e:	2a01      	cmp	r2, #1
    1c10:	bf0c      	ite	eq
    1c12:	2330      	moveq	r3, #48	; 0x30
    1c14:	2310      	movne	r3, #16
		{
			tmp |= UART1_RS485CTRL_OINV_1;
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
    1c16:	790a      	ldrb	r2, [r1, #4]
    1c18:	2a01      	cmp	r2, #1
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    1c1a:	79ca      	ldrb	r2, [r1, #7]
		}

		// Set pin according to
		if (RS485ConfigStruct->DirCtrlPin == UART1_RS485_DIRCTRL_DTR)
		{
			tmp |= UART1_RS485CTRL_SEL_DTR;
    1c1c:	bf08      	it	eq
    1c1e:	f043 0308 	orreq.w	r3, r3, #8
		}

		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
    1c22:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
    1c26:	e000      	b.n	1c2a <UART_RS485Config+0x24>
	CHECK_PARAM(PARAM_UART_RS485_DIRCTRL_PIN(RS485ConfigStruct->DirCtrlPin));
	CHECK_PARAM(PARAM_UART1_RS485_CFG_MATCHADDRVALUE(RS485ConfigStruct->MatchAddrValue));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->NormalMultiDropMode_State));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(RS485ConfigStruct->Rx_State));

	tmp = 0;
    1c28:	2300      	movs	r3, #0
		// Fill delay time
		UARTx->RS485DLY = RS485ConfigStruct->DelayValue & UART1_RS485DLY_BITMASK;
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
    1c2a:	780a      	ldrb	r2, [r1, #0]
    1c2c:	2a01      	cmp	r2, #1
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    1c2e:	788a      	ldrb	r2, [r1, #2]
	}

	// MultiDrop mode is enable
	if (RS485ConfigStruct->NormalMultiDropMode_State == ENABLE)
	{
		tmp |= UART1_RS485CTRL_NMM_EN;
    1c30:	bf08      	it	eq
    1c32:	f043 0301 	orreq.w	r3, r3, #1
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
    1c36:	2a01      	cmp	r2, #1
    1c38:	d104      	bne.n	1c44 <UART_RS485Config+0x3e>
	{
		tmp |= UART1_RS485CTRL_AADEN;
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    1c3a:	798a      	ldrb	r2, [r1, #6]
	}

	// Auto Address Detect function
	if (RS485ConfigStruct->AutoAddrDetect_State == ENABLE)
	{
		tmp |= UART1_RS485CTRL_AADEN;
    1c3c:	f043 0304 	orr.w	r3, r3, #4
		// Fill Match Address
		UARTx->ADRMATCH = RS485ConfigStruct->MatchAddrValue & UART1_RS485ADRMATCH_BITMASK;
    1c40:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
	}


	// Receiver is disable
	if (RS485ConfigStruct->Rx_State == DISABLE)
    1c44:	7849      	ldrb	r1, [r1, #1]
    1c46:	b909      	cbnz	r1, 1c4c <UART_RS485Config+0x46>
	{
		tmp |= UART1_RS485CTRL_RX_DIS;
    1c48:	f043 0302 	orr.w	r3, r3, #2
	}

	// write back to RS485 control register
	UARTx->RS485CTRL = tmp & UART1_RS485CTRL_BITMASK;
    1c4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    1c50:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c

	// Enable Parity function and leave parity in stick '0' parity as default
	UARTx->LCR |= (UART_LCR_PARITY_F_0 | UART_LCR_PARITY_EN);
    1c54:	7b01      	ldrb	r1, [r0, #12]
    1c56:	f041 0338 	orr.w	r3, r1, #56	; 0x38
    1c5a:	7303      	strb	r3, [r0, #12]
    1c5c:	4770      	bx	lr

00001c5e <UART_RS485ReceiverCmd>:
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
	if (NewState == ENABLE){
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    1c5e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 * 							- DISABLE: Disable this function.
 * @return		None
 **********************************************************************/
void UART_RS485ReceiverCmd(LPC_UART1_TypeDef *UARTx, FunctionalState NewState)
{
	if (NewState == ENABLE){
    1c62:	2901      	cmp	r1, #1
		UARTx->RS485CTRL &= ~UART1_RS485CTRL_RX_DIS;
    1c64:	bf0c      	ite	eq
    1c66:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
	} else {
		UARTx->RS485CTRL |= UART1_RS485CTRL_RX_DIS;
    1c6a:	f043 0302 	orrne.w	r3, r3, #2
    1c6e:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    1c72:	4770      	bx	lr

00001c74 <UART_IntReceive>:
 * @brief 		UART receive function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntReceive(LPC_UART_TypeDef *UARTx)
{
    1c74:	b510      	push	{r4, lr}
    1c76:	4604      	mov	r4, r0
	uint8_t tmpc;

	while(1)
	{
		// Call UART read function in UART driver
		tmpc = UART_ReceiveByte(UARTx);
    1c78:	4620      	mov	r0, r4
    1c7a:	f7ff fe24 	bl	18c6 <UART_ReceiveByte>
		if (tmpc)
    1c7e:	4602      	mov	r2, r0
    1c80:	b180      	cbz	r0, 1ca4 <UART_IntReceive+0x30>
		{
			/* Check if buffer is more space
			 * If no more space, remaining character will be trimmed out
			 */
			if (!__BUF_IS_FULL(rb.rx_head,rb.rx_tail))
    1c82:	4b09      	ldr	r3, [pc, #36]	; (1ca8 <UART_IntReceive+0x34>)
    1c84:	68d8      	ldr	r0, [r3, #12]
    1c86:	6899      	ldr	r1, [r3, #8]
    1c88:	3101      	adds	r1, #1
    1c8a:	4041      	eors	r1, r0
    1c8c:	f011 0fff 	tst.w	r1, #255	; 0xff
    1c90:	d0f2      	beq.n	1c78 <UART_IntReceive+0x4>
			{
				rb.rx[rb.rx_head] = tmpc;
    1c92:	6898      	ldr	r0, [r3, #8]
    1c94:	1819      	adds	r1, r3, r0
    1c96:	f881 2110 	strb.w	r2, [r1, #272]	; 0x110
				__BUF_INCR(rb.rx_head);
    1c9a:	689a      	ldr	r2, [r3, #8]
    1c9c:	1c50      	adds	r0, r2, #1
    1c9e:	b2c1      	uxtb	r1, r0
    1ca0:	6099      	str	r1, [r3, #8]
    1ca2:	e7e9      	b.n	1c78 <UART_IntReceive+0x4>
    1ca4:	bd10      	pop	{r4, pc}
    1ca6:	bf00      	nop
    1ca8:	1000007c 	.word	0x1000007c

00001cac <UART_IntTransmit>:
 * @brief 		UART transmit function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntTransmit(LPC_UART_TypeDef *UARTx)
{
    1cac:	b570      	push	{r4, r5, r6, lr}
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar;

    // Disable THRE interrupt
    UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1cae:	2101      	movs	r1, #1
    1cb0:	2200      	movs	r2, #0
 * @brief 		UART transmit function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntTransmit(LPC_UART_TypeDef *UARTx)
{
    1cb2:	4604      	mov	r4, r0
	uint32_t bToSend, bSent, timeOut, fifo_cnt;
	uint8_t *pChar;

    // Disable THRE interrupt
    UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1cb4:	f7ff fe15 	bl	18e2 <UART_IntConfig>

	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
	 * of data or break whenever ring buffers are empty */
	/* Wait until THR empty */
    while (UART_CheckBusy(UARTx) == SET);
    1cb8:	4620      	mov	r0, r4
    1cba:	f7ff fe4c 	bl	1956 <UART_CheckBusy>
    1cbe:	2801      	cmp	r0, #1
    1cc0:	d0fa      	beq.n	1cb8 <UART_IntTransmit+0xc>

	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
    1cc2:	4b1a      	ldr	r3, [pc, #104]	; (1d2c <UART_IntTransmit+0x80>)
    1cc4:	681a      	ldr	r2, [r3, #0]
    1cc6:	6859      	ldr	r1, [r3, #4]
    1cc8:	ea81 0002 	eor.w	r0, r1, r2
    1ccc:	f010 0fff 	tst.w	r0, #255	; 0xff
    1cd0:	d00b      	beq.n	1cea <UART_IntTransmit+0x3e>
    {
        /* Move a piece of data into the transmit FIFO */
		// None blocking mode
		pChar = &rb.tx[rb.tx_tail];
    1cd2:	685a      	ldr	r2, [r3, #4]
    1cd4:	f04f 33ff 	mov.w	r3, #4294967295
		bSent = 0;
		while (bToSend)
		{
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE))
    1cd8:	7d25      	ldrb	r5, [r4, #20]
    1cda:	f005 0620 	and.w	r6, r5, #32
    1cde:	b2f1      	uxtb	r1, r6
    1ce0:	b911      	cbnz	r1, 1ce8 <UART_IntTransmit+0x3c>
			{
				if (timeOut == 0) break;
    1ce2:	b113      	cbz	r3, 1cea <UART_IntTransmit+0x3e>
				timeOut--;
    1ce4:	3b01      	subs	r3, #1
    1ce6:	e7f7      	b.n	1cd8 <UART_IntTransmit+0x2c>
			}
			// Time out!
			if(timeOut == 0) break;
    1ce8:	b9b3      	cbnz	r3, 1d18 <UART_IntTransmit+0x6c>
    	}
    }

    /* If there is no more data to send, disable the transmit
       interrupt - else enable it or keep it enabled */
	if (__BUF_IS_EMPTY(rb.tx_head, rb.tx_tail))
    1cea:	4810      	ldr	r0, [pc, #64]	; (1d2c <UART_IntTransmit+0x80>)
    1cec:	6805      	ldr	r5, [r0, #0]
    1cee:	6846      	ldr	r6, [r0, #4]
    1cf0:	406e      	eors	r6, r5
    1cf2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    1cf6:	4d0e      	ldr	r5, [pc, #56]	; (1d30 <UART_IntTransmit+0x84>)
    1cf8:	d106      	bne.n	1d08 <UART_IntTransmit+0x5c>
	{
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1cfa:	4620      	mov	r0, r4
    1cfc:	2101      	movs	r1, #1
    1cfe:	4632      	mov	r2, r6
    1d00:	f7ff fdef 	bl	18e2 <UART_IntConfig>
    	// Reset Tx Interrupt state
    	TxIntStat = RESET;
    1d04:	702e      	strb	r6, [r5, #0]
    1d06:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
      	// Set Tx Interrupt state
		TxIntStat = SET;
    1d08:	2101      	movs	r1, #1
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    1d0a:	4620      	mov	r0, r4
    1d0c:	460a      	mov	r2, r1
    	TxIntStat = RESET;
    }
    else
    {
      	// Set Tx Interrupt state
		TxIntStat = SET;
    1d0e:	7029      	strb	r1, [r5, #0]
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    }
}
    1d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    }
    else
    {
      	// Set Tx Interrupt state
		TxIntStat = SET;
    	UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    1d14:	f7ff bde5 	b.w	18e2 <UART_IntConfig>
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend)
			{
				UART_SendByte(UARTx, (*pChar++));
    1d18:	4b04      	ldr	r3, [pc, #16]	; (1d2c <UART_IntTransmit+0x80>)
    1d1a:	189a      	adds	r2, r3, r2
    1d1c:	7c10      	ldrb	r0, [r2, #16]
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
	}
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    1d1e:	7020      	strb	r0, [r4, #0]
		}

    	if(bSent)
    	{
    		/* Update transmit ring FIFO tail pointer */
    		__BUF_INCR(rb.tx_tail);
    1d20:	685d      	ldr	r5, [r3, #4]
    1d22:	1c6e      	adds	r6, r5, #1
    1d24:	b2f1      	uxtb	r1, r6
    1d26:	6059      	str	r1, [r3, #4]
    1d28:	e7cb      	b.n	1cc2 <UART_IntTransmit+0x16>
    1d2a:	bf00      	nop
    1d2c:	1000007c 	.word	0x1000007c
    1d30:	1000034c 	.word	0x1000034c

00001d34 <UART2_IRQHandler>:
 * @brief	UART2 interrupt handler sub-routine
 * @param	None
 * @return	None
 **********************************************************************/
void UART2_IRQHandler(void)
{
    1d34:	b510      	push	{r4, lr}
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    1d36:	4b0d      	ldr	r3, [pc, #52]	; (1d6c <UART2_IRQHandler+0x38>)
    1d38:	689c      	ldr	r4, [r3, #8]
	// Call Standard UART 2 interrupt handler
	uint32_t intsrc, tmp, tmp1;

	/* Determine the interrupt source */
	intsrc = UART_GetIntId(LPC_UART2);
	tmp = intsrc & UART_IIR_INTID_MASK;
    1d3a:	f004 040e 	and.w	r4, r4, #14

	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS)
    1d3e:	2c06      	cmp	r4, #6
    1d40:	d104      	bne.n	1d4c <UART2_IRQHandler+0x18>
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    1d42:	7d18      	ldrb	r0, [r3, #20]
		// Check line status
		tmp1 = UART_GetLineStatus(LPC_UART2);
		// Mask out the Receive Ready and Transmit Holding empty status
		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_BI | UART_LSR_RXFE);
		// If any error exist
		if (tmp1)
    1d44:	f010 0f9e 	tst.w	r0, #158	; 0x9e
    1d48:	d00e      	beq.n	1d68 <UART2_IRQHandler+0x34>
    1d4a:	e7fe      	b.n	1d4a <UART2_IRQHandler+0x16>
			}
		}
	}

	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI))
    1d4c:	2c04      	cmp	r4, #4
    1d4e:	d001      	beq.n	1d54 <UART2_IRQHandler+0x20>
    1d50:	2c0c      	cmp	r4, #12
    1d52:	d102      	bne.n	1d5a <UART2_IRQHandler+0x26>
	{
		UART_IntReceive(LPC_UART2);
    1d54:	4805      	ldr	r0, [pc, #20]	; (1d6c <UART2_IRQHandler+0x38>)
    1d56:	f7ff ff8d 	bl	1c74 <UART_IntReceive>
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
    1d5a:	2c02      	cmp	r4, #2
    1d5c:	d104      	bne.n	1d68 <UART2_IRQHandler+0x34>
	{
		UART_IntTransmit(LPC_UART2);
    1d5e:	4803      	ldr	r0, [pc, #12]	; (1d6c <UART2_IRQHandler+0x38>)
	}
}
    1d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
	{
		UART_IntTransmit(LPC_UART2);
    1d64:	f7ff bfa2 	b.w	1cac <UART_IntTransmit>
    1d68:	bd10      	pop	{r4, pc}
    1d6a:	bf00      	nop
    1d6c:	40098000 	.word	0x40098000

00001d70 <UART0_IRQHandler>:
 * @brief	UART0 interrupt handler sub-routine
 * @param	None
 * @return	None
 **********************************************************************/
void UART0_IRQHandler(void)
{
    1d70:	b510      	push	{r4, lr}
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
	CHECK_PARAM(PARAM_UARTx(UARTx));
	return (UARTx->IIR & 0x03CF);
    1d72:	4b0d      	ldr	r3, [pc, #52]	; (1da8 <UART0_IRQHandler+0x38>)
    1d74:	689c      	ldr	r4, [r3, #8]
	// Call Standard UART 0 interrupt handler
	uint32_t intsrc, tmp, tmp1;

	// Determine the interrupt source
	intsrc = UART_GetIntId(LPC_UART0);
	tmp = intsrc & UART_IIR_INTID_MASK;
    1d76:	f004 040e 	and.w	r4, r4, #14

	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS)
    1d7a:	2c06      	cmp	r4, #6
    1d7c:	d104      	bne.n	1d88 <UART0_IRQHandler+0x18>
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    1d7e:	7d18      	ldrb	r0, [r3, #20]
		// Check line status
		tmp1 = UART_GetLineStatus(LPC_UART0);
		// Mask out the Receive Ready and Transmit Holding empty status
		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_BI | UART_LSR_RXFE);
		// If any error exist
		if (tmp1)
    1d80:	f010 0f9e 	tst.w	r0, #158	; 0x9e
    1d84:	d00e      	beq.n	1da4 <UART0_IRQHandler+0x34>
    1d86:	e7fe      	b.n	1d86 <UART0_IRQHandler+0x16>
			}
		}
	}

	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI))
    1d88:	2c04      	cmp	r4, #4
    1d8a:	d001      	beq.n	1d90 <UART0_IRQHandler+0x20>
    1d8c:	2c0c      	cmp	r4, #12
    1d8e:	d102      	bne.n	1d96 <UART0_IRQHandler+0x26>
	{
		UART_IntReceive(LPC_UART0);
    1d90:	4805      	ldr	r0, [pc, #20]	; (1da8 <UART0_IRQHandler+0x38>)
    1d92:	f7ff ff6f 	bl	1c74 <UART_IntReceive>
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
    1d96:	2c02      	cmp	r4, #2
    1d98:	d104      	bne.n	1da4 <UART0_IRQHandler+0x34>
	{
		UART_IntTransmit(LPC_UART0);
    1d9a:	4803      	ldr	r0, [pc, #12]	; (1da8 <UART0_IRQHandler+0x38>)
	}
}
    1d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE)
	{
		UART_IntTransmit(LPC_UART0);
    1da0:	f7ff bf84 	b.w	1cac <UART_IntTransmit>
    1da4:	bd10      	pop	{r4, pc}
    1da6:	bf00      	nop
    1da8:	4000c000 	.word	0x4000c000

00001dac <UART_Send>:
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dae:	460e      	mov	r6, r1
    1db0:	4617      	mov	r7, r2
	uint32_t bytes = 0;

	/* Temporarily lock out UART transmit interrupts during this
	   read so the UART transmit interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1db2:	2101      	movs	r1, #1
    1db4:	2200      	movs	r2, #0
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    1db6:	4605      	mov	r5, r0
	uint32_t bytes = 0;

	/* Temporarily lock out UART transmit interrupts during this
	   read so the UART transmit interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);
    1db8:	f7ff fd93 	bl	18e2 <UART_IntConfig>
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
	uint8_t *data = (uint8_t *) txbuf;
	uint32_t bytes = 0;
    1dbc:	2400      	movs	r4, #0
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);

	/* Loop until transmit run buffer is full or until n_bytes
	   expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
    1dbe:	42bc      	cmp	r4, r7
    1dc0:	d106      	bne.n	1dd0 <UART_Send+0x24>
	 * Check if current Tx interrupt enable is reset,
	 * that means the Tx interrupt must be re-enabled
	 * due to call UART_IntTransmit() function to trigger
	 * this interrupt type
	 */
	if (TxIntStat == RESET)
    1dc2:	4b10      	ldr	r3, [pc, #64]	; (1e04 <UART_Send+0x58>)
    1dc4:	7819      	ldrb	r1, [r3, #0]
    1dc6:	b9a9      	cbnz	r1, 1df4 <UART_Send+0x48>
	{
		UART_IntTransmit(UARTx);
    1dc8:	4628      	mov	r0, r5
    1dca:	f7ff ff6f 	bl	1cac <UART_IntTransmit>
    1dce:	e016      	b.n	1dfe <UART_Send+0x52>
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_THRE, DISABLE);

	/* Loop until transmit run buffer is full or until n_bytes
	   expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
    1dd0:	4b0d      	ldr	r3, [pc, #52]	; (1e08 <UART_Send+0x5c>)
    1dd2:	6859      	ldr	r1, [r3, #4]
    1dd4:	681a      	ldr	r2, [r3, #0]
    1dd6:	1c50      	adds	r0, r2, #1
    1dd8:	4048      	eors	r0, r1
    1dda:	f010 0fff 	tst.w	r0, #255	; 0xff
    1dde:	d0f0      	beq.n	1dc2 <UART_Send+0x16>
	{
		/* Write data from buffer into ring buffer */
		rb.tx[rb.tx_head] = *data;
    1de0:	681a      	ldr	r2, [r3, #0]
    1de2:	5d30      	ldrb	r0, [r6, r4]
    1de4:	1899      	adds	r1, r3, r2
    1de6:	7408      	strb	r0, [r1, #16]
		data++;

		/* Increment head pointer */
		__BUF_INCR(rb.tx_head);
    1de8:	681a      	ldr	r2, [r3, #0]

		/* Increment data count and decrement buffer size count */
		bytes++;
    1dea:	3401      	adds	r4, #1
		/* Write data from buffer into ring buffer */
		rb.tx[rb.tx_head] = *data;
		data++;

		/* Increment head pointer */
		__BUF_INCR(rb.tx_head);
    1dec:	1c50      	adds	r0, r2, #1
    1dee:	b2c1      	uxtb	r1, r0
    1df0:	6019      	str	r1, [r3, #0]
    1df2:	e7e4      	b.n	1dbe <UART_Send+0x12>
	/**
	 * Otherwise, re-enables Tx Interrupt
	 */
	else
	{
		UART_IntConfig(UARTx, UART_INTCFG_THRE, ENABLE);
    1df4:	2101      	movs	r1, #1
    1df6:	4628      	mov	r0, r5
    1df8:	460a      	mov	r2, r1
    1dfa:	f7ff fd72 	bl	18e2 <UART_IntConfig>
	}

	return bytes;
}
    1dfe:	4620      	mov	r0, r4
    1e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e02:	bf00      	nop
    1e04:	1000034c 	.word	0x1000034c
    1e08:	1000007c 	.word	0x1000007c

00001e0c <printf>:
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
    1e0c:	b40e      	push	{r1, r2, r3}
    1e0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uchar hex[]= "0123456789ABCDEF";
    1e12:	4b86      	ldr	r3, [pc, #536]	; (202c <printf+0x220>)
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
    1e14:	b09c      	sub	sp, #112	; 0x70
    1e16:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    1e18:	4605      	mov	r5, r0
	uchar hex[]= "0123456789ABCDEF";
    1e1a:	aa03      	add	r2, sp, #12
    1e1c:	f103 0710 	add.w	r7, r3, #16
    1e20:	6818      	ldr	r0, [r3, #0]
    1e22:	6859      	ldr	r1, [r3, #4]
    1e24:	4616      	mov	r6, r2
    1e26:	c603      	stmia	r6!, {r0, r1}
    1e28:	3308      	adds	r3, #8
    1e2a:	42bb      	cmp	r3, r7
    1e2c:	4632      	mov	r2, r6
    1e2e:	d1f7      	bne.n	1e20 <printf+0x14>
    1e30:	7818      	ldrb	r0, [r3, #0]
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    1e32:	2100      	movs	r1, #0
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
    1e34:	7030      	strb	r0, [r6, #0]
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    1e36:	2228      	movs	r2, #40	; 0x28
    1e38:	a808      	add	r0, sp, #32
    1e3a:	f003 f949 	bl	50d0 <memset>
    1e3e:	210a      	movs	r1, #10
    1e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e44:	9109      	str	r1, [sp, #36]	; 0x24
    1e46:	2364      	movs	r3, #100	; 0x64
    1e48:	920b      	str	r2, [sp, #44]	; 0x2c
    1e4a:	4979      	ldr	r1, [pc, #484]	; (2030 <printf+0x224>)
    1e4c:	4a79      	ldr	r2, [pc, #484]	; (2034 <printf+0x228>)
    1e4e:	930a      	str	r3, [sp, #40]	; 0x28
    1e50:	f242 7010 	movw	r0, #10000	; 0x2710
    1e54:	4b78      	ldr	r3, [pc, #480]	; (2038 <printf+0x22c>)
    1e56:	2601      	movs	r6, #1
    1e58:	900c      	str	r0, [sp, #48]	; 0x30
    1e5a:	910d      	str	r1, [sp, #52]	; 0x34
    1e5c:	920f      	str	r2, [sp, #60]	; 0x3c
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    1e5e:	2100      	movs	r1, #0
    1e60:	2228      	movs	r2, #40	; 0x28
    1e62:	a812      	add	r0, sp, #72	; 0x48
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
    1e64:	930e      	str	r3, [sp, #56]	; 0x38
    1e66:	9608      	str	r6, [sp, #32]
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    1e68:	f003 f932 	bl	50d0 <memset>
    1e6c:	2010      	movs	r0, #16
    1e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
    1e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1e76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1e7a:	9013      	str	r0, [sp, #76]	; 0x4c
    1e7c:	9114      	str	r1, [sp, #80]	; 0x50
    1e7e:	9315      	str	r3, [sp, #84]	; 0x54
    1e80:	9216      	str	r2, [sp, #88]	; 0x58
    1e82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1e86:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    1e8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	schar *ptr;
#ifdef RTC_MODE
	RTC_TIME_Type FullTime;
#endif
	va_list ap;
	va_start(ap, format);
    1e8e:	aa24      	add	r2, sp, #144	; 0x90
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
	uchar hex[]= "0123456789ABCDEF";
	unsigned int width_dec[10] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000};
	unsigned int width_hex[10] = { 0x1, 0x10, 0x100, 0x1000, 0x10000, 0x100000, 0x1000000, 0x10000000};
    1e90:	9612      	str	r6, [sp, #72]	; 0x48
    1e92:	9017      	str	r0, [sp, #92]	; 0x5c
    1e94:	9118      	str	r1, [sp, #96]	; 0x60
    1e96:	9319      	str	r3, [sp, #100]	; 0x64
	schar *ptr;
#ifdef RTC_MODE
	RTC_TIME_Type FullTime;
#endif
	va_list ap;
	va_start(ap, format);
    1e98:	9202      	str	r2, [sp, #8]

	for(;;)
	{
		while((format_flag = *format++) != '%')      /* until full format string read */
    1e9a:	7820      	ldrb	r0, [r4, #0]
    1e9c:	2825      	cmp	r0, #37	; 0x25
    1e9e:	f88d 0002 	strb.w	r0, [sp, #2]
    1ea2:	d00c      	beq.n	1ebe <printf+0xb2>
		{
			if(!format_flag)
    1ea4:	2800      	cmp	r0, #0
    1ea6:	f000 80bb 	beq.w	2020 <printf+0x214>
	va_list ap;
	va_start(ap, format);

	for(;;)
	{
		while((format_flag = *format++) != '%')      /* until full format string read */
    1eaa:	1c67      	adds	r7, r4, #1
		{
			if(!format_flag)
			{                        /* until '%' or '\0' */
				return (0);
			}
			UART_Send(UARTx,&format_flag,1,BLOCKING);
    1eac:	4628      	mov	r0, r5
    1eae:	f10d 0102 	add.w	r1, sp, #2
    1eb2:	2201      	movs	r2, #1
    1eb4:	2302      	movs	r3, #2
    1eb6:	f7ff ff79 	bl	1dac <UART_Send>
 * @param[in]   ...  <multiple argument>
 *
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 printf(LPC_UART_TypeDef *UARTx, const char *format, ...)
{
    1eba:	463c      	mov	r4, r7
    1ebc:	e7ed      	b.n	1e9a <printf+0x8e>
				return (0);
			}
			UART_Send(UARTx,&format_flag,1,BLOCKING);
		}

		switch(format_flag = *format++)
    1ebe:	7860      	ldrb	r0, [r4, #1]
    1ec0:	1ca7      	adds	r7, r4, #2
    1ec2:	b241      	sxtb	r1, r0
    1ec4:	2964      	cmp	r1, #100	; 0x64
    1ec6:	f88d 0002 	strb.w	r0, [sp, #2]
    1eca:	d054      	beq.n	1f76 <printf+0x16a>
    1ecc:	dc0c      	bgt.n	1ee8 <printf+0xdc>
    1ece:	2962      	cmp	r1, #98	; 0x62
    1ed0:	d015      	beq.n	1efe <printf+0xf2>
    1ed2:	2963      	cmp	r1, #99	; 0x63
    1ed4:	d1ea      	bne.n	1eac <printf+0xa0>
		{
			case 'c':
				format_flag = va_arg(ap, int);
    1ed6:	9c02      	ldr	r4, [sp, #8]
    1ed8:	a91c      	add	r1, sp, #112	; 0x70
    1eda:	6822      	ldr	r2, [r4, #0]
    1edc:	1d23      	adds	r3, r4, #4
    1ede:	9302      	str	r3, [sp, #8]
    1ee0:	f801 2d6e 	strb.w	r2, [r1, #-110]!
				UART_Send(UARTx,&format_flag,1,BLOCKING);
    1ee4:	4628      	mov	r0, r5
    1ee6:	e7e4      	b.n	1eb2 <printf+0xa6>
				return (0);
			}
			UART_Send(UARTx,&format_flag,1,BLOCKING);
		}

		switch(format_flag = *format++)
    1ee8:	2975      	cmp	r1, #117	; 0x75
    1eea:	d02c      	beq.n	1f46 <printf+0x13a>
    1eec:	2978      	cmp	r1, #120	; 0x78
    1eee:	d064      	beq.n	1fba <printf+0x1ae>
    1ef0:	2973      	cmp	r1, #115	; 0x73
    1ef2:	d1db      	bne.n	1eac <printf+0xa0>
				UART_Send(UARTx,&(hex[(uint16)format_flag & 0x0F]),1,BLOCKING);

				continue;

			case 's':
				ptr = va_arg(ap, schar *);
    1ef4:	9902      	ldr	r1, [sp, #8]
    1ef6:	1d0a      	adds	r2, r1, #4
    1ef8:	9202      	str	r2, [sp, #8]
    1efa:	680c      	ldr	r4, [r1, #0]
				while(*ptr)
    1efc:	e017      	b.n	1f2e <printf+0x122>
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1efe:	9802      	ldr	r0, [sp, #8]
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1f00:	aa03      	add	r2, sp, #12
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1f02:	7804      	ldrb	r4, [r0, #0]
    1f04:	1d01      	adds	r1, r0, #4
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1f06:	b263      	sxtb	r3, r4
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1f08:	9102      	str	r1, [sp, #8]
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1f0a:	f3c3 110b 	ubfx	r1, r3, #4, #12
    1f0e:	1851      	adds	r1, r2, r1
    1f10:	2302      	movs	r3, #2
    1f12:	4628      	mov	r0, r5
    1f14:	2201      	movs	r2, #1
				UART_Send(UARTx,&format_flag,1,BLOCKING);

        		continue;

			case 'b':
				format_flag = va_arg(ap,int);
    1f16:	f88d 4002 	strb.w	r4, [sp, #2]
				UART_Send(UARTx,&(hex[(uint16)format_flag >> 4]),1,BLOCKING);
    1f1a:	f7ff ff47 	bl	1dac <UART_Send>
				UART_Send(UARTx,&(hex[(uint16)format_flag & 0x0F]),1,BLOCKING);
    1f1e:	f89d 0002 	ldrb.w	r0, [sp, #2]
    1f22:	ab03      	add	r3, sp, #12
    1f24:	f000 040f 	and.w	r4, r0, #15
    1f28:	1919      	adds	r1, r3, r4
    1f2a:	4628      	mov	r0, r5
    1f2c:	e7c1      	b.n	1eb2 <printf+0xa6>
    1f2e:	4621      	mov	r1, r4

				continue;

			case 's':
				ptr = va_arg(ap, schar *);
				while(*ptr)
    1f30:	f991 0000 	ldrsb.w	r0, [r1]
    1f34:	3401      	adds	r4, #1
    1f36:	2800      	cmp	r0, #0
    1f38:	d0bf      	beq.n	1eba <printf+0xae>
				{
					UART_Send(UARTx,&(*ptr++),1,BLOCKING);
    1f3a:	4628      	mov	r0, r5
    1f3c:	2201      	movs	r2, #1
    1f3e:	2302      	movs	r3, #2
    1f40:	f7ff ff34 	bl	1dac <UART_Send>
    1f44:	e7f3      	b.n	1f2e <printf+0x122>
				continue;
#endif
			case 'u':
				base = 16;
				div_val = 0x100000;
				u_val = va_arg(ap, uint32_t);
    1f46:	9b02      	ldr	r3, [sp, #8]
    1f48:	2606      	movs	r6, #6
    1f4a:	1d19      	adds	r1, r3, #4
    1f4c:	f8d3 8000 	ldr.w	r8, [r3]
    1f50:	9102      	str	r1, [sp, #8]

				continue;
#endif
			case 'u':
				base = 16;
				div_val = 0x100000;
    1f52:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
				u_val = va_arg(ap, uint32_t);
				do
				{
					UART_Send(UARTx,&(hex[u_val/div_val]),1,BLOCKING);
    1f56:	fbb8 f9f4 	udiv	r9, r8, r4
    1f5a:	aa03      	add	r2, sp, #12
    1f5c:	eb02 0109 	add.w	r1, r2, r9
    1f60:	2302      	movs	r3, #2
    1f62:	2201      	movs	r2, #1
    1f64:	4628      	mov	r0, r5
    1f66:	f7ff ff21 	bl	1dac <UART_Send>
					u_val %= div_val;
    1f6a:	fb04 8819 	mls	r8, r4, r9, r8
					div_val /= base;
    1f6e:	0924      	lsrs	r4, r4, #4
				}while(div_val);
    1f70:	3e01      	subs	r6, #1
    1f72:	d1f0      	bne.n	1f56 <printf+0x14a>
    1f74:	e7a1      	b.n	1eba <printf+0xae>
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    1f76:	78e0      	ldrb	r0, [r4, #3]

				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
    1f78:	78a7      	ldrb	r7, [r4, #2]
				format_flag = ( *format++ ) - '1';
    1f7a:	3831      	subs	r0, #49	; 0x31
    1f7c:	b2c6      	uxtb	r6, r0
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);
    1f7e:	9802      	ldr	r0, [sp, #8]

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1f80:	b273      	sxtb	r3, r6
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    1f82:	f88d 6002 	strb.w	r6, [sp, #2]
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);
    1f86:	1d06      	adds	r6, r0, #4
    1f88:	9602      	str	r6, [sp, #8]
    1f8a:	6806      	ldr	r6, [r0, #0]

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1f8c:	a91c      	add	r1, sp, #112	; 0x70

				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
    1f8e:	f88d 7003 	strb.w	r7, [sp, #3]
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1f92:	eb01 0283 	add.w	r2, r1, r3, lsl #2
				continue;

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
    1f96:	1d27      	adds	r7, r4, #4
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
    1f98:	2e00      	cmp	r6, #0

			case 'd':
				base = 10;
				fill_char = *format++;
				format_flag = ( *format++ ) - '1';
				div_val = width_dec[format_flag];
    1f9a:	f852 4c50 	ldr.w	r4, [r2, #-80]
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
    1f9e:	da09      	bge.n	1fb4 <printf+0x1a8>
				{
					u_val = - u_val;    /* applied to unsigned type, result still unsigned */
					temp = '-';
    1fa0:	232d      	movs	r3, #45	; 0x2d
    1fa2:	a91c      	add	r1, sp, #112	; 0x70
    1fa4:	f841 3d6c 	str.w	r3, [r1, #-108]!
				    UART_Send(UARTx,&temp,1,BLOCKING);
    1fa8:	4628      	mov	r0, r5
    1faa:	2201      	movs	r2, #1
    1fac:	2302      	movs	r3, #2
				div_val = width_dec[format_flag];
				u_val = va_arg(ap,int);

				if(((int)u_val) < 0)
				{
					u_val = - u_val;    /* applied to unsigned type, result still unsigned */
    1fae:	4276      	negs	r6, r6
					temp = '-';
				    UART_Send(UARTx,&temp,1,BLOCKING);
    1fb0:	f7ff fefc 	bl	1dac <UART_Send>
				}while(div_val);

				continue;

			case 'd':
				base = 10;
    1fb4:	f04f 080a 	mov.w	r8, #10
    1fb8:	e020      	b.n	1ffc <printf+0x1f0>
				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
    1fba:	78e6      	ldrb	r6, [r4, #3]

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
    1fbc:	78a7      	ldrb	r7, [r4, #2]
				format_flag = (*format++) - '1';
    1fbe:	3e31      	subs	r6, #49	; 0x31
    1fc0:	b2f3      	uxtb	r3, r6
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);
    1fc2:	9802      	ldr	r0, [sp, #8]

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
    1fc4:	b259      	sxtb	r1, r3
    1fc6:	aa1c      	add	r2, sp, #112	; 0x70
				u_val = va_arg(ap, int);
    1fc8:	1d06      	adds	r6, r0, #4

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
    1fca:	f88d 7003 	strb.w	r7, [sp, #3]
				format_flag = (*format++) - '1';
    1fce:	1d27      	adds	r7, r4, #4
				div_val = width_hex[format_flag];
    1fd0:	eb02 0481 	add.w	r4, r2, r1, lsl #2
				u_val = va_arg(ap, int);
    1fd4:	9602      	str	r6, [sp, #8]
				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
				fill_char = *format++;
				format_flag = (*format++) - '1';
    1fd6:	f88d 3002 	strb.w	r3, [sp, #2]
				div_val = width_hex[format_flag];
    1fda:	f854 4c28 	ldr.w	r4, [r4, #-40]
				u_val = va_arg(ap, int);
    1fde:	6806      	ldr	r6, [r0, #0]
				}

				goto  CONVERSION_LOOP;

			case 'x':
				base = 16;
    1fe0:	f04f 0810 	mov.w	r8, #16
    1fe4:	e00a      	b.n	1ffc <printf+0x1f0>
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
    1fe6:	42b4      	cmp	r4, r6
    1fe8:	d90a      	bls.n	2000 <printf+0x1f4>
				{
					div_val /= base;
					UART_Send(UARTx,&fill_char,1,BLOCKING);
    1fea:	4628      	mov	r0, r5
    1fec:	f10d 0103 	add.w	r1, sp, #3
    1ff0:	2201      	movs	r2, #1
    1ff2:	2302      	movs	r3, #2
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
				{
					div_val /= base;
    1ff4:	fbb4 f4f8 	udiv	r4, r4, r8
					UART_Send(UARTx,&fill_char,1,BLOCKING);
    1ff8:	f7ff fed8 	bl	1dac <UART_Send>
				format_flag = (*format++) - '1';
				div_val = width_hex[format_flag];
				u_val = va_arg(ap, int);

				CONVERSION_LOOP:
				while(div_val > 1 && div_val > u_val)
    1ffc:	2c01      	cmp	r4, #1
    1ffe:	d8f2      	bhi.n	1fe6 <printf+0x1da>
					UART_Send(UARTx,&fill_char,1,BLOCKING);
				}

				do
				{
					UART_Send(UARTx,&(hex[u_val/div_val]),1,BLOCKING);
    2000:	fbb6 f9f4 	udiv	r9, r6, r4
    2004:	a903      	add	r1, sp, #12
    2006:	4628      	mov	r0, r5
    2008:	4449      	add	r1, r9
    200a:	2201      	movs	r2, #1
    200c:	2302      	movs	r3, #2
    200e:	f7ff fecd 	bl	1dac <UART_Send>
					u_val %= div_val;
    2012:	fb04 6619 	mls	r6, r4, r9, r6
					div_val /= base;
    2016:	fbb4 f4f8 	udiv	r4, r4, r8
				}while(div_val);
    201a:	2c00      	cmp	r4, #0
    201c:	d1f0      	bne.n	2000 <printf+0x1f4>
    201e:	e74c      	b.n	1eba <printf+0xae>
		}/* end of switch statement */
	}
	return(0);
}
    2020:	b01c      	add	sp, #112	; 0x70
    2022:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2026:	b003      	add	sp, #12
    2028:	4770      	bx	lr
    202a:	bf00      	nop
    202c:	00005245 	.word	0x00005245
    2030:	000186a0 	.word	0x000186a0
    2034:	00989680 	.word	0x00989680
    2038:	000f4240 	.word	0x000f4240

0000203c <UART_RS485SendSlvAddr>:
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    203c:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    203e:	7b05      	ldrb	r5, [r0, #12]
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    2040:	ab02      	add	r3, sp, #8
    2042:	f803 1d01 	strb.w	r1, [r3, #-1]!
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
		tmp &= ~(UART_LCR_PARITY_EVEN);
    2046:	f005 02ef 	and.w	r2, r5, #239	; 0xef
		UARTx->LCR = tmp;
    204a:	7302      	strb	r2, [r0, #12]
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    204c:	4619      	mov	r1, r3
    204e:	2201      	movs	r2, #1
    2050:	2302      	movs	r3, #2
 * @param[in]	UARTx	LPC_UART1 (only)
 * @param[in]	SlvAddr Slave Address.
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
    2052:	4604      	mov	r4, r0

	if (ParityStick){
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
		tmp &= ~(UART_LCR_PARITY_EVEN);
		UARTx->LCR = tmp;
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    2054:	f7ff feaa 	bl	1dac <UART_Send>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    2058:	7d20      	ldrb	r0, [r4, #20]
    205a:	f000 0140 	and.w	r1, r0, #64	; 0x40
    205e:	b2cb      	uxtb	r3, r1
    2060:	2b00      	cmp	r3, #0
    2062:	d0f9      	beq.n	2058 <UART_RS485SendSlvAddr+0x1c>
		UARTx->LCR = save;
    2064:	7325      	strb	r5, [r4, #12]
 * @return		None
 **********************************************************************/
void UART_RS485SendSlvAddr(LPC_UART1_TypeDef *UARTx, uint8_t SlvAddr)
{
	UART_RS485Send(UARTx, &SlvAddr, 1, 1);
}
    2066:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00002068 <UART_RS485Send>:
 * @param[in]	ParityStick	Parity Stick value, should be 0 or 1.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485Send(LPC_UART1_TypeDef *UARTx, uint8_t *pDatFrm, \
					uint32_t size, uint8_t ParityStick)
{
    2068:	b538      	push	{r3, r4, r5, lr}
    206a:	4604      	mov	r4, r0
	uint8_t tmp, save;
	uint32_t cnt;

	if (ParityStick){
    206c:	b173      	cbz	r3, 208c <UART_RS485Send+0x24>
		save = tmp = UARTx->LCR & UART_LCR_BITMASK;
    206e:	7b05      	ldrb	r5, [r0, #12]
		tmp &= ~(UART_LCR_PARITY_EVEN);
    2070:	f005 03ef 	and.w	r3, r5, #239	; 0xef
		UARTx->LCR = tmp;
    2074:	7303      	strb	r3, [r0, #12]
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    2076:	2302      	movs	r3, #2
    2078:	f7ff fe98 	bl	1dac <UART_Send>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    207c:	7d21      	ldrb	r1, [r4, #20]
    207e:	f001 0240 	and.w	r2, r1, #64	; 0x40
    2082:	b2d3      	uxtb	r3, r2
    2084:	2b00      	cmp	r3, #0
    2086:	d0f9      	beq.n	207c <UART_RS485Send+0x14>
		UARTx->LCR = save;
    2088:	7325      	strb	r5, [r4, #12]
    208a:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		cnt = UART_Send((LPC_UART_TypeDef *)UARTx, pDatFrm, size, BLOCKING);
    208c:	2302      	movs	r3, #2
    208e:	f7ff fe8d 	bl	1dac <UART_Send>
		while (!(UARTx->LSR & UART_LSR_TEMT));
    2092:	7d23      	ldrb	r3, [r4, #20]
    2094:	f003 0140 	and.w	r1, r3, #64	; 0x40
    2098:	b2ca      	uxtb	r2, r1
    209a:	2a00      	cmp	r2, #0
    209c:	d0f9      	beq.n	2092 <UART_RS485Send+0x2a>
	}
	return cnt;
}
    209e:	bd38      	pop	{r3, r4, r5, pc}

000020a0 <UART_RS485SendData>:
 * @param[in]	size Size of data frame to be sent.
 * @return		None
 **********************************************************************/
uint32_t UART_RS485SendData(LPC_UART1_TypeDef *UARTx, uint8_t *pData, uint32_t size)
{
	return (UART_RS485Send(UARTx, pData, size, 0));
    20a0:	2300      	movs	r3, #0
    20a2:	f7ff bfe1 	b.w	2068 <UART_RS485Send>

000020a6 <UART_Receive>:
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    20a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20a8:	460e      	mov	r6, r1
	uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);
    20aa:	2100      	movs	r1, #0
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    20ac:	4617      	mov	r7, r2
	uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);
    20ae:	460a      	mov	r2, r1
 *
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    20b0:	4605      	mov	r5, r0
	uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);
    20b2:	f7ff fc16 	bl	18e2 <UART_IntConfig>
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
	uint8_t *data = (uint8_t *) rxbuf;
	uint32_t bytes = 0;
    20b6:	2400      	movs	r4, #0
	   with the index values */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, DISABLE);

	/* Loop until receive buffer ring is empty or
		until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
    20b8:	42bc      	cmp	r4, r7
    20ba:	d012      	beq.n	20e2 <UART_Receive+0x3c>
    20bc:	4b0c      	ldr	r3, [pc, #48]	; (20f0 <UART_Receive+0x4a>)
    20be:	689a      	ldr	r2, [r3, #8]
    20c0:	68d9      	ldr	r1, [r3, #12]
    20c2:	ea81 0002 	eor.w	r0, r1, r2
    20c6:	f010 0fff 	tst.w	r0, #255	; 0xff
    20ca:	d00a      	beq.n	20e2 <UART_Receive+0x3c>
	{
		/* Read data from ring buffer into user buffer */
		*data = rb.rx[rb.rx_tail];
    20cc:	68da      	ldr	r2, [r3, #12]
    20ce:	1899      	adds	r1, r3, r2
    20d0:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    20d4:	5530      	strb	r0, [r6, r4]
		data++;

		/* Update tail pointer */
		__BUF_INCR(rb.rx_tail);
    20d6:	68da      	ldr	r2, [r3, #12]

		/* Increment data count and decrement buffer size count */
		bytes++;
    20d8:	3401      	adds	r4, #1
		/* Read data from ring buffer into user buffer */
		*data = rb.rx[rb.rx_tail];
		data++;

		/* Update tail pointer */
		__BUF_INCR(rb.rx_tail);
    20da:	1c51      	adds	r1, r2, #1
    20dc:	b2c8      	uxtb	r0, r1
    20de:	60d8      	str	r0, [r3, #12]
    20e0:	e7ea      	b.n	20b8 <UART_Receive+0x12>
		bytes++;
		buflen--;
	}

	/* Re-enable UART interrupts */
	UART_IntConfig(UARTx, UART_INTCFG_RBR, ENABLE);
    20e2:	4628      	mov	r0, r5
    20e4:	2100      	movs	r1, #0
    20e6:	2201      	movs	r2, #1
    20e8:	f7ff fbfb 	bl	18e2 <UART_IntConfig>

    return bytes;
}
    20ec:	4620      	mov	r0, r4
    20ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20f0:	1000007c 	.word	0x1000007c

000020f4 <getche>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		return with valid character or nothing
 **********************************************************************/
int16 getche(LPC_UART_TypeDef *UARTx)
{
    20f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    20f6:	4605      	mov	r5, r0
	uint8_t key[1];
	uint32_t idx, len;
	while(1)
	{
	    if(UARTx == LPC_UART0)
    20f8:	4b1a      	ldr	r3, [pc, #104]	; (2164 <getche+0x70>)
    20fa:	429d      	cmp	r5, r3
    20fc:	d121      	bne.n	2142 <getche+0x4e>
	    {
		    len = UART_Receive(UARTx, key, 1, BLOCKING);
    20fe:	4628      	mov	r0, r5
    2100:	a901      	add	r1, sp, #4
    2102:	2201      	movs	r2, #1
    2104:	2302      	movs	r3, #2
    2106:	f7ff ffce 	bl	20a6 <UART_Receive>
		    /* Got some data */
		    idx = 0;
    210a:	2400      	movs	r4, #0
	uint32_t idx, len;
	while(1)
	{
	    if(UARTx == LPC_UART0)
	    {
		    len = UART_Receive(UARTx, key, 1, BLOCKING);
    210c:	4606      	mov	r6, r0
		    /* Got some data */
		    idx = 0;
		    while (idx < len)
    210e:	42b4      	cmp	r4, r6
    2110:	d0f2      	beq.n	20f8 <getche+0x4>
		    {
		        if ( key[idx] == In_CR )
    2112:	a901      	add	r1, sp, #4
    2114:	5c63      	ldrb	r3, [r4, r1]
    2116:	2b0d      	cmp	r3, #13
    2118:	d021      	beq.n	215e <getche+0x6a>
	            {
			        return(key[idx]);
	            }
	            else if ( key[idx] == In_DELETE || key[idx] == In_BACKSPACE )
    211a:	2b7f      	cmp	r3, #127	; 0x7f
    211c:	d01f      	beq.n	215e <getche+0x6a>
    211e:	2b08      	cmp	r3, #8
    2120:	d01d      	beq.n	215e <getche+0x6a>
	            {
	    	        return(key[idx]);
	            }
	            else if ( key[idx] == In_ESC )
    2122:	2b1b      	cmp	r3, #27
    2124:	d103      	bne.n	212e <getche+0x3a>
	            {
	    	        EscFlag = 1;
    2126:	4a10      	ldr	r2, [pc, #64]	; (2168 <getche+0x74>)
    2128:	2001      	movs	r0, #1
    212a:	8010      	strh	r0, [r2, #0]
    212c:	e017      	b.n	215e <getche+0x6a>
	    	        return ( In_ESC );
	            }
	            else if ( key[idx] >= ' ' )
    212e:	2b1f      	cmp	r3, #31
    2130:	d815      	bhi.n	215e <getche+0x6a>
	            {
	    	        return (key[idx]);
	            }
	            else
	            {
	    	        UART_Send(UARTx,&key[idx],1,BLOCKING);
    2132:	1909      	adds	r1, r1, r4
    2134:	480b      	ldr	r0, [pc, #44]	; (2164 <getche+0x70>)
    2136:	2201      	movs	r2, #1
    2138:	2302      	movs	r3, #2
    213a:	f7ff fe37 	bl	1dac <UART_Send>
	            }
		        idx++;
    213e:	3401      	adds	r4, #1
    2140:	e7e5      	b.n	210e <getche+0x1a>
		    }
	    }
	    else if(UARTx == LPC_UART2)
    2142:	480a      	ldr	r0, [pc, #40]	; (216c <getche+0x78>)
    2144:	4285      	cmp	r5, r0
    2146:	d1d7      	bne.n	20f8 <getche+0x4>
	    {
		    len = UART_Receive(UARTx, key, 1, BLOCKING);
    2148:	4628      	mov	r0, r5
    214a:	a901      	add	r1, sp, #4
    214c:	2201      	movs	r2, #1
    214e:	2302      	movs	r3, #2
    2150:	f7ff ffa9 	bl	20a6 <UART_Receive>
		    /* Got some data */
		    idx = 0;
		    while (idx < len)
    2154:	2800      	cmp	r0, #0
    2156:	d0cf      	beq.n	20f8 <getche+0x4>
		    {
		    	return(key[idx]);
    2158:	f89d 0004 	ldrb.w	r0, [sp, #4]
    215c:	e000      	b.n	2160 <getche+0x6c>
		    idx = 0;
		    while (idx < len)
		    {
		        if ( key[idx] == In_CR )
	            {
			        return(key[idx]);
    215e:	4618      	mov	r0, r3
		    	return(key[idx]);
		    }
	    }
	}
    return(0);
}
    2160:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    2162:	bf00      	nop
    2164:	4000c000 	.word	0x4000c000
    2168:	10000078 	.word	0x10000078
    216c:	40098000 	.word	0x40098000

00002170 <get_line>:
 * @param[out]	s[] Pointer to Received buffer
 * @param[in]   lim Length of Received buffer
 * @return 		return character count
 **********************************************************************/
uchar get_line(LPC_UART_TypeDef *UARTx, schar s[], uchar lim)
{
    2170:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	schar kb;                 /* input character */

	uchar pointer=0;          /* Pointer in buffer */
	uchar count=0;            /* character count */
    2174:	2500      	movs	r5, #0
 * @param[out]	s[] Pointer to Received buffer
 * @param[in]   lim Length of Received buffer
 * @return 		return character count
 **********************************************************************/
uchar get_line(LPC_UART_TypeDef *UARTx, schar s[], uchar lim)
{
    2176:	4606      	mov	r6, r0
    2178:	4688      	mov	r8, r1
    217a:	4691      	mov	r9, r2
	schar kb;                 /* input character */

	uchar pointer=0;          /* Pointer in buffer */
    217c:	462c      	mov	r4, r5
	uchar count=0;            /* character count */
    uint8_t temp;

	while(1)
	{
		kb = getche(UARTx);
    217e:	4630      	mov	r0, r6
    2180:	f7ff ffb8 	bl	20f4 <getche>
    2184:	b2c2      	uxtb	r2, r0

		if (kb == In_ESC)                /* if ESCAPE pressed then exit */
    2186:	b253      	sxtb	r3, r2
    2188:	2b1b      	cmp	r3, #27
	uchar count=0;            /* character count */
    uint8_t temp;

	while(1)
	{
		kb = getche(UARTx);
    218a:	f88d 2006 	strb.w	r2, [sp, #6]

		if (kb == In_ESC)                /* if ESCAPE pressed then exit */
    218e:	d101      	bne.n	2194 <get_line+0x24>
		{
			return (kb);
    2190:	4615      	mov	r5, r2
    2192:	e043      	b.n	221c <get_line+0xac>
		}

		else if (kb == In_CR)            /* CARRIAGE return ? */
    2194:	2b0d      	cmp	r3, #13
    2196:	d103      	bne.n	21a0 <get_line+0x30>
		{
			s[pointer] = '\0';             /* put null char on last position */
    2198:	2000      	movs	r0, #0
    219a:	f808 0004 	strb.w	r0, [r8, r4]
    219e:	e03d      	b.n	221c <get_line+0xac>
			break;                         /* yes, exit from this loop */
		}

		else if(kb == In_DELETE || kb == In_BACKSPACE)
    21a0:	2b7f      	cmp	r3, #127	; 0x7f
    21a2:	d001      	beq.n	21a8 <get_line+0x38>
    21a4:	2b08      	cmp	r3, #8
    21a6:	d123      	bne.n	21f0 <get_line+0x80>
		{
			if(pointer==0)                 /* any characters entered */
    21a8:	2c00      	cmp	r4, #0
    21aa:	d0e8      	beq.n	217e <get_line+0xe>
			{
				continue;                    /* no, so get another character */
			}

			temp = Out_BACKSPACE;
    21ac:	f04f 0a08 	mov.w	sl, #8
    21b0:	eb0d 070a 	add.w	r7, sp, sl
    21b4:	f807 ad01 	strb.w	sl, [r7, #-1]!
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one position */
    21b8:	4639      	mov	r1, r7
    21ba:	2201      	movs	r2, #1
    21bc:	2302      	movs	r3, #2
    21be:	4630      	mov	r0, r6
    21c0:	f7ff fdf4 	bl	1dac <UART_Send>
			temp = Out_SPACE;
    21c4:	2120      	movs	r1, #32
    21c6:	f88d 1007 	strb.w	r1, [sp, #7]
			UART_Send(UARTx,&temp,1,BLOCKING);   /* erase char */
    21ca:	2201      	movs	r2, #1
    21cc:	4639      	mov	r1, r7
    21ce:	2302      	movs	r3, #2
    21d0:	4630      	mov	r0, r6
    21d2:	f7ff fdeb 	bl	1dac <UART_Send>
			temp = Out_BACKSPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one more position */
    21d6:	2201      	movs	r2, #1
    21d8:	2302      	movs	r3, #2
    21da:	4630      	mov	r0, r6
    21dc:	4639      	mov	r1, r7

			temp = Out_BACKSPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one position */
			temp = Out_SPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* erase char */
			temp = Out_BACKSPACE;
    21de:	f88d a007 	strb.w	sl, [sp, #7]
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one more position */
    21e2:	f7ff fde3 	bl	1dac <UART_Send>

			pointer--;                     /* decrement pointer */
    21e6:	1e62      	subs	r2, r4, #1
			count--;                       /* decrement character count */
    21e8:	1e6b      	subs	r3, r5, #1
			temp = Out_SPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* erase char */
			temp = Out_BACKSPACE;
			UART_Send(UARTx,&temp,1,BLOCKING);   /* go back one more position */

			pointer--;                     /* decrement pointer */
    21ea:	b2d4      	uxtb	r4, r2
			count--;                       /* decrement character count */
    21ec:	b2dd      	uxtb	r5, r3

			continue;
    21ee:	e7c6      	b.n	217e <get_line+0xe>
		}

		else if(pointer < lim)
    21f0:	454c      	cmp	r4, r9
    21f2:	d209      	bcs.n	2208 <get_line+0x98>
		{
			s[pointer] = kb;               /* save character and increment pointer */
    21f4:	f808 2004 	strb.w	r2, [r8, r4]
			pointer++;
			count++;                       /* increment count */
    21f8:	3501      	adds	r5, #1
		}

		else if(pointer < lim)
		{
			s[pointer] = kb;               /* save character and increment pointer */
			pointer++;
    21fa:	3401      	adds	r4, #1
    21fc:	b2e4      	uxtb	r4, r4
			count++;                       /* increment count */
    21fe:	b2ed      	uxtb	r5, r5
			UART_Send(UARTx,&kb,1,BLOCKING);       /* echo character */
    2200:	4630      	mov	r0, r6
    2202:	f10d 0106 	add.w	r1, sp, #6
    2206:	e004      	b.n	2212 <get_line+0xa2>

			continue;                      /* and get some more */
		}
		else
		{
			temp = In_BELL;
    2208:	2007      	movs	r0, #7
    220a:	a902      	add	r1, sp, #8
    220c:	f801 0d01 	strb.w	r0, [r1, #-1]!
			UART_Send(UARTx,&temp,1,BLOCKING);   /* ring the bell */
    2210:	4630      	mov	r0, r6
    2212:	2201      	movs	r2, #1
    2214:	2302      	movs	r3, #2
    2216:	f7ff fdc9 	bl	1dac <UART_Send>
    221a:	e7b0      	b.n	217e <get_line+0xe>
		}
	}
	return(count);
}
    221c:	4628      	mov	r0, r5
    221e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

00002222 <reset_cursor>:
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void reset_cursor (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx,"\x1b[H");   /* escape sequence for vt220 ^[H sets cursor to Home */
    2222:	4901      	ldr	r1, [pc, #4]	; (2228 <reset_cursor+0x6>)
    2224:	f7ff bdf2 	b.w	1e0c <printf>
    2228:	00005256 	.word	0x00005256

0000222c <clear_screen>:
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void clear_screen (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx,"\x1b[2J");   /* escape sequence for vt220 ESC[2J clears screen */
    222c:	4901      	ldr	r1, [pc, #4]	; (2234 <clear_screen+0x8>)
    222e:	f7ff bded 	b.w	1e0c <printf>
    2232:	bf00      	nop
    2234:	0000525a 	.word	0x0000525a

00002238 <clr_scr_rst_cur>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void clr_scr_rst_cur (LPC_UART_TypeDef *UARTx)
{
    2238:	b510      	push	{r4, lr}
    223a:	4604      	mov	r4, r0
	clear_screen(UARTx);
    223c:	f7ff fff6 	bl	222c <clear_screen>
	reset_cursor(UARTx);
    2240:	4620      	mov	r0, r4
}
    2242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @return 		None
 *********************************************************************/
void clr_scr_rst_cur (LPC_UART_TypeDef *UARTx)
{
	clear_screen(UARTx);
	reset_cursor(UARTx);
    2246:	f7ff bfec 	b.w	2222 <reset_cursor>

0000224a <Erase_Char>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char (LPC_UART_TypeDef *UARTx)
{
    224a:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);
    224c:	4c08      	ldr	r4, [pc, #32]	; (2270 <Erase_Char+0x26>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char (LPC_UART_TypeDef *UARTx)
{
    224e:	4605      	mov	r5, r0
	printf(UARTx, "%c", Out_BACKSPACE);
    2250:	4621      	mov	r1, r4
    2252:	2208      	movs	r2, #8
    2254:	f7ff fdda 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_SPACE);
    2258:	4621      	mov	r1, r4
    225a:	2220      	movs	r2, #32
    225c:	4628      	mov	r0, r5
    225e:	f7ff fdd5 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);
    2262:	4628      	mov	r0, r5
    2264:	4621      	mov	r1, r4
    2266:	2208      	movs	r2, #8
}
    2268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 *********************************************************************/
void Erase_Char (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx, "%c", Out_BACKSPACE);
	printf(UARTx, "%c", Out_SPACE);
	printf(UARTx, "%c", Out_BACKSPACE);
    226c:	f7ff bdce 	b.w	1e0c <printf>
    2270:	0000525f 	.word	0x0000525f

00002274 <Erase_Char_With_UnderScore>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char_With_UnderScore (LPC_UART_TypeDef *UARTx)
{
    2274:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2276:	4d08      	ldr	r5, [pc, #32]	; (2298 <Erase_Char_With_UnderScore+0x24>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_Char_With_UnderScore (LPC_UART_TypeDef *UARTx)
{
    2278:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    227a:	2208      	movs	r2, #8
    227c:	4629      	mov	r1, r5
    227e:	f7ff fdc5 	bl	1e0c <printf>
	printf(UARTx, "_");                   /* and write '_' on the screen */
    2282:	4620      	mov	r0, r4
    2284:	4905      	ldr	r1, [pc, #20]	; (229c <Erase_Char_With_UnderScore+0x28>)
    2286:	f7ff fdc1 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    228a:	4620      	mov	r0, r4
    228c:	4629      	mov	r1, r5
    228e:	2208      	movs	r2, #8
}
    2290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 *********************************************************************/
void Erase_Char_With_UnderScore (LPC_UART_TypeDef *UARTx)
{
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "_");                   /* and write '_' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2294:	f7ff bdba 	b.w	1e0c <printf>
    2298:	0000525f 	.word	0x0000525f
    229c:	00005262 	.word	0x00005262

000022a0 <Erase_BackLash>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_BackLash (LPC_UART_TypeDef *UARTx)
{
    22a0:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    22a2:	4d0f      	ldr	r5, [pc, #60]	; (22e0 <Erase_BackLash+0x40>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_BackLash (LPC_UART_TypeDef *UARTx)
{
    22a4:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    22a6:	2208      	movs	r2, #8
    22a8:	4629      	mov	r1, r5
    22aa:	f7ff fdaf 	bl	1e0c <printf>
	printf(UARTx, "/");                   /* and write '/' on the screen */
    22ae:	4620      	mov	r0, r4
    22b0:	490c      	ldr	r1, [pc, #48]	; (22e4 <Erase_BackLash+0x44>)
    22b2:	f7ff fdab 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    22b6:	4629      	mov	r1, r5
    22b8:	2208      	movs	r2, #8
    22ba:	4620      	mov	r0, r4
    22bc:	f7ff fda6 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    22c0:	2208      	movs	r2, #8
    22c2:	4629      	mov	r1, r5
    22c4:	4620      	mov	r0, r4
    22c6:	f7ff fda1 	bl	1e0c <printf>
	printf(UARTx, "_");                   /* and write '_' on the screen */
    22ca:	4620      	mov	r0, r4
    22cc:	4906      	ldr	r1, [pc, #24]	; (22e8 <Erase_BackLash+0x48>)
    22ce:	f7ff fd9d 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    22d2:	4620      	mov	r0, r4
    22d4:	4629      	mov	r1, r5
    22d6:	2208      	movs	r2, #8
}
    22d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "/");                   /* and write '/' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "_");                   /* and write '_' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    22dc:	f7ff bd96 	b.w	1e0c <printf>
    22e0:	0000525f 	.word	0x0000525f
    22e4:	00005264 	.word	0x00005264
    22e8:	00005262 	.word	0x00005262

000022ec <Erase_SemiColon>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_SemiColon (LPC_UART_TypeDef *UARTx)
{
    22ec:	b538      	push	{r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    22ee:	4d0f      	ldr	r5, [pc, #60]	; (232c <Erase_SemiColon+0x40>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_SemiColon (LPC_UART_TypeDef *UARTx)
{
    22f0:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    22f2:	2208      	movs	r2, #8
    22f4:	4629      	mov	r1, r5
    22f6:	f7ff fd89 	bl	1e0c <printf>
	printf(UARTx, ":");                   /* and write ':' on the screen */
    22fa:	4620      	mov	r0, r4
    22fc:	490c      	ldr	r1, [pc, #48]	; (2330 <Erase_SemiColon+0x44>)
    22fe:	f7ff fd85 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2302:	4629      	mov	r1, r5
    2304:	2208      	movs	r2, #8
    2306:	4620      	mov	r0, r4
    2308:	f7ff fd80 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    230c:	2208      	movs	r2, #8
    230e:	4629      	mov	r1, r5
    2310:	4620      	mov	r0, r4
    2312:	f7ff fd7b 	bl	1e0c <printf>
	printf(UARTx, "_");                   /* and write '_' on the screen */
    2316:	4620      	mov	r0, r4
    2318:	4906      	ldr	r1, [pc, #24]	; (2334 <Erase_SemiColon+0x48>)
    231a:	f7ff fd77 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    231e:	4620      	mov	r0, r4
    2320:	4629      	mov	r1, r5
    2322:	2208      	movs	r2, #8
}
    2324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, ":");                   /* and write ':' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
	printf(UARTx, "_");                   /* and write '_' on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);       /* erase character on the screen */
    2328:	f7ff bd70 	b.w	1e0c <printf>
    232c:	0000525f 	.word	0x0000525f
    2330:	00005266 	.word	0x00005266
    2334:	00005262 	.word	0x00005262

00002338 <Erase_And_RingTheBell>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_And_RingTheBell (LPC_UART_TypeDef *UARTx)
{
    2338:	b570      	push	{r4, r5, r6, lr}
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    233a:	4d0f      	ldr	r5, [pc, #60]	; (2378 <Erase_And_RingTheBell+0x40>)
	printf(UARTx, "_");                   /* erase 1st char on the screen */
    233c:	4e0f      	ldr	r6, [pc, #60]	; (237c <Erase_And_RingTheBell+0x44>)
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		None
 *********************************************************************/
void Erase_And_RingTheBell (LPC_UART_TypeDef *UARTx)
{
    233e:	4604      	mov	r4, r0
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    2340:	2208      	movs	r2, #8
    2342:	4629      	mov	r1, r5
    2344:	f7ff fd62 	bl	1e0c <printf>
	printf(UARTx, "_");                   /* erase 1st char on the screen */
    2348:	4631      	mov	r1, r6
    234a:	4620      	mov	r0, r4
    234c:	f7ff fd5e 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    2350:	2208      	movs	r2, #8
    2352:	4629      	mov	r1, r5
    2354:	4620      	mov	r0, r4
    2356:	f7ff fd59 	bl	1e0c <printf>
	printf(UARTx, "_");                   /* erase 2nd char on the screen */
    235a:	4631      	mov	r1, r6
    235c:	4620      	mov	r0, r4
    235e:	f7ff fd55 	bl	1e0c <printf>
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
    2362:	4629      	mov	r1, r5
    2364:	4620      	mov	r0, r4
    2366:	2208      	movs	r2, #8
    2368:	f7ff fd50 	bl	1e0c <printf>
	printf(UARTx, "\7");                  /* ring the bell */
    236c:	4904      	ldr	r1, [pc, #16]	; (2380 <Erase_And_RingTheBell+0x48>)
    236e:	4620      	mov	r0, r4
}
    2370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
	printf(UARTx, "_");                   /* erase 1st char on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
	printf(UARTx, "_");                   /* erase 2nd char on the screen */
	printf(UARTx, "%c", Out_BACKSPACE);         /* back space */
	printf(UARTx, "\7");                  /* ring the bell */
    2374:	f7ff bd4a 	b.w	1e0c <printf>
    2378:	0000525f 	.word	0x0000525f
    237c:	00005262 	.word	0x00005262
    2380:	00005268 	.word	0x00005268

00002384 <WDT_SetTimeOut>:
 * @param[in]	clk_source select Clock source for WDT device
 * @param[in]	timeout value of time-out for WDT (us)
 * @return		None
 *********************************************************************/
static uint8_t WDT_SetTimeOut (uint8_t clk_source, uint32_t timeout)
{
    2384:	b538      	push	{r3, r4, r5, lr}

	uint32_t pclk_wdt = 0;
	uint32_t tempval = 0;

	switch ((WDT_CLK_OPT) clk_source)
    2386:	4604      	mov	r4, r0
    2388:	b110      	cbz	r0, 2390 <WDT_SetTimeOut+0xc>
    238a:	2801      	cmp	r0, #1
    238c:	d12e      	bne.n	23ec <WDT_SetTimeOut+0x68>
    238e:	e008      	b.n	23a2 <WDT_SetTimeOut+0x1e>
    {
    case WDT_CLKSRC_IRC:
    	pclk_wdt = 4000000;
    	// Calculate TC in WDT
    	tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    2390:	f021 0003 	bic.w	r0, r1, #3
    	// Check if it valid
    	if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    2394:	28fe      	cmp	r0, #254	; 0xfe
    2396:	d92b      	bls.n	23f0 <WDT_SetTimeOut+0x6c>
    	{
    		LPC_WDT->WDTC = tempval;
    2398:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    239c:	6058      	str	r0, [r3, #4]
    		return	SUCCESS;
    239e:	2001      	movs	r0, #1
    23a0:	bd38      	pop	{r3, r4, r5, pc}
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    23a2:	4b14      	ldr	r3, [pc, #80]	; (23f4 <WDT_SetTimeOut+0x70>)
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    23a4:	4814      	ldr	r0, [pc, #80]	; (23f8 <WDT_SetTimeOut+0x74>)
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    23a6:	681a      	ldr	r2, [r3, #0]
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    23a8:	0889      	lsrs	r1, r1, #2
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    23aa:	0895      	lsrs	r5, r2, #2
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    23ac:	fbb5 f5f0 	udiv	r5, r5, r0
    23b0:	434d      	muls	r5, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    23b2:	2dfe      	cmp	r5, #254	; 0xfe
    23b4:	d902      	bls.n	23bc <WDT_SetTimeOut+0x38>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    23b6:	2000      	movs	r0, #0
    23b8:	4601      	mov	r1, r0
    23ba:	e010      	b.n	23de <WDT_SetTimeOut+0x5a>
			LPC_WDT->WDTC = (uint32_t) tempval;
			return SUCCESS;
		}

		// Get WDT clock with CCLK divider = 2
		pclk_wdt = SystemCoreClock / 2;
    23bc:	0853      	lsrs	r3, r2, #1
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    23be:	fbb3 f5f0 	udiv	r5, r3, r0
    23c2:	434d      	muls	r5, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    23c4:	2dfe      	cmp	r5, #254	; 0xfe
    23c6:	d902      	bls.n	23ce <WDT_SetTimeOut+0x4a>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_2);
    23c8:	2000      	movs	r0, #0
    23ca:	2102      	movs	r1, #2
    23cc:	e007      	b.n	23de <WDT_SetTimeOut+0x5a>
		}

		// Get WDT clock with CCLK divider = 1
		pclk_wdt = SystemCoreClock;
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    23ce:	fbb2 f2f0 	udiv	r2, r2, r0
    23d2:	fb02 f501 	mul.w	r5, r2, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
    23d6:	2000      	movs	r0, #0
		// Get WDT clock with CCLK divider = 1
		pclk_wdt = SystemCoreClock;
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    23d8:	2dfe      	cmp	r5, #254	; 0xfe
    23da:	d906      	bls.n	23ea <WDT_SetTimeOut+0x66>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
    23dc:	4621      	mov	r1, r4
    23de:	f7fd ffa5 	bl	32c <CLKPWR_SetPCLKDiv>
			LPC_WDT->WDTC = (uint32_t) tempval;
    23e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    23e6:	604d      	str	r5, [r1, #4]
    23e8:	e002      	b.n	23f0 <WDT_SetTimeOut+0x6c>
    23ea:	bd38      	pop	{r3, r4, r5, pc}
// Error parameter
		default:
			break;
}

	return ERROR;
    23ec:	2000      	movs	r0, #0
    23ee:	bd38      	pop	{r3, r4, r5, pc}
    23f0:	4620      	mov	r0, r4
}
    23f2:	bd38      	pop	{r3, r4, r5, pc}
    23f4:	2007c008 	.word	0x2007c008
    23f8:	000f4240 	.word	0x000f4240

000023fc <WDT_Init>:
* 				- WDT_MODE_INT_ONLY: Use WDT to generate interrupt only
* 				- WDT_MODE_RESET: Use WDT to generate interrupt and reset MCU
* @return 		None
 **********************************************************************/
void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
{
    23fc:	b538      	push	{r3, r4, r5, lr}
    23fe:	4605      	mov	r5, r0
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    2400:	2000      	movs	r0, #0
* 				- WDT_MODE_INT_ONLY: Use WDT to generate interrupt only
* 				- WDT_MODE_RESET: Use WDT to generate interrupt and reset MCU
* @return 		None
 **********************************************************************/
void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
{
    2402:	460c      	mov	r4, r1
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    2404:	4601      	mov	r1, r0
    2406:	f7fd ff91 	bl	32c <CLKPWR_SetPCLKDiv>

	//Set clock source
	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
    240a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    240e:	691a      	ldr	r2, [r3, #16]
	LPC_WDT->WDCLKSEL |= ClkSrc;
	//Set WDT mode
	if (WDTMode == WDT_MODE_RESET){
    2410:	2c01      	cmp	r4, #1
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);

	//Set clock source
	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
    2412:	f022 0003 	bic.w	r0, r2, #3
    2416:	6118      	str	r0, [r3, #16]
	LPC_WDT->WDCLKSEL |= ClkSrc;
    2418:	6919      	ldr	r1, [r3, #16]
    241a:	ea45 0501 	orr.w	r5, r5, r1
    241e:	611d      	str	r5, [r3, #16]
	//Set WDT mode
	if (WDTMode == WDT_MODE_RESET){
    2420:	d103      	bne.n	242a <WDT_Init+0x2e>
		LPC_WDT->WDMOD |= WDT_WDMOD(WDTMode);
    2422:	781a      	ldrb	r2, [r3, #0]
    2424:	f042 0002 	orr.w	r0, r2, #2
    2428:	7018      	strb	r0, [r3, #0]
    242a:	bd38      	pop	{r3, r4, r5, pc}

0000242c <WDT_ReadTimeOutFlag>:
 * @param[in]	None
 * @return		Time out flag status of WDT
 *********************************************************************/
FlagStatus WDT_ReadTimeOutFlag (void)
{
	return ((FlagStatus)((LPC_WDT->WDMOD & WDT_WDMOD_WDTOF) >>2));
    242c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2430:	7818      	ldrb	r0, [r3, #0]
}
    2432:	f3c0 0080 	ubfx	r0, r0, #2, #1
    2436:	4770      	bx	lr

00002438 <WDT_ClrTimeOutFlag>:
 * @param[in]	None
 * @return		None
 *********************************************************************/
void WDT_ClrTimeOutFlag (void)
{
	LPC_WDT->WDMOD &=~WDT_WDMOD_WDTOF;
    2438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    243c:	781a      	ldrb	r2, [r3, #0]
    243e:	f002 00fb 	and.w	r0, r2, #251	; 0xfb
    2442:	7018      	strb	r0, [r3, #0]
    2444:	4770      	bx	lr

00002446 <WDT_Feed>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2446:	b672      	cpsid	i
 *********************************************************************/
void WDT_Feed (void)
{
	// Disable irq interrupt
	__disable_irq();
	LPC_WDT->WDFEED = 0xAA;
    2448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    244c:	22aa      	movs	r2, #170	; 0xaa
	LPC_WDT->WDFEED = 0x55;
    244e:	2055      	movs	r0, #85	; 0x55
 *********************************************************************/
void WDT_Feed (void)
{
	// Disable irq interrupt
	__disable_irq();
	LPC_WDT->WDFEED = 0xAA;
    2450:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    2452:	7218      	strb	r0, [r3, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2454:	b662      	cpsie	i
    2456:	4770      	bx	lr

00002458 <WDT_UpdateTimeOut>:
 * @brief 		Update WDT timeout value and feed
 * @param[in]	TimeOut	TimeOut value to be updated
 * @return		None
 *********************************************************************/
void WDT_UpdateTimeOut ( uint32_t TimeOut)
{
    2458:	b508      	push	{r3, lr}
	uint32_t ClkSrc;
	ClkSrc = LPC_WDT->WDCLKSEL;
    245a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 * @brief 		Update WDT timeout value and feed
 * @param[in]	TimeOut	TimeOut value to be updated
 * @return		None
 *********************************************************************/
void WDT_UpdateTimeOut ( uint32_t TimeOut)
{
    245e:	4601      	mov	r1, r0
	uint32_t ClkSrc;
	ClkSrc = LPC_WDT->WDCLKSEL;
    2460:	6918      	ldr	r0, [r3, #16]
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
    2462:	f000 0003 	and.w	r0, r0, #3
    2466:	f7ff ff8d 	bl	2384 <WDT_SetTimeOut>
	WDT_Feed();
}
    246a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	uint32_t ClkSrc;
	ClkSrc = LPC_WDT->WDCLKSEL;
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
	WDT_Feed();
    246e:	f7ff bfea 	b.w	2446 <WDT_Feed>

00002472 <WDT_Start>:
* @brief 		Start WDT activity with given timeout value
* @param[in]	TimeOut WDT reset after timeout if it is not feed
* @return 		None
 **********************************************************************/
void WDT_Start(uint32_t TimeOut)
{
    2472:	b510      	push	{r4, lr}
	uint32_t ClkSrc;

	ClkSrc = LPC_WDT->WDCLKSEL;
    2474:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
* @brief 		Start WDT activity with given timeout value
* @param[in]	TimeOut WDT reset after timeout if it is not feed
* @return 		None
 **********************************************************************/
void WDT_Start(uint32_t TimeOut)
{
    2478:	4601      	mov	r1, r0
	uint32_t ClkSrc;

	ClkSrc = LPC_WDT->WDCLKSEL;
    247a:	6920      	ldr	r0, [r4, #16]
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
    247c:	f000 0003 	and.w	r0, r0, #3
    2480:	f7ff ff80 	bl	2384 <WDT_SetTimeOut>
	//enable watchdog
	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
    2484:	7823      	ldrb	r3, [r4, #0]
    2486:	f043 0101 	orr.w	r1, r3, #1
    248a:	7021      	strb	r1, [r4, #0]
	WDT_Feed();
}
    248c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ClkSrc = LPC_WDT->WDCLKSEL;
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
	//enable watchdog
	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
	WDT_Feed();
    2490:	f7ff bfd9 	b.w	2446 <WDT_Feed>

00002494 <WDT_GetCurrentCount>:
 * @param[in]	None
 * @return		current value of WDT
 *********************************************************************/
uint32_t WDT_GetCurrentCount(void)
{
	return LPC_WDT->WDTV;
    2494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2498:	68d8      	ldr	r0, [r3, #12]
}
    249a:	4770      	bx	lr

0000249c <I2C_TSC2004_Write_Byte>:
 * @brief	    Writes Command Byte
 * @param[in]	Command  Write Command Byte
 * @return 		status
 **********************************************************************/
char I2C_TSC2004_Write_Byte (uint8_t Command)
{
    249c:	b500      	push	{lr}
    249e:	b08f      	sub	sp, #60	; 0x3c
    24a0:	f88d 0007 	strb.w	r0, [sp, #7]
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	txsetup.sl_addr7bit = TSC2004_ID;
    24a4:	2348      	movs	r3, #72	; 0x48
	txsetup.tx_data = &Command;
    24a6:	f10d 0007 	add.w	r0, sp, #7
	txsetup.tx_length = 1;
    24aa:	2101      	movs	r1, #1
	txsetup.rx_data = NULL;
    24ac:	2200      	movs	r2, #0
char I2C_TSC2004_Write_Byte (uint8_t Command)
{
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	txsetup.sl_addr7bit = TSC2004_ID;
    24ae:	9303      	str	r3, [sp, #12]
	txsetup.tx_data = &Command;
    24b0:	9004      	str	r0, [sp, #16]
	txsetup.tx_length = 1;
    24b2:	9105      	str	r1, [sp, #20]
	txsetup.rx_data = NULL;
	txsetup.rx_length = 0;
	txsetup.retransmissions_max = 3;
    24b4:	2303      	movs	r3, #3

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    24b6:	a903      	add	r1, sp, #12
    24b8:	4805      	ldr	r0, [pc, #20]	; (24d0 <I2C_TSC2004_Write_Byte+0x34>)
	I2C_M_SETUP_Type txsetup;

	txsetup.sl_addr7bit = TSC2004_ID;
	txsetup.tx_data = &Command;
	txsetup.tx_length = 1;
	txsetup.rx_data = NULL;
    24ba:	9207      	str	r2, [sp, #28]
	txsetup.rx_length = 0;
    24bc:	9208      	str	r2, [sp, #32]
	txsetup.retransmissions_max = 3;
    24be:	930a      	str	r3, [sp, #40]	; 0x28

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    24c0:	f7fe fb4a 	bl	b58 <I2C_MasterTransferData>
	}
	else
	{
		return (-1);
	}
}
    24c4:	2801      	cmp	r0, #1
    24c6:	bf14      	ite	ne
    24c8:	20ff      	movne	r0, #255	; 0xff
    24ca:	2000      	moveq	r0, #0
    24cc:	b00f      	add	sp, #60	; 0x3c
    24ce:	bd00      	pop	{pc}
    24d0:	4001c000 	.word	0x4001c000

000024d4 <I2C_TSC2004_Write_Word>:
 * @param[in]	Command      Configuration Commands
 * @param[in]   word_data    Configuration values
 * @return 		status
 **********************************************************************/
char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
{
    24d4:	b500      	push	{lr}
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
    24d6:	4b0c      	ldr	r3, [pc, #48]	; (2508 <I2C_TSC2004_Write_Word+0x34>)
 * @param[in]	Command      Configuration Commands
 * @param[in]   word_data    Configuration values
 * @return 		status
 **********************************************************************/
char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
{
    24d8:	b08d      	sub	sp, #52	; 0x34
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
    24da:	0a0a      	lsrs	r2, r1, #8
char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
{
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
    24dc:	7018      	strb	r0, [r3, #0]
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
	I2C_Tx_Buf[2] = (uint8_t)(word_data);
    24de:	7099      	strb	r1, [r3, #2]

	txsetup.sl_addr7bit = TSC2004_ID;
    24e0:	2048      	movs	r0, #72	; 0x48
	txsetup.tx_data = I2C_Tx_Buf;
	txsetup.tx_length = 3;
    24e2:	2103      	movs	r1, #3
{
	/* Transmit setup */
	I2C_M_SETUP_Type txsetup;

	I2C_Tx_Buf[0] = Command;
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
    24e4:	705a      	strb	r2, [r3, #1]
	I2C_Tx_Buf[2] = (uint8_t)(word_data);

	txsetup.sl_addr7bit = TSC2004_ID;
    24e6:	9001      	str	r0, [sp, #4]
	txsetup.tx_data = I2C_Tx_Buf;
	txsetup.tx_length = 3;
	txsetup.rx_data = NULL;
    24e8:	2200      	movs	r2, #0
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
	I2C_Tx_Buf[2] = (uint8_t)(word_data);

	txsetup.sl_addr7bit = TSC2004_ID;
	txsetup.tx_data = I2C_Tx_Buf;
	txsetup.tx_length = 3;
    24ea:	9103      	str	r1, [sp, #12]
	txsetup.rx_data = NULL;
	txsetup.rx_length = 0;
	txsetup.retransmissions_max = 3;
    24ec:	9108      	str	r1, [sp, #32]

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    24ee:	4807      	ldr	r0, [pc, #28]	; (250c <I2C_TSC2004_Write_Word+0x38>)
    24f0:	a901      	add	r1, sp, #4
	I2C_Tx_Buf[0] = Command;
	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
	I2C_Tx_Buf[2] = (uint8_t)(word_data);

	txsetup.sl_addr7bit = TSC2004_ID;
	txsetup.tx_data = I2C_Tx_Buf;
    24f2:	9302      	str	r3, [sp, #8]
	txsetup.tx_length = 3;
	txsetup.rx_data = NULL;
    24f4:	9205      	str	r2, [sp, #20]
	txsetup.rx_length = 0;
    24f6:	9206      	str	r2, [sp, #24]
	txsetup.retransmissions_max = 3;

	/* write byte to addr  */
	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
    24f8:	f7fe fb2e 	bl	b58 <I2C_MasterTransferData>
	}
	else
	{
		return (-1);
	}
}
    24fc:	2801      	cmp	r0, #1
    24fe:	bf14      	ite	ne
    2500:	20ff      	movne	r0, #255	; 0xff
    2502:	2000      	moveq	r0, #0
    2504:	b00d      	add	sp, #52	; 0x34
    2506:	bd00      	pop	{pc}
    2508:	1000028c 	.word	0x1000028c
    250c:	4001c000 	.word	0x4001c000

00002510 <TSC2004_Init>:
 * @brief	    Touch Screen Initialize
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Init (void)
{
    2510:	b508      	push	{r3, lr}
	uint16_t cmd,data;

	 /* Reset the TSC, configure for 12 bit */
	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_12BIT, SWRST_TRUE);
	I2C_TSC2004_Write_Byte(cmd);
    2512:	2086      	movs	r0, #134	; 0x86
    2514:	f7ff ffc2 	bl	249c <I2C_TSC2004_Write_Byte>

	/* Enable interrupt for PENIRQ and DAV */
	cmd = TSC2004_CMD0(CFR2_REG, PND0_FALSE, WRITE_REG);
	data = MEDIAN_VAL_FLTR_SIZE_1 |AVRG_VAL_FLTR_SIZE_7_8;
	I2C_TSC2004_Write_Word(cmd, data);
    2518:	2070      	movs	r0, #112	; 0x70
    251a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    251e:	f7ff ffd9 	bl	24d4 <I2C_TSC2004_Write_Word>

	/* Configure the TSC in TSMode 1 */
	cmd = TSC2004_CMD0(CFR0_REG, PND0_FALSE, WRITE_REG);
	data = PEN_STS_CTRL_MODE | ADC_CLK_2MHZ;
	I2C_TSC2004_Write_Word(cmd, data);
    2522:	2060      	movs	r0, #96	; 0x60
    2524:	f44f 4108 	mov.w	r1, #34816	; 0x8800
    2528:	f7ff ffd4 	bl	24d4 <I2C_TSC2004_Write_Word>

	/* Enable x, y, z1 and z2 conversion functions */
	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_12BIT, SWRST_FALSE);
	I2C_TSC2004_Write_Byte(cmd);
    252c:	2084      	movs	r0, #132	; 0x84
}
    252e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	data = PEN_STS_CTRL_MODE | ADC_CLK_2MHZ;
	I2C_TSC2004_Write_Word(cmd, data);

	/* Enable x, y, z1 and z2 conversion functions */
	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_12BIT, SWRST_FALSE);
	I2C_TSC2004_Write_Byte(cmd);
    2532:	f7ff bfb3 	b.w	249c <I2C_TSC2004_Write_Byte>

00002536 <I2C_TSC2004_Read_Word>:
 * @brief	    Reads Word data
 * @param[in]	Command    Read Register
 * @return 		Word value
 **********************************************************************/
uint16_t I2C_TSC2004_Read_Word (uint8_t Command)
{
    2536:	b530      	push	{r4, r5, lr}
    2538:	b08f      	sub	sp, #60	; 0x3c
    253a:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
	rxsetup.tx_data = &Command;	// Get address to read at writing address
	rxsetup.tx_length = 1;
    253e:	2101      	movs	r1, #1
	/* Receive setup */
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
	rxsetup.tx_data = &Command;	// Get address to read at writing address
    2540:	f10d 0007 	add.w	r0, sp, #7
	rxsetup.tx_length = 1;
	rxsetup.rx_data = I2C_Rx_Buf;
    2544:	4c0d      	ldr	r4, [pc, #52]	; (257c <I2C_TSC2004_Read_Word+0x46>)
	rxsetup.rx_length = 2;
    2546:	2202      	movs	r2, #2
{
	/* Receive setup */
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
    2548:	2348      	movs	r3, #72	; 0x48
	rxsetup.tx_data = &Command;	// Get address to read at writing address
    254a:	9004      	str	r0, [sp, #16]
	rxsetup.tx_length = 1;
    254c:	9105      	str	r1, [sp, #20]
	rxsetup.rx_data = I2C_Rx_Buf;
	rxsetup.rx_length = 2;
    254e:	9208      	str	r2, [sp, #32]
	rxsetup.retransmissions_max = 3;
    2550:	2503      	movs	r5, #3
	 * * Data are in Right Justified format.
	 * */
	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
	word_data |= (I2C_Rx_Buf[1]&0xFF);

	if (I2C_MasterTransferData(LPC_I2C0, &rxsetup, I2C_TRANSFER_POLLING) == SUCCESS)
    2552:	2200      	movs	r2, #0
    2554:	a903      	add	r1, sp, #12
    2556:	480a      	ldr	r0, [pc, #40]	; (2580 <I2C_TSC2004_Read_Word+0x4a>)
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
	rxsetup.tx_data = &Command;	// Get address to read at writing address
	rxsetup.tx_length = 1;
	rxsetup.rx_data = I2C_Rx_Buf;
    2558:	9407      	str	r4, [sp, #28]
	rxsetup.rx_length = 2;
	rxsetup.retransmissions_max = 3;
    255a:	950a      	str	r5, [sp, #40]	; 0x28
{
	/* Receive setup */
	I2C_M_SETUP_Type rxsetup;
	uint16_t word_data=0;

	rxsetup.sl_addr7bit = TSC2004_ID;
    255c:	9303      	str	r3, [sp, #12]

	/* The protocol and raw data format from i2c interface:
	 * * S Addr Wr [A] Comm [A] S Addr Rd [A] [DataHigh] A [DataLow] NA P
	 * * Data are in Right Justified format.
	 * */
	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
    255e:	7825      	ldrb	r5, [r4, #0]
	word_data |= (I2C_Rx_Buf[1]&0xFF);
    2560:	7864      	ldrb	r4, [r4, #1]

	if (I2C_MasterTransferData(LPC_I2C0, &rxsetup, I2C_TRANSFER_POLLING) == SUCCESS)
    2562:	f7fe faf9 	bl	b58 <I2C_MasterTransferData>
    2566:	2801      	cmp	r0, #1

	/* The protocol and raw data format from i2c interface:
	 * * S Addr Wr [A] Comm [A] S Addr Rd [A] [DataHigh] A [DataLow] NA P
	 * * Data are in Right Justified format.
	 * */
	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
    2568:	bf06      	itte	eq
    256a:	f005 000f 	andeq.w	r0, r5, #15
	word_data |= (I2C_Rx_Buf[1]&0xFF);
    256e:	ea44 2000 	orreq.w	r0, r4, r0, lsl #8
	{
		return (word_data);
	}
	else
	{
		return (-1);
    2572:	f64f 70ff 	movwne	r0, #65535	; 0xffff
	}
}
    2576:	b00f      	add	sp, #60	; 0x3c
    2578:	bd30      	pop	{r4, r5, pc}
    257a:	bf00      	nop
    257c:	10000038 	.word	0x10000038
    2580:	4001c000 	.word	0x4001c000

00002584 <TSC2004_Read_Reg>:
 * @brief	    Reads Any Register value
 * @param[in]	reg    Register to access
 * @return 		Word Value
 **********************************************************************/
uint16_t TSC2004_Read_Reg (register_address reg)
{
    2584:	b510      	push	{r4, lr}
    2586:	4604      	mov	r4, r0
	uint16_t val;
	uint8_t cmd;

	TSC2004_Init ();					// Initialize Touch Screen
    2588:	f7ff ffc2 	bl	2510 <TSC2004_Init>

	 // Prepare val Measurement
	cmd = TSC2004_CMD0(reg, PND0_FALSE, READ_REG);
    258c:	00e0      	lsls	r0, r4, #3
    258e:	f040 0101 	orr.w	r1, r0, #1
    2592:	b2cc      	uxtb	r4, r1
	val = I2C_TSC2004_Read_Word(cmd);
    2594:	4620      	mov	r0, r4
    2596:	f7ff ffce 	bl	2536 <I2C_TSC2004_Read_Word>

	 // Read val Measurement
	cmd = TSC2004_CMD0(reg, PND0_FALSE, READ_REG);
	val = I2C_TSC2004_Read_Word(cmd);
    259a:	4620      	mov	r0, r4
    259c:	f7ff ffcb 	bl	2536 <I2C_TSC2004_Read_Word>

	val &= MEAS_MASK;
    25a0:	0502      	lsls	r2, r0, #20

	return (val);
}
    25a2:	0d10      	lsrs	r0, r2, #20
    25a4:	bd10      	pop	{r4, pc}

000025a6 <TSC2004_Read_Values>:
 * @brief	    Read X,Y,Z1,Z2 Values
 * @param[in]	*tc    store values in structure
 * @return 		None
 **********************************************************************/
void TSC2004_Read_Values (ts_event *tc)
{
    25a6:	b510      	push	{r4, lr}
    25a8:	4604      	mov	r4, r0
	uint8_t cmd;

	TSC2004_Init ();					// Initialize Touch Screen
    25aa:	f7ff ffb1 	bl	2510 <TSC2004_Init>

	 // Prepare X Measurement
	cmd = TSC2004_CMD0(X_REG, PND0_FALSE, READ_REG);
	tc->x = I2C_TSC2004_Read_Word(cmd);
    25ae:	2001      	movs	r0, #1
    25b0:	f7ff ffc1 	bl	2536 <I2C_TSC2004_Read_Word>
    25b4:	8020      	strh	r0, [r4, #0]

	 // Read X Measurement
	cmd = TSC2004_CMD0(X_REG, PND0_FALSE, READ_REG);
	tc->x = I2C_TSC2004_Read_Word(cmd);
    25b6:	2001      	movs	r0, #1
    25b8:	f7ff ffbd 	bl	2536 <I2C_TSC2004_Read_Word>
    25bc:	8020      	strh	r0, [r4, #0]

	// Prepare Y Measurement
	cmd = TSC2004_CMD0(Y_REG, PND0_FALSE, READ_REG);
	tc->y = I2C_TSC2004_Read_Word(cmd);
    25be:	2009      	movs	r0, #9
    25c0:	f7ff ffb9 	bl	2536 <I2C_TSC2004_Read_Word>
    25c4:	8060      	strh	r0, [r4, #2]

	// Read Y Measurement
	cmd = TSC2004_CMD0(Y_REG, PND0_FALSE, READ_REG);
	tc->y = I2C_TSC2004_Read_Word(cmd);
    25c6:	2009      	movs	r0, #9
    25c8:	f7ff ffb5 	bl	2536 <I2C_TSC2004_Read_Word>
    25cc:	8060      	strh	r0, [r4, #2]

	// Prepare Z1 Measurement
	cmd = TSC2004_CMD0(Z1_REG, PND0_FALSE, READ_REG);
	tc->z1 = I2C_TSC2004_Read_Word(cmd);
    25ce:	2011      	movs	r0, #17
    25d0:	f7ff ffb1 	bl	2536 <I2C_TSC2004_Read_Word>
    25d4:	80a0      	strh	r0, [r4, #4]

	// Read Z1 Measurement
	cmd = TSC2004_CMD0(Z1_REG, PND0_FALSE, READ_REG);
	tc->z1 = I2C_TSC2004_Read_Word(cmd);
    25d6:	2011      	movs	r0, #17
    25d8:	f7ff ffad 	bl	2536 <I2C_TSC2004_Read_Word>
    25dc:	80a0      	strh	r0, [r4, #4]

	// Prepare Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);
    25de:	2019      	movs	r0, #25
    25e0:	f7ff ffa9 	bl	2536 <I2C_TSC2004_Read_Word>
    25e4:	80e0      	strh	r0, [r4, #6]

	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);
    25e6:	2019      	movs	r0, #25
    25e8:	f7ff ffa5 	bl	2536 <I2C_TSC2004_Read_Word>

	tc->x &= MEAS_MASK;
    25ec:	8823      	ldrh	r3, [r4, #0]
	tc->y &= MEAS_MASK;
    25ee:	8862      	ldrh	r2, [r4, #2]

	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
    25f0:	f423 4170 	bic.w	r1, r3, #61440	; 0xf000
    25f4:	8021      	strh	r1, [r4, #0]
	tc->y &= MEAS_MASK;
	tc->z1 &= MEAS_MASK;
    25f6:	88a1      	ldrh	r1, [r4, #4]
	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
	tc->y &= MEAS_MASK;
    25f8:	f422 4370 	bic.w	r3, r2, #61440	; 0xf000
	tc->z1 &= MEAS_MASK;
	tc->z2 &= MEAS_MASK;
    25fc:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
	tc->y &= MEAS_MASK;
	tc->z1 &= MEAS_MASK;
    2600:	f421 4270 	bic.w	r2, r1, #61440	; 0xf000
	// Read Z2 Measurement
	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
	tc->z2 = I2C_TSC2004_Read_Word(cmd);

	tc->x &= MEAS_MASK;
	tc->y &= MEAS_MASK;
    2604:	8063      	strh	r3, [r4, #2]
	tc->z1 &= MEAS_MASK;
    2606:	80a2      	strh	r2, [r4, #4]
	tc->z2 &= MEAS_MASK;
    2608:	80e0      	strh	r0, [r4, #6]
    260a:	bd10      	pop	{r4, pc}

0000260c <TSC2004_Read_Value_Test>:
 * @brief	    Read X,Y,Z1,Z2 Values and Display on Terminal
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Read_Value_Test (void)
{
    260c:	b513      	push	{r0, r1, r4, lr}
	ts_event ts;
	TSC2004_Read_Values (&ts);

	printf(LPC_UART0,"\x1b[1;1HMeasure X    = %d05",ts.x);
    260e:	4c0e      	ldr	r4, [pc, #56]	; (2648 <TSC2004_Read_Value_Test+0x3c>)
 * @return 		None
 **********************************************************************/
void TSC2004_Read_Value_Test (void)
{
	ts_event ts;
	TSC2004_Read_Values (&ts);
    2610:	4668      	mov	r0, sp
    2612:	f7ff ffc8 	bl	25a6 <TSC2004_Read_Values>

	printf(LPC_UART0,"\x1b[1;1HMeasure X    = %d05",ts.x);
    2616:	f8bd 2000 	ldrh.w	r2, [sp]
    261a:	4620      	mov	r0, r4
    261c:	490b      	ldr	r1, [pc, #44]	; (264c <TSC2004_Read_Value_Test+0x40>)
    261e:	f7ff fbf5 	bl	1e0c <printf>
	printf(LPC_UART0,"\x1b[2;1HMeasure Y    = %d05",ts.y);
    2622:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    2626:	4620      	mov	r0, r4
    2628:	4909      	ldr	r1, [pc, #36]	; (2650 <TSC2004_Read_Value_Test+0x44>)
    262a:	f7ff fbef 	bl	1e0c <printf>
	printf(LPC_UART0,"\x1b[3;1HMeasure Z1   = %d05",ts.z1);
    262e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2632:	4620      	mov	r0, r4
    2634:	4907      	ldr	r1, [pc, #28]	; (2654 <TSC2004_Read_Value_Test+0x48>)
    2636:	f7ff fbe9 	bl	1e0c <printf>
	printf(LPC_UART0,"\x1b[4;1HMeasure Z2   = %d05",ts.z2);
    263a:	4620      	mov	r0, r4
    263c:	4906      	ldr	r1, [pc, #24]	; (2658 <TSC2004_Read_Value_Test+0x4c>)
    263e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2642:	f7ff fbe3 	bl	1e0c <printf>
}
    2646:	bd1c      	pop	{r2, r3, r4, pc}
    2648:	4000c000 	.word	0x4000c000
    264c:	00075aca 	.word	0x00075aca
    2650:	00075ae4 	.word	0x00075ae4
    2654:	00075afe 	.word	0x00075afe
    2658:	00075b18 	.word	0x00075b18

0000265c <TSC2004_Draw_Test>:
 * @brief	    Read Touchscreen and PutPixel accordingly
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Draw_Test (void)
{
    265c:	b507      	push	{r0, r1, r2, lr}
	ts_event ts;

	TSC2004_Read_Values (&ts);
    265e:	4668      	mov	r0, sp
    2660:	f7ff ffa1 	bl	25a6 <TSC2004_Read_Values>
	GLCD_PutPixel (((ts.x)/11)-24,((ts.y)/13)-36,Black);
    2664:	f8bd 0000 	ldrh.w	r0, [sp]
    2668:	230b      	movs	r3, #11
    266a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    266e:	fbb0 f2f3 	udiv	r2, r0, r3
    2672:	200d      	movs	r0, #13
    2674:	fbb1 f3f0 	udiv	r3, r1, r0
    2678:	3a18      	subs	r2, #24
    267a:	3b24      	subs	r3, #36	; 0x24
    267c:	b290      	uxth	r0, r2
    267e:	b299      	uxth	r1, r3
    2680:	2200      	movs	r2, #0
    2682:	f000 f9c5 	bl	2a10 <GLCD_PutPixel>
}
    2686:	bd0e      	pop	{r1, r2, r3, pc}

00002688 <TSC2004_Slide_Test>:
 * @brief	    Photo Album with sliding switch of images
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Slide_Test (void)
{
    2688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint16_t val,past=0,count=0;
	int8_t pic=0;
	Bool flag=0,fb=0;

	GLCD_Bitmap (0,0,320,240,image);
    268c:	4b2c      	ldr	r3, [pc, #176]	; (2740 <TSC2004_Slide_Test+0xb8>)
    268e:	2000      	movs	r0, #0
    2690:	9300      	str	r3, [sp, #0]
    2692:	4601      	mov	r1, r0
    2694:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2698:	23f0      	movs	r3, #240	; 0xf0
    269a:	f001 f976 	bl	398a <GLCD_Bitmap>
 **********************************************************************/
void TSC2004_Slide_Test (void)
{
	uint16_t val,past=0,count=0;
	int8_t pic=0;
	Bool flag=0,fb=0;
    269e:	2400      	movs	r4, #0
    26a0:	4627      	mov	r7, r4
 * @return 		None
 **********************************************************************/
void TSC2004_Slide_Test (void)
{
	uint16_t val,past=0,count=0;
	int8_t pic=0;
    26a2:	4626      	mov	r6, r4
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void TSC2004_Slide_Test (void)
{
	uint16_t val,past=0,count=0;
    26a4:	4625      	mov	r5, r4
    26a6:	46a1      	mov	r9, r4
	Bool flag=0,fb=0;

	GLCD_Bitmap (0,0,320,240,image);
    while(1)
    {
    	val = TSC2004_Read_Reg(X_REG);
    26a8:	2000      	movs	r0, #0
    26aa:	f7ff ff6b 	bl	2584 <TSC2004_Read_Reg>
   // 	printf(LPC_UART0,"\x1b[1;1HMeasured Value:  %d05",val);
    	/* Slide */
    	if ((past>val) && flag)
    26ae:	4581      	cmp	r9, r0
	Bool flag=0,fb=0;

	GLCD_Bitmap (0,0,320,240,image);
    while(1)
    {
    	val = TSC2004_Read_Reg(X_REG);
    26b0:	4680      	mov	r8, r0
   // 	printf(LPC_UART0,"\x1b[1;1HMeasured Value:  %d05",val);
    	/* Slide */
    	if ((past>val) && flag)
    26b2:	d90b      	bls.n	26cc <TSC2004_Slide_Test+0x44>
    26b4:	b1af      	cbz	r7, 26e2 <TSC2004_Slide_Test+0x5a>
    	{
    		if (fb)
    		{
    			count = 0;
    26b6:	2c00      	cmp	r4, #0
    26b8:	bf18      	it	ne
    26ba:	2500      	movne	r5, #0
    		}
    		count++;
    26bc:	1c69      	adds	r1, r5, #1
    26be:	b28d      	uxth	r5, r1
    		past = val;
    		flag = ENABLE;
    	}
    	past = val;

    	if (count == 10)
    26c0:	2d0a      	cmp	r5, #10
    26c2:	d017      	beq.n	26f4 <TSC2004_Slide_Test+0x6c>
    		if (fb)
    		{
    			count = 0;
    		}
    		count++;
    		fb = DISABLE;
    26c4:	2400      	movs	r4, #0
	Bool flag=0,fb=0;

	GLCD_Bitmap (0,0,320,240,image);
    while(1)
    {
    	val = TSC2004_Read_Reg(X_REG);
    26c6:	46c1      	mov	r9, r8
    26c8:	2701      	movs	r7, #1
    26ca:	e7ed      	b.n	26a8 <TSC2004_Slide_Test+0x20>
    			count = 0;
    		}
    		count++;
    		fb = DISABLE;
    	}
    	else if ((past<val)&& flag)
    26cc:	d209      	bcs.n	26e2 <TSC2004_Slide_Test+0x5a>
    26ce:	b147      	cbz	r7, 26e2 <TSC2004_Slide_Test+0x5a>
    	{
    		if (!fb)
    		{
    			count = 0;
    26d0:	2c00      	cmp	r4, #0
    26d2:	bf08      	it	eq
    26d4:	2500      	moveq	r5, #0
    		}
    		count++;
    26d6:	3501      	adds	r5, #1
    26d8:	b2ad      	uxth	r5, r5
    		fb = ENABLE;
    26da:	2401      	movs	r4, #1
    		past = val;
    		flag = ENABLE;
    	}
    	past = val;

    	if (count == 10)
    26dc:	2d0a      	cmp	r5, #10
    26de:	d1f2      	bne.n	26c6 <TSC2004_Slide_Test+0x3e>
    26e0:	e002      	b.n	26e8 <TSC2004_Slide_Test+0x60>
    26e2:	2d0a      	cmp	r5, #10
    26e4:	d1ef      	bne.n	26c6 <TSC2004_Slide_Test+0x3e>
    	{
    		if (fb)
    26e6:	b12c      	cbz	r4, 26f4 <TSC2004_Slide_Test+0x6c>
    		{
    //			printf(LPC_UART0,"\x1b[2;1HForward Slide ");
    			pic++;
    26e8:	3601      	adds	r6, #1
    26ea:	b2f6      	uxtb	r6, r6
    			if (pic > 2)
    26ec:	b270      	sxtb	r0, r6
    26ee:	2802      	cmp	r0, #2
    26f0:	dc1a      	bgt.n	2728 <TSC2004_Slide_Test+0xa0>
    26f2:	e005      	b.n	2700 <TSC2004_Slide_Test+0x78>
    			}
    		}
    		else
    		{
   // 			printf(LPC_UART0,"\x1b[2;1HBackward Slide");
    			pic--;
    26f4:	1e72      	subs	r2, r6, #1
    26f6:	b2d6      	uxtb	r6, r2
    			if (pic < 0)
    26f8:	b277      	sxtb	r7, r6
    26fa:	2400      	movs	r4, #0
    26fc:	1c7b      	adds	r3, r7, #1
    26fe:	d007      	beq.n	2710 <TSC2004_Slide_Test+0x88>
    			{
    				pic = 2;
    			}
    		}

        	switch (pic)
    2700:	b273      	sxtb	r3, r6
    2702:	2b01      	cmp	r3, #1
    2704:	d002      	beq.n	270c <TSC2004_Slide_Test+0x84>
    2706:	2b02      	cmp	r3, #2
    2708:	d10f      	bne.n	272a <TSC2004_Slide_Test+0xa2>
    270a:	e001      	b.n	2710 <TSC2004_Slide_Test+0x88>
        	{
        	case 1:
   //     		printf(LPC_UART0,"\x1b[3;1HPIC2");
        		GLCD_Bitmap (0,0,320,240,cham);
    270c:	4d0d      	ldr	r5, [pc, #52]	; (2744 <TSC2004_Slide_Test+0xbc>)
    270e:	e00d      	b.n	272c <TSC2004_Slide_Test+0xa4>
        		break;

        	case 2:
  //      		printf(LPC_UART0,"\x1b[3;1HPIC3");
        		GLCD_Bitmap (0,0,320,240,ubuntu);
    2710:	480d      	ldr	r0, [pc, #52]	; (2748 <TSC2004_Slide_Test+0xc0>)
    2712:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2716:	9000      	str	r0, [sp, #0]
    2718:	2000      	movs	r0, #0
    271a:	4601      	mov	r1, r0
    271c:	23f0      	movs	r3, #240	; 0xf0
    271e:	f001 f934 	bl	398a <GLCD_Bitmap>
        		break;
    2722:	2602      	movs	r6, #2
    2724:	250a      	movs	r5, #10
    2726:	e7ce      	b.n	26c6 <TSC2004_Slide_Test+0x3e>
    		{
    //			printf(LPC_UART0,"\x1b[2;1HForward Slide ");
    			pic++;
    			if (pic > 2)
    			{
    				pic = 0;
    2728:	2600      	movs	r6, #0
        		GLCD_Bitmap (0,0,320,240,ubuntu);
        		break;

        	default:
    //    		printf(LPC_UART0,"\x1b[3;1HPIC1");
        		GLCD_Bitmap (0,0,320,240,image);
    272a:	4d05      	ldr	r5, [pc, #20]	; (2740 <TSC2004_Slide_Test+0xb8>)
    272c:	2000      	movs	r0, #0
    272e:	9500      	str	r5, [sp, #0]
    2730:	4601      	mov	r1, r0
    2732:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2736:	23f0      	movs	r3, #240	; 0xf0
    2738:	f001 f927 	bl	398a <GLCD_Bitmap>
    273c:	e7f2      	b.n	2724 <TSC2004_Slide_Test+0x9c>
    273e:	bf00      	nop
    2740:	0000526a 	.word	0x0000526a
    2744:	0002aa8a 	.word	0x0002aa8a
    2748:	000502aa 	.word	0x000502aa

0000274c <wr_dat_start>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_start (void)
{
	CS_Force1 (LPC_SSP1, DISABLE);
    274c:	2100      	movs	r1, #0
 * @brief	    Start of data writing to LCD controller
 * @param[in]	None
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_start (void)
{
    274e:	b508      	push	{r3, lr}
	CS_Force1 (LPC_SSP1, DISABLE);
    2750:	4804      	ldr	r0, [pc, #16]	; (2764 <wr_dat_start+0x18>)
    2752:	f7fe fca1 	bl	1098 <CS_Force1>
	GPIO_SetValue(2, LCD_RS);  // select data mode
    2756:	2002      	movs	r0, #2
    2758:	2101      	movs	r1, #1
}
    275a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_start (void)
{
	CS_Force1 (LPC_SSP1, DISABLE);
	GPIO_SetValue(2, LCD_RS);  // select data mode
    275e:	f7fd be8d 	b.w	47c <GPIO_SetValue>
    2762:	bf00      	nop
    2764:	40030000 	.word	0x40030000

00002768 <wr_dat_stop>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_stop (void)
{
	CS_Force1 (LPC_SSP1, ENABLE);
    2768:	4801      	ldr	r0, [pc, #4]	; (2770 <wr_dat_stop+0x8>)
    276a:	2101      	movs	r1, #1
    276c:	f7fe bc94 	b.w	1098 <CS_Force1>
    2770:	40030000 	.word	0x40030000

00002774 <wr_dat_only>:
 * @brief	    Data writing to LCD controller
 * @param[in]	c     data to be written
 * @return 		None
 **********************************************************************/
static __INLINE void wr_dat_only (uint16_t c)
{
    2774:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	SSP_DATA_SETUP_Type xferConfig;

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
    2776:	4b07      	ldr	r3, [pc, #28]	; (2794 <wr_dat_only+0x20>)
    2778:	0a02      	lsrs	r2, r0, #8
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract
    277a:	7058      	strb	r0, [r3, #1]

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
	xferConfig.length = 2;
    277c:	2002      	movs	r0, #2
 **********************************************************************/
static __INLINE void wr_dat_only (uint16_t c)
{
	SSP_DATA_SETUP_Type xferConfig;

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
    277e:	701a      	strb	r2, [r3, #0]
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
	xferConfig.length = 2;
    2780:	9004      	str	r0, [sp, #16]

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
    2782:	2200      	movs	r2, #0
	xferConfig.length = 2;
	SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    2784:	4669      	mov	r1, sp
    2786:	4804      	ldr	r0, [pc, #16]	; (2798 <wr_dat_only+0x24>)
	SSP_DATA_SETUP_Type xferConfig;

	Tx_Buf1[0] = (uchar)(c>>8);    // 1st byte extract
	Tx_Buf1[1] = (uchar) c;        // 2nd byte extract

	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
    2788:	9300      	str	r3, [sp, #0]
	xferConfig.rx_data = NULL;
    278a:	9202      	str	r2, [sp, #8]
	xferConfig.length = 2;
	SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    278c:	f7fe fdbe 	bl	130c <SSP_ReadWrite>
}
    2790:	b007      	add	sp, #28
    2792:	bd00      	pop	{pc}
    2794:	100002cc 	.word	0x100002cc
    2798:	40030000 	.word	0x40030000

0000279c <GLCD_Backlight>:
 * @param[in]	NewState	ENABLE/DISABLE the Backlight
 * @return 		None
 **********************************************************************/
void GLCD_Backlight (FunctionalState NewState)
{
	if(NewState)
    279c:	b120      	cbz	r0, 27a8 <GLCD_Backlight+0xc>
	{
		GPIO_SetValue(2, LCD_BK);
    279e:	2002      	movs	r0, #2
    27a0:	f44f 7180 	mov.w	r1, #256	; 0x100
    27a4:	f7fd be6a 	b.w	47c <GPIO_SetValue>
	}
	else
	{
		GPIO_ClearValue(2, LCD_BK);
    27a8:	2002      	movs	r0, #2
    27aa:	f44f 7180 	mov.w	r1, #256	; 0x100
    27ae:	f7fd be6f 	b.w	490 <GPIO_ClearValue>

000027b2 <GLCD_Reset>:
 * @brief	    This function resets GLCD
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Reset (void)
{
    27b2:	b508      	push	{r3, lr}
	GPIO_SetValue(0, LCD_RST);
    27b4:	2120      	movs	r1, #32
    27b6:	2000      	movs	r0, #0
    27b8:	f7fd fe60 	bl	47c <GPIO_SetValue>
	delay_ms(2);
    27bc:	2002      	movs	r0, #2
    27be:	f7fe fe87 	bl	14d0 <delay_ms>
	GPIO_ClearValue(0, LCD_RST);  //reset low
    27c2:	2120      	movs	r1, #32
    27c4:	2000      	movs	r0, #0
    27c6:	f7fd fe63 	bl	490 <GPIO_ClearValue>
	delay_ms(4);
    27ca:	2004      	movs	r0, #4
    27cc:	f7fe fe80 	bl	14d0 <delay_ms>
	GPIO_SetValue(0, LCD_RST);  //reset low
    27d0:	2000      	movs	r0, #0
    27d2:	2120      	movs	r1, #32
}
    27d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	GPIO_SetValue(0, LCD_RST);
	delay_ms(2);
	GPIO_ClearValue(0, LCD_RST);  //reset low
	delay_ms(4);
	GPIO_SetValue(0, LCD_RST);  //reset low
    27d8:	f7fd be50 	b.w	47c <GPIO_SetValue>

000027dc <GLCD_SetTextColor>:
 * @param[in]	color    foreground color
 * @return 		None
 **********************************************************************/
void GLCD_SetTextColor (uint16_t color)
{
	TextColor = color;
    27dc:	4b01      	ldr	r3, [pc, #4]	; (27e4 <GLCD_SetTextColor+0x8>)
    27de:	8018      	strh	r0, [r3, #0]
    27e0:	4770      	bx	lr
    27e2:	bf00      	nop
    27e4:	10000036 	.word	0x10000036

000027e8 <GLCD_SetBackColor>:
 * @param[in]	color    background color
 * @return 		None
 **********************************************************************/
void GLCD_SetBackColor (uint16_t color)
{
	BackColor = color;
    27e8:	4b01      	ldr	r3, [pc, #4]	; (27f0 <GLCD_SetBackColor+0x8>)
    27ea:	8018      	strh	r0, [r3, #0]
    27ec:	4770      	bx	lr
    27ee:	bf00      	nop
    27f0:	2007c004 	.word	0x2007c004

000027f4 <Write_Command_Glcd>:
 * @brief	    This function writes commands to the GLCD
 * @param[in]	Command		command to be written on GLCD
 * @return 		status
 **********************************************************************/
uchar Write_Command_Glcd (uint8_t Command)
{
    27f4:	b510      	push	{r4, lr}
    27f6:	b08a      	sub	sp, #40	; 0x28
    27f8:	ac0a      	add	r4, sp, #40	; 0x28
    27fa:	f804 0d21 	strb.w	r0, [r4, #-33]!
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;
	__IO uint32_t i;

	GPIO_ClearValue(2, LCD_RS);  //select command mode
    27fe:	2101      	movs	r1, #1
    2800:	2002      	movs	r0, #2
    2802:	f7fd fe45 	bl	490 <GPIO_ClearValue>

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
    2806:	4811      	ldr	r0, [pc, #68]	; (284c <Write_Command_Glcd+0x58>)
    2808:	2100      	movs	r1, #0
    280a:	f7fe fc45 	bl	1098 <CS_Force1>
	xferConfig.tx_data = &Command;               /* Send Instruction Byte    */
    280e:	9404      	str	r4, [sp, #16]
	xferConfig.rx_data = NULL;
    2810:	2200      	movs	r2, #0
	xferConfig.length = 1;
    2812:	2401      	movs	r4, #1
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    2814:	480d      	ldr	r0, [pc, #52]	; (284c <Write_Command_Glcd+0x58>)
    2816:	a904      	add	r1, sp, #16

	GPIO_ClearValue(2, LCD_RS);  //select command mode

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
	xferConfig.tx_data = &Command;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
    2818:	9206      	str	r2, [sp, #24]
	xferConfig.length = 1;
    281a:	9408      	str	r4, [sp, #32]
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    281c:	f7fe fd76 	bl	130c <SSP_ReadWrite>

	if(WriteStatus)
    2820:	b2c0      	uxtb	r0, r0
    2822:	b180      	cbz	r0, 2846 <Write_Command_Glcd+0x52>
	{
		CS_Force1 (LPC_SSP1, ENABLE);                          /* CS high inactive        */
    2824:	4621      	mov	r1, r4
    2826:	4809      	ldr	r0, [pc, #36]	; (284c <Write_Command_Glcd+0x58>)
    2828:	f7fe fc36 	bl	1098 <CS_Force1>
		for(i=925; i>0; i--);
    282c:	f240 319d 	movw	r1, #925	; 0x39d
    2830:	9103      	str	r1, [sp, #12]
    2832:	9b03      	ldr	r3, [sp, #12]
    2834:	b113      	cbz	r3, 283c <Write_Command_Glcd+0x48>
    2836:	9803      	ldr	r0, [sp, #12]
    2838:	1e41      	subs	r1, r0, #1
    283a:	e7f9      	b.n	2830 <Write_Command_Glcd+0x3c>
		GPIO_SetValue(2, LCD_RS);  // select data mode
    283c:	2002      	movs	r0, #2
    283e:	2101      	movs	r1, #1
    2840:	f7fd fe1c 	bl	47c <GPIO_SetValue>
    2844:	2001      	movs	r0, #1
		return(1);
	}
	else
		return(0);
}
    2846:	b00a      	add	sp, #40	; 0x28
    2848:	bd10      	pop	{r4, pc}
    284a:	bf00      	nop
    284c:	40030000 	.word	0x40030000

00002850 <Write_Data_Glcd>:
 * @brief	    This function writes data to the GLCD
 * @param[in]	data	data to be written on GLCD
 * @return 		None
 **********************************************************************/
uchar Write_Data_Glcd (uint16_t data)
{
    2850:	b510      	push	{r4, lr}
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;

	Tx_Buf1[0] = (uchar)(data>>8);    // 1st byte extract
    2852:	4c0f      	ldr	r4, [pc, #60]	; (2890 <Write_Data_Glcd+0x40>)
 * @brief	    This function writes data to the GLCD
 * @param[in]	data	data to be written on GLCD
 * @return 		None
 **********************************************************************/
uchar Write_Data_Glcd (uint16_t data)
{
    2854:	b086      	sub	sp, #24
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;

	Tx_Buf1[0] = (uchar)(data>>8);    // 1st byte extract
    2856:	0a03      	lsrs	r3, r0, #8
	Tx_Buf1[1] = (uchar) data;        // 2nd byte extract
    2858:	7060      	strb	r0, [r4, #1]

	GPIO_SetValue(2, LCD_RS);  // select data mode
    285a:	2101      	movs	r1, #1
    285c:	2002      	movs	r0, #2
uchar Write_Data_Glcd (uint16_t data)
{
	SSP_DATA_SETUP_Type xferConfig;
	uint8_t WriteStatus =0;

	Tx_Buf1[0] = (uchar)(data>>8);    // 1st byte extract
    285e:	7023      	strb	r3, [r4, #0]
	Tx_Buf1[1] = (uchar) data;        // 2nd byte extract

	GPIO_SetValue(2, LCD_RS);  // select data mode
    2860:	f7fd fe0c 	bl	47c <GPIO_SetValue>

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
    2864:	480b      	ldr	r0, [pc, #44]	; (2894 <Write_Data_Glcd+0x44>)
    2866:	2100      	movs	r1, #0
    2868:	f7fe fc16 	bl	1098 <CS_Force1>
	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
	xferConfig.length = 2;
    286c:	2002      	movs	r0, #2

	GPIO_SetValue(2, LCD_RS);  // select data mode

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
	xferConfig.rx_data = NULL;
    286e:	2200      	movs	r2, #0
	xferConfig.length = 2;
    2870:	9004      	str	r0, [sp, #16]
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    2872:	4669      	mov	r1, sp
    2874:	4807      	ldr	r0, [pc, #28]	; (2894 <Write_Data_Glcd+0x44>)
	Tx_Buf1[1] = (uchar) data;        // 2nd byte extract

	GPIO_SetValue(2, LCD_RS);  // select data mode

	CS_Force1 (LPC_SSP1, DISABLE);                        /* Select device           */
	xferConfig.tx_data = Tx_Buf1;               /* Send Instruction Byte    */
    2876:	9400      	str	r4, [sp, #0]
	xferConfig.rx_data = NULL;
    2878:	9202      	str	r2, [sp, #8]
	xferConfig.length = 2;
	WriteStatus = SSP_ReadWrite(LPC_SSP1, &xferConfig, SSP_TRANSFER_POLLING);
    287a:	f7fe fd47 	bl	130c <SSP_ReadWrite>

	if(WriteStatus)
    287e:	b2c0      	uxtb	r0, r0
    2880:	b120      	cbz	r0, 288c <Write_Data_Glcd+0x3c>
	{
		CS_Force1 (LPC_SSP1, ENABLE);                          /* CS high inactive        */
    2882:	4804      	ldr	r0, [pc, #16]	; (2894 <Write_Data_Glcd+0x44>)
    2884:	2101      	movs	r1, #1
    2886:	f7fe fc07 	bl	1098 <CS_Force1>
    288a:	2001      	movs	r0, #1
		return(1);
	}
	else
		return(0);
}
    288c:	b006      	add	sp, #24
    288e:	bd10      	pop	{r4, pc}
    2890:	100002cc 	.word	0x100002cc
    2894:	40030000 	.word	0x40030000

00002898 <GLCD_Bargraph>:
 *              w        maximum width of bargraph (in pixels)
 *              val      value of active bargraph (in 1/1024)
 * @return 		None
 **********************************************************************/
void GLCD_Bargraph (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t val)
{
    2898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    289c:	4606      	mov	r6, r0
	int i,j;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    289e:	2045      	movs	r0, #69	; 0x45
 *              w        maximum width of bargraph (in pixels)
 *              val      value of active bargraph (in 1/1024)
 * @return 		None
 **********************************************************************/
void GLCD_Bargraph (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t val)
{
    28a0:	4615      	mov	r5, r2
    28a2:	461f      	mov	r7, r3
    28a4:	460c      	mov	r4, r1
    28a6:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	int i,j;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    28aa:	f7ff ffa3 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    28ae:	4630      	mov	r0, r6
    28b0:	f7ff ffce 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
    28b4:	2046      	movs	r0, #70	; 0x46
    28b6:	f7ff ff9d 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x+w-1);
    28ba:	1e70      	subs	r0, r6, #1
    28bc:	1829      	adds	r1, r5, r0
    28be:	b288      	uxth	r0, r1
    28c0:	f7ff ffc6 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
    28c4:	2044      	movs	r0, #68	; 0x44
    28c6:	f7ff ff95 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    28ca:	4620      	mov	r0, r4
    28cc:	f7ff ffc0 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
    28d0:	2044      	movs	r0, #68	; 0x44
    28d2:	f7ff ff8f 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd((y+CHAR_H-1)<<8);
    28d6:	f104 0217 	add.w	r2, r4, #23
    28da:	0213      	lsls	r3, r2, #8
    28dc:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
    28e0:	f7ff ffb6 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    28e4:	204e      	movs	r0, #78	; 0x4e
    28e6:	f7ff ff85 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    28ea:	4630      	mov	r0, r6
    28ec:	f7ff ffb0 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    28f0:	204f      	movs	r0, #79	; 0x4f
    28f2:	f7ff ff7f 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    28f6:	4620      	mov	r0, r4
    28f8:	f7ff ffaa 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x22);
    28fc:	2022      	movs	r0, #34	; 0x22
    28fe:	f7ff ff79 	bl	27f4 <Write_Command_Glcd>

	val = (val * w) >> 10;                /* Scale value for 24x12 characters   */

	wr_dat_start();
    2902:	f7ff ff23 	bl	274c <wr_dat_start>
	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x22);

	val = (val * w) >> 10;                /* Scale value for 24x12 characters   */
    2906:	fb05 f608 	mul.w	r6, r5, r8
    290a:	ea4f 28a6 	mov.w	r8, r6, asr #10

	wr_dat_start();
	for (i = h; i >0; i--)
    290e:	2600      	movs	r6, #0
    2910:	42b7      	cmp	r7, r6
    2912:	d010      	beq.n	2936 <GLCD_Bargraph+0x9e>
    2914:	2400      	movs	r4, #0
	{
		for (j = 0; j <= w-1; j++)
    2916:	42a5      	cmp	r5, r4
    2918:	dd0b      	ble.n	2932 <GLCD_Bargraph+0x9a>
		{
			if(j <= val)
    291a:	fa1f f088 	uxth.w	r0, r8
    291e:	4284      	cmp	r4, r0
			{
				wr_dat_only(BackColor);
    2920:	bfd4      	ite	le
    2922:	4807      	ldrle	r0, [pc, #28]	; (2940 <GLCD_Bargraph+0xa8>)
			}
			else
			{
				wr_dat_only(TextColor);
    2924:	4807      	ldrgt	r0, [pc, #28]	; (2944 <GLCD_Bargraph+0xac>)
	val = (val * w) >> 10;                /* Scale value for 24x12 characters   */

	wr_dat_start();
	for (i = h; i >0; i--)
	{
		for (j = 0; j <= w-1; j++)
    2926:	3401      	adds	r4, #1
			{
				wr_dat_only(BackColor);
			}
			else
			{
				wr_dat_only(TextColor);
    2928:	8801      	ldrh	r1, [r0, #0]
    292a:	b288      	uxth	r0, r1
    292c:	f7ff ff22 	bl	2774 <wr_dat_only>
    2930:	e7f1      	b.n	2916 <GLCD_Bargraph+0x7e>
    2932:	3601      	adds	r6, #1
    2934:	e7ec      	b.n	2910 <GLCD_Bargraph+0x78>
			}
		}
	}
	wr_dat_stop();
}
    2936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			{
				wr_dat_only(TextColor);
			}
		}
	}
	wr_dat_stop();
    293a:	f7ff bf15 	b.w	2768 <wr_dat_stop>
    293e:	bf00      	nop
    2940:	2007c004 	.word	0x2007c004
    2944:	10000036 	.word	0x10000036

00002948 <GLCD_Draw_Char>:
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    2948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int idx = 0, i, j;

	x = x-CHAR_W;
    294a:	f1a0 0510 	sub.w	r5, r0, #16
    294e:	b2ad      	uxth	r5, r5
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    2950:	4606      	mov	r6, r0
	int idx = 0, i, j;

	x = x-CHAR_W;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    2952:	2045      	movs	r0, #69	; 0x45
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    2954:	460c      	mov	r4, r1
    2956:	4617      	mov	r7, r2
	int idx = 0, i, j;

	x = x-CHAR_W;

	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    2958:	f7ff ff4c 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    295c:	4628      	mov	r0, r5
    295e:	f7ff ff77 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
    2962:	2046      	movs	r0, #70	; 0x46
    2964:	f7ff ff46 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x+CHAR_W-1);
    2968:	1e70      	subs	r0, r6, #1
    296a:	b280      	uxth	r0, r0
    296c:	f7ff ff70 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
    2970:	2044      	movs	r0, #68	; 0x44
    2972:	f7ff ff3f 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    2976:	4620      	mov	r0, r4
    2978:	f7ff ff6a 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
    297c:	2044      	movs	r0, #68	; 0x44
    297e:	f7ff ff39 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd((y+CHAR_H-1)<<8);
    2982:	f104 0117 	add.w	r1, r4, #23
    2986:	020a      	lsls	r2, r1, #8
    2988:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
    298c:	f7ff ff60 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    2990:	204e      	movs	r0, #78	; 0x4e
    2992:	f7ff ff2f 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    2996:	4628      	mov	r0, r5
    2998:	f7ff ff5a 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    299c:	204f      	movs	r0, #79	; 0x4f
    299e:	f7ff ff29 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    29a2:	4620      	mov	r0, r4
    29a4:	f7ff ff54 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x22);
    29a8:	2022      	movs	r0, #34	; 0x22
    29aa:	f7ff ff23 	bl	27f4 <Write_Command_Glcd>

	wr_dat_start();
    29ae:	f7ff fecd 	bl	274c <wr_dat_start>
    29b2:	2500      	movs	r5, #0
 *              y       vertical position
 *              c       pointer to character bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Draw_Char (uint16_t x, uint16_t y, uint16_t *c)
{
    29b4:	2400      	movs	r4, #0
	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
	{
		for (i = 0; i<CHAR_W; i++)
		{
			if((c[idx] & (1 << i)) == 0x00)
    29b6:	5b7b      	ldrh	r3, [r7, r5]
    29b8:	fa43 f304 	asr.w	r3, r3, r4
    29bc:	07d8      	lsls	r0, r3, #31
			{
				wr_dat_only(BackColor);
    29be:	bf54      	ite	pl
    29c0:	4807      	ldrpl	r0, [pc, #28]	; (29e0 <GLCD_Draw_Char+0x98>)
			}
			else
			{
				wr_dat_only(TextColor);
    29c2:	4808      	ldrmi	r0, [pc, #32]	; (29e4 <GLCD_Draw_Char+0x9c>)
	Write_Command_Glcd(0x22);

	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
	{
		for (i = 0; i<CHAR_W; i++)
    29c4:	3401      	adds	r4, #1
			{
				wr_dat_only(BackColor);
			}
			else
			{
				wr_dat_only(TextColor);
    29c6:	8801      	ldrh	r1, [r0, #0]
    29c8:	b288      	uxth	r0, r1
    29ca:	f7ff fed3 	bl	2774 <wr_dat_only>
	Write_Command_Glcd(0x22);

	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
	{
		for (i = 0; i<CHAR_W; i++)
    29ce:	2c10      	cmp	r4, #16
    29d0:	d1f1      	bne.n	29b6 <GLCD_Draw_Char+0x6e>
    29d2:	3502      	adds	r5, #2
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x22);

	wr_dat_start();
	for (j = 0; j < CHAR_H; j++)
    29d4:	2d30      	cmp	r5, #48	; 0x30
    29d6:	d1ed      	bne.n	29b4 <GLCD_Draw_Char+0x6c>
			}
		}
		c++;
	}
	wr_dat_stop();
}
    29d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				wr_dat_only(TextColor);
			}
		}
		c++;
	}
	wr_dat_stop();
    29dc:	f7ff bec4 	b.w	2768 <wr_dat_stop>
    29e0:	2007c004 	.word	0x2007c004
    29e4:	10000036 	.word	0x10000036

000029e8 <GLCD_Display_Char>:
 *              c        ascii character
 * @return 		None
 **********************************************************************/
void GLCD_Display_Char (uint16_t ln, uint16_t col, uchar c)
{
	c -= 32;
    29e8:	3a20      	subs	r2, #32
	GLCD_Draw_Char(col * CHAR_W, ln * CHAR_H, (uint16_t *)&Font_24x16[c * CHAR_H]);
    29ea:	2318      	movs	r3, #24
    29ec:	b2d2      	uxtb	r2, r2
    29ee:	4358      	muls	r0, r3
 *              col      column number
 *              c        ascii character
 * @return 		None
 **********************************************************************/
void GLCD_Display_Char (uint16_t ln, uint16_t col, uchar c)
{
    29f0:	b510      	push	{r4, lr}
	c -= 32;
	GLCD_Draw_Char(col * CHAR_W, ln * CHAR_H, (uint16_t *)&Font_24x16[c * CHAR_H]);
    29f2:	4353      	muls	r3, r2
    29f4:	0109      	lsls	r1, r1, #4
    29f6:	4a05      	ldr	r2, [pc, #20]	; (2a0c <GLCD_Display_Char+0x24>)
    29f8:	b28c      	uxth	r4, r1
    29fa:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    29fe:	b281      	uxth	r1, r0
    2a00:	4620      	mov	r0, r4
}
    2a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @return 		None
 **********************************************************************/
void GLCD_Display_Char (uint16_t ln, uint16_t col, uchar c)
{
	c -= 32;
	GLCD_Draw_Char(col * CHAR_W, ln * CHAR_H, (uint16_t *)&Font_24x16[c * CHAR_H]);
    2a06:	f7ff bf9f 	b.w	2948 <GLCD_Draw_Char>
    2a0a:	bf00      	nop
    2a0c:	00075b32 	.word	0x00075b32

00002a10 <GLCD_PutPixel>:
 * @param[in]	x        horizontal position
 *              y        vertical position
 * @return 		None
 **********************************************************************/
void GLCD_PutPixel (uint16_t x, uint16_t y, uint16_t color)
{
    2a10:	b570      	push	{r4, r5, r6, lr}
    2a12:	4604      	mov	r4, r0
	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    2a14:	204e      	movs	r0, #78	; 0x4e
 * @param[in]	x        horizontal position
 *              y        vertical position
 * @return 		None
 **********************************************************************/
void GLCD_PutPixel (uint16_t x, uint16_t y, uint16_t color)
{
    2a16:	460d      	mov	r5, r1
    2a18:	4616      	mov	r6, r2
	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    2a1a:	f7ff feeb 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    2a1e:	4620      	mov	r0, r4
    2a20:	f7ff ff16 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    2a24:	204f      	movs	r0, #79	; 0x4f
    2a26:	f7ff fee5 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    2a2a:	4628      	mov	r0, r5
    2a2c:	f7ff ff10 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x22);      /* RAM data write     */
    2a30:	2022      	movs	r0, #34	; 0x22
    2a32:	f7ff fedf 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(color);
    2a36:	4630      	mov	r0, r6
}
    2a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x22);      /* RAM data write     */
	Write_Data_Glcd(color);
    2a3c:	f7ff bf08 	b.w	2850 <Write_Data_Glcd>

00002a40 <GLCD_Text>:
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
    2a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a44:	b08f      	sub	sp, #60	; 0x3c
    2a46:	af00      	add	r7, sp, #0
    2a48:	461c      	mov	r4, r3
    2a4a:	f997 8068 	ldrsb.w	r8, [r7, #104]	; 0x68
    2a4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
    2a52:	4605      	mov	r5, r0
    2a54:	60fb      	str	r3, [r7, #12]
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    2a56:	fa1f f388 	uxth.w	r3, r8
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
   int16_t i, j, k, l, m;                     // Loop counters
   int8_t pixelData[row];                     // Stores character data
    2a5a:	1de0      	adds	r0, r4, #7
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    2a5c:	633b      	str	r3, [r7, #48]	; 0x30
    2a5e:	4363      	muls	r3, r4
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
    2a60:	62f9      	str	r1, [r7, #44]	; 0x2c
   int16_t i, j, k, l, m;                     // Loop counters
   int8_t pixelData[row];                     // Stores character data
    2a62:	f400 71fc 	and.w	r1, r0, #504	; 0x1f8

   for(i=0; textptr[i] != '\0'; ++i, ++x) // Loop through the passed string
   {
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
    2a66:	fb08 f004 	mul.w	r0, r8, r4
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
{
   int16_t i, j, k, l, m;                     // Loop counters
   int8_t pixelData[row];                     // Stores character data
    2a6a:	ebad 0d01 	sub.w	sp, sp, r1
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    2a6e:	1c59      	adds	r1, r3, #1

   for(i=0; textptr[i] != '\0'; ++i, ++x) // Loop through the passed string
   {
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
    2a70:	6238      	str	r0, [r7, #32]
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    2a72:	b288      	uxth	r0, r1
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
    2a74:	f897 1060 	ldrb.w	r1, [r7, #96]	; 0x60
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    2a78:	61f8      	str	r0, [r7, #28]
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
    2a7a:	fb08 f001 	mul.w	r0, r8, r1
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    2a7e:	3a01      	subs	r2, #1
    2a80:	b29b      	uxth	r3, r3
{
   int16_t i, j, k, l, m;                     // Loop counters
   int8_t pixelData[row];                     // Stores character data
    2a82:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
    2a86:	61b8      	str	r0, [r7, #24]
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    2a88:	62ba      	str	r2, [r7, #40]	; 0x28
    2a8a:	617b      	str	r3, [r7, #20]
{
   int16_t i, j, k, l, m;                     // Loop counters
   int8_t pixelData[row];                     // Stores character data

   for(i=0; textptr[i] != '\0'; ++i, ++x) // Loop through the passed string
    2a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    2a8e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    2a92:	62b9      	str	r1, [r7, #40]	; 0x28
    2a94:	2800      	cmp	r0, #0
    2a96:	d063      	beq.n	2b60 <GLCD_Text+0x120>
   {
      memcpy(pixelData, font[textptr[i]-' '], row);
    2a98:	b246      	sxtb	r6, r0
    2a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2a9c:	f1a6 0220 	sub.w	r2, r6, #32
    2aa0:	fb04 3102 	mla	r1, r4, r2, r3
    2aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2aa6:	4622      	mov	r2, r4
    2aa8:	f002 fa64 	bl	4f74 <memcpy>

      if(x+row*size >= 320)          // Performs character wrapping
    2aac:	6a39      	ldr	r1, [r7, #32]
    2aae:	1868      	adds	r0, r5, r1
    2ab0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
    2ab4:	db05      	blt.n	2ac2 <GLCD_Text+0x82>
      {
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
    2ab6:	69fd      	ldr	r5, [r7, #28]
    2ab8:	6afe      	ldr	r6, [r7, #44]	; 0x2c
    2aba:	19aa      	adds	r2, r5, r6
    2abc:	b213      	sxth	r3, r2
    2abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   {
      memcpy(pixelData, font[textptr[i]-' '], row);

      if(x+row*size >= 320)          // Performs character wrapping
      {
         x = 0;                           // Set x at far left position
    2ac0:	2500      	movs	r5, #0
         y += row*size + 1;                 // Set y at next position down
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
    2ac2:	637d      	str	r5, [r7, #52]	; 0x34
    2ac4:	2600      	movs	r6, #0
    2ac6:	42a6      	cmp	r6, r4
    2ac8:	da45      	bge.n	2b56 <GLCD_Text+0x116>
    2aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    2acc:	f04f 0900 	mov.w	r9, #0
    2ad0:	fa1f fc82 	uxth.w	ip, r2
         x = 0;                           // Set x at far left position
         y += row*size + 1;                 // Set y at next position down
      }
      for(j=0; j<row; ++j, x+=size)         // Loop through character byte data
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
    2ad4:	69bb      	ldr	r3, [r7, #24]
    2ad6:	4599      	cmp	r9, r3
    2ad8:	da36      	bge.n	2b48 <GLCD_Text+0x108>
         {
            if(bit_test(pixelData[j], k)) // Check if the pixel should be set
    2ada:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2adc:	5781      	ldrsb	r1, [r0, r6]
    2ade:	fa41 f209 	asr.w	r2, r1, r9
    2ae2:	07d2      	lsls	r2, r2, #31
    2ae4:	d407      	bmi.n	2af6 <GLCD_Text+0xb6>
    2ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    2ae8:	f109 0901 	add.w	r9, r9, #1
    2aec:	eb0c 0201 	add.w	r2, ip, r1
    2af0:	fa1f fc82 	uxth.w	ip, r2
    2af4:	e7ee      	b.n	2ad4 <GLCD_Text+0x94>
    2af6:	f04f 0b00 	mov.w	fp, #0
            {
               for(l=0; l<size; ++l)      // The next two loops change the
    2afa:	fa0f f38b 	sxth.w	r3, fp
    2afe:	fa1f f088 	uxth.w	r0, r8
    2b02:	4598      	cmp	r8, r3
    2b04:	6138      	str	r0, [r7, #16]
    2b06:	ddee      	ble.n	2ae6 <GLCD_Text+0xa6>
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    2b08:	eb0c 030b 	add.w	r3, ip, fp
    2b0c:	b29b      	uxth	r3, r3
    2b0e:	f04f 0a00 	mov.w	sl, #0
    2b12:	6b78      	ldr	r0, [r7, #52]	; 0x34
            {
               for(l=0; l<size; ++l)      // The next two loops change the
               {                          // character's size
                  for(m=0; m<size; ++m)
                  {
                     GLCD_PutPixel(x+m, y+k*size+l, color); // Draws the pixel
    2b14:	68fa      	ldr	r2, [r7, #12]
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    2b16:	eb0a 0100 	add.w	r1, sl, r0
            {
               for(l=0; l<size; ++l)      // The next two loops change the
               {                          // character's size
                  for(m=0; m<size; ++m)
                  {
                     GLCD_PutPixel(x+m, y+k*size+l, color); // Draws the pixel
    2b1a:	b288      	uxth	r0, r1
    2b1c:	4619      	mov	r1, r3
    2b1e:	60bb      	str	r3, [r7, #8]
    2b20:	f8c7 c004 	str.w	ip, [r7, #4]
    2b24:	f7ff ff74 	bl	2a10 <GLCD_PutPixel>
         {
            if(bit_test(pixelData[j], k)) // Check if the pixel should be set
            {
               for(l=0; l<size; ++l)      // The next two loops change the
               {                          // character's size
                  for(m=0; m<size; ++m)
    2b28:	693a      	ldr	r2, [r7, #16]
    2b2a:	f10a 0a01 	add.w	sl, sl, #1
    2b2e:	fa0f f38a 	sxth.w	r3, sl
    2b32:	b210      	sxth	r0, r2
    2b34:	4283      	cmp	r3, r0
    2b36:	f8d7 c004 	ldr.w	ip, [r7, #4]
    2b3a:	68bb      	ldr	r3, [r7, #8]
    2b3c:	dbe9      	blt.n	2b12 <GLCD_Text+0xd2>
      {
         for(k=0; k<col*size; ++k)          // Loop through the vertical pixels
         {
            if(bit_test(pixelData[j], k)) // Check if the pixel should be set
            {
               for(l=0; l<size; ++l)      // The next two loops change the
    2b3e:	f10b 0b01 	add.w	fp, fp, #1
    2b42:	fa1f fb8b 	uxth.w	fp, fp
    2b46:	e7d8      	b.n	2afa <GLCD_Text+0xba>
 *              font       font 2 dimentional array
 *              size       The size of the text: 1 = 5x7, 2 = 10x14, ...
 *              color      font color
 * @return 		None
 **********************************************************************/
void GLCD_Text(int16_t x, int16_t y, int8_t* textptr, uint8_t row, uint8_t col, int8_t (*font)[row], int8_t size, uint16_t color)
    2b48:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    2b4c:	3601      	adds	r6, #1
    2b4e:	1842      	adds	r2, r0, r1
    2b50:	b213      	sxth	r3, r2
    2b52:	637b      	str	r3, [r7, #52]	; 0x34
    2b54:	e7b7      	b.n	2ac6 <GLCD_Text+0x86>
    2b56:	6979      	ldr	r1, [r7, #20]
    2b58:	1868      	adds	r0, r5, r1
{
   int16_t i, j, k, l, m;                     // Loop counters
   int8_t pixelData[row];                     // Stores character data

   for(i=0; textptr[i] != '\0'; ++i, ++x) // Loop through the passed string
    2b5a:	1c45      	adds	r5, r0, #1
    2b5c:	b22d      	sxth	r5, r5
    2b5e:	e795      	b.n	2a8c <GLCD_Text+0x4c>
               }
            }
         }
      }
   }
}
    2b60:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    2b64:	46bd      	mov	sp, r7
    2b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002b6a <GLCD_Line>:
 *              (x2, y2)   the end coordinate
 *              color      line color
 * @return 		None
 **********************************************************************/
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
    2b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t  x, y, addx, addy, dx, dy;
	int32_t P,i;

	dx = abs((int16_t)(x2 - x1));
    2b6e:	1a14      	subs	r4, r2, r0
	dy = abs((int16_t)(y2 - y1));
    2b70:	1a5e      	subs	r6, r3, r1
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
	int16_t  x, y, addx, addy, dx, dy;
	int32_t P,i;

	dx = abs((int16_t)(x2 - x1));
    2b72:	b224      	sxth	r4, r4
	dy = abs((int16_t)(y2 - y1));
    2b74:	b236      	sxth	r6, r6
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
	int16_t  x, y, addx, addy, dx, dy;
	int32_t P,i;

	dx = abs((int16_t)(x2 - x1));
    2b76:	2c00      	cmp	r4, #0
    2b78:	bfb8      	it	lt
    2b7a:	4264      	neglt	r4, r4
	dy = abs((int16_t)(y2 - y1));
    2b7c:	2e00      	cmp	r6, #0
    2b7e:	bfb8      	it	lt
    2b80:	4276      	neglt	r6, r6
	x = x1;
	y = y1;

	if(x1 > x2)
		addx = -1;
    2b82:	f64f 75ff 	movw	r5, #65535	; 0xffff
		addy = -1;
	else
		addy = 1;


	if(dx >= dy)
    2b86:	b224      	sxth	r4, r4
    2b88:	b236      	sxth	r6, r6
 *              (x2, y2)   the end coordinate
 *              color      line color
 * @return 		None
 **********************************************************************/
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
    2b8a:	b085      	sub	sp, #20
	dy = abs((int16_t)(y2 - y1));
	x = x1;
	y = y1;

	if(x1 > x2)
		addx = -1;
    2b8c:	4290      	cmp	r0, r2
    2b8e:	bfcc      	ite	gt
    2b90:	462f      	movgt	r7, r5
    2b92:	2701      	movle	r7, #1
	else
		addx = 1;
	if(y1 > y2)
		addy = -1;
    2b94:	4299      	cmp	r1, r3
    2b96:	bfcc      	ite	gt
    2b98:	46a8      	movgt	r8, r5
    2b9a:	f04f 0801 	movle.w	r8, #1
	else
		addy = 1;


	if(dx >= dy)
    2b9e:	42b4      	cmp	r4, r6
 *              (x2, y2)   the end coordinate
 *              color      line color
 * @return 		None
 **********************************************************************/
void GLCD_Line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
    2ba0:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
		addy = -1;
	else
		addy = 1;


	if(dx >= dy)
    2ba4:	db29      	blt.n	2bfa <GLCD_Line+0x90>
	{
		P = 2*dy - dx;
    2ba6:	ea4f 0b46 	mov.w	fp, r6, lsl #1
				P += 2*dy;
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
    2baa:	1b36      	subs	r6, r6, r4
    2bac:	0073      	lsls	r3, r6, #1
		addy = 1;


	if(dx >= dy)
	{
		P = 2*dy - dx;
    2bae:	ebc4 050b 	rsb	r5, r4, fp
				P += 2*dy;
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
    2bb2:	9303      	str	r3, [sp, #12]

	if(dx >= dy)
	{
		P = 2*dy - dx;

		for(i=0; i<=dx; ++i)
    2bb4:	468a      	mov	sl, r1
    2bb6:	2600      	movs	r6, #0
    2bb8:	42a6      	cmp	r6, r4
    2bba:	dc47      	bgt.n	2c4c <GLCD_Line+0xe2>
		{
			GLCD_PutPixel(x, y, color);
    2bbc:	fa1f f38a 	uxth.w	r3, sl
    2bc0:	fa1f fe80 	uxth.w	lr, r0
    2bc4:	4619      	mov	r1, r3
    2bc6:	4670      	mov	r0, lr
    2bc8:	464a      	mov	r2, r9
    2bca:	9301      	str	r3, [sp, #4]
    2bcc:	f8cd e008 	str.w	lr, [sp, #8]
    2bd0:	f7ff ff1e 	bl	2a10 <GLCD_PutPixel>
    2bd4:	f8dd c008 	ldr.w	ip, [sp, #8]

			if(P < 0)
    2bd8:	2d00      	cmp	r5, #0
    2bda:	eb0c 0107 	add.w	r1, ip, r7
    2bde:	9b01      	ldr	r3, [sp, #4]
    2be0:	da02      	bge.n	2be8 <GLCD_Line+0x7e>
			{
				P += 2*dy;
    2be2:	445d      	add	r5, fp
				x += addx;
    2be4:	b288      	uxth	r0, r1
    2be6:	e006      	b.n	2bf6 <GLCD_Line+0x8c>
			}
			else
			{
				P += 2*dy - 2*dx;
    2be8:	9803      	ldr	r0, [sp, #12]
				x += addx;
				y += addy;
    2bea:	eb03 0a08 	add.w	sl, r3, r8
				P += 2*dy;
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
    2bee:	182d      	adds	r5, r5, r0
				x += addx;
				y += addy;
    2bf0:	fa1f fa8a 	uxth.w	sl, sl
				x += addx;
			}
			else
			{
				P += 2*dy - 2*dx;
				x += addx;
    2bf4:	b288      	uxth	r0, r1

	if(dx >= dy)
	{
		P = 2*dy - dx;

		for(i=0; i<=dx; ++i)
    2bf6:	3601      	adds	r6, #1
    2bf8:	e7de      	b.n	2bb8 <GLCD_Line+0x4e>
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    2bfa:	1ba2      	subs	r2, r4, r6
			}
		}
	}
	else
	{
		P = 2*dx - dy;
    2bfc:	ea4f 0a44 	mov.w	sl, r4, lsl #1
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    2c00:	0053      	lsls	r3, r2, #1
			}
		}
	}
	else
	{
		P = 2*dx - dy;
    2c02:	ebc6 050a 	rsb	r5, r6, sl
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    2c06:	9303      	str	r3, [sp, #12]
	}
	else
	{
		P = 2*dx - dy;

		for(i=0; i<=dy; ++i)
    2c08:	4683      	mov	fp, r0
    2c0a:	2400      	movs	r4, #0
    2c0c:	42b4      	cmp	r4, r6
    2c0e:	dc1d      	bgt.n	2c4c <GLCD_Line+0xe2>
		{
			GLCD_PutPixel(x, y, color);
    2c10:	fa1f fc81 	uxth.w	ip, r1
    2c14:	fa1f f38b 	uxth.w	r3, fp
    2c18:	4661      	mov	r1, ip
    2c1a:	4618      	mov	r0, r3
    2c1c:	464a      	mov	r2, r9
    2c1e:	f8cd c008 	str.w	ip, [sp, #8]
    2c22:	9301      	str	r3, [sp, #4]
    2c24:	f7ff fef4 	bl	2a10 <GLCD_PutPixel>
    2c28:	f8dd c008 	ldr.w	ip, [sp, #8]

			if(P < 0)
    2c2c:	2d00      	cmp	r5, #0
    2c2e:	eb0c 0108 	add.w	r1, ip, r8
    2c32:	9801      	ldr	r0, [sp, #4]
    2c34:	da01      	bge.n	2c3a <GLCD_Line+0xd0>
			{
				P += 2*dx;
    2c36:	4455      	add	r5, sl
    2c38:	e005      	b.n	2c46 <GLCD_Line+0xdc>
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    2c3a:	9a03      	ldr	r2, [sp, #12]
				x += addx;
    2c3c:	eb00 0b07 	add.w	fp, r0, r7
				P += 2*dx;
				y += addy;
			}
			else
			{
				P += 2*dx - 2*dy;
    2c40:	18ad      	adds	r5, r5, r2
				x += addx;
    2c42:	fa1f fb8b 	uxth.w	fp, fp
				y += addy;
    2c46:	b289      	uxth	r1, r1
	}
	else
	{
		P = 2*dx - dy;

		for(i=0; i<=dy; ++i)
    2c48:	3401      	adds	r4, #1
    2c4a:	e7df      	b.n	2c0c <GLCD_Line+0xa2>
				x += addx;
				y += addy;
			}
		}
	}
}
    2c4c:	b005      	add	sp, #20
    2c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002c52 <GLCD_LBar>:
 *              dec        decrement bar YES/NO or TRUE/FALSE
 *              color      Bar Color
 * @return 		None
 **********************************************************************/
void GLCD_LBar(int16_t index, uint8_t width, int16_t y, int16_t per, Bool dec,uint16_t color)
{
    2c52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2c56:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
    2c5a:	4614      	mov	r4, r2
    2c5c:	461d      	mov	r5, r3
    2c5e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
	int16_t x1,x2,h,y_diff;

	if(dec)
    2c62:	b10e      	cbz	r6, 2c68 <GLCD_LBar+0x16>
	{
		y_diff=y+(per);
    2c64:	189b      	adds	r3, r3, r2
    2c66:	e000      	b.n	2c6a <GLCD_LBar+0x18>
	}
	else
	{
		y_diff=y-(per);
    2c68:	1ad3      	subs	r3, r2, r3
    2c6a:	b29b      	uxth	r3, r3
	}

	if((y_diff>=20) && (index<=10) && !dec)
    2c6c:	b21a      	sxth	r2, r3
    2c6e:	2a13      	cmp	r2, #19
    2c70:	dd1d      	ble.n	2cae <GLCD_LBar+0x5c>
    2c72:	280a      	cmp	r0, #10
    2c74:	dc1b      	bgt.n	2cae <GLCD_LBar+0x5c>
    2c76:	2e00      	cmp	r6, #0
    2c78:	d13a      	bne.n	2cf0 <GLCD_LBar+0x9e>
	{
		for(h=0;h<=per;h++)
		{
			x1 = 30+(index*26)-(width-(width/2));
    2c7a:	221a      	movs	r2, #26
    2c7c:	4350      	muls	r0, r2
    2c7e:	301e      	adds	r0, #30
    2c80:	eb00 0351 	add.w	r3, r0, r1, lsr #1
    2c84:	b298      	uxth	r0, r3
    2c86:	1a41      	subs	r1, r0, r1
    2c88:	fa1f f881 	uxth.w	r8, r1
			x2 = x1+width;
    2c8c:	fa1f f980 	uxth.w	r9, r0
		y_diff=y-(per);
	}

	if((y_diff>=20) && (index<=10) && !dec)
	{
		for(h=0;h<=per;h++)
    2c90:	b232      	sxth	r2, r6
    2c92:	42aa      	cmp	r2, r5
    2c94:	dc2e      	bgt.n	2cf4 <GLCD_LBar+0xa2>
 *              per        Percentage height
 *              dec        decrement bar YES/NO or TRUE/FALSE
 *              color      Bar Color
 * @return 		None
 **********************************************************************/
void GLCD_LBar(int16_t index, uint8_t width, int16_t y, int16_t per, Bool dec,uint16_t color)
    2c96:	1ba3      	subs	r3, r4, r6
	{
		for(h=0;h<=per;h++)
		{
			x1 = 30+(index*26)-(width-(width/2));
			x2 = x1+width;
			GLCD_Line(x1,y-h,x2,y-h,color);
    2c98:	b219      	sxth	r1, r3
    2c9a:	9700      	str	r7, [sp, #0]
    2c9c:	fa0f f088 	sxth.w	r0, r8
    2ca0:	fa0f f289 	sxth.w	r2, r9
    2ca4:	460b      	mov	r3, r1
    2ca6:	f7ff ff60 	bl	2b6a <GLCD_Line>
    2caa:	3601      	adds	r6, #1
    2cac:	e7f0      	b.n	2c90 <GLCD_LBar+0x3e>
		}
	}
	else if(dec && (y_diff<=219) && (index<=10))
    2cae:	b30e      	cbz	r6, 2cf4 <GLCD_LBar+0xa2>
    2cb0:	b21b      	sxth	r3, r3
    2cb2:	2bdb      	cmp	r3, #219	; 0xdb
    2cb4:	dc1e      	bgt.n	2cf4 <GLCD_LBar+0xa2>
    2cb6:	280a      	cmp	r0, #10
    2cb8:	dc1c      	bgt.n	2cf4 <GLCD_LBar+0xa2>
	{
		for(h=0;h<=per;h++)
		{
			x1 = 30+(index*26)-(width-(width/2));
    2cba:	261a      	movs	r6, #26
    2cbc:	4370      	muls	r0, r6
    2cbe:	301e      	adds	r0, #30
    2cc0:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    2cc4:	b282      	uxth	r2, r0
    2cc6:	1a51      	subs	r1, r2, r1
    2cc8:	fa1f f881 	uxth.w	r8, r1
			x2 = x1+width;
    2ccc:	fa1f f982 	uxth.w	r9, r2
    2cd0:	2600      	movs	r6, #0
			GLCD_Line(x1,y-h,x2,y-h,color);
		}
	}
	else if(dec && (y_diff<=219) && (index<=10))
	{
		for(h=0;h<=per;h++)
    2cd2:	b233      	sxth	r3, r6
    2cd4:	42ab      	cmp	r3, r5
    2cd6:	dc0d      	bgt.n	2cf4 <GLCD_LBar+0xa2>
 *              per        Percentage height
 *              dec        decrement bar YES/NO or TRUE/FALSE
 *              color      Bar Color
 * @return 		None
 **********************************************************************/
void GLCD_LBar(int16_t index, uint8_t width, int16_t y, int16_t per, Bool dec,uint16_t color)
    2cd8:	1930      	adds	r0, r6, r4
	{
		for(h=0;h<=per;h++)
		{
			x1 = 30+(index*26)-(width-(width/2));
			x2 = x1+width;
			GLCD_Line(x1,y+h,x2,y+h,color);
    2cda:	b201      	sxth	r1, r0
    2cdc:	9700      	str	r7, [sp, #0]
    2cde:	fa0f f088 	sxth.w	r0, r8
    2ce2:	fa0f f289 	sxth.w	r2, r9
    2ce6:	460b      	mov	r3, r1
    2ce8:	f7ff ff3f 	bl	2b6a <GLCD_Line>
    2cec:	3601      	adds	r6, #1
    2cee:	e7f0      	b.n	2cd2 <GLCD_LBar+0x80>
			x1 = 30+(index*26)-(width-(width/2));
			x2 = x1+width;
			GLCD_Line(x1,y-h,x2,y-h,color);
		}
	}
	else if(dec && (y_diff<=219) && (index<=10))
    2cf0:	2adb      	cmp	r2, #219	; 0xdb
    2cf2:	e7e1      	b.n	2cb8 <GLCD_LBar+0x66>
			x1 = 30+(index*26)-(width-(width/2));
			x2 = x1+width;
			GLCD_Line(x1,y+h,x2,y+h,color);
		}
	}
}
    2cf4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

00002cf8 <GLCD_Triangle>:
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
{
    2cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cfc:	b08f      	sub	sp, #60	; 0x3c
    2cfe:	9306      	str	r3, [sp, #24]
    if(cfg->fill)
    2d00:	781b      	ldrb	r3, [r3, #0]
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
{
    2d02:	4607      	mov	r7, r0
    2d04:	460d      	mov	r5, r1
    2d06:	4616      	mov	r6, r2
    if(cfg->fill)
    2d08:	2b00      	cmp	r3, #0
    2d0a:	f000 8230 	beq.w	316e <GLCD_Triangle+0x476>
    	Bool changed1 = FALSE;
    	Bool changed2 = FALSE;
    	int16_t signx1,signx2,dx1,dy1,dx2,dy2;
    	uint16_t e1,e2;
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    2d0e:	8844      	ldrh	r4, [r0, #2]
    2d10:	884a      	ldrh	r2, [r1, #2]
    2d12:	b220      	sxth	r0, r4
    2d14:	b211      	sxth	r1, r2
    2d16:	4288      	cmp	r0, r1
    2d18:	dd14      	ble.n	2d44 <GLCD_Triangle+0x4c>
    2d1a:	ea82 0304 	eor.w	r3, r2, r4
    2d1e:	807b      	strh	r3, [r7, #2]
    2d20:	886c      	ldrh	r4, [r5, #2]
    2d22:	8828      	ldrh	r0, [r5, #0]
    2d24:	4063      	eors	r3, r4
    2d26:	806b      	strh	r3, [r5, #2]
    2d28:	887a      	ldrh	r2, [r7, #2]
    2d2a:	8839      	ldrh	r1, [r7, #0]
    2d2c:	4053      	eors	r3, r2
    2d2e:	807b      	strh	r3, [r7, #2]
    2d30:	ea80 0301 	eor.w	r3, r0, r1
    2d34:	b29c      	uxth	r4, r3
    2d36:	803c      	strh	r4, [r7, #0]
    2d38:	882a      	ldrh	r2, [r5, #0]
    2d3a:	4054      	eors	r4, r2
    2d3c:	802c      	strh	r4, [r5, #0]
    2d3e:	8838      	ldrh	r0, [r7, #0]
    2d40:	4044      	eors	r4, r0
    2d42:	803c      	strh	r4, [r7, #0]
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    2d44:	887b      	ldrh	r3, [r7, #2]
    2d46:	8874      	ldrh	r4, [r6, #2]
    2d48:	b21a      	sxth	r2, r3
    2d4a:	b221      	sxth	r1, r4
    2d4c:	428a      	cmp	r2, r1
    2d4e:	dd14      	ble.n	2d7a <GLCD_Triangle+0x82>
    2d50:	ea84 0003 	eor.w	r0, r4, r3
    2d54:	8078      	strh	r0, [r7, #2]
    2d56:	8873      	ldrh	r3, [r6, #2]
    2d58:	8832      	ldrh	r2, [r6, #0]
    2d5a:	4058      	eors	r0, r3
    2d5c:	8070      	strh	r0, [r6, #2]
    2d5e:	887c      	ldrh	r4, [r7, #2]
    2d60:	8839      	ldrh	r1, [r7, #0]
    2d62:	4060      	eors	r0, r4
    2d64:	8078      	strh	r0, [r7, #2]
    2d66:	ea82 0001 	eor.w	r0, r2, r1
    2d6a:	b283      	uxth	r3, r0
    2d6c:	803b      	strh	r3, [r7, #0]
    2d6e:	8834      	ldrh	r4, [r6, #0]
    2d70:	4063      	eors	r3, r4
    2d72:	8033      	strh	r3, [r6, #0]
    2d74:	883a      	ldrh	r2, [r7, #0]
    2d76:	4053      	eors	r3, r2
    2d78:	803b      	strh	r3, [r7, #0]
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }
    2d7a:	886b      	ldrh	r3, [r5, #2]
    2d7c:	8874      	ldrh	r4, [r6, #2]
    2d7e:	b218      	sxth	r0, r3
    2d80:	b221      	sxth	r1, r4
    2d82:	4288      	cmp	r0, r1
    2d84:	dd13      	ble.n	2dae <GLCD_Triangle+0xb6>
    2d86:	4063      	eors	r3, r4
    2d88:	806b      	strh	r3, [r5, #2]
    2d8a:	8872      	ldrh	r2, [r6, #2]
    2d8c:	8830      	ldrh	r0, [r6, #0]
    2d8e:	4053      	eors	r3, r2
    2d90:	8073      	strh	r3, [r6, #2]
    2d92:	886c      	ldrh	r4, [r5, #2]
    2d94:	8829      	ldrh	r1, [r5, #0]
    2d96:	4063      	eors	r3, r4
    2d98:	806b      	strh	r3, [r5, #2]
    2d9a:	ea80 0301 	eor.w	r3, r0, r1
    2d9e:	b29c      	uxth	r4, r3
    2da0:	802c      	strh	r4, [r5, #0]
    2da2:	8832      	ldrh	r2, [r6, #0]
    2da4:	4054      	eors	r4, r2
    2da6:	8034      	strh	r4, [r6, #0]
    2da8:	8828      	ldrh	r0, [r5, #0]
    2daa:	4044      	eors	r4, r0
    2dac:	802c      	strh	r4, [r5, #0]

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    2dae:	8839      	ldrh	r1, [r7, #0]

    	dx1 = (int16_t)(p2->x - p1->x);
    2db0:	882a      	ldrh	r2, [r5, #0]
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    2db2:	b28c      	uxth	r4, r1

    	dx1 = (int16_t)(p2->x - p1->x);
    2db4:	1b10      	subs	r0, r2, r4
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    2db6:	887b      	ldrh	r3, [r7, #2]

    	dx1 = (int16_t)(p2->x - p1->x);
    2db8:	b282      	uxth	r2, r0
    2dba:	fa1f f982 	uxth.w	r9, r2
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    2dbe:	fa1f f883 	uxth.w	r8, r3

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    2dc2:	f419 4f00 	tst.w	r9, #32768	; 0x8000
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    2dc6:	f8cd 8014 	str.w	r8, [sp, #20]

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    2dca:	d008      	beq.n	2dde <GLCD_Triangle+0xe6>
    2dcc:	f1c2 0900 	rsb	r9, r2, #0
    2dd0:	f64f 7cff 	movw	ip, #65535	; 0xffff
    2dd4:	fa1f f989 	uxth.w	r9, r9
    2dd8:	f8cd c020 	str.w	ip, [sp, #32]
    2ddc:	e003      	b.n	2de6 <GLCD_Triangle+0xee>
    2dde:	f04f 0a01 	mov.w	sl, #1
    2de2:	f8cd a020 	str.w	sl, [sp, #32]
    	dy1 = (int16_t)(p2->y - p1->y);
    2de6:	f8b5 b002 	ldrh.w	fp, [r5, #2]
    2dea:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2dee:	ebc8 000b 	rsb	r0, r8, fp
    2df2:	b282      	uxth	r2, r0

    	dx2 = (int8_t)(p3->x - p1->x);
    2df4:	7830      	ldrb	r0, [r6, #0]

    	t1x=t2x=p1->x; y=p1->y;   // Starting points

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);
    2df6:	9203      	str	r2, [sp, #12]

    	dx2 = (int8_t)(p3->x - p1->x);
    2df8:	1a41      	subs	r1, r0, r1
    2dfa:	b24a      	sxtb	r2, r1
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    2dfc:	b211      	sxth	r1, r2

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    2dfe:	fa1f fa82 	uxth.w	sl, r2
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    2e02:	2900      	cmp	r1, #0

    	dx1 = (int16_t)(p2->x - p1->x);
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    2e04:	f8cd a010 	str.w	sl, [sp, #16]
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    2e08:	da07      	bge.n	2e1a <GLCD_Triangle+0x122>
    2e0a:	4252      	negs	r2, r2
    2e0c:	b290      	uxth	r0, r2
    2e0e:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2e12:	9004      	str	r0, [sp, #16]
    2e14:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    2e18:	e003      	b.n	2e22 <GLCD_Triangle+0x12a>
    2e1a:	f04f 0c01 	mov.w	ip, #1
    2e1e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    	dy2 = (int8_t)(p3->y - p1->y);
    2e22:	78b1      	ldrb	r1, [r6, #2]

    	if (dy1 > dx1)
    2e24:	f8dd c00c 	ldr.w	ip, [sp, #12]
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    	dy2 = (int8_t)(p3->y - p1->y);
    2e28:	1aca      	subs	r2, r1, r3
    2e2a:	b251      	sxtb	r1, r2

    	if (dy1 > dx1)
    2e2c:	fa0f f88c 	sxth.w	r8, ip
    2e30:	fa0f f289 	sxth.w	r2, r9
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    	dy2 = (int8_t)(p3->y - p1->y);
    2e34:	fa1f fa81 	uxth.w	sl, r1

    	if (dy1 > dx1)
    2e38:	4590      	cmp	r8, r2
    	if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int16_t)(p2->y - p1->y);

    	dx2 = (int8_t)(p3->x - p1->x);
    	if(dx2<0) { dx2=-dx2; signx2=-1; } else signx2=1;
    	dy2 = (int8_t)(p3->y - p1->y);
    2e3a:	4608      	mov	r0, r1
    2e3c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34

    	if (dy1 > dx1)
    2e40:	dd0f      	ble.n	2e62 <GLCD_Triangle+0x16a>
    	{   // swap values
            SWAP(dx1,dy1);
    2e42:	f8dd a00c 	ldr.w	sl, [sp, #12]
    2e46:	ea89 090a 	eor.w	r9, r9, sl
    2e4a:	ea89 0c0a 	eor.w	ip, r9, sl
    2e4e:	fa1f f88c 	uxth.w	r8, ip
    2e52:	ea88 0209 	eor.w	r2, r8, r9
    2e56:	fa1f f982 	uxth.w	r9, r2
    2e5a:	f8cd 800c 	str.w	r8, [sp, #12]
    		changed1 = TRUE;
    2e5e:	2201      	movs	r2, #1
    2e60:	e000      	b.n	2e64 <GLCD_Triangle+0x16c>
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
{
    if(cfg->fill)
    {
    	uint16_t t1x,t2x,y,minx,maxx,t1xp,t2xp;
    	Bool changed1 = FALSE;
    2e62:	2200      	movs	r2, #0
    	if (dy1 > dx1)
    	{   // swap values
            SWAP(dx1,dy1);
    		changed1 = TRUE;
    	}
    	if (dy2 > dx2)
    2e64:	f8dd a010 	ldr.w	sl, [sp, #16]
    2e68:	b200      	sxth	r0, r0
    2e6a:	fa0f fc8a 	sxth.w	ip, sl
    2e6e:	4560      	cmp	r0, ip
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
{
    if(cfg->fill)
    {
    	uint16_t t1x,t2x,y,minx,maxx,t1xp,t2xp;
    	Bool changed1 = FALSE;
    2e70:	9207      	str	r2, [sp, #28]
    	if (dy1 > dx1)
    	{   // swap values
            SWAP(dx1,dy1);
    		changed1 = TRUE;
    	}
    	if (dy2 > dx2)
    2e72:	dd0d      	ble.n	2e90 <GLCD_Triangle+0x198>
    	{   // swap values
            SWAP(dy2,dx2);
    2e74:	ea8a 0001 	eor.w	r0, sl, r1
    2e78:	b281      	uxth	r1, r0
    2e7a:	ea81 080a 	eor.w	r8, r1, sl
    2e7e:	ea88 0001 	eor.w	r0, r8, r1
    2e82:	b281      	uxth	r1, r0
    		changed2 = TRUE;
    2e84:	2001      	movs	r0, #1
            SWAP(dx1,dy1);
    		changed1 = TRUE;
    	}
    	if (dy2 > dx2)
    	{   // swap values
            SWAP(dy2,dx2);
    2e86:	f8cd 8010 	str.w	r8, [sp, #16]
    2e8a:	910d      	str	r1, [sp, #52]	; 0x34
    		changed2 = TRUE;
    2e8c:	9009      	str	r0, [sp, #36]	; 0x24
    2e8e:	e001      	b.n	2e94 <GLCD_Triangle+0x19c>
{
    if(cfg->fill)
    {
    	uint16_t t1x,t2x,y,minx,maxx,t1xp,t2xp;
    	Bool changed1 = FALSE;
    	Bool changed2 = FALSE;
    2e90:	2100      	movs	r1, #0
    2e92:	9109      	str	r1, [sp, #36]	; 0x24
    	{   // swap values
            SWAP(dy2,dx2);
    		changed2 = TRUE;
    	}

    	e2 = (uint16_t)(dx2>>1);
    2e94:	f8dd a010 	ldr.w	sl, [sp, #16]
        // Flat top, just process the second half
        if(p1->y==p2->y) goto next;
    2e98:	459b      	cmp	fp, r3
    	{   // swap values
            SWAP(dy2,dx2);
    		changed2 = TRUE;
    	}

    	e2 = (uint16_t)(dx2>>1);
    2e9a:	f34a 014e 	sbfx	r1, sl, #1, #15
    2e9e:	fa1f fc81 	uxth.w	ip, r1
        // Flat top, just process the second half
        if(p1->y==p2->y) goto next;
    2ea2:	f000 8095 	beq.w	2fd0 <GLCD_Triangle+0x2d8>
        e1 = (uint16_t)(dx1>>1);
    2ea6:	f349 034e 	sbfx	r3, r9, #1, #15
    2eaa:	fa1f fa83 	uxth.w	sl, r3
        // Sort vertices
    	if (p1->y > p2->y) { SWAP(p1->y,p2->y); SWAP(p1->x,p2->x); }
    	if (p1->y > p3->y) { SWAP(p1->y,p3->y); SWAP(p1->x,p3->x); }
    	if (p2->y > p3->y) { SWAP(p2->y,p3->y); SWAP(p2->x,p3->x); }

    	t1x=t2x=p1->x; y=p1->y;   // Starting points
    2eae:	46a0      	mov	r8, r4
    	e2 = (uint16_t)(dx2>>1);
        // Flat top, just process the second half
        if(p1->y==p2->y) goto next;
        e1 = (uint16_t)(dx1>>1);

    	for (uint8_t i = 0; i < dx1;)
    2eb0:	f04f 0b00 	mov.w	fp, #0
    2eb4:	fa0f f389 	sxth.w	r3, r9
    2eb8:	459b      	cmp	fp, r3
    2eba:	f280 8089 	bge.w	2fd0 <GLCD_Triangle+0x2d8>
    	{
    		t1xp=0; t2xp=0;
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    2ebe:	45a0      	cmp	r8, r4
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    2ec0:	f04f 0e00 	mov.w	lr, #0
        e1 = (uint16_t)(dx1>>1);

    	for (uint8_t i = 0; i < dx1;)
    	{
    		t1xp=0; t2xp=0;
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    2ec4:	bf39      	ittee	cc
    2ec6:	4622      	movcc	r2, r4
    2ec8:	4641      	movcc	r1, r8
    2eca:	4642      	movcs	r2, r8
    2ecc:	4621      	movcs	r1, r4
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    2ece:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    2ed2:	459b      	cmp	fp, r3
    2ed4:	da08      	bge.n	2ee8 <GLCD_Triangle+0x1f0>
    		{
    			i++;
    			e1 += dy1;
    2ed6:	9803      	ldr	r0, [sp, #12]
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    		{
    			i++;
    2ed8:	f10b 0b01 	add.w	fp, fp, #1
    			e1 += dy1;
    2edc:	4482      	add	sl, r0
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    		else		{ minx=t2x; maxx=t1x; }
            // process first line until y value is about to change
    		while(i<dx1)
    		{
    			i++;
    2ede:	fa5f fb8b 	uxtb.w	fp, fp
    			e1 += dy1;
    2ee2:	fa1f fa8a 	uxth.w	sl, sl
    	   	   	while (e1 >= dx1)
    2ee6:	e00f      	b.n	2f08 <GLCD_Triangle+0x210>
    2ee8:	2300      	movs	r3, #0
    2eea:	930c      	str	r3, [sp, #48]	; 0x30
    2eec:	e02d      	b.n	2f4a <GLCD_Triangle+0x252>
    	   	   	{
    				e1 -= dx1;
       	   	   	   if (changed1) t1xp=signx1;//t1x += signx1;
    2eee:	9807      	ldr	r0, [sp, #28]
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    2ef0:	ebc9 0a0a 	rsb	sl, r9, sl
    2ef4:	fa1f fa8a 	uxth.w	sl, sl
    			i++;
    			e1 += dy1;
    	   	   	while (e1 >= dx1)
    	   	   	{
    				e1 -= dx1;
       	   	   	   if (changed1) t1xp=signx1;//t1x += signx1;
    2ef8:	2800      	cmp	r0, #0
    2efa:	d0f5      	beq.n	2ee8 <GLCD_Triangle+0x1f0>
    2efc:	f8dd e020 	ldr.w	lr, [sp, #32]
    2f00:	fa1f fe8e 	uxth.w	lr, lr
    2f04:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
            // process first line until y value is about to change
    		while(i<dx1)
    		{
    			i++;
    			e1 += dy1;
    	   	   	while (e1 >= dx1)
    2f08:	459a      	cmp	sl, r3
    2f0a:	daf0      	bge.n	2eee <GLCD_Triangle+0x1f6>
    	   	   	{
    				e1 -= dx1;
       	   	   	   if (changed1) t1xp=signx1;//t1x += signx1;
    				else          goto next1;
    			}
    			if (changed1) break;
    2f0c:	9807      	ldr	r0, [sp, #28]
    2f0e:	2800      	cmp	r0, #0
    2f10:	d1ea      	bne.n	2ee8 <GLCD_Triangle+0x1f0>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    2f12:	f8dd e020 	ldr.w	lr, [sp, #32]
    2f16:	44f0      	add	r8, lr
    2f18:	fa1f f888 	uxth.w	r8, r8
    2f1c:	e7d9      	b.n	2ed2 <GLCD_Triangle+0x1da>
    2f1e:	f8dd e010 	ldr.w	lr, [sp, #16]
    		{
    			e2 += dy2;
    			while (e2 >= dx2)
    			{
    				e2 -= dx2;
    				if (changed2) t2xp=signx2;//t2x += signx2;
    2f22:	9809      	ldr	r0, [sp, #36]	; 0x24
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    2f24:	ebce 030c 	rsb	r3, lr, ip
    2f28:	fa1f fc83 	uxth.w	ip, r3
    		{
    			e2 += dy2;
    			while (e2 >= dx2)
    			{
    				e2 -= dx2;
    				if (changed2) t2xp=signx2;//t2x += signx2;
    2f2c:	b198      	cbz	r0, 2f56 <GLCD_Triangle+0x25e>
    2f2e:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f30:	b283      	uxth	r3, r0
    2f32:	930c      	str	r3, [sp, #48]	; 0x30
    	next1:
            // process second line until y value is about to change
    		while (1)
    		{
    			e2 += dy2;
    			while (e2 >= dx2)
    2f34:	f8dd e010 	ldr.w	lr, [sp, #16]
    2f38:	fa0f f08e 	sxth.w	r0, lr
    2f3c:	4584      	cmp	ip, r0
    2f3e:	daee      	bge.n	2f1e <GLCD_Triangle+0x226>
    			{
    				e2 -= dx2;
    				if (changed2) t2xp=signx2;//t2x += signx2;
    				else          goto next2;
    			}
    			if (changed2)     break;
    2f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f42:	b943      	cbnz	r3, 2f56 <GLCD_Triangle+0x25e>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    2f44:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f46:	1824      	adds	r4, r4, r0
    2f48:	b2a4      	uxth	r4, r4
    	// Move line
    	next1:
            // process second line until y value is about to change
    		while (1)
    		{
    			e2 += dy2;
    2f4a:	980d      	ldr	r0, [sp, #52]	; 0x34
    2f4c:	eb0c 0300 	add.w	r3, ip, r0
    2f50:	fa1f fc83 	uxth.w	ip, r3
    			while (e2 >= dx2)
    2f54:	e7ee      	b.n	2f34 <GLCD_Triangle+0x23c>
    			else              t2x += signx2;
    		}
    	next2:
    		if(minx>t1x) minx=t1x; if(minx>t2x) minx=t2x;
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    2f56:	f8dd e014 	ldr.w	lr, [sp, #20]
    2f5a:	9b06      	ldr	r3, [sp, #24]
    2f5c:	4588      	cmp	r8, r1
    2f5e:	bf38      	it	cc
    2f60:	4641      	movcc	r1, r8
    2f62:	4590      	cmp	r8, r2
    2f64:	bf28      	it	cs
    2f66:	4642      	movcs	r2, r8
    2f68:	b288      	uxth	r0, r1
    2f6a:	b292      	uxth	r2, r2
    2f6c:	fa0f f18e 	sxth.w	r1, lr
    2f70:	f8b3 e004 	ldrh.w	lr, [r3, #4]
    2f74:	42a0      	cmp	r0, r4
    2f76:	bf28      	it	cs
    2f78:	4620      	movcs	r0, r4
    2f7a:	42a2      	cmp	r2, r4
    2f7c:	bf38      	it	cc
    2f7e:	4622      	movcc	r2, r4
    2f80:	460b      	mov	r3, r1
    2f82:	f8cd e000 	str.w	lr, [sp]
    2f86:	b200      	sxth	r0, r0
    2f88:	b212      	sxth	r2, r2
    2f8a:	f8cd c008 	str.w	ip, [sp, #8]
    2f8e:	f7ff fdec 	bl	2b6a <GLCD_Line>

    		// Now increase y
    		if(!changed1) t1x += signx1;
    2f92:	9907      	ldr	r1, [sp, #28]
    2f94:	f8dd c008 	ldr.w	ip, [sp, #8]
    2f98:	b919      	cbnz	r1, 2fa2 <GLCD_Triangle+0x2aa>
    2f9a:	9808      	ldr	r0, [sp, #32]
    2f9c:	4480      	add	r8, r0
    2f9e:	fa1f f888 	uxth.w	r8, r8
    		t1x+=t1xp;
    2fa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    		if(!changed2) t2x += signx2;
    2fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y

    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    2fa6:	eb08 0302 	add.w	r3, r8, r2
    2faa:	fa1f f883 	uxth.w	r8, r3
    		if(!changed2) t2x += signx2;
    2fae:	b911      	cbnz	r1, 2fb6 <GLCD_Triangle+0x2be>
    2fb0:	980a      	ldr	r0, [sp, #40]	; 0x28
    2fb2:	1824      	adds	r4, r4, r0
    2fb4:	b2a4      	uxth	r4, r4
    		t2x+=t2xp;
        	y += 1;
    2fb6:	9b05      	ldr	r3, [sp, #20]

    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    2fb8:	990c      	ldr	r1, [sp, #48]	; 0x30
        	y += 1;
    2fba:	1c58      	adds	r0, r3, #1

    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    2fbc:	1862      	adds	r2, r4, r1
    2fbe:	b294      	uxth	r4, r2
        	y += 1;
    2fc0:	b282      	uxth	r2, r0
    2fc2:	9205      	str	r2, [sp, #20]
    		if(y==p2->y) break;
    2fc4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    2fc8:	9a05      	ldr	r2, [sp, #20]
    2fca:	429a      	cmp	r2, r3
    2fcc:	f47f af72 	bne.w	2eb4 <GLCD_Triangle+0x1bc>
       }
    	next:
    	// Second half
    	dx1 = (int8_t)(p3->x - p2->x); if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    2fd0:	7831      	ldrb	r1, [r6, #0]
    2fd2:	f8b5 a000 	ldrh.w	sl, [r5]
    2fd6:	ebca 0201 	rsb	r2, sl, r1
    2fda:	b250      	sxtb	r0, r2
    2fdc:	b201      	sxth	r1, r0
    2fde:	2900      	cmp	r1, #0
    2fe0:	fa1f f980 	uxth.w	r9, r0
    2fe4:	da07      	bge.n	2ff6 <GLCD_Triangle+0x2fe>
    2fe6:	f1c0 0900 	rsb	r9, r0, #0
    2fea:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2fee:	fa1f f989 	uxth.w	r9, r9
    2ff2:	9007      	str	r0, [sp, #28]
    2ff4:	e001      	b.n	2ffa <GLCD_Triangle+0x302>
    2ff6:	2201      	movs	r2, #1
    2ff8:	9207      	str	r2, [sp, #28]
    	dy1 = (int8_t)(p3->y - p2->y);
    2ffa:	78b1      	ldrb	r1, [r6, #2]
    2ffc:	78ab      	ldrb	r3, [r5, #2]
    	t1x=p2->x;
    2ffe:	fa1f f88a 	uxth.w	r8, sl
    		if(y==p2->y) break;
       }
    	next:
    	// Second half
    	dx1 = (int8_t)(p3->x - p2->x); if(dx1<0) { dx1=-dx1; signx1=-1; } else signx1=1;
    	dy1 = (int8_t)(p3->y - p2->y);
    3002:	1aca      	subs	r2, r1, r3
    3004:	b250      	sxtb	r0, r2
    3006:	b281      	uxth	r1, r0
    3008:	910c      	str	r1, [sp, #48]	; 0x30
    	t1x=p2->x;

    	if (dy1 > dx1)
    300a:	b202      	sxth	r2, r0
    300c:	fa0f f189 	sxth.w	r1, r9
    3010:	428a      	cmp	r2, r1
    3012:	dd0b      	ble.n	302c <GLCD_Triangle+0x334>
    	{   // swap values
            SWAP(dy1,dx1);
    3014:	ea89 0200 	eor.w	r2, r9, r0
    3018:	b293      	uxth	r3, r2
    301a:	ea83 0909 	eor.w	r9, r3, r9
    301e:	ea89 0003 	eor.w	r0, r9, r3
    3022:	b282      	uxth	r2, r0
    3024:	920c      	str	r2, [sp, #48]	; 0x30
    		changed1 = TRUE;
    3026:	2201      	movs	r2, #1
    3028:	9203      	str	r2, [sp, #12]
    302a:	e001      	b.n	3030 <GLCD_Triangle+0x338>
    	} else changed1=FALSE;
    302c:	2000      	movs	r0, #0
    302e:	9003      	str	r0, [sp, #12]

    	e1 = (uint8_t)(dx1>>1);
    3030:	f3c9 0b47 	ubfx	fp, r9, #1, #8

    	for (uint8_t i = 0; i<=dx1; i++)
    3034:	f04f 0a00 	mov.w	sl, #0
    3038:	fa0f f389 	sxth.w	r3, r9
    303c:	459a      	cmp	sl, r3
    303e:	f300 808d 	bgt.w	315c <GLCD_Triangle+0x464>
    	{
    		t1xp=0; t2xp=0;
    		if(t1x<t2x) { minx=t1x; maxx=t2x; }
    3042:	45a0      	cmp	r8, r4
    3044:	bf39      	ittee	cc
    3046:	4622      	movcc	r2, r4
    3048:	4641      	movcc	r1, r8
    304a:	4642      	movcs	r2, r8
    304c:	4621      	movcs	r1, r4
    		else		{ minx=t2x; maxx=t1x; }
    	    // process first line until y value is about to change
    		while(i<dx1)
    304e:	459a      	cmp	sl, r3
    3050:	da12      	bge.n	3078 <GLCD_Triangle+0x380>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3052:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    3056:	eb0b 000e 	add.w	r0, fp, lr
    305a:	fa1f fb80 	uxth.w	fp, r0
    		else		{ minx=t2x; maxx=t1x; }
    	    // process first line until y value is about to change
    		while(i<dx1)
    		{
        		e1 += dy1;
    	   	   	while (e1 >= dx1)
    305e:	459b      	cmp	fp, r3
    3060:	db08      	blt.n	3074 <GLCD_Triangle+0x37c>
    	   	   	{
    				e1 -= dx1;
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    3062:	9b03      	ldr	r3, [sp, #12]
    		while(i<dx1)
    		{
        		e1 += dy1;
    	   	   	while (e1 >= dx1)
    	   	   	{
    				e1 -= dx1;
    3064:	ebc9 000b 	rsb	r0, r9, fp
    3068:	fa1f fb80 	uxth.w	fp, r0
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    306c:	b13b      	cbz	r3, 307e <GLCD_Triangle+0x386>
    306e:	9b07      	ldr	r3, [sp, #28]
    3070:	b29b      	uxth	r3, r3
    3072:	e002      	b.n	307a <GLCD_Triangle+0x382>
    				else          goto next3;
    			}
    			if (changed1) break;
    3074:	9803      	ldr	r0, [sp, #12]
    3076:	b158      	cbz	r0, 3090 <GLCD_Triangle+0x398>
    3078:	2300      	movs	r3, #0
    307a:	9308      	str	r3, [sp, #32]
    307c:	e001      	b.n	3082 <GLCD_Triangle+0x38a>
    		{
        		e1 += dy1;
    	   	   	while (e1 >= dx1)
    	   	   	{
    				e1 -= dx1;
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    307e:	9803      	ldr	r0, [sp, #12]
    3080:	9008      	str	r0, [sp, #32]
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    		}
    	next3:
            // process second line until y value is about to change
    		while (t2x!=p3->x)
    3082:	f04f 0e00 	mov.w	lr, #0
    3086:	f9b6 3000 	ldrsh.w	r3, [r6]
    308a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    308e:	e022      	b.n	30d6 <GLCD_Triangle+0x3de>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3090:	9807      	ldr	r0, [sp, #28]
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    				else          goto next3;
    			}
    			if (changed1) break;
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    3092:	f10a 0a01 	add.w	sl, sl, #1
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    3096:	4480      	add	r8, r0
    3098:	fa1f f888 	uxth.w	r8, r8
       	   	   	   	if (changed1) { t1xp=signx1; break; }//t1x += signx1;
    				else          goto next3;
    			}
    			if (changed1) break;
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    309c:	fa5f fa8a 	uxtb.w	sl, sl
    30a0:	e7d5      	b.n	304e <GLCD_Triangle+0x356>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    30a2:	f8dd e010 	ldr.w	lr, [sp, #16]
    30a6:	ebce 000c 	rsb	r0, lr, ip
    30aa:	fa1f fc80 	uxth.w	ip, r0
    		{
    			e2 += dy2;
    	   	   	while (e2 >= dx2)
    	   	   	{
    				e2 -= dx2;
    				if(changed2) t2xp=signx2;
    30ae:	9809      	ldr	r0, [sp, #36]	; 0x24
    30b0:	b1d0      	cbz	r0, 30e8 <GLCD_Triangle+0x3f0>
    30b2:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    30b6:	fa1f fe8e 	uxth.w	lr, lr
    30ba:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    	next3:
            // process second line until y value is about to change
    		while (t2x!=p3->x)
    		{
    			e2 += dy2;
    	   	   	while (e2 >= dx2)
    30be:	f8dd e010 	ldr.w	lr, [sp, #16]
    30c2:	fa0f f08e 	sxth.w	r0, lr
    30c6:	4584      	cmp	ip, r0
    30c8:	daeb      	bge.n	30a2 <GLCD_Triangle+0x3aa>
    	   	   	{
    				e2 -= dx2;
    				if(changed2) t2xp=signx2;
    				else          goto next4;
    			}
    			if (changed2)     break;
    30ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    30cc:	b960      	cbnz	r0, 30e8 <GLCD_Triangle+0x3f0>
 *              fill         Fill Triangle TRUE/FALSE or ON/OFF
 *              color        Boundary color
 *              fill_color   Triangle Fill Color
 * @return 		None
 **********************************************************************/
void GLCD_Triangle(COORDINATE_Type *p1, COORDINATE_Type *p2, COORDINATE_Type *p3,COLORCFG_Type *cfg)
    30ce:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    30d2:	4474      	add	r4, lr
    30d4:	b2a4      	uxth	r4, r4
    			else   	   	  t1x += signx1;
    			if(i<dx1) i++;
    		}
    	next3:
            // process second line until y value is about to change
    		while (t2x!=p3->x)
    30d6:	429c      	cmp	r4, r3
    30d8:	d006      	beq.n	30e8 <GLCD_Triangle+0x3f0>
    		{
    			e2 += dy2;
    30da:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    30de:	eb0c 000e 	add.w	r0, ip, lr
    30e2:	fa1f fc80 	uxth.w	ip, r0
    	   	   	while (e2 >= dx2)
    30e6:	e7ea      	b.n	30be <GLCD_Triangle+0x3c6>
    		}
    	next4:

    		if(minx>t1x) minx=t1x; if(minx>t2x) minx=t2x;
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    30e8:	9b05      	ldr	r3, [sp, #20]
    30ea:	4588      	cmp	r8, r1
    30ec:	bf38      	it	cc
    30ee:	4641      	movcc	r1, r8
    30f0:	b288      	uxth	r0, r1
    30f2:	b219      	sxth	r1, r3
    30f4:	9b06      	ldr	r3, [sp, #24]
    30f6:	4590      	cmp	r8, r2
    30f8:	bf28      	it	cs
    30fa:	4642      	movcs	r2, r8
    30fc:	f8b3 e004 	ldrh.w	lr, [r3, #4]
    3100:	b292      	uxth	r2, r2
    3102:	42a0      	cmp	r0, r4
    3104:	bf28      	it	cs
    3106:	4620      	movcs	r0, r4
    3108:	42a2      	cmp	r2, r4
    310a:	bf38      	it	cc
    310c:	4622      	movcc	r2, r4
    310e:	460b      	mov	r3, r1
    3110:	f8cd e000 	str.w	lr, [sp]
    3114:	b200      	sxth	r0, r0
    3116:	b212      	sxth	r2, r2
    3118:	f8cd c008 	str.w	ip, [sp, #8]
    311c:	f7ff fd25 	bl	2b6a <GLCD_Line>
    		// Now increase y
    		if(!changed1) t1x += signx1;
    3120:	9903      	ldr	r1, [sp, #12]
    3122:	f8dd c008 	ldr.w	ip, [sp, #8]
    3126:	b919      	cbnz	r1, 3130 <GLCD_Triangle+0x438>
    3128:	9807      	ldr	r0, [sp, #28]
    312a:	4480      	add	r8, r0
    312c:	fa1f f888 	uxth.w	r8, r8
    		t1x+=t1xp;
    3130:	9a08      	ldr	r2, [sp, #32]
    		if(!changed2) t2x += signx2;
    3132:	9909      	ldr	r1, [sp, #36]	; 0x24
    		if(minx>t1x) minx=t1x; if(minx>t2x) minx=t2x;
    		if(maxx<t1x) maxx=t1x; if(maxx<t2x) maxx=t2x;
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    3134:	eb08 0302 	add.w	r3, r8, r2
    3138:	fa1f f883 	uxth.w	r8, r3
    		if(!changed2) t2x += signx2;
    313c:	b911      	cbnz	r1, 3144 <GLCD_Triangle+0x44c>
    313e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3140:	1824      	adds	r4, r4, r0
    3142:	b2a4      	uxth	r4, r4
    		t2x+=t2xp;
        	y += 1;
    3144:	9b05      	ldr	r3, [sp, #20]
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    3146:	990b      	ldr	r1, [sp, #44]	; 0x2c
        	y += 1;
    3148:	1c58      	adds	r0, r3, #1
    		GLCD_Line(minx,y,maxx,y,cfg->fill_color);    // Draw line from min to max points found on the y
    		// Now increase y
    		if(!changed1) t1x += signx1;
    		t1x+=t1xp;
    		if(!changed2) t2x += signx2;
    		t2x+=t2xp;
    314a:	1862      	adds	r2, r4, r1
    314c:	b294      	uxth	r4, r2
        	y += 1;
    314e:	b282      	uxth	r2, r0
    3150:	9205      	str	r2, [sp, #20]
    		if(y>p3->y) break;
    3152:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
    3156:	9a05      	ldr	r2, [sp, #20]
    3158:	429a      	cmp	r2, r3
    315a:	dd03      	ble.n	3164 <GLCD_Triangle+0x46c>
    	}
    	cfg->fill = NO;
    315c:	9c06      	ldr	r4, [sp, #24]
    315e:	2100      	movs	r1, #0
    3160:	7021      	strb	r1, [r4, #0]
    3162:	e004      	b.n	316e <GLCD_Triangle+0x476>
    		changed1 = TRUE;
    	} else changed1=FALSE;

    	e1 = (uint8_t)(dx1>>1);

    	for (uint8_t i = 0; i<=dx1; i++)
    3164:	f10a 0a01 	add.w	sl, sl, #1
    3168:	fa5f fa8a 	uxtb.w	sl, sl
    316c:	e764      	b.n	3038 <GLCD_Triangle+0x340>
    	}
    	cfg->fill = NO;
    }


	if(!cfg->fill && cfg->bndry)
    316e:	9c06      	ldr	r4, [sp, #24]
    3170:	7820      	ldrb	r0, [r4, #0]
    3172:	bb40      	cbnz	r0, 31c6 <GLCD_Triangle+0x4ce>
    3174:	7863      	ldrb	r3, [r4, #1]
    3176:	b333      	cbz	r3, 31c6 <GLCD_Triangle+0x4ce>
	{
		GLCD_Line(p1->x, p1->y, p2->x, p2->y, cfg->bcolor);
    3178:	f8b4 e002 	ldrh.w	lr, [r4, #2]
    317c:	f9b7 0000 	ldrsh.w	r0, [r7]
    3180:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    3184:	f9b5 2000 	ldrsh.w	r2, [r5]
    3188:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    318c:	f8cd e000 	str.w	lr, [sp]
    3190:	f7ff fceb 	bl	2b6a <GLCD_Line>
		GLCD_Line(p1->x, p1->y, p3->x, p3->y, cfg->bcolor);
    3194:	f9b7 0000 	ldrsh.w	r0, [r7]
    3198:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
    319c:	9f06      	ldr	r7, [sp, #24]
    319e:	f9b6 2000 	ldrsh.w	r2, [r6]
    31a2:	887c      	ldrh	r4, [r7, #2]
    31a4:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
    31a8:	9400      	str	r4, [sp, #0]
    31aa:	f7ff fcde 	bl	2b6a <GLCD_Line>
		GLCD_Line(p2->x, p2->y, p3->x, p3->y, cfg->bcolor);
    31ae:	887c      	ldrh	r4, [r7, #2]
    31b0:	f9b5 0000 	ldrsh.w	r0, [r5]
    31b4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    31b8:	f9b6 2000 	ldrsh.w	r2, [r6]
    31bc:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
    31c0:	9400      	str	r4, [sp, #0]
    31c2:	f7ff fcd2 	bl	2b6a <GLCD_Line>
	}
}
    31c6:	b00f      	add	sp, #60	; 0x3c
    31c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000031cc <Show_BarGraph>:
 * @brief	    Display Bar Graph function
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Show_BarGraph(void)
{
    31cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	COORDINATE_Type point1,point2,point3;
	COLORCFG_Type tricfg;
    uint8_t x_name[10][3]={"1","2","3","4","5","6","7","8","9","10"};
    31d0:	4b8a      	ldr	r3, [pc, #552]	; (33fc <Show_BarGraph+0x230>)
 * @brief	    Display Bar Graph function
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Show_BarGraph(void)
{
    31d2:	b09f      	sub	sp, #124	; 0x7c
	COORDINATE_Type point1,point2,point3;
	COLORCFG_Type tricfg;
    uint8_t x_name[10][3]={"1","2","3","4","5","6","7","8","9","10"};
    31d4:	aa0c      	add	r2, sp, #48	; 0x30
    31d6:	f103 0518 	add.w	r5, r3, #24
    31da:	6818      	ldr	r0, [r3, #0]
    31dc:	6859      	ldr	r1, [r3, #4]
    31de:	4614      	mov	r4, r2
    31e0:	c403      	stmia	r4!, {r0, r1}
    31e2:	3308      	adds	r3, #8
    31e4:	42ab      	cmp	r3, r5
    31e6:	4622      	mov	r2, r4
    31e8:	d1f7      	bne.n	31da <Show_BarGraph+0xe>
    31ea:	6818      	ldr	r0, [r3, #0]
    31ec:	8899      	ldrh	r1, [r3, #4]
    uint8_t y_name[10][4]={"10","20","30","40","50","60","70","80","90","100"};
    31ee:	4e84      	ldr	r6, [pc, #528]	; (3400 <Show_BarGraph+0x234>)
 **********************************************************************/
void Show_BarGraph(void)
{
	COORDINATE_Type point1,point2,point3;
	COLORCFG_Type tricfg;
    uint8_t x_name[10][3]={"1","2","3","4","5","6","7","8","9","10"};
    31f0:	6020      	str	r0, [r4, #0]
    31f2:	80a1      	strh	r1, [r4, #4]
    uint8_t y_name[10][4]={"10","20","30","40","50","60","70","80","90","100"};
    31f4:	ad14      	add	r5, sp, #80	; 0x50
    31f6:	f106 0728 	add.w	r7, r6, #40	; 0x28
    31fa:	6830      	ldr	r0, [r6, #0]
    31fc:	6871      	ldr	r1, [r6, #4]
    31fe:	462b      	mov	r3, r5
    3200:	c303      	stmia	r3!, {r0, r1}
    3202:	3608      	adds	r6, #8
    3204:	42be      	cmp	r6, r7
    3206:	461d      	mov	r5, r3
    3208:	d1f7      	bne.n	31fa <Show_BarGraph+0x2e>
    uint16_t y_scale,x_scale,i;

	/* X and Y lines */
	GLCD_Line(30,5,30,238,Black);
    320a:	2400      	movs	r4, #0
    320c:	201e      	movs	r0, #30
    320e:	4602      	mov	r2, r0
    3210:	2105      	movs	r1, #5
    3212:	23ee      	movs	r3, #238	; 0xee
    3214:	9400      	str	r4, [sp, #0]
    3216:	f7ff fca8 	bl	2b6a <GLCD_Line>
	GLCD_Line(1,220,315,220,Black);
    321a:	21dc      	movs	r1, #220	; 0xdc

	GLCD_Text(22,5,"Y",5,7,default5x7,1,Black);
    321c:	4e79      	ldr	r6, [pc, #484]	; (3404 <Show_BarGraph+0x238>)
    uint8_t y_name[10][4]={"10","20","30","40","50","60","70","80","90","100"};
    uint16_t y_scale,x_scale,i;

	/* X and Y lines */
	GLCD_Line(30,5,30,238,Black);
	GLCD_Line(1,220,315,220,Black);
    321e:	460b      	mov	r3, r1
    3220:	2001      	movs	r0, #1
    3222:	f240 123b 	movw	r2, #315	; 0x13b
    3226:	9400      	str	r4, [sp, #0]
    3228:	f7ff fc9f 	bl	2b6a <GLCD_Line>

	GLCD_Text(22,5,"Y",5,7,default5x7,1,Black);
    322c:	2501      	movs	r5, #1
    322e:	2707      	movs	r7, #7
    3230:	2105      	movs	r1, #5
    3232:	460b      	mov	r3, r1
    3234:	9502      	str	r5, [sp, #8]
    3236:	2016      	movs	r0, #22
    3238:	4a73      	ldr	r2, [pc, #460]	; (3408 <Show_BarGraph+0x23c>)
    323a:	9700      	str	r7, [sp, #0]
    323c:	9601      	str	r6, [sp, #4]
    323e:	9403      	str	r4, [sp, #12]
    3240:	f7ff fbfe 	bl	2a40 <GLCD_Text>
	GLCD_Text(310,225,"X",5,7,default5x7,1,Black);
    3244:	9502      	str	r5, [sp, #8]
    3246:	f44f 709b 	mov.w	r0, #310	; 0x136
    324a:	21e1      	movs	r1, #225	; 0xe1
    324c:	4a6f      	ldr	r2, [pc, #444]	; (340c <Show_BarGraph+0x240>)
    324e:	2305      	movs	r3, #5
    3250:	9700      	str	r7, [sp, #0]
    3252:	9601      	str	r6, [sp, #4]
    3254:	9403      	str	r4, [sp, #12]
    3256:	f7ff fbf3 	bl	2a40 <GLCD_Text>
	GLCD_Text(50,5,"X=ADC-CH  Y=VAL  Y-MAX=4095  Y-UNIT=40.95",5,7,default5x7,1,Black);
    325a:	2105      	movs	r1, #5
    325c:	460b      	mov	r3, r1
    325e:	9502      	str	r5, [sp, #8]
    3260:	2032      	movs	r0, #50	; 0x32
    3262:	4a6b      	ldr	r2, [pc, #428]	; (3410 <Show_BarGraph+0x244>)
    3264:	9700      	str	r7, [sp, #0]
    3266:	9601      	str	r6, [sp, #4]
    3268:	9403      	str	r4, [sp, #12]
    326a:	f7ff fbe9 	bl	2a40 <GLCD_Text>

	/* Y Line Arrows Top and Bottom */
	/* Top arrow coordinates */
	point1.x = 30;
	point1.y = 5;
	point2.x = 28;
    326e:	f04f 0b1c 	mov.w	fp, #28
	point2.y = 10;
	point3.x = 32;
    3272:	f04f 0a20 	mov.w	sl, #32
	/* Y Line Arrows Top and Bottom */
	/* Top arrow coordinates */
	point1.x = 30;
	point1.y = 5;
	point2.x = 28;
	point2.y = 10;
    3276:	220a      	movs	r2, #10
	GLCD_Text(310,225,"X",5,7,default5x7,1,Black);
	GLCD_Text(50,5,"X=ADC-CH  Y=VAL  Y-MAX=4095  Y-UNIT=40.95",5,7,default5x7,1,Black);

	/* Y Line Arrows Top and Bottom */
	/* Top arrow coordinates */
	point1.x = 30;
    3278:	f04f 0c1e 	mov.w	ip, #30
	point3.x = 32;
	point3.y = 10;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    327c:	eb0d 000b 	add.w	r0, sp, fp
    3280:	eb0d 010a 	add.w	r1, sp, sl
	GLCD_Text(50,5,"X=ADC-CH  Y=VAL  Y-MAX=4095  Y-UNIT=40.95",5,7,default5x7,1,Black);

	/* Y Line Arrows Top and Bottom */
	/* Top arrow coordinates */
	point1.x = 30;
	point1.y = 5;
    3284:	f04f 0905 	mov.w	r9, #5
	point2.x = 28;
	point2.y = 10;
    3288:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	point3.x = 32;
	point3.y = 10;
    328c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3290:	ab0a      	add	r3, sp, #40	; 0x28
    3292:	aa09      	add	r2, sp, #36	; 0x24
	GLCD_Text(310,225,"X",5,7,default5x7,1,Black);
	GLCD_Text(50,5,"X=ADC-CH  Y=VAL  Y-MAX=4095  Y-UNIT=40.95",5,7,default5x7,1,Black);

	/* Y Line Arrows Top and Bottom */
	/* Top arrow coordinates */
	point1.x = 30;
    3294:	f8ad c01c 	strh.w	ip, [sp, #28]
	point1.y = 5;
	point2.x = 28;
    3298:	f8ad b020 	strh.w	fp, [sp, #32]
	point2.y = 10;
	point3.x = 32;
    329c:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
	point3.y = 10;
	tricfg.fill = YES;
    32a0:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    32a4:	f8cd c014 	str.w	ip, [sp, #20]
	GLCD_Text(50,5,"X=ADC-CH  Y=VAL  Y-MAX=4095  Y-UNIT=40.95",5,7,default5x7,1,Black);

	/* Y Line Arrows Top and Bottom */
	/* Top arrow coordinates */
	point1.x = 30;
	point1.y = 5;
    32a8:	f8ad 901e 	strh.w	r9, [sp, #30]
	point2.x = 28;
	point2.y = 10;
	point3.x = 32;
	point3.y = 10;
	tricfg.fill = YES;
	tricfg.bndry= NO;
    32ac:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
	tricfg.fill_color=Black;
    32b0:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    32b4:	f7ff fd20 	bl	2cf8 <GLCD_Triangle>

	/* Bottom arrow coordinates */
	point1.x = 30;
    32b8:	f8dd c014 	ldr.w	ip, [sp, #20]
	point1.y = 238;
	point2.x = 28;
	point2.y = 233;
    32bc:	21e9      	movs	r1, #233	; 0xe9
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* Bottom arrow coordinates */
	point1.x = 30;
	point1.y = 238;
    32be:	20ee      	movs	r0, #238	; 0xee
    32c0:	f8ad 001e 	strh.w	r0, [sp, #30]
	point2.x = 28;
	point2.y = 233;
    32c4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	point3.x = 32;
	point3.y = 233;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    32c8:	eb0d 000b 	add.w	r0, sp, fp
	point1.x = 30;
	point1.y = 238;
	point2.x = 28;
	point2.y = 233;
	point3.x = 32;
	point3.y = 233;
    32cc:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    32d0:	aa09      	add	r2, sp, #36	; 0x24
    32d2:	eb0d 010a 	add.w	r1, sp, sl
    32d6:	ab0a      	add	r3, sp, #40	; 0x28
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* Bottom arrow coordinates */
	point1.x = 30;
    32d8:	f8ad c01c 	strh.w	ip, [sp, #28]
	point1.y = 238;
	point2.x = 28;
    32dc:	f8ad b020 	strh.w	fp, [sp, #32]
	point2.y = 233;
	point3.x = 32;
    32e0:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
	point3.y = 233;
	tricfg.fill = YES;
    32e4:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
	tricfg.bndry= NO;
    32e8:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
	tricfg.fill_color=Black;
    32ec:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    32f0:	f7ff fd02 	bl	2cf8 <GLCD_Triangle>

	/* X Line Arrows Left and Right */
	/* Left arrow coordinates */
	point1.x = 1;
	point1.y = 220;
	point2.x = 6;
    32f4:	2306      	movs	r3, #6
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* X Line Arrows Left and Right */
	/* Left arrow coordinates */
	point1.x = 1;
	point1.y = 220;
    32f6:	f04f 0cdc 	mov.w	ip, #220	; 0xdc
	point2.x = 6;
    32fa:	f8ad 3020 	strh.w	r3, [sp, #32]
	point2.y = 218;
    32fe:	f04f 0bda 	mov.w	fp, #218	; 0xda
	point3.x = 6;
    3302:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	point3.y = 222;
    3306:	f04f 0ade 	mov.w	sl, #222	; 0xde
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    330a:	a807      	add	r0, sp, #28
    330c:	a908      	add	r1, sp, #32
    330e:	aa09      	add	r2, sp, #36	; 0x24
    3310:	ab0a      	add	r3, sp, #40	; 0x28
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* X Line Arrows Left and Right */
	/* Left arrow coordinates */
	point1.x = 1;
    3312:	f8ad 501c 	strh.w	r5, [sp, #28]
	point1.y = 220;
    3316:	f8ad c01e 	strh.w	ip, [sp, #30]
	point2.x = 6;
	point2.y = 218;
	point3.x = 6;
	point3.y = 222;
	tricfg.fill = YES;
    331a:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    331e:	f8cd c014 	str.w	ip, [sp, #20]
	/* X Line Arrows Left and Right */
	/* Left arrow coordinates */
	point1.x = 1;
	point1.y = 220;
	point2.x = 6;
	point2.y = 218;
    3322:	f8ad b022 	strh.w	fp, [sp, #34]	; 0x22
	point3.x = 6;
	point3.y = 222;
    3326:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
	tricfg.fill = YES;
	tricfg.bndry= NO;
    332a:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
	tricfg.fill_color=Black;
    332e:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    3332:	f7ff fce1 	bl	2cf8 <GLCD_Triangle>

	/* Right arrow coordinates */
	point1.x = 315;
	point1.y = 220;
    3336:	f8dd c014 	ldr.w	ip, [sp, #20]
	point2.x = 310;
    333a:	f44f 709b 	mov.w	r0, #310	; 0x136
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* Right arrow coordinates */
	point1.x = 315;
    333e:	f240 123b 	movw	r2, #315	; 0x13b
    3342:	f8ad 201c 	strh.w	r2, [sp, #28]
	point1.y = 220;
	point2.x = 310;
    3346:	f8ad 0020 	strh.w	r0, [sp, #32]
	point2.y = 218;
	point3.x = 310;
    334a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
	point3.y = 222;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    334e:	a908      	add	r1, sp, #32
    3350:	a807      	add	r0, sp, #28
    3352:	aa09      	add	r2, sp, #36	; 0x24
    3354:	ab0a      	add	r3, sp, #40	; 0x28
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* Right arrow coordinates */
	point1.x = 315;
	point1.y = 220;
    3356:	f8ad c01e 	strh.w	ip, [sp, #30]
	point2.x = 310;
	point2.y = 218;
	point3.x = 310;
	point3.y = 222;
	tricfg.fill = YES;
    335a:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28

	/* Right arrow coordinates */
	point1.x = 315;
	point1.y = 220;
	point2.x = 310;
	point2.y = 218;
    335e:	f8ad b022 	strh.w	fp, [sp, #34]	; 0x22
	point3.x = 310;
	point3.y = 222;
    3362:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
	tricfg.fill = YES;
	tricfg.bndry= NO;
    3366:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
	tricfg.fill_color=Black;
    336a:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);
    336e:	f7ff fcc3 	bl	2cf8 <GLCD_Triangle>

	/* X and Y scaling */
	GLCD_Text(0,225,"(0,0)",5,7,default5x7,1,Black);
    3372:	9502      	str	r5, [sp, #8]
    3374:	9700      	str	r7, [sp, #0]
    3376:	9601      	str	r6, [sp, #4]
    3378:	9403      	str	r4, [sp, #12]
    337a:	4620      	mov	r0, r4
    337c:	21e1      	movs	r1, #225	; 0xe1
    337e:	4a25      	ldr	r2, [pc, #148]	; (3414 <Show_BarGraph+0x248>)
    3380:	464b      	mov	r3, r9
    3382:	f7ff fb5d 	bl	2a40 <GLCD_Text>
	point2.y = 10;
	point3.x = 32;
	point3.y = 10;
	tricfg.fill = YES;
	tricfg.bndry= NO;
	tricfg.fill_color=Black;
    3386:	46a0      	mov	r8, r4
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* X and Y scaling */
	GLCD_Text(0,225,"(0,0)",5,7,default5x7,1,Black);
	for(y_scale=200,i=0; y_scale>=20; y_scale=y_scale-20,i++)
    3388:	25c8      	movs	r5, #200	; 0xc8
	{
		if(y_scale!=20)
		{
			GLCD_Text(14,y_scale,y_name[i],5,7,default5x7,1,Black);
    338a:	2107      	movs	r1, #7
    338c:	4b1d      	ldr	r3, [pc, #116]	; (3404 <Show_BarGraph+0x238>)
    338e:	9100      	str	r1, [sp, #0]
    3390:	f04f 0001 	mov.w	r0, #1
    3394:	f04f 0100 	mov.w	r1, #0

	/* X and Y scaling */
	GLCD_Text(0,225,"(0,0)",5,7,default5x7,1,Black);
	for(y_scale=200,i=0; y_scale>=20; y_scale=y_scale-20,i++)
	{
		if(y_scale!=20)
    3398:	2d14      	cmp	r5, #20
    339a:	ea4f 0284 	mov.w	r2, r4, lsl #2
		{
			GLCD_Text(14,y_scale,y_name[i],5,7,default5x7,1,Black);
    339e:	9301      	str	r3, [sp, #4]
    33a0:	9002      	str	r0, [sp, #8]
    33a2:	9103      	str	r1, [sp, #12]

	/* X and Y scaling */
	GLCD_Text(0,225,"(0,0)",5,7,default5x7,1,Black);
	for(y_scale=200,i=0; y_scale>=20; y_scale=y_scale-20,i++)
	{
		if(y_scale!=20)
    33a4:	d002      	beq.n	33ac <Show_BarGraph+0x1e0>
		{
			GLCD_Text(14,y_scale,y_name[i],5,7,default5x7,1,Black);
    33a6:	200e      	movs	r0, #14
    33a8:	b229      	sxth	r1, r5
    33aa:	e001      	b.n	33b0 <Show_BarGraph+0x1e4>
		}
		else
		{
			GLCD_Text(10,y_scale,y_name[i],5,7,default5x7,1,Black);
    33ac:	200a      	movs	r0, #10
    33ae:	4629      	mov	r1, r5
    33b0:	ab14      	add	r3, sp, #80	; 0x50
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* X and Y scaling */
	GLCD_Text(0,225,"(0,0)",5,7,default5x7,1,Black);
	for(y_scale=200,i=0; y_scale>=20; y_scale=y_scale-20,i++)
    33b2:	3d14      	subs	r5, #20
		{
			GLCD_Text(14,y_scale,y_name[i],5,7,default5x7,1,Black);
		}
		else
		{
			GLCD_Text(10,y_scale,y_name[i],5,7,default5x7,1,Black);
    33b4:	189a      	adds	r2, r3, r2
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* X and Y scaling */
	GLCD_Text(0,225,"(0,0)",5,7,default5x7,1,Black);
	for(y_scale=200,i=0; y_scale>=20; y_scale=y_scale-20,i++)
    33b6:	b2ad      	uxth	r5, r5
		{
			GLCD_Text(14,y_scale,y_name[i],5,7,default5x7,1,Black);
		}
		else
		{
			GLCD_Text(10,y_scale,y_name[i],5,7,default5x7,1,Black);
    33b8:	2305      	movs	r3, #5
    33ba:	f7ff fb41 	bl	2a40 <GLCD_Text>
    33be:	3401      	adds	r4, #1
	tricfg.fill_color=Black;
	GLCD_Triangle(&point1,&point2,&point3,&tricfg);

	/* X and Y scaling */
	GLCD_Text(0,225,"(0,0)",5,7,default5x7,1,Black);
	for(y_scale=200,i=0; y_scale>=20; y_scale=y_scale-20,i++)
    33c0:	2d00      	cmp	r5, #0
    33c2:	d1e2      	bne.n	338a <Show_BarGraph+0x1be>
    33c4:	2438      	movs	r4, #56	; 0x38
		}

	}
	for(x_scale=56,i=0; x_scale<=300; x_scale=x_scale+26,i++)
	{
		GLCD_Text(x_scale,225,x_name[i],5,7,default5x7,1,Black);
    33c6:	480f      	ldr	r0, [pc, #60]	; (3404 <Show_BarGraph+0x238>)
    33c8:	2207      	movs	r2, #7
    33ca:	2300      	movs	r3, #0
    33cc:	2101      	movs	r1, #1
    33ce:	9200      	str	r2, [sp, #0]
    33d0:	9001      	str	r0, [sp, #4]
    33d2:	9303      	str	r3, [sp, #12]
    33d4:	b220      	sxth	r0, r4
    33d6:	2203      	movs	r2, #3
    33d8:	ab0c      	add	r3, sp, #48	; 0x30
		{
			GLCD_Text(10,y_scale,y_name[i],5,7,default5x7,1,Black);
		}

	}
	for(x_scale=56,i=0; x_scale<=300; x_scale=x_scale+26,i++)
    33da:	341a      	adds	r4, #26
	{
		GLCD_Text(x_scale,225,x_name[i],5,7,default5x7,1,Black);
    33dc:	fb02 3205 	mla	r2, r2, r5, r3
    33e0:	9102      	str	r1, [sp, #8]
    33e2:	2305      	movs	r3, #5
    33e4:	21e1      	movs	r1, #225	; 0xe1
		{
			GLCD_Text(10,y_scale,y_name[i],5,7,default5x7,1,Black);
		}

	}
	for(x_scale=56,i=0; x_scale<=300; x_scale=x_scale+26,i++)
    33e6:	b2a4      	uxth	r4, r4
	{
		GLCD_Text(x_scale,225,x_name[i],5,7,default5x7,1,Black);
    33e8:	f7ff fb2a 	bl	2a40 <GLCD_Text>
    33ec:	3501      	adds	r5, #1
		{
			GLCD_Text(10,y_scale,y_name[i],5,7,default5x7,1,Black);
		}

	}
	for(x_scale=56,i=0; x_scale<=300; x_scale=x_scale+26,i++)
    33ee:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
    33f2:	d1e8      	bne.n	33c6 <Show_BarGraph+0x1fa>
	{
		GLCD_Text(x_scale,225,x_name[i],5,7,default5x7,1,Black);
	}
}
    33f4:	b01f      	add	sp, #124	; 0x7c
    33f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33fa:	bf00      	nop
    33fc:	00077032 	.word	0x00077032
    3400:	00077050 	.word	0x00077050
    3404:	00077078 	.word	0x00077078
    3408:	00077258 	.word	0x00077258
    340c:	0007725a 	.word	0x0007725a
    3410:	0007725c 	.word	0x0007725c
    3414:	00077286 	.word	0x00077286

00003418 <GLCD_Frame>:
 *              color        Boundary color
 *              fill_color   Frame fill color
 * @return 		None
 **********************************************************************/
void GLCD_Frame(COORDINATE_Type *p1, COORDINATE_Type *p2, int16_t frame_width, uint16_t color, uint16_t fill_color)
{
    3418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    341c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    3420:	4605      	mov	r5, r0
    3422:	460c      	mov	r4, r1
    3424:	4691      	mov	r9, r2
    3426:	461f      	mov	r7, r3
    3428:	b296      	uxth	r6, r2
	int16_t fw;                          // Find the y min and max

	fw = frame_width;

	while(fw)
    342a:	2e00      	cmp	r6, #0
    342c:	d058      	beq.n	34e0 <GLCD_Frame+0xc8>
    342e:	8869      	ldrh	r1, [r5, #2]
	{
		if(fw < frame_width)
    3430:	b233      	sxth	r3, r6
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, fill_color);      // Draw the interior 4 sides
    3432:	1872      	adds	r2, r6, r1

	fw = frame_width;

	while(fw)
	{
		if(fw < frame_width)
    3434:	454b      	cmp	r3, r9
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, fill_color);      // Draw the interior 4 sides
    3436:	b211      	sxth	r1, r2
    3438:	f9b5 0000 	ldrsh.w	r0, [r5]
    343c:	f9b4 2000 	ldrsh.w	r2, [r4]

	fw = frame_width;

	while(fw)
	{
		if(fw < frame_width)
    3440:	da26      	bge.n	3490 <GLCD_Frame+0x78>
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, fill_color);      // Draw the interior 4 sides
    3442:	460b      	mov	r3, r1
    3444:	f8cd 8000 	str.w	r8, [sp]
    3448:	f7ff fb8f 	bl	2b6a <GLCD_Line>
			GLCD_Line(p1->x, p2->y-fw, p2->x, p2->y-fw, fill_color);
    344c:	8861      	ldrh	r1, [r4, #2]
    344e:	f9b5 0000 	ldrsh.w	r0, [r5]
    3452:	1b8a      	subs	r2, r1, r6
    3454:	b211      	sxth	r1, r2
    3456:	460b      	mov	r3, r1
    3458:	f9b4 2000 	ldrsh.w	r2, [r4]
    345c:	f8cd 8000 	str.w	r8, [sp]
    3460:	f7ff fb83 	bl	2b6a <GLCD_Line>
			GLCD_Line(p1->x+fw, p1->y, p1->x+fw, p2->y, fill_color);
    3464:	8828      	ldrh	r0, [r5, #0]
    3466:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    346a:	1833      	adds	r3, r6, r0
    346c:	b218      	sxth	r0, r3
    346e:	4602      	mov	r2, r0
    3470:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    3474:	f8cd 8000 	str.w	r8, [sp]
    3478:	f7ff fb77 	bl	2b6a <GLCD_Line>
			GLCD_Line(p2->x-fw, p1->y, p2->x-fw, p2->y, fill_color);
    347c:	8821      	ldrh	r1, [r4, #0]
    347e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    3482:	1b8a      	subs	r2, r1, r6
    3484:	b210      	sxth	r0, r2
    3486:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    348a:	f8cd 8000 	str.w	r8, [sp]
    348e:	e021      	b.n	34d4 <GLCD_Frame+0xbc>
			fw--;
		}
		else
		{
			GLCD_Line(p1->x, p1->y+fw, p2->x, p1->y+fw, color);      // inner border 4 sides
    3490:	460b      	mov	r3, r1
    3492:	9700      	str	r7, [sp, #0]
    3494:	f7ff fb69 	bl	2b6a <GLCD_Line>
			GLCD_Line(p1->x, p2->y-fw, p2->x, p2->y-fw, color);
    3498:	8860      	ldrh	r0, [r4, #2]
    349a:	f9b4 2000 	ldrsh.w	r2, [r4]
    349e:	1b83      	subs	r3, r0, r6
    34a0:	b219      	sxth	r1, r3
    34a2:	460b      	mov	r3, r1
    34a4:	f9b5 0000 	ldrsh.w	r0, [r5]
    34a8:	9700      	str	r7, [sp, #0]
    34aa:	f7ff fb5e 	bl	2b6a <GLCD_Line>
			GLCD_Line(p1->x+fw, p1->y, p1->x+fw, p2->y, color);
    34ae:	8829      	ldrh	r1, [r5, #0]
    34b0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    34b4:	1872      	adds	r2, r6, r1
    34b6:	b210      	sxth	r0, r2
    34b8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    34bc:	4602      	mov	r2, r0
    34be:	9700      	str	r7, [sp, #0]
    34c0:	f7ff fb53 	bl	2b6a <GLCD_Line>
			GLCD_Line(p2->x-fw, p1->y, p2->x-fw, p2->y, color);
    34c4:	8820      	ldrh	r0, [r4, #0]
    34c6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    34ca:	1b83      	subs	r3, r0, r6
    34cc:	b218      	sxth	r0, r3
    34ce:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    34d2:	9700      	str	r7, [sp, #0]
    34d4:	4602      	mov	r2, r0
    34d6:	3e01      	subs	r6, #1
    34d8:	f7ff fb47 	bl	2b6a <GLCD_Line>
    34dc:	b2b6      	uxth	r6, r6
    34de:	e7a4      	b.n	342a <GLCD_Frame+0x12>
		}
	}

	if(!fw)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
    34e0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    34e4:	f9b5 0000 	ldrsh.w	r0, [r5]
    34e8:	f9b4 2000 	ldrsh.w	r2, [r4]
    34ec:	460b      	mov	r3, r1
    34ee:	9700      	str	r7, [sp, #0]
    34f0:	f7ff fb3b 	bl	2b6a <GLCD_Line>
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
    34f4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    34f8:	f9b5 0000 	ldrsh.w	r0, [r5]
    34fc:	f9b4 2000 	ldrsh.w	r2, [r4]
    3500:	460b      	mov	r3, r1
    3502:	9700      	str	r7, [sp, #0]
    3504:	f7ff fb31 	bl	2b6a <GLCD_Line>
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
    3508:	f9b5 0000 	ldrsh.w	r0, [r5]
    350c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    3510:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    3514:	4602      	mov	r2, r0
    3516:	9700      	str	r7, [sp, #0]
    3518:	f7ff fb27 	bl	2b6a <GLCD_Line>
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    351c:	f9b4 0000 	ldrsh.w	r0, [r4]
    3520:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    3524:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    3528:	4602      	mov	r2, r0
    352a:	970a      	str	r7, [sp, #40]	; 0x28
	}
}
    352c:	b003      	add	sp, #12
    352e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(!fw)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    3532:	f7ff bb1a 	b.w	2b6a <GLCD_Line>

00003536 <GLCD_Circle>:
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
{
    3536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    353a:	461c      	mov	r4, r3
    353c:	b08b      	sub	sp, #44	; 0x2c
	int16_t a, b, P;
	a = 0;
	b = radius;
	P = 1 - radius;
    353e:	f1c2 0301 	rsb	r3, r2, #1
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
{
    3542:	9008      	str	r0, [sp, #32]
	int16_t a, b, P;
	a = 0;
	b = radius;
	P = 1 - radius;
    3544:	b298      	uxth	r0, r3
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
{
    3546:	9109      	str	r1, [sp, #36]	; 0x24
    3548:	9207      	str	r2, [sp, #28]
	int16_t a, b, P;
	a = 0;
	b = radius;
	P = 1 - radius;
    354a:	9006      	str	r0, [sp, #24]
    354c:	4607      	mov	r7, r0
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
{
	int16_t a, b, P;
	a = 0;
	b = radius;
    354e:	4616      	mov	r6, r2
	P = 1 - radius;
    3550:	2500      	movs	r5, #0

	do
	{
		if(cfg->fill)
    3552:	7821      	ldrb	r1, [r4, #0]
    3554:	2900      	cmp	r1, #0
    3556:	d047      	beq.n	35e8 <GLCD_Circle+0xb2>
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
    3558:	9a08      	ldr	r2, [sp, #32]
    355a:	9809      	ldr	r0, [sp, #36]	; 0x24
    355c:	fa1f f982 	uxth.w	r9, r2
    3560:	fa1f f880 	uxth.w	r8, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3564:	b2ab      	uxth	r3, r5

	do
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
    3566:	fa1f fa86 	uxth.w	sl, r6
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    356a:	ebc3 0c09 	rsb	ip, r3, r9
    356e:	eb03 0b09 	add.w	fp, r3, r9

	do
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
    3572:	88a2      	ldrh	r2, [r4, #4]
    3574:	eb0a 0108 	add.w	r1, sl, r8
    3578:	fa0f fe8c 	sxth.w	lr, ip
    357c:	b209      	sxth	r1, r1
    357e:	fa0f fb8b 	sxth.w	fp, fp
    3582:	4670      	mov	r0, lr
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3584:	9305      	str	r3, [sp, #20]

	do
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
    3586:	9200      	str	r2, [sp, #0]
    3588:	460b      	mov	r3, r1
    358a:	465a      	mov	r2, fp
    358c:	f8cd e00c 	str.w	lr, [sp, #12]
    3590:	f7ff faeb 	bl	2b6a <GLCD_Line>
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
    3594:	ebca 0308 	rsb	r3, sl, r8
    3598:	88a0      	ldrh	r0, [r4, #4]
    359a:	f8dd c00c 	ldr.w	ip, [sp, #12]
    359e:	b219      	sxth	r1, r3
    35a0:	465a      	mov	r2, fp
    35a2:	460b      	mov	r3, r1
    35a4:	9000      	str	r0, [sp, #0]
    35a6:	4660      	mov	r0, ip
    35a8:	f7ff fadf 	bl	2b6a <GLCD_Line>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    35ac:	9905      	ldr	r1, [sp, #20]
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
    35ae:	88a3      	ldrh	r3, [r4, #4]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    35b0:	eb01 0208 	add.w	r2, r1, r8
	{
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
    35b4:	ebca 0b09 	rsb	fp, sl, r9
    35b8:	44d1      	add	r9, sl
    35ba:	b211      	sxth	r1, r2
    35bc:	fa0f fb8b 	sxth.w	fp, fp
    35c0:	fa0f f989 	sxth.w	r9, r9
    35c4:	9300      	str	r3, [sp, #0]
    35c6:	4658      	mov	r0, fp
    35c8:	460b      	mov	r3, r1
    35ca:	464a      	mov	r2, r9
    35cc:	f7ff facd 	bl	2b6a <GLCD_Line>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    35d0:	9805      	ldr	r0, [sp, #20]
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, cfg->fill_color);
    35d2:	88a2      	ldrh	r2, [r4, #4]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    35d4:	ebc0 0808 	rsb	r8, r0, r8
		if(cfg->fill)
		{
			GLCD_Line(x-a, y+b, x+a, y+b, cfg->fill_color);
			GLCD_Line(x-a, y-b, x+a, y-b, cfg->fill_color);
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, cfg->fill_color);
    35d8:	fa0f f188 	sxth.w	r1, r8
    35dc:	9200      	str	r2, [sp, #0]
    35de:	4658      	mov	r0, fp
    35e0:	464a      	mov	r2, r9
    35e2:	460b      	mov	r3, r1
    35e4:	f7ff fac1 	bl	2b6a <GLCD_Line>
		}

		if(P < 0)
    35e8:	0438      	lsls	r0, r7, #16
    35ea:	d507      	bpl.n	35fc <GLCD_Circle+0xc6>
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    35ec:	b2ab      	uxth	r3, r5
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, cfg->fill_color);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    35ee:	3703      	adds	r7, #3
    35f0:	eb07 0043 	add.w	r0, r7, r3, lsl #1
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    35f4:	1c5a      	adds	r2, r3, #1
			GLCD_Line(x-b, y+a, x+b, y+a, cfg->fill_color);
			GLCD_Line(x-b, y-a, x+b, y-a, cfg->fill_color);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    35f6:	b287      	uxth	r7, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    35f8:	b291      	uxth	r1, r2
    35fa:	e009      	b.n	3610 <GLCD_Circle+0xda>
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    35fc:	b231      	sxth	r1, r6
    35fe:	3705      	adds	r7, #5
    3600:	1a6b      	subs	r3, r5, r1
    3602:	eb07 0043 	add.w	r0, r7, r3, lsl #1
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3606:	1c6a      	adds	r2, r5, #1
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    3608:	3e01      	subs	r6, #1
    360a:	b287      	uxth	r7, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    360c:	b291      	uxth	r1, r2
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    360e:	b2b6      	uxth	r6, r6
	} while(a <= b);
    3610:	b209      	sxth	r1, r1
    3612:	b233      	sxth	r3, r6
    3614:	3501      	adds	r5, #1
    3616:	4299      	cmp	r1, r3
    3618:	dd9b      	ble.n	3552 <GLCD_Circle+0x1c>

	cfg->fill = NO;
    361a:	2500      	movs	r5, #0
	a = 0;
	b = radius;
    361c:	9e07      	ldr	r6, [sp, #28]
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
	} while(a <= b);

	cfg->fill = NO;
    361e:	7025      	strb	r5, [r4, #0]
	a = 0;
	b = radius;
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
    3620:	7820      	ldrb	r0, [r4, #0]
    3622:	2800      	cmp	r0, #0
    3624:	d157      	bne.n	36d6 <GLCD_Circle+0x1a0>
    3626:	7862      	ldrb	r2, [r4, #1]
    3628:	2a00      	cmp	r2, #0
    362a:	d054      	beq.n	36d6 <GLCD_Circle+0x1a0>
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    362c:	9f08      	ldr	r7, [sp, #32]
    362e:	9809      	ldr	r0, [sp, #36]	; 0x24
    3630:	fa1f fa87 	uxth.w	sl, r7
    3634:	fa1f f880 	uxth.w	r8, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3638:	fa1f f985 	uxth.w	r9, r5
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    363c:	b2b7      	uxth	r7, r6
    363e:	eb07 0e08 	add.w	lr, r7, r8
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3642:	eb09 010a 	add.w	r1, r9, sl
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    3646:	fa1f fc8e 	uxth.w	ip, lr
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    364a:	b28b      	uxth	r3, r1
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    364c:	4618      	mov	r0, r3
    364e:	4661      	mov	r1, ip
    3650:	8862      	ldrh	r2, [r4, #2]
    3652:	f8cd c00c 	str.w	ip, [sp, #12]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3656:	9307      	str	r3, [sp, #28]
	P = 1 - radius;
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
    3658:	f7ff f9da 	bl	2a10 <GLCD_PutPixel>
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
    365c:	eb07 020a 	add.w	r2, r7, sl
    3660:	b291      	uxth	r1, r2
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3662:	eb09 0308 	add.w	r3, r9, r8
    3666:	b29b      	uxth	r3, r3
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
    3668:	9105      	str	r1, [sp, #20]
    366a:	9805      	ldr	r0, [sp, #20]
    366c:	4619      	mov	r1, r3
    366e:	8862      	ldrh	r2, [r4, #2]
    3670:	9304      	str	r3, [sp, #16]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3672:	ebc9 0b0a 	rsb	fp, r9, sl
	do
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
    3676:	f7ff f9cb 	bl	2a10 <GLCD_PutPixel>
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
    367a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    367e:	fa1f fb8b 	uxth.w	fp, fp
	{
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
    3682:	4661      	mov	r1, ip
    3684:	4658      	mov	r0, fp
    3686:	8862      	ldrh	r2, [r4, #2]
    3688:	f7ff f9c2 	bl	2a10 <GLCD_PutPixel>
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
    368c:	ebc7 0a0a 	rsb	sl, r7, sl
    3690:	9a04      	ldr	r2, [sp, #16]
    3692:	fa1f fa8a 	uxth.w	sl, sl
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3696:	ebc9 0908 	rsb	r9, r9, r8
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
    369a:	4611      	mov	r1, r2
    369c:	4650      	mov	r0, sl
    369e:	8862      	ldrh	r2, [r4, #2]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    36a0:	fa1f f989 	uxth.w	r9, r9
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
			GLCD_PutPixel(b+x, y-a, cfg->bcolor);
			GLCD_PutPixel(a+x, y-b, cfg->bcolor);
    36a4:	ebc7 0708 	rsb	r7, r7, r8
		if(!cfg->fill && cfg->bndry)
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
    36a8:	f7ff f9b2 	bl	2a10 <GLCD_PutPixel>
			GLCD_PutPixel(b+x, y-a, cfg->bcolor);
			GLCD_PutPixel(a+x, y-b, cfg->bcolor);
    36ac:	b2bf      	uxth	r7, r7
		{
			GLCD_PutPixel(a+x, b+y, cfg->bcolor);
			GLCD_PutPixel(b+x, a+y, cfg->bcolor);
			GLCD_PutPixel(x-a, b+y, cfg->bcolor);
			GLCD_PutPixel(x-b, a+y, cfg->bcolor);
			GLCD_PutPixel(b+x, y-a, cfg->bcolor);
    36ae:	9805      	ldr	r0, [sp, #20]
    36b0:	4649      	mov	r1, r9
    36b2:	8862      	ldrh	r2, [r4, #2]
    36b4:	f7ff f9ac 	bl	2a10 <GLCD_PutPixel>
			GLCD_PutPixel(a+x, y-b, cfg->bcolor);
    36b8:	9807      	ldr	r0, [sp, #28]
    36ba:	4639      	mov	r1, r7
    36bc:	8862      	ldrh	r2, [r4, #2]
    36be:	f7ff f9a7 	bl	2a10 <GLCD_PutPixel>
			GLCD_PutPixel(x-a, y-b, cfg->bcolor);
    36c2:	4658      	mov	r0, fp
    36c4:	4639      	mov	r1, r7
    36c6:	8862      	ldrh	r2, [r4, #2]
    36c8:	f7ff f9a2 	bl	2a10 <GLCD_PutPixel>
			GLCD_PutPixel(x-b, y-a, cfg->bcolor);
    36cc:	4650      	mov	r0, sl
    36ce:	4649      	mov	r1, r9
    36d0:	8862      	ldrh	r2, [r4, #2]
    36d2:	f7ff f99d 	bl	2a10 <GLCD_PutPixel>
		}

		if(P < 0)
    36d6:	9806      	ldr	r0, [sp, #24]
    36d8:	0401      	lsls	r1, r0, #16
    36da:	d509      	bpl.n	36f0 <GLCD_Circle+0x1ba>
			P+= 3 + 2*a++;
    36dc:	9a06      	ldr	r2, [sp, #24]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    36de:	b2a9      	uxth	r1, r5
			GLCD_PutPixel(x-a, y-b, cfg->bcolor);
			GLCD_PutPixel(x-b, y-a, cfg->bcolor);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    36e0:	1cd3      	adds	r3, r2, #3
    36e2:	eb03 0041 	add.w	r0, r3, r1, lsl #1
    36e6:	b282      	uxth	r2, r0
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    36e8:	3101      	adds	r1, #1
			GLCD_PutPixel(x-a, y-b, cfg->bcolor);
			GLCD_PutPixel(x-b, y-a, cfg->bcolor);
		}

		if(P < 0)
			P+= 3 + 2*a++;
    36ea:	9206      	str	r2, [sp, #24]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    36ec:	b288      	uxth	r0, r1
    36ee:	e00b      	b.n	3708 <GLCD_Circle+0x1d2>
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    36f0:	9906      	ldr	r1, [sp, #24]
    36f2:	b233      	sxth	r3, r6
    36f4:	1ae8      	subs	r0, r5, r3
    36f6:	1d4a      	adds	r2, r1, #5
    36f8:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    36fc:	b28a      	uxth	r2, r1
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    36fe:	1c6b      	adds	r3, r5, #1
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    3700:	3e01      	subs	r6, #1
    3702:	9206      	str	r2, [sp, #24]
 *              radius     the radius of the circle
 *              fill       YES or NO
 *              color      Boundary color
 * @return 		None
 **********************************************************************/
void GLCD_Circle(int16_t x, int16_t y, int16_t radius,COLORCFG_Type *cfg)
    3704:	b298      	uxth	r0, r3
		}

		if(P < 0)
			P+= 3 + 2*a++;
		else
			P+= 5 + 2*(a++ - b--);
    3706:	b2b6      	uxth	r6, r6
	} while(a <= b);
    3708:	b203      	sxth	r3, r0
    370a:	b230      	sxth	r0, r6
    370c:	3501      	adds	r5, #1
    370e:	4283      	cmp	r3, r0
    3710:	dd86      	ble.n	3620 <GLCD_Circle+0xea>
}
    3712:	b00b      	add	sp, #44	; 0x2c
    3714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003718 <GLCD_Window>:
 *              w        width of bitmap
 *              h        height of bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Window (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
    3718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    371a:	4605      	mov	r5, r0
	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    371c:	2045      	movs	r0, #69	; 0x45
 *              w        width of bitmap
 *              h        height of bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Window (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
    371e:	460c      	mov	r4, r1
    3720:	4616      	mov	r6, r2
    3722:	461f      	mov	r7, r3
	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
    3724:	f7ff f866 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x);
    3728:	4628      	mov	r0, r5
    372a:	f7ff f891 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
	Write_Data_Glcd(x+w-1);
    372e:	3d01      	subs	r5, #1
void GLCD_Window (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
	Write_Command_Glcd(0x45);      /* Horizontal GRAM Start Address      */
	Write_Data_Glcd(x);

	Write_Command_Glcd(0x46);      /* Horizontal GRAM End   Address (-1) */
    3730:	2046      	movs	r0, #70	; 0x46
    3732:	f7ff f85f 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x+w-1);
    3736:	1970      	adds	r0, r6, r5
    3738:	b280      	uxth	r0, r0
    373a:	f7ff f889 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
    373e:	2044      	movs	r0, #68	; 0x44
    3740:	f7ff f858 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(y);
    3744:	4620      	mov	r0, r4
    3746:	f7ff f883 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
    374a:	2044      	movs	r0, #68	; 0x44
    374c:	f7ff f852 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd((y+h-1)<<8);
    3750:	3c01      	subs	r4, #1
    3752:	193f      	adds	r7, r7, r4
    3754:	0239      	lsls	r1, r7, #8
    3756:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
}
    375a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	Write_Command_Glcd(0x44);      /* Vertical   GRAM Start Address      */
	Write_Data_Glcd(y);

	Write_Command_Glcd(0x44);      /* Vertical   GRAM End   Address (-1) */
	Write_Data_Glcd((y+h-1)<<8);
    375e:	f7ff b877 	b.w	2850 <Write_Data_Glcd>

00003762 <GLCD_Display_String>:
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
{
    3762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3764:	4607      	mov	r7, r0
	GLCD_Window(0,0,320,240);  // Window Max
    3766:	2000      	movs	r0, #0
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
{
    3768:	460e      	mov	r6, r1
    376a:	4615      	mov	r5, r2
	GLCD_Window(0,0,320,240);  // Window Max
    376c:	4601      	mov	r1, r0
    376e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3772:	23f0      	movs	r3, #240	; 0xf0
    3774:	f7ff ffd0 	bl	3718 <GLCD_Window>
	while (*s)
    3778:	2400      	movs	r4, #0
 * @param[in]	ln       line number
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
    377a:	1931      	adds	r1, r6, r4
    377c:	3401      	adds	r4, #1
    377e:	192b      	adds	r3, r5, r4
{
	GLCD_Window(0,0,320,240);  // Window Max
	while (*s)
    3780:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 * @param[in]	ln       line number
 *              col      column number
 *              s        pointer to string
 * @return 		None
 **********************************************************************/
void GLCD_Display_String (uint16_t ln, uint16_t col, uchar *s)
    3784:	b289      	uxth	r1, r1
{
	GLCD_Window(0,0,320,240);  // Window Max
	while (*s)
    3786:	b11a      	cbz	r2, 3790 <GLCD_Display_String+0x2e>
	{
		GLCD_Display_Char(ln, col++, *s++);
    3788:	4638      	mov	r0, r7
    378a:	f7ff f92d 	bl	29e8 <GLCD_Display_Char>
    378e:	e7f4      	b.n	377a <GLCD_Display_String+0x18>
	}
}
    3790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003792 <GLCD_ClearLn>:
 * @brief	    Clear given line
 * @param[in]	ln       line number
 * @return 		None
 **********************************************************************/
void GLCD_ClearLn (uint16_t ln)
{
    3792:	b510      	push	{r4, lr}
    3794:	4604      	mov	r4, r0
	GLCD_Window(0,0,320,240);  // Window Max
    3796:	2000      	movs	r0, #0
    3798:	4601      	mov	r1, r0
    379a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    379e:	23f0      	movs	r3, #240	; 0xf0
    37a0:	f7ff ffba 	bl	3718 <GLCD_Window>
	GLCD_Display_String(ln, 0, "                    ");
    37a4:	4a03      	ldr	r2, [pc, #12]	; (37b4 <GLCD_ClearLn+0x22>)
    37a6:	4620      	mov	r0, r4
    37a8:	2100      	movs	r1, #0
}
    37aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @return 		None
 **********************************************************************/
void GLCD_ClearLn (uint16_t ln)
{
	GLCD_Window(0,0,320,240);  // Window Max
	GLCD_Display_String(ln, 0, "                    ");
    37ae:	f7ff bfd8 	b.w	3762 <GLCD_Display_String>
    37b2:	bf00      	nop
    37b4:	0007728c 	.word	0x0007728c

000037b8 <GLCD_Clear>:
 * @brief	    Clear display
 * @param[in]	color    display clearing color
 * @return 		None
 **********************************************************************/
void GLCD_Clear (uint16_t color)
{
    37b8:	b538      	push	{r3, r4, r5, lr}
    37ba:	4605      	mov	r5, r0
	unsigned int   i;

	GLCD_Window (0,0,320,240);    // Window Max
    37bc:	2000      	movs	r0, #0
    37be:	4601      	mov	r1, r0
    37c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    37c4:	23f0      	movs	r3, #240	; 0xf0
    37c6:	f7ff ffa7 	bl	3718 <GLCD_Window>

	Write_Command_Glcd(0x4E);     /* GDDRAM Horizontal */
    37ca:	204e      	movs	r0, #78	; 0x4e
    37cc:	f7ff f812 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0);
    37d0:	2000      	movs	r0, #0
    37d2:	f7ff f83d 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
    37d6:	204f      	movs	r0, #79	; 0x4f
    37d8:	f7ff f80c 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0);
    37dc:	2000      	movs	r0, #0
    37de:	f7ff f837 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x22);
    37e2:	2022      	movs	r0, #34	; 0x22
    37e4:	f7ff f806 	bl	27f4 <Write_Command_Glcd>
	wr_dat_start();
    37e8:	f7fe ffb0 	bl	274c <wr_dat_start>
    37ec:	f44f 3496 	mov.w	r4, #76800	; 0x12c00
	for(i = 0; i < (WIDTH*HEIGHT); i++)
		wr_dat_only(color);
    37f0:	4628      	mov	r0, r5
    37f2:	f7fe ffbf 	bl	2774 <wr_dat_only>
	Write_Command_Glcd(0x4F);     /* GDDRAM Vertical */
	Write_Data_Glcd(0);

	Write_Command_Glcd(0x22);
	wr_dat_start();
	for(i = 0; i < (WIDTH*HEIGHT); i++)
    37f6:	3c01      	subs	r4, #1
    37f8:	d1fa      	bne.n	37f0 <GLCD_Clear+0x38>
		wr_dat_only(color);
	wr_dat_stop();
}
    37fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	Write_Command_Glcd(0x22);
	wr_dat_start();
	for(i = 0; i < (WIDTH*HEIGHT); i++)
		wr_dat_only(color);
	wr_dat_stop();
    37fe:	f7fe bfb3 	b.w	2768 <wr_dat_stop>

00003802 <GLCD_Set_Loc>:
 *              w        width of bitmap
 *              h        height of bitmap
 * @return 		None
 **********************************************************************/
void GLCD_Set_Loc (uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
    3802:	b538      	push	{r3, r4, r5, lr}
    3804:	460c      	mov	r4, r1
    3806:	4605      	mov	r5, r0
	GLCD_Window (x,y,w,h);
    3808:	f7ff ff86 	bl	3718 <GLCD_Window>

	Write_Command_Glcd(0x4E);    // GDDRAM Horizontal
    380c:	204e      	movs	r0, #78	; 0x4e
    380e:	f7fe fff1 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(x);       // Page 58 of SSD2119 datasheet
    3812:	4628      	mov	r0, r5
    3814:	f7ff f81c 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);    // GDDRAM Vertical
    3818:	204f      	movs	r0, #79	; 0x4f
    381a:	f7fe ffeb 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(y);       // Page 58 of SSD2119 datasheet
    381e:	4620      	mov	r0, r4
    3820:	f7ff f816 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x22);    // RAM data write/read
    3824:	2022      	movs	r0, #34	; 0x22
}
    3826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Write_Data_Glcd(x);       // Page 58 of SSD2119 datasheet

	Write_Command_Glcd(0x4F);    // GDDRAM Vertical
	Write_Data_Glcd(y);       // Page 58 of SSD2119 datasheet

	Write_Command_Glcd(0x22);    // RAM data write/read
    382a:	f7fe bfe3 	b.w	27f4 <Write_Command_Glcd>

0000382e <GLCD_Window_Fill>:
 *              h        height of bitmap
 *              color    window color
 * @return 		None
 **********************************************************************/
void GLCD_Window_Fill (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
    382e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3832:	4617      	mov	r7, r2
    3834:	461e      	mov	r6, r3
    3836:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	uint32_t i,j;

	GLCD_Set_Loc (x,y,w,h);
    383a:	f7ff ffe2 	bl	3802 <GLCD_Set_Loc>

	wr_dat_start();
    383e:	f7fe ff85 	bl	274c <wr_dat_start>
	for (j = 0; j < h; j++)
    3842:	2400      	movs	r4, #0
    3844:	42b4      	cmp	r4, r6
    3846:	d209      	bcs.n	385c <GLCD_Window_Fill+0x2e>
    3848:	2500      	movs	r5, #0
	{
		for (i = 0; i < w; i++)
    384a:	42bd      	cmp	r5, r7
    384c:	d204      	bcs.n	3858 <GLCD_Window_Fill+0x2a>
		{
			wr_dat_only(color);
    384e:	4640      	mov	r0, r8
    3850:	f7fe ff90 	bl	2774 <wr_dat_only>
	GLCD_Set_Loc (x,y,w,h);

	wr_dat_start();
	for (j = 0; j < h; j++)
	{
		for (i = 0; i < w; i++)
    3854:	3501      	adds	r5, #1
    3856:	e7f8      	b.n	384a <GLCD_Window_Fill+0x1c>
	uint32_t i,j;

	GLCD_Set_Loc (x,y,w,h);

	wr_dat_start();
	for (j = 0; j < h; j++)
    3858:	3401      	adds	r4, #1
    385a:	e7f3      	b.n	3844 <GLCD_Window_Fill+0x16>
		{
			wr_dat_only(color);
		}
	}
	wr_dat_stop();
}
    385c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		for (i = 0; i < w; i++)
		{
			wr_dat_only(color);
		}
	}
	wr_dat_stop();
    3860:	f7fe bf82 	b.w	2768 <wr_dat_stop>

00003864 <GLCD_Bar>:
	 * half of width should be left and other half on right, so after subracting
	 * half width from center we get x point of bar.
	 * Par2 : 220 is Y ref line so (220 - bar heigth) will give y point of bar.
	 * Par4 : per*2 is scaling for 200 pixels for 100 percentage heigth.
	 **************************************************************************/
	if((per<=100) && (index<=10))
    3864:	2a64      	cmp	r2, #100	; 0x64
 *              per        Percentage height
 *              color      Bar Color
 * @return 		None
 **********************************************************************/
void GLCD_Bar(int16_t index,uint8_t width,int16_t per,uint16_t color)
{
    3866:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3868:	460c      	mov	r4, r1
    386a:	461d      	mov	r5, r3
	 * half of width should be left and other half on right, so after subracting
	 * half width from center we get x point of bar.
	 * Par2 : 220 is Y ref line so (220 - bar heigth) will give y point of bar.
	 * Par4 : per*2 is scaling for 200 pixels for 100 percentage heigth.
	 **************************************************************************/
	if((per<=100) && (index<=10))
    386c:	dc12      	bgt.n	3894 <GLCD_Bar+0x30>
    386e:	280a      	cmp	r0, #10
    3870:	dc10      	bgt.n	3894 <GLCD_Bar+0x30>
	{
		GLCD_Window_Fill(30+(index*26)-(width-(width/2)),220-(per*2),width,per*2,color);
    3872:	231a      	movs	r3, #26
    3874:	4358      	muls	r0, r3
    3876:	301e      	adds	r0, #30
    3878:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    387c:	1a40      	subs	r0, r0, r1
    387e:	f1c2 016e 	rsb	r1, r2, #110	; 0x6e
    3882:	004b      	lsls	r3, r1, #1
    3884:	0052      	lsls	r2, r2, #1
    3886:	b299      	uxth	r1, r3
    3888:	9500      	str	r5, [sp, #0]
    388a:	b293      	uxth	r3, r2
    388c:	b280      	uxth	r0, r0
    388e:	4622      	mov	r2, r4
    3890:	f7ff ffcd 	bl	382e <GLCD_Window_Fill>
	}
}
    3894:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00003896 <GLCD_Rect>:
 *              color        Boundary color
 *              fill_color   fill color
 * @return 		None
 **********************************************************************/
void GLCD_Rect(COORDINATE_Type *p1, COORDINATE_Type *p2, Bool fill, uint16_t color, uint16_t fill_color)
{
    3896:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    389a:	460c      	mov	r4, r1
    389c:	4605      	mov	r5, r0
    389e:	4698      	mov	r8, r3
    38a0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
	int16_t  width,height;                          // Find the y min and max

	if(fill)
    38a4:	2a00      	cmp	r2, #0
    38a6:	d041      	beq.n	392c <GLCD_Rect+0x96>
	{
		if(p2->x > p1->x)
    38a8:	f8b0 e000 	ldrh.w	lr, [r0]
    38ac:	8822      	ldrh	r2, [r4, #0]
    38ae:	fa0f f38e 	sxth.w	r3, lr
    38b2:	b210      	sxth	r0, r2
    38b4:	8867      	ldrh	r7, [r4, #2]
    38b6:	886e      	ldrh	r6, [r5, #2]
    38b8:	4298      	cmp	r0, r3
		{
			if(p2->y > p1->y)
    38ba:	b238      	sxth	r0, r7
    38bc:	b233      	sxth	r3, r6
{
	int16_t  width,height;                          // Find the y min and max

	if(fill)
	{
		if(p2->x > p1->x)
    38be:	dd13      	ble.n	38e8 <GLCD_Rect+0x52>
		{
			if(p2->y > p1->y)
    38c0:	4298      	cmp	r0, r3
    38c2:	fa1f fc8e 	uxth.w	ip, lr
    38c6:	dd07      	ble.n	38d8 <GLCD_Rect+0x42>
			{
				width = p2->x - p1->x;
				height = p2->y - p1->y;
    38c8:	b2b6      	uxth	r6, r6
	{
		if(p2->x > p1->x)
		{
			if(p2->y > p1->y)
			{
				width = p2->x - p1->x;
    38ca:	3a01      	subs	r2, #1
				height = p2->y - p1->y;
				GLCD_Window_Fill(p1->x+1,p1->y+1,width-1,height-1,fill_color);
    38cc:	f10c 0001 	add.w	r0, ip, #1
    38d0:	1c73      	adds	r3, r6, #1
    38d2:	ebcc 0202 	rsb	r2, ip, r2
    38d6:	e011      	b.n	38fc <GLCD_Rect+0x66>
			}
			else
			{
				width = p2->x - p1->x;
				height = p1->y - p2->y;
    38d8:	b2bf      	uxth	r7, r7
				height = p2->y - p1->y;
				GLCD_Window_Fill(p1->x+1,p1->y+1,width-1,height-1,fill_color);
			}
			else
			{
				width = p2->x - p1->x;
    38da:	3a01      	subs	r2, #1
				height = p1->y - p2->y;
				GLCD_Window_Fill(p1->x+1,p2->y+1,width-1,height-1,fill_color);
    38dc:	f10c 0001 	add.w	r0, ip, #1
    38e0:	1c7b      	adds	r3, r7, #1
    38e2:	ebcc 0202 	rsb	r2, ip, r2
    38e6:	e018      	b.n	391a <GLCD_Rect+0x84>
			}
		}
		else
		{
			if(p2->y > p1->y)
    38e8:	4298      	cmp	r0, r3
    38ea:	b292      	uxth	r2, r2
    38ec:	dd0e      	ble.n	390c <GLCD_Rect+0x76>
			{
				width = p1->x - p2->x;
				height = p2->y - p1->y;
    38ee:	b2b6      	uxth	r6, r6
		}
		else
		{
			if(p2->y > p1->y)
			{
				width = p1->x - p2->x;
    38f0:	f10e 3eff 	add.w	lr, lr, #4294967295
				height = p2->y - p1->y;
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
    38f4:	1c50      	adds	r0, r2, #1
    38f6:	1c73      	adds	r3, r6, #1
    38f8:	ebc2 020e 	rsb	r2, r2, lr
		else
		{
			if(p2->y > p1->y)
			{
				width = p1->x - p2->x;
				height = p2->y - p1->y;
    38fc:	3f01      	subs	r7, #1
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
    38fe:	1bbe      	subs	r6, r7, r6
    3900:	9100      	str	r1, [sp, #0]
    3902:	b280      	uxth	r0, r0
    3904:	b299      	uxth	r1, r3
    3906:	b292      	uxth	r2, r2
    3908:	b2b3      	uxth	r3, r6
    390a:	e00d      	b.n	3928 <GLCD_Rect+0x92>
			}
			else
			{
				width = p1->x - p2->x;
				height = p1->y - p2->y;
    390c:	b2bf      	uxth	r7, r7
				height = p2->y - p1->y;
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
			}
			else
			{
				width = p1->x - p2->x;
    390e:	f10e 3cff 	add.w	ip, lr, #4294967295
				height = p1->y - p2->y;
				GLCD_Window_Fill(p2->x+1,p2->y+1,width-1,height-1,fill_color);
    3912:	1c50      	adds	r0, r2, #1
    3914:	1c7b      	adds	r3, r7, #1
    3916:	ebc2 020c 	rsb	r2, r2, ip
				GLCD_Window_Fill(p2->x+1,p1->y+1,width-1,height-1,fill_color);
			}
			else
			{
				width = p1->x - p2->x;
				height = p1->y - p2->y;
    391a:	3e01      	subs	r6, #1
				GLCD_Window_Fill(p2->x+1,p2->y+1,width-1,height-1,fill_color);
    391c:	1bf7      	subs	r7, r6, r7
    391e:	9100      	str	r1, [sp, #0]
    3920:	b280      	uxth	r0, r0
    3922:	b299      	uxth	r1, r3
    3924:	b292      	uxth	r2, r2
    3926:	b2bb      	uxth	r3, r7
    3928:	f7ff ff81 	bl	382e <GLCD_Window_Fill>
		}
		fill = NO;
	}
	if(!fill)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
    392c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    3930:	f9b5 0000 	ldrsh.w	r0, [r5]
    3934:	f9b4 2000 	ldrsh.w	r2, [r4]
    3938:	460b      	mov	r3, r1
    393a:	f8cd 8000 	str.w	r8, [sp]
    393e:	f7ff f914 	bl	2b6a <GLCD_Line>
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
    3942:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    3946:	f9b5 0000 	ldrsh.w	r0, [r5]
    394a:	f9b4 2000 	ldrsh.w	r2, [r4]
    394e:	460b      	mov	r3, r1
    3950:	f8cd 8000 	str.w	r8, [sp]
    3954:	f7ff f909 	bl	2b6a <GLCD_Line>
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
    3958:	f9b5 0000 	ldrsh.w	r0, [r5]
    395c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    3960:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    3964:	4602      	mov	r2, r0
    3966:	f8cd 8000 	str.w	r8, [sp]
    396a:	f7ff f8fe 	bl	2b6a <GLCD_Line>
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    396e:	f9b4 0000 	ldrsh.w	r0, [r4]
    3972:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
    3976:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    397a:	4602      	mov	r2, r0
    397c:	f8cd 8020 	str.w	r8, [sp, #32]
	}
}
    3980:	b002      	add	sp, #8
    3982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if(!fill)
	{
		GLCD_Line(p1->x, p1->y, p2->x, p1->y, color);      // Draw the outer border 4 sides
		GLCD_Line(p1->x, p2->y, p2->x, p2->y, color);
		GLCD_Line(p1->x, p1->y, p1->x, p2->y, color);
		GLCD_Line(p2->x, p1->y, p2->x, p2->y, color);
    3986:	f7ff b8f0 	b.w	2b6a <GLCD_Line>

0000398a <GLCD_Bitmap>:
 *              h        height of bitmap
 *              bitmap   address at which the bitmap data resides
 * @return 		None
 **********************************************************************/
void GLCD_Bitmap (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap)
{
    398a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    398e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    3992:	4617      	mov	r7, r2
    3994:	4699      	mov	r9, r3
	uint32_t i,j,k;

	GLCD_Set_Loc (x,y,w,h);
    3996:	f7ff ff34 	bl	3802 <GLCD_Set_Loc>

	wr_dat_start();
    399a:	f7fe fed7 	bl	274c <wr_dat_start>
	k = 16;
    399e:	2510      	movs	r5, #16
	for (j = 0; j < h; j++)
    39a0:	2600      	movs	r6, #0
    39a2:	454e      	cmp	r6, r9
    39a4:	d20d      	bcs.n	39c2 <GLCD_Bitmap+0x38>
 *              w        width of bitmap
 *              h        height of bitmap
 *              bitmap   address at which the bitmap data resides
 * @return 		None
 **********************************************************************/
void GLCD_Bitmap (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap)
    39a6:	eb08 0a45 	add.w	sl, r8, r5, lsl #1
    39aa:	2400      	movs	r4, #0

	wr_dat_start();
	k = 16;
	for (j = 0; j < h; j++)
	{
		for (i = 0; i < w; i++)
    39ac:	42bc      	cmp	r4, r7
    39ae:	d205      	bcs.n	39bc <GLCD_Bitmap+0x32>
		{
			wr_dat_only(bitmap[k++]);
    39b0:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
    39b4:	f7fe fede 	bl	2774 <wr_dat_only>

	wr_dat_start();
	k = 16;
	for (j = 0; j < h; j++)
	{
		for (i = 0; i < w; i++)
    39b8:	3401      	adds	r4, #1
    39ba:	e7f7      	b.n	39ac <GLCD_Bitmap+0x22>
 *              w        width of bitmap
 *              h        height of bitmap
 *              bitmap   address at which the bitmap data resides
 * @return 		None
 **********************************************************************/
void GLCD_Bitmap (uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t *bitmap)
    39bc:	19ed      	adds	r5, r5, r7

	GLCD_Set_Loc (x,y,w,h);

	wr_dat_start();
	k = 16;
	for (j = 0; j < h; j++)
    39be:	3601      	adds	r6, #1
    39c0:	e7ef      	b.n	39a2 <GLCD_Bitmap+0x18>
		{
			wr_dat_only(bitmap[k++]);
		}
	}
	wr_dat_stop();
}
    39c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		for (i = 0; i < w; i++)
		{
			wr_dat_only(bitmap[k++]);
		}
	}
	wr_dat_stop();
    39c6:	f7fe becf 	b.w	2768 <wr_dat_stop>

000039ca <GLCD_Display_Home>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Display_Home (void)
{
	GLCD_Set_Loc (0,0,320,240);
    39ca:	2000      	movs	r0, #0
    39cc:	4601      	mov	r1, r0
    39ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
    39d2:	23f0      	movs	r3, #240	; 0xf0
    39d4:	f7ff bf15 	b.w	3802 <GLCD_Set_Loc>

000039d8 <GLCD_Driver_OutCtrl>:
 * 						- BOTTOM_LEFT
 * 						- BOTTOM_RIGHT
 * @return 		None
 **********************************************************************/
void GLCD_Driver_OutCtrl (DRIVER_OUT_Type drv)
{
    39d8:	b510      	push	{r4, lr}
    39da:	4604      	mov	r4, r0
	Write_Command_Glcd(0x01);    // Driver Output Control
    39dc:	2001      	movs	r0, #1
    39de:	f7fe ff09 	bl	27f4 <Write_Command_Glcd>

	switch (drv)
    39e2:	2c03      	cmp	r4, #3
    39e4:	d812      	bhi.n	3a0c <GLCD_Driver_OutCtrl+0x34>
    39e6:	e8df f004 	tbb	[pc, r4]
    39ea:	0502      	.short	0x0502
    39ec:	0b08      	.short	0x0b08
	{
	case TOP_LEFT:
		Write_Data_Glcd(0x72EF);       // Page 36-39 of SSD2119 datasheet
    39ee:	f247 20ef 	movw	r0, #29423	; 0x72ef
    39f2:	e007      	b.n	3a04 <GLCD_Driver_OutCtrl+0x2c>
		break;

	case TOP_RIGHT:
		Write_Data_Glcd(0x70EF);       // Page 36-39 of SSD2119 datasheet
    39f4:	f247 00ef 	movw	r0, #28911	; 0x70ef
    39f8:	e004      	b.n	3a04 <GLCD_Driver_OutCtrl+0x2c>
		break;

	case BOTTOM_LEFT:
		Write_Data_Glcd(0x32EF);       // Page 36-39 of SSD2119 datasheet
    39fa:	f243 20ef 	movw	r0, #13039	; 0x32ef
    39fe:	e001      	b.n	3a04 <GLCD_Driver_OutCtrl+0x2c>
		break;

	case BOTTOM_RIGHT:
		Write_Data_Glcd(0x30EF);       // Page 36-39 of SSD2119 datasheet
    3a00:	f243 00ef 	movw	r0, #12527	; 0x30ef
		break;

	default:
		break;
	}
}
    3a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	case BOTTOM_LEFT:
		Write_Data_Glcd(0x32EF);       // Page 36-39 of SSD2119 datasheet
		break;

	case BOTTOM_RIGHT:
		Write_Data_Glcd(0x30EF);       // Page 36-39 of SSD2119 datasheet
    3a08:	f7fe bf22 	b.w	2850 <Write_Data_Glcd>
    3a0c:	bd10      	pop	{r4, pc}

00003a0e <GLCD_Init>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Init (void)
{
	GPIO_SetDir(2, LCD_RS, 1);   // RS as output
    3a0e:	2101      	movs	r1, #1
 * @brief	    This function Initializes GLCD
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void GLCD_Init (void)
{
    3a10:	b510      	push	{r4, lr}
	GPIO_SetDir(2, LCD_RS, 1);   // RS as output
    3a12:	2002      	movs	r0, #2
    3a14:	460a      	mov	r2, r1
    3a16:	f7fc fd20 	bl	45a <GPIO_SetDir>
	GPIO_SetDir(0, LCD_RST, 1);  // Reset as Output
    3a1a:	2000      	movs	r0, #0
    3a1c:	2120      	movs	r1, #32
    3a1e:	2201      	movs	r2, #1
    3a20:	f7fc fd1b 	bl	45a <GPIO_SetDir>
	GPIO_SetDir(2, LCD_BK, 1);   // Backlight as output
    3a24:	f44f 7180 	mov.w	r1, #256	; 0x100
    3a28:	2201      	movs	r2, #1
    3a2a:	2002      	movs	r0, #2
    3a2c:	f7fc fd15 	bl	45a <GPIO_SetDir>

	delay_ms(2);
    3a30:	2002      	movs	r0, #2
    3a32:	f7fd fd4d 	bl	14d0 <delay_ms>
	GLCD_Reset();                // Reset GLCD
    3a36:	f7fe febc 	bl	27b2 <GLCD_Reset>
	GLCD_Backlight(ENABLE);
    3a3a:	2001      	movs	r0, #1
    3a3c:	f7fe feae 	bl	279c <GLCD_Backlight>
	delay_ms(2);
    3a40:	2002      	movs	r0, #2
    3a42:	f7fd fd45 	bl	14d0 <delay_ms>

	Write_Command_Glcd(0x28);    // VCOM OTP
    3a46:	2028      	movs	r0, #40	; 0x28
    3a48:	f7fe fed4 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0006);     // Page 55-56 of SSD2119 datasheet
    3a4c:	2006      	movs	r0, #6
    3a4e:	f7fe feff 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x00);    // start Oscillator
    3a52:	2000      	movs	r0, #0
    3a54:	f7fe fece 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0001);     // Page 36 of SSD2119 datasheet
    3a58:	2001      	movs	r0, #1
    3a5a:	f7fe fef9 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x10);    // Sleep mode
    3a5e:	2010      	movs	r0, #16
    3a60:	f7fe fec8 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 49 of SSD2119 datasheet
    3a64:	2000      	movs	r0, #0
    3a66:	f7fe fef3 	bl	2850 <Write_Data_Glcd>

	GLCD_Driver_OutCtrl (TOP_LEFT);
    3a6a:	2000      	movs	r0, #0
    3a6c:	f7ff ffb4 	bl	39d8 <GLCD_Driver_OutCtrl>

	Write_Command_Glcd(0x02);    // LCD Driving Waveform Control
    3a70:	2002      	movs	r0, #2
    3a72:	f7fe febf 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0600);     // Page 40-42 of SSD2119 datasheet
    3a76:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    3a7a:	f7fe fee9 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x03);    // Power Control 1
    3a7e:	2003      	movs	r0, #3
    3a80:	f7fe feb8 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x6A38);     // Page 43-44 of SSD2119 datasheet 6A38
    3a84:	f646 2038 	movw	r0, #27192	; 0x6a38
    3a88:	f7fe fee2 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x11);    // Entry Mode
    3a8c:	2011      	movs	r0, #17
    3a8e:	f7fe feb1 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x6870);     // Page 50-52 of SSD2119 datasheet
    3a92:	f646 0070 	movw	r0, #26736	; 0x6870
    3a96:	f7fe fedb 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x0F);    // Gate Scan Position
    3a9a:	200f      	movs	r0, #15
    3a9c:	f7fe feaa 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 49 of SSD2119 datasheet
    3aa0:	2000      	movs	r0, #0
    3aa2:	f7fe fed5 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x0B);    // Frame Cycle Control
    3aa6:	200b      	movs	r0, #11
    3aa8:	f7fe fea4 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x5308);     // Page 45 of SSD2119 datasheet
    3aac:	f245 3008 	movw	r0, #21256	; 0x5308
    3ab0:	f7fe fece 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x0C);    // Power Control 2
    3ab4:	200c      	movs	r0, #12
    3ab6:	f7fe fe9d 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0003);     // Page 47 of SSD2119 datasheet
    3aba:	2003      	movs	r0, #3
    3abc:	f7fe fec8 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x0D);    // Power Control 3
    3ac0:	200d      	movs	r0, #13
    3ac2:	f7fe fe97 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x000A);     // Page 48 of SSD2119 datasheet
    3ac6:	200a      	movs	r0, #10
    3ac8:	f7fe fec2 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x0E);    // Power Control 4
    3acc:	200e      	movs	r0, #14
    3ace:	f7fe fe91 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x2E00);     // Page 48 of SSD2119 datasheet
    3ad2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
    3ad6:	f7fe febb 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x1E);    // Power Control 5
    3ada:	201e      	movs	r0, #30
    3adc:	f7fe fe8a 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x00BE);     // Page 53 of SSD2119 datasheet
    3ae0:	20be      	movs	r0, #190	; 0xbe
    3ae2:	f7fe feb5 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x25);    // Frame Frequency Control
    3ae6:	2025      	movs	r0, #37	; 0x25
    3ae8:	f7fe fe84 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x8000);     // Page 53 of SSD2119 datasheet  8000
    3aec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3af0:	f7fe feae 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x26);    // Analog setting
    3af4:	2026      	movs	r0, #38	; 0x26
    3af6:	f7fe fe7d 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x7800);     // Page 54 of SSD2119 datasheet
    3afa:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
    3afe:	f7fe fea7 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x4E);    // Ram Address Set
    3b02:	204e      	movs	r0, #78	; 0x4e
    3b04:	f7fe fe76 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 58 of SSD2119 datasheet
    3b08:	2000      	movs	r0, #0
    3b0a:	f7fe fea1 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x4F);    // Ram Address Set
    3b0e:	204f      	movs	r0, #79	; 0x4f
    3b10:	f7fe fe70 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);     // Page 58 of SSD2119 datasheet
    3b14:	2000      	movs	r0, #0
    3b16:	f7fe fe9b 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x12);    // Sleep mode
    3b1a:	2012      	movs	r0, #18
    3b1c:	f7fe fe6a 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x08D9);     // Page 49 of SSD2119 datasheet
    3b20:	f640 00d9 	movw	r0, #2265	; 0x8d9
    3b24:	f7fe fe94 	bl	2850 <Write_Data_Glcd>

	// Gamma Control (R30h to R3Bh) -- Page 56 of SSD2119 datasheet
	Write_Command_Glcd(0x30);
    3b28:	2030      	movs	r0, #48	; 0x30
    3b2a:	f7fe fe63 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0000);
    3b2e:	2000      	movs	r0, #0
    3b30:	f7fe fe8e 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x31);
    3b34:	2031      	movs	r0, #49	; 0x31
    3b36:	f7fe fe5d 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0104);
    3b3a:	f44f 7082 	mov.w	r0, #260	; 0x104
    3b3e:	f7fe fe87 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x32);
    3b42:	2032      	movs	r0, #50	; 0x32
    3b44:	f7fe fe56 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0100);
    3b48:	f44f 7080 	mov.w	r0, #256	; 0x100
    3b4c:	f7fe fe80 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x33);
	Write_Data_Glcd(0x0305);
    3b50:	f240 3405 	movw	r4, #773	; 0x305
	Write_Data_Glcd(0x0104);

	Write_Command_Glcd(0x32);
	Write_Data_Glcd(0x0100);

	Write_Command_Glcd(0x33);
    3b54:	2033      	movs	r0, #51	; 0x33
    3b56:	f7fe fe4d 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0305);
    3b5a:	4620      	mov	r0, r4
    3b5c:	f7fe fe78 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x34);
    3b60:	2034      	movs	r0, #52	; 0x34
    3b62:	f7fe fe47 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0505);
    3b66:	f240 5005 	movw	r0, #1285	; 0x505
    3b6a:	f7fe fe71 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x35);
    3b6e:	2035      	movs	r0, #53	; 0x35
    3b70:	f7fe fe40 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0305);
    3b74:	4620      	mov	r0, r4
    3b76:	f7fe fe6b 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x36);
    3b7a:	2036      	movs	r0, #54	; 0x36
    3b7c:	f7fe fe3a 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0707);
    3b80:	f240 7007 	movw	r0, #1799	; 0x707
    3b84:	f7fe fe64 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x37);
    3b88:	2037      	movs	r0, #55	; 0x37
    3b8a:	f7fe fe33 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0300);
    3b8e:	f44f 7040 	mov.w	r0, #768	; 0x300
    3b92:	f7fe fe5d 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x3A);
    3b96:	203a      	movs	r0, #58	; 0x3a
    3b98:	f7fe fe2c 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x1200);
    3b9c:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    3ba0:	f7fe fe56 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x3B);
    3ba4:	203b      	movs	r0, #59	; 0x3b
    3ba6:	f7fe fe25 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0800);
    3baa:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3bae:	f7fe fe4f 	bl	2850 <Write_Data_Glcd>

	Write_Command_Glcd(0x07);      // Display Control
    3bb2:	2007      	movs	r0, #7
    3bb4:	f7fe fe1e 	bl	27f4 <Write_Command_Glcd>
	Write_Data_Glcd(0x0033);       // Page 45 of SSD2119 datasheet
    3bb8:	2033      	movs	r0, #51	; 0x33
    3bba:	f7fe fe49 	bl	2850 <Write_Data_Glcd>

	delay_ms(5);
    3bbe:	2005      	movs	r0, #5
    3bc0:	f7fd fc86 	bl	14d0 <delay_ms>

	Write_Command_Glcd(0x22);    // RAM data write/read
    3bc4:	2022      	movs	r0, #34	; 0x22
}
    3bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Write_Command_Glcd(0x07);      // Display Control
	Write_Data_Glcd(0x0033);       // Page 45 of SSD2119 datasheet

	delay_ms(5);

	Write_Command_Glcd(0x22);    // RAM data write/read
    3bca:	f7fe be13 	b.w	27f4 <Write_Command_Glcd>
    3bce:	bf00      	nop

00003bd0 <Port_Init>:
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void Port_Init(void)
{
	GPIO_SetDir(3, _BIT(25), 1);        // Set HeartBeat Led P3.25 to Output
    3bd0:	2003      	movs	r0, #3
    3bd2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    3bd6:	2201      	movs	r2, #1
    3bd8:	f7fc bc3f 	b.w	45a <GPIO_SetDir>

00003bdc <System_Init>:
 * @brief	Initial System Init using Port and Peripheral
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void System_Init(void)
{
    3bdc:	b508      	push	{r3, lr}
	LPC_WDT->WDMOD &= ~WDT_WDMOD_WDEN;  // Disable Watchdog
    3bde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3be2:	781a      	ldrb	r2, [r3, #0]
    3be4:	f002 00fe 	and.w	r0, r2, #254	; 0xfe
    3be8:	7018      	strb	r0, [r3, #0]
	SystemInit();						// Initialize system and update core clock
    3bea:	f000 f8c7 	bl	3d7c <SystemInit>
	Port_Init();                        // Port Initialization
    3bee:	f7ff ffef 	bl	3bd0 <Port_Init>
	SYSTICK_Config();                   // Systick Initialization
    3bf2:	f7fd fcd3 	bl	159c <SYSTICK_Config>
	led_delay = 1000;                   // Heart Beat rate of 1Sec toggle
    3bf6:	4b0c      	ldr	r3, [pc, #48]	; (3c28 <System_Init+0x4c>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
    3bf8:	480c      	ldr	r0, [pc, #48]	; (3c2c <System_Init+0x50>)
    3bfa:	2200      	movs	r2, #0
    3bfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3c00:	6019      	str	r1, [r3, #0]
    3c02:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
	NVIC_SetPriority(SysTick_IRQn, 0);  // Set SysTick as Highest Priority

	UART_Config(LPC_UART0, 115200);       // Uart0 Initialize at 9600 Baud Rate
    3c06:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    3c0a:	4809      	ldr	r0, [pc, #36]	; (3c30 <System_Init+0x54>)
    3c0c:	f7fd fec6 	bl	199c <UART_Config>
	SSP_Config (LPC_SSP1);              // Initialize SPI
    3c10:	4808      	ldr	r0, [pc, #32]	; (3c34 <System_Init+0x58>)
    3c12:	f7fd fadf 	bl	11d4 <SSP_Config>
	I2C_Config (LPC_I2C0);              // Initialize I2C0
    3c16:	4808      	ldr	r0, [pc, #32]	; (3c38 <System_Init+0x5c>)
    3c18:	f7fc fdee 	bl	7f8 <I2C_Config>
	GLCD_Init();                        // Initialize GLCD
    3c1c:	f7ff fef7 	bl	3a0e <GLCD_Init>
	ADC_Config ();                      // Initialize ADC
}
    3c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	UART_Config(LPC_UART0, 115200);       // Uart0 Initialize at 9600 Baud Rate
	SSP_Config (LPC_SSP1);              // Initialize SPI
	I2C_Config (LPC_I2C0);              // Initialize I2C0
	GLCD_Init();                        // Initialize GLCD
	ADC_Config ();                      // Initialize ADC
    3c24:	f7fc bb40 	b.w	2a8 <ADC_Config>
    3c28:	10000360 	.word	0x10000360
    3c2c:	e000ed00 	.word	0xe000ed00
    3c30:	4000c000 	.word	0x4000c000
    3c34:	40030000 	.word	0x40030000
    3c38:	4001c000 	.word	0x4001c000
    3c3c:	00000000 	.word	0x00000000

00003c40 <main>:
   allow the linker to generate wrapper code to setup stacks, allocate
   heap area, and initialize and copy code and data segments. For GNU
   toolsets, the entry point is through __start() in the crt0_gnu.asm
   file, and that startup code will setup stacks and data */
int main(void)
{
    3c40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t adc_value;
	uint16_t PercentBy2;
	int16_t prev=0,diff,y_ref;
	System_Init();                        // Initialize System
    3c42:	f7ff ffcb 	bl	3bdc <System_Init>

	GLCD_Clear(White);
    3c46:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3c4a:	f7ff fdb5 	bl	37b8 <GLCD_Clear>

	y_ref=219;
	Show_BarGraph();                      // Show Bar Graph layout
    3c4e:	f7ff fabd 	bl	31cc <Show_BarGraph>
	int16_t prev=0,diff,y_ref;
	System_Init();                        // Initialize System

	GLCD_Clear(White);

	y_ref=219;
    3c52:	24db      	movs	r4, #219	; 0xdb
   file, and that startup code will setup stacks and data */
int main(void)
{
	uint32_t adc_value;
	uint16_t PercentBy2;
	int16_t prev=0,diff,y_ref;
    3c54:	2500      	movs	r5, #0
	y_ref=219;
	Show_BarGraph();                      // Show Bar Graph layout
    while(1)
    {
		// Start conversion
		ADC_StartCmd(LPC_ADC, ADC_START_NOW);  // start ADC conversion
    3c56:	481e      	ldr	r0, [pc, #120]	; (3cd0 <main+0x90>)
    3c58:	2101      	movs	r1, #1
    3c5a:	f7fc fa61 	bl	120 <ADC_StartCmd>

		//Wait conversion complete
		while (!(ADC_ChannelGetStatus(LPC_ADC, ADC_CHANNEL_4, ADC_DATA_DONE)));
    3c5e:	481c      	ldr	r0, [pc, #112]	; (3cd0 <main+0x90>)
    3c60:	2104      	movs	r1, #4
    3c62:	2201      	movs	r2, #1
    3c64:	f7fc fb47 	bl	2f6 <ADC_ChannelGetStatus>
    3c68:	2800      	cmp	r0, #0
    3c6a:	d0f8      	beq.n	3c5e <main+0x1e>
		adc_value = ADC_ChannelGetData(LPC_ADC, ADC_CHANNEL_4); // store converted value
    3c6c:	2104      	movs	r1, #4
    3c6e:	4818      	ldr	r0, [pc, #96]	; (3cd0 <main+0x90>)
    3c70:	f7fc fb3b 	bl	2ea <ADC_ChannelGetData>
		PercentBy2 = (uint16_t)(adc_value/20.475);              // scale value with respect to Bar height
    3c74:	f000 fa66 	bl	4144 <__aeabi_ui2d>
    3c78:	a313      	add	r3, pc, #76	; (adr r3, 3cc8 <main+0x88>)
    3c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c7e:	f000 fc01 	bl	4484 <__aeabi_ddiv>
    3c82:	f000 fce7 	bl	4654 <__aeabi_d2uiz>
    3c86:	4606      	mov	r6, r0
		//Display the result of conversion on the UART0
	//	printf(LPC_UART0,"\x1b[1;1H ADC value on channel 4: %d04", adc_value);

		diff = prev - PercentBy2;       // find difference
    3c88:	1bad      	subs	r5, r5, r6
    3c8a:	b2ad      	uxth	r5, r5
    3c8c:	b2aa      	uxth	r2, r5
		if(diff < 0)   // negative diff shows bar value incresed over past value
    3c8e:	b213      	sxth	r3, r2
    3c90:	2b00      	cmp	r3, #0
    3c92:	da0a      	bge.n	3caa <main+0x6a>
		{
			diff = -diff;   // change sign
			GLCD_LBar(1,24,y_ref,diff,0,Green); // Plot lines
    3c94:	2100      	movs	r1, #0
    3c96:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
	//	printf(LPC_UART0,"\x1b[1;1H ADC value on channel 4: %d04", adc_value);

		diff = prev - PercentBy2;       // find difference
		if(diff < 0)   // negative diff shows bar value incresed over past value
		{
			diff = -diff;   // change sign
    3c9a:	426b      	negs	r3, r5
			GLCD_LBar(1,24,y_ref,diff,0,Green); // Plot lines
    3c9c:	e88d 0006 	stmia.w	sp, {r1, r2}
    3ca0:	2001      	movs	r0, #1
    3ca2:	2118      	movs	r1, #24
    3ca4:	b222      	sxth	r2, r4
    3ca6:	b21b      	sxth	r3, r3
    3ca8:	e007      	b.n	3cba <main+0x7a>
			y_ref=y_ref-diff;                   // new y_ref
		}
		else if(diff>0) // positive diff shows bar value decresed over past value
    3caa:	b152      	cbz	r2, 3cc2 <main+0x82>
		{
			GLCD_LBar(1,24,y_ref,diff,1,White); // set decrement bar flag and plot lines
    3cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3cb0:	2001      	movs	r0, #1
    3cb2:	e88d 0005 	stmia.w	sp, {r0, r2}
    3cb6:	2118      	movs	r1, #24
    3cb8:	b222      	sxth	r2, r4
    3cba:	f7fe ffca 	bl	2c52 <GLCD_LBar>
			y_ref=y_ref+diff;                   // new y_ref
    3cbe:	192c      	adds	r4, r5, r4
    3cc0:	b2a4      	uxth	r4, r4
		}

		prev = PercentBy2;   // store value as previous value
    3cc2:	b2b5      	uxth	r5, r6
    }
    3cc4:	e7c7      	b.n	3c56 <main+0x16>
    3cc6:	bf00      	nop
    3cc8:	9999999a 	.word	0x9999999a
    3ccc:	40347999 	.word	0x40347999
    3cd0:	40034000 	.word	0x40034000
    3cd4:	f3af 8000 	nop.w

00003cd8 <SystemCoreClockUpdate>:
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    3cd8:	4b22      	ldr	r3, [pc, #136]	; (3d64 <SystemCoreClockUpdate+0x8c>)

/*----------------------------------------------------------------------------
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
    3cda:	b510      	push	{r4, lr}
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    3cdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3ce0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    3ce4:	f3c2 6001 	ubfx	r0, r2, #24, #2
    3ce8:	2803      	cmp	r0, #3
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3cea:	f001 0103 	and.w	r1, r1, #3
    3cee:	4a1e      	ldr	r2, [pc, #120]	; (3d68 <SystemCoreClockUpdate+0x90>)
  Clock functions
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    3cf0:	d125      	bne.n	3d3e <SystemCoreClockUpdate+0x66>
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3cf2:	2901      	cmp	r1, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3cf4:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3cf8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3cfc:	d00b      	beq.n	3d16 <SystemCoreClockUpdate+0x3e>
    3cfe:	2902      	cmp	r1, #2
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3d00:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3d04:	ea4f 4344 	mov.w	r3, r4, lsl #17
    3d08:	ea4f 4353 	mov.w	r3, r3, lsr #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    3d0c:	f103 0301 	add.w	r3, r3, #1
 *----------------------------------------------------------------------------*/
void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
{
  /* Determine clock frequency according to clock register values             */
  if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3d10:	d008      	beq.n	3d24 <SystemCoreClockUpdate+0x4c>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = (IRC_OSC *
    3d12:	4c16      	ldr	r4, [pc, #88]	; (3d6c <SystemCoreClockUpdate+0x94>)
    3d14:	e008      	b.n	3d28 <SystemCoreClockUpdate+0x50>
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3d16:	0464      	lsls	r4, r4, #17
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3d18:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3d1c:	0c63      	lsrs	r3, r4, #17
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = (OSC_CLK *
    3d1e:	3301      	adds	r3, #1
    3d20:	4c13      	ldr	r4, [pc, #76]	; (3d70 <SystemCoreClockUpdate+0x98>)
    3d22:	e001      	b.n	3d28 <SystemCoreClockUpdate+0x50>
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
    3d24:	f44f 447a 	mov.w	r4, #64000	; 0xfa00
    3d28:	4363      	muls	r3, r4
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3d2a:	f3c0 4007 	ubfx	r0, r0, #16, #8
    3d2e:	3001      	adds	r0, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3d30:	b2c9      	uxtb	r1, r1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
    3d32:	fbb3 f3f0 	udiv	r3, r3, r0
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
    3d36:	1c48      	adds	r0, r1, #1
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = (RTC_CLK *
                          ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
    3d38:	fbb3 f0f0 	udiv	r0, r3, r0
    3d3c:	e00f      	b.n	3d5e <SystemCoreClockUpdate+0x86>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3d3e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    3d42:	b2d8      	uxtb	r0, r3
    3d44:	1c43      	adds	r3, r0, #1
                          (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
                          ((LPC_SC->CCLKCFG & 0xFF)+ 1));
        break;
    }
  } else {
    switch (LPC_SC->CLKSRCSEL & 0x03) {
    3d46:	2901      	cmp	r1, #1
    3d48:	d003      	beq.n	3d52 <SystemCoreClockUpdate+0x7a>
    3d4a:	2902      	cmp	r1, #2
    3d4c:	d003      	beq.n	3d56 <SystemCoreClockUpdate+0x7e>
      case 0:                                /* Int. RC oscillator => PLL0    */
      case 3:                                /* Reserved, default to Int. RC  */
        SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3d4e:	4909      	ldr	r1, [pc, #36]	; (3d74 <SystemCoreClockUpdate+0x9c>)
    3d50:	e003      	b.n	3d5a <SystemCoreClockUpdate+0x82>
        break;
      case 1:                                /* Main oscillator => PLL0       */
        SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3d52:	4909      	ldr	r1, [pc, #36]	; (3d78 <SystemCoreClockUpdate+0xa0>)
    3d54:	e001      	b.n	3d5a <SystemCoreClockUpdate+0x82>
        break;
      case 2:                                /* RTC oscillator => PLL0        */
        SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
    3d56:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
    3d5a:	fbb1 f0f3 	udiv	r0, r1, r3
    3d5e:	6010      	str	r0, [r2, #0]
    3d60:	bd10      	pop	{r4, pc}
    3d62:	bf00      	nop
    3d64:	400fc000 	.word	0x400fc000
    3d68:	2007c008 	.word	0x2007c008
    3d6c:	007a1200 	.word	0x007a1200
    3d70:	016e3600 	.word	0x016e3600
    3d74:	003d0900 	.word	0x003d0900
    3d78:	00b71b00 	.word	0x00b71b00

00003d7c <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val;
    3d7c:	4b33      	ldr	r3, [pc, #204]	; (3e4c <SystemInit+0xd0>)
    3d7e:	2220      	movs	r2, #32
    3d80:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    3d84:	4619      	mov	r1, r3
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    3d86:	f8d1 01a0 	ldr.w	r0, [r1, #416]	; 0x1a0
    3d8a:	4b30      	ldr	r3, [pc, #192]	; (3e4c <SystemInit+0xd0>)
    3d8c:	0640      	lsls	r0, r0, #25
    3d8e:	d5fa      	bpl.n	3d86 <SystemInit+0xa>
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3d90:	492f      	ldr	r1, [pc, #188]	; (3e50 <SystemInit+0xd4>)
  LPC_SC->SCS       = SCS_Val;
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    3d92:	2202      	movs	r2, #2

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3d94:	2001      	movs	r0, #1
  LPC_SC->SCS       = SCS_Val;
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
    3d96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
    3d9a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
    3d9e:	2255      	movs	r2, #85	; 0x55
  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */

#if (PLL0_SETUP)
  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */

  LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
    3da0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
    3da4:	21aa      	movs	r1, #170	; 0xaa
    3da6:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    3dae:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3db2:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3db6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    3dba:	4824      	ldr	r0, [pc, #144]	; (3e4c <SystemInit+0xd0>)
    3dbc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    3dc0:	0159      	lsls	r1, r3, #5
    3dc2:	d5fa      	bpl.n	3dba <SystemInit+0x3e>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    3dc4:	2103      	movs	r1, #3
  LPC_SC->PLL0FEED  = 0xAA;
    3dc6:	22aa      	movs	r2, #170	; 0xaa
  LPC_SC->PLL0FEED  = 0x55;
    3dc8:	2355      	movs	r3, #85	; 0x55
  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
  LPC_SC->PLL0FEED  = 0xAA;
  LPC_SC->PLL0FEED  = 0x55;
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    3dca:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    3dce:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    3dd2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    3dd6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
    3dda:	4b1c      	ldr	r3, [pc, #112]	; (3e4c <SystemInit+0xd0>)
    3ddc:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
    3de0:	d0f9      	beq.n	3dd6 <SystemInit+0x5a>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
    3de2:	2013      	movs	r0, #19
    3de4:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  LPC_SC->PLL1FEED  = 0xAA;
    3de8:	21aa      	movs	r1, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    3dea:	2255      	movs	r2, #85	; 0x55

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3dec:	2001      	movs	r0, #1
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val;
  LPC_SC->PLL1FEED  = 0xAA;
    3dee:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3df2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    3df6:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3dfa:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3dfe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    3e02:	4a12      	ldr	r2, [pc, #72]	; (3e4c <SystemInit+0xd0>)
    3e04:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    3e08:	055b      	lsls	r3, r3, #21
    3e0a:	d5fa      	bpl.n	3e02 <SystemInit+0x86>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    3e0c:	2103      	movs	r1, #3
  LPC_SC->PLL1FEED  = 0xAA;
    3e0e:	20aa      	movs	r0, #170	; 0xaa
  LPC_SC->PLL1FEED  = 0x55;
    3e10:	2355      	movs	r3, #85	; 0x55
  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
  LPC_SC->PLL1FEED  = 0xAA;
  LPC_SC->PLL1FEED  = 0x55;
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    3e12:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    3e16:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    3e1a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    3e1e:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
    3e22:	480a      	ldr	r0, [pc, #40]	; (3e4c <SystemInit+0xd0>)
    3e24:	f411 7f40 	tst.w	r1, #768	; 0x300
    3e28:	d0f9      	beq.n	3e1e <SystemInit+0xa2>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    3e2a:	2200      	movs	r2, #0
    3e2c:	f8c0 21a8 	str.w	r2, [r0, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    3e34:	f8c0 21ac 	str.w	r2, [r0, #428]	; 0x1ac

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    3e38:	2120      	movs	r1, #32
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    3e3a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;

  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    3e3e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4

  LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
    3e42:	f8c0 11c8 	str.w	r1, [r0, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    3e46:	6002      	str	r2, [r0, #0]
    3e48:	4770      	bx	lr
    3e4a:	bf00      	nop
    3e4c:	400fc000 	.word	0x400fc000
    3e50:	00010018 	.word	0x00010018

00003e54 <ADC_IRQHandler>:
 * @param  None    
 * @retval : None      
*/

void Default_Handler(void)
{
    3e54:	e7fe      	b.n	3e54 <ADC_IRQHandler>

00003e56 <Reset_Handler>:
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
{
    3e56:	4668      	mov	r0, sp
    3e58:	f020 0107 	bic.w	r1, r0, #7
    3e5c:	468d      	mov	sp, r1
    3e5e:	b501      	push	{r0, lr}
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    3e60:	2300      	movs	r3, #0
 *          supplied main() routine is called.
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
    3e62:	4a0f      	ldr	r2, [pc, #60]	; (3ea0 <Reset_Handler+0x4a>)
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    3e64:	490f      	ldr	r1, [pc, #60]	; (3ea4 <Reset_Handler+0x4e>)
 *          supplied main() routine is called.
 * @param  None
 * @retval : None
*/

void Reset_Handler(void)
    3e66:	1898      	adds	r0, r3, r2
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    3e68:	4288      	cmp	r0, r1
    3e6a:	d204      	bcs.n	3e76 <Reset_Handler+0x20>
  {
    *(pulDest++) = *(pulSrc++);
    3e6c:	490e      	ldr	r1, [pc, #56]	; (3ea8 <Reset_Handler+0x52>)
    3e6e:	5858      	ldr	r0, [r3, r1]
    3e70:	5098      	str	r0, [r3, r2]
    3e72:	3304      	adds	r3, #4
    3e74:	e7f5      	b.n	3e62 <Reset_Handler+0xc>
  unsigned long *pulSrc, *pulDest;

  /* Copy the data segment initializers from flash to SRAM */
  pulSrc = &_sidata;

  for(pulDest = &_sdata; pulDest < &_edata; )
    3e76:	480d      	ldr	r0, [pc, #52]	; (3eac <Reset_Handler+0x56>)
  {
    *(pulDest++) = *(pulSrc++);
  }

  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
    3e78:	4a0d      	ldr	r2, [pc, #52]	; (3eb0 <Reset_Handler+0x5a>)
    3e7a:	4290      	cmp	r0, r2
    3e7c:	d203      	bcs.n	3e86 <Reset_Handler+0x30>
  {
    *(pulDest++) = 0;
    3e7e:	2200      	movs	r2, #0
    3e80:	f840 2b04 	str.w	r2, [r0], #4
    3e84:	e7f8      	b.n	3e78 <Reset_Handler+0x22>
  {
    *(pulDest++) = *(pulSrc++);
  }

  /* Zero fill the bss segment. */
  for(pulDest = &_sbss; pulDest < &_ebss; )
    3e86:	4b0b      	ldr	r3, [pc, #44]	; (3eb4 <Reset_Handler+0x5e>)
  {
    *(pulDest++) = 0;
  }

  /* Zero fill the bss_ahb segment. */
  for(pulDest = &_sbss_ahb; pulDest < &_ebss_ahb; )
    3e88:	480b      	ldr	r0, [pc, #44]	; (3eb8 <Reset_Handler+0x62>)
    3e8a:	4283      	cmp	r3, r0
    3e8c:	d203      	bcs.n	3e96 <Reset_Handler+0x40>
  {
    *(pulDest++) = 0;
    3e8e:	2100      	movs	r1, #0
    3e90:	f843 1b04 	str.w	r1, [r3], #4
    3e94:	e7f8      	b.n	3e88 <Reset_Handler+0x32>
  }

  /* Call the application's entry point.*/
  SystemInit();
    3e96:	f7ff ff71 	bl	3d7c <SystemInit>
  main();
    3e9a:	f7ff fed1 	bl	3c40 <main>
    3e9e:	e7fe      	b.n	3e9e <Reset_Handler+0x48>
    3ea0:	2007c000 	.word	0x2007c000
    3ea4:	2007c010 	.word	0x2007c010
    3ea8:	000772a8 	.word	0x000772a8
    3eac:	10000000 	.word	0x10000000
    3eb0:	10000368 	.word	0x10000368
    3eb4:	2007c010 	.word	0x2007c010
    3eb8:	2007c010 	.word	0x2007c010

00003ebc <_init>:
  while( 1 );
}

// dummy for newer gcc versions
void _init()
{
    3ebc:	4770      	bx	lr
    3ebe:	bf00      	nop

00003ec0 <__aeabi_drsub>:
    3ec0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    3ec4:	e002      	b.n	3ecc <__adddf3>
    3ec6:	bf00      	nop

00003ec8 <__aeabi_dsub>:
    3ec8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003ecc <__adddf3>:
    3ecc:	b530      	push	{r4, r5, lr}
    3ece:	ea4f 0441 	mov.w	r4, r1, lsl #1
    3ed2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    3ed6:	ea94 0f05 	teq	r4, r5
    3eda:	bf08      	it	eq
    3edc:	ea90 0f02 	teqeq	r0, r2
    3ee0:	bf1f      	itttt	ne
    3ee2:	ea54 0c00 	orrsne.w	ip, r4, r0
    3ee6:	ea55 0c02 	orrsne.w	ip, r5, r2
    3eea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    3eee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3ef2:	f000 80e2 	beq.w	40ba <__adddf3+0x1ee>
    3ef6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    3efa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    3efe:	bfb8      	it	lt
    3f00:	426d      	neglt	r5, r5
    3f02:	dd0c      	ble.n	3f1e <__adddf3+0x52>
    3f04:	442c      	add	r4, r5
    3f06:	ea80 0202 	eor.w	r2, r0, r2
    3f0a:	ea81 0303 	eor.w	r3, r1, r3
    3f0e:	ea82 0000 	eor.w	r0, r2, r0
    3f12:	ea83 0101 	eor.w	r1, r3, r1
    3f16:	ea80 0202 	eor.w	r2, r0, r2
    3f1a:	ea81 0303 	eor.w	r3, r1, r3
    3f1e:	2d36      	cmp	r5, #54	; 0x36
    3f20:	bf88      	it	hi
    3f22:	bd30      	pophi	{r4, r5, pc}
    3f24:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    3f28:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3f2c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    3f30:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    3f34:	d002      	beq.n	3f3c <__adddf3+0x70>
    3f36:	4240      	negs	r0, r0
    3f38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3f3c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    3f40:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3f44:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    3f48:	d002      	beq.n	3f50 <__adddf3+0x84>
    3f4a:	4252      	negs	r2, r2
    3f4c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3f50:	ea94 0f05 	teq	r4, r5
    3f54:	f000 80a7 	beq.w	40a6 <__adddf3+0x1da>
    3f58:	f1a4 0401 	sub.w	r4, r4, #1
    3f5c:	f1d5 0e20 	rsbs	lr, r5, #32
    3f60:	db0d      	blt.n	3f7e <__adddf3+0xb2>
    3f62:	fa02 fc0e 	lsl.w	ip, r2, lr
    3f66:	fa22 f205 	lsr.w	r2, r2, r5
    3f6a:	1880      	adds	r0, r0, r2
    3f6c:	f141 0100 	adc.w	r1, r1, #0
    3f70:	fa03 f20e 	lsl.w	r2, r3, lr
    3f74:	1880      	adds	r0, r0, r2
    3f76:	fa43 f305 	asr.w	r3, r3, r5
    3f7a:	4159      	adcs	r1, r3
    3f7c:	e00e      	b.n	3f9c <__adddf3+0xd0>
    3f7e:	f1a5 0520 	sub.w	r5, r5, #32
    3f82:	f10e 0e20 	add.w	lr, lr, #32
    3f86:	2a01      	cmp	r2, #1
    3f88:	fa03 fc0e 	lsl.w	ip, r3, lr
    3f8c:	bf28      	it	cs
    3f8e:	f04c 0c02 	orrcs.w	ip, ip, #2
    3f92:	fa43 f305 	asr.w	r3, r3, r5
    3f96:	18c0      	adds	r0, r0, r3
    3f98:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    3f9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3fa0:	d507      	bpl.n	3fb2 <__adddf3+0xe6>
    3fa2:	f04f 0e00 	mov.w	lr, #0
    3fa6:	f1dc 0c00 	rsbs	ip, ip, #0
    3faa:	eb7e 0000 	sbcs.w	r0, lr, r0
    3fae:	eb6e 0101 	sbc.w	r1, lr, r1
    3fb2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    3fb6:	d31b      	bcc.n	3ff0 <__adddf3+0x124>
    3fb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    3fbc:	d30c      	bcc.n	3fd8 <__adddf3+0x10c>
    3fbe:	0849      	lsrs	r1, r1, #1
    3fc0:	ea5f 0030 	movs.w	r0, r0, rrx
    3fc4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    3fc8:	f104 0401 	add.w	r4, r4, #1
    3fcc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    3fd0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    3fd4:	f080 809a 	bcs.w	410c <__adddf3+0x240>
    3fd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3fdc:	bf08      	it	eq
    3fde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3fe2:	f150 0000 	adcs.w	r0, r0, #0
    3fe6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3fea:	ea41 0105 	orr.w	r1, r1, r5
    3fee:	bd30      	pop	{r4, r5, pc}
    3ff0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    3ff4:	4140      	adcs	r0, r0
    3ff6:	eb41 0101 	adc.w	r1, r1, r1
    3ffa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3ffe:	f1a4 0401 	sub.w	r4, r4, #1
    4002:	d1e9      	bne.n	3fd8 <__adddf3+0x10c>
    4004:	f091 0f00 	teq	r1, #0
    4008:	bf04      	itt	eq
    400a:	4601      	moveq	r1, r0
    400c:	2000      	moveq	r0, #0
    400e:	fab1 f381 	clz	r3, r1
    4012:	bf08      	it	eq
    4014:	3320      	addeq	r3, #32
    4016:	f1a3 030b 	sub.w	r3, r3, #11
    401a:	f1b3 0220 	subs.w	r2, r3, #32
    401e:	da0c      	bge.n	403a <__adddf3+0x16e>
    4020:	320c      	adds	r2, #12
    4022:	dd08      	ble.n	4036 <__adddf3+0x16a>
    4024:	f102 0c14 	add.w	ip, r2, #20
    4028:	f1c2 020c 	rsb	r2, r2, #12
    402c:	fa01 f00c 	lsl.w	r0, r1, ip
    4030:	fa21 f102 	lsr.w	r1, r1, r2
    4034:	e00c      	b.n	4050 <__adddf3+0x184>
    4036:	f102 0214 	add.w	r2, r2, #20
    403a:	bfd8      	it	le
    403c:	f1c2 0c20 	rsble	ip, r2, #32
    4040:	fa01 f102 	lsl.w	r1, r1, r2
    4044:	fa20 fc0c 	lsr.w	ip, r0, ip
    4048:	bfdc      	itt	le
    404a:	ea41 010c 	orrle.w	r1, r1, ip
    404e:	4090      	lslle	r0, r2
    4050:	1ae4      	subs	r4, r4, r3
    4052:	bfa2      	ittt	ge
    4054:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    4058:	4329      	orrge	r1, r5
    405a:	bd30      	popge	{r4, r5, pc}
    405c:	ea6f 0404 	mvn.w	r4, r4
    4060:	3c1f      	subs	r4, #31
    4062:	da1c      	bge.n	409e <__adddf3+0x1d2>
    4064:	340c      	adds	r4, #12
    4066:	dc0e      	bgt.n	4086 <__adddf3+0x1ba>
    4068:	f104 0414 	add.w	r4, r4, #20
    406c:	f1c4 0220 	rsb	r2, r4, #32
    4070:	fa20 f004 	lsr.w	r0, r0, r4
    4074:	fa01 f302 	lsl.w	r3, r1, r2
    4078:	ea40 0003 	orr.w	r0, r0, r3
    407c:	fa21 f304 	lsr.w	r3, r1, r4
    4080:	ea45 0103 	orr.w	r1, r5, r3
    4084:	bd30      	pop	{r4, r5, pc}
    4086:	f1c4 040c 	rsb	r4, r4, #12
    408a:	f1c4 0220 	rsb	r2, r4, #32
    408e:	fa20 f002 	lsr.w	r0, r0, r2
    4092:	fa01 f304 	lsl.w	r3, r1, r4
    4096:	ea40 0003 	orr.w	r0, r0, r3
    409a:	4629      	mov	r1, r5
    409c:	bd30      	pop	{r4, r5, pc}
    409e:	fa21 f004 	lsr.w	r0, r1, r4
    40a2:	4629      	mov	r1, r5
    40a4:	bd30      	pop	{r4, r5, pc}
    40a6:	f094 0f00 	teq	r4, #0
    40aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    40ae:	bf06      	itte	eq
    40b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    40b4:	3401      	addeq	r4, #1
    40b6:	3d01      	subne	r5, #1
    40b8:	e74e      	b.n	3f58 <__adddf3+0x8c>
    40ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    40be:	bf18      	it	ne
    40c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    40c4:	d029      	beq.n	411a <__adddf3+0x24e>
    40c6:	ea94 0f05 	teq	r4, r5
    40ca:	bf08      	it	eq
    40cc:	ea90 0f02 	teqeq	r0, r2
    40d0:	d005      	beq.n	40de <__adddf3+0x212>
    40d2:	ea54 0c00 	orrs.w	ip, r4, r0
    40d6:	bf04      	itt	eq
    40d8:	4619      	moveq	r1, r3
    40da:	4610      	moveq	r0, r2
    40dc:	bd30      	pop	{r4, r5, pc}
    40de:	ea91 0f03 	teq	r1, r3
    40e2:	bf1e      	ittt	ne
    40e4:	2100      	movne	r1, #0
    40e6:	2000      	movne	r0, #0
    40e8:	bd30      	popne	{r4, r5, pc}
    40ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    40ee:	d105      	bne.n	40fc <__adddf3+0x230>
    40f0:	0040      	lsls	r0, r0, #1
    40f2:	4149      	adcs	r1, r1
    40f4:	bf28      	it	cs
    40f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    40fa:	bd30      	pop	{r4, r5, pc}
    40fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    4100:	bf3c      	itt	cc
    4102:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    4106:	bd30      	popcc	{r4, r5, pc}
    4108:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    410c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    4110:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4114:	f04f 0000 	mov.w	r0, #0
    4118:	bd30      	pop	{r4, r5, pc}
    411a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    411e:	bf1a      	itte	ne
    4120:	4619      	movne	r1, r3
    4122:	4610      	movne	r0, r2
    4124:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    4128:	bf1c      	itt	ne
    412a:	460b      	movne	r3, r1
    412c:	4602      	movne	r2, r0
    412e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4132:	bf06      	itte	eq
    4134:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    4138:	ea91 0f03 	teqeq	r1, r3
    413c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    4140:	bd30      	pop	{r4, r5, pc}
    4142:	bf00      	nop

00004144 <__aeabi_ui2d>:
    4144:	f090 0f00 	teq	r0, #0
    4148:	bf04      	itt	eq
    414a:	2100      	moveq	r1, #0
    414c:	4770      	bxeq	lr
    414e:	b530      	push	{r4, r5, lr}
    4150:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4154:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4158:	f04f 0500 	mov.w	r5, #0
    415c:	f04f 0100 	mov.w	r1, #0
    4160:	e750      	b.n	4004 <__adddf3+0x138>
    4162:	bf00      	nop

00004164 <__aeabi_i2d>:
    4164:	f090 0f00 	teq	r0, #0
    4168:	bf04      	itt	eq
    416a:	2100      	moveq	r1, #0
    416c:	4770      	bxeq	lr
    416e:	b530      	push	{r4, r5, lr}
    4170:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4174:	f104 0432 	add.w	r4, r4, #50	; 0x32
    4178:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    417c:	bf48      	it	mi
    417e:	4240      	negmi	r0, r0
    4180:	f04f 0100 	mov.w	r1, #0
    4184:	e73e      	b.n	4004 <__adddf3+0x138>
    4186:	bf00      	nop

00004188 <__aeabi_f2d>:
    4188:	0042      	lsls	r2, r0, #1
    418a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    418e:	ea4f 0131 	mov.w	r1, r1, rrx
    4192:	ea4f 7002 	mov.w	r0, r2, lsl #28
    4196:	bf1f      	itttt	ne
    4198:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    419c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    41a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    41a4:	4770      	bxne	lr
    41a6:	f092 0f00 	teq	r2, #0
    41aa:	bf14      	ite	ne
    41ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    41b0:	4770      	bxeq	lr
    41b2:	b530      	push	{r4, r5, lr}
    41b4:	f44f 7460 	mov.w	r4, #896	; 0x380
    41b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    41bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    41c0:	e720      	b.n	4004 <__adddf3+0x138>
    41c2:	bf00      	nop

000041c4 <__aeabi_ul2d>:
    41c4:	ea50 0201 	orrs.w	r2, r0, r1
    41c8:	bf08      	it	eq
    41ca:	4770      	bxeq	lr
    41cc:	b530      	push	{r4, r5, lr}
    41ce:	f04f 0500 	mov.w	r5, #0
    41d2:	e00a      	b.n	41ea <__aeabi_l2d+0x16>

000041d4 <__aeabi_l2d>:
    41d4:	ea50 0201 	orrs.w	r2, r0, r1
    41d8:	bf08      	it	eq
    41da:	4770      	bxeq	lr
    41dc:	b530      	push	{r4, r5, lr}
    41de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    41e2:	d502      	bpl.n	41ea <__aeabi_l2d+0x16>
    41e4:	4240      	negs	r0, r0
    41e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    41ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
    41ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
    41f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    41f6:	f43f aedc 	beq.w	3fb2 <__adddf3+0xe6>
    41fa:	f04f 0203 	mov.w	r2, #3
    41fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    4202:	bf18      	it	ne
    4204:	3203      	addne	r2, #3
    4206:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    420a:	bf18      	it	ne
    420c:	3203      	addne	r2, #3
    420e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    4212:	f1c2 0320 	rsb	r3, r2, #32
    4216:	fa00 fc03 	lsl.w	ip, r0, r3
    421a:	fa20 f002 	lsr.w	r0, r0, r2
    421e:	fa01 fe03 	lsl.w	lr, r1, r3
    4222:	ea40 000e 	orr.w	r0, r0, lr
    4226:	fa21 f102 	lsr.w	r1, r1, r2
    422a:	4414      	add	r4, r2
    422c:	e6c1      	b.n	3fb2 <__adddf3+0xe6>
    422e:	bf00      	nop

00004230 <__aeabi_dmul>:
    4230:	b570      	push	{r4, r5, r6, lr}
    4232:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    423a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    423e:	bf1d      	ittte	ne
    4240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4244:	ea94 0f0c 	teqne	r4, ip
    4248:	ea95 0f0c 	teqne	r5, ip
    424c:	f000 f8de 	bleq	440c <__aeabi_dmul+0x1dc>
    4250:	442c      	add	r4, r5
    4252:	ea81 0603 	eor.w	r6, r1, r3
    4256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    425a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    425e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    4262:	bf18      	it	ne
    4264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    4268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    426c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4270:	d038      	beq.n	42e4 <__aeabi_dmul+0xb4>
    4272:	fba0 ce02 	umull	ip, lr, r0, r2
    4276:	f04f 0500 	mov.w	r5, #0
    427a:	fbe1 e502 	umlal	lr, r5, r1, r2
    427e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    4282:	fbe0 e503 	umlal	lr, r5, r0, r3
    4286:	f04f 0600 	mov.w	r6, #0
    428a:	fbe1 5603 	umlal	r5, r6, r1, r3
    428e:	f09c 0f00 	teq	ip, #0
    4292:	bf18      	it	ne
    4294:	f04e 0e01 	orrne.w	lr, lr, #1
    4298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    429c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    42a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    42a4:	d204      	bcs.n	42b0 <__aeabi_dmul+0x80>
    42a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    42aa:	416d      	adcs	r5, r5
    42ac:	eb46 0606 	adc.w	r6, r6, r6
    42b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    42b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    42b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    42bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    42c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    42c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    42c8:	bf88      	it	hi
    42ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    42ce:	d81e      	bhi.n	430e <__aeabi_dmul+0xde>
    42d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    42d4:	bf08      	it	eq
    42d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    42da:	f150 0000 	adcs.w	r0, r0, #0
    42de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    42e2:	bd70      	pop	{r4, r5, r6, pc}
    42e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    42e8:	ea46 0101 	orr.w	r1, r6, r1
    42ec:	ea40 0002 	orr.w	r0, r0, r2
    42f0:	ea81 0103 	eor.w	r1, r1, r3
    42f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    42f8:	bfc2      	ittt	gt
    42fa:	ebd4 050c 	rsbsgt	r5, r4, ip
    42fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4302:	bd70      	popgt	{r4, r5, r6, pc}
    4304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4308:	f04f 0e00 	mov.w	lr, #0
    430c:	3c01      	subs	r4, #1
    430e:	f300 80ab 	bgt.w	4468 <__aeabi_dmul+0x238>
    4312:	f114 0f36 	cmn.w	r4, #54	; 0x36
    4316:	bfde      	ittt	le
    4318:	2000      	movle	r0, #0
    431a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    431e:	bd70      	pople	{r4, r5, r6, pc}
    4320:	f1c4 0400 	rsb	r4, r4, #0
    4324:	3c20      	subs	r4, #32
    4326:	da35      	bge.n	4394 <__aeabi_dmul+0x164>
    4328:	340c      	adds	r4, #12
    432a:	dc1b      	bgt.n	4364 <__aeabi_dmul+0x134>
    432c:	f104 0414 	add.w	r4, r4, #20
    4330:	f1c4 0520 	rsb	r5, r4, #32
    4334:	fa00 f305 	lsl.w	r3, r0, r5
    4338:	fa20 f004 	lsr.w	r0, r0, r4
    433c:	fa01 f205 	lsl.w	r2, r1, r5
    4340:	ea40 0002 	orr.w	r0, r0, r2
    4344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    4348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    434c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4350:	fa21 f604 	lsr.w	r6, r1, r4
    4354:	eb42 0106 	adc.w	r1, r2, r6
    4358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    435c:	bf08      	it	eq
    435e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4362:	bd70      	pop	{r4, r5, r6, pc}
    4364:	f1c4 040c 	rsb	r4, r4, #12
    4368:	f1c4 0520 	rsb	r5, r4, #32
    436c:	fa00 f304 	lsl.w	r3, r0, r4
    4370:	fa20 f005 	lsr.w	r0, r0, r5
    4374:	fa01 f204 	lsl.w	r2, r1, r4
    4378:	ea40 0002 	orr.w	r0, r0, r2
    437c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    4384:	f141 0100 	adc.w	r1, r1, #0
    4388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    438c:	bf08      	it	eq
    438e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4392:	bd70      	pop	{r4, r5, r6, pc}
    4394:	f1c4 0520 	rsb	r5, r4, #32
    4398:	fa00 f205 	lsl.w	r2, r0, r5
    439c:	ea4e 0e02 	orr.w	lr, lr, r2
    43a0:	fa20 f304 	lsr.w	r3, r0, r4
    43a4:	fa01 f205 	lsl.w	r2, r1, r5
    43a8:	ea43 0302 	orr.w	r3, r3, r2
    43ac:	fa21 f004 	lsr.w	r0, r1, r4
    43b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    43b4:	fa21 f204 	lsr.w	r2, r1, r4
    43b8:	ea20 0002 	bic.w	r0, r0, r2
    43bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    43c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    43c4:	bf08      	it	eq
    43c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    43ca:	bd70      	pop	{r4, r5, r6, pc}
    43cc:	f094 0f00 	teq	r4, #0
    43d0:	d10f      	bne.n	43f2 <__aeabi_dmul+0x1c2>
    43d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    43d6:	0040      	lsls	r0, r0, #1
    43d8:	eb41 0101 	adc.w	r1, r1, r1
    43dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    43e0:	bf08      	it	eq
    43e2:	3c01      	subeq	r4, #1
    43e4:	d0f7      	beq.n	43d6 <__aeabi_dmul+0x1a6>
    43e6:	ea41 0106 	orr.w	r1, r1, r6
    43ea:	f095 0f00 	teq	r5, #0
    43ee:	bf18      	it	ne
    43f0:	4770      	bxne	lr
    43f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    43f6:	0052      	lsls	r2, r2, #1
    43f8:	eb43 0303 	adc.w	r3, r3, r3
    43fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4400:	bf08      	it	eq
    4402:	3d01      	subeq	r5, #1
    4404:	d0f7      	beq.n	43f6 <__aeabi_dmul+0x1c6>
    4406:	ea43 0306 	orr.w	r3, r3, r6
    440a:	4770      	bx	lr
    440c:	ea94 0f0c 	teq	r4, ip
    4410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    4414:	bf18      	it	ne
    4416:	ea95 0f0c 	teqne	r5, ip
    441a:	d00c      	beq.n	4436 <__aeabi_dmul+0x206>
    441c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4420:	bf18      	it	ne
    4422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4426:	d1d1      	bne.n	43cc <__aeabi_dmul+0x19c>
    4428:	ea81 0103 	eor.w	r1, r1, r3
    442c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4430:	f04f 0000 	mov.w	r0, #0
    4434:	bd70      	pop	{r4, r5, r6, pc}
    4436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    443a:	bf06      	itte	eq
    443c:	4610      	moveq	r0, r2
    443e:	4619      	moveq	r1, r3
    4440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    4444:	d019      	beq.n	447a <__aeabi_dmul+0x24a>
    4446:	ea94 0f0c 	teq	r4, ip
    444a:	d102      	bne.n	4452 <__aeabi_dmul+0x222>
    444c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    4450:	d113      	bne.n	447a <__aeabi_dmul+0x24a>
    4452:	ea95 0f0c 	teq	r5, ip
    4456:	d105      	bne.n	4464 <__aeabi_dmul+0x234>
    4458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    445c:	bf1c      	itt	ne
    445e:	4610      	movne	r0, r2
    4460:	4619      	movne	r1, r3
    4462:	d10a      	bne.n	447a <__aeabi_dmul+0x24a>
    4464:	ea81 0103 	eor.w	r1, r1, r3
    4468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    446c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    4470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4474:	f04f 0000 	mov.w	r0, #0
    4478:	bd70      	pop	{r4, r5, r6, pc}
    447a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    447e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    4482:	bd70      	pop	{r4, r5, r6, pc}

00004484 <__aeabi_ddiv>:
    4484:	b570      	push	{r4, r5, r6, lr}
    4486:	f04f 0cff 	mov.w	ip, #255	; 0xff
    448a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    448e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    4492:	bf1d      	ittte	ne
    4494:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4498:	ea94 0f0c 	teqne	r4, ip
    449c:	ea95 0f0c 	teqne	r5, ip
    44a0:	f000 f8a7 	bleq	45f2 <__aeabi_ddiv+0x16e>
    44a4:	eba4 0405 	sub.w	r4, r4, r5
    44a8:	ea81 0e03 	eor.w	lr, r1, r3
    44ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    44b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    44b4:	f000 8088 	beq.w	45c8 <__aeabi_ddiv+0x144>
    44b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    44bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    44c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    44c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    44c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    44cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    44d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    44d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    44d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    44dc:	429d      	cmp	r5, r3
    44de:	bf08      	it	eq
    44e0:	4296      	cmpeq	r6, r2
    44e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    44e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    44ea:	d202      	bcs.n	44f2 <__aeabi_ddiv+0x6e>
    44ec:	085b      	lsrs	r3, r3, #1
    44ee:	ea4f 0232 	mov.w	r2, r2, rrx
    44f2:	1ab6      	subs	r6, r6, r2
    44f4:	eb65 0503 	sbc.w	r5, r5, r3
    44f8:	085b      	lsrs	r3, r3, #1
    44fa:	ea4f 0232 	mov.w	r2, r2, rrx
    44fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    4502:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    4506:	ebb6 0e02 	subs.w	lr, r6, r2
    450a:	eb75 0e03 	sbcs.w	lr, r5, r3
    450e:	bf22      	ittt	cs
    4510:	1ab6      	subcs	r6, r6, r2
    4512:	4675      	movcs	r5, lr
    4514:	ea40 000c 	orrcs.w	r0, r0, ip
    4518:	085b      	lsrs	r3, r3, #1
    451a:	ea4f 0232 	mov.w	r2, r2, rrx
    451e:	ebb6 0e02 	subs.w	lr, r6, r2
    4522:	eb75 0e03 	sbcs.w	lr, r5, r3
    4526:	bf22      	ittt	cs
    4528:	1ab6      	subcs	r6, r6, r2
    452a:	4675      	movcs	r5, lr
    452c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4530:	085b      	lsrs	r3, r3, #1
    4532:	ea4f 0232 	mov.w	r2, r2, rrx
    4536:	ebb6 0e02 	subs.w	lr, r6, r2
    453a:	eb75 0e03 	sbcs.w	lr, r5, r3
    453e:	bf22      	ittt	cs
    4540:	1ab6      	subcs	r6, r6, r2
    4542:	4675      	movcs	r5, lr
    4544:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    4548:	085b      	lsrs	r3, r3, #1
    454a:	ea4f 0232 	mov.w	r2, r2, rrx
    454e:	ebb6 0e02 	subs.w	lr, r6, r2
    4552:	eb75 0e03 	sbcs.w	lr, r5, r3
    4556:	bf22      	ittt	cs
    4558:	1ab6      	subcs	r6, r6, r2
    455a:	4675      	movcs	r5, lr
    455c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    4560:	ea55 0e06 	orrs.w	lr, r5, r6
    4564:	d018      	beq.n	4598 <__aeabi_ddiv+0x114>
    4566:	ea4f 1505 	mov.w	r5, r5, lsl #4
    456a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    456e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    4572:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4576:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    457a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    457e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    4582:	d1c0      	bne.n	4506 <__aeabi_ddiv+0x82>
    4584:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4588:	d10b      	bne.n	45a2 <__aeabi_ddiv+0x11e>
    458a:	ea41 0100 	orr.w	r1, r1, r0
    458e:	f04f 0000 	mov.w	r0, #0
    4592:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    4596:	e7b6      	b.n	4506 <__aeabi_ddiv+0x82>
    4598:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    459c:	bf04      	itt	eq
    459e:	4301      	orreq	r1, r0
    45a0:	2000      	moveq	r0, #0
    45a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    45a6:	bf88      	it	hi
    45a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    45ac:	f63f aeaf 	bhi.w	430e <__aeabi_dmul+0xde>
    45b0:	ebb5 0c03 	subs.w	ip, r5, r3
    45b4:	bf04      	itt	eq
    45b6:	ebb6 0c02 	subseq.w	ip, r6, r2
    45ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    45be:	f150 0000 	adcs.w	r0, r0, #0
    45c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    45c6:	bd70      	pop	{r4, r5, r6, pc}
    45c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    45cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    45d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    45d4:	bfc2      	ittt	gt
    45d6:	ebd4 050c 	rsbsgt	r5, r4, ip
    45da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    45de:	bd70      	popgt	{r4, r5, r6, pc}
    45e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    45e4:	f04f 0e00 	mov.w	lr, #0
    45e8:	3c01      	subs	r4, #1
    45ea:	e690      	b.n	430e <__aeabi_dmul+0xde>
    45ec:	ea45 0e06 	orr.w	lr, r5, r6
    45f0:	e68d      	b.n	430e <__aeabi_dmul+0xde>
    45f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    45f6:	ea94 0f0c 	teq	r4, ip
    45fa:	bf08      	it	eq
    45fc:	ea95 0f0c 	teqeq	r5, ip
    4600:	f43f af3b 	beq.w	447a <__aeabi_dmul+0x24a>
    4604:	ea94 0f0c 	teq	r4, ip
    4608:	d10a      	bne.n	4620 <__aeabi_ddiv+0x19c>
    460a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    460e:	f47f af34 	bne.w	447a <__aeabi_dmul+0x24a>
    4612:	ea95 0f0c 	teq	r5, ip
    4616:	f47f af25 	bne.w	4464 <__aeabi_dmul+0x234>
    461a:	4610      	mov	r0, r2
    461c:	4619      	mov	r1, r3
    461e:	e72c      	b.n	447a <__aeabi_dmul+0x24a>
    4620:	ea95 0f0c 	teq	r5, ip
    4624:	d106      	bne.n	4634 <__aeabi_ddiv+0x1b0>
    4626:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    462a:	f43f aefd 	beq.w	4428 <__aeabi_dmul+0x1f8>
    462e:	4610      	mov	r0, r2
    4630:	4619      	mov	r1, r3
    4632:	e722      	b.n	447a <__aeabi_dmul+0x24a>
    4634:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4638:	bf18      	it	ne
    463a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    463e:	f47f aec5 	bne.w	43cc <__aeabi_dmul+0x19c>
    4642:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    4646:	f47f af0d 	bne.w	4464 <__aeabi_dmul+0x234>
    464a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    464e:	f47f aeeb 	bne.w	4428 <__aeabi_dmul+0x1f8>
    4652:	e712      	b.n	447a <__aeabi_dmul+0x24a>

00004654 <__aeabi_d2uiz>:
    4654:	004a      	lsls	r2, r1, #1
    4656:	d211      	bcs.n	467c <__aeabi_d2uiz+0x28>
    4658:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    465c:	d211      	bcs.n	4682 <__aeabi_d2uiz+0x2e>
    465e:	d50d      	bpl.n	467c <__aeabi_d2uiz+0x28>
    4660:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    4664:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    4668:	d40e      	bmi.n	4688 <__aeabi_d2uiz+0x34>
    466a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    466e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4672:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    4676:	fa23 f002 	lsr.w	r0, r3, r2
    467a:	4770      	bx	lr
    467c:	f04f 0000 	mov.w	r0, #0
    4680:	4770      	bx	lr
    4682:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    4686:	d102      	bne.n	468e <__aeabi_d2uiz+0x3a>
    4688:	f04f 30ff 	mov.w	r0, #4294967295
    468c:	4770      	bx	lr
    468e:	f04f 0000 	mov.w	r0, #0
    4692:	4770      	bx	lr

00004694 <__aeabi_frsub>:
    4694:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    4698:	e002      	b.n	46a0 <__addsf3>
    469a:	bf00      	nop

0000469c <__aeabi_fsub>:
    469c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000046a0 <__addsf3>:
    46a0:	0042      	lsls	r2, r0, #1
    46a2:	bf1f      	itttt	ne
    46a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    46a8:	ea92 0f03 	teqne	r2, r3
    46ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    46b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    46b4:	d06a      	beq.n	478c <__addsf3+0xec>
    46b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    46ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    46be:	bfc1      	itttt	gt
    46c0:	18d2      	addgt	r2, r2, r3
    46c2:	4041      	eorgt	r1, r0
    46c4:	4048      	eorgt	r0, r1
    46c6:	4041      	eorgt	r1, r0
    46c8:	bfb8      	it	lt
    46ca:	425b      	neglt	r3, r3
    46cc:	2b19      	cmp	r3, #25
    46ce:	bf88      	it	hi
    46d0:	4770      	bxhi	lr
    46d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    46d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    46da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    46de:	bf18      	it	ne
    46e0:	4240      	negne	r0, r0
    46e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    46e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    46ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    46ee:	bf18      	it	ne
    46f0:	4249      	negne	r1, r1
    46f2:	ea92 0f03 	teq	r2, r3
    46f6:	d03f      	beq.n	4778 <__addsf3+0xd8>
    46f8:	f1a2 0201 	sub.w	r2, r2, #1
    46fc:	fa41 fc03 	asr.w	ip, r1, r3
    4700:	eb10 000c 	adds.w	r0, r0, ip
    4704:	f1c3 0320 	rsb	r3, r3, #32
    4708:	fa01 f103 	lsl.w	r1, r1, r3
    470c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4710:	d502      	bpl.n	4718 <__addsf3+0x78>
    4712:	4249      	negs	r1, r1
    4714:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4718:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    471c:	d313      	bcc.n	4746 <__addsf3+0xa6>
    471e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4722:	d306      	bcc.n	4732 <__addsf3+0x92>
    4724:	0840      	lsrs	r0, r0, #1
    4726:	ea4f 0131 	mov.w	r1, r1, rrx
    472a:	f102 0201 	add.w	r2, r2, #1
    472e:	2afe      	cmp	r2, #254	; 0xfe
    4730:	d251      	bcs.n	47d6 <__addsf3+0x136>
    4732:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4736:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    473a:	bf08      	it	eq
    473c:	f020 0001 	biceq.w	r0, r0, #1
    4740:	ea40 0003 	orr.w	r0, r0, r3
    4744:	4770      	bx	lr
    4746:	0049      	lsls	r1, r1, #1
    4748:	eb40 0000 	adc.w	r0, r0, r0
    474c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4750:	f1a2 0201 	sub.w	r2, r2, #1
    4754:	d1ed      	bne.n	4732 <__addsf3+0x92>
    4756:	fab0 fc80 	clz	ip, r0
    475a:	f1ac 0c08 	sub.w	ip, ip, #8
    475e:	ebb2 020c 	subs.w	r2, r2, ip
    4762:	fa00 f00c 	lsl.w	r0, r0, ip
    4766:	bfaa      	itet	ge
    4768:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    476c:	4252      	neglt	r2, r2
    476e:	4318      	orrge	r0, r3
    4770:	bfbc      	itt	lt
    4772:	40d0      	lsrlt	r0, r2
    4774:	4318      	orrlt	r0, r3
    4776:	4770      	bx	lr
    4778:	f092 0f00 	teq	r2, #0
    477c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    4780:	bf06      	itte	eq
    4782:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    4786:	3201      	addeq	r2, #1
    4788:	3b01      	subne	r3, #1
    478a:	e7b5      	b.n	46f8 <__addsf3+0x58>
    478c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4790:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4794:	bf18      	it	ne
    4796:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    479a:	d021      	beq.n	47e0 <__addsf3+0x140>
    479c:	ea92 0f03 	teq	r2, r3
    47a0:	d004      	beq.n	47ac <__addsf3+0x10c>
    47a2:	f092 0f00 	teq	r2, #0
    47a6:	bf08      	it	eq
    47a8:	4608      	moveq	r0, r1
    47aa:	4770      	bx	lr
    47ac:	ea90 0f01 	teq	r0, r1
    47b0:	bf1c      	itt	ne
    47b2:	2000      	movne	r0, #0
    47b4:	4770      	bxne	lr
    47b6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    47ba:	d104      	bne.n	47c6 <__addsf3+0x126>
    47bc:	0040      	lsls	r0, r0, #1
    47be:	bf28      	it	cs
    47c0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    47c4:	4770      	bx	lr
    47c6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    47ca:	bf3c      	itt	cc
    47cc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    47d0:	4770      	bxcc	lr
    47d2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    47d6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    47da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    47de:	4770      	bx	lr
    47e0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    47e4:	bf16      	itet	ne
    47e6:	4608      	movne	r0, r1
    47e8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    47ec:	4601      	movne	r1, r0
    47ee:	0242      	lsls	r2, r0, #9
    47f0:	bf06      	itte	eq
    47f2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    47f6:	ea90 0f01 	teqeq	r0, r1
    47fa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    47fe:	4770      	bx	lr

00004800 <__aeabi_ui2f>:
    4800:	f04f 0300 	mov.w	r3, #0
    4804:	e004      	b.n	4810 <__aeabi_i2f+0x8>
    4806:	bf00      	nop

00004808 <__aeabi_i2f>:
    4808:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    480c:	bf48      	it	mi
    480e:	4240      	negmi	r0, r0
    4810:	ea5f 0c00 	movs.w	ip, r0
    4814:	bf08      	it	eq
    4816:	4770      	bxeq	lr
    4818:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    481c:	4601      	mov	r1, r0
    481e:	f04f 0000 	mov.w	r0, #0
    4822:	e01c      	b.n	485e <__aeabi_l2f+0x2a>

00004824 <__aeabi_ul2f>:
    4824:	ea50 0201 	orrs.w	r2, r0, r1
    4828:	bf08      	it	eq
    482a:	4770      	bxeq	lr
    482c:	f04f 0300 	mov.w	r3, #0
    4830:	e00a      	b.n	4848 <__aeabi_l2f+0x14>
    4832:	bf00      	nop

00004834 <__aeabi_l2f>:
    4834:	ea50 0201 	orrs.w	r2, r0, r1
    4838:	bf08      	it	eq
    483a:	4770      	bxeq	lr
    483c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4840:	d502      	bpl.n	4848 <__aeabi_l2f+0x14>
    4842:	4240      	negs	r0, r0
    4844:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4848:	ea5f 0c01 	movs.w	ip, r1
    484c:	bf02      	ittt	eq
    484e:	4684      	moveq	ip, r0
    4850:	4601      	moveq	r1, r0
    4852:	2000      	moveq	r0, #0
    4854:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4858:	bf08      	it	eq
    485a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    485e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4862:	fabc f28c 	clz	r2, ip
    4866:	3a08      	subs	r2, #8
    4868:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    486c:	db10      	blt.n	4890 <__aeabi_l2f+0x5c>
    486e:	fa01 fc02 	lsl.w	ip, r1, r2
    4872:	4463      	add	r3, ip
    4874:	fa00 fc02 	lsl.w	ip, r0, r2
    4878:	f1c2 0220 	rsb	r2, r2, #32
    487c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4880:	fa20 f202 	lsr.w	r2, r0, r2
    4884:	eb43 0002 	adc.w	r0, r3, r2
    4888:	bf08      	it	eq
    488a:	f020 0001 	biceq.w	r0, r0, #1
    488e:	4770      	bx	lr
    4890:	f102 0220 	add.w	r2, r2, #32
    4894:	fa01 fc02 	lsl.w	ip, r1, r2
    4898:	f1c2 0220 	rsb	r2, r2, #32
    489c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    48a0:	fa21 f202 	lsr.w	r2, r1, r2
    48a4:	eb43 0002 	adc.w	r0, r3, r2
    48a8:	bf08      	it	eq
    48aa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    48ae:	4770      	bx	lr

000048b0 <__gesf2>:
    48b0:	f04f 3cff 	mov.w	ip, #4294967295
    48b4:	e006      	b.n	48c4 <__cmpsf2+0x4>
    48b6:	bf00      	nop

000048b8 <__lesf2>:
    48b8:	f04f 0c01 	mov.w	ip, #1
    48bc:	e002      	b.n	48c4 <__cmpsf2+0x4>
    48be:	bf00      	nop

000048c0 <__cmpsf2>:
    48c0:	f04f 0c01 	mov.w	ip, #1
    48c4:	f84d cd04 	str.w	ip, [sp, #-4]!
    48c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
    48cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    48d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    48d4:	bf18      	it	ne
    48d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    48da:	d011      	beq.n	4900 <__cmpsf2+0x40>
    48dc:	b001      	add	sp, #4
    48de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    48e2:	bf18      	it	ne
    48e4:	ea90 0f01 	teqne	r0, r1
    48e8:	bf58      	it	pl
    48ea:	ebb2 0003 	subspl.w	r0, r2, r3
    48ee:	bf88      	it	hi
    48f0:	17c8      	asrhi	r0, r1, #31
    48f2:	bf38      	it	cc
    48f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    48f8:	bf18      	it	ne
    48fa:	f040 0001 	orrne.w	r0, r0, #1
    48fe:	4770      	bx	lr
    4900:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4904:	d102      	bne.n	490c <__cmpsf2+0x4c>
    4906:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    490a:	d105      	bne.n	4918 <__cmpsf2+0x58>
    490c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    4910:	d1e4      	bne.n	48dc <__cmpsf2+0x1c>
    4912:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    4916:	d0e1      	beq.n	48dc <__cmpsf2+0x1c>
    4918:	f85d 0b04 	ldr.w	r0, [sp], #4
    491c:	4770      	bx	lr
    491e:	bf00      	nop

00004920 <__aeabi_cfrcmple>:
    4920:	4684      	mov	ip, r0
    4922:	4608      	mov	r0, r1
    4924:	4661      	mov	r1, ip
    4926:	e7ff      	b.n	4928 <__aeabi_cfcmpeq>

00004928 <__aeabi_cfcmpeq>:
    4928:	b50f      	push	{r0, r1, r2, r3, lr}
    492a:	f7ff ffc9 	bl	48c0 <__cmpsf2>
    492e:	2800      	cmp	r0, #0
    4930:	bf48      	it	mi
    4932:	f110 0f00 	cmnmi.w	r0, #0
    4936:	bd0f      	pop	{r0, r1, r2, r3, pc}

00004938 <__aeabi_fcmpeq>:
    4938:	f84d ed08 	str.w	lr, [sp, #-8]!
    493c:	f7ff fff4 	bl	4928 <__aeabi_cfcmpeq>
    4940:	bf0c      	ite	eq
    4942:	2001      	moveq	r0, #1
    4944:	2000      	movne	r0, #0
    4946:	f85d fb08 	ldr.w	pc, [sp], #8
    494a:	bf00      	nop

0000494c <__aeabi_fcmplt>:
    494c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4950:	f7ff ffea 	bl	4928 <__aeabi_cfcmpeq>
    4954:	bf34      	ite	cc
    4956:	2001      	movcc	r0, #1
    4958:	2000      	movcs	r0, #0
    495a:	f85d fb08 	ldr.w	pc, [sp], #8
    495e:	bf00      	nop

00004960 <__aeabi_fcmple>:
    4960:	f84d ed08 	str.w	lr, [sp, #-8]!
    4964:	f7ff ffe0 	bl	4928 <__aeabi_cfcmpeq>
    4968:	bf94      	ite	ls
    496a:	2001      	movls	r0, #1
    496c:	2000      	movhi	r0, #0
    496e:	f85d fb08 	ldr.w	pc, [sp], #8
    4972:	bf00      	nop

00004974 <__aeabi_fcmpge>:
    4974:	f84d ed08 	str.w	lr, [sp, #-8]!
    4978:	f7ff ffd2 	bl	4920 <__aeabi_cfrcmple>
    497c:	bf94      	ite	ls
    497e:	2001      	movls	r0, #1
    4980:	2000      	movhi	r0, #0
    4982:	f85d fb08 	ldr.w	pc, [sp], #8
    4986:	bf00      	nop

00004988 <__aeabi_fcmpgt>:
    4988:	f84d ed08 	str.w	lr, [sp, #-8]!
    498c:	f7ff ffc8 	bl	4920 <__aeabi_cfrcmple>
    4990:	bf34      	ite	cc
    4992:	2001      	movcc	r0, #1
    4994:	2000      	movcs	r0, #0
    4996:	f85d fb08 	ldr.w	pc, [sp], #8
    499a:	bf00      	nop

0000499c <__aeabi_uldivmod>:
    499c:	b94b      	cbnz	r3, 49b2 <__aeabi_uldivmod+0x16>
    499e:	b942      	cbnz	r2, 49b2 <__aeabi_uldivmod+0x16>
    49a0:	2900      	cmp	r1, #0
    49a2:	bf08      	it	eq
    49a4:	2800      	cmpeq	r0, #0
    49a6:	d002      	beq.n	49ae <__aeabi_uldivmod+0x12>
    49a8:	f04f 31ff 	mov.w	r1, #4294967295
    49ac:	4608      	mov	r0, r1
    49ae:	f000 b83b 	b.w	4a28 <__aeabi_idiv0>
    49b2:	b082      	sub	sp, #8
    49b4:	46ec      	mov	ip, sp
    49b6:	e92d 5000 	stmdb	sp!, {ip, lr}
    49ba:	f000 f81d 	bl	49f8 <__gnu_uldivmod_helper>
    49be:	f8dd e004 	ldr.w	lr, [sp, #4]
    49c2:	b002      	add	sp, #8
    49c4:	bc0c      	pop	{r2, r3}
    49c6:	4770      	bx	lr

000049c8 <__gnu_ldivmod_helper>:
    49c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49cc:	4616      	mov	r6, r2
    49ce:	4698      	mov	r8, r3
    49d0:	4604      	mov	r4, r0
    49d2:	460d      	mov	r5, r1
    49d4:	f000 f82a 	bl	4a2c <__divdi3>
    49d8:	fb06 fc01 	mul.w	ip, r6, r1
    49dc:	fba6 2300 	umull	r2, r3, r6, r0
    49e0:	fb00 c708 	mla	r7, r0, r8, ip
    49e4:	18fb      	adds	r3, r7, r3
    49e6:	1aa2      	subs	r2, r4, r2
    49e8:	eb65 0303 	sbc.w	r3, r5, r3
    49ec:	9c06      	ldr	r4, [sp, #24]
    49ee:	e9c4 2300 	strd	r2, r3, [r4]
    49f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49f6:	bf00      	nop

000049f8 <__gnu_uldivmod_helper>:
    49f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49fc:	4690      	mov	r8, r2
    49fe:	4606      	mov	r6, r0
    4a00:	460f      	mov	r7, r1
    4a02:	461d      	mov	r5, r3
    4a04:	f000 f970 	bl	4ce8 <__udivdi3>
    4a08:	fb00 f305 	mul.w	r3, r0, r5
    4a0c:	fba0 4508 	umull	r4, r5, r0, r8
    4a10:	fb08 3801 	mla	r8, r8, r1, r3
    4a14:	9b06      	ldr	r3, [sp, #24]
    4a16:	4445      	add	r5, r8
    4a18:	1b34      	subs	r4, r6, r4
    4a1a:	eb67 0505 	sbc.w	r5, r7, r5
    4a1e:	e9c3 4500 	strd	r4, r5, [r3]
    4a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a26:	bf00      	nop

00004a28 <__aeabi_idiv0>:
    4a28:	4770      	bx	lr
    4a2a:	bf00      	nop

00004a2c <__divdi3>:
    4a2c:	2900      	cmp	r1, #0
    4a2e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4a32:	461d      	mov	r5, r3
    4a34:	f2c0 809d 	blt.w	4b72 <__divdi3+0x146>
    4a38:	2400      	movs	r4, #0
    4a3a:	2d00      	cmp	r5, #0
    4a3c:	f2c0 8094 	blt.w	4b68 <__divdi3+0x13c>
    4a40:	4680      	mov	r8, r0
    4a42:	460f      	mov	r7, r1
    4a44:	4694      	mov	ip, r2
    4a46:	461e      	mov	r6, r3
    4a48:	bbe3      	cbnz	r3, 4ac4 <__divdi3+0x98>
    4a4a:	428a      	cmp	r2, r1
    4a4c:	d955      	bls.n	4afa <__divdi3+0xce>
    4a4e:	fab2 f782 	clz	r7, r2
    4a52:	b147      	cbz	r7, 4a66 <__divdi3+0x3a>
    4a54:	f1c7 0520 	rsb	r5, r7, #32
    4a58:	fa20 f605 	lsr.w	r6, r0, r5
    4a5c:	fa01 f107 	lsl.w	r1, r1, r7
    4a60:	40ba      	lsls	r2, r7
    4a62:	40b8      	lsls	r0, r7
    4a64:	4331      	orrs	r1, r6
    4a66:	0c17      	lsrs	r7, r2, #16
    4a68:	fbb1 f6f7 	udiv	r6, r1, r7
    4a6c:	fa1f fc82 	uxth.w	ip, r2
    4a70:	fb07 1116 	mls	r1, r7, r6, r1
    4a74:	fb0c f506 	mul.w	r5, ip, r6
    4a78:	0c03      	lsrs	r3, r0, #16
    4a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4a7e:	429d      	cmp	r5, r3
    4a80:	d908      	bls.n	4a94 <__divdi3+0x68>
    4a82:	1e71      	subs	r1, r6, #1
    4a84:	189b      	adds	r3, r3, r2
    4a86:	f080 8113 	bcs.w	4cb0 <__divdi3+0x284>
    4a8a:	429d      	cmp	r5, r3
    4a8c:	f240 8110 	bls.w	4cb0 <__divdi3+0x284>
    4a90:	3e02      	subs	r6, #2
    4a92:	189b      	adds	r3, r3, r2
    4a94:	1b59      	subs	r1, r3, r5
    4a96:	fbb1 f5f7 	udiv	r5, r1, r7
    4a9a:	fb07 1315 	mls	r3, r7, r5, r1
    4a9e:	fb0c fc05 	mul.w	ip, ip, r5
    4aa2:	b280      	uxth	r0, r0
    4aa4:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    4aa8:	458c      	cmp	ip, r1
    4aaa:	d907      	bls.n	4abc <__divdi3+0x90>
    4aac:	1e6b      	subs	r3, r5, #1
    4aae:	188a      	adds	r2, r1, r2
    4ab0:	f080 8100 	bcs.w	4cb4 <__divdi3+0x288>
    4ab4:	4594      	cmp	ip, r2
    4ab6:	f240 80fd 	bls.w	4cb4 <__divdi3+0x288>
    4aba:	3d02      	subs	r5, #2
    4abc:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    4ac0:	2500      	movs	r5, #0
    4ac2:	e003      	b.n	4acc <__divdi3+0xa0>
    4ac4:	428b      	cmp	r3, r1
    4ac6:	d90c      	bls.n	4ae2 <__divdi3+0xb6>
    4ac8:	2500      	movs	r5, #0
    4aca:	4629      	mov	r1, r5
    4acc:	460a      	mov	r2, r1
    4ace:	462b      	mov	r3, r5
    4ad0:	b114      	cbz	r4, 4ad8 <__divdi3+0xac>
    4ad2:	4252      	negs	r2, r2
    4ad4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4ad8:	4610      	mov	r0, r2
    4ada:	4619      	mov	r1, r3
    4adc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4ae0:	4770      	bx	lr
    4ae2:	fab3 f583 	clz	r5, r3
    4ae6:	2d00      	cmp	r5, #0
    4ae8:	f040 8087 	bne.w	4bfa <__divdi3+0x1ce>
    4aec:	428b      	cmp	r3, r1
    4aee:	d301      	bcc.n	4af4 <__divdi3+0xc8>
    4af0:	4282      	cmp	r2, r0
    4af2:	d8ea      	bhi.n	4aca <__divdi3+0x9e>
    4af4:	2500      	movs	r5, #0
    4af6:	2101      	movs	r1, #1
    4af8:	e7e8      	b.n	4acc <__divdi3+0xa0>
    4afa:	b912      	cbnz	r2, 4b02 <__divdi3+0xd6>
    4afc:	2601      	movs	r6, #1
    4afe:	fbb6 f2f2 	udiv	r2, r6, r2
    4b02:	fab2 f682 	clz	r6, r2
    4b06:	2e00      	cmp	r6, #0
    4b08:	d139      	bne.n	4b7e <__divdi3+0x152>
    4b0a:	1a8e      	subs	r6, r1, r2
    4b0c:	0c13      	lsrs	r3, r2, #16
    4b0e:	fa1f fc82 	uxth.w	ip, r2
    4b12:	2501      	movs	r5, #1
    4b14:	fbb6 f7f3 	udiv	r7, r6, r3
    4b18:	fb03 6117 	mls	r1, r3, r7, r6
    4b1c:	fb0c f807 	mul.w	r8, ip, r7
    4b20:	ea4f 4910 	mov.w	r9, r0, lsr #16
    4b24:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    4b28:	45b0      	cmp	r8, r6
    4b2a:	d906      	bls.n	4b3a <__divdi3+0x10e>
    4b2c:	1e79      	subs	r1, r7, #1
    4b2e:	18b6      	adds	r6, r6, r2
    4b30:	d202      	bcs.n	4b38 <__divdi3+0x10c>
    4b32:	45b0      	cmp	r8, r6
    4b34:	f200 80d3 	bhi.w	4cde <__divdi3+0x2b2>
    4b38:	460f      	mov	r7, r1
    4b3a:	ebc8 0606 	rsb	r6, r8, r6
    4b3e:	fbb6 f1f3 	udiv	r1, r6, r3
    4b42:	fb03 6311 	mls	r3, r3, r1, r6
    4b46:	fb0c fc01 	mul.w	ip, ip, r1
    4b4a:	b280      	uxth	r0, r0
    4b4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    4b50:	459c      	cmp	ip, r3
    4b52:	d906      	bls.n	4b62 <__divdi3+0x136>
    4b54:	1e4e      	subs	r6, r1, #1
    4b56:	189a      	adds	r2, r3, r2
    4b58:	d202      	bcs.n	4b60 <__divdi3+0x134>
    4b5a:	4594      	cmp	ip, r2
    4b5c:	f200 80c2 	bhi.w	4ce4 <__divdi3+0x2b8>
    4b60:	4631      	mov	r1, r6
    4b62:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    4b66:	e7b1      	b.n	4acc <__divdi3+0xa0>
    4b68:	43e4      	mvns	r4, r4
    4b6a:	4252      	negs	r2, r2
    4b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4b70:	e766      	b.n	4a40 <__divdi3+0x14>
    4b72:	4240      	negs	r0, r0
    4b74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4b78:	f04f 34ff 	mov.w	r4, #4294967295
    4b7c:	e75d      	b.n	4a3a <__divdi3+0xe>
    4b7e:	40b2      	lsls	r2, r6
    4b80:	f1c6 0920 	rsb	r9, r6, #32
    4b84:	fa21 f709 	lsr.w	r7, r1, r9
    4b88:	fa20 f909 	lsr.w	r9, r0, r9
    4b8c:	fa01 f106 	lsl.w	r1, r1, r6
    4b90:	0c13      	lsrs	r3, r2, #16
    4b92:	fbb7 f8f3 	udiv	r8, r7, r3
    4b96:	fa1f fc82 	uxth.w	ip, r2
    4b9a:	fb03 7718 	mls	r7, r3, r8, r7
    4b9e:	fb0c f508 	mul.w	r5, ip, r8
    4ba2:	ea49 0901 	orr.w	r9, r9, r1
    4ba6:	ea4f 4119 	mov.w	r1, r9, lsr #16
    4baa:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    4bae:	40b0      	lsls	r0, r6
    4bb0:	42bd      	cmp	r5, r7
    4bb2:	d90a      	bls.n	4bca <__divdi3+0x19e>
    4bb4:	18bf      	adds	r7, r7, r2
    4bb6:	f108 36ff 	add.w	r6, r8, #4294967295
    4bba:	f080 808e 	bcs.w	4cda <__divdi3+0x2ae>
    4bbe:	42bd      	cmp	r5, r7
    4bc0:	f240 808b 	bls.w	4cda <__divdi3+0x2ae>
    4bc4:	f1a8 0802 	sub.w	r8, r8, #2
    4bc8:	18bf      	adds	r7, r7, r2
    4bca:	1b79      	subs	r1, r7, r5
    4bcc:	fbb1 f5f3 	udiv	r5, r1, r3
    4bd0:	fb03 1715 	mls	r7, r3, r5, r1
    4bd4:	fb0c f605 	mul.w	r6, ip, r5
    4bd8:	fa1f f989 	uxth.w	r9, r9
    4bdc:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    4be0:	428e      	cmp	r6, r1
    4be2:	d906      	bls.n	4bf2 <__divdi3+0x1c6>
    4be4:	1e6f      	subs	r7, r5, #1
    4be6:	1889      	adds	r1, r1, r2
    4be8:	d271      	bcs.n	4cce <__divdi3+0x2a2>
    4bea:	428e      	cmp	r6, r1
    4bec:	d96f      	bls.n	4cce <__divdi3+0x2a2>
    4bee:	3d02      	subs	r5, #2
    4bf0:	1889      	adds	r1, r1, r2
    4bf2:	1b8e      	subs	r6, r1, r6
    4bf4:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    4bf8:	e78c      	b.n	4b14 <__divdi3+0xe8>
    4bfa:	f1c5 0120 	rsb	r1, r5, #32
    4bfe:	fa22 f301 	lsr.w	r3, r2, r1
    4c02:	fa06 f605 	lsl.w	r6, r6, r5
    4c06:	fa27 f201 	lsr.w	r2, r7, r1
    4c0a:	fa07 f705 	lsl.w	r7, r7, r5
    4c0e:	fa20 f101 	lsr.w	r1, r0, r1
    4c12:	431e      	orrs	r6, r3
    4c14:	ea4f 4916 	mov.w	r9, r6, lsr #16
    4c18:	fbb2 f8f9 	udiv	r8, r2, r9
    4c1c:	fa1f fa86 	uxth.w	sl, r6
    4c20:	fb09 2218 	mls	r2, r9, r8, r2
    4c24:	fb0a fb08 	mul.w	fp, sl, r8
    4c28:	430f      	orrs	r7, r1
    4c2a:	0c3b      	lsrs	r3, r7, #16
    4c2c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    4c30:	4593      	cmp	fp, r2
    4c32:	fa0c fc05 	lsl.w	ip, ip, r5
    4c36:	d908      	bls.n	4c4a <__divdi3+0x21e>
    4c38:	1992      	adds	r2, r2, r6
    4c3a:	f108 31ff 	add.w	r1, r8, #4294967295
    4c3e:	d24a      	bcs.n	4cd6 <__divdi3+0x2aa>
    4c40:	4593      	cmp	fp, r2
    4c42:	d948      	bls.n	4cd6 <__divdi3+0x2aa>
    4c44:	f1a8 0802 	sub.w	r8, r8, #2
    4c48:	1992      	adds	r2, r2, r6
    4c4a:	ebcb 0302 	rsb	r3, fp, r2
    4c4e:	fbb3 f1f9 	udiv	r1, r3, r9
    4c52:	fb09 3211 	mls	r2, r9, r1, r3
    4c56:	fb0a fa01 	mul.w	sl, sl, r1
    4c5a:	b2bf      	uxth	r7, r7
    4c5c:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    4c60:	459a      	cmp	sl, r3
    4c62:	d906      	bls.n	4c72 <__divdi3+0x246>
    4c64:	1e4a      	subs	r2, r1, #1
    4c66:	199b      	adds	r3, r3, r6
    4c68:	d233      	bcs.n	4cd2 <__divdi3+0x2a6>
    4c6a:	459a      	cmp	sl, r3
    4c6c:	d931      	bls.n	4cd2 <__divdi3+0x2a6>
    4c6e:	3902      	subs	r1, #2
    4c70:	199b      	adds	r3, r3, r6
    4c72:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    4c76:	0c0f      	lsrs	r7, r1, #16
    4c78:	fa1f f88c 	uxth.w	r8, ip
    4c7c:	fb08 f607 	mul.w	r6, r8, r7
    4c80:	b28a      	uxth	r2, r1
    4c82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    4c86:	fb08 f802 	mul.w	r8, r8, r2
    4c8a:	fb0c 6202 	mla	r2, ip, r2, r6
    4c8e:	fb0c fc07 	mul.w	ip, ip, r7
    4c92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    4c96:	4296      	cmp	r6, r2
    4c98:	bf88      	it	hi
    4c9a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    4c9e:	ebca 0303 	rsb	r3, sl, r3
    4ca2:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    4ca6:	4563      	cmp	r3, ip
    4ca8:	d30e      	bcc.n	4cc8 <__divdi3+0x29c>
    4caa:	d005      	beq.n	4cb8 <__divdi3+0x28c>
    4cac:	2500      	movs	r5, #0
    4cae:	e70d      	b.n	4acc <__divdi3+0xa0>
    4cb0:	460e      	mov	r6, r1
    4cb2:	e6ef      	b.n	4a94 <__divdi3+0x68>
    4cb4:	461d      	mov	r5, r3
    4cb6:	e701      	b.n	4abc <__divdi3+0x90>
    4cb8:	fa00 f005 	lsl.w	r0, r0, r5
    4cbc:	fa1f f888 	uxth.w	r8, r8
    4cc0:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    4cc4:	42a8      	cmp	r0, r5
    4cc6:	d2f1      	bcs.n	4cac <__divdi3+0x280>
    4cc8:	3901      	subs	r1, #1
    4cca:	2500      	movs	r5, #0
    4ccc:	e6fe      	b.n	4acc <__divdi3+0xa0>
    4cce:	463d      	mov	r5, r7
    4cd0:	e78f      	b.n	4bf2 <__divdi3+0x1c6>
    4cd2:	4611      	mov	r1, r2
    4cd4:	e7cd      	b.n	4c72 <__divdi3+0x246>
    4cd6:	4688      	mov	r8, r1
    4cd8:	e7b7      	b.n	4c4a <__divdi3+0x21e>
    4cda:	46b0      	mov	r8, r6
    4cdc:	e775      	b.n	4bca <__divdi3+0x19e>
    4cde:	3f02      	subs	r7, #2
    4ce0:	18b6      	adds	r6, r6, r2
    4ce2:	e72a      	b.n	4b3a <__divdi3+0x10e>
    4ce4:	3902      	subs	r1, #2
    4ce6:	e73c      	b.n	4b62 <__divdi3+0x136>

00004ce8 <__udivdi3>:
    4ce8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    4cec:	4614      	mov	r4, r2
    4cee:	4605      	mov	r5, r0
    4cf0:	460e      	mov	r6, r1
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d13d      	bne.n	4d72 <__udivdi3+0x8a>
    4cf6:	428a      	cmp	r2, r1
    4cf8:	d949      	bls.n	4d8e <__udivdi3+0xa6>
    4cfa:	fab2 f782 	clz	r7, r2
    4cfe:	b147      	cbz	r7, 4d12 <__udivdi3+0x2a>
    4d00:	f1c7 0120 	rsb	r1, r7, #32
    4d04:	fa20 f201 	lsr.w	r2, r0, r1
    4d08:	fa06 f607 	lsl.w	r6, r6, r7
    4d0c:	40bc      	lsls	r4, r7
    4d0e:	40bd      	lsls	r5, r7
    4d10:	4316      	orrs	r6, r2
    4d12:	0c22      	lsrs	r2, r4, #16
    4d14:	fbb6 f0f2 	udiv	r0, r6, r2
    4d18:	b2a1      	uxth	r1, r4
    4d1a:	fb02 6610 	mls	r6, r2, r0, r6
    4d1e:	fb01 f300 	mul.w	r3, r1, r0
    4d22:	0c2f      	lsrs	r7, r5, #16
    4d24:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    4d28:	42b3      	cmp	r3, r6
    4d2a:	d908      	bls.n	4d3e <__udivdi3+0x56>
    4d2c:	1e47      	subs	r7, r0, #1
    4d2e:	1936      	adds	r6, r6, r4
    4d30:	f080 80fa 	bcs.w	4f28 <__udivdi3+0x240>
    4d34:	42b3      	cmp	r3, r6
    4d36:	f240 80f7 	bls.w	4f28 <__udivdi3+0x240>
    4d3a:	3802      	subs	r0, #2
    4d3c:	1936      	adds	r6, r6, r4
    4d3e:	1af6      	subs	r6, r6, r3
    4d40:	fbb6 f3f2 	udiv	r3, r6, r2
    4d44:	fb02 6213 	mls	r2, r2, r3, r6
    4d48:	fb01 f103 	mul.w	r1, r1, r3
    4d4c:	b2ad      	uxth	r5, r5
    4d4e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    4d52:	4291      	cmp	r1, r2
    4d54:	d907      	bls.n	4d66 <__udivdi3+0x7e>
    4d56:	1e5e      	subs	r6, r3, #1
    4d58:	1912      	adds	r2, r2, r4
    4d5a:	f080 80e7 	bcs.w	4f2c <__udivdi3+0x244>
    4d5e:	4291      	cmp	r1, r2
    4d60:	f240 80e4 	bls.w	4f2c <__udivdi3+0x244>
    4d64:	3b02      	subs	r3, #2
    4d66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    4d6a:	2100      	movs	r1, #0
    4d6c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    4d70:	4770      	bx	lr
    4d72:	428b      	cmp	r3, r1
    4d74:	d843      	bhi.n	4dfe <__udivdi3+0x116>
    4d76:	fab3 f483 	clz	r4, r3
    4d7a:	2c00      	cmp	r4, #0
    4d7c:	d142      	bne.n	4e04 <__udivdi3+0x11c>
    4d7e:	428b      	cmp	r3, r1
    4d80:	d302      	bcc.n	4d88 <__udivdi3+0xa0>
    4d82:	4282      	cmp	r2, r0
    4d84:	f200 80e1 	bhi.w	4f4a <__udivdi3+0x262>
    4d88:	2100      	movs	r1, #0
    4d8a:	2001      	movs	r0, #1
    4d8c:	e7ee      	b.n	4d6c <__udivdi3+0x84>
    4d8e:	b912      	cbnz	r2, 4d96 <__udivdi3+0xae>
    4d90:	2701      	movs	r7, #1
    4d92:	fbb7 f4f2 	udiv	r4, r7, r2
    4d96:	fab4 f284 	clz	r2, r4
    4d9a:	2a00      	cmp	r2, #0
    4d9c:	f040 8089 	bne.w	4eb2 <__udivdi3+0x1ca>
    4da0:	1b0a      	subs	r2, r1, r4
    4da2:	0c23      	lsrs	r3, r4, #16
    4da4:	b2a7      	uxth	r7, r4
    4da6:	2101      	movs	r1, #1
    4da8:	fbb2 f6f3 	udiv	r6, r2, r3
    4dac:	fb03 2216 	mls	r2, r3, r6, r2
    4db0:	fb07 f006 	mul.w	r0, r7, r6
    4db4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    4db8:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    4dbc:	4290      	cmp	r0, r2
    4dbe:	d907      	bls.n	4dd0 <__udivdi3+0xe8>
    4dc0:	1912      	adds	r2, r2, r4
    4dc2:	f106 3cff 	add.w	ip, r6, #4294967295
    4dc6:	d202      	bcs.n	4dce <__udivdi3+0xe6>
    4dc8:	4290      	cmp	r0, r2
    4dca:	f200 80d0 	bhi.w	4f6e <__udivdi3+0x286>
    4dce:	4666      	mov	r6, ip
    4dd0:	1a12      	subs	r2, r2, r0
    4dd2:	fbb2 f0f3 	udiv	r0, r2, r3
    4dd6:	fb03 2310 	mls	r3, r3, r0, r2
    4dda:	fb07 f700 	mul.w	r7, r7, r0
    4dde:	b2ad      	uxth	r5, r5
    4de0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    4de4:	429f      	cmp	r7, r3
    4de6:	d907      	bls.n	4df8 <__udivdi3+0x110>
    4de8:	1e42      	subs	r2, r0, #1
    4dea:	191b      	adds	r3, r3, r4
    4dec:	f080 80a0 	bcs.w	4f30 <__udivdi3+0x248>
    4df0:	429f      	cmp	r7, r3
    4df2:	f240 809d 	bls.w	4f30 <__udivdi3+0x248>
    4df6:	3802      	subs	r0, #2
    4df8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    4dfc:	e7b6      	b.n	4d6c <__udivdi3+0x84>
    4dfe:	2100      	movs	r1, #0
    4e00:	4608      	mov	r0, r1
    4e02:	e7b3      	b.n	4d6c <__udivdi3+0x84>
    4e04:	f1c4 0620 	rsb	r6, r4, #32
    4e08:	fa22 f706 	lsr.w	r7, r2, r6
    4e0c:	fa03 f304 	lsl.w	r3, r3, r4
    4e10:	fa21 f506 	lsr.w	r5, r1, r6
    4e14:	fa01 f104 	lsl.w	r1, r1, r4
    4e18:	fa20 f606 	lsr.w	r6, r0, r6
    4e1c:	433b      	orrs	r3, r7
    4e1e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    4e22:	fbb5 f7fc 	udiv	r7, r5, ip
    4e26:	fa1f f883 	uxth.w	r8, r3
    4e2a:	fb0c 5517 	mls	r5, ip, r7, r5
    4e2e:	fb08 f907 	mul.w	r9, r8, r7
    4e32:	ea46 0a01 	orr.w	sl, r6, r1
    4e36:	ea4f 411a 	mov.w	r1, sl, lsr #16
    4e3a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    4e3e:	45a9      	cmp	r9, r5
    4e40:	fa02 f204 	lsl.w	r2, r2, r4
    4e44:	d904      	bls.n	4e50 <__udivdi3+0x168>
    4e46:	1e7e      	subs	r6, r7, #1
    4e48:	18ed      	adds	r5, r5, r3
    4e4a:	f0c0 8081 	bcc.w	4f50 <__udivdi3+0x268>
    4e4e:	4637      	mov	r7, r6
    4e50:	ebc9 0105 	rsb	r1, r9, r5
    4e54:	fbb1 f6fc 	udiv	r6, r1, ip
    4e58:	fb0c 1516 	mls	r5, ip, r6, r1
    4e5c:	fb08 f806 	mul.w	r8, r8, r6
    4e60:	fa1f fa8a 	uxth.w	sl, sl
    4e64:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    4e68:	4588      	cmp	r8, r1
    4e6a:	d903      	bls.n	4e74 <__udivdi3+0x18c>
    4e6c:	1e75      	subs	r5, r6, #1
    4e6e:	18c9      	adds	r1, r1, r3
    4e70:	d374      	bcc.n	4f5c <__udivdi3+0x274>
    4e72:	462e      	mov	r6, r5
    4e74:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    4e78:	0c37      	lsrs	r7, r6, #16
    4e7a:	fa1f fc82 	uxth.w	ip, r2
    4e7e:	fb0c f507 	mul.w	r5, ip, r7
    4e82:	0c12      	lsrs	r2, r2, #16
    4e84:	b2b3      	uxth	r3, r6
    4e86:	fb0c fc03 	mul.w	ip, ip, r3
    4e8a:	fb02 5303 	mla	r3, r2, r3, r5
    4e8e:	fb02 f207 	mul.w	r2, r2, r7
    4e92:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    4e96:	429d      	cmp	r5, r3
    4e98:	bf88      	it	hi
    4e9a:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    4e9e:	ebc8 0101 	rsb	r1, r8, r1
    4ea2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    4ea6:	4291      	cmp	r1, r2
    4ea8:	d34c      	bcc.n	4f44 <__udivdi3+0x25c>
    4eaa:	d043      	beq.n	4f34 <__udivdi3+0x24c>
    4eac:	4630      	mov	r0, r6
    4eae:	2100      	movs	r1, #0
    4eb0:	e75c      	b.n	4d6c <__udivdi3+0x84>
    4eb2:	4094      	lsls	r4, r2
    4eb4:	f1c2 0520 	rsb	r5, r2, #32
    4eb8:	fa21 f605 	lsr.w	r6, r1, r5
    4ebc:	fa20 f505 	lsr.w	r5, r0, r5
    4ec0:	fa01 f102 	lsl.w	r1, r1, r2
    4ec4:	0c23      	lsrs	r3, r4, #16
    4ec6:	fbb6 fcf3 	udiv	ip, r6, r3
    4eca:	b2a7      	uxth	r7, r4
    4ecc:	fb03 661c 	mls	r6, r3, ip, r6
    4ed0:	fb07 f80c 	mul.w	r8, r7, ip
    4ed4:	4329      	orrs	r1, r5
    4ed6:	0c0d      	lsrs	r5, r1, #16
    4ed8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    4edc:	45b0      	cmp	r8, r6
    4ede:	fa00 f502 	lsl.w	r5, r0, r2
    4ee2:	d908      	bls.n	4ef6 <__udivdi3+0x20e>
    4ee4:	1936      	adds	r6, r6, r4
    4ee6:	f10c 30ff 	add.w	r0, ip, #4294967295
    4eea:	d23e      	bcs.n	4f6a <__udivdi3+0x282>
    4eec:	45b0      	cmp	r8, r6
    4eee:	d93c      	bls.n	4f6a <__udivdi3+0x282>
    4ef0:	f1ac 0c02 	sub.w	ip, ip, #2
    4ef4:	1936      	adds	r6, r6, r4
    4ef6:	ebc8 0206 	rsb	r2, r8, r6
    4efa:	fbb2 f0f3 	udiv	r0, r2, r3
    4efe:	fb03 2610 	mls	r6, r3, r0, r2
    4f02:	fb07 f800 	mul.w	r8, r7, r0
    4f06:	b289      	uxth	r1, r1
    4f08:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
    4f0c:	4590      	cmp	r8, r2
    4f0e:	d906      	bls.n	4f1e <__udivdi3+0x236>
    4f10:	1e46      	subs	r6, r0, #1
    4f12:	1912      	adds	r2, r2, r4
    4f14:	d227      	bcs.n	4f66 <__udivdi3+0x27e>
    4f16:	4590      	cmp	r8, r2
    4f18:	d925      	bls.n	4f66 <__udivdi3+0x27e>
    4f1a:	3802      	subs	r0, #2
    4f1c:	1912      	adds	r2, r2, r4
    4f1e:	ebc8 0202 	rsb	r2, r8, r2
    4f22:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    4f26:	e73f      	b.n	4da8 <__udivdi3+0xc0>
    4f28:	4638      	mov	r0, r7
    4f2a:	e708      	b.n	4d3e <__udivdi3+0x56>
    4f2c:	4633      	mov	r3, r6
    4f2e:	e71a      	b.n	4d66 <__udivdi3+0x7e>
    4f30:	4610      	mov	r0, r2
    4f32:	e761      	b.n	4df8 <__udivdi3+0x110>
    4f34:	fa00 f004 	lsl.w	r0, r0, r4
    4f38:	fa1f fc8c 	uxth.w	ip, ip
    4f3c:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    4f40:	4298      	cmp	r0, r3
    4f42:	d2b3      	bcs.n	4eac <__udivdi3+0x1c4>
    4f44:	1e70      	subs	r0, r6, #1
    4f46:	2100      	movs	r1, #0
    4f48:	e710      	b.n	4d6c <__udivdi3+0x84>
    4f4a:	4621      	mov	r1, r4
    4f4c:	4620      	mov	r0, r4
    4f4e:	e70d      	b.n	4d6c <__udivdi3+0x84>
    4f50:	45a9      	cmp	r9, r5
    4f52:	f67f af7c 	bls.w	4e4e <__udivdi3+0x166>
    4f56:	3f02      	subs	r7, #2
    4f58:	18ed      	adds	r5, r5, r3
    4f5a:	e779      	b.n	4e50 <__udivdi3+0x168>
    4f5c:	4588      	cmp	r8, r1
    4f5e:	d988      	bls.n	4e72 <__udivdi3+0x18a>
    4f60:	3e02      	subs	r6, #2
    4f62:	18c9      	adds	r1, r1, r3
    4f64:	e786      	b.n	4e74 <__udivdi3+0x18c>
    4f66:	4630      	mov	r0, r6
    4f68:	e7d9      	b.n	4f1e <__udivdi3+0x236>
    4f6a:	4684      	mov	ip, r0
    4f6c:	e7c3      	b.n	4ef6 <__udivdi3+0x20e>
    4f6e:	3e02      	subs	r6, #2
    4f70:	1912      	adds	r2, r2, r4
    4f72:	e72d      	b.n	4dd0 <__udivdi3+0xe8>

00004f74 <memcpy>:
    4f74:	2a0f      	cmp	r2, #15
    4f76:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    4f7a:	f240 80a1 	bls.w	50c0 <memcpy+0x14c>
    4f7e:	ea41 0300 	orr.w	r3, r1, r0
    4f82:	079b      	lsls	r3, r3, #30
    4f84:	f040 809e 	bne.w	50c4 <memcpy+0x150>
    4f88:	680c      	ldr	r4, [r1, #0]
    4f8a:	f1a2 0510 	sub.w	r5, r2, #16
    4f8e:	6004      	str	r4, [r0, #0]
    4f90:	684b      	ldr	r3, [r1, #4]
    4f92:	46ac      	mov	ip, r5
    4f94:	6043      	str	r3, [r0, #4]
    4f96:	688c      	ldr	r4, [r1, #8]
    4f98:	f1bc 0f0f 	cmp.w	ip, #15
    4f9c:	6084      	str	r4, [r0, #8]
    4f9e:	68cc      	ldr	r4, [r1, #12]
    4fa0:	f3c5 1500 	ubfx	r5, r5, #4, #1
    4fa4:	60c4      	str	r4, [r0, #12]
    4fa6:	f100 0310 	add.w	r3, r0, #16
    4faa:	f101 0410 	add.w	r4, r1, #16
    4fae:	d92b      	bls.n	5008 <memcpy+0x94>
    4fb0:	b175      	cbz	r5, 4fd0 <memcpy+0x5c>
    4fb2:	6825      	ldr	r5, [r4, #0]
    4fb4:	f1ac 0c10 	sub.w	ip, ip, #16
    4fb8:	601d      	str	r5, [r3, #0]
    4fba:	6865      	ldr	r5, [r4, #4]
    4fbc:	605d      	str	r5, [r3, #4]
    4fbe:	68a5      	ldr	r5, [r4, #8]
    4fc0:	609d      	str	r5, [r3, #8]
    4fc2:	68e5      	ldr	r5, [r4, #12]
    4fc4:	3410      	adds	r4, #16
    4fc6:	60dd      	str	r5, [r3, #12]
    4fc8:	3310      	adds	r3, #16
    4fca:	f1bc 0f0f 	cmp.w	ip, #15
    4fce:	d91b      	bls.n	5008 <memcpy+0x94>
    4fd0:	6827      	ldr	r7, [r4, #0]
    4fd2:	f104 0610 	add.w	r6, r4, #16
    4fd6:	601f      	str	r7, [r3, #0]
    4fd8:	6867      	ldr	r7, [r4, #4]
    4fda:	f103 0510 	add.w	r5, r3, #16
    4fde:	605f      	str	r7, [r3, #4]
    4fe0:	68a7      	ldr	r7, [r4, #8]
    4fe2:	f1ac 0c20 	sub.w	ip, ip, #32
    4fe6:	609f      	str	r7, [r3, #8]
    4fe8:	68e7      	ldr	r7, [r4, #12]
    4fea:	60df      	str	r7, [r3, #12]
    4fec:	6924      	ldr	r4, [r4, #16]
    4fee:	611c      	str	r4, [r3, #16]
    4ff0:	6877      	ldr	r7, [r6, #4]
    4ff2:	f106 0410 	add.w	r4, r6, #16
    4ff6:	606f      	str	r7, [r5, #4]
    4ff8:	68b7      	ldr	r7, [r6, #8]
    4ffa:	3320      	adds	r3, #32
    4ffc:	60af      	str	r7, [r5, #8]
    4ffe:	68f6      	ldr	r6, [r6, #12]
    5000:	f1bc 0f0f 	cmp.w	ip, #15
    5004:	60ee      	str	r6, [r5, #12]
    5006:	d8e3      	bhi.n	4fd0 <memcpy+0x5c>
    5008:	f1a2 0810 	sub.w	r8, r2, #16
    500c:	f028 030f 	bic.w	r3, r8, #15
    5010:	f002 040f 	and.w	r4, r2, #15
    5014:	f103 0c10 	add.w	ip, r3, #16
    5018:	2c03      	cmp	r4, #3
    501a:	eb00 030c 	add.w	r3, r0, ip
    501e:	eb01 080c 	add.w	r8, r1, ip
    5022:	d951      	bls.n	50c8 <memcpy+0x154>
    5024:	1f21      	subs	r1, r4, #4
    5026:	ea4f 0991 	mov.w	r9, r1, lsr #2
    502a:	4644      	mov	r4, r8
    502c:	eb08 0c89 	add.w	ip, r8, r9, lsl #2
    5030:	f854 6b04 	ldr.w	r6, [r4], #4
    5034:	ebc8 010c 	rsb	r1, r8, ip
    5038:	f10c 0c04 	add.w	ip, ip, #4
    503c:	461d      	mov	r5, r3
    503e:	4564      	cmp	r4, ip
    5040:	f845 6b04 	str.w	r6, [r5], #4
    5044:	f3c1 0180 	ubfx	r1, r1, #2, #1
    5048:	d012      	beq.n	5070 <memcpy+0xfc>
    504a:	b129      	cbz	r1, 5058 <memcpy+0xe4>
    504c:	f854 1b04 	ldr.w	r1, [r4], #4
    5050:	4564      	cmp	r4, ip
    5052:	f845 1b04 	str.w	r1, [r5], #4
    5056:	d00b      	beq.n	5070 <memcpy+0xfc>
    5058:	4627      	mov	r7, r4
    505a:	f857 1b04 	ldr.w	r1, [r7], #4
    505e:	462e      	mov	r6, r5
    5060:	f846 1b04 	str.w	r1, [r6], #4
    5064:	6864      	ldr	r4, [r4, #4]
    5066:	606c      	str	r4, [r5, #4]
    5068:	1d3c      	adds	r4, r7, #4
    506a:	1d35      	adds	r5, r6, #4
    506c:	4564      	cmp	r4, ip
    506e:	d1f3      	bne.n	5058 <memcpy+0xe4>
    5070:	f109 0c01 	add.w	ip, r9, #1
    5074:	ea4f 098c 	mov.w	r9, ip, lsl #2
    5078:	f002 0203 	and.w	r2, r2, #3
    507c:	eb08 0109 	add.w	r1, r8, r9
    5080:	444b      	add	r3, r9
    5082:	b1d2      	cbz	r2, 50ba <memcpy+0x146>
    5084:	780d      	ldrb	r5, [r1, #0]
    5086:	189a      	adds	r2, r3, r2
    5088:	43dc      	mvns	r4, r3
    508a:	f803 5b01 	strb.w	r5, [r3], #1
    508e:	1914      	adds	r4, r2, r4
    5090:	4293      	cmp	r3, r2
    5092:	f004 0401 	and.w	r4, r4, #1
    5096:	d010      	beq.n	50ba <memcpy+0x146>
    5098:	b12c      	cbz	r4, 50a6 <memcpy+0x132>
    509a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    509e:	f803 4b01 	strb.w	r4, [r3], #1
    50a2:	4293      	cmp	r3, r2
    50a4:	d009      	beq.n	50ba <memcpy+0x146>
    50a6:	784d      	ldrb	r5, [r1, #1]
    50a8:	461c      	mov	r4, r3
    50aa:	f804 5b01 	strb.w	r5, [r4], #1
    50ae:	788d      	ldrb	r5, [r1, #2]
    50b0:	3102      	adds	r1, #2
    50b2:	705d      	strb	r5, [r3, #1]
    50b4:	1c63      	adds	r3, r4, #1
    50b6:	4293      	cmp	r3, r2
    50b8:	d1f5      	bne.n	50a6 <memcpy+0x132>
    50ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    50be:	4770      	bx	lr
    50c0:	4603      	mov	r3, r0
    50c2:	e7de      	b.n	5082 <memcpy+0x10e>
    50c4:	4603      	mov	r3, r0
    50c6:	e7dd      	b.n	5084 <memcpy+0x110>
    50c8:	4641      	mov	r1, r8
    50ca:	4622      	mov	r2, r4
    50cc:	e7d9      	b.n	5082 <memcpy+0x10e>
    50ce:	bf00      	nop

000050d0 <memset>:
    50d0:	b4f0      	push	{r4, r5, r6, r7}
    50d2:	0784      	lsls	r4, r0, #30
    50d4:	4603      	mov	r3, r0
    50d6:	f000 808d 	beq.w	51f4 <memset+0x124>
    50da:	1e54      	subs	r4, r2, #1
    50dc:	2a00      	cmp	r2, #0
    50de:	f000 8087 	beq.w	51f0 <memset+0x120>
    50e2:	07e5      	lsls	r5, r4, #31
    50e4:	b2ce      	uxtb	r6, r1
    50e6:	d411      	bmi.n	510c <memset+0x3c>
    50e8:	461a      	mov	r2, r3
    50ea:	f802 6b01 	strb.w	r6, [r2], #1
    50ee:	4613      	mov	r3, r2
    50f0:	4615      	mov	r5, r2
    50f2:	0792      	lsls	r2, r2, #30
    50f4:	d010      	beq.n	5118 <memset+0x48>
    50f6:	1e62      	subs	r2, r4, #1
    50f8:	2c00      	cmp	r4, #0
    50fa:	d079      	beq.n	51f0 <memset+0x120>
    50fc:	f803 6b01 	strb.w	r6, [r3], #1
    5100:	4614      	mov	r4, r2
    5102:	079a      	lsls	r2, r3, #30
    5104:	461d      	mov	r5, r3
    5106:	d007      	beq.n	5118 <memset+0x48>
    5108:	3c01      	subs	r4, #1
    510a:	e7ed      	b.n	50e8 <memset+0x18>
    510c:	4603      	mov	r3, r0
    510e:	f803 6b01 	strb.w	r6, [r3], #1
    5112:	079a      	lsls	r2, r3, #30
    5114:	461d      	mov	r5, r3
    5116:	d1f7      	bne.n	5108 <memset+0x38>
    5118:	2c03      	cmp	r4, #3
    511a:	d952      	bls.n	51c2 <memset+0xf2>
    511c:	b2ce      	uxtb	r6, r1
    511e:	ea46 2706 	orr.w	r7, r6, r6, lsl #8
    5122:	2c0f      	cmp	r4, #15
    5124:	ea47 4307 	orr.w	r3, r7, r7, lsl #16
    5128:	d92d      	bls.n	5186 <memset+0xb6>
    512a:	f1a4 0210 	sub.w	r2, r4, #16
    512e:	4617      	mov	r7, r2
    5130:	2f0f      	cmp	r7, #15
    5132:	f3c2 1600 	ubfx	r6, r2, #4, #1
    5136:	602b      	str	r3, [r5, #0]
    5138:	606b      	str	r3, [r5, #4]
    513a:	60ab      	str	r3, [r5, #8]
    513c:	60eb      	str	r3, [r5, #12]
    513e:	f105 0210 	add.w	r2, r5, #16
    5142:	d916      	bls.n	5172 <memset+0xa2>
    5144:	b13e      	cbz	r6, 5156 <memset+0x86>
    5146:	3f10      	subs	r7, #16
    5148:	6013      	str	r3, [r2, #0]
    514a:	6053      	str	r3, [r2, #4]
    514c:	6093      	str	r3, [r2, #8]
    514e:	60d3      	str	r3, [r2, #12]
    5150:	3210      	adds	r2, #16
    5152:	2f0f      	cmp	r7, #15
    5154:	d90d      	bls.n	5172 <memset+0xa2>
    5156:	3f20      	subs	r7, #32
    5158:	f102 0610 	add.w	r6, r2, #16
    515c:	6013      	str	r3, [r2, #0]
    515e:	6053      	str	r3, [r2, #4]
    5160:	6093      	str	r3, [r2, #8]
    5162:	60d3      	str	r3, [r2, #12]
    5164:	6113      	str	r3, [r2, #16]
    5166:	6153      	str	r3, [r2, #20]
    5168:	6193      	str	r3, [r2, #24]
    516a:	61d3      	str	r3, [r2, #28]
    516c:	3220      	adds	r2, #32
    516e:	2f0f      	cmp	r7, #15
    5170:	d8f1      	bhi.n	5156 <memset+0x86>
    5172:	f1a4 0210 	sub.w	r2, r4, #16
    5176:	f022 020f 	bic.w	r2, r2, #15
    517a:	f004 040f 	and.w	r4, r4, #15
    517e:	3210      	adds	r2, #16
    5180:	2c03      	cmp	r4, #3
    5182:	4415      	add	r5, r2
    5184:	d91d      	bls.n	51c2 <memset+0xf2>
    5186:	1f27      	subs	r7, r4, #4
    5188:	463e      	mov	r6, r7
    518a:	462a      	mov	r2, r5
    518c:	2e03      	cmp	r6, #3
    518e:	f842 3b04 	str.w	r3, [r2], #4
    5192:	f3c7 0780 	ubfx	r7, r7, #2, #1
    5196:	d90d      	bls.n	51b4 <memset+0xe4>
    5198:	b127      	cbz	r7, 51a4 <memset+0xd4>
    519a:	3e04      	subs	r6, #4
    519c:	2e03      	cmp	r6, #3
    519e:	f842 3b04 	str.w	r3, [r2], #4
    51a2:	d907      	bls.n	51b4 <memset+0xe4>
    51a4:	4617      	mov	r7, r2
    51a6:	f847 3b04 	str.w	r3, [r7], #4
    51aa:	3e08      	subs	r6, #8
    51ac:	6053      	str	r3, [r2, #4]
    51ae:	1d3a      	adds	r2, r7, #4
    51b0:	2e03      	cmp	r6, #3
    51b2:	d8f7      	bhi.n	51a4 <memset+0xd4>
    51b4:	1f23      	subs	r3, r4, #4
    51b6:	f023 0203 	bic.w	r2, r3, #3
    51ba:	1d13      	adds	r3, r2, #4
    51bc:	f004 0403 	and.w	r4, r4, #3
    51c0:	18ed      	adds	r5, r5, r3
    51c2:	b1ac      	cbz	r4, 51f0 <memset+0x120>
    51c4:	b2c9      	uxtb	r1, r1
    51c6:	43ea      	mvns	r2, r5
    51c8:	192c      	adds	r4, r5, r4
    51ca:	f805 1b01 	strb.w	r1, [r5], #1
    51ce:	18a3      	adds	r3, r4, r2
    51d0:	42a5      	cmp	r5, r4
    51d2:	f003 0201 	and.w	r2, r3, #1
    51d6:	d00b      	beq.n	51f0 <memset+0x120>
    51d8:	b11a      	cbz	r2, 51e2 <memset+0x112>
    51da:	f805 1b01 	strb.w	r1, [r5], #1
    51de:	42a5      	cmp	r5, r4
    51e0:	d006      	beq.n	51f0 <memset+0x120>
    51e2:	462b      	mov	r3, r5
    51e4:	f803 1b01 	strb.w	r1, [r3], #1
    51e8:	7069      	strb	r1, [r5, #1]
    51ea:	1c5d      	adds	r5, r3, #1
    51ec:	42a5      	cmp	r5, r4
    51ee:	d1f8      	bne.n	51e2 <memset+0x112>
    51f0:	bcf0      	pop	{r4, r5, r6, r7}
    51f2:	4770      	bx	lr
    51f4:	4605      	mov	r5, r0
    51f6:	4614      	mov	r4, r2
    51f8:	e78e      	b.n	5118 <memset+0x48>
    51fa:	bf00      	nop
