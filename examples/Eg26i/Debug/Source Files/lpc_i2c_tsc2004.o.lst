   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"lpc_i2c_tsc2004.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	1
  19              		.global	I2C_TSC2004_Write_Byte
  20              		.thumb
  21              		.thumb_func
  23              	I2C_TSC2004_Write_Byte:
  24              	.LFB56:
  25              		.file 1 "../Source Files/lpc_i2c_tsc2004.c"
   1:../Source Files/lpc_i2c_tsc2004.c **** /**********************************************************************
   2:../Source Files/lpc_i2c_tsc2004.c **** * $Id$		lpc_i2c_tsc2004.c
   3:../Source Files/lpc_i2c_tsc2004.c **** *//**
   4:../Source Files/lpc_i2c_tsc2004.c **** * @file		lpc_i2c_tsc2004.c
   5:../Source Files/lpc_i2c_tsc2004.c **** * @brief	Contains all functions support for I2C based TouchScreen
   6:../Source Files/lpc_i2c_tsc2004.c **** *           library on LPC17xx
   7:../Source Files/lpc_i2c_tsc2004.c **** * @version	1.0
   8:../Source Files/lpc_i2c_tsc2004.c **** * @date		27. Dec. 2013
   9:../Source Files/lpc_i2c_tsc2004.c **** * @author	Dwijay.Edutech Learning Solutions
  10:../Source Files/lpc_i2c_tsc2004.c **** ***********************************************************************
  11:../Source Files/lpc_i2c_tsc2004.c **** * Software that is described herein is for illustrative purposes only
  12:../Source Files/lpc_i2c_tsc2004.c **** * which provides customers with programming information regarding the
  13:../Source Files/lpc_i2c_tsc2004.c **** * products. This software is supplied "AS IS" without any warranties.
  14:../Source Files/lpc_i2c_tsc2004.c **** * NXP Semiconductors assumes no responsibility or liability for the
  15:../Source Files/lpc_i2c_tsc2004.c **** * use of the software, conveys no license or title under any patent,
  16:../Source Files/lpc_i2c_tsc2004.c **** * copyright, or mask work right to the product. NXP Semiconductors
  17:../Source Files/lpc_i2c_tsc2004.c **** * reserves the right to make changes in the software without
  18:../Source Files/lpc_i2c_tsc2004.c **** * notification. NXP Semiconductors also make no representation or
  19:../Source Files/lpc_i2c_tsc2004.c **** * warranty that such application will be suitable for the specified
  20:../Source Files/lpc_i2c_tsc2004.c **** * use without further testing or modification.
  21:../Source Files/lpc_i2c_tsc2004.c **** **********************************************************************/
  22:../Source Files/lpc_i2c_tsc2004.c **** 
  23:../Source Files/lpc_i2c_tsc2004.c **** /* Peripheral group ----------------------------------------------------------- */
  24:../Source Files/lpc_i2c_tsc2004.c **** /** @addtogroup TSC2004
  25:../Source Files/lpc_i2c_tsc2004.c ****  * @{
  26:../Source Files/lpc_i2c_tsc2004.c ****  */
  27:../Source Files/lpc_i2c_tsc2004.c **** 
  28:../Source Files/lpc_i2c_tsc2004.c **** /* Includes ------------------------------------------------------------------- */
  29:../Source Files/lpc_i2c_tsc2004.c **** #include "lpc_i2c_tsc2004.h"
  30:../Source Files/lpc_i2c_tsc2004.c **** 
  31:../Source Files/lpc_i2c_tsc2004.c **** /* GLCD Include-----------------------------------------------------------------*/
  32:../Source Files/lpc_i2c_tsc2004.c **** //#include "mario.h"
  33:../Source Files/lpc_i2c_tsc2004.c **** //#include "cham.h"
  34:../Source Files/lpc_i2c_tsc2004.c **** //#include "ubuntu.h"
  35:../Source Files/lpc_i2c_tsc2004.c **** 
  36:../Source Files/lpc_i2c_tsc2004.c **** /* If this source file built with example, the LPC17xx FW library configuration
  37:../Source Files/lpc_i2c_tsc2004.c ****  * file in each example directory ("lpc17xx_libcfg.h") must be included,
  38:../Source Files/lpc_i2c_tsc2004.c ****  * otherwise the default FW library configuration file must be included instead
  39:../Source Files/lpc_i2c_tsc2004.c ****  */
  40:../Source Files/lpc_i2c_tsc2004.c **** 
  41:../Source Files/lpc_i2c_tsc2004.c **** 
  42:../Source Files/lpc_i2c_tsc2004.c **** 
  43:../Source Files/lpc_i2c_tsc2004.c **** /** @addtogroup TSC2004_Public_Functions
  44:../Source Files/lpc_i2c_tsc2004.c ****  * @{
  45:../Source Files/lpc_i2c_tsc2004.c ****  */
  46:../Source Files/lpc_i2c_tsc2004.c **** 
  47:../Source Files/lpc_i2c_tsc2004.c **** /* Public Functions ----------------------------------------------------------- */
  48:../Source Files/lpc_i2c_tsc2004.c **** 
  49:../Source Files/lpc_i2c_tsc2004.c **** /*********************************************************************//**
  50:../Source Files/lpc_i2c_tsc2004.c ****  * @brief	    Touch Screen Initialize
  51:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]	None
  52:../Source Files/lpc_i2c_tsc2004.c ****  * @return 		None
  53:../Source Files/lpc_i2c_tsc2004.c ****  **********************************************************************/
  54:../Source Files/lpc_i2c_tsc2004.c **** void TSC2004_Init (void)
  55:../Source Files/lpc_i2c_tsc2004.c **** {
  56:../Source Files/lpc_i2c_tsc2004.c **** 	uint16_t cmd,data;
  57:../Source Files/lpc_i2c_tsc2004.c **** 
  58:../Source Files/lpc_i2c_tsc2004.c **** 	 /* Reset the TSC, configure for 10 bit */
  59:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_10BIT, SWRST_TRUE);
  60:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_TSC2004_Write_Byte(cmd);
  61:../Source Files/lpc_i2c_tsc2004.c **** 
  62:../Source Files/lpc_i2c_tsc2004.c **** 	/* Enable interrupt for PENIRQ and DAV */
  63:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(CFR2_REG, PND0_FALSE, WRITE_REG);
  64:../Source Files/lpc_i2c_tsc2004.c **** 	data = PINTS1 | PINTS0 | MEDIAN_VAL_FLTR_SIZE_1 |AVRG_VAL_FLTR_SIZE_7_8;
  65:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_TSC2004_Write_Word(cmd, data);
  66:../Source Files/lpc_i2c_tsc2004.c **** 
  67:../Source Files/lpc_i2c_tsc2004.c **** 	/* Configure the TSC in TSMode 1 */
  68:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(CFR0_REG, PND0_FALSE, WRITE_REG);
  69:../Source Files/lpc_i2c_tsc2004.c **** 	data = PEN_STS_CTRL_MODE | ADC_CLK_2MHZ;
  70:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_TSC2004_Write_Word(cmd, data);
  71:../Source Files/lpc_i2c_tsc2004.c **** 
  72:../Source Files/lpc_i2c_tsc2004.c **** 	/* Enable x, y, z1 and z2 conversion functions */
  73:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD1(MEAS_X_Y_Z1_Z2, MODE_10BIT, SWRST_FALSE);
  74:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_TSC2004_Write_Byte(cmd);
  75:../Source Files/lpc_i2c_tsc2004.c **** }
  76:../Source Files/lpc_i2c_tsc2004.c **** 
  77:../Source Files/lpc_i2c_tsc2004.c **** 
  78:../Source Files/lpc_i2c_tsc2004.c **** /*********************************************************************//**
  79:../Source Files/lpc_i2c_tsc2004.c ****  * @brief	    Writes Command Byte
  80:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]	Command  Write Command Byte
  81:../Source Files/lpc_i2c_tsc2004.c ****  * @return 		status
  82:../Source Files/lpc_i2c_tsc2004.c ****  **********************************************************************/
  83:../Source Files/lpc_i2c_tsc2004.c **** char I2C_TSC2004_Write_Byte (uint8_t Command)
  84:../Source Files/lpc_i2c_tsc2004.c **** {
  26              		.loc 1 84 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 56
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 00B5     		push	{lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 14, -4
  35 0002 8FB0     		sub	sp, sp, #60
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 64
  38              		.loc 1 84 0
  39 0004 8DF80700 		strb	r0, [sp, #7]
  85:../Source Files/lpc_i2c_tsc2004.c **** 	/* Transmit setup */
  86:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_M_SETUP_Type txsetup;
  87:../Source Files/lpc_i2c_tsc2004.c **** 
  88:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.sl_addr7bit = TSC2004_ID;
  40              		.loc 1 88 0
  41 0008 4823     		movs	r3, #72
  89:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.tx_data = &Command;
  42              		.loc 1 89 0
  43 000a 0DF10700 		add	r0, sp, #7
  44              	.LVL1:
  90:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.tx_length = 1;
  45              		.loc 1 90 0
  46 000e 0121     		movs	r1, #1
  91:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.rx_data = NULL;
  47              		.loc 1 91 0
  48 0010 0022     		movs	r2, #0
  88:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.sl_addr7bit = TSC2004_ID;
  49              		.loc 1 88 0
  50 0012 0393     		str	r3, [sp, #12]
  89:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.tx_data = &Command;
  51              		.loc 1 89 0
  52 0014 0490     		str	r0, [sp, #16]
  90:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.tx_length = 1;
  53              		.loc 1 90 0
  54 0016 0591     		str	r1, [sp, #20]
  92:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.rx_length = 0;
  93:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.retransmissions_max = 3;
  55              		.loc 1 93 0
  56 0018 0323     		movs	r3, #3
  94:../Source Files/lpc_i2c_tsc2004.c **** 
  95:../Source Files/lpc_i2c_tsc2004.c **** 	/* write byte to addr  */
  96:../Source Files/lpc_i2c_tsc2004.c **** 	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
  57              		.loc 1 96 0
  58 001a 03A9     		add	r1, sp, #12
  59 001c 0548     		ldr	r0, .L4
  91:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.rx_data = NULL;
  60              		.loc 1 91 0
  61 001e 0792     		str	r2, [sp, #28]
  92:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.rx_length = 0;
  62              		.loc 1 92 0
  63 0020 0892     		str	r2, [sp, #32]
  93:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.retransmissions_max = 3;
  64              		.loc 1 93 0
  65 0022 0A93     		str	r3, [sp, #40]
  66              		.loc 1 96 0
  67 0024 FFF7FEFF 		bl	I2C_MasterTransferData
  68              	.LVL2:
  97:../Source Files/lpc_i2c_tsc2004.c **** 	{
  98:../Source Files/lpc_i2c_tsc2004.c **** 		return (0);
  99:../Source Files/lpc_i2c_tsc2004.c **** 	}
 100:../Source Files/lpc_i2c_tsc2004.c **** 	else
 101:../Source Files/lpc_i2c_tsc2004.c **** 	{
 102:../Source Files/lpc_i2c_tsc2004.c **** 		return (-1);
 103:../Source Files/lpc_i2c_tsc2004.c **** 	}
 104:../Source Files/lpc_i2c_tsc2004.c **** }
  69              		.loc 1 104 0
  70 0028 0128     		cmp	r0, #1
  71 002a 14BF     		ite	ne
  72 002c FF20     		movne	r0, #255
  73 002e 0020     		moveq	r0, #0
  74 0030 0FB0     		add	sp, sp, #60
  75 0032 00BD     		pop	{pc}
  76              	.L5:
  77              		.align	2
  78              	.L4:
  79 0034 00C00140 		.word	1073856512
  80              		.cfi_endproc
  81              	.LFE56:
  83              		.align	1
  84              		.global	I2C_TSC2004_Write_Word
  85              		.thumb
  86              		.thumb_func
  88              	I2C_TSC2004_Write_Word:
  89              	.LFB57:
 105:../Source Files/lpc_i2c_tsc2004.c **** 
 106:../Source Files/lpc_i2c_tsc2004.c **** 
 107:../Source Files/lpc_i2c_tsc2004.c **** /*********************************************************************//**
 108:../Source Files/lpc_i2c_tsc2004.c ****  * @brief	    Writes Word Command
 109:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]	Command      Configuration Commands
 110:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]   word_data    Configuration values
 111:../Source Files/lpc_i2c_tsc2004.c ****  * @return 		status
 112:../Source Files/lpc_i2c_tsc2004.c ****  **********************************************************************/
 113:../Source Files/lpc_i2c_tsc2004.c **** char I2C_TSC2004_Write_Word (uint8_t Command, uint16_t word_data)
 114:../Source Files/lpc_i2c_tsc2004.c **** {
  90              		.loc 1 114 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 48
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              	.LVL3:
  95 0038 00B5     		push	{lr}
  96              	.LCFI2:
  97              		.cfi_def_cfa_offset 4
  98              		.cfi_offset 14, -4
 115:../Source Files/lpc_i2c_tsc2004.c **** 	/* Transmit setup */
 116:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_M_SETUP_Type txsetup;
 117:../Source Files/lpc_i2c_tsc2004.c **** 
 118:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_Tx_Buf[0] = Command;
  99              		.loc 1 118 0
 100 003a 0C4B     		ldr	r3, .L9
 114:../Source Files/lpc_i2c_tsc2004.c **** {
 101              		.loc 1 114 0
 102 003c 8DB0     		sub	sp, sp, #52
 103              	.LCFI3:
 104              		.cfi_def_cfa_offset 56
 119:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
 105              		.loc 1 119 0
 106 003e 0A0A     		lsrs	r2, r1, #8
 118:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_Tx_Buf[0] = Command;
 107              		.loc 1 118 0
 108 0040 1870     		strb	r0, [r3, #0]
 120:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_Tx_Buf[2] = (uint8_t)(word_data);
 109              		.loc 1 120 0
 110 0042 9970     		strb	r1, [r3, #2]
 121:../Source Files/lpc_i2c_tsc2004.c **** 
 122:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.sl_addr7bit = TSC2004_ID;
 111              		.loc 1 122 0
 112 0044 4820     		movs	r0, #72
 113              	.LVL4:
 123:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.tx_data = I2C_Tx_Buf;
 124:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.tx_length = 3;
 114              		.loc 1 124 0
 115 0046 0321     		movs	r1, #3
 116              	.LVL5:
 119:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_Tx_Buf[1] = (uint8_t)(word_data>>8);
 117              		.loc 1 119 0
 118 0048 5A70     		strb	r2, [r3, #1]
 122:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.sl_addr7bit = TSC2004_ID;
 119              		.loc 1 122 0
 120 004a 0190     		str	r0, [sp, #4]
 125:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.rx_data = NULL;
 121              		.loc 1 125 0
 122 004c 0022     		movs	r2, #0
 124:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.tx_length = 3;
 123              		.loc 1 124 0
 124 004e 0391     		str	r1, [sp, #12]
 126:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.rx_length = 0;
 127:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.retransmissions_max = 3;
 125              		.loc 1 127 0
 126 0050 0891     		str	r1, [sp, #32]
 128:../Source Files/lpc_i2c_tsc2004.c **** 
 129:../Source Files/lpc_i2c_tsc2004.c **** 	/* write byte to addr  */
 130:../Source Files/lpc_i2c_tsc2004.c **** 	if(I2C_MasterTransferData(LPC_I2C0, &txsetup, I2C_TRANSFER_POLLING)==SUCCESS) //return status
 127              		.loc 1 130 0
 128 0052 0748     		ldr	r0, .L9+4
 129 0054 01A9     		add	r1, sp, #4
 123:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.tx_data = I2C_Tx_Buf;
 130              		.loc 1 123 0
 131 0056 0293     		str	r3, [sp, #8]
 125:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.rx_data = NULL;
 132              		.loc 1 125 0
 133 0058 0592     		str	r2, [sp, #20]
 126:../Source Files/lpc_i2c_tsc2004.c **** 	txsetup.rx_length = 0;
 134              		.loc 1 126 0
 135 005a 0692     		str	r2, [sp, #24]
 136              		.loc 1 130 0
 137 005c FFF7FEFF 		bl	I2C_MasterTransferData
 138              	.LVL6:
 131:../Source Files/lpc_i2c_tsc2004.c **** 	{
 132:../Source Files/lpc_i2c_tsc2004.c **** 		return (0);
 133:../Source Files/lpc_i2c_tsc2004.c **** 	}
 134:../Source Files/lpc_i2c_tsc2004.c **** 	else
 135:../Source Files/lpc_i2c_tsc2004.c **** 	{
 136:../Source Files/lpc_i2c_tsc2004.c **** 		return (-1);
 137:../Source Files/lpc_i2c_tsc2004.c **** 	}
 138:../Source Files/lpc_i2c_tsc2004.c **** }
 139              		.loc 1 138 0
 140 0060 0128     		cmp	r0, #1
 141 0062 14BF     		ite	ne
 142 0064 FF20     		movne	r0, #255
 143 0066 0020     		moveq	r0, #0
 144 0068 0DB0     		add	sp, sp, #52
 145 006a 00BD     		pop	{pc}
 146              	.L10:
 147              		.align	2
 148              	.L9:
 149 006c 00000000 		.word	I2C_Tx_Buf
 150 0070 00C00140 		.word	1073856512
 151              		.cfi_endproc
 152              	.LFE57:
 154              		.align	1
 155              		.global	TSC2004_Init
 156              		.thumb
 157              		.thumb_func
 159              	TSC2004_Init:
 160              	.LFB55:
  55:../Source Files/lpc_i2c_tsc2004.c **** {
 161              		.loc 1 55 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              	.LVL7:
 166 0074 08B5     		push	{r3, lr}
 167              	.LCFI4:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 3, -8
 170              		.cfi_offset 14, -4
  60:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_TSC2004_Write_Byte(cmd);
 171              		.loc 1 60 0
 172 0076 8220     		movs	r0, #130
 173 0078 FFF7FEFF 		bl	I2C_TSC2004_Write_Byte
 174              	.LVL8:
  65:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_TSC2004_Write_Word(cmd, data);
 175              		.loc 1 65 0
 176 007c 7020     		movs	r0, #112
 177 007e 4FF44841 		mov	r1, #51200
 178 0082 FFF7FEFF 		bl	I2C_TSC2004_Write_Word
 179              	.LVL9:
  70:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_TSC2004_Write_Word(cmd, data);
 180              		.loc 1 70 0
 181 0086 6020     		movs	r0, #96
 182 0088 4FF40841 		mov	r1, #34816
 183 008c FFF7FEFF 		bl	I2C_TSC2004_Write_Word
 184              	.LVL10:
  74:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_TSC2004_Write_Byte(cmd);
 185              		.loc 1 74 0
 186 0090 8020     		movs	r0, #128
  75:../Source Files/lpc_i2c_tsc2004.c **** }
 187              		.loc 1 75 0
 188 0092 BDE80840 		pop	{r3, lr}
  74:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_TSC2004_Write_Byte(cmd);
 189              		.loc 1 74 0
 190 0096 FFF7FEBF 		b	I2C_TSC2004_Write_Byte
 191              	.LVL11:
 192              		.cfi_endproc
 193              	.LFE55:
 195              		.align	1
 196              		.global	I2C_TSC2004_Read_Word
 197              		.thumb
 198              		.thumb_func
 200              	I2C_TSC2004_Read_Word:
 201              	.LFB58:
 139:../Source Files/lpc_i2c_tsc2004.c **** 
 140:../Source Files/lpc_i2c_tsc2004.c **** 
 141:../Source Files/lpc_i2c_tsc2004.c **** /*********************************************************************//**
 142:../Source Files/lpc_i2c_tsc2004.c ****  * @brief	    Reads Word data
 143:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]	Command    Read Register
 144:../Source Files/lpc_i2c_tsc2004.c ****  * @return 		Word value
 145:../Source Files/lpc_i2c_tsc2004.c ****  **********************************************************************/
 146:../Source Files/lpc_i2c_tsc2004.c **** uint16_t I2C_TSC2004_Read_Word (uint8_t Command)
 147:../Source Files/lpc_i2c_tsc2004.c **** {
 202              		.loc 1 147 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 56
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              	.LVL12:
 207 009a 30B5     		push	{r4, r5, lr}
 208              	.LCFI5:
 209              		.cfi_def_cfa_offset 12
 210              		.cfi_offset 4, -12
 211              		.cfi_offset 5, -8
 212              		.cfi_offset 14, -4
 213 009c 8FB0     		sub	sp, sp, #60
 214              	.LCFI6:
 215              		.cfi_def_cfa_offset 72
 216              		.loc 1 147 0
 217 009e 8DF80700 		strb	r0, [sp, #7]
 148:../Source Files/lpc_i2c_tsc2004.c **** 	/* Receive setup */
 149:../Source Files/lpc_i2c_tsc2004.c **** 	I2C_M_SETUP_Type rxsetup;
 150:../Source Files/lpc_i2c_tsc2004.c **** 	uint16_t word_data=0;
 151:../Source Files/lpc_i2c_tsc2004.c **** 
 152:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.sl_addr7bit = TSC2004_ID;
 153:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.tx_data = &Command;	// Get address to read at writing address
 154:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.tx_length = 1;
 218              		.loc 1 154 0
 219 00a2 0121     		movs	r1, #1
 153:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.tx_data = &Command;	// Get address to read at writing address
 220              		.loc 1 153 0
 221 00a4 0DF10700 		add	r0, sp, #7
 222              	.LVL13:
 155:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.rx_data = I2C_Rx_Buf;
 223              		.loc 1 155 0
 224 00a8 0D4C     		ldr	r4, .L15
 156:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.rx_length = 2;
 225              		.loc 1 156 0
 226 00aa 0222     		movs	r2, #2
 152:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.sl_addr7bit = TSC2004_ID;
 227              		.loc 1 152 0
 228 00ac 4823     		movs	r3, #72
 153:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.tx_data = &Command;	// Get address to read at writing address
 229              		.loc 1 153 0
 230 00ae 0490     		str	r0, [sp, #16]
 154:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.tx_length = 1;
 231              		.loc 1 154 0
 232 00b0 0591     		str	r1, [sp, #20]
 233              		.loc 1 156 0
 234 00b2 0892     		str	r2, [sp, #32]
 157:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.retransmissions_max = 3;
 235              		.loc 1 157 0
 236 00b4 0325     		movs	r5, #3
 158:../Source Files/lpc_i2c_tsc2004.c **** 
 159:../Source Files/lpc_i2c_tsc2004.c **** 	/* The protocol and raw data format from i2c interface:
 160:../Source Files/lpc_i2c_tsc2004.c **** 	 * * S Addr Wr [A] Comm [A] S Addr Rd [A] [DataHigh] A [DataLow] NA P
 161:../Source Files/lpc_i2c_tsc2004.c **** 	 * * Data are in Right Justified format.
 162:../Source Files/lpc_i2c_tsc2004.c **** 	 * */
 163:../Source Files/lpc_i2c_tsc2004.c **** 	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
 164:../Source Files/lpc_i2c_tsc2004.c **** 	word_data |= (I2C_Rx_Buf[1]&0xFF);
 165:../Source Files/lpc_i2c_tsc2004.c **** 
 166:../Source Files/lpc_i2c_tsc2004.c **** 	if (I2C_MasterTransferData(LPC_I2C0, &rxsetup, I2C_TRANSFER_POLLING) == SUCCESS)
 237              		.loc 1 166 0
 238 00b6 0022     		movs	r2, #0
 239 00b8 03A9     		add	r1, sp, #12
 240 00ba 0A48     		ldr	r0, .L15+4
 155:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.rx_data = I2C_Rx_Buf;
 241              		.loc 1 155 0
 242 00bc 0794     		str	r4, [sp, #28]
 157:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.retransmissions_max = 3;
 243              		.loc 1 157 0
 244 00be 0A95     		str	r5, [sp, #40]
 152:../Source Files/lpc_i2c_tsc2004.c **** 	rxsetup.sl_addr7bit = TSC2004_ID;
 245              		.loc 1 152 0
 246 00c0 0393     		str	r3, [sp, #12]
 163:../Source Files/lpc_i2c_tsc2004.c **** 	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
 247              		.loc 1 163 0
 248 00c2 2578     		ldrb	r5, [r4, #0]	@ zero_extendqisi2
 249              	.LVL14:
 164:../Source Files/lpc_i2c_tsc2004.c **** 	word_data |= (I2C_Rx_Buf[1]&0xFF);
 250              		.loc 1 164 0
 251 00c4 6478     		ldrb	r4, [r4, #1]	@ zero_extendqisi2
 252              	.LVL15:
 253              		.loc 1 166 0
 254 00c6 FFF7FEFF 		bl	I2C_MasterTransferData
 255              	.LVL16:
 256 00ca 0128     		cmp	r0, #1
 163:../Source Files/lpc_i2c_tsc2004.c **** 	word_data |= (I2C_Rx_Buf[0]&0x0F)<<8;
 257              		.loc 1 163 0
 258 00cc 06BF     		itte	eq
 259 00ce 05F00F00 		andeq	r0, r5, #15
 164:../Source Files/lpc_i2c_tsc2004.c **** 	word_data |= (I2C_Rx_Buf[1]&0xFF);
 260              		.loc 1 164 0
 261 00d2 44EA0020 		orreq	r0, r4, r0, lsl #8
 167:../Source Files/lpc_i2c_tsc2004.c **** 	{
 168:../Source Files/lpc_i2c_tsc2004.c **** 		return (word_data);
 169:../Source Files/lpc_i2c_tsc2004.c **** 	}
 170:../Source Files/lpc_i2c_tsc2004.c **** 	else
 171:../Source Files/lpc_i2c_tsc2004.c **** 	{
 172:../Source Files/lpc_i2c_tsc2004.c **** 		return (-1);
 262              		.loc 1 172 0
 263 00d6 4FF6FF70 		movwne	r0, #65535
 173:../Source Files/lpc_i2c_tsc2004.c **** 	}
 174:../Source Files/lpc_i2c_tsc2004.c **** }
 264              		.loc 1 174 0
 265 00da 0FB0     		add	sp, sp, #60
 266 00dc 30BD     		pop	{r4, r5, pc}
 267              	.L16:
 268 00de 00BF     		.align	2
 269              	.L15:
 270 00e0 00000000 		.word	I2C_Rx_Buf
 271 00e4 00C00140 		.word	1073856512
 272              		.cfi_endproc
 273              	.LFE58:
 275              		.align	1
 276              		.global	TSC2004_Read_Reg
 277              		.thumb
 278              		.thumb_func
 280              	TSC2004_Read_Reg:
 281              	.LFB59:
 175:../Source Files/lpc_i2c_tsc2004.c **** 
 176:../Source Files/lpc_i2c_tsc2004.c **** 
 177:../Source Files/lpc_i2c_tsc2004.c **** /*********************************************************************//**
 178:../Source Files/lpc_i2c_tsc2004.c ****  * @brief	    Reads Any Register value
 179:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]	reg    Register to access
 180:../Source Files/lpc_i2c_tsc2004.c ****  * @return 		Word Value
 181:../Source Files/lpc_i2c_tsc2004.c ****  **********************************************************************/
 182:../Source Files/lpc_i2c_tsc2004.c **** uint16_t TSC2004_Read_Reg (register_address reg)
 183:../Source Files/lpc_i2c_tsc2004.c **** {
 282              		.loc 1 183 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              	.LVL17:
 287 00e8 10B5     		push	{r4, lr}
 288              	.LCFI7:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 4, -8
 291              		.cfi_offset 14, -4
 292              		.loc 1 183 0
 293 00ea 0446     		mov	r4, r0
 184:../Source Files/lpc_i2c_tsc2004.c **** 	uint16_t val;
 185:../Source Files/lpc_i2c_tsc2004.c **** 	uint8_t cmd;
 186:../Source Files/lpc_i2c_tsc2004.c **** 
 187:../Source Files/lpc_i2c_tsc2004.c **** 	TSC2004_Init ();					// Initialize Touch Screen
 294              		.loc 1 187 0
 295 00ec FFF7FEFF 		bl	TSC2004_Init
 296              	.LVL18:
 188:../Source Files/lpc_i2c_tsc2004.c **** 
 189:../Source Files/lpc_i2c_tsc2004.c **** 	 // Prepare val Measurement
 190:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(reg, PND0_FALSE, READ_REG);
 297              		.loc 1 190 0
 298 00f0 E000     		lsls	r0, r4, #3
 299 00f2 40F00101 		orr	r1, r0, #1
 300 00f6 CCB2     		uxtb	r4, r1
 301              	.LVL19:
 191:../Source Files/lpc_i2c_tsc2004.c **** 	val = I2C_TSC2004_Read_Word(cmd);
 302              		.loc 1 191 0
 303 00f8 2046     		mov	r0, r4
 304 00fa FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 305              	.LVL20:
 192:../Source Files/lpc_i2c_tsc2004.c **** 
 193:../Source Files/lpc_i2c_tsc2004.c **** 	 // Read val Measurement
 194:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(reg, PND0_FALSE, READ_REG);
 195:../Source Files/lpc_i2c_tsc2004.c **** 	val = I2C_TSC2004_Read_Word(cmd);
 306              		.loc 1 195 0
 307 00fe 2046     		mov	r0, r4
 308 0100 FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 309              	.LVL21:
 196:../Source Files/lpc_i2c_tsc2004.c **** 
 197:../Source Files/lpc_i2c_tsc2004.c **** 	val &= MEAS_MASK;
 310              		.loc 1 197 0
 311 0104 0205     		lsls	r2, r0, #20
 198:../Source Files/lpc_i2c_tsc2004.c **** 
 199:../Source Files/lpc_i2c_tsc2004.c **** 	return (val);
 200:../Source Files/lpc_i2c_tsc2004.c **** }
 312              		.loc 1 200 0
 313 0106 100D     		lsrs	r0, r2, #20
 314              	.LVL22:
 315 0108 10BD     		pop	{r4, pc}
 316              		.cfi_endproc
 317              	.LFE59:
 319              		.align	1
 320              		.global	TSC2004_Read_Values
 321              		.thumb
 322              		.thumb_func
 324              	TSC2004_Read_Values:
 325              	.LFB60:
 201:../Source Files/lpc_i2c_tsc2004.c **** 
 202:../Source Files/lpc_i2c_tsc2004.c **** 
 203:../Source Files/lpc_i2c_tsc2004.c **** /*********************************************************************//**
 204:../Source Files/lpc_i2c_tsc2004.c ****  * @brief	    Read X,Y,Z1,Z2 Values
 205:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]	*tc    store values in structure
 206:../Source Files/lpc_i2c_tsc2004.c ****  * @return 		None
 207:../Source Files/lpc_i2c_tsc2004.c ****  **********************************************************************/
 208:../Source Files/lpc_i2c_tsc2004.c **** void TSC2004_Read_Values (ts_event *tc)
 209:../Source Files/lpc_i2c_tsc2004.c **** {
 326              		.loc 1 209 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              	.LVL23:
 331 010a 10B5     		push	{r4, lr}
 332              	.LCFI8:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 4, -8
 335              		.cfi_offset 14, -4
 336              		.loc 1 209 0
 337 010c 0446     		mov	r4, r0
 210:../Source Files/lpc_i2c_tsc2004.c **** 	uint8_t cmd;
 211:../Source Files/lpc_i2c_tsc2004.c **** 
 212:../Source Files/lpc_i2c_tsc2004.c **** 	TSC2004_Init ();					// Initialize Touch Screen
 338              		.loc 1 212 0
 339 010e FFF7FEFF 		bl	TSC2004_Init
 340              	.LVL24:
 213:../Source Files/lpc_i2c_tsc2004.c **** 
 214:../Source Files/lpc_i2c_tsc2004.c **** 	 // Prepare X Measurement
 215:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(X_REG, PND0_FALSE, READ_REG);
 216:../Source Files/lpc_i2c_tsc2004.c **** 	tc->x = I2C_TSC2004_Read_Word(cmd);
 341              		.loc 1 216 0
 342 0112 0120     		movs	r0, #1
 343 0114 FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 344              	.LVL25:
 345 0118 2080     		strh	r0, [r4, #0]	@ movhi
 217:../Source Files/lpc_i2c_tsc2004.c **** 
 218:../Source Files/lpc_i2c_tsc2004.c **** 	 // Read X Measurement
 219:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(X_REG, PND0_FALSE, READ_REG);
 220:../Source Files/lpc_i2c_tsc2004.c **** 	tc->x = I2C_TSC2004_Read_Word(cmd);
 346              		.loc 1 220 0
 347 011a 0120     		movs	r0, #1
 348 011c FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 349              	.LVL26:
 350 0120 2080     		strh	r0, [r4, #0]	@ movhi
 351              	.LVL27:
 221:../Source Files/lpc_i2c_tsc2004.c **** 
 222:../Source Files/lpc_i2c_tsc2004.c **** 	// Prepare Y Measurement
 223:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(Y_REG, PND0_FALSE, READ_REG);
 224:../Source Files/lpc_i2c_tsc2004.c **** 	tc->y = I2C_TSC2004_Read_Word(cmd);
 352              		.loc 1 224 0
 353 0122 0920     		movs	r0, #9
 354 0124 FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 355              	.LVL28:
 356 0128 6080     		strh	r0, [r4, #2]	@ movhi
 225:../Source Files/lpc_i2c_tsc2004.c **** 
 226:../Source Files/lpc_i2c_tsc2004.c **** 	// Read Y Measurement
 227:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(Y_REG, PND0_FALSE, READ_REG);
 228:../Source Files/lpc_i2c_tsc2004.c **** 	tc->y = I2C_TSC2004_Read_Word(cmd);
 357              		.loc 1 228 0
 358 012a 0920     		movs	r0, #9
 359 012c FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 360              	.LVL29:
 361 0130 6080     		strh	r0, [r4, #2]	@ movhi
 362              	.LVL30:
 229:../Source Files/lpc_i2c_tsc2004.c **** 
 230:../Source Files/lpc_i2c_tsc2004.c **** 	// Prepare Z1 Measurement
 231:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(Z1_REG, PND0_FALSE, READ_REG);
 232:../Source Files/lpc_i2c_tsc2004.c **** 	tc->z1 = I2C_TSC2004_Read_Word(cmd);
 363              		.loc 1 232 0
 364 0132 1120     		movs	r0, #17
 365 0134 FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 366              	.LVL31:
 367 0138 A080     		strh	r0, [r4, #4]	@ movhi
 233:../Source Files/lpc_i2c_tsc2004.c **** 
 234:../Source Files/lpc_i2c_tsc2004.c **** 	// Read Z1 Measurement
 235:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(Z1_REG, PND0_FALSE, READ_REG);
 236:../Source Files/lpc_i2c_tsc2004.c **** 	tc->z1 = I2C_TSC2004_Read_Word(cmd);
 368              		.loc 1 236 0
 369 013a 1120     		movs	r0, #17
 370 013c FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 371              	.LVL32:
 372 0140 A080     		strh	r0, [r4, #4]	@ movhi
 373              	.LVL33:
 237:../Source Files/lpc_i2c_tsc2004.c **** 
 238:../Source Files/lpc_i2c_tsc2004.c **** 	// Prepare Z2 Measurement
 239:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
 240:../Source Files/lpc_i2c_tsc2004.c **** 	tc->z2 = I2C_TSC2004_Read_Word(cmd);
 374              		.loc 1 240 0
 375 0142 1920     		movs	r0, #25
 376 0144 FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 377              	.LVL34:
 378 0148 E080     		strh	r0, [r4, #6]	@ movhi
 241:../Source Files/lpc_i2c_tsc2004.c **** 
 242:../Source Files/lpc_i2c_tsc2004.c **** 	// Read Z2 Measurement
 243:../Source Files/lpc_i2c_tsc2004.c **** 	cmd = TSC2004_CMD0(Z2_REG, PND0_FALSE, READ_REG);
 244:../Source Files/lpc_i2c_tsc2004.c **** 	tc->z2 = I2C_TSC2004_Read_Word(cmd);
 379              		.loc 1 244 0
 380 014a 1920     		movs	r0, #25
 381 014c FFF7FEFF 		bl	I2C_TSC2004_Read_Word
 382              	.LVL35:
 245:../Source Files/lpc_i2c_tsc2004.c **** 
 246:../Source Files/lpc_i2c_tsc2004.c **** 	tc->x &= MEAS_MASK;
 383              		.loc 1 246 0
 384 0150 2388     		ldrh	r3, [r4, #0]
 247:../Source Files/lpc_i2c_tsc2004.c **** 	tc->y &= MEAS_MASK;
 385              		.loc 1 247 0
 386 0152 6288     		ldrh	r2, [r4, #2]
 246:../Source Files/lpc_i2c_tsc2004.c **** 	tc->x &= MEAS_MASK;
 387              		.loc 1 246 0
 388 0154 23F47041 		bic	r1, r3, #61440
 389 0158 2180     		strh	r1, [r4, #0]	@ movhi
 248:../Source Files/lpc_i2c_tsc2004.c **** 	tc->z1 &= MEAS_MASK;
 390              		.loc 1 248 0
 391 015a A188     		ldrh	r1, [r4, #4]
 247:../Source Files/lpc_i2c_tsc2004.c **** 	tc->y &= MEAS_MASK;
 392              		.loc 1 247 0
 393 015c 22F47043 		bic	r3, r2, #61440
 249:../Source Files/lpc_i2c_tsc2004.c **** 	tc->z2 &= MEAS_MASK;
 394              		.loc 1 249 0
 395 0160 20F47040 		bic	r0, r0, #61440
 248:../Source Files/lpc_i2c_tsc2004.c **** 	tc->z1 &= MEAS_MASK;
 396              		.loc 1 248 0
 397 0164 21F47042 		bic	r2, r1, #61440
 247:../Source Files/lpc_i2c_tsc2004.c **** 	tc->y &= MEAS_MASK;
 398              		.loc 1 247 0
 399 0168 6380     		strh	r3, [r4, #2]	@ movhi
 248:../Source Files/lpc_i2c_tsc2004.c **** 	tc->z1 &= MEAS_MASK;
 400              		.loc 1 248 0
 401 016a A280     		strh	r2, [r4, #4]	@ movhi
 402              		.loc 1 249 0
 403 016c E080     		strh	r0, [r4, #6]	@ movhi
 404 016e 10BD     		pop	{r4, pc}
 405              		.cfi_endproc
 406              	.LFE60:
 408              		.align	1
 409              		.global	TSC2004_Read_Value_Test
 410              		.thumb
 411              		.thumb_func
 413              	TSC2004_Read_Value_Test:
 414              	.LFB61:
 250:../Source Files/lpc_i2c_tsc2004.c **** }
 251:../Source Files/lpc_i2c_tsc2004.c **** 
 252:../Source Files/lpc_i2c_tsc2004.c **** 
 253:../Source Files/lpc_i2c_tsc2004.c **** /*********************************************************************//**
 254:../Source Files/lpc_i2c_tsc2004.c ****  * @brief	    Read X,Y,Z1,Z2 Values and Display on Terminal
 255:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]	None
 256:../Source Files/lpc_i2c_tsc2004.c ****  * @return 		None
 257:../Source Files/lpc_i2c_tsc2004.c ****  **********************************************************************/
 258:../Source Files/lpc_i2c_tsc2004.c **** void TSC2004_Read_Value_Test (void)
 259:../Source Files/lpc_i2c_tsc2004.c **** {
 415              		.loc 1 259 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 8
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419 0170 13B5     		push	{r0, r1, r4, lr}
 420              	.LCFI9:
 421              		.cfi_def_cfa_offset 16
 422              		.cfi_offset 0, -16
 423              		.cfi_offset 1, -12
 424              		.cfi_offset 4, -8
 425              		.cfi_offset 14, -4
 260:../Source Files/lpc_i2c_tsc2004.c **** 	ts_event ts;
 261:../Source Files/lpc_i2c_tsc2004.c **** 	TSC2004_Read_Values (&ts);
 262:../Source Files/lpc_i2c_tsc2004.c **** 
 263:../Source Files/lpc_i2c_tsc2004.c **** 	printf(LPC_UART0,"\x1b[1;1HMeasure X    = %d05",ts.x);
 426              		.loc 1 263 0
 427 0172 0E4C     		ldr	r4, .L20
 261:../Source Files/lpc_i2c_tsc2004.c **** 	TSC2004_Read_Values (&ts);
 428              		.loc 1 261 0
 429 0174 6846     		mov	r0, sp
 430 0176 FFF7FEFF 		bl	TSC2004_Read_Values
 431              	.LVL36:
 432              		.loc 1 263 0
 433 017a BDF80020 		ldrh	r2, [sp, #0]
 434 017e 2046     		mov	r0, r4
 435 0180 0B49     		ldr	r1, .L20+4
 436 0182 FFF7FEFF 		bl	printf
 437              	.LVL37:
 264:../Source Files/lpc_i2c_tsc2004.c **** 	printf(LPC_UART0,"\x1b[2;1HMeasure Y    = %d05",ts.y);
 438              		.loc 1 264 0
 439 0186 BDF80220 		ldrh	r2, [sp, #2]
 440 018a 2046     		mov	r0, r4
 441 018c 0949     		ldr	r1, .L20+8
 442 018e FFF7FEFF 		bl	printf
 443              	.LVL38:
 265:../Source Files/lpc_i2c_tsc2004.c **** 	printf(LPC_UART0,"\x1b[3;1HMeasure Z1   = %d05",ts.z1);
 444              		.loc 1 265 0
 445 0192 BDF80420 		ldrh	r2, [sp, #4]
 446 0196 2046     		mov	r0, r4
 447 0198 0749     		ldr	r1, .L20+12
 448 019a FFF7FEFF 		bl	printf
 449              	.LVL39:
 266:../Source Files/lpc_i2c_tsc2004.c **** 	printf(LPC_UART0,"\x1b[4;1HMeasure Z2   = %d05",ts.z2);
 450              		.loc 1 266 0
 451 019e 2046     		mov	r0, r4
 452 01a0 0649     		ldr	r1, .L20+16
 453 01a2 BDF80620 		ldrh	r2, [sp, #6]
 454 01a6 FFF7FEFF 		bl	printf
 455              	.LVL40:
 267:../Source Files/lpc_i2c_tsc2004.c **** }
 456              		.loc 1 267 0
 457 01aa 1CBD     		pop	{r2, r3, r4, pc}
 458              	.L21:
 459              		.align	2
 460              	.L20:
 461 01ac 00C00040 		.word	1073790976
 462 01b0 00000000 		.word	.LC0
 463 01b4 1A000000 		.word	.LC1
 464 01b8 34000000 		.word	.LC2
 465 01bc 4E000000 		.word	.LC3
 466              		.cfi_endproc
 467              	.LFE61:
 469              		.align	1
 470              		.global	TSC2004_Draw_Test
 471              		.thumb
 472              		.thumb_func
 474              	TSC2004_Draw_Test:
 475              	.LFB62:
 268:../Source Files/lpc_i2c_tsc2004.c **** 
 269:../Source Files/lpc_i2c_tsc2004.c **** 
 270:../Source Files/lpc_i2c_tsc2004.c **** /*********************************************************************//**
 271:../Source Files/lpc_i2c_tsc2004.c ****  * @brief	    Read Touchscreen and PutPixel accordingly
 272:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]	None
 273:../Source Files/lpc_i2c_tsc2004.c ****  * @return 		None
 274:../Source Files/lpc_i2c_tsc2004.c ****  **********************************************************************/
 275:../Source Files/lpc_i2c_tsc2004.c **** void TSC2004_Draw_Test (void)
 276:../Source Files/lpc_i2c_tsc2004.c **** {
 476              		.loc 1 276 0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 8
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480 01c0 07B5     		push	{r0, r1, r2, lr}
 481              	.LCFI10:
 482              		.cfi_def_cfa_offset 16
 483              		.cfi_offset 0, -16
 484              		.cfi_offset 1, -12
 485              		.cfi_offset 2, -8
 486              		.cfi_offset 14, -4
 277:../Source Files/lpc_i2c_tsc2004.c **** 	ts_event ts;
 278:../Source Files/lpc_i2c_tsc2004.c **** 
 279:../Source Files/lpc_i2c_tsc2004.c **** 	TSC2004_Read_Values (&ts);
 487              		.loc 1 279 0
 488 01c2 6846     		mov	r0, sp
 489 01c4 FFF7FEFF 		bl	TSC2004_Read_Values
 490              	.LVL41:
 280:../Source Files/lpc_i2c_tsc2004.c **** 	GLCD_PutPixel (((ts.x)/11)-24,((ts.y)/13)-36,Black);
 491              		.loc 1 280 0
 492 01c8 BDF80000 		ldrh	r0, [sp, #0]
 493 01cc 0B23     		movs	r3, #11
 494 01ce BDF80210 		ldrh	r1, [sp, #2]
 495 01d2 B0FBF3F2 		udiv	r2, r0, r3
 496 01d6 0D20     		movs	r0, #13
 497 01d8 B1FBF0F3 		udiv	r3, r1, r0
 498 01dc 183A     		subs	r2, r2, #24
 499 01de 243B     		subs	r3, r3, #36
 500 01e0 90B2     		uxth	r0, r2
 501 01e2 99B2     		uxth	r1, r3
 502 01e4 0022     		movs	r2, #0
 503 01e6 FFF7FEFF 		bl	GLCD_PutPixel
 504              	.LVL42:
 281:../Source Files/lpc_i2c_tsc2004.c **** }
 505              		.loc 1 281 0
 506 01ea 0EBD     		pop	{r1, r2, r3, pc}
 507              		.cfi_endproc
 508              	.LFE62:
 510              		.align	1
 511              		.global	TSC2004_SuccessiveRead
 512              		.thumb
 513              		.thumb_func
 515              	TSC2004_SuccessiveRead:
 516              	.LFB63:
 282:../Source Files/lpc_i2c_tsc2004.c **** 
 283:../Source Files/lpc_i2c_tsc2004.c **** /*********************************************************************//**
 284:../Source Files/lpc_i2c_tsc2004.c ****  * @brief	    This function updates filtered touch value
 285:../Source Files/lpc_i2c_tsc2004.c ****  * @param[in]	count	pass the successive count value
 286:../Source Files/lpc_i2c_tsc2004.c ****  * @return 		None
 287:../Source Files/lpc_i2c_tsc2004.c ****  **********************************************************************/
 288:../Source Files/lpc_i2c_tsc2004.c **** void TSC2004_SuccessiveRead (uint8_t count)
 289:../Source Files/lpc_i2c_tsc2004.c **** {
 517              		.loc 1 289 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              	.LVL43:
 522 01ec 10B5     		push	{r4, lr}
 523              	.LCFI11:
 524              		.cfi_def_cfa_offset 8
 525              		.cfi_offset 4, -8
 526              		.cfi_offset 14, -4
 290:../Source Files/lpc_i2c_tsc2004.c **** 	uint16_t good_state = 0;
 291:../Source Files/lpc_i2c_tsc2004.c **** 	uint16_t adc_state = 0;
 527              		.loc 1 291 0
 528 01ee 0022     		movs	r2, #0
 290:../Source Files/lpc_i2c_tsc2004.c **** 	uint16_t good_state = 0;
 529              		.loc 1 290 0
 530 01f0 1346     		mov	r3, r2
 531              	.LVL44:
 532              	.L31:
 292:../Source Files/lpc_i2c_tsc2004.c ****     uint16_t temp;
 293:../Source Files/lpc_i2c_tsc2004.c **** 
 294:../Source Files/lpc_i2c_tsc2004.c **** 	while (good_state<count)          // while less that 3 good samples
 533              		.loc 1 294 0 discriminator 1
 534 01f2 8342     		cmp	r3, r0
 535 01f4 15D2     		bcs	.L33
 536              	.L27:
 295:../Source Files/lpc_i2c_tsc2004.c **** 	{
 296:../Source Files/lpc_i2c_tsc2004.c **** 		if(TReady == TRUE)
 537              		.loc 1 296 0
 538 01f6 0B4C     		ldr	r4, .L34
 539 01f8 2178     		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 540 01fa 0129     		cmp	r1, #1
 541 01fc F9D1     		bne	.L31
 297:../Source Files/lpc_i2c_tsc2004.c **** 		{
 298:../Source Files/lpc_i2c_tsc2004.c **** 			temp = gTouch.x;
 542              		.loc 1 298 0
 543 01fe 0A49     		ldr	r1, .L34+4
 544 0200 0988     		ldrh	r1, [r1, #0]
 545 0202 89B2     		uxth	r1, r1
 546              	.LVL45:
 299:../Source Files/lpc_i2c_tsc2004.c **** 			if (adc_state == temp)
 547              		.loc 1 299 0
 548 0204 8A42     		cmp	r2, r1
 549 0206 4FF00002 		mov	r2, #0
 550              	.LVL46:
 551 020a 02D1     		bne	.L28
 300:../Source Files/lpc_i2c_tsc2004.c **** 			{
 301:../Source Files/lpc_i2c_tsc2004.c **** 				good_state++;
 552              		.loc 1 301 0
 553 020c 0133     		adds	r3, r3, #1
 554              	.LVL47:
 555 020e 9BB2     		uxth	r3, r3
 556              	.LVL48:
 557 0210 00E0     		b	.L26
 558              	.L28:
 302:../Source Files/lpc_i2c_tsc2004.c **** 			}
 303:../Source Files/lpc_i2c_tsc2004.c **** 			else
 304:../Source Files/lpc_i2c_tsc2004.c **** 			{
 305:../Source Files/lpc_i2c_tsc2004.c **** 				good_state = 0;
 559              		.loc 1 305 0
 560 0212 1346     		mov	r3, r2
 561              	.LVL49:
 562              	.L26:
 306:../Source Files/lpc_i2c_tsc2004.c **** 			}
 307:../Source Files/lpc_i2c_tsc2004.c **** 
 308:../Source Files/lpc_i2c_tsc2004.c **** 			adc_state = temp;
 309:../Source Files/lpc_i2c_tsc2004.c **** 			TReady=FALSE;
 563              		.loc 1 309 0
 564 0214 2270     		strb	r2, [r4, #0]
 565              	.LVL50:
 566              	.LBB4:
 567              	.LBB5:
 568              		.file 2 "../CM3 Core/core_cm3.h"
   1:../CM3 Core/core_cm3.h **** /**************************************************************************//**
   2:../CM3 Core/core_cm3.h ****  * @file     core_cm3.h
   3:../CM3 Core/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CM3 Core/core_cm3.h ****  * @version  V2.01
   5:../CM3 Core/core_cm3.h ****  * @date     06. December 2010
   6:../CM3 Core/core_cm3.h ****  *
   7:../CM3 Core/core_cm3.h ****  * @note
   8:../CM3 Core/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:../CM3 Core/core_cm3.h ****  *
  10:../CM3 Core/core_cm3.h ****  * @par
  11:../CM3 Core/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../CM3 Core/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../CM3 Core/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:../CM3 Core/core_cm3.h ****  *
  15:../CM3 Core/core_cm3.h ****  * @par
  16:../CM3 Core/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../CM3 Core/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../CM3 Core/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../CM3 Core/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../CM3 Core/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../CM3 Core/core_cm3.h ****  *
  22:../CM3 Core/core_cm3.h ****  ******************************************************************************/
  23:../CM3 Core/core_cm3.h **** #if defined ( __ICCARM__ )
  24:../CM3 Core/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:../CM3 Core/core_cm3.h **** #endif
  26:../CM3 Core/core_cm3.h **** 
  27:../CM3 Core/core_cm3.h **** #ifdef __cplusplus
  28:../CM3 Core/core_cm3.h ****  extern "C" {
  29:../CM3 Core/core_cm3.h **** #endif
  30:../CM3 Core/core_cm3.h **** 
  31:../CM3 Core/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:../CM3 Core/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:../CM3 Core/core_cm3.h **** 
  34:../CM3 Core/core_cm3.h **** 
  35:../CM3 Core/core_cm3.h **** /*******************************************************************************
  36:../CM3 Core/core_cm3.h ****  *                 CMSIS definitions
  37:../CM3 Core/core_cm3.h ****  ******************************************************************************/
  38:../CM3 Core/core_cm3.h **** /** @ingroup  CMSIS
  39:../CM3 Core/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  40:../CM3 Core/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  41:../CM3 Core/core_cm3.h ****    - CMSIS version number
  42:../CM3 Core/core_cm3.h ****    - Cortex-M core
  43:../CM3 Core/core_cm3.h ****    - Cortex-M core Revision Number
  44:../CM3 Core/core_cm3.h ****   @{
  45:../CM3 Core/core_cm3.h ****  */
  46:../CM3 Core/core_cm3.h **** 
  47:../CM3 Core/core_cm3.h **** /*  CMSIS CM3 definitions */
  48:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  49:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  50:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  51:../CM3 Core/core_cm3.h **** 
  52:../CM3 Core/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  53:../CM3 Core/core_cm3.h **** 
  54:../CM3 Core/core_cm3.h **** 
  55:../CM3 Core/core_cm3.h **** #if defined ( __CC_ARM   )
  56:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  57:../CM3 Core/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  58:../CM3 Core/core_cm3.h **** 
  59:../CM3 Core/core_cm3.h **** #elif defined ( __ICCARM__ )
  60:../CM3 Core/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  61:../CM3 Core/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  62:../CM3 Core/core_cm3.h **** 
  63:../CM3 Core/core_cm3.h **** #elif defined   (  __GNUC__  )
  64:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  65:../CM3 Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  66:../CM3 Core/core_cm3.h **** 
  67:../CM3 Core/core_cm3.h **** #elif defined   (  __TASKING__  )
  68:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  69:../CM3 Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  70:../CM3 Core/core_cm3.h **** 
  71:../CM3 Core/core_cm3.h **** #endif
  72:../CM3 Core/core_cm3.h **** 
  73:../CM3 Core/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  74:../CM3 Core/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  75:../CM3 Core/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  76:../CM3 Core/core_cm3.h **** 
  77:../CM3 Core/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  78:../CM3 Core/core_cm3.h **** 
  79:../CM3 Core/core_cm3.h **** 
  80:../CM3 Core/core_cm3.h **** #ifndef __CMSIS_GENERIC
  81:../CM3 Core/core_cm3.h **** 
  82:../CM3 Core/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  83:../CM3 Core/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  84:../CM3 Core/core_cm3.h **** 
  85:../CM3 Core/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  86:../CM3 Core/core_cm3.h **** #ifdef __cplusplus
  87:../CM3 Core/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  88:../CM3 Core/core_cm3.h **** #else
  89:../CM3 Core/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  90:../CM3 Core/core_cm3.h **** #endif
  91:../CM3 Core/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
  92:../CM3 Core/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
  93:../CM3 Core/core_cm3.h **** 
  94:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
  95:../CM3 Core/core_cm3.h **** 
  96:../CM3 Core/core_cm3.h **** 
  97:../CM3 Core/core_cm3.h **** 
  98:../CM3 Core/core_cm3.h **** /*******************************************************************************
  99:../CM3 Core/core_cm3.h ****  *                 Register Abstraction
 100:../CM3 Core/core_cm3.h ****  ******************************************************************************/
 101:../CM3 Core/core_cm3.h **** 
 102:../CM3 Core/core_cm3.h **** /** @ingroup  CMSIS
 103:../CM3 Core/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 104:../CM3 Core/core_cm3.h ****   Core Register contain:
 105:../CM3 Core/core_cm3.h ****   - Core Register
 106:../CM3 Core/core_cm3.h ****   - Core NVIC Register
 107:../CM3 Core/core_cm3.h ****   - Core SCB Register
 108:../CM3 Core/core_cm3.h ****   - Core SysTick Register
 109:../CM3 Core/core_cm3.h ****   - Core Debug Register
 110:../CM3 Core/core_cm3.h ****   - Core MPU Register
 111:../CM3 Core/core_cm3.h **** */
 112:../CM3 Core/core_cm3.h **** 
 113:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 114:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 115:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 116:../CM3 Core/core_cm3.h ****   @{
 117:../CM3 Core/core_cm3.h ****  */
 118:../CM3 Core/core_cm3.h **** 
 119:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 120:../CM3 Core/core_cm3.h ****  */
 121:../CM3 Core/core_cm3.h **** typedef union
 122:../CM3 Core/core_cm3.h **** {
 123:../CM3 Core/core_cm3.h ****   struct
 124:../CM3 Core/core_cm3.h ****   {
 125:../CM3 Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 126:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 127:../CM3 Core/core_cm3.h **** #else
 128:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 129:../CM3 Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 130:../CM3 Core/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 131:../CM3 Core/core_cm3.h **** #endif
 132:../CM3 Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 133:../CM3 Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 134:../CM3 Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 135:../CM3 Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 136:../CM3 Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 137:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 138:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 139:../CM3 Core/core_cm3.h **** } APSR_Type;
 140:../CM3 Core/core_cm3.h **** 
 141:../CM3 Core/core_cm3.h **** 
 142:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 143:../CM3 Core/core_cm3.h ****  */
 144:../CM3 Core/core_cm3.h **** typedef union
 145:../CM3 Core/core_cm3.h **** {
 146:../CM3 Core/core_cm3.h ****   struct
 147:../CM3 Core/core_cm3.h ****   {
 148:../CM3 Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 149:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 150:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 151:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 152:../CM3 Core/core_cm3.h **** } IPSR_Type;
 153:../CM3 Core/core_cm3.h **** 
 154:../CM3 Core/core_cm3.h **** 
 155:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 156:../CM3 Core/core_cm3.h ****  */
 157:../CM3 Core/core_cm3.h **** typedef union
 158:../CM3 Core/core_cm3.h **** {
 159:../CM3 Core/core_cm3.h ****   struct
 160:../CM3 Core/core_cm3.h ****   {
 161:../CM3 Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 162:../CM3 Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 163:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 164:../CM3 Core/core_cm3.h **** #else
 165:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 166:../CM3 Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 167:../CM3 Core/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 168:../CM3 Core/core_cm3.h **** #endif
 169:../CM3 Core/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 170:../CM3 Core/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 171:../CM3 Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 172:../CM3 Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 173:../CM3 Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 174:../CM3 Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 175:../CM3 Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 176:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 177:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 178:../CM3 Core/core_cm3.h **** } xPSR_Type;
 179:../CM3 Core/core_cm3.h **** 
 180:../CM3 Core/core_cm3.h **** 
 181:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 182:../CM3 Core/core_cm3.h ****  */
 183:../CM3 Core/core_cm3.h **** typedef union
 184:../CM3 Core/core_cm3.h **** {
 185:../CM3 Core/core_cm3.h ****   struct
 186:../CM3 Core/core_cm3.h ****   {
 187:../CM3 Core/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 188:../CM3 Core/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 189:../CM3 Core/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 190:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 191:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 192:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 193:../CM3 Core/core_cm3.h **** } CONTROL_Type;
 194:../CM3 Core/core_cm3.h **** 
 195:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_CORE */
 196:../CM3 Core/core_cm3.h **** 
 197:../CM3 Core/core_cm3.h **** 
 198:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 199:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 200:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 201:../CM3 Core/core_cm3.h ****   @{
 202:../CM3 Core/core_cm3.h ****  */
 203:../CM3 Core/core_cm3.h **** 
 204:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 205:../CM3 Core/core_cm3.h ****  */
 206:../CM3 Core/core_cm3.h **** typedef struct
 207:../CM3 Core/core_cm3.h **** {
 208:../CM3 Core/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 209:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0[24];
 210:../CM3 Core/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 211:../CM3 Core/core_cm3.h ****        uint32_t RSERVED1[24];
 212:../CM3 Core/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 213:../CM3 Core/core_cm3.h ****        uint32_t RESERVED2[24];
 214:../CM3 Core/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 215:../CM3 Core/core_cm3.h ****        uint32_t RESERVED3[24];
 216:../CM3 Core/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 217:../CM3 Core/core_cm3.h ****        uint32_t RESERVED4[56];
 218:../CM3 Core/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 219:../CM3 Core/core_cm3.h ****        uint32_t RESERVED5[644];
 220:../CM3 Core/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 221:../CM3 Core/core_cm3.h **** }  NVIC_Type;
 222:../CM3 Core/core_cm3.h **** 
 223:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 224:../CM3 Core/core_cm3.h **** 
 225:../CM3 Core/core_cm3.h **** 
 226:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 227:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 228:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 229:../CM3 Core/core_cm3.h ****   @{
 230:../CM3 Core/core_cm3.h ****  */
 231:../CM3 Core/core_cm3.h **** 
 232:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 233:../CM3 Core/core_cm3.h ****  */
 234:../CM3 Core/core_cm3.h **** typedef struct
 235:../CM3 Core/core_cm3.h **** {
 236:../CM3 Core/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 237:../CM3 Core/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 238:../CM3 Core/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 239:../CM3 Core/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 240:../CM3 Core/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 241:../CM3 Core/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 242:../CM3 Core/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 243:../CM3 Core/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 244:../CM3 Core/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 245:../CM3 Core/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 246:../CM3 Core/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 247:../CM3 Core/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 248:../CM3 Core/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 249:../CM3 Core/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 250:../CM3 Core/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 251:../CM3 Core/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 252:../CM3 Core/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 253:../CM3 Core/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 254:../CM3 Core/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 255:../CM3 Core/core_cm3.h **** } SCB_Type;
 256:../CM3 Core/core_cm3.h **** 
 257:../CM3 Core/core_cm3.h **** /* SCB CPUID Register Definitions */
 258:../CM3 Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 259:../CM3 Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 260:../CM3 Core/core_cm3.h **** 
 261:../CM3 Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 262:../CM3 Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 263:../CM3 Core/core_cm3.h **** 
 264:../CM3 Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 265:../CM3 Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 266:../CM3 Core/core_cm3.h **** 
 267:../CM3 Core/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 268:../CM3 Core/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 269:../CM3 Core/core_cm3.h **** 
 270:../CM3 Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 271:../CM3 Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 272:../CM3 Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 273:../CM3 Core/core_cm3.h **** 
 274:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 275:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 276:../CM3 Core/core_cm3.h **** 
 277:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 278:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 279:../CM3 Core/core_cm3.h **** 
 280:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 281:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 282:../CM3 Core/core_cm3.h **** 
 283:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 284:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 285:../CM3 Core/core_cm3.h **** 
 286:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 287:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 288:../CM3 Core/core_cm3.h **** 
 289:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 290:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 291:../CM3 Core/core_cm3.h **** 
 292:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 293:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 294:../CM3 Core/core_cm3.h **** 
 295:../CM3 Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 296:../CM3 Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 297:../CM3 Core/core_cm3.h **** 
 298:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 299:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 300:../CM3 Core/core_cm3.h **** 
 301:../CM3 Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 302:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 303:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 304:../CM3 Core/core_cm3.h **** 
 305:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 306:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 307:../CM3 Core/core_cm3.h **** 
 308:../CM3 Core/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 309:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 310:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 311:../CM3 Core/core_cm3.h **** 
 312:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 313:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 314:../CM3 Core/core_cm3.h **** 
 315:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 316:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 317:../CM3 Core/core_cm3.h **** 
 318:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 319:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 320:../CM3 Core/core_cm3.h **** 
 321:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 322:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 323:../CM3 Core/core_cm3.h **** 
 324:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 325:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 326:../CM3 Core/core_cm3.h **** 
 327:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 328:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 329:../CM3 Core/core_cm3.h **** 
 330:../CM3 Core/core_cm3.h **** /* SCB System Control Register Definitions */
 331:../CM3 Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 332:../CM3 Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 333:../CM3 Core/core_cm3.h **** 
 334:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 335:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 336:../CM3 Core/core_cm3.h **** 
 337:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 338:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 339:../CM3 Core/core_cm3.h **** 
 340:../CM3 Core/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 341:../CM3 Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 342:../CM3 Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 343:../CM3 Core/core_cm3.h **** 
 344:../CM3 Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 345:../CM3 Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 346:../CM3 Core/core_cm3.h **** 
 347:../CM3 Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 348:../CM3 Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 349:../CM3 Core/core_cm3.h **** 
 350:../CM3 Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 351:../CM3 Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 352:../CM3 Core/core_cm3.h **** 
 353:../CM3 Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 354:../CM3 Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 355:../CM3 Core/core_cm3.h **** 
 356:../CM3 Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 357:../CM3 Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 358:../CM3 Core/core_cm3.h **** 
 359:../CM3 Core/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 360:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 361:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 362:../CM3 Core/core_cm3.h **** 
 363:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 364:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 365:../CM3 Core/core_cm3.h **** 
 366:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 367:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 368:../CM3 Core/core_cm3.h **** 
 369:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 370:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 371:../CM3 Core/core_cm3.h **** 
 372:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 373:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 374:../CM3 Core/core_cm3.h **** 
 375:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 376:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 377:../CM3 Core/core_cm3.h **** 
 378:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 379:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 380:../CM3 Core/core_cm3.h **** 
 381:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 382:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 383:../CM3 Core/core_cm3.h **** 
 384:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 385:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 386:../CM3 Core/core_cm3.h **** 
 387:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 388:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 389:../CM3 Core/core_cm3.h **** 
 390:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 391:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 392:../CM3 Core/core_cm3.h **** 
 393:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 394:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 395:../CM3 Core/core_cm3.h **** 
 396:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 397:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 398:../CM3 Core/core_cm3.h **** 
 399:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 400:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 401:../CM3 Core/core_cm3.h **** 
 402:../CM3 Core/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 403:../CM3 Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 404:../CM3 Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 405:../CM3 Core/core_cm3.h **** 
 406:../CM3 Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 407:../CM3 Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 408:../CM3 Core/core_cm3.h **** 
 409:../CM3 Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 410:../CM3 Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 411:../CM3 Core/core_cm3.h **** 
 412:../CM3 Core/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 413:../CM3 Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 414:../CM3 Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 415:../CM3 Core/core_cm3.h **** 
 416:../CM3 Core/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 417:../CM3 Core/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 418:../CM3 Core/core_cm3.h **** 
 419:../CM3 Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 420:../CM3 Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 421:../CM3 Core/core_cm3.h **** 
 422:../CM3 Core/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 423:../CM3 Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 424:../CM3 Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 425:../CM3 Core/core_cm3.h **** 
 426:../CM3 Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 427:../CM3 Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 428:../CM3 Core/core_cm3.h **** 
 429:../CM3 Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 430:../CM3 Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 431:../CM3 Core/core_cm3.h **** 
 432:../CM3 Core/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 433:../CM3 Core/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 434:../CM3 Core/core_cm3.h **** 
 435:../CM3 Core/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 436:../CM3 Core/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 437:../CM3 Core/core_cm3.h **** 
 438:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_SCB */
 439:../CM3 Core/core_cm3.h **** 
 440:../CM3 Core/core_cm3.h **** 
 441:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 442:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 443:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 444:../CM3 Core/core_cm3.h ****   @{
 445:../CM3 Core/core_cm3.h ****  */
 446:../CM3 Core/core_cm3.h **** 
 447:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 448:../CM3 Core/core_cm3.h ****  */
 449:../CM3 Core/core_cm3.h **** typedef struct
 450:../CM3 Core/core_cm3.h **** {
 451:../CM3 Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 452:../CM3 Core/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 453:../CM3 Core/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 454:../CM3 Core/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 455:../CM3 Core/core_cm3.h **** } SysTick_Type;
 456:../CM3 Core/core_cm3.h **** 
 457:../CM3 Core/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 458:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 459:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 460:../CM3 Core/core_cm3.h **** 
 461:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 462:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 463:../CM3 Core/core_cm3.h **** 
 464:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 465:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 466:../CM3 Core/core_cm3.h **** 
 467:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 468:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 469:../CM3 Core/core_cm3.h **** 
 470:../CM3 Core/core_cm3.h **** /* SysTick Reload Register Definitions */
 471:../CM3 Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 472:../CM3 Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 473:../CM3 Core/core_cm3.h **** 
 474:../CM3 Core/core_cm3.h **** /* SysTick Current Register Definitions */
 475:../CM3 Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 476:../CM3 Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 477:../CM3 Core/core_cm3.h **** 
 478:../CM3 Core/core_cm3.h **** /* SysTick Calibration Register Definitions */
 479:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 480:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 481:../CM3 Core/core_cm3.h **** 
 482:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 483:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 484:../CM3 Core/core_cm3.h **** 
 485:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 486:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 487:../CM3 Core/core_cm3.h **** 
 488:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 489:../CM3 Core/core_cm3.h **** 
 490:../CM3 Core/core_cm3.h **** 
 491:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 492:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 493:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 494:../CM3 Core/core_cm3.h ****   @{
 495:../CM3 Core/core_cm3.h ****  */
 496:../CM3 Core/core_cm3.h **** 
 497:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 498:../CM3 Core/core_cm3.h ****  */
 499:../CM3 Core/core_cm3.h **** typedef struct
 500:../CM3 Core/core_cm3.h **** {
 501:../CM3 Core/core_cm3.h ****   __O  union
 502:../CM3 Core/core_cm3.h ****   {
 503:../CM3 Core/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 504:../CM3 Core/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 505:../CM3 Core/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 506:../CM3 Core/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 507:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0[864];
 508:../CM3 Core/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 509:../CM3 Core/core_cm3.h ****        uint32_t RESERVED1[15];
 510:../CM3 Core/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 511:../CM3 Core/core_cm3.h ****        uint32_t RESERVED2[15];
 512:../CM3 Core/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 513:../CM3 Core/core_cm3.h ****        uint32_t RESERVED3[29];
 514:../CM3 Core/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 515:../CM3 Core/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 516:../CM3 Core/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 517:../CM3 Core/core_cm3.h ****        uint32_t RESERVED4[43];
 518:../CM3 Core/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 519:../CM3 Core/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 520:../CM3 Core/core_cm3.h ****        uint32_t RESERVED5[6];
 521:../CM3 Core/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 522:../CM3 Core/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 523:../CM3 Core/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 524:../CM3 Core/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 525:../CM3 Core/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 526:../CM3 Core/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 527:../CM3 Core/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 528:../CM3 Core/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 529:../CM3 Core/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 530:../CM3 Core/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 531:../CM3 Core/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 532:../CM3 Core/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 533:../CM3 Core/core_cm3.h **** } ITM_Type;
 534:../CM3 Core/core_cm3.h **** 
 535:../CM3 Core/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 536:../CM3 Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 537:../CM3 Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 538:../CM3 Core/core_cm3.h **** 
 539:../CM3 Core/core_cm3.h **** /* ITM Trace Control Register Definitions */
 540:../CM3 Core/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 541:../CM3 Core/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 542:../CM3 Core/core_cm3.h **** 
 543:../CM3 Core/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 544:../CM3 Core/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 545:../CM3 Core/core_cm3.h **** 
 546:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 547:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 548:../CM3 Core/core_cm3.h **** 
 549:../CM3 Core/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 550:../CM3 Core/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 551:../CM3 Core/core_cm3.h **** 
 552:../CM3 Core/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 553:../CM3 Core/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 554:../CM3 Core/core_cm3.h **** 
 555:../CM3 Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 556:../CM3 Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 557:../CM3 Core/core_cm3.h **** 
 558:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 559:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 560:../CM3 Core/core_cm3.h **** 
 561:../CM3 Core/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 562:../CM3 Core/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 563:../CM3 Core/core_cm3.h **** 
 564:../CM3 Core/core_cm3.h **** /* ITM Integration Write Register Definitions */
 565:../CM3 Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 566:../CM3 Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 567:../CM3 Core/core_cm3.h **** 
 568:../CM3 Core/core_cm3.h **** /* ITM Integration Read Register Definitions */
 569:../CM3 Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 570:../CM3 Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 571:../CM3 Core/core_cm3.h **** 
 572:../CM3 Core/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 573:../CM3 Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 574:../CM3 Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 575:../CM3 Core/core_cm3.h **** 
 576:../CM3 Core/core_cm3.h **** /* ITM Lock Status Register Definitions */
 577:../CM3 Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 578:../CM3 Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 579:../CM3 Core/core_cm3.h **** 
 580:../CM3 Core/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 581:../CM3 Core/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 582:../CM3 Core/core_cm3.h **** 
 583:../CM3 Core/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 584:../CM3 Core/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 585:../CM3 Core/core_cm3.h **** 
 586:../CM3 Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 587:../CM3 Core/core_cm3.h **** 
 588:../CM3 Core/core_cm3.h **** 
 589:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 590:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 591:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 592:../CM3 Core/core_cm3.h ****   @{
 593:../CM3 Core/core_cm3.h ****  */
 594:../CM3 Core/core_cm3.h **** 
 595:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 596:../CM3 Core/core_cm3.h ****  */
 597:../CM3 Core/core_cm3.h **** typedef struct
 598:../CM3 Core/core_cm3.h **** {
 599:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0;
 600:../CM3 Core/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 601:../CM3 Core/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 602:../CM3 Core/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 603:../CM3 Core/core_cm3.h **** #else
 604:../CM3 Core/core_cm3.h ****        uint32_t RESERVED1;
 605:../CM3 Core/core_cm3.h **** #endif
 606:../CM3 Core/core_cm3.h **** } InterruptType_Type;
 607:../CM3 Core/core_cm3.h **** 
 608:../CM3 Core/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 609:../CM3 Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 610:../CM3 Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 611:../CM3 Core/core_cm3.h **** 
 612:../CM3 Core/core_cm3.h **** /* Auxiliary Control Register Definitions */
 613:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 614:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 615:../CM3 Core/core_cm3.h **** 
 616:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 617:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 618:../CM3 Core/core_cm3.h **** 
 619:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 620:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 621:../CM3 Core/core_cm3.h **** 
 622:../CM3 Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 623:../CM3 Core/core_cm3.h **** 
 624:../CM3 Core/core_cm3.h **** 
 625:../CM3 Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 626:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 627:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 628:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 629:../CM3 Core/core_cm3.h ****   @{
 630:../CM3 Core/core_cm3.h ****  */
 631:../CM3 Core/core_cm3.h **** 
 632:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 633:../CM3 Core/core_cm3.h ****  */
 634:../CM3 Core/core_cm3.h **** typedef struct
 635:../CM3 Core/core_cm3.h **** {
 636:../CM3 Core/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 637:../CM3 Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 638:../CM3 Core/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 639:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 640:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 641:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 642:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 643:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 644:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 645:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 646:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 647:../CM3 Core/core_cm3.h **** } MPU_Type;
 648:../CM3 Core/core_cm3.h **** 
 649:../CM3 Core/core_cm3.h **** /* MPU Type Register */
 650:../CM3 Core/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 651:../CM3 Core/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 652:../CM3 Core/core_cm3.h **** 
 653:../CM3 Core/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 654:../CM3 Core/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 655:../CM3 Core/core_cm3.h **** 
 656:../CM3 Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 657:../CM3 Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 658:../CM3 Core/core_cm3.h **** 
 659:../CM3 Core/core_cm3.h **** /* MPU Control Register */
 660:../CM3 Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 661:../CM3 Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 662:../CM3 Core/core_cm3.h **** 
 663:../CM3 Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 664:../CM3 Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 665:../CM3 Core/core_cm3.h **** 
 666:../CM3 Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 667:../CM3 Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 668:../CM3 Core/core_cm3.h **** 
 669:../CM3 Core/core_cm3.h **** /* MPU Region Number Register */
 670:../CM3 Core/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 671:../CM3 Core/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 672:../CM3 Core/core_cm3.h **** 
 673:../CM3 Core/core_cm3.h **** /* MPU Region Base Address Register */
 674:../CM3 Core/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 675:../CM3 Core/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 676:../CM3 Core/core_cm3.h **** 
 677:../CM3 Core/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 678:../CM3 Core/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 679:../CM3 Core/core_cm3.h **** 
 680:../CM3 Core/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 681:../CM3 Core/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 682:../CM3 Core/core_cm3.h **** 
 683:../CM3 Core/core_cm3.h **** /* MPU Region Attribute and Size Register */
 684:../CM3 Core/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 685:../CM3 Core/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 686:../CM3 Core/core_cm3.h **** 
 687:../CM3 Core/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 688:../CM3 Core/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 689:../CM3 Core/core_cm3.h **** 
 690:../CM3 Core/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 691:../CM3 Core/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 692:../CM3 Core/core_cm3.h **** 
 693:../CM3 Core/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 694:../CM3 Core/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 695:../CM3 Core/core_cm3.h **** 
 696:../CM3 Core/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 697:../CM3 Core/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 698:../CM3 Core/core_cm3.h **** 
 699:../CM3 Core/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 700:../CM3 Core/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 701:../CM3 Core/core_cm3.h **** 
 702:../CM3 Core/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 703:../CM3 Core/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 704:../CM3 Core/core_cm3.h **** 
 705:../CM3 Core/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 706:../CM3 Core/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 707:../CM3 Core/core_cm3.h **** 
 708:../CM3 Core/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 709:../CM3 Core/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 710:../CM3 Core/core_cm3.h **** 
 711:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_MPU */
 712:../CM3 Core/core_cm3.h **** #endif
 713:../CM3 Core/core_cm3.h **** 
 714:../CM3 Core/core_cm3.h **** 
 715:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 716:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 717:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 718:../CM3 Core/core_cm3.h ****   @{
 719:../CM3 Core/core_cm3.h ****  */
 720:../CM3 Core/core_cm3.h **** 
 721:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 722:../CM3 Core/core_cm3.h ****  */
 723:../CM3 Core/core_cm3.h **** typedef struct
 724:../CM3 Core/core_cm3.h **** {
 725:../CM3 Core/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 726:../CM3 Core/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 727:../CM3 Core/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 728:../CM3 Core/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 729:../CM3 Core/core_cm3.h **** } CoreDebug_Type;
 730:../CM3 Core/core_cm3.h **** 
 731:../CM3 Core/core_cm3.h **** /* Debug Halting Control and Status Register */
 732:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 733:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 734:../CM3 Core/core_cm3.h **** 
 735:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 736:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 737:../CM3 Core/core_cm3.h **** 
 738:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 739:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 740:../CM3 Core/core_cm3.h **** 
 741:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 742:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 743:../CM3 Core/core_cm3.h **** 
 744:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 745:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 746:../CM3 Core/core_cm3.h **** 
 747:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 748:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 749:../CM3 Core/core_cm3.h **** 
 750:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 751:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 752:../CM3 Core/core_cm3.h **** 
 753:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 754:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 755:../CM3 Core/core_cm3.h **** 
 756:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 757:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 758:../CM3 Core/core_cm3.h **** 
 759:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 760:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 761:../CM3 Core/core_cm3.h **** 
 762:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 763:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 764:../CM3 Core/core_cm3.h **** 
 765:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 766:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 767:../CM3 Core/core_cm3.h **** 
 768:../CM3 Core/core_cm3.h **** /* Debug Core Register Selector Register */
 769:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 770:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 771:../CM3 Core/core_cm3.h **** 
 772:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 773:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 774:../CM3 Core/core_cm3.h **** 
 775:../CM3 Core/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 776:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 777:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 778:../CM3 Core/core_cm3.h **** 
 779:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 780:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 781:../CM3 Core/core_cm3.h **** 
 782:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 783:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 784:../CM3 Core/core_cm3.h **** 
 785:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 786:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 787:../CM3 Core/core_cm3.h **** 
 788:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 789:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 790:../CM3 Core/core_cm3.h **** 
 791:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 792:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 793:../CM3 Core/core_cm3.h **** 
 794:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 795:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 796:../CM3 Core/core_cm3.h **** 
 797:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 798:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 799:../CM3 Core/core_cm3.h **** 
 800:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 801:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 802:../CM3 Core/core_cm3.h **** 
 803:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 804:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 805:../CM3 Core/core_cm3.h **** 
 806:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 807:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 808:../CM3 Core/core_cm3.h **** 
 809:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 810:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 811:../CM3 Core/core_cm3.h **** 
 812:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 813:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 814:../CM3 Core/core_cm3.h **** 
 815:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 816:../CM3 Core/core_cm3.h **** 
 817:../CM3 Core/core_cm3.h **** 
 818:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 819:../CM3 Core/core_cm3.h ****   @{
 820:../CM3 Core/core_cm3.h ****  */
 821:../CM3 Core/core_cm3.h **** 
 822:../CM3 Core/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 823:../CM3 Core/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 824:../CM3 Core/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 825:../CM3 Core/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 826:../CM3 Core/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 827:../CM3 Core/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 828:../CM3 Core/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 829:../CM3 Core/core_cm3.h **** 
 830:../CM3 Core/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 831:../CM3 Core/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 832:../CM3 Core/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 833:../CM3 Core/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 834:../CM3 Core/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 835:../CM3 Core/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 836:../CM3 Core/core_cm3.h **** 
 837:../CM3 Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 838:../CM3 Core/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 839:../CM3 Core/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 840:../CM3 Core/core_cm3.h **** #endif
 841:../CM3 Core/core_cm3.h **** 
 842:../CM3 Core/core_cm3.h **** /*@} */
 843:../CM3 Core/core_cm3.h **** 
 844:../CM3 Core/core_cm3.h **** 
 845:../CM3 Core/core_cm3.h **** 
 846:../CM3 Core/core_cm3.h **** /*******************************************************************************
 847:../CM3 Core/core_cm3.h ****  *                Hardware Abstraction Layer
 848:../CM3 Core/core_cm3.h ****  ******************************************************************************/
 849:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS
 850:../CM3 Core/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 851:../CM3 Core/core_cm3.h ****   Core Function Interface contains:
 852:../CM3 Core/core_cm3.h ****   - Core NVIC Functions
 853:../CM3 Core/core_cm3.h ****   - Core SysTick Functions
 854:../CM3 Core/core_cm3.h ****   - Core Debug Functions
 855:../CM3 Core/core_cm3.h ****   - Core Register Access Functions
 856:../CM3 Core/core_cm3.h **** */
 857:../CM3 Core/core_cm3.h **** 
 858:../CM3 Core/core_cm3.h **** 
 859:../CM3 Core/core_cm3.h **** 
 860:../CM3 Core/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 861:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 862:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 863:../CM3 Core/core_cm3.h ****   @{
 864:../CM3 Core/core_cm3.h ****  */
 865:../CM3 Core/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 866:../CM3 Core/core_cm3.h ****  * @{
 867:../CM3 Core/core_cm3.h ****  */
 868:../CM3 Core/core_cm3.h **** /** \brief  Set Priority Grouping
 869:../CM3 Core/core_cm3.h **** 
 870:../CM3 Core/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 871:../CM3 Core/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 872:../CM3 Core/core_cm3.h ****   Only values from 0..7 are used.
 873:../CM3 Core/core_cm3.h ****   In case of a conflict between priority grouping and available
 874:../CM3 Core/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 875:../CM3 Core/core_cm3.h **** 
 876:../CM3 Core/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 877:../CM3 Core/core_cm3.h ****  */
 878:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 879:../CM3 Core/core_cm3.h **** {
 880:../CM3 Core/core_cm3.h ****   uint32_t reg_value;
 881:../CM3 Core/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 882:../CM3 Core/core_cm3.h **** 
 883:../CM3 Core/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 884:../CM3 Core/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 885:../CM3 Core/core_cm3.h ****   reg_value  =  (reg_value                       |
 886:../CM3 Core/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 887:../CM3 Core/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 888:../CM3 Core/core_cm3.h ****   SCB->AIRCR =  reg_value;
 889:../CM3 Core/core_cm3.h **** }
 890:../CM3 Core/core_cm3.h **** 
 891:../CM3 Core/core_cm3.h **** 
 892:../CM3 Core/core_cm3.h **** /** \brief  Get Priority Grouping
 893:../CM3 Core/core_cm3.h **** 
 894:../CM3 Core/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 895:../CM3 Core/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 896:../CM3 Core/core_cm3.h **** 
 897:../CM3 Core/core_cm3.h ****     \return                Priority grouping field
 898:../CM3 Core/core_cm3.h ****  */
 899:../CM3 Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 900:../CM3 Core/core_cm3.h **** {
 901:../CM3 Core/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 902:../CM3 Core/core_cm3.h **** }
 903:../CM3 Core/core_cm3.h **** 
 904:../CM3 Core/core_cm3.h **** 
 905:../CM3 Core/core_cm3.h **** /** \brief  Enable External Interrupt
 906:../CM3 Core/core_cm3.h **** 
 907:../CM3 Core/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 908:../CM3 Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 909:../CM3 Core/core_cm3.h **** 
 910:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 911:../CM3 Core/core_cm3.h ****  */
 912:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 913:../CM3 Core/core_cm3.h **** {
 914:../CM3 Core/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 569              		.loc 2 914 0
 570 0216 054A     		ldr	r2, .L34+8
 571 0218 4FF40014 		mov	r4, #2097152
 572 021c 1460     		str	r4, [r2, #0]
 308:../Source Files/lpc_i2c_tsc2004.c **** 			adc_state = temp;
 573              		.loc 1 308 0
 574 021e 0A46     		mov	r2, r1
 575 0220 E7E7     		b	.L31
 576              	.LVL51:
 577              	.L33:
 578              	.LBE5:
 579              	.LBE4:
 310:../Source Files/lpc_i2c_tsc2004.c **** 			NVIC_EnableIRQ(EINT3_IRQn);
 311:../Source Files/lpc_i2c_tsc2004.c **** 		}
 312:../Source Files/lpc_i2c_tsc2004.c **** 	}
 313:../Source Files/lpc_i2c_tsc2004.c **** }
 580              		.loc 1 313 0
 581 0222 10BD     		pop	{r4, pc}
 582              	.L35:
 583              		.align	2
 584              	.L34:
 585 0224 00000000 		.word	TReady
 586 0228 00000000 		.word	gTouch
 587 022c 00E100E0 		.word	-536813312
 588              		.cfi_endproc
 589              	.LFE63:
 591              		.comm	I2C_Rx_Buf,64,1
 592              		.comm	I2C_Tx_Buf,64,1
 593              		.comm	Rx_Buf1,64,1
 594              		.comm	Tx_Buf1,64,1
 595              		.comm	TxIntStat,1,1
 596              		.comm	rb,528,4
 597              		.comm	EscFlag,2,2
 598              		.section	.rodata.str1.1,"aMS",%progbits,1
 599              	.LC0:
 600 0000 1B5B313B 		.ascii	"\033[1;1HMeasure X    = %d05\000"
 600      31484D65 
 600      61737572 
 600      65205820 
 600      2020203D 
 601              	.LC1:
 602 001a 1B5B323B 		.ascii	"\033[2;1HMeasure Y    = %d05\000"
 602      31484D65 
 602      61737572 
 602      65205920 
 602      2020203D 
 603              	.LC2:
 604 0034 1B5B333B 		.ascii	"\033[3;1HMeasure Z1   = %d05\000"
 604      31484D65 
 604      61737572 
 604      65205A31 
 604      2020203D 
 605              	.LC3:
 606 004e 1B5B343B 		.ascii	"\033[4;1HMeasure Z2   = %d05\000"
 606      31484D65 
 606      61737572 
 606      65205A32 
 606      2020203D 
 607              		.text
 608              	.Letext0:
 609              		.file 3 "../CM3 Core/LPC17xx.h"
 610              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q2\\bin\\../lib/gcc/arm-none-eab
 611              		.file 5 "../Header Files/lpc_types.h"
 612              		.file 6 "../Header Files/lpc17xx_uart.h"
 613              		.file 7 "../Header Files/lpc17xx_i2c.h"
 614              		.file 8 "../Header Files/lpc_glcd_cal.h"
 615              		.file 9 "../Header Files/lpc_i2c_tsc2004.h"
 616              		.file 10 "../Header Files/lpc17xx_ssp.h"
 617              		.file 11 "../Header Files/lpc_ssp_glcd.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lpc_i2c_tsc2004.c
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:18     .text:00000000 $t
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:23     .text:00000000 I2C_TSC2004_Write_Byte
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:79     .text:00000034 $d
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:83     .text:00000038 $t
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:88     .text:00000038 I2C_TSC2004_Write_Word
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:149    .text:0000006c $d
                            *COM*:00000040 I2C_Tx_Buf
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:154    .text:00000074 $t
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:159    .text:00000074 TSC2004_Init
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:200    .text:0000009a I2C_TSC2004_Read_Word
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:270    .text:000000e0 $d
                            *COM*:00000040 I2C_Rx_Buf
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:275    .text:000000e8 $t
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:280    .text:000000e8 TSC2004_Read_Reg
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:324    .text:0000010a TSC2004_Read_Values
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:413    .text:00000170 TSC2004_Read_Value_Test
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:461    .text:000001ac $d
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:469    .text:000001c0 $t
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:474    .text:000001c0 TSC2004_Draw_Test
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:515    .text:000001ec TSC2004_SuccessiveRead
C:\Users\raghav\AppData\Local\Temp\ccIiCLEK.s:585    .text:00000224 $d
                            *COM*:00000040 Rx_Buf1
                            *COM*:00000040 Tx_Buf1
                            *COM*:00000001 TxIntStat
                            *COM*:00000210 rb
                            *COM*:00000002 EscFlag
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.549b84bf9d8399e395ff8216fcbb3d69
                           .group:00000000 wm4.LPC17xx.h.27.964facdaadd4aa3f18ac78c8a78f0013
                           .group:00000000 wm4.core_cm3.h.32.3cac756d6e704b813781f82afd94fa5f
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.6beb15babd14c076008ec0890c26e21c
                           .group:00000000 wm4.core_cm3.h.83.1a3cb9afc687cf157efeddb3d5f3109e
                           .group:00000000 wm4.LPC17xx.h.953.82b7a9ed60bb594048bc8738cf1d3489
                           .group:00000000 wm4.lpc_types.h.32.72d58ce80fabd1a5430c6ec0500a090b
                           .group:00000000 wm4.lpc17xx_pinsel.h.30.a409f0915fca7a8098ca15e74d04c6ac
                           .group:00000000 wm4.lpc17xx_clkpwr.h.30.6ad069e5d9b902121622749a19395ff4
                           .group:00000000 wm4.lpc17xx_systick.h.30.7f7cf149327de2371fcd7cf3bab706fa
                           .group:00000000 wm4.lpc17xx_gpio.h.48.9d83a3048c670bed300498c0197398d5
                           .group:00000000 wm4.lpc17xx_wdt.h.34.296310ddc7a3401128b2f3fbf623c41d
                           .group:00000000 wm4.stdarg.h.31.b70f21342353634f7b44d85f85f13832
                           .group:00000000 wm4.lpc17xx_uart.h.58.dbba6e724b29a6214e9cafbaf3ee8a9e
                           .group:00000000 wm4.lpc17xx_ssp.h.30.0044e2529a5d42d08a2a972d3b2d05a0
                           .group:00000000 wm4.lpc17xx_i2c.h.30.5385a26dc571b1c3d3e5836541d3d739
                           .group:00000000 wm4.lpc_ssp_glcd.h.29.38ee0123d5c21a15788fa9a253ffdebc
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.cc9264b0ced3bd063c5784e64e89cf51
                           .group:00000000 wm4.lpc_glcd_cal.h.36.07281023d52dd7883e5e4c8a890cf1a4
                           .group:00000000 wm4.lpc_i2c_tsc2004.h.45.96f87b0fb348f924f0326aa4137404cc

UNDEFINED SYMBOLS
I2C_MasterTransferData
printf
GLCD_PutPixel
TReady
gTouch
