   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"lpc17xx_gpio.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	1
  19              		.global	EINT3_IRQHandler
  20              		.thumb
  21              		.thumb_func
  23              	EINT3_IRQHandler:
  24              	.LFB55:
  25              		.file 1 "../Source Files/lpc17xx_gpio.c"
   1:../Source Files/lpc17xx_gpio.c **** /**********************************************************************
   2:../Source Files/lpc17xx_gpio.c **** * $Id$		lpc17xx_gpio.c
   3:../Source Files/lpc17xx_gpio.c **** *//**
   4:../Source Files/lpc17xx_gpio.c **** * @file		lpc17xx_gpio.c
   5:../Source Files/lpc17xx_gpio.c **** * @brief	Contains all functions support for GPIO firmware
   6:../Source Files/lpc17xx_gpio.c **** * 			library on LPC17xx
   7:../Source Files/lpc17xx_gpio.c **** * @version	1.0
   8:../Source Files/lpc17xx_gpio.c **** * @date		24. July. 2013
   9:../Source Files/lpc17xx_gpio.c **** * @author	Dwijay.Edutech Learning Solutions
  10:../Source Files/lpc17xx_gpio.c **** ***********************************************************************
  11:../Source Files/lpc17xx_gpio.c **** * Software that is described herein is for illustrative purposes only
  12:../Source Files/lpc17xx_gpio.c **** * which provides customers with programming information regarding the
  13:../Source Files/lpc17xx_gpio.c **** * products. This software is supplied "AS IS" without any warranties.
  14:../Source Files/lpc17xx_gpio.c **** * NXP Semiconductors assumes no responsibility or liability for the
  15:../Source Files/lpc17xx_gpio.c **** * use of the software, conveys no license or title under any patent,
  16:../Source Files/lpc17xx_gpio.c **** * copyright, or mask work right to the product. NXP Semiconductors
  17:../Source Files/lpc17xx_gpio.c **** * reserves the right to make changes in the software without
  18:../Source Files/lpc17xx_gpio.c **** * notification. NXP Semiconductors also make no representation or
  19:../Source Files/lpc17xx_gpio.c **** * warranty that such application will be suitable for the specified
  20:../Source Files/lpc17xx_gpio.c **** * use without further testing or modification.
  21:../Source Files/lpc17xx_gpio.c **** **********************************************************************/
  22:../Source Files/lpc17xx_gpio.c **** 
  23:../Source Files/lpc17xx_gpio.c **** /* Peripheral group ----------------------------------------------------------- */
  24:../Source Files/lpc17xx_gpio.c **** /** @addtogroup GPIO
  25:../Source Files/lpc17xx_gpio.c ****  * @{
  26:../Source Files/lpc17xx_gpio.c ****  */
  27:../Source Files/lpc17xx_gpio.c **** 
  28:../Source Files/lpc17xx_gpio.c **** /* Includes ------------------------------------------------------------------- */
  29:../Source Files/lpc17xx_gpio.c **** #include "lpc17xx_gpio.h"
  30:../Source Files/lpc17xx_gpio.c **** 
  31:../Source Files/lpc17xx_gpio.c **** 
  32:../Source Files/lpc17xx_gpio.c **** /* Public Functions ----------------------------------------------------------- */
  33:../Source Files/lpc17xx_gpio.c **** /** @addtogroup GPIO_Interrupt_Functions
  34:../Source Files/lpc17xx_gpio.c ****  * @{
  35:../Source Files/lpc17xx_gpio.c ****  */
  36:../Source Files/lpc17xx_gpio.c **** 
  37:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
  38:../Source Files/lpc17xx_gpio.c ****  * @brief		External interrupt 3 handler sub-routine
  39:../Source Files/lpc17xx_gpio.c ****  * @param[in]	None
  40:../Source Files/lpc17xx_gpio.c ****  * @return		None
  41:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
  42:../Source Files/lpc17xx_gpio.c **** void EINT3_IRQHandler(void)
  43:../Source Files/lpc17xx_gpio.c **** {
  26              		.loc 1 43 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31              	.LBB38:
  32              	.LBB39:
  44:../Source Files/lpc17xx_gpio.c **** 	ts_eventCal Touch;
  45:../Source Files/lpc17xx_gpio.c **** 	if(GPIO_GetIntStatus(2, 7, 1)) //Falling Edge
  46:../Source Files/lpc17xx_gpio.c **** 	{
  47:../Source Files/lpc17xx_gpio.c **** 		GPIO_ClearInt(2,_BIT(7));
  48:../Source Files/lpc17xx_gpio.c **** 		if(CalTouch == 0)
  49:../Source Files/lpc17xx_gpio.c **** 		{
  50:../Source Files/lpc17xx_gpio.c **** 			TSC2004_Cal_Values(&Touch, &cmatrix);
  51:../Source Files/lpc17xx_gpio.c **** 			if((Touch.x<=320) && (Touch.y<=240))
  52:../Source Files/lpc17xx_gpio.c **** 			{
  53:../Source Files/lpc17xx_gpio.c **** 				gTouch.x=Touch.x;
  54:../Source Files/lpc17xx_gpio.c **** 				gTouch.y=Touch.y;
  55:../Source Files/lpc17xx_gpio.c **** 			}
  56:../Source Files/lpc17xx_gpio.c **** 			NVIC_DisableIRQ(EINT3_IRQn);
  57:../Source Files/lpc17xx_gpio.c **** 		}
  58:../Source Files/lpc17xx_gpio.c **** 		else if(CalTouch==1)
  59:../Source Files/lpc17xx_gpio.c **** 		{
  60:../Source Files/lpc17xx_gpio.c **** 			TSC2004_Read_Values(&Touch);
  61:../Source Files/lpc17xx_gpio.c **** 			if((Touch.x!=0) && (Touch.y!=0))
  62:../Source Files/lpc17xx_gpio.c **** 			{
  63:../Source Files/lpc17xx_gpio.c **** 				gTouch.x=Touch.x;
  64:../Source Files/lpc17xx_gpio.c **** 				gTouch.y=Touch.y;
  65:../Source Files/lpc17xx_gpio.c **** 			}
  66:../Source Files/lpc17xx_gpio.c **** 		}
  67:../Source Files/lpc17xx_gpio.c **** 		TReady=TRUE;
  68:../Source Files/lpc17xx_gpio.c ****     }
  69:../Source Files/lpc17xx_gpio.c **** }
  70:../Source Files/lpc17xx_gpio.c **** 
  71:../Source Files/lpc17xx_gpio.c ****  /**
  72:../Source Files/lpc17xx_gpio.c ****  * @}
  73:../Source Files/lpc17xx_gpio.c ****  */
  74:../Source Files/lpc17xx_gpio.c **** 
  75:../Source Files/lpc17xx_gpio.c **** /* Private Functions ---------------------------------------------------------- */
  76:../Source Files/lpc17xx_gpio.c **** 
  77:../Source Files/lpc17xx_gpio.c **** static LPC_GPIO_TypeDef *GPIO_GetPointer(uint8_t portNum);
  78:../Source Files/lpc17xx_gpio.c **** static GPIO_HalfWord_TypeDef *FIO_HalfWordGetPointer(uint8_t portNum);
  79:../Source Files/lpc17xx_gpio.c **** static GPIO_Byte_TypeDef *FIO_ByteGetPointer(uint8_t portNum);
  80:../Source Files/lpc17xx_gpio.c **** 
  81:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
  82:../Source Files/lpc17xx_gpio.c ****  * @brief		Get pointer to GPIO peripheral due to GPIO port
  83:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
  84:../Source Files/lpc17xx_gpio.c ****  * @return		Pointer to GPIO peripheral
  85:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
  86:../Source Files/lpc17xx_gpio.c **** static LPC_GPIO_TypeDef *GPIO_GetPointer(uint8_t portNum)
  87:../Source Files/lpc17xx_gpio.c **** {
  88:../Source Files/lpc17xx_gpio.c **** 	LPC_GPIO_TypeDef *pGPIO = NULL;
  89:../Source Files/lpc17xx_gpio.c **** 
  90:../Source Files/lpc17xx_gpio.c **** 	switch (portNum) {
  91:../Source Files/lpc17xx_gpio.c **** 	case 0:
  92:../Source Files/lpc17xx_gpio.c **** 		pGPIO = LPC_GPIO0;
  93:../Source Files/lpc17xx_gpio.c **** 		break;
  94:../Source Files/lpc17xx_gpio.c **** 	case 1:
  95:../Source Files/lpc17xx_gpio.c **** 		pGPIO = LPC_GPIO1;
  96:../Source Files/lpc17xx_gpio.c **** 		break;
  97:../Source Files/lpc17xx_gpio.c **** 	case 2:
  98:../Source Files/lpc17xx_gpio.c **** 		pGPIO = LPC_GPIO2;
  99:../Source Files/lpc17xx_gpio.c **** 		break;
 100:../Source Files/lpc17xx_gpio.c **** 	case 3:
 101:../Source Files/lpc17xx_gpio.c **** 		pGPIO = LPC_GPIO3;
 102:../Source Files/lpc17xx_gpio.c **** 		break;
 103:../Source Files/lpc17xx_gpio.c **** 	case 4:
 104:../Source Files/lpc17xx_gpio.c **** 		pGPIO = LPC_GPIO4;
 105:../Source Files/lpc17xx_gpio.c **** 		break;
 106:../Source Files/lpc17xx_gpio.c **** 	default:
 107:../Source Files/lpc17xx_gpio.c **** 		break;
 108:../Source Files/lpc17xx_gpio.c **** 	}
 109:../Source Files/lpc17xx_gpio.c **** 
 110:../Source Files/lpc17xx_gpio.c **** 	return pGPIO;
 111:../Source Files/lpc17xx_gpio.c **** }
 112:../Source Files/lpc17xx_gpio.c **** 
 113:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 114:../Source Files/lpc17xx_gpio.c ****  * @brief		Get pointer to FIO peripheral in halfword accessible style
 115:../Source Files/lpc17xx_gpio.c ****  * 				due to FIO port
 116:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 117:../Source Files/lpc17xx_gpio.c ****  * @return		Pointer to FIO peripheral
 118:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 119:../Source Files/lpc17xx_gpio.c **** static GPIO_HalfWord_TypeDef *FIO_HalfWordGetPointer(uint8_t portNum)
 120:../Source Files/lpc17xx_gpio.c **** {
 121:../Source Files/lpc17xx_gpio.c **** 	GPIO_HalfWord_TypeDef *pFIO = NULL;
 122:../Source Files/lpc17xx_gpio.c **** 
 123:../Source Files/lpc17xx_gpio.c **** 	switch (portNum) {
 124:../Source Files/lpc17xx_gpio.c **** 	case 0:
 125:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO0_HalfWord;
 126:../Source Files/lpc17xx_gpio.c **** 		break;
 127:../Source Files/lpc17xx_gpio.c **** 	case 1:
 128:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO1_HalfWord;
 129:../Source Files/lpc17xx_gpio.c **** 		break;
 130:../Source Files/lpc17xx_gpio.c **** 	case 2:
 131:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO2_HalfWord;
 132:../Source Files/lpc17xx_gpio.c **** 		break;
 133:../Source Files/lpc17xx_gpio.c **** 	case 3:
 134:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO3_HalfWord;
 135:../Source Files/lpc17xx_gpio.c **** 		break;
 136:../Source Files/lpc17xx_gpio.c **** 	case 4:
 137:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO4_HalfWord;
 138:../Source Files/lpc17xx_gpio.c **** 		break;
 139:../Source Files/lpc17xx_gpio.c **** 	default:
 140:../Source Files/lpc17xx_gpio.c **** 		break;
 141:../Source Files/lpc17xx_gpio.c **** 	}
 142:../Source Files/lpc17xx_gpio.c **** 
 143:../Source Files/lpc17xx_gpio.c **** 	return pFIO;
 144:../Source Files/lpc17xx_gpio.c **** }
 145:../Source Files/lpc17xx_gpio.c **** 
 146:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 147:../Source Files/lpc17xx_gpio.c ****  * @brief		Get pointer to FIO peripheral in byte accessible style
 148:../Source Files/lpc17xx_gpio.c ****  * 				due to FIO port
 149:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 150:../Source Files/lpc17xx_gpio.c ****  * @return		Pointer to FIO peripheral
 151:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 152:../Source Files/lpc17xx_gpio.c **** static GPIO_Byte_TypeDef *FIO_ByteGetPointer(uint8_t portNum)
 153:../Source Files/lpc17xx_gpio.c **** {
 154:../Source Files/lpc17xx_gpio.c **** 	GPIO_Byte_TypeDef *pFIO = NULL;
 155:../Source Files/lpc17xx_gpio.c **** 
 156:../Source Files/lpc17xx_gpio.c **** 	switch (portNum) {
 157:../Source Files/lpc17xx_gpio.c **** 	case 0:
 158:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO0_Byte;
 159:../Source Files/lpc17xx_gpio.c **** 		break;
 160:../Source Files/lpc17xx_gpio.c **** 	case 1:
 161:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO1_Byte;
 162:../Source Files/lpc17xx_gpio.c **** 		break;
 163:../Source Files/lpc17xx_gpio.c **** 	case 2:
 164:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO2_Byte;
 165:../Source Files/lpc17xx_gpio.c **** 		break;
 166:../Source Files/lpc17xx_gpio.c **** 	case 3:
 167:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO3_Byte;
 168:../Source Files/lpc17xx_gpio.c **** 		break;
 169:../Source Files/lpc17xx_gpio.c **** 	case 4:
 170:../Source Files/lpc17xx_gpio.c **** 		pFIO = GPIO4_Byte;
 171:../Source Files/lpc17xx_gpio.c **** 		break;
 172:../Source Files/lpc17xx_gpio.c **** 	default:
 173:../Source Files/lpc17xx_gpio.c **** 		break;
 174:../Source Files/lpc17xx_gpio.c **** 	}
 175:../Source Files/lpc17xx_gpio.c **** 
 176:../Source Files/lpc17xx_gpio.c **** 	return pFIO;
 177:../Source Files/lpc17xx_gpio.c **** }
 178:../Source Files/lpc17xx_gpio.c **** 
 179:../Source Files/lpc17xx_gpio.c **** /* End of Private Functions --------------------------------------------------- */
 180:../Source Files/lpc17xx_gpio.c **** 
 181:../Source Files/lpc17xx_gpio.c **** 
 182:../Source Files/lpc17xx_gpio.c **** /* Public Functions ----------------------------------------------------------- */
 183:../Source Files/lpc17xx_gpio.c **** /** @addtogroup GPIO_Public_Functions
 184:../Source Files/lpc17xx_gpio.c ****  * @{
 185:../Source Files/lpc17xx_gpio.c ****  */
 186:../Source Files/lpc17xx_gpio.c **** 
 187:../Source Files/lpc17xx_gpio.c **** 
 188:../Source Files/lpc17xx_gpio.c **** /* GPIO ------------------------------------------------------------------------------ */
 189:../Source Files/lpc17xx_gpio.c **** 
 190:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 191:../Source Files/lpc17xx_gpio.c ****  * @brief		Set Direction for GPIO port.
 192:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port Number value, should be in range from 0 to 4
 193:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits to set direction,
 194:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFFFFFF.
 195:../Source Files/lpc17xx_gpio.c ****  * 							example: value 0x5 to set direction for bit 0 and bit 1.
 196:../Source Files/lpc17xx_gpio.c ****  * @param[in]	dir			Direction value, should be:
 197:../Source Files/lpc17xx_gpio.c ****  * 							- 0: Input.
 198:../Source Files/lpc17xx_gpio.c ****  * 							- 1: Output.
 199:../Source Files/lpc17xx_gpio.c ****  * @return		None
 200:../Source Files/lpc17xx_gpio.c ****  *
 201:../Source Files/lpc17xx_gpio.c ****  * Note: All remaining bits that are not activated in bitValue (value '0')
 202:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 203:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 204:../Source Files/lpc17xx_gpio.c **** void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
 205:../Source Files/lpc17xx_gpio.c **** {
 206:../Source Files/lpc17xx_gpio.c **** 	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
 207:../Source Files/lpc17xx_gpio.c **** 
 208:../Source Files/lpc17xx_gpio.c **** 	if (pGPIO != NULL) {
 209:../Source Files/lpc17xx_gpio.c **** 		// Enable Output
 210:../Source Files/lpc17xx_gpio.c **** 		if (dir) {
 211:../Source Files/lpc17xx_gpio.c **** 			pGPIO->FIODIR |= bitValue;
 212:../Source Files/lpc17xx_gpio.c **** 		}
 213:../Source Files/lpc17xx_gpio.c **** 		// Enable Input
 214:../Source Files/lpc17xx_gpio.c **** 		else {
 215:../Source Files/lpc17xx_gpio.c **** 			pGPIO->FIODIR &= ~bitValue;
 216:../Source Files/lpc17xx_gpio.c **** 		}
 217:../Source Files/lpc17xx_gpio.c **** 	}
 218:../Source Files/lpc17xx_gpio.c **** }
 219:../Source Files/lpc17xx_gpio.c **** 
 220:../Source Files/lpc17xx_gpio.c **** 
 221:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 222:../Source Files/lpc17xx_gpio.c ****  * @brief		Set Value for bits that have output direction on GPIO port.
 223:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number value, should be in range from 0 to 4
 224:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits on GPIO to set,
 225:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFFFFFF.
 226:../Source Files/lpc17xx_gpio.c ****  * 							example: value 0x5 to set bit 0 and bit 1.
 227:../Source Files/lpc17xx_gpio.c ****  * @return		None
 228:../Source Files/lpc17xx_gpio.c ****  *
 229:../Source Files/lpc17xx_gpio.c ****  * Note:
 230:../Source Files/lpc17xx_gpio.c ****  * - For all bits that has been set as input direction, this function will
 231:../Source Files/lpc17xx_gpio.c ****  * not effect.
 232:../Source Files/lpc17xx_gpio.c ****  * - For all remaining bits that are not activated in bitValue (value '0')
 233:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 234:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 235:../Source Files/lpc17xx_gpio.c **** void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
 236:../Source Files/lpc17xx_gpio.c **** {
 237:../Source Files/lpc17xx_gpio.c **** 	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
 238:../Source Files/lpc17xx_gpio.c **** 
 239:../Source Files/lpc17xx_gpio.c **** 	if (pGPIO != NULL) {
 240:../Source Files/lpc17xx_gpio.c **** 		pGPIO->FIOSET = bitValue;
 241:../Source Files/lpc17xx_gpio.c **** 	}
 242:../Source Files/lpc17xx_gpio.c **** }
 243:../Source Files/lpc17xx_gpio.c **** 
 244:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 245:../Source Files/lpc17xx_gpio.c ****  * @brief		Clear Value for bits that have output direction on GPIO port.
 246:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number value, should be in range from 0 to 4
 247:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits on GPIO to clear,
 248:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFFFFFF.
 249:../Source Files/lpc17xx_gpio.c ****  * 							example: value 0x5 to clear bit 0 and bit 1.
 250:../Source Files/lpc17xx_gpio.c ****  * @return		None
 251:../Source Files/lpc17xx_gpio.c ****  *
 252:../Source Files/lpc17xx_gpio.c ****  * Note:
 253:../Source Files/lpc17xx_gpio.c ****  * - For all bits that has been set as input direction, this function will
 254:../Source Files/lpc17xx_gpio.c ****  * not effect.
 255:../Source Files/lpc17xx_gpio.c ****  * - For all remaining bits that are not activated in bitValue (value '0')
 256:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 257:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 258:../Source Files/lpc17xx_gpio.c **** void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
 259:../Source Files/lpc17xx_gpio.c **** {
 260:../Source Files/lpc17xx_gpio.c **** 	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
 261:../Source Files/lpc17xx_gpio.c **** 
 262:../Source Files/lpc17xx_gpio.c **** 	if (pGPIO != NULL) {
 263:../Source Files/lpc17xx_gpio.c **** 		pGPIO->FIOCLR = bitValue;
 264:../Source Files/lpc17xx_gpio.c **** 	}
 265:../Source Files/lpc17xx_gpio.c **** }
 266:../Source Files/lpc17xx_gpio.c **** 
 267:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 268:../Source Files/lpc17xx_gpio.c ****  * @brief		Read Current state on port pin that have input direction of GPIO
 269:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number to read value, in range from 0 to 4
 270:../Source Files/lpc17xx_gpio.c ****  * @return		Current value of GPIO port.
 271:../Source Files/lpc17xx_gpio.c ****  *
 272:../Source Files/lpc17xx_gpio.c ****  * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 273:../Source Files/lpc17xx_gpio.c ****  * its direction is input or output.
 274:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 275:../Source Files/lpc17xx_gpio.c **** uint32_t GPIO_ReadValue(uint8_t portNum)
 276:../Source Files/lpc17xx_gpio.c **** {
 277:../Source Files/lpc17xx_gpio.c **** 	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
 278:../Source Files/lpc17xx_gpio.c **** 
 279:../Source Files/lpc17xx_gpio.c **** 	if (pGPIO != NULL) {
 280:../Source Files/lpc17xx_gpio.c **** 		return pGPIO->FIOPIN;
 281:../Source Files/lpc17xx_gpio.c **** 	}
 282:../Source Files/lpc17xx_gpio.c **** 
 283:../Source Files/lpc17xx_gpio.c **** 	return (0);
 284:../Source Files/lpc17xx_gpio.c **** }
 285:../Source Files/lpc17xx_gpio.c **** 
 286:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 287:../Source Files/lpc17xx_gpio.c ****  * @brief		Enable GPIO interrupt (just used for P0.0-P0.30, P2.0-P2.13)
 288:../Source Files/lpc17xx_gpio.c ****  *              and P0.12-P0.14 Reserved
 289:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number to read value, should be: 0 or 2
 290:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits on GPIO to enable,
 291:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFFFFFF.
 292:../Source Files/lpc17xx_gpio.c ****  * @param[in]	edgeState	state of edge, should be:
 293:../Source Files/lpc17xx_gpio.c ****  * 							- 0: Rising edge
 294:../Source Files/lpc17xx_gpio.c ****  * 							- 1: Falling edge
 295:../Source Files/lpc17xx_gpio.c ****  * @return		None
 296:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 297:../Source Files/lpc17xx_gpio.c **** void GPIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
 298:../Source Files/lpc17xx_gpio.c **** {
 299:../Source Files/lpc17xx_gpio.c **** 	if((portNum == 0)&&(edgeState == 0))
 300:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO0IntEnR = bitValue;
 301:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2)&&(edgeState == 0))
 302:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO2IntEnR = bitValue;
 303:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 0)&&(edgeState == 1))
 304:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO0IntEnF = bitValue;
 305:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2)&&(edgeState == 1))
 306:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO2IntEnF = bitValue;
 307:../Source Files/lpc17xx_gpio.c **** 	else
 308:../Source Files/lpc17xx_gpio.c **** 		//Error
 309:../Source Files/lpc17xx_gpio.c **** 		while(1);
 310:../Source Files/lpc17xx_gpio.c **** }
 311:../Source Files/lpc17xx_gpio.c **** 
 312:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 313:../Source Files/lpc17xx_gpio.c ****  * @brief		Get GPIO Interrupt Status (just used for P0.0-P0.30, P2.0-P2.13)
 314:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number to read value, should be: 0 or 2
 315:../Source Files/lpc17xx_gpio.c ****  * @param[in]	pinNum		Pin number, should be: 0..30(with port 0) and 0..13
 316:../Source Files/lpc17xx_gpio.c ****  * 							(with port 2)
 317:../Source Files/lpc17xx_gpio.c ****  * @param[in]	edgeState	state of edge, should be:
 318:../Source Files/lpc17xx_gpio.c ****  * 							- 0: Rising edge
 319:../Source Files/lpc17xx_gpio.c ****  * 							- 1: Falling edge
 320:../Source Files/lpc17xx_gpio.c ****  * @return		Bool	could be:
 321:../Source Files/lpc17xx_gpio.c ****  * 						- ENABLE: Interrupt has been generated due to a rising
 322:../Source Files/lpc17xx_gpio.c ****  * 								edge on P0.0
 323:../Source Files/lpc17xx_gpio.c ****  * 						- DISABLE: A rising edge has not been detected on P0.0
 324:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 325:../Source Files/lpc17xx_gpio.c **** FunctionalState GPIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
 326:../Source Files/lpc17xx_gpio.c **** {
 327:../Source Files/lpc17xx_gpio.c **** 	if((portNum == 0) && (edgeState == 0))//Rising Edge
 328:../Source Files/lpc17xx_gpio.c **** 		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatR)>>pinNum)& 0x1));
 329:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2) && (edgeState == 0))
 330:../Source Files/lpc17xx_gpio.c **** 		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
 331:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
 332:../Source Files/lpc17xx_gpio.c **** 		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
 333:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2) && (edgeState == 1))
 334:../Source Files/lpc17xx_gpio.c **** 		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
  33              		.loc 1 334 0
  34 0000 214B     		ldr	r3, .L18
  35              	.LBE39:
  36              	.LBE38:
  43:../Source Files/lpc17xx_gpio.c **** {
  37              		.loc 1 43 0
  38 0002 07B5     		push	{r0, r1, r2, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 16
  41              		.cfi_offset 0, -16
  42              		.cfi_offset 1, -12
  43              		.cfi_offset 2, -8
  44              		.cfi_offset 14, -4
  45              	.LBB41:
  46              	.LBB40:
  47              		.loc 1 334 0
  48 0004 9A6A     		ldr	r2, [r3, #40]
  49              	.LBE40:
  50              	.LBE41:
  45:../Source Files/lpc17xx_gpio.c **** 	if(GPIO_GetIntStatus(2, 7, 1)) //Falling Edge
  51              		.loc 1 45 0
  52 0006 1206     		lsls	r2, r2, #24
  53 0008 3CD5     		bpl	.L1
  54              	.LVL1:
  55              	.LBB42:
  56              	.LBB43:
 335:../Source Files/lpc17xx_gpio.c **** 	else
 336:../Source Files/lpc17xx_gpio.c **** 		//Error
 337:../Source Files/lpc17xx_gpio.c **** 		while(1);
 338:../Source Files/lpc17xx_gpio.c **** }
 339:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 340:../Source Files/lpc17xx_gpio.c ****  * @brief		Clear GPIO interrupt (just used for P0.0-P0.30, P2.0-P2.13)
 341:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number to read value, should be: 0 or 2
 342:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits on GPIO to enable,
 343:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFFFFFF.
 344:../Source Files/lpc17xx_gpio.c ****  * @return		None
 345:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 346:../Source Files/lpc17xx_gpio.c **** void GPIO_ClearInt(uint8_t portNum, uint32_t bitValue)
 347:../Source Files/lpc17xx_gpio.c **** {
 348:../Source Files/lpc17xx_gpio.c **** 	if(portNum == 0)
 349:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO0IntClr = bitValue;
 350:../Source Files/lpc17xx_gpio.c **** 	else if (portNum == 2)
 351:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO2IntClr = bitValue;
  57              		.loc 1 351 0
  58 000a 8020     		movs	r0, #128
  59              	.LBE43:
  60              	.LBE42:
  48:../Source Files/lpc17xx_gpio.c **** 		if(CalTouch == 0)
  61              		.loc 1 48 0
  62 000c 1F49     		ldr	r1, .L18+4
  63              	.LBB45:
  64              	.LBB44:
  65              		.loc 1 351 0
  66 000e D862     		str	r0, [r3, #44]
  67              	.LBE44:
  68              	.LBE45:
  48:../Source Files/lpc17xx_gpio.c **** 		if(CalTouch == 0)
  69              		.loc 1 48 0
  70 0010 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
  71 0012 EBB9     		cbnz	r3, .L3
  50:../Source Files/lpc17xx_gpio.c **** 			TSC2004_Cal_Values(&Touch, &cmatrix);
  72              		.loc 1 50 0
  73 0014 1E49     		ldr	r1, .L18+8
  74 0016 01A8     		add	r0, sp, #4
  75 0018 FFF7FEFF 		bl	TSC2004_Cal_Values
  76              	.LVL2:
  51:../Source Files/lpc17xx_gpio.c **** 			if((Touch.x<=320) && (Touch.y<=240))
  77              		.loc 1 51 0
  78 001c BDF80410 		ldrh	r1, [sp, #4]
  79 0020 8BB2     		uxth	r3, r1
  80 0022 B3F5A07F 		cmp	r3, #320
  81 0026 0DD8     		bhi	.L4
  51:../Source Files/lpc17xx_gpio.c **** 			if((Touch.x<=320) && (Touch.y<=240))
  82              		.loc 1 51 0 is_stmt 0 discriminator 1
  83 0028 BDF80620 		ldrh	r2, [sp, #6]
  84 002c 90B2     		uxth	r0, r2
  85 002e F028     		cmp	r0, #240
  86 0030 08D8     		bhi	.L4
  53:../Source Files/lpc17xx_gpio.c **** 				gTouch.x=Touch.x;
  87              		.loc 1 53 0 is_stmt 1
  88 0032 BDF80410 		ldrh	r1, [sp, #4]
  89 0036 174B     		ldr	r3, .L18+12
  90 0038 8AB2     		uxth	r2, r1
  91 003a 1A80     		strh	r2, [r3, #0]	@ movhi
  54:../Source Files/lpc17xx_gpio.c **** 				gTouch.y=Touch.y;
  92              		.loc 1 54 0
  93 003c BDF80600 		ldrh	r0, [sp, #6]
  94 0040 81B2     		uxth	r1, r0
  95 0042 5980     		strh	r1, [r3, #2]	@ movhi
  96              	.L4:
  97              	.LVL3:
  98              	.LBB46:
  99              	.LBB47:
 100              		.file 2 "../CM3 Core/core_cm3.h"
   1:../CM3 Core/core_cm3.h **** /**************************************************************************//**
   2:../CM3 Core/core_cm3.h ****  * @file     core_cm3.h
   3:../CM3 Core/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CM3 Core/core_cm3.h ****  * @version  V2.01
   5:../CM3 Core/core_cm3.h ****  * @date     06. December 2010
   6:../CM3 Core/core_cm3.h ****  *
   7:../CM3 Core/core_cm3.h ****  * @note
   8:../CM3 Core/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:../CM3 Core/core_cm3.h ****  *
  10:../CM3 Core/core_cm3.h ****  * @par
  11:../CM3 Core/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../CM3 Core/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../CM3 Core/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:../CM3 Core/core_cm3.h ****  *
  15:../CM3 Core/core_cm3.h ****  * @par
  16:../CM3 Core/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../CM3 Core/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../CM3 Core/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../CM3 Core/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../CM3 Core/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../CM3 Core/core_cm3.h ****  *
  22:../CM3 Core/core_cm3.h ****  ******************************************************************************/
  23:../CM3 Core/core_cm3.h **** #if defined ( __ICCARM__ )
  24:../CM3 Core/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:../CM3 Core/core_cm3.h **** #endif
  26:../CM3 Core/core_cm3.h **** 
  27:../CM3 Core/core_cm3.h **** #ifdef __cplusplus
  28:../CM3 Core/core_cm3.h ****  extern "C" {
  29:../CM3 Core/core_cm3.h **** #endif
  30:../CM3 Core/core_cm3.h **** 
  31:../CM3 Core/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:../CM3 Core/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:../CM3 Core/core_cm3.h **** 
  34:../CM3 Core/core_cm3.h **** 
  35:../CM3 Core/core_cm3.h **** /*******************************************************************************
  36:../CM3 Core/core_cm3.h ****  *                 CMSIS definitions
  37:../CM3 Core/core_cm3.h ****  ******************************************************************************/
  38:../CM3 Core/core_cm3.h **** /** @ingroup  CMSIS
  39:../CM3 Core/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  40:../CM3 Core/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  41:../CM3 Core/core_cm3.h ****    - CMSIS version number
  42:../CM3 Core/core_cm3.h ****    - Cortex-M core
  43:../CM3 Core/core_cm3.h ****    - Cortex-M core Revision Number
  44:../CM3 Core/core_cm3.h ****   @{
  45:../CM3 Core/core_cm3.h ****  */
  46:../CM3 Core/core_cm3.h **** 
  47:../CM3 Core/core_cm3.h **** /*  CMSIS CM3 definitions */
  48:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  49:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  50:../CM3 Core/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  51:../CM3 Core/core_cm3.h **** 
  52:../CM3 Core/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  53:../CM3 Core/core_cm3.h **** 
  54:../CM3 Core/core_cm3.h **** 
  55:../CM3 Core/core_cm3.h **** #if defined ( __CC_ARM   )
  56:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  57:../CM3 Core/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  58:../CM3 Core/core_cm3.h **** 
  59:../CM3 Core/core_cm3.h **** #elif defined ( __ICCARM__ )
  60:../CM3 Core/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  61:../CM3 Core/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  62:../CM3 Core/core_cm3.h **** 
  63:../CM3 Core/core_cm3.h **** #elif defined   (  __GNUC__  )
  64:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  65:../CM3 Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  66:../CM3 Core/core_cm3.h **** 
  67:../CM3 Core/core_cm3.h **** #elif defined   (  __TASKING__  )
  68:../CM3 Core/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  69:../CM3 Core/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  70:../CM3 Core/core_cm3.h **** 
  71:../CM3 Core/core_cm3.h **** #endif
  72:../CM3 Core/core_cm3.h **** 
  73:../CM3 Core/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  74:../CM3 Core/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  75:../CM3 Core/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  76:../CM3 Core/core_cm3.h **** 
  77:../CM3 Core/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  78:../CM3 Core/core_cm3.h **** 
  79:../CM3 Core/core_cm3.h **** 
  80:../CM3 Core/core_cm3.h **** #ifndef __CMSIS_GENERIC
  81:../CM3 Core/core_cm3.h **** 
  82:../CM3 Core/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  83:../CM3 Core/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  84:../CM3 Core/core_cm3.h **** 
  85:../CM3 Core/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  86:../CM3 Core/core_cm3.h **** #ifdef __cplusplus
  87:../CM3 Core/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  88:../CM3 Core/core_cm3.h **** #else
  89:../CM3 Core/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  90:../CM3 Core/core_cm3.h **** #endif
  91:../CM3 Core/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
  92:../CM3 Core/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
  93:../CM3 Core/core_cm3.h **** 
  94:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
  95:../CM3 Core/core_cm3.h **** 
  96:../CM3 Core/core_cm3.h **** 
  97:../CM3 Core/core_cm3.h **** 
  98:../CM3 Core/core_cm3.h **** /*******************************************************************************
  99:../CM3 Core/core_cm3.h ****  *                 Register Abstraction
 100:../CM3 Core/core_cm3.h ****  ******************************************************************************/
 101:../CM3 Core/core_cm3.h **** 
 102:../CM3 Core/core_cm3.h **** /** @ingroup  CMSIS
 103:../CM3 Core/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 104:../CM3 Core/core_cm3.h ****   Core Register contain:
 105:../CM3 Core/core_cm3.h ****   - Core Register
 106:../CM3 Core/core_cm3.h ****   - Core NVIC Register
 107:../CM3 Core/core_cm3.h ****   - Core SCB Register
 108:../CM3 Core/core_cm3.h ****   - Core SysTick Register
 109:../CM3 Core/core_cm3.h ****   - Core Debug Register
 110:../CM3 Core/core_cm3.h ****   - Core MPU Register
 111:../CM3 Core/core_cm3.h **** */
 112:../CM3 Core/core_cm3.h **** 
 113:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 114:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 115:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 116:../CM3 Core/core_cm3.h ****   @{
 117:../CM3 Core/core_cm3.h ****  */
 118:../CM3 Core/core_cm3.h **** 
 119:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 120:../CM3 Core/core_cm3.h ****  */
 121:../CM3 Core/core_cm3.h **** typedef union
 122:../CM3 Core/core_cm3.h **** {
 123:../CM3 Core/core_cm3.h ****   struct
 124:../CM3 Core/core_cm3.h ****   {
 125:../CM3 Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 126:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 127:../CM3 Core/core_cm3.h **** #else
 128:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 129:../CM3 Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 130:../CM3 Core/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 131:../CM3 Core/core_cm3.h **** #endif
 132:../CM3 Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 133:../CM3 Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 134:../CM3 Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 135:../CM3 Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 136:../CM3 Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 137:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 138:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 139:../CM3 Core/core_cm3.h **** } APSR_Type;
 140:../CM3 Core/core_cm3.h **** 
 141:../CM3 Core/core_cm3.h **** 
 142:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 143:../CM3 Core/core_cm3.h ****  */
 144:../CM3 Core/core_cm3.h **** typedef union
 145:../CM3 Core/core_cm3.h **** {
 146:../CM3 Core/core_cm3.h ****   struct
 147:../CM3 Core/core_cm3.h ****   {
 148:../CM3 Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 149:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 150:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 151:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 152:../CM3 Core/core_cm3.h **** } IPSR_Type;
 153:../CM3 Core/core_cm3.h **** 
 154:../CM3 Core/core_cm3.h **** 
 155:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 156:../CM3 Core/core_cm3.h ****  */
 157:../CM3 Core/core_cm3.h **** typedef union
 158:../CM3 Core/core_cm3.h **** {
 159:../CM3 Core/core_cm3.h ****   struct
 160:../CM3 Core/core_cm3.h ****   {
 161:../CM3 Core/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 162:../CM3 Core/core_cm3.h **** #if (__CORTEX_M != 0x04)
 163:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 164:../CM3 Core/core_cm3.h **** #else
 165:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 166:../CM3 Core/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 167:../CM3 Core/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 168:../CM3 Core/core_cm3.h **** #endif
 169:../CM3 Core/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 170:../CM3 Core/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 171:../CM3 Core/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 172:../CM3 Core/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 173:../CM3 Core/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 174:../CM3 Core/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 175:../CM3 Core/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 176:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 177:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 178:../CM3 Core/core_cm3.h **** } xPSR_Type;
 179:../CM3 Core/core_cm3.h **** 
 180:../CM3 Core/core_cm3.h **** 
 181:../CM3 Core/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 182:../CM3 Core/core_cm3.h ****  */
 183:../CM3 Core/core_cm3.h **** typedef union
 184:../CM3 Core/core_cm3.h **** {
 185:../CM3 Core/core_cm3.h ****   struct
 186:../CM3 Core/core_cm3.h ****   {
 187:../CM3 Core/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 188:../CM3 Core/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 189:../CM3 Core/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 190:../CM3 Core/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 191:../CM3 Core/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 192:../CM3 Core/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 193:../CM3 Core/core_cm3.h **** } CONTROL_Type;
 194:../CM3 Core/core_cm3.h **** 
 195:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_CORE */
 196:../CM3 Core/core_cm3.h **** 
 197:../CM3 Core/core_cm3.h **** 
 198:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 199:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 200:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 201:../CM3 Core/core_cm3.h ****   @{
 202:../CM3 Core/core_cm3.h ****  */
 203:../CM3 Core/core_cm3.h **** 
 204:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 205:../CM3 Core/core_cm3.h ****  */
 206:../CM3 Core/core_cm3.h **** typedef struct
 207:../CM3 Core/core_cm3.h **** {
 208:../CM3 Core/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 209:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0[24];
 210:../CM3 Core/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 211:../CM3 Core/core_cm3.h ****        uint32_t RSERVED1[24];
 212:../CM3 Core/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 213:../CM3 Core/core_cm3.h ****        uint32_t RESERVED2[24];
 214:../CM3 Core/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 215:../CM3 Core/core_cm3.h ****        uint32_t RESERVED3[24];
 216:../CM3 Core/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 217:../CM3 Core/core_cm3.h ****        uint32_t RESERVED4[56];
 218:../CM3 Core/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 219:../CM3 Core/core_cm3.h ****        uint32_t RESERVED5[644];
 220:../CM3 Core/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 221:../CM3 Core/core_cm3.h **** }  NVIC_Type;
 222:../CM3 Core/core_cm3.h **** 
 223:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 224:../CM3 Core/core_cm3.h **** 
 225:../CM3 Core/core_cm3.h **** 
 226:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 227:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 228:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 229:../CM3 Core/core_cm3.h ****   @{
 230:../CM3 Core/core_cm3.h ****  */
 231:../CM3 Core/core_cm3.h **** 
 232:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 233:../CM3 Core/core_cm3.h ****  */
 234:../CM3 Core/core_cm3.h **** typedef struct
 235:../CM3 Core/core_cm3.h **** {
 236:../CM3 Core/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 237:../CM3 Core/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 238:../CM3 Core/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 239:../CM3 Core/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 240:../CM3 Core/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 241:../CM3 Core/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 242:../CM3 Core/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 243:../CM3 Core/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 244:../CM3 Core/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 245:../CM3 Core/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 246:../CM3 Core/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 247:../CM3 Core/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 248:../CM3 Core/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 249:../CM3 Core/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 250:../CM3 Core/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 251:../CM3 Core/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 252:../CM3 Core/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 253:../CM3 Core/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 254:../CM3 Core/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 255:../CM3 Core/core_cm3.h **** } SCB_Type;
 256:../CM3 Core/core_cm3.h **** 
 257:../CM3 Core/core_cm3.h **** /* SCB CPUID Register Definitions */
 258:../CM3 Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 259:../CM3 Core/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 260:../CM3 Core/core_cm3.h **** 
 261:../CM3 Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 262:../CM3 Core/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 263:../CM3 Core/core_cm3.h **** 
 264:../CM3 Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 265:../CM3 Core/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 266:../CM3 Core/core_cm3.h **** 
 267:../CM3 Core/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 268:../CM3 Core/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 269:../CM3 Core/core_cm3.h **** 
 270:../CM3 Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 271:../CM3 Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 272:../CM3 Core/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 273:../CM3 Core/core_cm3.h **** 
 274:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 275:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 276:../CM3 Core/core_cm3.h **** 
 277:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 278:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 279:../CM3 Core/core_cm3.h **** 
 280:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 281:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 282:../CM3 Core/core_cm3.h **** 
 283:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 284:../CM3 Core/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 285:../CM3 Core/core_cm3.h **** 
 286:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 287:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 288:../CM3 Core/core_cm3.h **** 
 289:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 290:../CM3 Core/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 291:../CM3 Core/core_cm3.h **** 
 292:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 293:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 294:../CM3 Core/core_cm3.h **** 
 295:../CM3 Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 296:../CM3 Core/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 297:../CM3 Core/core_cm3.h **** 
 298:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 299:../CM3 Core/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 300:../CM3 Core/core_cm3.h **** 
 301:../CM3 Core/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 302:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 303:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 304:../CM3 Core/core_cm3.h **** 
 305:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 306:../CM3 Core/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 307:../CM3 Core/core_cm3.h **** 
 308:../CM3 Core/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 309:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 310:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 311:../CM3 Core/core_cm3.h **** 
 312:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 313:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 314:../CM3 Core/core_cm3.h **** 
 315:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 316:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 317:../CM3 Core/core_cm3.h **** 
 318:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 319:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 320:../CM3 Core/core_cm3.h **** 
 321:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 322:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 323:../CM3 Core/core_cm3.h **** 
 324:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 325:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 326:../CM3 Core/core_cm3.h **** 
 327:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 328:../CM3 Core/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 329:../CM3 Core/core_cm3.h **** 
 330:../CM3 Core/core_cm3.h **** /* SCB System Control Register Definitions */
 331:../CM3 Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 332:../CM3 Core/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 333:../CM3 Core/core_cm3.h **** 
 334:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 335:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 336:../CM3 Core/core_cm3.h **** 
 337:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 338:../CM3 Core/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 339:../CM3 Core/core_cm3.h **** 
 340:../CM3 Core/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 341:../CM3 Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 342:../CM3 Core/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 343:../CM3 Core/core_cm3.h **** 
 344:../CM3 Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 345:../CM3 Core/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 346:../CM3 Core/core_cm3.h **** 
 347:../CM3 Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 348:../CM3 Core/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 349:../CM3 Core/core_cm3.h **** 
 350:../CM3 Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 351:../CM3 Core/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 352:../CM3 Core/core_cm3.h **** 
 353:../CM3 Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 354:../CM3 Core/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 355:../CM3 Core/core_cm3.h **** 
 356:../CM3 Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 357:../CM3 Core/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 358:../CM3 Core/core_cm3.h **** 
 359:../CM3 Core/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 360:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 361:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 362:../CM3 Core/core_cm3.h **** 
 363:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 364:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 365:../CM3 Core/core_cm3.h **** 
 366:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 367:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 368:../CM3 Core/core_cm3.h **** 
 369:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 370:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 371:../CM3 Core/core_cm3.h **** 
 372:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 373:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 374:../CM3 Core/core_cm3.h **** 
 375:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 376:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 377:../CM3 Core/core_cm3.h **** 
 378:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 379:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 380:../CM3 Core/core_cm3.h **** 
 381:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 382:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 383:../CM3 Core/core_cm3.h **** 
 384:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 385:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 386:../CM3 Core/core_cm3.h **** 
 387:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 388:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 389:../CM3 Core/core_cm3.h **** 
 390:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 391:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 392:../CM3 Core/core_cm3.h **** 
 393:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 394:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 395:../CM3 Core/core_cm3.h **** 
 396:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 397:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 398:../CM3 Core/core_cm3.h **** 
 399:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 400:../CM3 Core/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 401:../CM3 Core/core_cm3.h **** 
 402:../CM3 Core/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 403:../CM3 Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 404:../CM3 Core/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 405:../CM3 Core/core_cm3.h **** 
 406:../CM3 Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 407:../CM3 Core/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 408:../CM3 Core/core_cm3.h **** 
 409:../CM3 Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 410:../CM3 Core/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 411:../CM3 Core/core_cm3.h **** 
 412:../CM3 Core/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 413:../CM3 Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 414:../CM3 Core/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 415:../CM3 Core/core_cm3.h **** 
 416:../CM3 Core/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 417:../CM3 Core/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 418:../CM3 Core/core_cm3.h **** 
 419:../CM3 Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 420:../CM3 Core/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 421:../CM3 Core/core_cm3.h **** 
 422:../CM3 Core/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 423:../CM3 Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 424:../CM3 Core/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 425:../CM3 Core/core_cm3.h **** 
 426:../CM3 Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 427:../CM3 Core/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 428:../CM3 Core/core_cm3.h **** 
 429:../CM3 Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 430:../CM3 Core/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 431:../CM3 Core/core_cm3.h **** 
 432:../CM3 Core/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 433:../CM3 Core/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 434:../CM3 Core/core_cm3.h **** 
 435:../CM3 Core/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 436:../CM3 Core/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 437:../CM3 Core/core_cm3.h **** 
 438:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_SCB */
 439:../CM3 Core/core_cm3.h **** 
 440:../CM3 Core/core_cm3.h **** 
 441:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 442:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 443:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 444:../CM3 Core/core_cm3.h ****   @{
 445:../CM3 Core/core_cm3.h ****  */
 446:../CM3 Core/core_cm3.h **** 
 447:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 448:../CM3 Core/core_cm3.h ****  */
 449:../CM3 Core/core_cm3.h **** typedef struct
 450:../CM3 Core/core_cm3.h **** {
 451:../CM3 Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 452:../CM3 Core/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 453:../CM3 Core/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 454:../CM3 Core/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 455:../CM3 Core/core_cm3.h **** } SysTick_Type;
 456:../CM3 Core/core_cm3.h **** 
 457:../CM3 Core/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 458:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 459:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 460:../CM3 Core/core_cm3.h **** 
 461:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 462:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 463:../CM3 Core/core_cm3.h **** 
 464:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 465:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 466:../CM3 Core/core_cm3.h **** 
 467:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 468:../CM3 Core/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 469:../CM3 Core/core_cm3.h **** 
 470:../CM3 Core/core_cm3.h **** /* SysTick Reload Register Definitions */
 471:../CM3 Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 472:../CM3 Core/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 473:../CM3 Core/core_cm3.h **** 
 474:../CM3 Core/core_cm3.h **** /* SysTick Current Register Definitions */
 475:../CM3 Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 476:../CM3 Core/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 477:../CM3 Core/core_cm3.h **** 
 478:../CM3 Core/core_cm3.h **** /* SysTick Calibration Register Definitions */
 479:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 480:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 481:../CM3 Core/core_cm3.h **** 
 482:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 483:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 484:../CM3 Core/core_cm3.h **** 
 485:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 486:../CM3 Core/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 487:../CM3 Core/core_cm3.h **** 
 488:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 489:../CM3 Core/core_cm3.h **** 
 490:../CM3 Core/core_cm3.h **** 
 491:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 492:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 493:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 494:../CM3 Core/core_cm3.h ****   @{
 495:../CM3 Core/core_cm3.h ****  */
 496:../CM3 Core/core_cm3.h **** 
 497:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 498:../CM3 Core/core_cm3.h ****  */
 499:../CM3 Core/core_cm3.h **** typedef struct
 500:../CM3 Core/core_cm3.h **** {
 501:../CM3 Core/core_cm3.h ****   __O  union
 502:../CM3 Core/core_cm3.h ****   {
 503:../CM3 Core/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 504:../CM3 Core/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 505:../CM3 Core/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 506:../CM3 Core/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 507:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0[864];
 508:../CM3 Core/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 509:../CM3 Core/core_cm3.h ****        uint32_t RESERVED1[15];
 510:../CM3 Core/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 511:../CM3 Core/core_cm3.h ****        uint32_t RESERVED2[15];
 512:../CM3 Core/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 513:../CM3 Core/core_cm3.h ****        uint32_t RESERVED3[29];
 514:../CM3 Core/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 515:../CM3 Core/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 516:../CM3 Core/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 517:../CM3 Core/core_cm3.h ****        uint32_t RESERVED4[43];
 518:../CM3 Core/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 519:../CM3 Core/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 520:../CM3 Core/core_cm3.h ****        uint32_t RESERVED5[6];
 521:../CM3 Core/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 522:../CM3 Core/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 523:../CM3 Core/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 524:../CM3 Core/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 525:../CM3 Core/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 526:../CM3 Core/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 527:../CM3 Core/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 528:../CM3 Core/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 529:../CM3 Core/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 530:../CM3 Core/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 531:../CM3 Core/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 532:../CM3 Core/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 533:../CM3 Core/core_cm3.h **** } ITM_Type;
 534:../CM3 Core/core_cm3.h **** 
 535:../CM3 Core/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 536:../CM3 Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 537:../CM3 Core/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 538:../CM3 Core/core_cm3.h **** 
 539:../CM3 Core/core_cm3.h **** /* ITM Trace Control Register Definitions */
 540:../CM3 Core/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 541:../CM3 Core/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 542:../CM3 Core/core_cm3.h **** 
 543:../CM3 Core/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 544:../CM3 Core/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 545:../CM3 Core/core_cm3.h **** 
 546:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 547:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 548:../CM3 Core/core_cm3.h **** 
 549:../CM3 Core/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 550:../CM3 Core/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 551:../CM3 Core/core_cm3.h **** 
 552:../CM3 Core/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 553:../CM3 Core/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 554:../CM3 Core/core_cm3.h **** 
 555:../CM3 Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 556:../CM3 Core/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 557:../CM3 Core/core_cm3.h **** 
 558:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 559:../CM3 Core/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 560:../CM3 Core/core_cm3.h **** 
 561:../CM3 Core/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 562:../CM3 Core/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 563:../CM3 Core/core_cm3.h **** 
 564:../CM3 Core/core_cm3.h **** /* ITM Integration Write Register Definitions */
 565:../CM3 Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 566:../CM3 Core/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 567:../CM3 Core/core_cm3.h **** 
 568:../CM3 Core/core_cm3.h **** /* ITM Integration Read Register Definitions */
 569:../CM3 Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 570:../CM3 Core/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 571:../CM3 Core/core_cm3.h **** 
 572:../CM3 Core/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 573:../CM3 Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 574:../CM3 Core/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 575:../CM3 Core/core_cm3.h **** 
 576:../CM3 Core/core_cm3.h **** /* ITM Lock Status Register Definitions */
 577:../CM3 Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 578:../CM3 Core/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 579:../CM3 Core/core_cm3.h **** 
 580:../CM3 Core/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 581:../CM3 Core/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 582:../CM3 Core/core_cm3.h **** 
 583:../CM3 Core/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 584:../CM3 Core/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 585:../CM3 Core/core_cm3.h **** 
 586:../CM3 Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 587:../CM3 Core/core_cm3.h **** 
 588:../CM3 Core/core_cm3.h **** 
 589:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 590:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 591:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 592:../CM3 Core/core_cm3.h ****   @{
 593:../CM3 Core/core_cm3.h ****  */
 594:../CM3 Core/core_cm3.h **** 
 595:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 596:../CM3 Core/core_cm3.h ****  */
 597:../CM3 Core/core_cm3.h **** typedef struct
 598:../CM3 Core/core_cm3.h **** {
 599:../CM3 Core/core_cm3.h ****        uint32_t RESERVED0;
 600:../CM3 Core/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 601:../CM3 Core/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 602:../CM3 Core/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 603:../CM3 Core/core_cm3.h **** #else
 604:../CM3 Core/core_cm3.h ****        uint32_t RESERVED1;
 605:../CM3 Core/core_cm3.h **** #endif
 606:../CM3 Core/core_cm3.h **** } InterruptType_Type;
 607:../CM3 Core/core_cm3.h **** 
 608:../CM3 Core/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 609:../CM3 Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 610:../CM3 Core/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 611:../CM3 Core/core_cm3.h **** 
 612:../CM3 Core/core_cm3.h **** /* Auxiliary Control Register Definitions */
 613:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 614:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 615:../CM3 Core/core_cm3.h **** 
 616:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 617:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 618:../CM3 Core/core_cm3.h **** 
 619:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 620:../CM3 Core/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 621:../CM3 Core/core_cm3.h **** 
 622:../CM3 Core/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 623:../CM3 Core/core_cm3.h **** 
 624:../CM3 Core/core_cm3.h **** 
 625:../CM3 Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 626:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 627:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 628:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 629:../CM3 Core/core_cm3.h ****   @{
 630:../CM3 Core/core_cm3.h ****  */
 631:../CM3 Core/core_cm3.h **** 
 632:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 633:../CM3 Core/core_cm3.h ****  */
 634:../CM3 Core/core_cm3.h **** typedef struct
 635:../CM3 Core/core_cm3.h **** {
 636:../CM3 Core/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 637:../CM3 Core/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 638:../CM3 Core/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 639:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 640:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 641:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 642:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 643:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 644:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 645:../CM3 Core/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 646:../CM3 Core/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 647:../CM3 Core/core_cm3.h **** } MPU_Type;
 648:../CM3 Core/core_cm3.h **** 
 649:../CM3 Core/core_cm3.h **** /* MPU Type Register */
 650:../CM3 Core/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 651:../CM3 Core/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 652:../CM3 Core/core_cm3.h **** 
 653:../CM3 Core/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 654:../CM3 Core/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 655:../CM3 Core/core_cm3.h **** 
 656:../CM3 Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 657:../CM3 Core/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 658:../CM3 Core/core_cm3.h **** 
 659:../CM3 Core/core_cm3.h **** /* MPU Control Register */
 660:../CM3 Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 661:../CM3 Core/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 662:../CM3 Core/core_cm3.h **** 
 663:../CM3 Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 664:../CM3 Core/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 665:../CM3 Core/core_cm3.h **** 
 666:../CM3 Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 667:../CM3 Core/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 668:../CM3 Core/core_cm3.h **** 
 669:../CM3 Core/core_cm3.h **** /* MPU Region Number Register */
 670:../CM3 Core/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 671:../CM3 Core/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 672:../CM3 Core/core_cm3.h **** 
 673:../CM3 Core/core_cm3.h **** /* MPU Region Base Address Register */
 674:../CM3 Core/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 675:../CM3 Core/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 676:../CM3 Core/core_cm3.h **** 
 677:../CM3 Core/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 678:../CM3 Core/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 679:../CM3 Core/core_cm3.h **** 
 680:../CM3 Core/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 681:../CM3 Core/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 682:../CM3 Core/core_cm3.h **** 
 683:../CM3 Core/core_cm3.h **** /* MPU Region Attribute and Size Register */
 684:../CM3 Core/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 685:../CM3 Core/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 686:../CM3 Core/core_cm3.h **** 
 687:../CM3 Core/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 688:../CM3 Core/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 689:../CM3 Core/core_cm3.h **** 
 690:../CM3 Core/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 691:../CM3 Core/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 692:../CM3 Core/core_cm3.h **** 
 693:../CM3 Core/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 694:../CM3 Core/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 695:../CM3 Core/core_cm3.h **** 
 696:../CM3 Core/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 697:../CM3 Core/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 698:../CM3 Core/core_cm3.h **** 
 699:../CM3 Core/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 700:../CM3 Core/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 701:../CM3 Core/core_cm3.h **** 
 702:../CM3 Core/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 703:../CM3 Core/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 704:../CM3 Core/core_cm3.h **** 
 705:../CM3 Core/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 706:../CM3 Core/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 707:../CM3 Core/core_cm3.h **** 
 708:../CM3 Core/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 709:../CM3 Core/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 710:../CM3 Core/core_cm3.h **** 
 711:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_MPU */
 712:../CM3 Core/core_cm3.h **** #endif
 713:../CM3 Core/core_cm3.h **** 
 714:../CM3 Core/core_cm3.h **** 
 715:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 716:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 717:../CM3 Core/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 718:../CM3 Core/core_cm3.h ****   @{
 719:../CM3 Core/core_cm3.h ****  */
 720:../CM3 Core/core_cm3.h **** 
 721:../CM3 Core/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 722:../CM3 Core/core_cm3.h ****  */
 723:../CM3 Core/core_cm3.h **** typedef struct
 724:../CM3 Core/core_cm3.h **** {
 725:../CM3 Core/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 726:../CM3 Core/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 727:../CM3 Core/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 728:../CM3 Core/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 729:../CM3 Core/core_cm3.h **** } CoreDebug_Type;
 730:../CM3 Core/core_cm3.h **** 
 731:../CM3 Core/core_cm3.h **** /* Debug Halting Control and Status Register */
 732:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 733:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 734:../CM3 Core/core_cm3.h **** 
 735:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 736:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 737:../CM3 Core/core_cm3.h **** 
 738:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 739:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 740:../CM3 Core/core_cm3.h **** 
 741:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 742:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 743:../CM3 Core/core_cm3.h **** 
 744:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 745:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 746:../CM3 Core/core_cm3.h **** 
 747:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 748:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 749:../CM3 Core/core_cm3.h **** 
 750:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 751:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 752:../CM3 Core/core_cm3.h **** 
 753:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 754:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 755:../CM3 Core/core_cm3.h **** 
 756:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 757:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 758:../CM3 Core/core_cm3.h **** 
 759:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 760:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 761:../CM3 Core/core_cm3.h **** 
 762:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 763:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 764:../CM3 Core/core_cm3.h **** 
 765:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 766:../CM3 Core/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 767:../CM3 Core/core_cm3.h **** 
 768:../CM3 Core/core_cm3.h **** /* Debug Core Register Selector Register */
 769:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 770:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 771:../CM3 Core/core_cm3.h **** 
 772:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 773:../CM3 Core/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 774:../CM3 Core/core_cm3.h **** 
 775:../CM3 Core/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 776:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 777:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 778:../CM3 Core/core_cm3.h **** 
 779:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 780:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 781:../CM3 Core/core_cm3.h **** 
 782:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 783:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 784:../CM3 Core/core_cm3.h **** 
 785:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 786:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 787:../CM3 Core/core_cm3.h **** 
 788:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 789:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 790:../CM3 Core/core_cm3.h **** 
 791:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 792:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 793:../CM3 Core/core_cm3.h **** 
 794:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 795:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 796:../CM3 Core/core_cm3.h **** 
 797:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 798:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 799:../CM3 Core/core_cm3.h **** 
 800:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 801:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 802:../CM3 Core/core_cm3.h **** 
 803:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 804:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 805:../CM3 Core/core_cm3.h **** 
 806:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 807:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 808:../CM3 Core/core_cm3.h **** 
 809:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 810:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 811:../CM3 Core/core_cm3.h **** 
 812:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 813:../CM3 Core/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 814:../CM3 Core/core_cm3.h **** 
 815:../CM3 Core/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 816:../CM3 Core/core_cm3.h **** 
 817:../CM3 Core/core_cm3.h **** 
 818:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_core_register
 819:../CM3 Core/core_cm3.h ****   @{
 820:../CM3 Core/core_cm3.h ****  */
 821:../CM3 Core/core_cm3.h **** 
 822:../CM3 Core/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 823:../CM3 Core/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 824:../CM3 Core/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 825:../CM3 Core/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 826:../CM3 Core/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 827:../CM3 Core/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 828:../CM3 Core/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 829:../CM3 Core/core_cm3.h **** 
 830:../CM3 Core/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 831:../CM3 Core/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 832:../CM3 Core/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 833:../CM3 Core/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 834:../CM3 Core/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 835:../CM3 Core/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 836:../CM3 Core/core_cm3.h **** 
 837:../CM3 Core/core_cm3.h **** #if (__MPU_PRESENT == 1)
 838:../CM3 Core/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 839:../CM3 Core/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 840:../CM3 Core/core_cm3.h **** #endif
 841:../CM3 Core/core_cm3.h **** 
 842:../CM3 Core/core_cm3.h **** /*@} */
 843:../CM3 Core/core_cm3.h **** 
 844:../CM3 Core/core_cm3.h **** 
 845:../CM3 Core/core_cm3.h **** 
 846:../CM3 Core/core_cm3.h **** /*******************************************************************************
 847:../CM3 Core/core_cm3.h ****  *                Hardware Abstraction Layer
 848:../CM3 Core/core_cm3.h ****  ******************************************************************************/
 849:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS
 850:../CM3 Core/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 851:../CM3 Core/core_cm3.h ****   Core Function Interface contains:
 852:../CM3 Core/core_cm3.h ****   - Core NVIC Functions
 853:../CM3 Core/core_cm3.h ****   - Core SysTick Functions
 854:../CM3 Core/core_cm3.h ****   - Core Debug Functions
 855:../CM3 Core/core_cm3.h ****   - Core Register Access Functions
 856:../CM3 Core/core_cm3.h **** */
 857:../CM3 Core/core_cm3.h **** 
 858:../CM3 Core/core_cm3.h **** 
 859:../CM3 Core/core_cm3.h **** 
 860:../CM3 Core/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 861:../CM3 Core/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 862:../CM3 Core/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 863:../CM3 Core/core_cm3.h ****   @{
 864:../CM3 Core/core_cm3.h ****  */
 865:../CM3 Core/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 866:../CM3 Core/core_cm3.h ****  * @{
 867:../CM3 Core/core_cm3.h ****  */
 868:../CM3 Core/core_cm3.h **** /** \brief  Set Priority Grouping
 869:../CM3 Core/core_cm3.h **** 
 870:../CM3 Core/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 871:../CM3 Core/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 872:../CM3 Core/core_cm3.h ****   Only values from 0..7 are used.
 873:../CM3 Core/core_cm3.h ****   In case of a conflict between priority grouping and available
 874:../CM3 Core/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 875:../CM3 Core/core_cm3.h **** 
 876:../CM3 Core/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 877:../CM3 Core/core_cm3.h ****  */
 878:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 879:../CM3 Core/core_cm3.h **** {
 880:../CM3 Core/core_cm3.h ****   uint32_t reg_value;
 881:../CM3 Core/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 882:../CM3 Core/core_cm3.h **** 
 883:../CM3 Core/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 884:../CM3 Core/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 885:../CM3 Core/core_cm3.h ****   reg_value  =  (reg_value                       |
 886:../CM3 Core/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 887:../CM3 Core/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 888:../CM3 Core/core_cm3.h ****   SCB->AIRCR =  reg_value;
 889:../CM3 Core/core_cm3.h **** }
 890:../CM3 Core/core_cm3.h **** 
 891:../CM3 Core/core_cm3.h **** 
 892:../CM3 Core/core_cm3.h **** /** \brief  Get Priority Grouping
 893:../CM3 Core/core_cm3.h **** 
 894:../CM3 Core/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 895:../CM3 Core/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 896:../CM3 Core/core_cm3.h **** 
 897:../CM3 Core/core_cm3.h ****     \return                Priority grouping field
 898:../CM3 Core/core_cm3.h ****  */
 899:../CM3 Core/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 900:../CM3 Core/core_cm3.h **** {
 901:../CM3 Core/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 902:../CM3 Core/core_cm3.h **** }
 903:../CM3 Core/core_cm3.h **** 
 904:../CM3 Core/core_cm3.h **** 
 905:../CM3 Core/core_cm3.h **** /** \brief  Enable External Interrupt
 906:../CM3 Core/core_cm3.h **** 
 907:../CM3 Core/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 908:../CM3 Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 909:../CM3 Core/core_cm3.h **** 
 910:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 911:../CM3 Core/core_cm3.h ****  */
 912:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 913:../CM3 Core/core_cm3.h **** {
 914:../CM3 Core/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 915:../CM3 Core/core_cm3.h **** }
 916:../CM3 Core/core_cm3.h **** 
 917:../CM3 Core/core_cm3.h **** 
 918:../CM3 Core/core_cm3.h **** /** \brief  Disable External Interrupt
 919:../CM3 Core/core_cm3.h **** 
 920:../CM3 Core/core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 921:../CM3 Core/core_cm3.h ****     The interrupt number cannot be a negative value.
 922:../CM3 Core/core_cm3.h **** 
 923:../CM3 Core/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 924:../CM3 Core/core_cm3.h ****  */
 925:../CM3 Core/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 926:../CM3 Core/core_cm3.h **** {
 927:../CM3 Core/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 101              		.loc 2 927 0
 102 0044 144B     		ldr	r3, .L18+16
 103 0046 4FF40012 		mov	r2, #2097152
 104 004a C3F88020 		str	r2, [r3, #128]
 105 004e 16E0     		b	.L5
 106              	.LVL4:
 107              	.L3:
 108              	.LBE47:
 109              	.LBE46:
  58:../Source Files/lpc17xx_gpio.c **** 		else if(CalTouch==1)
 110              		.loc 1 58 0
 111 0050 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 112 0052 012A     		cmp	r2, #1
 113 0054 13D1     		bne	.L5
  60:../Source Files/lpc17xx_gpio.c **** 			TSC2004_Read_Values(&Touch);
 114              		.loc 1 60 0
 115 0056 01A8     		add	r0, sp, #4
 116 0058 FFF7FEFF 		bl	TSC2004_Read_Values
 117              	.LVL5:
  61:../Source Files/lpc17xx_gpio.c **** 			if((Touch.x!=0) && (Touch.y!=0))
 118              		.loc 1 61 0
 119 005c BDF80400 		ldrh	r0, [sp, #4]
 120 0060 81B2     		uxth	r1, r0
 121 0062 61B1     		cbz	r1, .L5
  61:../Source Files/lpc17xx_gpio.c **** 			if((Touch.x!=0) && (Touch.y!=0))
 122              		.loc 1 61 0 is_stmt 0 discriminator 1
 123 0064 BDF80630 		ldrh	r3, [sp, #6]
 124 0068 9AB2     		uxth	r2, r3
 125 006a 42B1     		cbz	r2, .L5
  63:../Source Files/lpc17xx_gpio.c **** 				gTouch.x=Touch.x;
 126              		.loc 1 63 0 is_stmt 1
 127 006c BDF80400 		ldrh	r0, [sp, #4]
 128 0070 084B     		ldr	r3, .L18+12
 129 0072 81B2     		uxth	r1, r0
 130 0074 1980     		strh	r1, [r3, #0]	@ movhi
  64:../Source Files/lpc17xx_gpio.c **** 				gTouch.y=Touch.y;
 131              		.loc 1 64 0
 132 0076 BDF80620 		ldrh	r2, [sp, #6]
 133 007a 90B2     		uxth	r0, r2
 134 007c 5880     		strh	r0, [r3, #2]	@ movhi
 135              	.L5:
  67:../Source Files/lpc17xx_gpio.c **** 		TReady=TRUE;
 136              		.loc 1 67 0
 137 007e 0749     		ldr	r1, .L18+20
 138 0080 0120     		movs	r0, #1
 139 0082 0870     		strb	r0, [r1, #0]
 140              	.LVL6:
 141              	.L1:
  69:../Source Files/lpc17xx_gpio.c **** }
 142              		.loc 1 69 0
 143 0084 0EBD     		pop	{r1, r2, r3, pc}
 144              	.L19:
 145 0086 00BF     		.align	2
 146              	.L18:
 147 0088 80800240 		.word	1073905792
 148 008c 00000000 		.word	CalTouch
 149 0090 00000000 		.word	cmatrix
 150 0094 00000000 		.word	gTouch
 151 0098 00E100E0 		.word	-536813312
 152 009c 00000000 		.word	TReady
 153              		.cfi_endproc
 154              	.LFE55:
 156              		.align	1
 157              		.global	GPIO_SetDir
 158              		.thumb
 159              		.thumb_func
 161              	GPIO_SetDir:
 162              	.LFB59:
 205:../Source Files/lpc17xx_gpio.c **** {
 163              		.loc 1 205 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168              	.LVL7:
 169 00a0 0428     		cmp	r0, #4
 170 00a2 0BD8     		bhi	.L20
 171 00a4 064B     		ldr	r3, .L27
 172 00a6 53F82000 		ldr	r0, [r3, r0, lsl #2]
 173              	.LVL8:
 208:../Source Files/lpc17xx_gpio.c **** 	if (pGPIO != NULL) {
 174              		.loc 1 208 0
 175 00aa 38B1     		cbz	r0, .L20
 210:../Source Files/lpc17xx_gpio.c **** 		if (dir) {
 176              		.loc 1 210 0
 177 00ac 12B1     		cbz	r2, .L22
 211:../Source Files/lpc17xx_gpio.c **** 			pGPIO->FIODIR |= bitValue;
 178              		.loc 1 211 0
 179 00ae 0368     		ldr	r3, [r0, #0]
 180 00b0 1943     		orrs	r1, r1, r3
 181              	.LVL9:
 182 00b2 02E0     		b	.L26
 183              	.LVL10:
 184              	.L22:
 215:../Source Files/lpc17xx_gpio.c **** 			pGPIO->FIODIR &= ~bitValue;
 185              		.loc 1 215 0
 186 00b4 0268     		ldr	r2, [r0, #0]
 187              	.LVL11:
 188 00b6 22EA0101 		bic	r1, r2, r1
 189              	.LVL12:
 190              	.L26:
 191 00ba 0160     		str	r1, [r0, #0]
 192              	.LVL13:
 193              	.L20:
 194 00bc 7047     		bx	lr
 195              	.L28:
 196 00be 00BF     		.align	2
 197              	.L27:
 198 00c0 00000000 		.word	.LANCHOR0
 199              		.cfi_endproc
 200              	.LFE59:
 202              		.align	1
 203              		.global	GPIO_SetValue
 204              		.thumb
 205              		.thumb_func
 207              	GPIO_SetValue:
 208              	.LFB60:
 236:../Source Files/lpc17xx_gpio.c **** {
 209              		.loc 1 236 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 214              	.LVL14:
 215 00c4 0428     		cmp	r0, #4
 216 00c6 04D8     		bhi	.L29
 217 00c8 024B     		ldr	r3, .L34
 218 00ca 53F82000 		ldr	r0, [r3, r0, lsl #2]
 219              	.LVL15:
 239:../Source Files/lpc17xx_gpio.c **** 	if (pGPIO != NULL) {
 220              		.loc 1 239 0
 221 00ce 00B1     		cbz	r0, .L29
 240:../Source Files/lpc17xx_gpio.c **** 		pGPIO->FIOSET = bitValue;
 222              		.loc 1 240 0
 223 00d0 8161     		str	r1, [r0, #24]
 224              	.LVL16:
 225              	.L29:
 226 00d2 7047     		bx	lr
 227              	.L35:
 228              		.align	2
 229              	.L34:
 230 00d4 00000000 		.word	.LANCHOR0
 231              		.cfi_endproc
 232              	.LFE60:
 234              		.align	1
 235              		.global	GPIO_ClearValue
 236              		.thumb
 237              		.thumb_func
 239              	GPIO_ClearValue:
 240              	.LFB61:
 259:../Source Files/lpc17xx_gpio.c **** {
 241              		.loc 1 259 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246              	.LVL17:
 247 00d8 0428     		cmp	r0, #4
 248 00da 04D8     		bhi	.L36
 249 00dc 024B     		ldr	r3, .L41
 250 00de 53F82000 		ldr	r0, [r3, r0, lsl #2]
 251              	.LVL18:
 262:../Source Files/lpc17xx_gpio.c **** 	if (pGPIO != NULL) {
 252              		.loc 1 262 0
 253 00e2 00B1     		cbz	r0, .L36
 263:../Source Files/lpc17xx_gpio.c **** 		pGPIO->FIOCLR = bitValue;
 254              		.loc 1 263 0
 255 00e4 C161     		str	r1, [r0, #28]
 256              	.LVL19:
 257              	.L36:
 258 00e6 7047     		bx	lr
 259              	.L42:
 260              		.align	2
 261              	.L41:
 262 00e8 00000000 		.word	.LANCHOR0
 263              		.cfi_endproc
 264              	.LFE61:
 266              		.align	1
 267              		.global	GPIO_ReadValue
 268              		.thumb
 269              		.thumb_func
 271              	GPIO_ReadValue:
 272              	.LFB62:
 276:../Source Files/lpc17xx_gpio.c **** {
 273              		.loc 1 276 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278              	.LVL20:
 279 00ec 0428     		cmp	r0, #4
 280 00ee 05D8     		bhi	.L45
 281 00f0 034B     		ldr	r3, .L47
 282 00f2 53F82000 		ldr	r0, [r3, r0, lsl #2]
 283              	.LVL21:
 279:../Source Files/lpc17xx_gpio.c **** 	if (pGPIO != NULL) {
 284              		.loc 1 279 0
 285 00f6 10B1     		cbz	r0, .L44
 280:../Source Files/lpc17xx_gpio.c **** 		return pGPIO->FIOPIN;
 286              		.loc 1 280 0
 287 00f8 4069     		ldr	r0, [r0, #20]
 288              	.LVL22:
 289 00fa 7047     		bx	lr
 290              	.LVL23:
 291              	.L45:
 292              	.LBB48:
 283:../Source Files/lpc17xx_gpio.c **** 	return (0);
 293              		.loc 1 283 0
 294 00fc 0020     		movs	r0, #0
 295              	.LVL24:
 296              	.L44:
 297              	.LBE48:
 284:../Source Files/lpc17xx_gpio.c **** }
 298              		.loc 1 284 0
 299 00fe 7047     		bx	lr
 300              	.L48:
 301              		.align	2
 302              	.L47:
 303 0100 00000000 		.word	.LANCHOR0
 304              		.cfi_endproc
 305              	.LFE62:
 307              		.align	1
 308              		.global	GPIO_IntCmd
 309              		.thumb
 310              		.thumb_func
 312              	GPIO_IntCmd:
 313              	.LFB63:
 298:../Source Files/lpc17xx_gpio.c **** {
 314              		.loc 1 298 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319              	.LVL25:
 299:../Source Files/lpc17xx_gpio.c **** 	if((portNum == 0)&&(edgeState == 0))
 320              		.loc 1 299 0
 321 0104 18B9     		cbnz	r0, .L50
 299:../Source Files/lpc17xx_gpio.c **** 	if((portNum == 0)&&(edgeState == 0))
 322              		.loc 1 299 0 is_stmt 0 discriminator 1
 323 0106 42B9     		cbnz	r2, .L51
 300:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO0IntEnR = bitValue;
 324              		.loc 1 300 0 is_stmt 1
 325 0108 094B     		ldr	r3, .L56
 326 010a 1961     		str	r1, [r3, #16]
 327 010c 7047     		bx	lr
 328              	.L50:
 301:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2)&&(edgeState == 0))
 329              		.loc 1 301 0
 330 010e 0228     		cmp	r0, #2
 331 0110 0DD1     		bne	.L53
 301:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2)&&(edgeState == 0))
 332              		.loc 1 301 0 is_stmt 0 discriminator 1
 333 0112 3AB9     		cbnz	r2, .L54
 302:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO2IntEnR = bitValue;
 334              		.loc 1 302 0 is_stmt 1
 335 0114 0648     		ldr	r0, .L56
 336              	.LVL26:
 337 0116 0163     		str	r1, [r0, #48]
 338 0118 7047     		bx	lr
 339              	.LVL27:
 340              	.L51:
 303:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 0)&&(edgeState == 1))
 341              		.loc 1 303 0 discriminator 1
 342 011a 012A     		cmp	r2, #1
 343 011c 07D1     		bne	.L53
 304:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO0IntEnF = bitValue;
 344              		.loc 1 304 0
 345 011e 044A     		ldr	r2, .L56
 346              	.LVL28:
 347 0120 5161     		str	r1, [r2, #20]
 348 0122 7047     		bx	lr
 349              	.LVL29:
 350              	.L54:
 305:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2)&&(edgeState == 1))
 351              		.loc 1 305 0 discriminator 1
 352 0124 012A     		cmp	r2, #1
 353 0126 02D1     		bne	.L53
 306:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO2IntEnF = bitValue;
 354              		.loc 1 306 0
 355 0128 014B     		ldr	r3, .L56
 356 012a 5963     		str	r1, [r3, #52]
 357 012c 7047     		bx	lr
 358              	.L53:
 359              	.L55:
 360 012e FEE7     		b	.L55
 361              	.L57:
 362              		.align	2
 363              	.L56:
 364 0130 80800240 		.word	1073905792
 365              		.cfi_endproc
 366              	.LFE63:
 368              		.align	1
 369              		.global	GPIO_GetIntStatus
 370              		.thumb
 371              		.thumb_func
 373              	GPIO_GetIntStatus:
 374              	.LFB64:
 326:../Source Files/lpc17xx_gpio.c **** {
 375              		.loc 1 326 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              		@ link register save eliminated.
 380              	.LVL30:
 327:../Source Files/lpc17xx_gpio.c **** 	if((portNum == 0) && (edgeState == 0))//Rising Edge
 381              		.loc 1 327 0
 382 0134 18B9     		cbnz	r0, .L59
 327:../Source Files/lpc17xx_gpio.c **** 	if((portNum == 0) && (edgeState == 0))//Rising Edge
 383              		.loc 1 327 0 is_stmt 0 discriminator 1
 384 0136 42B9     		cbnz	r2, .L60
 328:../Source Files/lpc17xx_gpio.c **** 		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatR)>>pinNum)& 0x1));
 385              		.loc 1 328 0 is_stmt 1
 386 0138 0B48     		ldr	r0, .L66
 387              	.LVL31:
 388 013a 4068     		ldr	r0, [r0, #4]
 389 013c 0EE0     		b	.L65
 390              	.LVL32:
 391              	.L59:
 329:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2) && (edgeState == 0))
 392              		.loc 1 329 0
 393 013e 0228     		cmp	r0, #2
 394 0140 11D1     		bne	.L62
 329:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2) && (edgeState == 0))
 395              		.loc 1 329 0 is_stmt 0 discriminator 1
 396 0142 3AB9     		cbnz	r2, .L63
 330:../Source Files/lpc17xx_gpio.c **** 		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatR)>>pinNum)& 0x1));
 397              		.loc 1 330 0 is_stmt 1
 398 0144 084A     		ldr	r2, .L66
 399              	.LVL33:
 400 0146 506A     		ldr	r0, [r2, #36]
 401              	.LVL34:
 402 0148 08E0     		b	.L65
 403              	.LVL35:
 404              	.L60:
 331:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 0) && (edgeState == 1))//Falling Edge
 405              		.loc 1 331 0 discriminator 1
 406 014a 012A     		cmp	r2, #1
 407 014c 0BD1     		bne	.L62
 332:../Source Files/lpc17xx_gpio.c **** 		return ((FunctionalState)(((LPC_GPIOINT->IO0IntStatF)>>pinNum)& 0x1));
 408              		.loc 1 332 0
 409 014e 064B     		ldr	r3, .L66
 410 0150 9868     		ldr	r0, [r3, #8]
 411              	.LVL36:
 412 0152 03E0     		b	.L65
 413              	.LVL37:
 414              	.L63:
 333:../Source Files/lpc17xx_gpio.c **** 	else if ((portNum == 2) && (edgeState == 1))
 415              		.loc 1 333 0 discriminator 1
 416 0154 012A     		cmp	r2, #1
 417 0156 06D1     		bne	.L62
 334:../Source Files/lpc17xx_gpio.c **** 		return ((FunctionalState)(((LPC_GPIOINT->IO2IntStatF)>>pinNum)& 0x1));
 418              		.loc 1 334 0
 419 0158 034B     		ldr	r3, .L66
 420 015a 986A     		ldr	r0, [r3, #40]
 421              	.LVL38:
 422              	.L65:
 423 015c 20FA01F1 		lsr	r1, r0, r1
 424              	.LVL39:
 425 0160 01F00100 		and	r0, r1, #1
 426 0164 7047     		bx	lr
 427              	.LVL40:
 428              	.L62:
 429              	.L64:
 430 0166 FEE7     		b	.L64
 431              	.L67:
 432              		.align	2
 433              	.L66:
 434 0168 80800240 		.word	1073905792
 435              		.cfi_endproc
 436              	.LFE64:
 438              		.align	1
 439              		.global	GPIO_ClearInt
 440              		.thumb
 441              		.thumb_func
 443              	GPIO_ClearInt:
 444              	.LFB65:
 347:../Source Files/lpc17xx_gpio.c **** {
 445              		.loc 1 347 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450              	.LVL41:
 348:../Source Files/lpc17xx_gpio.c **** 	if(portNum == 0)
 451              		.loc 1 348 0
 452 016c 10B9     		cbnz	r0, .L69
 349:../Source Files/lpc17xx_gpio.c **** 		LPC_GPIOINT->IO0IntClr = bitValue;
 453              		.loc 1 349 0
 454 016e 0448     		ldr	r0, .L73
 455              	.LVL42:
 456 0170 C160     		str	r1, [r0, #12]
 457 0172 7047     		bx	lr
 458              	.LVL43:
 459              	.L69:
 350:../Source Files/lpc17xx_gpio.c **** 	else if (portNum == 2)
 460              		.loc 1 350 0
 461 0174 0228     		cmp	r0, #2
 462 0176 02D1     		bne	.L72
 463              		.loc 1 351 0
 464 0178 014B     		ldr	r3, .L73
 465 017a D962     		str	r1, [r3, #44]
 466 017c 7047     		bx	lr
 467              	.L72:
 468 017e FEE7     		b	.L72
 469              	.L74:
 470              		.align	2
 471              	.L73:
 472 0180 80800240 		.word	1073905792
 473              		.cfi_endproc
 474              	.LFE65:
 476              		.align	1
 477              		.global	FIO_SetDir
 478              		.thumb
 479              		.thumb_func
 481              	FIO_SetDir:
 482              	.LFB66:
 352:../Source Files/lpc17xx_gpio.c **** 	else
 353:../Source Files/lpc17xx_gpio.c **** 		//Invalid portNum
 354:../Source Files/lpc17xx_gpio.c **** 		while(1);
 355:../Source Files/lpc17xx_gpio.c **** }
 356:../Source Files/lpc17xx_gpio.c **** 
 357:../Source Files/lpc17xx_gpio.c **** /* FIO word accessible ----------------------------------------------------------------- */
 358:../Source Files/lpc17xx_gpio.c **** /* Stub function for FIO (word-accessible) style */
 359:../Source Files/lpc17xx_gpio.c **** 
 360:../Source Files/lpc17xx_gpio.c **** /**
 361:../Source Files/lpc17xx_gpio.c ****  * @brief The same with GPIO_SetDir()
 362:../Source Files/lpc17xx_gpio.c ****  */
 363:../Source Files/lpc17xx_gpio.c **** void FIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
 364:../Source Files/lpc17xx_gpio.c **** {
 483              		.loc 1 364 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 488              	.LVL44:
 365:../Source Files/lpc17xx_gpio.c **** 	GPIO_SetDir(portNum, bitValue, dir);
 366:../Source Files/lpc17xx_gpio.c **** }
 489              		.loc 1 366 0
 365:../Source Files/lpc17xx_gpio.c **** 	GPIO_SetDir(portNum, bitValue, dir);
 490              		.loc 1 365 0
 491 0184 FFF7FEBF 		b	GPIO_SetDir
 492              	.LVL45:
 493              		.cfi_endproc
 494              	.LFE66:
 496              		.align	1
 497              		.global	FIO_SetValue
 498              		.thumb
 499              		.thumb_func
 501              	FIO_SetValue:
 502              	.LFB67:
 367:../Source Files/lpc17xx_gpio.c **** 
 368:../Source Files/lpc17xx_gpio.c **** /**
 369:../Source Files/lpc17xx_gpio.c ****  * @brief The same with GPIO_SetValue()
 370:../Source Files/lpc17xx_gpio.c ****  */
 371:../Source Files/lpc17xx_gpio.c **** void FIO_SetValue(uint8_t portNum, uint32_t bitValue)
 372:../Source Files/lpc17xx_gpio.c **** {
 503              		.loc 1 372 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508              	.LVL46:
 373:../Source Files/lpc17xx_gpio.c **** 	GPIO_SetValue(portNum, bitValue);
 374:../Source Files/lpc17xx_gpio.c **** }
 509              		.loc 1 374 0
 373:../Source Files/lpc17xx_gpio.c **** 	GPIO_SetValue(portNum, bitValue);
 510              		.loc 1 373 0
 511 0188 FFF7FEBF 		b	GPIO_SetValue
 512              	.LVL47:
 513              		.cfi_endproc
 514              	.LFE67:
 516              		.align	1
 517              		.global	FIO_ClearValue
 518              		.thumb
 519              		.thumb_func
 521              	FIO_ClearValue:
 522              	.LFB68:
 375:../Source Files/lpc17xx_gpio.c **** 
 376:../Source Files/lpc17xx_gpio.c **** /**
 377:../Source Files/lpc17xx_gpio.c ****  * @brief The same with GPIO_ClearValue()
 378:../Source Files/lpc17xx_gpio.c ****  */
 379:../Source Files/lpc17xx_gpio.c **** void FIO_ClearValue(uint8_t portNum, uint32_t bitValue)
 380:../Source Files/lpc17xx_gpio.c **** {
 523              		.loc 1 380 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              		@ link register save eliminated.
 528              	.LVL48:
 381:../Source Files/lpc17xx_gpio.c **** 	GPIO_ClearValue(portNum, bitValue);
 382:../Source Files/lpc17xx_gpio.c **** }
 529              		.loc 1 382 0
 381:../Source Files/lpc17xx_gpio.c **** 	GPIO_ClearValue(portNum, bitValue);
 530              		.loc 1 381 0
 531 018c FFF7FEBF 		b	GPIO_ClearValue
 532              	.LVL49:
 533              		.cfi_endproc
 534              	.LFE68:
 536              		.align	1
 537              		.global	FIO_ReadValue
 538              		.thumb
 539              		.thumb_func
 541              	FIO_ReadValue:
 542              	.LFB69:
 383:../Source Files/lpc17xx_gpio.c **** 
 384:../Source Files/lpc17xx_gpio.c **** /**
 385:../Source Files/lpc17xx_gpio.c ****  * @brief The same with GPIO_ReadValue()
 386:../Source Files/lpc17xx_gpio.c ****  */
 387:../Source Files/lpc17xx_gpio.c **** uint32_t FIO_ReadValue(uint8_t portNum)
 388:../Source Files/lpc17xx_gpio.c **** {
 543              		.loc 1 388 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548              	.LVL50:
 389:../Source Files/lpc17xx_gpio.c **** 	return (GPIO_ReadValue(portNum));
 390:../Source Files/lpc17xx_gpio.c **** }
 549              		.loc 1 390 0
 389:../Source Files/lpc17xx_gpio.c **** 	return (GPIO_ReadValue(portNum));
 550              		.loc 1 389 0
 551 0190 FFF7FEBF 		b	GPIO_ReadValue
 552              	.LVL51:
 553              		.cfi_endproc
 554              	.LFE69:
 556              		.align	1
 557              		.global	FIO_IntCmd
 558              		.thumb
 559              		.thumb_func
 561              	FIO_IntCmd:
 562              	.LFB70:
 391:../Source Files/lpc17xx_gpio.c **** 
 392:../Source Files/lpc17xx_gpio.c **** /**
 393:../Source Files/lpc17xx_gpio.c ****  * @brief The same with GPIO_IntCmd()
 394:../Source Files/lpc17xx_gpio.c ****  */
 395:../Source Files/lpc17xx_gpio.c **** void FIO_IntCmd(uint8_t portNum, uint32_t bitValue, uint8_t edgeState)
 396:../Source Files/lpc17xx_gpio.c **** {
 563              		.loc 1 396 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 0, uses_anonymous_args = 0
 567              		@ link register save eliminated.
 568              	.LVL52:
 397:../Source Files/lpc17xx_gpio.c **** 	GPIO_IntCmd(portNum, bitValue, edgeState);
 398:../Source Files/lpc17xx_gpio.c **** }
 569              		.loc 1 398 0
 397:../Source Files/lpc17xx_gpio.c **** 	GPIO_IntCmd(portNum, bitValue, edgeState);
 570              		.loc 1 397 0
 571 0194 FFF7FEBF 		b	GPIO_IntCmd
 572              	.LVL53:
 573              		.cfi_endproc
 574              	.LFE70:
 576              		.align	1
 577              		.global	FIO_GetIntStatus
 578              		.thumb
 579              		.thumb_func
 581              	FIO_GetIntStatus:
 582              	.LFB71:
 399:../Source Files/lpc17xx_gpio.c **** 
 400:../Source Files/lpc17xx_gpio.c **** /**
 401:../Source Files/lpc17xx_gpio.c ****  * @brief The same with GPIO_GetIntStatus()
 402:../Source Files/lpc17xx_gpio.c ****  */
 403:../Source Files/lpc17xx_gpio.c **** FunctionalState FIO_GetIntStatus(uint8_t portNum, uint32_t pinNum, uint8_t edgeState)
 404:../Source Files/lpc17xx_gpio.c **** {
 583              		.loc 1 404 0
 584              		.cfi_startproc
 585              		@ args = 0, pretend = 0, frame = 0
 586              		@ frame_needed = 0, uses_anonymous_args = 0
 587              		@ link register save eliminated.
 588              	.LVL54:
 405:../Source Files/lpc17xx_gpio.c **** 	return (GPIO_GetIntStatus(portNum, pinNum, edgeState));
 406:../Source Files/lpc17xx_gpio.c **** }
 589              		.loc 1 406 0
 405:../Source Files/lpc17xx_gpio.c **** 	return (GPIO_GetIntStatus(portNum, pinNum, edgeState));
 590              		.loc 1 405 0
 591 0198 FFF7FEBF 		b	GPIO_GetIntStatus
 592              	.LVL55:
 593              		.cfi_endproc
 594              	.LFE71:
 596              		.align	1
 597              		.global	FIO_ClearInt
 598              		.thumb
 599              		.thumb_func
 601              	FIO_ClearInt:
 602              	.LFB72:
 407:../Source Files/lpc17xx_gpio.c **** 
 408:../Source Files/lpc17xx_gpio.c **** /**
 409:../Source Files/lpc17xx_gpio.c ****  * @brief The same with GPIO_ClearInt()
 410:../Source Files/lpc17xx_gpio.c ****  */
 411:../Source Files/lpc17xx_gpio.c **** void FIO_ClearInt(uint8_t portNum, uint32_t bitValue)
 412:../Source Files/lpc17xx_gpio.c **** {
 603              		.loc 1 412 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 608              	.LVL56:
 413:../Source Files/lpc17xx_gpio.c **** 	GPIO_ClearInt(portNum, bitValue);
 414:../Source Files/lpc17xx_gpio.c **** }
 609              		.loc 1 414 0
 413:../Source Files/lpc17xx_gpio.c **** 	GPIO_ClearInt(portNum, bitValue);
 610              		.loc 1 413 0
 611 019c FFF7FEBF 		b	GPIO_ClearInt
 612              	.LVL57:
 613              		.cfi_endproc
 614              	.LFE72:
 616              		.align	1
 617              		.global	FIO_SetMask
 618              		.thumb
 619              		.thumb_func
 621              	FIO_SetMask:
 622              	.LFB73:
 415:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 416:../Source Files/lpc17xx_gpio.c ****  * @brief		Set mask value for bits in FIO port
 417:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 418:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits in to set,
 419:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFFFFFF.
 420:../Source Files/lpc17xx_gpio.c ****  * @param[in]	maskValue	Mask value contains state value for each bit:
 421:../Source Files/lpc17xx_gpio.c ****  * 							- 0: not mask.
 422:../Source Files/lpc17xx_gpio.c ****  * 							- 1: mask.
 423:../Source Files/lpc17xx_gpio.c ****  * @return		None
 424:../Source Files/lpc17xx_gpio.c ****  *
 425:../Source Files/lpc17xx_gpio.c ****  * Note:
 426:../Source Files/lpc17xx_gpio.c ****  * - All remaining bits that are not activated in bitValue (value '0')
 427:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 428:../Source Files/lpc17xx_gpio.c ****  * - After executing this function, in mask register, value '0' on each bit
 429:../Source Files/lpc17xx_gpio.c ****  * enables an access to the corresponding physical pin via a read or write access,
 430:../Source Files/lpc17xx_gpio.c ****  * while value '1' on bit (masked) that corresponding pin will not be changed
 431:../Source Files/lpc17xx_gpio.c ****  * with write access and if read, will not be reflected in the updated pin.
 432:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 433:../Source Files/lpc17xx_gpio.c **** void FIO_SetMask(uint8_t portNum, uint32_t bitValue, uint8_t maskValue)
 434:../Source Files/lpc17xx_gpio.c **** {
 623              		.loc 1 434 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              		@ link register save eliminated.
 628              	.LVL58:
 629 01a0 0428     		cmp	r0, #4
 630 01a2 0BD8     		bhi	.L82
 631 01a4 064B     		ldr	r3, .L89
 632 01a6 53F82000 		ldr	r0, [r3, r0, lsl #2]
 633              	.LVL59:
 435:../Source Files/lpc17xx_gpio.c **** 	LPC_GPIO_TypeDef *pFIO = GPIO_GetPointer(portNum);
 436:../Source Files/lpc17xx_gpio.c **** 	if(pFIO != NULL) {
 634              		.loc 1 436 0
 635 01aa 38B1     		cbz	r0, .L82
 437:../Source Files/lpc17xx_gpio.c **** 		// Mask
 438:../Source Files/lpc17xx_gpio.c **** 		if (maskValue){
 636              		.loc 1 438 0
 637 01ac 12B1     		cbz	r2, .L84
 439:../Source Files/lpc17xx_gpio.c **** 			pFIO->FIOMASK |= bitValue;
 638              		.loc 1 439 0
 639 01ae 0369     		ldr	r3, [r0, #16]
 640 01b0 1943     		orrs	r1, r1, r3
 641              	.LVL60:
 642 01b2 02E0     		b	.L88
 643              	.LVL61:
 644              	.L84:
 440:../Source Files/lpc17xx_gpio.c **** 		}
 441:../Source Files/lpc17xx_gpio.c **** 		// Un-mask
 442:../Source Files/lpc17xx_gpio.c **** 		else {
 443:../Source Files/lpc17xx_gpio.c **** 			pFIO->FIOMASK &= ~bitValue;
 645              		.loc 1 443 0
 646 01b4 0269     		ldr	r2, [r0, #16]
 647              	.LVL62:
 648 01b6 22EA0101 		bic	r1, r2, r1
 649              	.LVL63:
 650              	.L88:
 651 01ba 0161     		str	r1, [r0, #16]
 652              	.LVL64:
 653              	.L82:
 654 01bc 7047     		bx	lr
 655              	.L90:
 656 01be 00BF     		.align	2
 657              	.L89:
 658 01c0 00000000 		.word	.LANCHOR0
 659              		.cfi_endproc
 660              	.LFE73:
 662              		.align	1
 663              		.global	FIO_HalfWordSetDir
 664              		.thumb
 665              		.thumb_func
 667              	FIO_HalfWordSetDir:
 668              	.LFB74:
 444:../Source Files/lpc17xx_gpio.c **** 		}
 445:../Source Files/lpc17xx_gpio.c **** 	}
 446:../Source Files/lpc17xx_gpio.c **** }
 447:../Source Files/lpc17xx_gpio.c **** 
 448:../Source Files/lpc17xx_gpio.c **** 
 449:../Source Files/lpc17xx_gpio.c **** /* FIO halfword accessible ------------------------------------------------------------- */
 450:../Source Files/lpc17xx_gpio.c **** 
 451:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 452:../Source Files/lpc17xx_gpio.c ****  * @brief		Set direction for FIO port in halfword accessible style
 453:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 454:../Source Files/lpc17xx_gpio.c ****  * @param[in]	halfwordNum	HalfWord part number, should be 0 (lower) or 1(upper)
 455:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits in to set direction,
 456:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFF.
 457:../Source Files/lpc17xx_gpio.c ****  * @param[in]	dir			Direction value, should be:
 458:../Source Files/lpc17xx_gpio.c ****  * 							- 0: Input.
 459:../Source Files/lpc17xx_gpio.c ****  * 							- 1: Output.
 460:../Source Files/lpc17xx_gpio.c ****  * @return		None
 461:../Source Files/lpc17xx_gpio.c ****  *
 462:../Source Files/lpc17xx_gpio.c ****  * Note: All remaining bits that are not activated in bitValue (value '0')
 463:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 464:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 465:../Source Files/lpc17xx_gpio.c **** void FIO_HalfWordSetDir(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t dir)
 466:../Source Files/lpc17xx_gpio.c **** {
 669              		.loc 1 466 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              	.LVL65:
 674 01c4 0428     		cmp	r0, #4
 675 01c6 10B5     		push	{r4, lr}
 676              	.LCFI1:
 677              		.cfi_def_cfa_offset 8
 678              		.cfi_offset 4, -8
 679              		.cfi_offset 14, -4
 680 01c8 19D8     		bhi	.L91
 681 01ca 0D4C     		ldr	r4, .L101
 682 01cc 04EB8000 		add	r0, r4, r0, lsl #2
 683              	.LVL66:
 684 01d0 4069     		ldr	r0, [r0, #20]
 685              	.LVL67:
 467:../Source Files/lpc17xx_gpio.c **** 	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
 468:../Source Files/lpc17xx_gpio.c **** 	if(pFIO != NULL) {
 686              		.loc 1 468 0
 687 01d2 A0B1     		cbz	r0, .L91
 469:../Source Files/lpc17xx_gpio.c **** 		// Output direction
 470:../Source Files/lpc17xx_gpio.c **** 		if (dir) {
 688              		.loc 1 470 0
 689 01d4 43B1     		cbz	r3, .L93
 471:../Source Files/lpc17xx_gpio.c **** 			// Upper
 472:../Source Files/lpc17xx_gpio.c **** 			if(halfwordNum) {
 690              		.loc 1 472 0
 691 01d6 19B1     		cbz	r1, .L94
 473:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIODIRU |= bitValue;
 692              		.loc 1 473 0
 693 01d8 4388     		ldrh	r3, [r0, #2]
 694              	.LVL68:
 695 01da 99B2     		uxth	r1, r3
 696              	.LVL69:
 697 01dc 0A43     		orrs	r2, r2, r1
 698              	.LVL70:
 699 01de 08E0     		b	.L100
 700              	.LVL71:
 701              	.L94:
 474:../Source Files/lpc17xx_gpio.c **** 			}
 475:../Source Files/lpc17xx_gpio.c **** 			// lower
 476:../Source Files/lpc17xx_gpio.c **** 			else {
 477:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIODIRL |= bitValue;
 702              		.loc 1 477 0
 703 01e0 0388     		ldrh	r3, [r0, #0]
 704              	.LVL72:
 705 01e2 99B2     		uxth	r1, r3
 706              	.LVL73:
 707 01e4 0A43     		orrs	r2, r2, r1
 708              	.LVL74:
 709 01e6 09E0     		b	.L99
 710              	.LVL75:
 711              	.L93:
 712 01e8 D243     		mvns	r2, r2
 713              	.LVL76:
 478:../Source Files/lpc17xx_gpio.c **** 			}
 479:../Source Files/lpc17xx_gpio.c **** 		}
 480:../Source Files/lpc17xx_gpio.c **** 		// Input direction
 481:../Source Files/lpc17xx_gpio.c **** 		else {
 482:../Source Files/lpc17xx_gpio.c **** 			// Upper
 483:../Source Files/lpc17xx_gpio.c **** 			if(halfwordNum) {
 714              		.loc 1 483 0
 715 01ea 21B1     		cbz	r1, .L95
 484:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIODIRU &= ~bitValue;
 716              		.loc 1 484 0
 717 01ec 4388     		ldrh	r3, [r0, #2]
 718              	.LVL77:
 719 01ee 99B2     		uxth	r1, r3
 720              	.LVL78:
 721 01f0 0A40     		ands	r2, r2, r1
 722              	.L100:
 723 01f2 4280     		strh	r2, [r0, #2]	@ movhi
 724 01f4 10BD     		pop	{r4, pc}
 725              	.LVL79:
 726              	.L95:
 485:../Source Files/lpc17xx_gpio.c **** 			}
 486:../Source Files/lpc17xx_gpio.c **** 			// lower
 487:../Source Files/lpc17xx_gpio.c **** 			else {
 488:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIODIRL &= ~bitValue;
 727              		.loc 1 488 0
 728 01f6 0388     		ldrh	r3, [r0, #0]
 729              	.LVL80:
 730 01f8 99B2     		uxth	r1, r3
 731              	.LVL81:
 732 01fa 0A40     		ands	r2, r2, r1
 733              	.L99:
 734 01fc 0280     		strh	r2, [r0, #0]	@ movhi
 735              	.LVL82:
 736              	.L91:
 737 01fe 10BD     		pop	{r4, pc}
 738              	.L102:
 739              		.align	2
 740              	.L101:
 741 0200 00000000 		.word	.LANCHOR0
 742              		.cfi_endproc
 743              	.LFE74:
 745              		.align	1
 746              		.global	FIO_HalfWordSetMask
 747              		.thumb
 748              		.thumb_func
 750              	FIO_HalfWordSetMask:
 751              	.LFB75:
 489:../Source Files/lpc17xx_gpio.c **** 			}
 490:../Source Files/lpc17xx_gpio.c **** 		}
 491:../Source Files/lpc17xx_gpio.c **** 	}
 492:../Source Files/lpc17xx_gpio.c **** }
 493:../Source Files/lpc17xx_gpio.c **** 
 494:../Source Files/lpc17xx_gpio.c **** 
 495:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 496:../Source Files/lpc17xx_gpio.c ****  * @brief		Set mask value for bits in FIO port in halfword accessible style
 497:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 498:../Source Files/lpc17xx_gpio.c ****  * @param[in]	halfwordNum	HalfWord part number, should be 0 (lower) or 1(upper)
 499:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits in to set,
 500:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFF.
 501:../Source Files/lpc17xx_gpio.c ****  * @param[in]	maskValue	Mask value contains state value for each bit:
 502:../Source Files/lpc17xx_gpio.c ****  * 					- 0: not mask.
 503:../Source Files/lpc17xx_gpio.c ****  * 					- 1: mask.
 504:../Source Files/lpc17xx_gpio.c ****  * @return		None
 505:../Source Files/lpc17xx_gpio.c ****  *
 506:../Source Files/lpc17xx_gpio.c ****  * Note:
 507:../Source Files/lpc17xx_gpio.c ****  * - All remaining bits that are not activated in bitValue (value '0')
 508:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 509:../Source Files/lpc17xx_gpio.c ****  * - After executing this function, in mask register, value '0' on each bit
 510:../Source Files/lpc17xx_gpio.c ****  * enables an access to the corresponding physical pin via a read or write access,
 511:../Source Files/lpc17xx_gpio.c ****  * while value '1' on bit (masked) that corresponding pin will not be changed
 512:../Source Files/lpc17xx_gpio.c ****  * with write access and if read, will not be reflected in the updated pin.
 513:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 514:../Source Files/lpc17xx_gpio.c **** void FIO_HalfWordSetMask(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue, uint8_t maskValue
 515:../Source Files/lpc17xx_gpio.c **** {
 752              		.loc 1 515 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756              	.LVL83:
 757 0204 0428     		cmp	r0, #4
 758 0206 10B5     		push	{r4, lr}
 759              	.LCFI2:
 760              		.cfi_def_cfa_offset 8
 761              		.cfi_offset 4, -8
 762              		.cfi_offset 14, -4
 763 0208 19D8     		bhi	.L103
 764 020a 0D4C     		ldr	r4, .L113
 765 020c 04EB8000 		add	r0, r4, r0, lsl #2
 766              	.LVL84:
 767 0210 4069     		ldr	r0, [r0, #20]
 768              	.LVL85:
 516:../Source Files/lpc17xx_gpio.c **** 	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
 517:../Source Files/lpc17xx_gpio.c **** 	if(pFIO != NULL) {
 769              		.loc 1 517 0
 770 0212 A0B1     		cbz	r0, .L103
 518:../Source Files/lpc17xx_gpio.c **** 		// Mask
 519:../Source Files/lpc17xx_gpio.c **** 		if (maskValue){
 771              		.loc 1 519 0
 772 0214 43B1     		cbz	r3, .L105
 520:../Source Files/lpc17xx_gpio.c **** 			// Upper
 521:../Source Files/lpc17xx_gpio.c **** 			if(halfwordNum) {
 773              		.loc 1 521 0
 774 0216 19B1     		cbz	r1, .L106
 522:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIOMASKU |= bitValue;
 775              		.loc 1 522 0
 776 0218 438A     		ldrh	r3, [r0, #18]
 777              	.LVL86:
 778 021a 99B2     		uxth	r1, r3
 779              	.LVL87:
 780 021c 0A43     		orrs	r2, r2, r1
 781              	.LVL88:
 782 021e 08E0     		b	.L112
 783              	.LVL89:
 784              	.L106:
 523:../Source Files/lpc17xx_gpio.c **** 			}
 524:../Source Files/lpc17xx_gpio.c **** 			// lower
 525:../Source Files/lpc17xx_gpio.c **** 			else {
 526:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIOMASKL |= bitValue;
 785              		.loc 1 526 0
 786 0220 038A     		ldrh	r3, [r0, #16]
 787              	.LVL90:
 788 0222 99B2     		uxth	r1, r3
 789              	.LVL91:
 790 0224 0A43     		orrs	r2, r2, r1
 791              	.LVL92:
 792 0226 09E0     		b	.L111
 793              	.LVL93:
 794              	.L105:
 795 0228 D243     		mvns	r2, r2
 796              	.LVL94:
 527:../Source Files/lpc17xx_gpio.c **** 			}
 528:../Source Files/lpc17xx_gpio.c **** 		}
 529:../Source Files/lpc17xx_gpio.c **** 		// Un-mask
 530:../Source Files/lpc17xx_gpio.c **** 		else {
 531:../Source Files/lpc17xx_gpio.c **** 			// Upper
 532:../Source Files/lpc17xx_gpio.c **** 			if(halfwordNum) {
 797              		.loc 1 532 0
 798 022a 21B1     		cbz	r1, .L107
 533:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIOMASKU &= ~bitValue;
 799              		.loc 1 533 0
 800 022c 438A     		ldrh	r3, [r0, #18]
 801              	.LVL95:
 802 022e 99B2     		uxth	r1, r3
 803              	.LVL96:
 804 0230 0A40     		ands	r2, r2, r1
 805              	.L112:
 806 0232 4282     		strh	r2, [r0, #18]	@ movhi
 807 0234 10BD     		pop	{r4, pc}
 808              	.LVL97:
 809              	.L107:
 534:../Source Files/lpc17xx_gpio.c **** 			}
 535:../Source Files/lpc17xx_gpio.c **** 			// lower
 536:../Source Files/lpc17xx_gpio.c **** 			else {
 537:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIOMASKL &= ~bitValue;
 810              		.loc 1 537 0
 811 0236 038A     		ldrh	r3, [r0, #16]
 812              	.LVL98:
 813 0238 99B2     		uxth	r1, r3
 814              	.LVL99:
 815 023a 0A40     		ands	r2, r2, r1
 816              	.L111:
 817 023c 0282     		strh	r2, [r0, #16]	@ movhi
 818              	.LVL100:
 819              	.L103:
 820 023e 10BD     		pop	{r4, pc}
 821              	.L114:
 822              		.align	2
 823              	.L113:
 824 0240 00000000 		.word	.LANCHOR0
 825              		.cfi_endproc
 826              	.LFE75:
 828              		.align	1
 829              		.global	FIO_HalfWordSetValue
 830              		.thumb
 831              		.thumb_func
 833              	FIO_HalfWordSetValue:
 834              	.LFB76:
 538:../Source Files/lpc17xx_gpio.c **** 			}
 539:../Source Files/lpc17xx_gpio.c **** 		}
 540:../Source Files/lpc17xx_gpio.c **** 	}
 541:../Source Files/lpc17xx_gpio.c **** }
 542:../Source Files/lpc17xx_gpio.c **** 
 543:../Source Files/lpc17xx_gpio.c **** 
 544:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 545:../Source Files/lpc17xx_gpio.c ****  * @brief		Set bits for FIO port in halfword accessible style
 546:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 547:../Source Files/lpc17xx_gpio.c ****  * @param[in]	halfwordNum	HalfWord part number, should be 0 (lower) or 1(upper)
 548:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits in to set,
 549:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFF.
 550:../Source Files/lpc17xx_gpio.c ****  * @return		None
 551:../Source Files/lpc17xx_gpio.c ****  *
 552:../Source Files/lpc17xx_gpio.c ****  * Note:
 553:../Source Files/lpc17xx_gpio.c ****  * - For all bits that has been set as input direction, this function will
 554:../Source Files/lpc17xx_gpio.c ****  * not effect.
 555:../Source Files/lpc17xx_gpio.c ****  * - For all remaining bits that are not activated in bitValue (value '0')
 556:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 557:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 558:../Source Files/lpc17xx_gpio.c **** void FIO_HalfWordSetValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
 559:../Source Files/lpc17xx_gpio.c **** {
 835              		.loc 1 559 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 840              	.LVL101:
 841 0244 0428     		cmp	r0, #4
 842 0246 08D8     		bhi	.L115
 843 0248 044B     		ldr	r3, .L121
 844 024a 03EB8000 		add	r0, r3, r0, lsl #2
 845              	.LVL102:
 846 024e 4369     		ldr	r3, [r0, #20]
 847              	.LVL103:
 560:../Source Files/lpc17xx_gpio.c **** 	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
 561:../Source Files/lpc17xx_gpio.c **** 	if(pFIO != NULL) {
 848              		.loc 1 561 0
 849 0250 1BB1     		cbz	r3, .L115
 562:../Source Files/lpc17xx_gpio.c **** 		// Upper
 563:../Source Files/lpc17xx_gpio.c **** 		if(halfwordNum) {
 850              		.loc 1 563 0
 851 0252 09B1     		cbz	r1, .L117
 564:../Source Files/lpc17xx_gpio.c **** 			pFIO->FIOSETU = bitValue;
 852              		.loc 1 564 0
 853 0254 5A83     		strh	r2, [r3, #26]	@ movhi
 854 0256 7047     		bx	lr
 855              	.L117:
 565:../Source Files/lpc17xx_gpio.c **** 		}
 566:../Source Files/lpc17xx_gpio.c **** 		// lower
 567:../Source Files/lpc17xx_gpio.c **** 		else {
 568:../Source Files/lpc17xx_gpio.c **** 			pFIO->FIOSETL = bitValue;
 856              		.loc 1 568 0
 857 0258 1A83     		strh	r2, [r3, #24]	@ movhi
 858              	.LVL104:
 859              	.L115:
 860 025a 7047     		bx	lr
 861              	.L122:
 862              		.align	2
 863              	.L121:
 864 025c 00000000 		.word	.LANCHOR0
 865              		.cfi_endproc
 866              	.LFE76:
 868              		.align	1
 869              		.global	FIO_HalfWordClearValue
 870              		.thumb
 871              		.thumb_func
 873              	FIO_HalfWordClearValue:
 874              	.LFB77:
 569:../Source Files/lpc17xx_gpio.c **** 		}
 570:../Source Files/lpc17xx_gpio.c **** 	}
 571:../Source Files/lpc17xx_gpio.c **** }
 572:../Source Files/lpc17xx_gpio.c **** 
 573:../Source Files/lpc17xx_gpio.c **** 
 574:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 575:../Source Files/lpc17xx_gpio.c ****  * @brief		Clear bits for FIO port in halfword accessible style
 576:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 577:../Source Files/lpc17xx_gpio.c ****  * @param[in]	halfwordNum	HalfWord part number, should be 0 (lower) or 1(upper)
 578:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits in to clear,
 579:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFFFF.
 580:../Source Files/lpc17xx_gpio.c ****  * @return		None
 581:../Source Files/lpc17xx_gpio.c ****  *
 582:../Source Files/lpc17xx_gpio.c ****  * Note:
 583:../Source Files/lpc17xx_gpio.c ****  * - For all bits that has been set as input direction, this function will
 584:../Source Files/lpc17xx_gpio.c ****  * not effect.
 585:../Source Files/lpc17xx_gpio.c ****  * - For all remaining bits that are not activated in bitValue (value '0')
 586:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 587:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 588:../Source Files/lpc17xx_gpio.c **** void FIO_HalfWordClearValue(uint8_t portNum, uint8_t halfwordNum, uint16_t bitValue)
 589:../Source Files/lpc17xx_gpio.c **** {
 875              		.loc 1 589 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879              		@ link register save eliminated.
 880              	.LVL105:
 881 0260 0428     		cmp	r0, #4
 882 0262 08D8     		bhi	.L123
 883 0264 044B     		ldr	r3, .L129
 884 0266 03EB8000 		add	r0, r3, r0, lsl #2
 885              	.LVL106:
 886 026a 4369     		ldr	r3, [r0, #20]
 887              	.LVL107:
 590:../Source Files/lpc17xx_gpio.c **** 	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
 591:../Source Files/lpc17xx_gpio.c **** 	if(pFIO != NULL) {
 888              		.loc 1 591 0
 889 026c 1BB1     		cbz	r3, .L123
 592:../Source Files/lpc17xx_gpio.c **** 		// Upper
 593:../Source Files/lpc17xx_gpio.c **** 		if(halfwordNum) {
 890              		.loc 1 593 0
 891 026e 09B1     		cbz	r1, .L125
 594:../Source Files/lpc17xx_gpio.c **** 			pFIO->FIOCLRU = bitValue;
 892              		.loc 1 594 0
 893 0270 DA83     		strh	r2, [r3, #30]	@ movhi
 894 0272 7047     		bx	lr
 895              	.L125:
 595:../Source Files/lpc17xx_gpio.c **** 		}
 596:../Source Files/lpc17xx_gpio.c **** 		// lower
 597:../Source Files/lpc17xx_gpio.c **** 		else {
 598:../Source Files/lpc17xx_gpio.c **** 			pFIO->FIOCLRL = bitValue;
 896              		.loc 1 598 0
 897 0274 9A83     		strh	r2, [r3, #28]	@ movhi
 898              	.LVL108:
 899              	.L123:
 900 0276 7047     		bx	lr
 901              	.L130:
 902              		.align	2
 903              	.L129:
 904 0278 00000000 		.word	.LANCHOR0
 905              		.cfi_endproc
 906              	.LFE77:
 908              		.align	1
 909              		.global	FIO_HalfWordReadValue
 910              		.thumb
 911              		.thumb_func
 913              	FIO_HalfWordReadValue:
 914              	.LFB78:
 599:../Source Files/lpc17xx_gpio.c **** 		}
 600:../Source Files/lpc17xx_gpio.c **** 	}
 601:../Source Files/lpc17xx_gpio.c **** }
 602:../Source Files/lpc17xx_gpio.c **** 
 603:../Source Files/lpc17xx_gpio.c **** 
 604:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 605:../Source Files/lpc17xx_gpio.c ****  * @brief		Read Current state on port pin that have input direction of GPIO
 606:../Source Files/lpc17xx_gpio.c ****  * 				in halfword accessible style.
 607:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 608:../Source Files/lpc17xx_gpio.c ****  * @param[in]	halfwordNum	HalfWord part number, should be 0 (lower) or 1(upper)
 609:../Source Files/lpc17xx_gpio.c ****  * @return		Current value of FIO port pin of specified halfword.
 610:../Source Files/lpc17xx_gpio.c ****  * Note: Return value contain state of each port pin (bit) on that FIO regardless
 611:../Source Files/lpc17xx_gpio.c ****  * its direction is input or output.
 612:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 613:../Source Files/lpc17xx_gpio.c **** uint16_t FIO_HalfWordReadValue(uint8_t portNum, uint8_t halfwordNum)
 614:../Source Files/lpc17xx_gpio.c **** {
 915              		.loc 1 614 0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919              		@ link register save eliminated.
 920              	.LVL109:
 921 027c 0428     		cmp	r0, #4
 922 027e 0AD8     		bhi	.L134
 923 0280 064B     		ldr	r3, .L137
 924 0282 03EB8000 		add	r0, r3, r0, lsl #2
 925              	.LVL110:
 926 0286 4069     		ldr	r0, [r0, #20]
 927              	.LVL111:
 615:../Source Files/lpc17xx_gpio.c **** 	GPIO_HalfWord_TypeDef *pFIO = FIO_HalfWordGetPointer(portNum);
 616:../Source Files/lpc17xx_gpio.c **** 	if(pFIO != NULL) {
 928              		.loc 1 616 0
 929 0288 30B1     		cbz	r0, .L132
 617:../Source Files/lpc17xx_gpio.c **** 		// Upper
 618:../Source Files/lpc17xx_gpio.c **** 		if(halfwordNum) {
 930              		.loc 1 618 0
 931 028a 09B1     		cbz	r1, .L133
 619:../Source Files/lpc17xx_gpio.c **** 			return (pFIO->FIOPINU);
 932              		.loc 1 619 0
 933 028c C18A     		ldrh	r1, [r0, #22]
 934              	.LVL112:
 935 028e 00E0     		b	.L136
 936              	.LVL113:
 937              	.L133:
 620:../Source Files/lpc17xx_gpio.c **** 		}
 621:../Source Files/lpc17xx_gpio.c **** 		// lower
 622:../Source Files/lpc17xx_gpio.c **** 		else {
 623:../Source Files/lpc17xx_gpio.c **** 			return (pFIO->FIOPINL);
 938              		.loc 1 623 0
 939 0290 818A     		ldrh	r1, [r0, #20]
 940              	.LVL114:
 941              	.L136:
 942 0292 88B2     		uxth	r0, r1
 943              	.LVL115:
 944 0294 7047     		bx	lr
 945              	.LVL116:
 946              	.L134:
 947              	.LBB49:
 624:../Source Files/lpc17xx_gpio.c **** 		}
 625:../Source Files/lpc17xx_gpio.c **** 	}
 626:../Source Files/lpc17xx_gpio.c **** 	return (0);
 948              		.loc 1 626 0
 949 0296 0020     		movs	r0, #0
 950              	.LVL117:
 951              	.L132:
 952              	.LBE49:
 627:../Source Files/lpc17xx_gpio.c **** }
 953              		.loc 1 627 0
 954 0298 7047     		bx	lr
 955              	.L138:
 956 029a 00BF     		.align	2
 957              	.L137:
 958 029c 00000000 		.word	.LANCHOR0
 959              		.cfi_endproc
 960              	.LFE78:
 962              		.align	1
 963              		.global	FIO_ByteSetDir
 964              		.thumb
 965              		.thumb_func
 967              	FIO_ByteSetDir:
 968              	.LFB79:
 628:../Source Files/lpc17xx_gpio.c **** 
 629:../Source Files/lpc17xx_gpio.c **** 
 630:../Source Files/lpc17xx_gpio.c **** /* FIO Byte accessible ------------------------------------------------------------ */
 631:../Source Files/lpc17xx_gpio.c **** 
 632:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 633:../Source Files/lpc17xx_gpio.c ****  * @brief		Set direction for FIO port in byte accessible style
 634:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 635:../Source Files/lpc17xx_gpio.c ****  * @param[in]	byteNum		Byte part number, should be in range from 0 to 3
 636:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits in to set direction,
 637:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFF.
 638:../Source Files/lpc17xx_gpio.c ****  * @param[in]	dir			Direction value, should be:
 639:../Source Files/lpc17xx_gpio.c ****  * 							- 0: Input.
 640:../Source Files/lpc17xx_gpio.c ****  * 							- 1: Output.
 641:../Source Files/lpc17xx_gpio.c ****  * @return		None
 642:../Source Files/lpc17xx_gpio.c ****  *
 643:../Source Files/lpc17xx_gpio.c ****  * Note: All remaining bits that are not activated in bitValue (value '0')
 644:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 645:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 646:../Source Files/lpc17xx_gpio.c **** void FIO_ByteSetDir(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t dir)
 647:../Source Files/lpc17xx_gpio.c **** {
 969              		.loc 1 647 0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973              	.LVL118:
 974 02a0 0428     		cmp	r0, #4
 975 02a2 10B5     		push	{r4, lr}
 976              	.LCFI3:
 977              		.cfi_def_cfa_offset 8
 978              		.cfi_offset 4, -8
 979              		.cfi_offset 14, -4
 980 02a4 10D8     		bhi	.L139
 981 02a6 094C     		ldr	r4, .L146
 982 02a8 04EB8000 		add	r0, r4, r0, lsl #2
 983              	.LVL119:
 984 02ac 806A     		ldr	r0, [r0, #40]
 985              	.LVL120:
 648:../Source Files/lpc17xx_gpio.c **** 	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
 649:../Source Files/lpc17xx_gpio.c **** 	if(pFIO != NULL) {
 986              		.loc 1 649 0
 987 02ae 58B1     		cbz	r0, .L139
 650:../Source Files/lpc17xx_gpio.c **** 		// Output direction
 651:../Source Files/lpc17xx_gpio.c **** 		if (dir) {
 988              		.loc 1 651 0
 989 02b0 23B1     		cbz	r3, .L141
 652:../Source Files/lpc17xx_gpio.c **** 			if (byteNum <= 3) {
 990              		.loc 1 652 0
 991 02b2 0329     		cmp	r1, #3
 992 02b4 08D8     		bhi	.L139
 653:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIODIR[byteNum] |= bitValue;
 993              		.loc 1 653 0
 994 02b6 435C     		ldrb	r3, [r0, r1]	@ zero_extendqisi2
 995              	.LVL121:
 996 02b8 1A43     		orrs	r2, r2, r3
 997              	.LVL122:
 998 02ba 04E0     		b	.L145
 999              	.LVL123:
 1000              	.L141:
 654:../Source Files/lpc17xx_gpio.c **** 			}
 655:../Source Files/lpc17xx_gpio.c **** 		}
 656:../Source Files/lpc17xx_gpio.c **** 		// Input direction
 657:../Source Files/lpc17xx_gpio.c **** 		else {
 658:../Source Files/lpc17xx_gpio.c **** 			if (byteNum <= 3) {
 1001              		.loc 1 658 0
 1002 02bc 0329     		cmp	r1, #3
 1003 02be 03D8     		bhi	.L139
 659:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIODIR[byteNum] &= ~bitValue;
 1004              		.loc 1 659 0
 1005 02c0 435C     		ldrb	r3, [r0, r1]	@ zero_extendqisi2
 1006              	.LVL124:
 1007 02c2 23EA0202 		bic	r2, r3, r2
 1008              	.LVL125:
 1009              	.L145:
 1010 02c6 4254     		strb	r2, [r0, r1]
 1011              	.LVL126:
 1012              	.L139:
 1013 02c8 10BD     		pop	{r4, pc}
 1014              	.L147:
 1015 02ca 00BF     		.align	2
 1016              	.L146:
 1017 02cc 00000000 		.word	.LANCHOR0
 1018              		.cfi_endproc
 1019              	.LFE79:
 1021              		.align	1
 1022              		.global	FIO_ByteSetMask
 1023              		.thumb
 1024              		.thumb_func
 1026              	FIO_ByteSetMask:
 1027              	.LFB80:
 660:../Source Files/lpc17xx_gpio.c **** 			}
 661:../Source Files/lpc17xx_gpio.c **** 		}
 662:../Source Files/lpc17xx_gpio.c **** 	}
 663:../Source Files/lpc17xx_gpio.c **** }
 664:../Source Files/lpc17xx_gpio.c **** 
 665:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 666:../Source Files/lpc17xx_gpio.c ****  * @brief		Set mask value for bits in FIO port in byte accessible style
 667:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 668:../Source Files/lpc17xx_gpio.c ****  * @param[in]	byteNum		Byte part number, should be in range from 0 to 3
 669:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits in to set mask,
 670:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFF.
 671:../Source Files/lpc17xx_gpio.c ****  * @param[in]	maskValue	Mask value contains state value for each bit:
 672:../Source Files/lpc17xx_gpio.c ****  * 							- 0: not mask.
 673:../Source Files/lpc17xx_gpio.c ****  * 							- 1: mask.
 674:../Source Files/lpc17xx_gpio.c ****  * @return		None
 675:../Source Files/lpc17xx_gpio.c ****  *
 676:../Source Files/lpc17xx_gpio.c ****  * Note:
 677:../Source Files/lpc17xx_gpio.c ****  * - All remaining bits that are not activated in bitValue (value '0')
 678:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 679:../Source Files/lpc17xx_gpio.c ****  * - After executing this function, in mask register, value '0' on each bit
 680:../Source Files/lpc17xx_gpio.c ****  * enables an access to the corresponding physical pin via a read or write access,
 681:../Source Files/lpc17xx_gpio.c ****  * while value '1' on bit (masked) that corresponding pin will not be changed
 682:../Source Files/lpc17xx_gpio.c ****  * with write access and if read, will not be reflected in the updated pin.
 683:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 684:../Source Files/lpc17xx_gpio.c **** void FIO_ByteSetMask(uint8_t portNum, uint8_t byteNum, uint8_t bitValue, uint8_t maskValue)
 685:../Source Files/lpc17xx_gpio.c **** {
 1028              		.loc 1 685 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032              	.LVL127:
 1033 02d0 0428     		cmp	r0, #4
 1034 02d2 10B5     		push	{r4, lr}
 1035              	.LCFI4:
 1036              		.cfi_def_cfa_offset 8
 1037              		.cfi_offset 4, -8
 1038              		.cfi_offset 14, -4
 1039 02d4 12D8     		bhi	.L148
 1040 02d6 0A4C     		ldr	r4, .L155
 1041 02d8 04EB8000 		add	r0, r4, r0, lsl #2
 1042              	.LVL128:
 1043 02dc 806A     		ldr	r0, [r0, #40]
 1044              	.LVL129:
 686:../Source Files/lpc17xx_gpio.c **** 	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
 687:../Source Files/lpc17xx_gpio.c **** 	if(pFIO != NULL) {
 1045              		.loc 1 687 0
 1046 02de 68B1     		cbz	r0, .L148
 688:../Source Files/lpc17xx_gpio.c **** 		// Mask
 689:../Source Files/lpc17xx_gpio.c **** 		if (maskValue) {
 1047              		.loc 1 689 0
 1048 02e0 2BB1     		cbz	r3, .L150
 690:../Source Files/lpc17xx_gpio.c **** 			if (byteNum <= 3) {
 1049              		.loc 1 690 0
 1050 02e2 0329     		cmp	r1, #3
 1051 02e4 0AD8     		bhi	.L148
 691:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIOMASK[byteNum] |= bitValue;
 1052              		.loc 1 691 0
 1053 02e6 4118     		adds	r1, r0, r1
 1054              	.LVL130:
 1055 02e8 087C     		ldrb	r0, [r1, #16]	@ zero_extendqisi2
 1056              	.LVL131:
 1057 02ea 0243     		orrs	r2, r2, r0
 1058              	.LVL132:
 1059 02ec 05E0     		b	.L154
 1060              	.LVL133:
 1061              	.L150:
 692:../Source Files/lpc17xx_gpio.c **** 			}
 693:../Source Files/lpc17xx_gpio.c **** 		}
 694:../Source Files/lpc17xx_gpio.c **** 		// Un-mask
 695:../Source Files/lpc17xx_gpio.c **** 		else {
 696:../Source Files/lpc17xx_gpio.c **** 			if (byteNum <= 3) {
 1062              		.loc 1 696 0
 1063 02ee 0329     		cmp	r1, #3
 1064 02f0 04D8     		bhi	.L148
 697:../Source Files/lpc17xx_gpio.c **** 				pFIO->FIOMASK[byteNum] &= ~bitValue;
 1065              		.loc 1 697 0
 1066 02f2 4118     		adds	r1, r0, r1
 1067              	.LVL134:
 1068 02f4 0B7C     		ldrb	r3, [r1, #16]	@ zero_extendqisi2
 1069              	.LVL135:
 1070 02f6 23EA0202 		bic	r2, r3, r2
 1071              	.LVL136:
 1072              	.L154:
 1073 02fa 0A74     		strb	r2, [r1, #16]
 1074              	.L148:
 1075 02fc 10BD     		pop	{r4, pc}
 1076              	.L156:
 1077 02fe 00BF     		.align	2
 1078              	.L155:
 1079 0300 00000000 		.word	.LANCHOR0
 1080              		.cfi_endproc
 1081              	.LFE80:
 1083              		.align	1
 1084              		.global	FIO_ByteSetValue
 1085              		.thumb
 1086              		.thumb_func
 1088              	FIO_ByteSetValue:
 1089              	.LFB81:
 698:../Source Files/lpc17xx_gpio.c **** 			}
 699:../Source Files/lpc17xx_gpio.c **** 		}
 700:../Source Files/lpc17xx_gpio.c **** 	}
 701:../Source Files/lpc17xx_gpio.c **** }
 702:../Source Files/lpc17xx_gpio.c **** 
 703:../Source Files/lpc17xx_gpio.c **** 
 704:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 705:../Source Files/lpc17xx_gpio.c ****  * @brief		Set bits for FIO port in byte accessible style
 706:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 707:../Source Files/lpc17xx_gpio.c ****  * @param[in]	byteNum		Byte part number, should be in range from 0 to 3
 708:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits in to set,
 709:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFF.
 710:../Source Files/lpc17xx_gpio.c ****  * @return		None
 711:../Source Files/lpc17xx_gpio.c ****  *
 712:../Source Files/lpc17xx_gpio.c ****  * Note:
 713:../Source Files/lpc17xx_gpio.c ****  * - For all bits that has been set as input direction, this function will
 714:../Source Files/lpc17xx_gpio.c ****  * not effect.
 715:../Source Files/lpc17xx_gpio.c ****  * - For all remaining bits that are not activated in bitValue (value '0')
 716:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 717:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 718:../Source Files/lpc17xx_gpio.c **** void FIO_ByteSetValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
 719:../Source Files/lpc17xx_gpio.c **** {
 1090              		.loc 1 719 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              		@ link register save eliminated.
 1095              	.LVL137:
 1096 0304 0428     		cmp	r0, #4
 1097 0306 08D8     		bhi	.L157
 1098 0308 044B     		ldr	r3, .L162
 1099 030a 03EB8000 		add	r0, r3, r0, lsl #2
 1100              	.LVL138:
 1101 030e 836A     		ldr	r3, [r0, #40]
 1102              	.LVL139:
 720:../Source Files/lpc17xx_gpio.c **** 	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
 721:../Source Files/lpc17xx_gpio.c **** 	if (pFIO != NULL) {
 1103              		.loc 1 721 0
 1104 0310 1BB1     		cbz	r3, .L157
 722:../Source Files/lpc17xx_gpio.c **** 		if (byteNum <= 3){
 1105              		.loc 1 722 0
 1106 0312 0329     		cmp	r1, #3
 723:../Source Files/lpc17xx_gpio.c **** 			pFIO->FIOSET[byteNum] = bitValue;
 1107              		.loc 1 723 0
 1108 0314 9CBF     		itt	ls
 1109 0316 5918     		addls	r1, r3, r1
 1110              	.LVL140:
 1111 0318 0A76     		strbls	r2, [r1, #24]
 1112              	.LVL141:
 1113              	.L157:
 1114 031a 7047     		bx	lr
 1115              	.L163:
 1116              		.align	2
 1117              	.L162:
 1118 031c 00000000 		.word	.LANCHOR0
 1119              		.cfi_endproc
 1120              	.LFE81:
 1122              		.align	1
 1123              		.global	FIO_ByteClearValue
 1124              		.thumb
 1125              		.thumb_func
 1127              	FIO_ByteClearValue:
 1128              	.LFB82:
 724:../Source Files/lpc17xx_gpio.c **** 		}
 725:../Source Files/lpc17xx_gpio.c **** 	}
 726:../Source Files/lpc17xx_gpio.c **** }
 727:../Source Files/lpc17xx_gpio.c **** 
 728:../Source Files/lpc17xx_gpio.c **** 
 729:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 730:../Source Files/lpc17xx_gpio.c ****  * @brief		Clear bits for FIO port in byte accessible style
 731:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 732:../Source Files/lpc17xx_gpio.c ****  * @param[in]	byteNum		Byte part number, should be in range from 0 to 3
 733:../Source Files/lpc17xx_gpio.c ****  * @param[in]	bitValue	Value that contains all bits in to clear,
 734:../Source Files/lpc17xx_gpio.c ****  * 							in range from 0 to 0xFF.
 735:../Source Files/lpc17xx_gpio.c ****  * @return		None
 736:../Source Files/lpc17xx_gpio.c ****  *
 737:../Source Files/lpc17xx_gpio.c ****  * Note:
 738:../Source Files/lpc17xx_gpio.c ****  * - For all bits that has been set as input direction, this function will
 739:../Source Files/lpc17xx_gpio.c ****  * not effect.
 740:../Source Files/lpc17xx_gpio.c ****  * - For all remaining bits that are not activated in bitValue (value '0')
 741:../Source Files/lpc17xx_gpio.c ****  * will not be effected by this function.
 742:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 743:../Source Files/lpc17xx_gpio.c **** void FIO_ByteClearValue(uint8_t portNum, uint8_t byteNum, uint8_t bitValue)
 744:../Source Files/lpc17xx_gpio.c **** {
 1129              		.loc 1 744 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              		@ link register save eliminated.
 1134              	.LVL142:
 1135 0320 0428     		cmp	r0, #4
 1136 0322 08D8     		bhi	.L164
 1137 0324 044B     		ldr	r3, .L169
 1138 0326 03EB8000 		add	r0, r3, r0, lsl #2
 1139              	.LVL143:
 1140 032a 836A     		ldr	r3, [r0, #40]
 1141              	.LVL144:
 745:../Source Files/lpc17xx_gpio.c **** 	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
 746:../Source Files/lpc17xx_gpio.c **** 	if (pFIO != NULL) {
 1142              		.loc 1 746 0
 1143 032c 1BB1     		cbz	r3, .L164
 747:../Source Files/lpc17xx_gpio.c **** 		if (byteNum <= 3){
 1144              		.loc 1 747 0
 1145 032e 0329     		cmp	r1, #3
 748:../Source Files/lpc17xx_gpio.c **** 			pFIO->FIOCLR[byteNum] = bitValue;
 1146              		.loc 1 748 0
 1147 0330 9CBF     		itt	ls
 1148 0332 5918     		addls	r1, r3, r1
 1149              	.LVL145:
 1150 0334 0A77     		strbls	r2, [r1, #28]
 1151              	.LVL146:
 1152              	.L164:
 1153 0336 7047     		bx	lr
 1154              	.L170:
 1155              		.align	2
 1156              	.L169:
 1157 0338 00000000 		.word	.LANCHOR0
 1158              		.cfi_endproc
 1159              	.LFE82:
 1161              		.align	1
 1162              		.global	FIO_ByteReadValue
 1163              		.thumb
 1164              		.thumb_func
 1166              	FIO_ByteReadValue:
 1167              	.LFB83:
 749:../Source Files/lpc17xx_gpio.c **** 		}
 750:../Source Files/lpc17xx_gpio.c **** 	}
 751:../Source Files/lpc17xx_gpio.c **** }
 752:../Source Files/lpc17xx_gpio.c **** 
 753:../Source Files/lpc17xx_gpio.c **** 
 754:../Source Files/lpc17xx_gpio.c **** /*********************************************************************//**
 755:../Source Files/lpc17xx_gpio.c ****  * @brief		Read Current state on port pin that have input direction of GPIO
 756:../Source Files/lpc17xx_gpio.c ****  * 				in byte accessible style.
 757:../Source Files/lpc17xx_gpio.c ****  * @param[in]	portNum		Port number, in range from 0 to 4
 758:../Source Files/lpc17xx_gpio.c ****  * @param[in]	byteNum		Byte part number, should be in range from 0 to 3
 759:../Source Files/lpc17xx_gpio.c ****  * @return		Current value of FIO port pin of specified byte part.
 760:../Source Files/lpc17xx_gpio.c ****  * Note: Return value contain state of each port pin (bit) on that FIO regardless
 761:../Source Files/lpc17xx_gpio.c ****  * its direction is input or output.
 762:../Source Files/lpc17xx_gpio.c ****  **********************************************************************/
 763:../Source Files/lpc17xx_gpio.c **** uint8_t FIO_ByteReadValue(uint8_t portNum, uint8_t byteNum)
 764:../Source Files/lpc17xx_gpio.c **** {
 1168              		.loc 1 764 0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172              		@ link register save eliminated.
 1173              	.LVL147:
 1174 033c 0428     		cmp	r0, #4
 1175 033e 09D8     		bhi	.L175
 1176 0340 054B     		ldr	r3, .L176
 1177 0342 03EB8000 		add	r0, r3, r0, lsl #2
 1178              	.LVL148:
 1179 0346 806A     		ldr	r0, [r0, #40]
 1180              	.LVL149:
 765:../Source Files/lpc17xx_gpio.c **** 	GPIO_Byte_TypeDef *pFIO = FIO_ByteGetPointer(portNum);
 766:../Source Files/lpc17xx_gpio.c **** 	if (pFIO != NULL) {
 1181              		.loc 1 766 0
 1182 0348 28B1     		cbz	r0, .L172
 767:../Source Files/lpc17xx_gpio.c **** 		if (byteNum <= 3){
 1183              		.loc 1 767 0
 1184 034a 0329     		cmp	r1, #3
 1185 034c 02D8     		bhi	.L175
 768:../Source Files/lpc17xx_gpio.c **** 			return (pFIO->FIOPIN[byteNum]);
 1186              		.loc 1 768 0
 1187 034e 4118     		adds	r1, r0, r1
 1188              	.LVL150:
 1189 0350 087D     		ldrb	r0, [r1, #20]	@ zero_extendqisi2
 1190              	.LVL151:
 1191 0352 7047     		bx	lr
 1192              	.LVL152:
 1193              	.L175:
 769:../Source Files/lpc17xx_gpio.c **** 		}
 770:../Source Files/lpc17xx_gpio.c **** 	}
 771:../Source Files/lpc17xx_gpio.c **** 	return (0);
 1194              		.loc 1 771 0
 1195 0354 0020     		movs	r0, #0
 1196              	.L172:
 772:../Source Files/lpc17xx_gpio.c **** }
 1197              		.loc 1 772 0
 1198 0356 7047     		bx	lr
 1199              	.L177:
 1200              		.align	2
 1201              	.L176:
 1202 0358 00000000 		.word	.LANCHOR0
 1203              		.cfi_endproc
 1204              	.LFE83:
 1206              		.comm	I2C_Rx_Buf,64,1
 1207              		.comm	I2C_Tx_Buf,64,1
 1208              		.comm	Rx_Buf1,64,1
 1209              		.comm	Tx_Buf1,64,1
 1210              		.comm	TxIntStat,1,1
 1211              		.comm	rb,528,4
 1212              		.comm	EscFlag,2,2
 1213              		.section	.rodata
 1214              		.align	2
 1215              		.set	.LANCHOR0,. + 0
 1218              	CSWTCH.11:
 1219 0000 00C00920 		.word	537509888
 1220 0004 20C00920 		.word	537509920
 1221 0008 40C00920 		.word	537509952
 1222 000c 60C00920 		.word	537509984
 1223 0010 80C00920 		.word	537510016
 1226              	CSWTCH.14:
 1227 0014 00C00920 		.word	537509888
 1228 0018 20C00920 		.word	537509920
 1229 001c 40C00920 		.word	537509952
 1230 0020 60C00920 		.word	537509984
 1231 0024 80C00920 		.word	537510016
 1234              	CSWTCH.17:
 1235 0028 00C00920 		.word	537509888
 1236 002c 20C00920 		.word	537509920
 1237 0030 40C00920 		.word	537509952
 1238 0034 60C00920 		.word	537509984
 1239 0038 80C00920 		.word	537510016
 1240              		.text
 1241              	.Letext0:
 1242              		.file 3 "../CM3 Core/LPC17xx.h"
 1243              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.7 2013q2\\bin\\../lib/gcc/arm-none-eab
 1244              		.file 5 "../Header Files/lpc_types.h"
 1245              		.file 6 "../Header Files/lpc17xx_uart.h"
 1246              		.file 7 "../Header Files/lpc_glcd_cal.h"
 1247              		.file 8 "../Header Files/lpc_i2c_tsc2004.h"
 1248              		.file 9 "../Header Files/lpc17xx_gpio.h"
 1249              		.file 10 "../Header Files/lpc17xx_ssp.h"
 1250              		.file 11 "../Header Files/lpc17xx_i2c.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lpc17xx_gpio.c
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:18     .text:00000000 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:23     .text:00000000 EINT3_IRQHandler
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:147    .text:00000088 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:156    .text:000000a0 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:161    .text:000000a0 GPIO_SetDir
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:198    .text:000000c0 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:202    .text:000000c4 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:207    .text:000000c4 GPIO_SetValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:230    .text:000000d4 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:234    .text:000000d8 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:239    .text:000000d8 GPIO_ClearValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:262    .text:000000e8 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:266    .text:000000ec $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:271    .text:000000ec GPIO_ReadValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:303    .text:00000100 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:307    .text:00000104 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:312    .text:00000104 GPIO_IntCmd
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:364    .text:00000130 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:368    .text:00000134 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:373    .text:00000134 GPIO_GetIntStatus
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:434    .text:00000168 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:438    .text:0000016c $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:443    .text:0000016c GPIO_ClearInt
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:472    .text:00000180 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:476    .text:00000184 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:481    .text:00000184 FIO_SetDir
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:501    .text:00000188 FIO_SetValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:521    .text:0000018c FIO_ClearValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:541    .text:00000190 FIO_ReadValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:561    .text:00000194 FIO_IntCmd
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:581    .text:00000198 FIO_GetIntStatus
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:601    .text:0000019c FIO_ClearInt
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:621    .text:000001a0 FIO_SetMask
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:658    .text:000001c0 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:662    .text:000001c4 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:667    .text:000001c4 FIO_HalfWordSetDir
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:741    .text:00000200 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:745    .text:00000204 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:750    .text:00000204 FIO_HalfWordSetMask
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:824    .text:00000240 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:828    .text:00000244 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:833    .text:00000244 FIO_HalfWordSetValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:864    .text:0000025c $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:868    .text:00000260 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:873    .text:00000260 FIO_HalfWordClearValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:904    .text:00000278 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:908    .text:0000027c $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:913    .text:0000027c FIO_HalfWordReadValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:958    .text:0000029c $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:962    .text:000002a0 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:967    .text:000002a0 FIO_ByteSetDir
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1017   .text:000002cc $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1021   .text:000002d0 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1026   .text:000002d0 FIO_ByteSetMask
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1079   .text:00000300 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1083   .text:00000304 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1088   .text:00000304 FIO_ByteSetValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1118   .text:0000031c $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1122   .text:00000320 $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1127   .text:00000320 FIO_ByteClearValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1157   .text:00000338 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1161   .text:0000033c $t
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1166   .text:0000033c FIO_ByteReadValue
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1202   .text:00000358 $d
                            *COM*:00000040 I2C_Rx_Buf
                            *COM*:00000040 I2C_Tx_Buf
                            *COM*:00000040 Rx_Buf1
                            *COM*:00000040 Tx_Buf1
                            *COM*:00000001 TxIntStat
                            *COM*:00000210 rb
                            *COM*:00000002 EscFlag
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1214   .rodata:00000000 $d
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1218   .rodata:00000000 CSWTCH.11
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1226   .rodata:00000014 CSWTCH.14
C:\Users\raghav\AppData\Local\Temp\cclLlrFe.s:1234   .rodata:00000028 CSWTCH.17
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.549b84bf9d8399e395ff8216fcbb3d69
                           .group:00000000 wm4.LPC17xx.h.27.964facdaadd4aa3f18ac78c8a78f0013
                           .group:00000000 wm4.core_cm3.h.32.3cac756d6e704b813781f82afd94fa5f
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.25.6beb15babd14c076008ec0890c26e21c
                           .group:00000000 wm4.core_cm3.h.83.1a3cb9afc687cf157efeddb3d5f3109e
                           .group:00000000 wm4.LPC17xx.h.953.82b7a9ed60bb594048bc8738cf1d3489
                           .group:00000000 wm4.lpc_types.h.32.72d58ce80fabd1a5430c6ec0500a090b
                           .group:00000000 wm4.lpc17xx_pinsel.h.30.767cda9b27a5c688cd97e5947d664047
                           .group:00000000 wm4.lpc17xx_clkpwr.h.30.8537d92ff6965961e80fda89ac5019f2
                           .group:00000000 wm4.lpc17xx_systick.h.30.9f34c15ae315a203fed1d933040ad7b9
                           .group:00000000 wm4.lpc17xx_wdt.h.34.a2dcafab9849854019efb51f717a8129
                           .group:00000000 wm4.stdarg.h.31.b70f21342353634f7b44d85f85f13832
                           .group:00000000 wm4.lpc17xx_uart.h.58.dbba6e724b29a6214e9cafbaf3ee8a9e
                           .group:00000000 wm4.lpc17xx_ssp.h.48.cd045d667ab7b89d5d550d38997df61b
                           .group:00000000 wm4.lpc17xx_i2c.h.30.8ecc2351e7cba41135ba36b3ad45f764
                           .group:00000000 wm4.lpc_ssp_glcd.h.29.fd1be72cf95f09a7ec6c902842a1a822
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.math.h.35.cc9264b0ced3bd063c5784e64e89cf51
                           .group:00000000 wm4.lpc_glcd_cal.h.36.07281023d52dd7883e5e4c8a890cf1a4
                           .group:00000000 wm4.lpc_i2c_tsc2004.h.29.97f3f7cf57136a998c07fe66c226a2b2
                           .group:00000000 wm4.lpc17xx_gpio.h.48.9d83a3048c670bed300498c0197398d5

UNDEFINED SYMBOLS
TSC2004_Cal_Values
TSC2004_Read_Values
CalTouch
cmatrix
gTouch
TReady
